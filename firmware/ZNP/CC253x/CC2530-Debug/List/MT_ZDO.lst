###############################################################################
#
# IAR C/C++ Compiler V10.40.1.7397 for 8051               01/May/2021  14:39:41
# Copyright 2004-2021 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\Texas Instruments\Z-Stack 3.0.2\Components\mt\MT_ZDO.c
#    Command line       =  
#        -f C:\Users\asus\AppData\Local\Temp\EWD88B.tmp ("E:\Texas
#        Instruments\Z-Stack 3.0.2\Components\mt\MT_ZDO.c" -D
#        BDB_FINDING_BINDING_CAPABILITY_ENABLED=0 -D HAL_UART_DMA_RX_MAX=128 -D
#        MAXMEMHEAP=2765 -D TC_LINKKEY_JOIN -D NWK_MAX_DEVICE_LIST=10 -D
#        ZDSECMGR_TC_DEVICE_MAX=30 -D DISABLE_GREENPOWER_BASIC_PROXY -D
#        POWER_SAVING -D FEATURE_SYSTEM_STATS -D MT_GP_CB_FUNC -lC "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" -lA "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" --diag_suppress
#        Pe001,Pa010 -o "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj" -e --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_GP_CB_FUNC -DMT_APP_FUNC -DMT_APP_CNF_FUNC)
#        -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg" -I
#        "E:\Texas Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\Source\" -I "E:\Texas
#        Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\..\Source\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\gp\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\bdb\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  English_USA.1252
#    List file          =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-Debug\List\MT_ZDO.lst
#    Object file        =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj\MT_ZDO.r51
#
###############################################################################

E:\Texas Instruments\Z-Stack 3.0.2\Components\mt\MT_ZDO.c
      1          /**************************************************************************************************
      2            Filename:       MT_ZDO.c
      3            Revised:        $Date: 2015-02-05 17:15:13 -0800 (Thu, 05 Feb 2015) $
      4            Revision:       $Revision: 42371 $
      5          
      6            Description:    MonitorTest functions for the ZDO layer.
      7          
      8            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License"). You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product. Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          **************************************************************************************************/
     38          
     39          #ifdef MT_ZDO_FUNC
     40          
     41          /**************************************************************************************************
     42           * INCLUDES
     43           **************************************************************************************************/
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "OSAL_Nv.h"
     47          #include "MT.h"
     48          #include "MT_ZDO.h"
     49          #include "AddrMgr.h"
     50          #include "APSMEDE.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDApp.h"
     55          #include "OnBoard.h"
     56          #include "aps_groups.h"
     57          #include "bdb_interface.h"
     58          
     59          #if defined ( MT_ZDO_EXTENSIONS )
     60            #include "rtg.h"
     61          #endif
     62          #if defined ( MT_SYS_KEY_MANAGEMENT ) || defined ( MT_ZDO_EXTENSIONS )
     63            #include "ZDSecMgr.h"
     64          #endif
     65          
     66          #include "nwk_util.h"
     67          
     68          /**************************************************************************************************
     69           * CONSTANTS
     70           **************************************************************************************************/
     71          #define MT_ZDO_END_DEVICE_ANNCE_IND_LEN   0x0D
     72          #define MT_ZDO_ADDR_RSP_LEN               0x0D
     73          #define MT_ZDO_BIND_UNBIND_RSP_LEN        0x03
     74          #define MT_ZDO_BEACON_IND_LEN             21
     75          #define MT_ZDO_BEACON_IND_PACK_LEN        (MT_UART_TX_BUFF_MAX - SPI_0DATA_MSG_LEN)
     76          #define MT_ZDO_JOIN_CNF_LEN               5
     77          
     78          // Message must pack nwk addr, entire (not just pointer to) ieee addr, and packet cost, so the
     79          // sizeof(zdoConcentratorInd_t) is not usable.
     80          #define MT_ZDO_CONCENTRATOR_IND_LEN      (2 + Z_EXTADDR_LEN + 1)
     81          
     82          #define MTZDO_RESPONSE_BUFFER_LEN   100
     83          
     84          #define MTZDO_MAX_MATCH_CLUSTERS    16
     85          #define MTZDO_MAX_ED_BIND_CLUSTERS  15
     86          
     87          // Conversion from ZDO Cluster Id to the RPC AREQ Id is direct as follows:
     88          #define MT_ZDO_CID_TO_AREQ_ID(CId)  ((uint8)(CId) | 0x80)
     89          
     90          #define MT_ZDO_STATUS_LEN   1
     91          
     92          #if defined ( MT_ZDO_EXTENSIONS )
     93          typedef struct
     94          {
     95            uint16            ami;
     96            uint16            keyNvId;   // index to the Link Key table in NV
     97            ZDSecMgr_Authentication_Option authenticateOption;
     98          } ZDSecMgrEntry_t;
     99          #endif  // MT_ZDO_EXTENSIONS
    100          
    101          /**************************************************************************************************
    102           * GLOBAL VARIABLES
    103           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          uint32 _zdoCallbackSub;
   \                     _zdoCallbackSub:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    105          uint8 *pBeaconIndBuf = NULL;
   \                     pBeaconIndBuf:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    106          
    107          /**************************************************************************************************
    108           * LOCAL VARIABLES
    109           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    110          bool ignoreIndication = FALSE;
   \                     ignoreIndication:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    111          
    112          /**************************************************************************************************
    113           * LOCAL FUNCTIONS
    114           **************************************************************************************************/
    115          #if defined (MT_ZDO_FUNC)
    116          static void MT_ZdoNWKAddressRequest(uint8 *pBuf);
    117          static void MT_ZdoIEEEAddrRequest(uint8 *pBuf);
    118          static void MT_ZdoNodeDescRequest(uint8 *pBuf);
    119          static void MT_ZdoPowerDescRequest(uint8 *pBuf);
    120          static void MT_ZdoSimpleDescRequest(uint8 *pBuf);
    121          static void MT_ZdoActiveEpRequest(uint8 *pBuf);
    122          static void MT_ZdoMatchDescRequest(uint8 *pBuf);
    123          static void MT_ZdoComplexDescRequest(uint8 *pBuf);
    124          static void MT_ZdoUserDescRequest(uint8 *pBuf);
    125          static void MT_ZdoEndDevAnnce(uint8 *pBuf);
    126          static void MT_ZdoUserDescSet(uint8 *pBuf);
    127          static void MT_ZdoServiceDiscRequest(uint8 *pBuf);
    128          static void MT_ZdoEndDevBindRequest(uint8 *pBuf);
    129          static void MT_ZdoBindRequest(uint8 *pBuf);
    130          static void MT_ZdoUnbindRequest(uint8 *pBuf);
    131          #if defined ( MT_SYS_KEY_MANAGEMENT )
    132          static void MT_ZdoSetLinkKey(uint8 *pBuf);
    133          static void MT_ZdoRemoveLinkKey(uint8 *pBuf);
    134          static void MT_ZdoGetLinkKey(uint8 *pBuf);
    135          #endif /* MT_SYS_KEY_MANAGEMENT */
    136          static void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf);
    137          static void MT_ZdoJoinReq(uint8 *pBuf);
    138          /* Call back function */
    139          void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr );
    140          void *MT_ZdoBeaconIndCB ( void *pStr );
    141          void *MT_ZdoJoinCnfCB ( void *pStr );
    142          #if defined (MT_ZDO_MGMT)
    143          static void MT_ZdoMgmtLqiRequest(uint8 *pBuf);
    144          static void MT_ZdoMgmtRtgRequest(uint8 *pBuf);
    145          static void MT_ZdoMgmtBindRequest(uint8 *pBuf);
    146          static void MT_ZdoMgmtLeaveRequest(uint8 *pBuf);
    147          static void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf);
    148          static void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf);
    149          static void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf);
    150          static void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf);
    151          #endif /* MT_ZDO_MGMT */
    152          static void MT_ZdoSendData( uint8 *pBuf );
    153          static void MT_ZdoNwkAddrOfInterestReq( uint8 *pBuf );
    154          static void MT_ZdoStartupFromApp(uint8 *pBuf);
    155          static void MT_ZdoRegisterForZDOMsg(uint8 *pBuf);
    156          static void MT_ZdoRemoveRegisteredCB(uint8 *pBuf);
    157          static void MT_ZdoSetRejoinParameters(uint8 *pBuf);
    158          #endif /* MT_ZDO_FUNC */
    159          
    160          #if defined (MT_ZDO_CB_FUNC)
    161          uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg );
    162          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID );
    163          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr );
    164          void MT_ZdoBindUnbindRspCB( uint16 clusterID, uint16 srcAddr, uint8 status );
    165          void* MT_ZdoSrcRtgCB( void *pStr );
    166          static void *MT_ZdoConcentratorIndCB(void *pStr);
    167          static void *MT_ZdoLeaveInd(void *vPtr);
    168          void *MT_ZdoTcDeviceInd( void *params );
    169          void *MT_ZdoPermitJoinInd( void *duration );
    170          #endif /* MT_ZDO_CB_FUNC */
    171          
    172          #if defined ( MT_ZDO_EXTENSIONS )
    173          #if ( ZG_BUILD_COORDINATOR_TYPE )
    174          static void MT_ZdoSecUpdateNwkKey( uint8 *pBuf );
    175          static void MT_ZdoSecSwitchNwkKey( uint8 *pBuf );
    176          #endif // ZDO_COORDINATOR
    177          static void MT_ZdoSecAddLinkKey( uint8 *pBuf );
    178          static void MT_ZdoSecEntryLookupExt( uint8 *pBuf );
    179          static void MT_ZdoSecDeviceRemove( uint8 *pBuf );
    180          static void MT_ZdoExtRouteDisc( uint8 *pBuf );
    181          static void MT_ZdoExtRouteCheck( uint8 *pBuf );
    182          static void MT_ZdoExtRemoveGroup( uint8 *pBuf );
    183          static void MT_ZdoExtRemoveAllGroup( uint8 *pBuf );
    184          static void MT_ZdoExtFindAllGroupsEndpoint( uint8 *pBuf );
    185          static void MT_ZdoExtFindGroup( uint8 *pBuf );
    186          static void MT_ZdoExtAddGroup( uint8 *pBuf );
    187          static void MT_ZdoExtCountAllGroups( uint8 *pBuf );
    188          static void MT_ZdoExtRxIdle( uint8 *pBuf );
    189          static void MT_ZdoExtNwkInfo( uint8 *pBuf );
    190          static void MT_ZdoExtSecApsRemoveReq( uint8 *pBuf );
    191          static void MT_ZdoExtSetParams( uint8 *pBuf );
    192          extern ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
    193          #endif // MT_ZDO_EXTENSIONS
    194          
    195          #if defined (MT_ZDO_FUNC)
    196          /***************************************************************************************************
    197           * @fn      MT_ZdoInit
    198           *
    199           * @brief   MT ZDO initialization
    200           *
    201           * @param   none
    202           *
    203           * @return  none
    204           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    205          void MT_ZdoInit(void)
   \                     MT_ZdoInit:
    206          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    207          #ifdef MT_ZDO_CB_FUNC
    208            /* Register with ZDO for indication callbacks */
    209            ZDO_RegisterForZdoCB(ZDO_SRC_RTG_IND_CBID, &MT_ZdoSrcRtgCB);
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000004   7A..         MOV       R2,#`??MT_ZdoSrcRtgCB::?relay` & 0xff
   \   000006   7B..         MOV       R3,#(`??MT_ZdoSrcRtgCB::?relay` >> 8) & 0xff
   \   000008   7900         MOV       R1,#0x0
   \   00000A   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
    210            ZDO_RegisterForZdoCB(ZDO_CONCENTRATOR_IND_CBID, &MT_ZdoConcentratorIndCB);
   \   00000D                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   00000D   7A..         MOV       R2,#`??MT_ZdoConcentratorIndCB::?relay` & 0xff
   \   00000F   7B..         MOV       R3,#(`??MT_ZdoConcentratorIndCB::?relay` >> 8) & 0xff
   \   000011   7901         MOV       R1,#0x1
   \   000013   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
    211            ZDO_RegisterForZdoCB(ZDO_LEAVE_IND_CBID, &MT_ZdoLeaveInd);
   \   000016                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000016   7A..         MOV       R2,#`??MT_ZdoLeaveInd::?relay` & 0xff
   \   000018   7B..         MOV       R3,#(`??MT_ZdoLeaveInd::?relay` >> 8) & 0xff
   \   00001A   7906         MOV       R1,#0x6
   \   00001C   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
    212            ZDO_RegisterForZdoCB(ZDO_PERMIT_JOIN_CBID, &MT_ZdoPermitJoinInd);
   \   00001F                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   00001F   7A..         MOV       R2,#`??MT_ZdoPermitJoinInd::?relay` & 0xff
   \   000021   7B..         MOV       R3,#(`??MT_ZdoPermitJoinInd::?relay` >> 8) & 0xff
   \   000023   7907         MOV       R1,#0x7
   \   000025   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
    213            ZDO_RegisterForZdoCB(ZDO_TC_DEVICE_CBID, &MT_ZdoTcDeviceInd);
   \   000028                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000028   7A..         MOV       R2,#`??MT_ZdoTcDeviceInd::?relay` & 0xff
   \   00002A   7B..         MOV       R3,#(`??MT_ZdoTcDeviceInd::?relay` >> 8) & 0xff
   \   00002C   7908         MOV       R1,#0x8
   \   00002E   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
    214          #endif
    215          }
   \   000031                REQUIRE ?Subroutine0
   \   000031                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    216          
    217          /***************************************************************************************************
    218           * @fn      MT_ZdoCommandProcessing
    219           *
    220           * @brief
    221           *
    222           *   Process all the ZDO commands that are issued by test tool
    223           *
    224           * @param   pBuf - pointer to the msg buffer
    225           *
    226           *          | LEN  | CMD0  | CMD1  |  DATA  |
    227           *          |  1   |   1   |   1   |  0-255 |
    228           *
    229           * @return  status
    230           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    231          uint8 MT_ZdoCommandProcessing(uint8* pBuf)
   \                     MT_ZdoCommandProcessing:
    232          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 54
   \   000005   74CA         MOV       A,#-0x36
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    233            uint8 status = MT_RPC_SUCCESS;
   \   00000A   7E00         MOV       R6,#0x0
    234          
    235            switch (pBuf[MT_RPC_POS_CMD1])
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   7003         JNZ       $+5
   \   000015   02....       LJMP      ??MT_ZdoCommandProcessing_0 & 0xFFFF
   \   000018   14           DEC       A
   \   000019   7003         JNZ       $+5
   \   00001B   02....       LJMP      ??MT_ZdoCommandProcessing_1 & 0xFFFF
   \   00001E   14           DEC       A
   \   00001F   7003         JNZ       $+5
   \   000021   02....       LJMP      ??MT_ZdoCommandProcessing_2 & 0xFFFF
   \   000024   14           DEC       A
   \   000025   7003         JNZ       $+5
   \   000027   02....       LJMP      ??MT_ZdoCommandProcessing_3 & 0xFFFF
   \   00002A   14           DEC       A
   \   00002B   7003         JNZ       $+5
   \   00002D   02....       LJMP      ??MT_ZdoCommandProcessing_4 & 0xFFFF
   \   000030   14           DEC       A
   \   000031   7003         JNZ       $+5
   \   000033   02....       LJMP      ??MT_ZdoCommandProcessing_5 & 0xFFFF
   \   000036   14           DEC       A
   \   000037   7003         JNZ       $+5
   \   000039   02....       LJMP      ??MT_ZdoCommandProcessing_6 & 0xFFFF
   \   00003C   14           DEC       A
   \   00003D   7003         JNZ       $+5
   \   00003F   02....       LJMP      ??MT_ZdoCommandProcessing_7 & 0xFFFF
   \   000042   14           DEC       A
   \   000043   7003         JNZ       $+5
   \   000045   02....       LJMP      ??MT_ZdoCommandProcessing_8 & 0xFFFF
   \   000048   24FE         ADD       A,#-0x2
   \   00004A   7003         JNZ       $+5
   \   00004C   02....       LJMP      ??MT_ZdoCommandProcessing_9 & 0xFFFF
   \   00004F   14           DEC       A
   \   000050   7003         JNZ       $+5
   \   000052   02....       LJMP      ??MT_ZdoCommandProcessing_10 & 0xFFFF
   \   000055   14           DEC       A
   \   000056   7003         JNZ       $+5
   \   000058   02....       LJMP      ??MT_ZdoCommandProcessing_11 & 0xFFFF
   \   00005B   24EC         ADD       A,#-0x14
   \   00005D   7003         JNZ       $+5
   \   00005F   02....       LJMP      ??MT_ZdoCommandProcessing_12 & 0xFFFF
   \   000062   14           DEC       A
   \   000063   7003         JNZ       $+5
   \   000065   02....       LJMP      ??MT_ZdoCommandProcessing_13 & 0xFFFF
   \   000068   14           DEC       A
   \   000069   7003         JNZ       $+5
   \   00006B   02....       LJMP      ??MT_ZdoCommandProcessing_14 & 0xFFFF
   \   00006E   24FC         ADD       A,#-0x4
   \   000070   7003         JNZ       $+5
   \   000072   02....       LJMP      ??MT_ZdoCommandProcessing_15 & 0xFFFF
   \   000075   14           DEC       A
   \   000076   7003         JNZ       $+5
   \   000078   02....       LJMP      ??MT_ZdoCommandProcessing_16 & 0xFFFF
   \   00007B   14           DEC       A
   \   00007C   7003         JNZ       $+5
   \   00007E   02....       LJMP      ??MT_ZdoCommandProcessing_17 & 0xFFFF
   \   000081   14           DEC       A
   \   000082   7003         JNZ       $+5
   \   000084   02....       LJMP      ??MT_ZdoCommandProcessing_18 & 0xFFFF
   \   000087   24F9         ADD       A,#-0x7
   \   000089   7003         JNZ       $+5
   \   00008B   02....       LJMP      ??MT_ZdoCommandProcessing_19 & 0xFFFF
   \   00008E   14           DEC       A
   \   00008F   7003         JNZ       $+5
   \   000091   02....       LJMP      ??MT_ZdoCommandProcessing_20 & 0xFFFF
   \   000094   14           DEC       A
   \   000095   7003         JNZ       $+5
   \   000097   02....       LJMP      ??MT_ZdoCommandProcessing_21 & 0xFFFF
   \   00009A   14           DEC       A
   \   00009B   7003         JNZ       $+5
   \   00009D   02....       LJMP      ??MT_ZdoCommandProcessing_22 & 0xFFFF
   \   0000A0   14           DEC       A
   \   0000A1   7003         JNZ       $+5
   \   0000A3   02....       LJMP      ??MT_ZdoCommandProcessing_23 & 0xFFFF
   \   0000A6   14           DEC       A
   \   0000A7   7003         JNZ       $+5
   \   0000A9   02....       LJMP      ??MT_ZdoCommandProcessing_24 & 0xFFFF
   \   0000AC   14           DEC       A
   \   0000AD   7003         JNZ       $+5
   \   0000AF   02....       LJMP      ??MT_ZdoCommandProcessing_25 & 0xFFFF
   \   0000B2   14           DEC       A
   \   0000B3   7003         JNZ       $+5
   \   0000B5   02....       LJMP      ??MT_ZdoCommandProcessing_26 & 0xFFFF
   \   0000B8   24F9         ADD       A,#-0x7
   \   0000BA   7003         JNZ       $+5
   \   0000BC   02....       LJMP      ??MT_ZdoCommandProcessing_27 & 0xFFFF
   \   0000BF   14           DEC       A
   \   0000C0   7003         JNZ       $+5
   \   0000C2   02....       LJMP      ??MT_ZdoCommandProcessing_28 & 0xFFFF
   \   0000C5   14           DEC       A
   \   0000C6   7003         JNZ       $+5
   \   0000C8   02....       LJMP      ??MT_ZdoCommandProcessing_29 & 0xFFFF
   \   0000CB   24FE         ADD       A,#-0x2
   \   0000CD   7003         JNZ       $+5
   \   0000CF   02....       LJMP      ??MT_ZdoCommandProcessing_30 & 0xFFFF
   \   0000D2   14           DEC       A
   \   0000D3   7003         JNZ       $+5
   \   0000D5   02....       LJMP      ??MT_ZdoCommandProcessing_31 & 0xFFFF
   \   0000D8   14           DEC       A
   \   0000D9   7003         JNZ       $+5
   \   0000DB   02....       LJMP      ??MT_ZdoCommandProcessing_32 & 0xFFFF
   \   0000DE   14           DEC       A
   \   0000DF   7003         JNZ       $+5
   \   0000E1   02....       LJMP      ??MT_ZdoCommandProcessing_33 & 0xFFFF
   \   0000E4   14           DEC       A
   \   0000E5   7003         JNZ       $+5
   \   0000E7   02....       LJMP      ??MT_ZdoCommandProcessing_34 & 0xFFFF
   \   0000EA   14           DEC       A
   \   0000EB   7003         JNZ       $+5
   \   0000ED   02....       LJMP      ??MT_ZdoCommandProcessing_35 & 0xFFFF
   \   0000F0   14           DEC       A
   \   0000F1   7003         JNZ       $+5
   \   0000F3   02....       LJMP      ??MT_ZdoCommandProcessing_36 & 0xFFFF
   \   0000F6   14           DEC       A
   \   0000F7   7003         JNZ       $+5
   \   0000F9   02....       LJMP      ??MT_ZdoCommandProcessing_37 & 0xFFFF
   \   0000FC   14           DEC       A
   \   0000FD   7003         JNZ       $+5
   \   0000FF   02....       LJMP      ??MT_ZdoCommandProcessing_38 & 0xFFFF
   \   000102   14           DEC       A
   \   000103   7003         JNZ       $+5
   \   000105   02....       LJMP      ??MT_ZdoCommandProcessing_39 & 0xFFFF
   \   000108   14           DEC       A
   \   000109   7003         JNZ       $+5
   \   00010B   02....       LJMP      ??MT_ZdoCommandProcessing_40 & 0xFFFF
   \   00010E   14           DEC       A
   \   00010F   7003         JNZ       $+5
   \   000111   02....       LJMP      ??MT_ZdoCommandProcessing_41 & 0xFFFF
   \   000114   14           DEC       A
   \   000115   7003         JNZ       $+5
   \   000117   02....       LJMP      ??MT_ZdoCommandProcessing_42 & 0xFFFF
   \   00011A   14           DEC       A
   \   00011B   7003         JNZ       $+5
   \   00011D   02....       LJMP      ??MT_ZdoCommandProcessing_43 & 0xFFFF
   \   000120   14           DEC       A
   \   000121   7003         JNZ       $+5
   \   000123   02....       LJMP      ??MT_ZdoCommandProcessing_44 & 0xFFFF
   \   000126   14           DEC       A
   \   000127   7003         JNZ       $+5
   \   000129   02....       LJMP      ??MT_ZdoCommandProcessing_45 & 0xFFFF
   \   00012C   14           DEC       A
   \   00012D   7003         JNZ       $+5
   \   00012F   02....       LJMP      ??MT_ZdoCommandProcessing_46 & 0xFFFF
   \   000132   14           DEC       A
   \   000133   7003         JNZ       $+5
   \   000135   02....       LJMP      ??MT_ZdoCommandProcessing_47 & 0xFFFF
   \   000138   2487         ADD       A,#-0x79
   \   00013A   7003         JNZ       $+5
   \   00013C   02....       LJMP      ??MT_ZdoCommandProcessing_48 & 0xFFFF
   \   00013F   02....       LJMP      ??MT_ZdoCommandProcessing_49 & 0xFFFF
    236            {
    237          #if defined ( ZDO_NWKADDR_REQUEST )
    238              case MT_ZDO_NWK_ADDR_REQ:
    239                MT_ZdoNWKAddressRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_0:
   \   000142                ; Setup parameters for call to function MT_ZdoNWKAddressRequest
   \   000142   12....       LCALL     `??MT_ZdoNWKAddressRequest::?relay`; Banked call to: MT_ZdoNWKAddressRequest
    240                break;
   \   000145   02....       LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
    241          #endif
    242          
    243          #if defined ( ZDO_IEEEADDR_REQUEST )
    244              case MT_ZDO_IEEE_ADDR_REQ:
    245                MT_ZdoIEEEAddrRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_1:
   \   000148   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00014B                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   00014B   7D00         MOV       R5,#0x0
   \   00014D   12....       LCALL     ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000150   12....       LCALL     `??ZDP_IEEEAddrReq::?relay`; Banked call to: ZDP_IEEEAddrReq
   \   000153   02....       LJMP      ??MT_ZdoCommandProcessing_51 & 0xFFFF
    246                break;
    247          #endif
    248          
    249          #if defined ( ZDO_NODEDESC_REQUEST )
    250              case MT_ZDO_NODE_DESC_REQ:
    251                MT_ZdoNodeDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_2:
   \   000156   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000159   12....       LCALL     ?XSTACK_DISP0_8
   \   00015C   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   00015F   12....       LCALL     ?XSTACK_DISP0_8
   \   000162   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000165   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000168   7902         MOV       R1,#0x2
   \   00016A   02....       LJMP      ??MT_ZdoCommandProcessing_52 & 0xFFFF
    252                break;
    253          #endif
    254          
    255          #if defined ( ZDO_POWERDESC_REQUEST )
    256              case MT_ZDO_POWER_DESC_REQ:
    257                MT_ZdoPowerDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_3:
   \   00016D   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000170   12....       LCALL     ?XSTACK_DISP0_8
   \   000173   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000176   12....       LCALL     ?XSTACK_DISP0_8
   \   000179   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00017C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00017F   7903         MOV       R1,#0x3
   \   000181   E9           MOV       A,R1
   \   000182   807E         SJMP      ??MT_ZdoCommandProcessing_53
    258                break;
    259          #endif
    260          
    261          #if defined ( ZDO_SIMPLEDESC_REQUEST )
    262              case MT_ZDO_SIMPLE_DESC_REQ:
    263                MT_ZdoSimpleDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_4:
   \   000184   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000187   12....       LCALL     ?XSTACK_DISP0_8
   \   00018A   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   00018D   12....       LCALL     ?XSTACK_DISP0_8
   \   000190   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000193   5002         JNC       ??MT_ZdoCommandProcessing_54
   \   000195   05..         INC       ?V1
   \                     ??MT_ZdoCommandProcessing_54:
   \   000197                ; Setup parameters for call to function osal_build_uint16
   \   000197   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   00019A   AC..         MOV       R4,?V2
   \   00019C   AD..         MOV       R5,?V3
   \   00019E                ; Setup parameters for call to function ZDP_SimpleDescReq
   \   00019E   8E..         MOV       ?V2,R6
   \   0001A0   78..         MOV       R0,#?V2
   \   0001A2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001A5   85..82       MOV       DPL,?V0
   \   0001A8   85..83       MOV       DPH,?V1
   \   0001AB   A3           INC       DPTR
   \   0001AC   A3           INC       DPTR
   \   0001AD   E0           MOVX      A,@DPTR
   \   0001AE   F9           MOV       R1,A
   \   0001AF   7403         MOV       A,#0x3
   \   0001B1   12....       LCALL     ?XSTACK_DISP101_8
   \   0001B4   12....       LCALL     `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
   \   0001B7   02....       LJMP      ??MT_ZdoCommandProcessing_55 & 0xFFFF
    264                break;
    265          #endif
    266          
    267          #if defined ( ZDO_ACTIVEEP_REQUEST )
    268              case MT_ZDO_ACTIVE_EP_REQ:
    269                MT_ZdoActiveEpRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_5:
   \   0001BA   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0001BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C0   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   0001C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C6   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0001C9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001CC   7905         MOV       R1,#0x5
   \   0001CE   8030         SJMP      ??MT_ZdoCommandProcessing_52
    270                break;
    271          #endif
    272          
    273          #if defined ( ZDO_MATCH_REQUEST )
    274              case MT_ZDO_MATCH_DESC_REQ:
    275                MT_ZdoMatchDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_6:
   \   0001D0                ; Setup parameters for call to function MT_ZdoMatchDescRequest
   \   0001D0   12....       LCALL     `??MT_ZdoMatchDescRequest::?relay`; Banked call to: MT_ZdoMatchDescRequest
    276                break;
   \   0001D3   02....       LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
    277          #endif
    278          
    279          #if defined ( ZDO_COMPLEXDESC_REQUEST )
    280              case MT_ZDO_COMPLEX_DESC_REQ:
    281                MT_ZdoComplexDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_7:
   \   0001D6   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0001D9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001DC   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   0001DF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E2   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0001E5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001E8   7910         MOV       R1,#0x10
   \   0001EA   8014         SJMP      ??MT_ZdoCommandProcessing_52
    282                break;
    283          #endif
    284          
    285          #if defined ( ZDO_USERDESC_REQUEST )
    286              case MT_ZDO_USER_DESC_REQ:
    287                MT_ZdoUserDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_8:
   \   0001EC   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0001EF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F2   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   0001F5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F8   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0001FB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001FE   7911         MOV       R1,#0x11
   \                     ??MT_ZdoCommandProcessing_52:
   \   000200   7403         MOV       A,#0x3
   \                     ??MT_ZdoCommandProcessing_53:
   \   000202   12....       LCALL     ?XSTACK_DISP101_8
   \   000205   12....       LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   000208   02....       LJMP      ??MT_ZdoCommandProcessing_55 & 0xFFFF
    288                break;
    289          #endif
    290          
    291          #if defined ( ZDO_ENDDEVICE_ANNCE )
    292              case MT_ZDO_END_DEV_ANNCE:
    293                MT_ZdoEndDevAnnce(pBuf);
   \                     ??MT_ZdoCommandProcessing_9:
   \   00020B   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00020E   E5..         MOV       A,?V0
   \   000210   2402         ADD       A,#0x2
   \   000212   F5..         MOV       ?V0,A
   \   000214   5002         JNC       ??MT_ZdoCommandProcessing_56
   \   000216   05..         INC       ?V1
   \                     ??MT_ZdoCommandProcessing_56:
   \   000218                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000218   8E..         MOV       ?V2,R6
   \   00021A   78..         MOV       R0,#?V2
   \   00021C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00021F   85..82       MOV       DPL,?V0
   \   000222   85..83       MOV       DPH,?V1
   \   000225   A3           INC       DPTR
   \   000226   A3           INC       DPTR
   \   000227   A3           INC       DPTR
   \   000228   A3           INC       DPTR
   \   000229   A3           INC       DPTR
   \   00022A   A3           INC       DPTR
   \   00022B   A3           INC       DPTR
   \   00022C   A3           INC       DPTR
   \   00022D   E0           MOVX      A,@DPTR
   \   00022E   F9           MOV       R1,A
   \   00022F   AC..         MOV       R4,?V0
   \   000231   AD..         MOV       R5,?V1
   \   000233   12....       LCALL     `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   000236   02....       LJMP      ??MT_ZdoCommandProcessing_55 & 0xFFFF
    294                break;
    295          #endif
    296          
    297          #if defined ( ZDO_USERDESCSET_REQUEST )
    298              case MT_ZDO_USER_DESC_SET:
    299                MT_ZdoUserDescSet(pBuf);
   \                     ??MT_ZdoCommandProcessing_10:
   \   000239   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   00023C   F5..         MOV       ?V2,A
   \   00023E   E4           CLR       A
   \   00023F   3B           ADDC      A,R3
   \   000240   F5..         MOV       ?V3,A
   \   000242   740A         MOV       A,#0xa
   \   000244   12....       LCALL     ?XSTACK_DISP0_8
   \   000247   7402         MOV       A,#0x2
   \   000249   F0           MOVX      @DPTR,A
   \   00024A                ; Setup parameters for call to function osal_build_uint16
   \   00024A   0A           INC       R2
   \   00024B   0A           INC       R2
   \   00024C   0A           INC       R2
   \   00024D   AB..         MOV       R3,?V3
   \   00024F   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000252   12....       LCALL     ?XSTACK_DISP0_8
   \   000255   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000258   E5..         MOV       A,?V2
   \   00025A   2402         ADD       A,#0x2
   \   00025C   F5..         MOV       ?V2,A
   \   00025E   5002         JNC       ??MT_ZdoCommandProcessing_57
   \   000260   05..         INC       ?V3
   \                     ??MT_ZdoCommandProcessing_57:
   \   000262                ; Setup parameters for call to function osal_build_uint16
   \   000262   FA           MOV       R2,A
   \   000263   AB..         MOV       R3,?V3
   \   000265   12....       LCALL     ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000268   85..82       MOV       DPL,?V2
   \   00026B   85..83       MOV       DPH,?V3
   \   00026E   A3           INC       DPTR
   \   00026F   A3           INC       DPTR
   \   000270   E0           MOVX      A,@DPTR
   \   000271   C0E0         PUSH      A
   \   000273   7425         MOV       A,#0x25
   \   000275   12....       LCALL     ?XSTACK_DISP0_8
   \   000278   D0E0         POP       A
   \   00027A   F0           MOVX      @DPTR,A
   \   00027B                ; Setup parameters for call to function osal_memcpy
   \   00027B   85..82       MOV       DPL,?V2
   \   00027E   85..83       MOV       DPH,?V3
   \   000281   A3           INC       DPTR
   \   000282   A3           INC       DPTR
   \   000283   A3           INC       DPTR
   \   000284   A982         MOV       R1,DPL
   \   000286   AA83         MOV       R2,DPH
   \   000288   89..         MOV       ?V4,R1
   \   00028A   8A..         MOV       ?V5,R2
   \   00028C   8E..         MOV       ?V6,R6
   \   00028E   78..         MOV       R0,#?V4
   \   000290   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000293   7428         MOV       A,#0x28
   \   000295   12....       LCALL     ?XSTACK_DISP0_8
   \   000298   E0           MOVX      A,@DPTR
   \   000299   FC           MOV       R4,A
   \   00029A   7D00         MOV       R5,#0x0
   \   00029C   7429         MOV       A,#0x29
   \   00029E   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A1   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   0002A4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002A7                ; Setup parameters for call to function ZDP_UserDescSet
   \   0002A7   7425         MOV       A,#0x25
   \   0002A9   12....       LCALL     ?XSTACK_DISP100_8
   \   0002AC   88..         MOV       ?V2,R0
   \   0002AE   89..         MOV       ?V3,R1
   \   0002B0   78..         MOV       R0,#?V2
   \   0002B2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002B5   7900         MOV       R1,#0x0
   \   0002B7   AC..         MOV       R4,?V0
   \   0002B9   AD..         MOV       R5,?V1
   \   0002BB   7404         MOV       A,#0x4
   \   0002BD   12....       LCALL     ?XSTACK_DISP101_8
   \   0002C0   12....       LCALL     `??ZDP_UserDescSet::?relay`; Banked call to: ZDP_UserDescSet
   \   0002C3   02....       LJMP      ??MT_ZdoCommandProcessing_58 & 0xFFFF
    300                break;
    301          #endif
    302          
    303          #if defined ( ZDO_SERVERDISC_REQUEST )
    304              case MT_ZDO_SERVICE_DISC_REQ:
    305                MT_ZdoServiceDiscRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_11:
   \   0002C6   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   0002C9   FA           MOV       R2,A
   \   0002CA   5001         JNC       ??MT_ZdoCommandProcessing_59
   \   0002CC   0B           INC       R3
   \                     ??MT_ZdoCommandProcessing_59:
   \   0002CD   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0002D0                ; Setup parameters for call to function ZDP_ServerDiscReq
   \   0002D0   7900         MOV       R1,#0x0
   \   0002D2   12....       LCALL     `??ZDP_ServerDiscReq::?relay`; Banked call to: ZDP_ServerDiscReq
   \   0002D5   02....       LJMP      ??MT_ZdoCommandProcessing_51 & 0xFFFF
    306                break;
    307          #endif
    308          
    309          #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
    310              case MT_ZDO_END_DEV_BIND_REQ:
    311                MT_ZdoEndDevBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_12:
   \   0002D8                ; Setup parameters for call to function MT_ZdoEndDevBindRequest
   \   0002D8   12....       LCALL     `??MT_ZdoEndDevBindRequest::?relay`; Banked call to: MT_ZdoEndDevBindRequest
    312                break;
   \   0002DB   02....       LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
    313          #endif
    314          
    315          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    316              case MT_ZDO_BIND_REQ:
    317                MT_ZdoBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_13:
   \   0002DE                ; Setup parameters for call to function MT_ZdoBindRequest
   \   0002DE   12....       LCALL     `??MT_ZdoBindRequest::?relay`; Banked call to: MT_ZdoBindRequest
    318                break;
   \   0002E1   02....       LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
    319          #endif
    320          
    321          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    322              case MT_ZDO_UNBIND_REQ:
    323                MT_ZdoUnbindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_14:
   \   0002E4                ; Setup parameters for call to function MT_ZdoUnbindRequest
   \   0002E4   12....       LCALL     `??MT_ZdoUnbindRequest::?relay`; Banked call to: MT_ZdoUnbindRequest
    324                break;
   \   0002E7   02....       LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
    325          #endif
    326          
    327          #if defined ( MT_SYS_KEY_MANAGEMENT )
    328              case MT_ZDO_SET_LINK_KEY:
    329                MT_ZdoSetLinkKey(pBuf);
    330                break;
    331          
    332              case MT_ZDO_REMOVE_LINK_KEY:
    333                MT_ZdoRemoveLinkKey(pBuf);
    334                break;
    335          
    336              case MT_ZDO_GET_LINK_KEY:
    337                MT_ZdoGetLinkKey(pBuf);
    338                break;
    339          #endif // MT_SYS_KEY_MANAGEMENT
    340          
    341          #if defined ( ZDO_MANUAL_JOIN )
    342              case MT_ZDO_NWK_DISCOVERY_REQ:
    343                MT_ZdoNetworkDiscoveryReq(pBuf);
   \                     ??MT_ZdoCommandProcessing_15:
   \   0002EA   85..82       MOV       DPL,?XSP + 0
   \   0002ED   85..83       MOV       DPH,?XSP + 1
   \   0002F0   7401         MOV       A,#0x1
   \   0002F2   F0           MOVX      @DPTR,A
   \   0002F3   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0002F6                ; Setup parameters for call to function ZDApp_NetworkDiscoveryReq
   \   0002F6   85..82       MOV       DPL,?V0
   \   0002F9   85..83       MOV       DPH,?V1
   \   0002FC   A3           INC       DPTR
   \   0002FD   A3           INC       DPTR
   \   0002FE   A3           INC       DPTR
   \   0002FF   A3           INC       DPTR
   \   000300   E0           MOVX      A,@DPTR
   \   000301   F9           MOV       R1,A
   \   000302   12....       LCALL     `??ZDApp_NetworkDiscoveryReq::?relay`; Banked call to: ZDApp_NetworkDiscoveryReq
   \   000305   E9           MOV       A,R1
   \   000306   85..82       MOV       DPL,?XSP + 0
   \   000309   85..83       MOV       DPH,?XSP + 1
   \   00030C   F0           MOVX      @DPTR,A
   \   00030D                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   00030D   7A..         MOV       R2,#`??MT_ZdoNwkDiscoveryCnfCB::?relay` & 0xff
   \   00030F   7B..         MOV       R3,#(`??MT_ZdoNwkDiscoveryCnfCB::?relay` >> 8) & 0xff
   \   000311   7902         MOV       R1,#0x2
   \   000313   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   \   000316                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000316   7A..         MOV       R2,#`??MT_ZdoBeaconIndCB::?relay` & 0xff
   \   000318   7B..         MOV       R3,#(`??MT_ZdoBeaconIndCB::?relay` >> 8) & 0xff
   \   00031A   7903         MOV       R1,#0x3
   \   00031C   8079         SJMP      ??MT_ZdoCommandProcessing_60
    344                break;
    345          
    346              case MT_ZDO_JOIN_REQ:
    347                MT_ZdoJoinReq(pBuf);
   \                     ??MT_ZdoCommandProcessing_16:
   \   00031E   85..82       MOV       DPL,?XSP + 0
   \   000321   85..83       MOV       DPH,?XSP + 1
   \   000324   7401         MOV       A,#0x1
   \   000326   F0           MOVX      @DPTR,A
   \   000327   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00032A                ; Setup parameters for call to function osal_build_uint16
   \   00032A   85..82       MOV       DPL,?V0
   \   00032D   F583         MOV       DPH,A
   \   00032F   A3           INC       DPTR
   \   000330   AA82         MOV       R2,DPL
   \   000332   AB83         MOV       R3,DPH
   \   000334   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000337   240B         ADD       A,#0xb
   \   000339   FA           MOV       R2,A
   \   00033A   E4           CLR       A
   \   00033B   35..         ADDC      A,?V1
   \   00033D   FB           MOV       R3,A
   \   00033E   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000341   8A..         MOV       ?V4,R2
   \   000343   8B..         MOV       ?V5,R3
   \   000345                ; Setup parameters for call to function ZDApp_JoinReq
   \   000345   E5..         MOV       A,?V0
   \   000347   240E         ADD       A,#0xe
   \   000349   F582         MOV       DPL,A
   \   00034B   E4           CLR       A
   \   00034C   35..         ADDC      A,?V1
   \   00034E   F583         MOV       DPH,A
   \   000350   12....       LCALL     ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000353   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000356   E5..         MOV       A,?V0
   \   000358   240D         ADD       A,#0xd
   \   00035A   F582         MOV       DPL,A
   \   00035C   E4           CLR       A
   \   00035D   35..         ADDC      A,?V1
   \   00035F   F583         MOV       DPH,A
   \   000361   12....       LCALL     ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   000364   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000367   78..         MOV       R0,#?V4
   \   000369   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00036C   E5..         MOV       A,?V0
   \   00036E   2403         ADD       A,#0x3
   \   000370   FC           MOV       R4,A
   \   000371   E4           CLR       A
   \   000372   35..         ADDC      A,?V1
   \   000374   FD           MOV       R5,A
   \   000375   AA..         MOV       R2,?V2
   \   000377   AB..         MOV       R3,?V3
   \   000379   85..82       MOV       DPL,?V0
   \   00037C   85..83       MOV       DPH,?V1
   \   00037F   E0           MOVX      A,@DPTR
   \   000380   F9           MOV       R1,A
   \   000381   12....       LCALL     `??ZDApp_JoinReq::?relay`; Banked call to: ZDApp_JoinReq
   \   000384   7404         MOV       A,#0x4
   \   000386   12....       LCALL     ?DEALLOC_XSTACK8
   \   000389   E9           MOV       A,R1
   \   00038A   85..82       MOV       DPL,?XSP + 0
   \   00038D   85..83       MOV       DPH,?XSP + 1
   \   000390   F0           MOVX      @DPTR,A
   \   000391                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000391   7A..         MOV       R2,#`??MT_ZdoJoinCnfCB::?relay` & 0xff
   \   000393   7B..         MOV       R3,#(`??MT_ZdoJoinCnfCB::?relay` >> 8) & 0xff
   \   000395   7904         MOV       R1,#0x4
   \                     ??MT_ZdoCommandProcessing_60:
   \   000397   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   \   00039A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00039A   02....       LJMP      ??MT_ZdoCommandProcessing_61 & 0xFFFF
    348                break;
    349          #endif
    350          
    351          #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
    352              case MT_ZDO_MGMT_NWKDISC_REQ:
    353                MT_ZdoMgmtNwkDiscRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_19:
   \   00039D   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0003A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0003A3   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   0003A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0003A9   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0003AC   5002         JNC       ??MT_ZdoCommandProcessing_62
   \   0003AE   05..         INC       ?V1
   \                     ??MT_ZdoCommandProcessing_62:
   \   0003B0                ; Setup parameters for call to function osal_build_uint32
   \   0003B0   7904         MOV       R1,#0x4
   \   0003B2   FA           MOV       R2,A
   \   0003B3   AB..         MOV       R3,?V1
   \   0003B5   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   0003B8                ; Setup parameters for call to function ZDP_MgmtNwkDiscReq
   \   0003B8   78..         MOV       R0,#?V4
   \   0003BA   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   0003BD   7D00         MOV       R5,#0x0
   \   0003BF   85..82       MOV       DPL,?V0
   \   0003C2   85..83       MOV       DPH,?V1
   \   0003C5   A3           INC       DPTR
   \   0003C6   A3           INC       DPTR
   \   0003C7   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   0003CA   A3           INC       DPTR
   \   0003CB   A3           INC       DPTR
   \   0003CC   E0           MOVX      A,@DPTR
   \   0003CD   F9           MOV       R1,A
   \   0003CE   7406         MOV       A,#0x6
   \   0003D0   12....       LCALL     ?XSTACK_DISP101_8
   \   0003D3   12....       LCALL     `??ZDP_MgmtNwkDiscReq::?relay`; Banked call to: ZDP_MgmtNwkDiscReq
   \   0003D6   7404         MOV       A,#0x4
   \   0003D8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003DB   02....       LJMP      ??MT_ZdoCommandProcessing_51 & 0xFFFF
    354                break;
    355          #endif
    356          
    357          #if defined ( ZDO_MGMT_LQI_REQUEST )
    358              case MT_ZDO_MGMT_LQI_REQ:
    359                MT_ZdoMgmtLqiRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_20:
   \   0003DE   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0003E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0003E4   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   0003E7   12....       LCALL     ?XSTACK_DISP0_8
   \   0003EA   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   0003ED   C0E0         PUSH      A
   \   0003EF   7401         MOV       A,#0x1
   \   0003F1   12....       LCALL     ?XSTACK_DISP0_8
   \   0003F4   D0E0         POP       A
   \   0003F6   F0           MOVX      @DPTR,A
   \   0003F7                ; Setup parameters for call to function ZDP_SendData
   \   0003F7   8E..         MOV       ?V0,R6
   \   0003F9   78..         MOV       R0,#?V0
   \   0003FB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003FE   7402         MOV       A,#0x2
   \   000400   12....       LCALL     ?XSTACK_DISP100_8
   \   000403   88..         MOV       ?V0,R0
   \   000405   89..         MOV       ?V1,R1
   \   000407   78..         MOV       R0,#?V0
   \   000409   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00040C   75..31       MOV       ?V0,#0x31
   \   00040F   8064         SJMP      ??MT_ZdoCommandProcessing_63
    360                break;
    361          #endif
    362          
    363          #if defined ( ZDO_MGMT_RTG_REQUEST )
    364              case MT_ZDO_MGMT_RTG_REQ:
    365                MT_ZdoMgmtRtgRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_21:
   \   000411   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000414   12....       LCALL     ?XSTACK_DISP0_8
   \   000417   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   00041A   12....       LCALL     ?XSTACK_DISP0_8
   \   00041D   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000420   C0E0         PUSH      A
   \   000422   7401         MOV       A,#0x1
   \   000424   12....       LCALL     ?XSTACK_DISP0_8
   \   000427   D0E0         POP       A
   \   000429   F0           MOVX      @DPTR,A
   \   00042A                ; Setup parameters for call to function ZDP_SendData
   \   00042A   8E..         MOV       ?V0,R6
   \   00042C   78..         MOV       R0,#?V0
   \   00042E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000431   7402         MOV       A,#0x2
   \   000433   12....       LCALL     ?XSTACK_DISP100_8
   \   000436   88..         MOV       ?V0,R0
   \   000438   89..         MOV       ?V1,R1
   \   00043A   78..         MOV       R0,#?V0
   \   00043C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00043F   75..32       MOV       ?V0,#0x32
   \   000442   8031         SJMP      ??MT_ZdoCommandProcessing_63
    366                break;
    367          #endif
    368          
    369          #if defined ( ZDO_MGMT_BIND_REQUEST )
    370              case MT_ZDO_MGMT_BIND_REQ:
    371                MT_ZdoMgmtBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_22:
   \   000444   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000447   12....       LCALL     ?XSTACK_DISP0_8
   \   00044A   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   00044D   12....       LCALL     ?XSTACK_DISP0_8
   \   000450   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000453   C0E0         PUSH      A
   \   000455   7401         MOV       A,#0x1
   \   000457   12....       LCALL     ?XSTACK_DISP0_8
   \   00045A   D0E0         POP       A
   \   00045C   F0           MOVX      @DPTR,A
   \   00045D                ; Setup parameters for call to function ZDP_SendData
   \   00045D   8E..         MOV       ?V0,R6
   \   00045F   78..         MOV       R0,#?V0
   \   000461   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000464   7402         MOV       A,#0x2
   \   000466   12....       LCALL     ?XSTACK_DISP100_8
   \   000469   88..         MOV       ?V0,R0
   \   00046B   89..         MOV       ?V1,R1
   \   00046D   78..         MOV       R0,#?V0
   \   00046F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000472   75..33       MOV       ?V0,#0x33
   \                     ??MT_ZdoCommandProcessing_63:
   \   000475   8E..         MOV       ?V1,R6
   \   000477   78..         MOV       R0,#?V0
   \   000479   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00047C   7901         MOV       R1,#0x1
   \   00047E   7407         MOV       A,#0x7
   \   000480   12....       LCALL     ?XSTACK_DISP102_8
   \   000483   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000485   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000487   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00048A   7405         MOV       A,#0x5
   \   00048C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00048F   02....       LJMP      ??MT_ZdoCommandProcessing_51 & 0xFFFF
    372                break;
    373          #endif
    374          
    375          #if defined ( ZDO_MGMT_LEAVE_REQUEST )
    376              case MT_ZDO_MGMT_LEAVE_REQ:
    377                MT_ZdoMgmtLeaveRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_23:
   \   000492   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000495   12....       LCALL     ?XSTACK_DISP0_8
   \   000498   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   00049B   12....       LCALL     ?XSTACK_DISP0_8
   \   00049E   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   0004A1   5002         JNC       ??MT_ZdoCommandProcessing_64
   \   0004A3   05..         INC       ?V1
   \                     ??MT_ZdoCommandProcessing_64:
   \   0004A5   F582         MOV       DPL,A
   \   0004A7   85..83       MOV       DPH,?V1
   \   0004AA   A3           INC       DPTR
   \   0004AB   A3           INC       DPTR
   \   0004AC   A3           INC       DPTR
   \   0004AD   A3           INC       DPTR
   \   0004AE   A3           INC       DPTR
   \   0004AF   A3           INC       DPTR
   \   0004B0   A3           INC       DPTR
   \   0004B1   A3           INC       DPTR
   \   0004B2   E0           MOVX      A,@DPTR
   \   0004B3   A2E1         MOV       C,0xE0 /* A   */.1
   \   0004B5   5004         JNC       ??MT_ZdoCommandProcessing_65
   \   0004B7   D2F0         SETB      B.0
   \   0004B9   8002         SJMP      ??MT_ZdoCommandProcessing_66
   \                     ??MT_ZdoCommandProcessing_65:
   \   0004BB   C2F0         CLR       B.0
   \                     ??MT_ZdoCommandProcessing_66:
   \   0004BD                ; Setup parameters for call to function ZDP_MgmtLeaveReq
   \   0004BD   8E..         MOV       ?V2,R6
   \   0004BF   78..         MOV       R0,#?V2
   \   0004C1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0004C4   85..82       MOV       DPL,?V0
   \   0004C7   85..83       MOV       DPH,?V1
   \   0004CA   A3           INC       DPTR
   \   0004CB   A3           INC       DPTR
   \   0004CC   A3           INC       DPTR
   \   0004CD   A3           INC       DPTR
   \   0004CE   A3           INC       DPTR
   \   0004CF   A3           INC       DPTR
   \   0004D0   A3           INC       DPTR
   \   0004D1   A3           INC       DPTR
   \   0004D2   E0           MOVX      A,@DPTR
   \   0004D3   A2E0         MOV       C,0xE0 /* A   */.0
   \   0004D5   E4           CLR       A
   \   0004D6   33           RLC       A
   \   0004D7   F5..         MOV       ?V2,A
   \   0004D9   78..         MOV       R0,#?V2
   \   0004DB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0004DE   A2F0         MOV       C,B.0
   \   0004E0   E4           CLR       A
   \   0004E1   33           RLC       A
   \   0004E2   F9           MOV       R1,A
   \   0004E3   AC..         MOV       R4,?V0
   \   0004E5   AD..         MOV       R5,?V1
   \   0004E7   7404         MOV       A,#0x4
   \   0004E9   12....       LCALL     ?XSTACK_DISP101_8
   \   0004EC   12....       LCALL     `??ZDP_MgmtLeaveReq::?relay`; Banked call to: ZDP_MgmtLeaveReq
   \                     ??MT_ZdoCommandProcessing_58:
   \   0004EF   7402         MOV       A,#0x2
   \   0004F1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0004F4   803B         SJMP      ??MT_ZdoCommandProcessing_51
    378                break;
    379          #endif
    380          
    381          #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
    382              case MT_ZDO_MGMT_DIRECT_JOIN_REQ:
    383                MT_ZdoMgmtDirectJoinRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_24:
   \   0004F6   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0004F9   12....       LCALL     ?XSTACK_DISP0_8
   \   0004FC   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   0004FF   12....       LCALL     ?XSTACK_DISP0_8
   \   000502   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000505   5002         JNC       ??MT_ZdoCommandProcessing_67
   \   000507   05..         INC       ?V1
   \                     ??MT_ZdoCommandProcessing_67:
   \   000509                ; Setup parameters for call to function ZDP_MgmtDirectJoinReq
   \   000509   8E..         MOV       ?V2,R6
   \   00050B   78..         MOV       R0,#?V2
   \   00050D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000510   85..82       MOV       DPL,?V0
   \   000513   85..83       MOV       DPH,?V1
   \   000516   A3           INC       DPTR
   \   000517   A3           INC       DPTR
   \   000518   A3           INC       DPTR
   \   000519   A3           INC       DPTR
   \   00051A   A3           INC       DPTR
   \   00051B   A3           INC       DPTR
   \   00051C   A3           INC       DPTR
   \   00051D   A3           INC       DPTR
   \   00051E   E0           MOVX      A,@DPTR
   \   00051F   F9           MOV       R1,A
   \   000520   AC..         MOV       R4,?V0
   \   000522   AD..         MOV       R5,?V1
   \   000524   7403         MOV       A,#0x3
   \   000526   12....       LCALL     ?XSTACK_DISP101_8
   \   000529   12....       LCALL     `??ZDP_MgmtDirectJoinReq::?relay`; Banked call to: ZDP_MgmtDirectJoinReq
   \                     ??MT_ZdoCommandProcessing_55:
   \   00052C   7401         MOV       A,#0x1
   \   00052E   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??MT_ZdoCommandProcessing_51:
   \   000531   E9           MOV       A,R1
   \   000532   85..82       MOV       DPL,?XSP + 0
   \   000535   85..83       MOV       DPH,?XSP + 1
   \   000538   02....       LJMP      ??MT_ZdoCommandProcessing_68 & 0xFFFF
    384                break;
    385          #endif
    386          
    387          #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
    388              case MT_ZDO_MGMT_PERMIT_JOIN_REQ:
    389                MT_ZdoMgmtPermitJoinRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_25:
   \   00053B   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00053E   8A82         MOV       DPL,R2
   \   000540   8B83         MOV       DPH,R3
   \   000542   E0           MOVX      A,@DPTR
   \   000543   6404         XRL       A,#0x4
   \   000545   700A         JNZ       ??MT_ZdoCommandProcessing_69
   \   000547   740A         MOV       A,#0xa
   \   000549   12....       LCALL     ?XSTACK_DISP0_8
   \   00054C   7402         MOV       A,#0x2
   \   00054E   F0           MOVX      @DPTR,A
   \   00054F   8019         SJMP      ??MT_ZdoCommandProcessing_70
   \                     ??MT_ZdoCommandProcessing_69:
   \   000551   85..82       MOV       DPL,?V0
   \   000554   85..83       MOV       DPH,?V1
   \   000557   E0           MOVX      A,@DPTR
   \   000558   C0E0         PUSH      A
   \   00055A   740A         MOV       A,#0xa
   \   00055C   12....       LCALL     ?XSTACK_DISP0_8
   \   00055F   D0E0         POP       A
   \   000561   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000564   8582..       MOV       ?V0,DPL
   \   000567   8583..       MOV       ?V1,DPH
   \                     ??MT_ZdoCommandProcessing_70:
   \   00056A                ; Setup parameters for call to function osal_build_uint16
   \   00056A   AA..         MOV       R2,?V0
   \   00056C   12....       LCALL     ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   00056F   12....       LCALL     ?XSTACK_DISP0_8
   \   000572   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000575   F9           MOV       R1,A
   \   000576   85..82       MOV       DPL,?V0
   \   000579   85..83       MOV       DPH,?V1
   \   00057C   A3           INC       DPTR
   \   00057D   A3           INC       DPTR
   \   00057E   A3           INC       DPTR
   \   00057F   E0           MOVX      A,@DPTR
   \   000580   FC           MOV       R4,A
   \   000581   90....       MOV       DPTR,#ignoreIndication
   \   000584   7401         MOV       A,#0x1
   \   000586   F0           MOVX      @DPTR,A
   \   000587                ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
   \   000587   7D00         MOV       R5,#0x0
   \   000589   04           INC       A
   \   00058A   12....       LCALL     ?XSTACK_DISP101_8
   \   00058D   12....       LCALL     `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
   \   000590   E9           MOV       A,R1
   \   000591   85..82       MOV       DPL,?XSP + 0
   \   000594   85..83       MOV       DPH,?XSP + 1
   \   000597   F0           MOVX      @DPTR,A
   \   000598   90....       MOV       DPTR,#ignoreIndication
   \   00059B   02....       LJMP      ??MT_ZdoCommandProcessing_71 & 0xFFFF
    390                break;
    391          #endif
    392          
    393          #if defined ( ZDO_MGMT_NWKUPDATE_REQUEST )
    394              case MT_ZDO_MGMT_NWK_UPDATE_REQ:
    395                MT_ZdoMgmtNwkUpdateRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_26:
   \   00059E                ; Setup parameters for call to function MT_ZdoMgmtNwkUpdateRequest
   \   00059E   12....       LCALL     `??MT_ZdoMgmtNwkUpdateRequest::?relay`; Banked call to: MT_ZdoMgmtNwkUpdateRequest
    396                break;
   \   0005A1   02....       LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
    397          #endif
    398          
    399          #if defined ( ZDO_NETWORKSTART_REQUEST )
    400              case MT_ZDO_STARTUP_FROM_APP:
    401                MT_ZdoStartupFromApp(pBuf);
   \                     ??MT_ZdoCommandProcessing_29:
   \   0005A4   85..82       MOV       DPL,?XSP + 0
   \   0005A7   85..83       MOV       DPH,?XSP + 1
   \   0005AA   E4           CLR       A
   \   0005AB   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   0005AE   F5..         MOV       ?V0,A
   \   0005B0   8A82         MOV       DPL,R2
   \   0005B2   8B83         MOV       DPH,R3
   \   0005B4   A3           INC       DPTR
   \   0005B5   A3           INC       DPTR
   \   0005B6   E0           MOVX      A,@DPTR
   \   0005B7   FF           MOV       R7,A
   \   0005B8   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0005BB   E0           MOVX      A,@DPTR
   \   0005BC   7004         JNZ       ??MT_ZdoCommandProcessing_72
   \   0005BE                ; Setup parameters for call to function bdb_StartCommissioning
   \   0005BE   7904         MOV       R1,#0x4
   \   0005C0   8015         SJMP      ??MT_ZdoCommandProcessing_73
   \                     ??MT_ZdoCommandProcessing_72:
   \   0005C2   6401         XRL       A,#0x1
   \   0005C4   600F         JZ        ??MT_ZdoCommandProcessing_74
   \   0005C6   E0           MOVX      A,@DPTR
   \   0005C7   6402         XRL       A,#0x2
   \   0005C9   600A         JZ        ??MT_ZdoCommandProcessing_74
   \   0005CB   85..82       MOV       DPL,?XSP + 0
   \   0005CE   85..83       MOV       DPH,?XSP + 1
   \   0005D1   7401         MOV       A,#0x1
   \   0005D3   8034         SJMP      ??MT_ZdoCommandProcessing_75
   \                     ??MT_ZdoCommandProcessing_74:
   \   0005D5                ; Setup parameters for call to function bdb_StartCommissioning
   \   0005D5   7902         MOV       R1,#0x2
   \                     ??MT_ZdoCommandProcessing_73:
   \   0005D7   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
   \   0005DA   802E         SJMP      ??MT_ZdoCommandProcessing_76
    402                break;
    403          #endif
    404          
    405              case MT_ZDO_SEND_DATA:
    406                MT_ZdoSendData( pBuf );
   \                     ??MT_ZdoCommandProcessing_17:
   \   0005DC                ; Setup parameters for call to function MT_ZdoSendData
   \   0005DC   12....       LCALL     `??MT_ZdoSendData::?relay`; Banked call to: MT_ZdoSendData
    407                break;
   \   0005DF   02....       LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
    408          
    409              case MT_ZDO_NWK_ADDR_OF_INTEREST_REQ:
    410                MT_ZdoNwkAddrOfInterestReq( pBuf );
   \                     ??MT_ZdoCommandProcessing_18:
   \   0005E2                ; Setup parameters for call to function MT_ZdoNwkAddrOfInterestReq
   \   0005E2   12....       LCALL     `??MT_ZdoNwkAddrOfInterestReq::?relay`; Banked call to: MT_ZdoNwkAddrOfInterestReq
    411                break;
   \   0005E5   02....       LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
    412          
    413              case MT_ZDO_MSG_CB_REGISTER:
    414                MT_ZdoRegisterForZDOMsg(pBuf);
   \                     ??MT_ZdoCommandProcessing_27:
   \   0005E8   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0005EB   5001         JNC       ??MT_ZdoCommandProcessing_77
   \   0005ED   0B           INC       R3
   \                     ??MT_ZdoCommandProcessing_77:
   \   0005EE   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   0005F1   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   0005F4   800C         SJMP      ??MT_ZdoCommandProcessing_78
    415                break;
    416          
    417              case MT_ZDO_MSG_CB_REMOVE:
    418                MT_ZdoRemoveRegisteredCB(pBuf);
   \                     ??MT_ZdoCommandProcessing_28:
   \   0005F6   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0005F9   5001         JNC       ??MT_ZdoCommandProcessing_79
   \   0005FB   0B           INC       R3
   \                     ??MT_ZdoCommandProcessing_79:
   \   0005FC   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0005FF   12....       LCALL     `??ZDO_RemoveRegisteredCB::?relay`; Banked call to: ZDO_RemoveRegisteredCB
   \                     ??MT_ZdoCommandProcessing_78:
   \   000602   E9           MOV       A,R1
   \   000603   85..82       MOV       DPL,?XSP + 0
   \   000606   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_ZdoCommandProcessing_75:
   \   000609   F0           MOVX      @DPTR,A
   \                     ??MT_ZdoCommandProcessing_76:
   \   00060A   74E0         MOV       A,#-0x20
   \   00060C   55..         ANL       A,?V0
   \   00060E   6420         XRL       A,#0x20
   \   000610   6003         JZ        $+5
   \   000612   02....       LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
   \   000615                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000615   802E         SJMP      ??MT_ZdoCommandProcessing_61
    419                break;
    420          
    421              case MT_ZDO_SET_REJOIN_PARAMS:
    422                MT_ZdoSetRejoinParameters(pBuf);
   \                     ??MT_ZdoCommandProcessing_48:
   \   000617   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00061A   8A..         MOV       ?V4,R2
   \   00061C   8B..         MOV       ?V5,R3
   \   00061E   8C..         MOV       ?V6,R4
   \   000620   8D..         MOV       ?V7,R5
   \   000622                ; Setup parameters for call to function osal_build_uint32
   \   000622   7904         MOV       R1,#0x4
   \   000624   E5..         MOV       A,?V0
   \   000626   29           ADD       A,R1
   \   000627   FA           MOV       R2,A
   \   000628   E4           CLR       A
   \   000629   35..         ADDC      A,?V1
   \   00062B   FB           MOV       R3,A
   \   00062C   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00062F                ; Setup parameters for call to function ZDApp_SetRejoinScanDuration
   \   00062F   12....       LCALL     `??ZDApp_SetRejoinScanDuration::?relay`; Banked call to: ZDApp_SetRejoinScanDuration
   \   000632                ; Setup parameters for call to function ZDApp_SetRejoinBackoffDuration
   \   000632   AA..         MOV       R2,?V4
   \   000634   AB..         MOV       R3,?V5
   \   000636   AC..         MOV       R4,?V6
   \   000638   AD..         MOV       R5,?V7
   \   00063A   12....       LCALL     `??ZDApp_SetRejoinBackoffDuration::?relay`; Banked call to: ZDApp_SetRejoinBackoffDuration
   \   00063D   85..82       MOV       DPL,?XSP + 0
   \   000640   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_ZdoCommandProcessing_71:
   \   000643   E4           CLR       A
   \                     ??MT_ZdoCommandProcessing_68:
   \   000644   F0           MOVX      @DPTR,A
   \   000645                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \                     ??MT_ZdoCommandProcessing_61:
   \   000645   AC..         MOV       R4,?XSP + 0
   \   000647   AD..         MOV       R5,?XSP + 1
   \   000649   7B01         MOV       R3,#0x1
   \   00064B   EF           MOV       A,R7
   \   00064C   FA           MOV       R2,A
   \   00064D   02....       LJMP      ??MT_ZdoCommandProcessing_80 & 0xFFFF
    423                break;
    424          
    425          #if defined ( MT_ZDO_EXTENSIONS )
    426          #if ( ZG_BUILD_COORDINATOR_TYPE )
    427              case MT_ZDO_EXT_UPDATE_NWK_KEY:
    428                MT_ZdoSecUpdateNwkKey( pBuf );
   \                     ??MT_ZdoCommandProcessing_42:
   \   000650   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000653   8A..         MOV       ?V2,R2
   \   000655   8B..         MOV       ?V3,R3
   \   000657   AC..         MOV       R4,?V2
   \   000659   AD..         MOV       R5,?V3
   \   00065B                ; Setup parameters for call to function ZDSecMgrUpdateNwkKey
   \   00065B   85..82       MOV       DPL,?V0
   \   00065E   85..83       MOV       DPH,?V1
   \   000661   A3           INC       DPTR
   \   000662   A3           INC       DPTR
   \   000663   E0           MOVX      A,@DPTR
   \   000664   F9           MOV       R1,A
   \   000665   E5..         MOV       A,?V0
   \   000667   2403         ADD       A,#0x3
   \   000669   FA           MOV       R2,A
   \   00066A   E4           CLR       A
   \   00066B   35..         ADDC      A,?V1
   \   00066D   FB           MOV       R3,A
   \   00066E   12....       LCALL     `??ZDSecMgrUpdateNwkKey::?relay`; Banked call to: ZDSecMgrUpdateNwkKey
   \   000671   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000674   7A4E         MOV       R2,#0x4e
   \   000676   02....       LJMP      ??MT_ZdoCommandProcessing_80 & 0xFFFF
    429                break;
    430          
    431              case MT_ZDO_EXT_SWITCH_NWK_KEY:
    432                MT_ZdoSecSwitchNwkKey( pBuf );
   \                     ??MT_ZdoCommandProcessing_43:
   \   000679   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00067C                ; Setup parameters for call to function ZDSecMgrSwitchNwkKey
   \   00067C   85..82       MOV       DPL,?V0
   \   00067F   85..83       MOV       DPH,?V1
   \   000682   A3           INC       DPTR
   \   000683   A3           INC       DPTR
   \   000684   E0           MOVX      A,@DPTR
   \   000685   F9           MOV       R1,A
   \   000686   12....       LCALL     `??ZDSecMgrSwitchNwkKey::?relay`; Banked call to: ZDSecMgrSwitchNwkKey
   \   000689   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   00068C   7A4F         MOV       R2,#0x4f
   \   00068E   02....       LJMP      ??MT_ZdoCommandProcessing_80 & 0xFFFF
    433                break;
    434          #endif // ZDO_COORDINATOR
    435              case MT_ZDO_SEC_ADD_LINK_KEY:
    436                MT_ZdoSecAddLinkKey( pBuf );
   \                     ??MT_ZdoCommandProcessing_30:
   \   000691   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000694   E5..         MOV       A,?V0
   \   000696   2402         ADD       A,#0x2
   \   000698   F5..         MOV       ?V0,A
   \   00069A   5002         JNC       ??MT_ZdoCommandProcessing_81
   \   00069C   05..         INC       ?V1
   \                     ??MT_ZdoCommandProcessing_81:
   \   00069E                ; Setup parameters for call to function ZDSecMgrAddLinkKey
   \   00069E   2408         ADD       A,#0x8
   \   0006A0   F5..         MOV       ?V2,A
   \   0006A2   E4           CLR       A
   \   0006A3   35..         ADDC      A,?V1
   \   0006A5   F5..         MOV       ?V3,A
   \   0006A7   78..         MOV       R0,#?V2
   \   0006A9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0006AC   AC..         MOV       R4,?V0
   \   0006AE   AD..         MOV       R5,?V1
   \   0006B0   12....       LCALL     `??ZDSecMgrAddLinkKey::?relay`; Banked call to: ZDSecMgrAddLinkKey
   \   0006B3   7402         MOV       A,#0x2
   \   0006B5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0006B8   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   0006BB   7A42         MOV       R2,#0x42
   \   0006BD   02....       LJMP      ??MT_ZdoCommandProcessing_80 & 0xFFFF
    437                break;
    438          
    439              case MT_ZDO_SEC_ENTRY_LOOKUP_EXT:
    440                MT_ZdoSecEntryLookupExt( pBuf );
   \                     ??MT_ZdoCommandProcessing_31:
   \   0006C0   740B         MOV       A,#0xb
   \   0006C2   12....       LCALL     ?XSTACK_DISP0_8
   \   0006C5   E4           CLR       A
   \   0006C6   F0           MOVX      @DPTR,A
   \   0006C7   A3           INC       DPTR
   \   0006C8   F0           MOVX      @DPTR,A
   \   0006C9   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0}>`
   \   0006CC   740D         MOV       A,#0xd
   \   0006CE   12....       LCALL     ?XSTACK_DISP102_8
   \   0006D1   7406         MOV       A,#0x6
   \   0006D3   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   0006D6                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   0006D6   740B         MOV       A,#0xb
   \   0006D8   12....       LCALL     ?XSTACK_DISP102_8
   \   0006DB   EA           MOV       A,R2
   \   0006DC   2403         ADD       A,#0x3
   \   0006DE   FA           MOV       R2,A
   \   0006DF   5001         JNC       ??MT_ZdoCommandProcessing_82
   \   0006E1   0B           INC       R3
   \                     ??MT_ZdoCommandProcessing_82:
   \   0006E2   12....       LCALL     `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   0006E5   740D         MOV       A,#0xd
   \   0006E7   12....       LCALL     ?XSTACK_DISP0_8
   \   0006EA   E9           MOV       A,R1
   \   0006EB   F0           MOVX      @DPTR,A
   \   0006EC   740B         MOV       A,#0xb
   \   0006EE   12....       LCALL     ?XSTACK_DISP0_8
   \   0006F1   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0006F4   6064         JZ        ??MT_ZdoCommandProcessing_83
   \   0006F6   740B         MOV       A,#0xb
   \   0006F8   12....       LCALL     ?XSTACK_DISP0_8
   \   0006FB   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   0006FE   C0E0         PUSH      A
   \   000700   740E         MOV       A,#0xe
   \   000702   12....       LCALL     ?XSTACK_DISP0_8
   \   000705   D0E0         POP       A
   \   000707   F0           MOVX      @DPTR,A
   \   000708   740B         MOV       A,#0xb
   \   00070A   12....       LCALL     ?XSTACK_DISP0_8
   \   00070D   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000710   E0           MOVX      A,@DPTR
   \   000711   C0E0         PUSH      A
   \   000713   740F         MOV       A,#0xf
   \   000715   12....       LCALL     ?XSTACK_DISP0_8
   \   000718   D0E0         POP       A
   \   00071A   F0           MOVX      @DPTR,A
   \   00071B   740B         MOV       A,#0xb
   \   00071D   12....       LCALL     ?XSTACK_DISP0_8
   \   000720   E0           MOVX      A,@DPTR
   \   000721   2402         ADD       A,#0x2
   \   000723   F8           MOV       R0,A
   \   000724   A3           INC       DPTR
   \   000725   E0           MOVX      A,@DPTR
   \   000726   3400         ADDC      A,#0x0
   \   000728   F9           MOV       R1,A
   \   000729   8882         MOV       DPL,R0
   \   00072B   F583         MOV       DPH,A
   \   00072D   E0           MOVX      A,@DPTR
   \   00072E   C0E0         PUSH      A
   \   000730   7410         MOV       A,#0x10
   \   000732   12....       LCALL     ?XSTACK_DISP0_8
   \   000735   D0E0         POP       A
   \   000737   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00073A   C0E0         PUSH      A
   \   00073C   7411         MOV       A,#0x11
   \   00073E   12....       LCALL     ?XSTACK_DISP0_8
   \   000741   D0E0         POP       A
   \   000743   F0           MOVX      @DPTR,A
   \   000744   740B         MOV       A,#0xb
   \   000746   12....       LCALL     ?XSTACK_DISP0_8
   \   000749   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   00074C   A3           INC       DPTR
   \   00074D   A3           INC       DPTR
   \   00074E   A3           INC       DPTR
   \   00074F   E0           MOVX      A,@DPTR
   \   000750   C0E0         PUSH      A
   \   000752   7412         MOV       A,#0x12
   \   000754   12....       LCALL     ?XSTACK_DISP0_8
   \   000757   D0E0         POP       A
   \   000759   F0           MOVX      @DPTR,A
   \                     ??MT_ZdoCommandProcessing_83:
   \   00075A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00075A   740D         MOV       A,#0xd
   \   00075C   12....       LCALL     ?XSTACK_DISP102_8
   \   00075F   7B06         MOV       R3,#0x6
   \   000761   7A43         MOV       R2,#0x43
   \   000763   02....       LJMP      ??MT_ZdoCommandProcessing_80 & 0xFFFF
    441                break;
    442          
    443              case MT_ZDO_SEC_DEVICE_REMOVE:
    444                 MT_ZdoSecDeviceRemove( pBuf );
   \                     ??MT_ZdoCommandProcessing_32:
   \   000766                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   000766   EA           MOV       A,R2
   \   000767   2403         ADD       A,#0x3
   \   000769   FA           MOV       R2,A
   \   00076A   5001         JNC       ??MT_ZdoCommandProcessing_84
   \   00076C   0B           INC       R3
   \                     ??MT_ZdoCommandProcessing_84:
   \   00076D   12....       LCALL     `??ZDSecMgrDeviceRemoveByExtAddr::?relay`; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
   \   000770   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   000773   7A44         MOV       R2,#0x44
   \   000775   02....       LJMP      ??MT_ZdoCommandProcessing_80 & 0xFFFF
    445                 break;
    446          
    447              case MT_ZDO_EXT_ROUTE_DISC:
    448                 MT_ZdoExtRouteDisc( pBuf );
   \                     ??MT_ZdoCommandProcessing_33:
   \   000778   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   00077B   12....       LCALL     `??NLME_RouteDiscoveryRequest::?relay`; Banked call to: NLME_RouteDiscoveryRequest
   \   00077E   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   000781   7A45         MOV       R2,#0x45
   \   000783   02....       LJMP      ??MT_ZdoCommandProcessing_80 & 0xFFFF
    449                 break;
    450          
    451              case MT_ZDO_EXT_ROUTE_CHECK:
    452                 MT_ZdoExtRouteCheck( pBuf );
   \                     ??MT_ZdoCommandProcessing_34:
   \   000786   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000789   12....       LCALL     `??RTG_CheckRtStatus::?relay`; Banked call to: RTG_CheckRtStatus
   \   00078C   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   00078F   7A46         MOV       R2,#0x46
   \   000791   02....       LJMP      ??MT_ZdoCommandProcessing_80 & 0xFFFF
    453                 break;
    454          
    455              case MT_ZDO_EXT_REMOVE_GROUP:
    456                MT_ZdoExtRemoveGroup( pBuf );
   \                     ??MT_ZdoCommandProcessing_35:
   \   000794   8A82         MOV       DPL,R2
   \   000796   8B83         MOV       DPH,R3
   \   000798   A3           INC       DPTR
   \   000799   A3           INC       DPTR
   \   00079A   A3           INC       DPTR
   \   00079B   E0           MOVX      A,@DPTR
   \   00079C   FF           MOV       R7,A
   \   00079D                ; Setup parameters for call to function osal_build_uint16
   \   00079D   EA           MOV       A,R2
   \   00079E   2404         ADD       A,#0x4
   \   0007A0   FA           MOV       R2,A
   \   0007A1   5001         JNC       ??MT_ZdoCommandProcessing_85
   \   0007A3   0B           INC       R3
   \                     ??MT_ZdoCommandProcessing_85:
   \   0007A4   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0007A7                ; Setup parameters for call to function aps_RemoveGroup
   \   0007A7   EF           MOV       A,R7
   \   0007A8   F9           MOV       R1,A
   \   0007A9   12....       LCALL     `??aps_RemoveGroup::?relay`; Banked call to: aps_RemoveGroup
   \   0007AC   E9           MOV       A,R1
   \   0007AD   85..82       MOV       DPL,?XSP + 0
   \   0007B0   85..83       MOV       DPH,?XSP + 1
   \   0007B3   6003         JZ        ??MT_ZdoCommandProcessing_86
   \   0007B5   E4           CLR       A
   \   0007B6   8002         SJMP      ??MT_ZdoCommandProcessing_87
   \                     ??MT_ZdoCommandProcessing_86:
   \   0007B8   7401         MOV       A,#0x1
   \                     ??MT_ZdoCommandProcessing_87:
   \   0007BA   F0           MOVX      @DPTR,A
   \   0007BB                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0007BB   8007         SJMP      ??MT_ZdoCommandProcessing_88
    457                break;
    458          
    459              case MT_ZDO_EXT_REMOVE_ALL_GROUP:
    460                MT_ZdoExtRemoveAllGroup( pBuf );
   \                     ??MT_ZdoCommandProcessing_36:
   \   0007BD   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   0007C0   F9           MOV       R1,A
   \   0007C1   12....       LCALL     `??aps_RemoveAllGroup::?relay`; Banked call to: aps_RemoveAllGroup
   \   0007C4                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \                     ??MT_ZdoCommandProcessing_88:
   \   0007C4   AC..         MOV       R4,?XSP + 0
   \   0007C6   AD..         MOV       R5,?XSP + 1
   \   0007C8   7B01         MOV       R3,#0x1
   \   0007CA   7A47         MOV       R2,#0x47
   \   0007CC   02....       LJMP      ??MT_ZdoCommandProcessing_80 & 0xFFFF
    461                break;
    462          
    463              case MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT:
    464                MT_ZdoExtFindAllGroupsEndpoint( pBuf );
   \                     ??MT_ZdoCommandProcessing_37:
   \   0007CF                ; Setup parameters for call to function MT_ZdoExtFindAllGroupsEndpoint
   \   0007CF   12....       LCALL     `??MT_ZdoExtFindAllGroupsEndpoint::?relay`; Banked call to: MT_ZdoExtFindAllGroupsEndpoint
    465                break;
   \   0007D2   02....       LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
    466          
    467              case MT_ZDO_EXT_FIND_GROUP:
    468                MT_ZdoExtFindGroup( pBuf );
   \                     ??MT_ZdoCommandProcessing_38:
   \   0007D5                ; Setup parameters for call to function MT_ZdoExtFindGroup
   \   0007D5   12....       LCALL     `??MT_ZdoExtFindGroup::?relay`; Banked call to: MT_ZdoExtFindGroup
    469                break;
   \   0007D8   02....       LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
    470          
    471              case MT_ZDO_EXT_ADD_GROUP:
    472                MT_ZdoExtAddGroup( pBuf );
   \                     ??MT_ZdoCommandProcessing_39:
   \   0007DB   85..82       MOV       DPL,?XSP + 0
   \   0007DE   85..83       MOV       DPH,?XSP + 1
   \   0007E1   E4           CLR       A
   \   0007E2   F0           MOVX      @DPTR,A
   \   0007E3   90....       MOV       DPTR,#`?<Constant {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, `
   \   0007E6   7413         MOV       A,#0x13
   \   0007E8   12....       LCALL     ?XSTACK_DISP102_8
   \   0007EB   7412         MOV       A,#0x12
   \   0007ED   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   0007F0   8A82         MOV       DPL,R2
   \   0007F2   8B83         MOV       DPH,R3
   \   0007F4   A3           INC       DPTR
   \   0007F5   A3           INC       DPTR
   \   0007F6   A3           INC       DPTR
   \   0007F7   E0           MOVX      A,@DPTR
   \   0007F8   FF           MOV       R7,A
   \   0007F9   EA           MOV       A,R2
   \   0007FA   2404         ADD       A,#0x4
   \   0007FC   F5..         MOV       ?V0,A
   \   0007FE   E4           CLR       A
   \   0007FF   3B           ADDC      A,R3
   \   000800   F5..         MOV       ?V1,A
   \   000802                ; Setup parameters for call to function osal_build_uint16
   \   000802   AA..         MOV       R2,?V0
   \   000804   FB           MOV       R3,A
   \   000805   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000808   7413         MOV       A,#0x13
   \   00080A   12....       LCALL     ?XSTACK_DISP0_8
   \   00080D   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000810   F8           MOV       R0,A
   \   000811   7415         MOV       A,#0x15
   \   000813   12....       LCALL     ?XSTACK_DISP0_8
   \   000816   E8           MOV       A,R0
   \   000817   F0           MOVX      @DPTR,A
   \   000818   C3           CLR       C
   \   000819   9410         SUBB      A,#0x10
   \   00081B   4005         JC        ??MT_ZdoCommandProcessing_89
   \   00081D   740F         MOV       A,#0xf
   \   00081F   F0           MOVX      @DPTR,A
   \   000820   8003         SJMP      ??MT_ZdoCommandProcessing_90
   \                     ??MT_ZdoCommandProcessing_89:
   \   000822   E0           MOVX      A,@DPTR
   \   000823   602C         JZ        ??MT_ZdoCommandProcessing_91
   \                     ??MT_ZdoCommandProcessing_90:
   \   000825                ; Setup parameters for call to function osal_memcpy
   \   000825   85..82       MOV       DPL,?V0
   \   000828   85..83       MOV       DPH,?V1
   \   00082B   A3           INC       DPTR
   \   00082C   A3           INC       DPTR
   \   00082D   A3           INC       DPTR
   \   00082E   A982         MOV       R1,DPL
   \   000830   AA83         MOV       R2,DPH
   \   000832   89..         MOV       ?V0,R1
   \   000834   8A..         MOV       ?V1,R2
   \   000836   8E..         MOV       ?V2,R6
   \   000838   78..         MOV       R0,#?V0
   \   00083A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00083D   7418         MOV       A,#0x18
   \   00083F   12....       LCALL     ?XSTACK_DISP0_8
   \   000842   E0           MOVX      A,@DPTR
   \   000843   FC           MOV       R4,A
   \   000844   7D00         MOV       R5,#0x0
   \   000846   7419         MOV       A,#0x19
   \   000848   12....       LCALL     ?XSTACK_DISP0_8
   \   00084B   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   00084E   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??MT_ZdoCommandProcessing_91:
   \   000851                ; Setup parameters for call to function aps_AddGroup
   \   000851   7413         MOV       A,#0x13
   \   000853   12....       LCALL     ?XSTACK_DISP101_8
   \   000856   EF           MOV       A,R7
   \   000857   F9           MOV       R1,A
   \   000858   12....       LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
   \   00085B   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   00085E   7A4B         MOV       R2,#0x4b
   \   000860   02....       LJMP      ??MT_ZdoCommandProcessing_80 & 0xFFFF
    473                break;
    474          
    475              case MT_ZDO_EXT_COUNT_ALL_GROUPS:
    476                MT_ZdoExtCountAllGroups( pBuf );
   \                     ??MT_ZdoCommandProcessing_40:
   \   000863   85..82       MOV       DPL,?XSP + 0
   \   000866   85..83       MOV       DPH,?XSP + 1
   \   000869   E4           CLR       A
   \   00086A   F0           MOVX      @DPTR,A
   \   00086B                ; Setup parameters for call to function aps_CountAllGroups
   \   00086B   12....       LCALL     `??aps_CountAllGroups::?relay`; Banked call to: aps_CountAllGroups
   \   00086E   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   000871   7A4C         MOV       R2,#0x4c
   \   000873   02....       LJMP      ??MT_ZdoCommandProcessing_80 & 0xFFFF
    477                break;
    478          
    479              case MT_ZDO_EXT_RX_IDLE:
    480                MT_ZdoExtRxIdle( pBuf );
   \                     ??MT_ZdoCommandProcessing_41:
   \   000876   8A82         MOV       DPL,R2
   \   000878   8B83         MOV       DPH,R3
   \   00087A   A3           INC       DPTR
   \   00087B   A3           INC       DPTR
   \   00087C   A3           INC       DPTR
   \   00087D   E0           MOVX      A,@DPTR
   \   00087E   F8           MOV       R0,A
   \   00087F   8A82         MOV       DPL,R2
   \   000881   8B83         MOV       DPH,R3
   \   000883   A3           INC       DPTR
   \   000884   A3           INC       DPTR
   \   000885   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000888   E8           MOV       A,R0
   \   000889   AA..         MOV       R2,?XSP + 0
   \   00088B   AB..         MOV       R3,?XSP + 1
   \   00088D   7952         MOV       R1,#0x52
   \   00088F   6005         JZ        ??MT_ZdoCommandProcessing_92
   \   000891                ; Setup parameters for call to function ZMacSetReq
   \   000891   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   000894   8003         SJMP      ??MT_ZdoCommandProcessing_93
   \                     ??MT_ZdoCommandProcessing_92:
   \   000896                ; Setup parameters for call to function ZMacGetReq
   \   000896   12....       LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
   \                     ??MT_ZdoCommandProcessing_93:
   \   000899                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000899   AC..         MOV       R4,?XSP + 0
   \   00089B   AD..         MOV       R5,?XSP + 1
   \   00089D   7B01         MOV       R3,#0x1
   \   00089F   7A4D         MOV       R2,#0x4d
   \   0008A1   807E         SJMP      ??MT_ZdoCommandProcessing_80
    481                break;
    482          
    483              case MT_ZDO_EXT_NWK_INFO:
    484                MT_ZdoExtNwkInfo( pBuf );
   \                     ??MT_ZdoCommandProcessing_44:
   \   0008A3                ; Setup parameters for call to function MT_ZdoExtNwkInfo
   \   0008A3   12....       LCALL     `??MT_ZdoExtNwkInfo::?relay`; Banked call to: MT_ZdoExtNwkInfo
    485                break;
   \   0008A6   02....       LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
    486          
    487              case MT_ZDO_EXT_SEC_APS_REMOVE_REQ:
    488                MT_ZdoExtSecApsRemoveReq( pBuf );
   \                     ??MT_ZdoCommandProcessing_45:
   \   0008A9   85..82       MOV       DPL,?XSP + 0
   \   0008AC   85..83       MOV       DPH,?XSP + 1
   \   0008AF   E4           CLR       A
   \   0008B0   F0           MOVX      @DPTR,A
   \   0008B1   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   0008B4   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0008B7   E0           MOVX      A,@DPTR
   \   0008B8   7035         JNZ       ??MT_ZdoCommandProcessing_94
   \   0008BA                ; Setup parameters for call to function osal_build_uint16
   \   0008BA   0A           INC       R2
   \   0008BB   0A           INC       R2
   \   0008BC   0A           INC       R2
   \   0008BD   AB..         MOV       R3,?V1
   \   0008BF   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0008C2   2402         ADD       A,#0x2
   \   0008C4   F5..         MOV       ?V0,A
   \   0008C6   5002         JNC       ??MT_ZdoCommandProcessing_95
   \   0008C8   05..         INC       ?V1
   \                     ??MT_ZdoCommandProcessing_95:
   \   0008CA                ; Setup parameters for call to function osal_build_uint16
   \   0008CA   FA           MOV       R2,A
   \   0008CB   AB..         MOV       R3,?V1
   \   0008CD   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0008D0                ; Setup parameters for call to function ZDSecMgrAPSRemove
   \   0008D0   78..         MOV       R0,#?V2
   \   0008D2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0008D5   E5..         MOV       A,?V0
   \   0008D7   2402         ADD       A,#0x2
   \   0008D9   FC           MOV       R4,A
   \   0008DA   E4           CLR       A
   \   0008DB   35..         ADDC      A,?V1
   \   0008DD   FD           MOV       R5,A
   \   0008DE   12....       LCALL     `??ZDSecMgrAPSRemove::?relay`; Banked call to: ZDSecMgrAPSRemove
   \   0008E1   7402         MOV       A,#0x2
   \   0008E3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0008E6   E9           MOV       A,R1
   \   0008E7   85..82       MOV       DPL,?XSP + 0
   \   0008EA   85..83       MOV       DPH,?XSP + 1
   \   0008ED   8008         SJMP      ??MT_ZdoCommandProcessing_96
   \                     ??MT_ZdoCommandProcessing_94:
   \   0008EF   85..82       MOV       DPL,?XSP + 0
   \   0008F2   85..83       MOV       DPH,?XSP + 1
   \   0008F5   7412         MOV       A,#0x12
   \                     ??MT_ZdoCommandProcessing_96:
   \   0008F7   12....       LCALL     ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   0008FA   7A51         MOV       R2,#0x51
   \   0008FC   8023         SJMP      ??MT_ZdoCommandProcessing_80
    489                break;
    490          
    491              case MT_ZDO_FORCE_CONCENTRATOR_CHANGE:
    492                ZDApp_ForceConcentratorChange();
   \                     ??MT_ZdoCommandProcessing_46:
   \   0008FE                ; Setup parameters for call to function ZDApp_ForceConcentratorChange
   \   0008FE   12....       LCALL     `??ZDApp_ForceConcentratorChange::?relay`; Banked call to: ZDApp_ForceConcentratorChange
    493                break;
   \   000901   8027         SJMP      ??MT_ZdoCommandProcessing_50
    494          
    495              case MT_ZDO_EXT_SET_PARAMS:
    496                MT_ZdoExtSetParams( pBuf );
   \                     ??MT_ZdoCommandProcessing_47:
   \   000903   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000906   F8           MOV       R0,A
   \   000907   A2E7         MOV       C,0xE0 /* A   */.7
   \   000909   500E         JNC       ??MT_ZdoCommandProcessing_97
   \   00090B   747F         MOV       A,#0x7f
   \   00090D   58           ANL       A,R0
   \   00090E   90....       MOV       DPTR,#_NIB + 100
   \   000911   6004         JZ        ??MT_ZdoCommandProcessing_98
   \   000913   7401         MOV       A,#0x1
   \   000915   8001         SJMP      ??MT_ZdoCommandProcessing_99
   \                     ??MT_ZdoCommandProcessing_98:
   \   000917   E4           CLR       A
   \                     ??MT_ZdoCommandProcessing_99:
   \   000918   F0           MOVX      @DPTR,A
   \                     ??MT_ZdoCommandProcessing_97:
   \   000919                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000919   AC..         MOV       R4,?XSP + 0
   \   00091B   AD..         MOV       R5,?XSP + 1
   \   00091D   7B01         MOV       R3,#0x1
   \   00091F   7A53         MOV       R2,#0x53
   \                     ??MT_ZdoCommandProcessing_80:
   \   000921   7965         MOV       R1,#0x65
   \   000923   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    497                break;
   \   000926   8002         SJMP      ??MT_ZdoCommandProcessing_50
    498          #endif  // MT_ZDO_EXTENSIONS
    499          
    500              default:
    501                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_ZdoCommandProcessing_49:
   \   000928   7E02         MOV       R6,#0x2
    502                break;
    503            }
    504          
    505            return status;
   \                     ??MT_ZdoCommandProcessing_50:
   \   00092A   EE           MOV       A,R6
   \   00092B   F9           MOV       R1,A
   \   00092C   7436         MOV       A,#0x36
   \   00092E   02....       LJMP      ??Subroutine114_0 & 0xFFFF
    506          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000003                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000003                ; Setup parameters for call to function ZDO_RemoveRegisteredCB
   \   000003   90....       MOV       DPTR,#MT_TaskID
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F9           MOV       R1,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F5..         MOV       ?V0,A
   \   000008   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   00000B   FA           MOV       R2,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FF           MOV       R7,A
   \   000008                ; Setup parameters for call to function osal_build_uint16
   \   000008                ; Setup parameters for call to function osal_build_uint16
   \   000008                ; Setup parameters for call to function osal_build_uint16
   \   000008   EA           MOV       A,R2
   \   000009   2403         ADD       A,#0x3
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine112_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001                ; Setup parameters for call to function aps_RemoveAllGroup
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine114_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F08         MOV       R7,#0x8
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   12....       LCALL     ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000003   A3           INC       DPTR
   \   000004   22           RET
    507          
    508          /***************************************************************************************************
    509           * @fn      MT_ZdoNwkAddrReq
    510           *
    511           * @brief   Handle a nwk address request.
    512           *
    513           * @param   pData  - MT message data
    514           *
    515           * @return  void
    516           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    517          static void MT_ZdoNWKAddressRequest(uint8 *pBuf)
   \                     MT_ZdoNWKAddressRequest:
    518          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 22
   \   000005   74EA         MOV       A,#-0x16
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    519            uint8 cmdId;
    520            uint8 retValue;
    521            uint8 reqType;
    522            uint8 startIndex;
    523            uint8 *pExtAddr;
    524          
    525            /* parse header */
    526            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   \   00000E   12....       LCALL     ??Subroutine116_0 & 0xFFFF
    527            pBuf += MT_RPC_FRAME_HDR_SZ;
    528          
    529            /* parse parameters */
    530            pExtAddr = pBuf;
   \                     ??CrossCallReturnLabel_227:
   \   000011   E4           CLR       A
   \   000012   3B           ADDC      A,R3
   \   000013   FF           MOV       R7,A
    531            pBuf += Z_EXTADDR_LEN;
   \   000014   EE           MOV       A,R6
   \   000015   2408         ADD       A,#0x8
   \   000017   FA           MOV       R2,A
   \   000018   E4           CLR       A
   \   000019   3F           ADDC      A,R7
   \   00001A   FB           MOV       R3,A
    532          
    533            /* Request type */
    534            reqType = *pBuf++;
    535          
    536            /* Start index */
    537            startIndex = *pBuf;
    538          
    539            retValue = (uint8)ZDP_NwkAddrReq(pExtAddr, reqType, startIndex, 0);
   \   00001B                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   00001B   7D00         MOV       R5,#0x0
   \   00001D   8A82         MOV       DPL,R2
   \   00001F   F583         MOV       DPH,A
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   FC           MOV       R4,A
   \   000024   8A82         MOV       DPL,R2
   \   000026   8B83         MOV       DPH,R3
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F9           MOV       R1,A
   \   00002A   EE           MOV       A,R6
   \   00002B   FA           MOV       R2,A
   \   00002C   EF           MOV       A,R7
   \   00002D   FB           MOV       R3,A
   \   00002E   12....       LCALL     `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   000031   12....       LCALL     ?Subroutine53 & 0xFFFF
    540          
    541            /* Build and send back the response */
    542            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    543          
    544          #if defined ( MT_ZDO_EXTENSIONS )
    545            {
    546              // Force a response message if the ext address matches a child of this device
    547              associated_devices_t *pAssoc;
    548              uint8 buf[21];
    549              uint8 *pBuf = buf;
    550          
    551              if ( (ZSTACK_ROUTER_BUILD)
    552                && (((pAssoc = AssocGetWithExt( pExtAddr )) != NULL)
    553                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \                     ??CrossCallReturnLabel_88:
   \   000034   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000037   E0           MOVX      A,@DPTR
   \   000038   6007         JZ        ??MT_ZdoNWKAddressRequest_0
   \   00003A   6401         XRL       A,#0x1
   \   00003C   6003         JZ        $+5
   \   00003E   02....       LJMP      ??MT_ZdoNWKAddressRequest_1 & 0xFFFF
   \                     ??MT_ZdoNWKAddressRequest_0:
   \   000041                ; Setup parameters for call to function AssocGetWithExt
   \   000041   EE           MOV       A,R6
   \   000042   FA           MOV       R2,A
   \   000043   EF           MOV       A,R7
   \   000044   FB           MOV       R3,A
   \   000045   12....       LCALL     `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   000048   8A..         MOV       ?V0,R2
   \   00004A   8B..         MOV       ?V1,R3
   \   00004C   EA           MOV       A,R2
   \   00004D   4B           ORL       A,R3
   \   00004E   7003         JNZ       $+5
   \   000050   02....       LJMP      ??MT_ZdoNWKAddressRequest_1 & 0xFFFF
   \   000053   8A82         MOV       DPL,R2
   \   000055   8B83         MOV       DPH,R3
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   6401         XRL       A,#0x1
   \   00005E   7077         JNZ       ??MT_ZdoNWKAddressRequest_1
    554              {
    555                uint16 nwkAddr = NLME_GetShortAddr();
   \   000060                ; Setup parameters for call to function NLME_GetShortAddr
   \   000060   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000063   8A..         MOV       ?V2,R2
    556          
    557                *pBuf++ = LO_UINT16(nwkAddr);
   \   000065   7401         MOV       A,#0x1
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   EA           MOV       A,R2
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   EB           MOV       A,R3
   \   00006D   FA           MOV       R2,A
   \   00006E   7402         MOV       A,#0x2
   \   000070   12....       LCALL     ?XSTACK_DISP0_8
   \   000073   EB           MOV       A,R3
   \   000074   F0           MOVX      @DPTR,A
    558                *pBuf++ = HI_UINT16(nwkAddr);
    559                *pBuf++ = 0;
   \   000075   7403         MOV       A,#0x3
   \   000077   12....       LCALL     ?XSTACK_DISP0_8
   \   00007A   E4           CLR       A
   \   00007B   F0           MOVX      @DPTR,A
    560                *pBuf++ = LO_UINT16(NWK_addr_rsp);
   \   00007C   7404         MOV       A,#0x4
   \   00007E   12....       LCALL     ?XSTACK_DISP0_8
   \   000081   E4           CLR       A
   \   000082   F0           MOVX      @DPTR,A
    561                *pBuf++ = HI_UINT16(NWK_addr_rsp);
   \   000083   7405         MOV       A,#0x5
   \   000085   12....       LCALL     ?XSTACK_DISP0_8
   \   000088   7480         MOV       A,#-0x80
   \   00008A   F0           MOVX      @DPTR,A
    562                *pBuf++ = 0;
   \   00008B   7406         MOV       A,#0x6
   \   00008D   12....       LCALL     ?XSTACK_DISP0_8
   \   000090   E4           CLR       A
   \   000091   F0           MOVX      @DPTR,A
    563                *pBuf++ = 0;
   \   000092   7407         MOV       A,#0x7
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   E4           CLR       A
   \   000098   F0           MOVX      @DPTR,A
    564                *pBuf++ = LO_UINT16(nwkAddr);
   \   000099   7408         MOV       A,#0x8
   \   00009B   12....       LCALL     ?XSTACK_DISP0_8
   \   00009E   E5..         MOV       A,?V2
   \   0000A0   F0           MOVX      @DPTR,A
    565                *pBuf++ = HI_UINT16(nwkAddr);
   \   0000A1   7409         MOV       A,#0x9
   \   0000A3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A6   EB           MOV       A,R3
   \   0000A7   F0           MOVX      @DPTR,A
    566          
    567                *pBuf++ = ZSuccess;
   \   0000A8   740A         MOV       A,#0xa
   \   0000AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AD   E4           CLR       A
   \   0000AE   F0           MOVX      @DPTR,A
    568          
    569                pBuf = osal_cpyExtAddr( pBuf, pExtAddr );
   \   0000AF                ; Setup parameters for call to function sAddrExtCpy
   \   0000AF   EE           MOV       A,R6
   \   0000B0   FC           MOV       R4,A
   \   0000B1   EF           MOV       A,R7
   \   0000B2   FD           MOV       R5,A
   \   0000B3   740B         MOV       A,#0xb
   \   0000B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B8   AA82         MOV       R2,DPL
   \   0000BA   AB83         MOV       R3,DPH
   \   0000BC   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    570          
    571                *pBuf++ = LO_UINT16( pAssoc->shortAddr );
   \   0000BF   12....       LCALL     ?Subroutine15 & 0xFFFF
    572                *pBuf++ = HI_UINT16( pAssoc->shortAddr );
    573                *pBuf = 0;
   \                     ??CrossCallReturnLabel_21:
   \   0000C2   8A82         MOV       DPL,R2
   \   0000C4   8B83         MOV       DPH,R3
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   E4           CLR       A
   \   0000C9   F0           MOVX      @DPTR,A
    574          
    575                MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
    576                                            MT_ZDO_MSG_CB_INCOMING, 21, buf );
   \   0000CA                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000CA   04           INC       A
   \   0000CB   12....       LCALL     ?XSTACK_DISP102_8
   \   0000CE   7B15         MOV       R3,#0x15
   \   0000D0   7AFF         MOV       R2,#-0x1
   \   0000D2   7945         MOV       R1,#0x45
   \   0000D4   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    577              }
    578            }
    579          #endif
    580          }
   \                     ??MT_ZdoNWKAddressRequest_1:
   \   0000D7   7416         MOV       A,#0x16
   \   0000D9                REQUIRE ?Subroutine2
   \   0000D9                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F04         MOV       R7,#0x4
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   E9           MOV       A,R1
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   F0           MOVX      @DPTR,A
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008   AC..         MOV       R4,?XSP + 0
   \   00000A   AD..         MOV       R5,?XSP + 1
   \   00000C   7B01         MOV       R3,#0x1
   \   00000E   AA..         MOV       R2,?V0
   \   000010   7965         MOV       R1,#0x65
   \   000012   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine116_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   F5..         MOV       ?V0,A
   \   000005   EA           MOV       A,R2
   \   000006   2403         ADD       A,#0x3
   \   000008   FE           MOV       R6,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000009   85..82       MOV       DPL,?V0
   \   00000C   85..83       MOV       DPH,?V1
   \   00000F   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   F0           MOVX      @DPTR,A
   \   000006   22           RET
    581          
    582          /***************************************************************************************************
    583           * @fn      MT_ZdoIEEEAddrRequest
    584           *
    585           * @brief   Handle a IEEE address request.
    586           *
    587           * @param   pData  - MT message data
    588           *
    589           * @return  void
    590           ***************************************************************************************************/
    591          static void MT_ZdoIEEEAddrRequest (uint8 *pBuf)
    592          {
    593            uint8 cmdId;
    594            uint8 retValue;
    595            uint16 shortAddr;
    596            uint8 reqType;
    597            uint8 startIndex;
    598          
    599            /* parse header */
    600            cmdId = pBuf[MT_RPC_POS_CMD1];
    601            pBuf += MT_RPC_FRAME_HDR_SZ;
    602          
    603            /* Dev address */
    604            shortAddr = osal_build_uint16( pBuf );
    605            pBuf += 2;
    606          
    607            /* request type */
    608            reqType = *pBuf++;
    609          
    610            /* start index */
    611            startIndex = *pBuf;
    612          
    613            retValue = (uint8)ZDP_IEEEAddrReq(shortAddr, reqType, startIndex, 0);
    614          
    615            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    616          }
    617          
    618          /***************************************************************************************************
    619           * @fn      MT_ZdoNodeDescRequest
    620           *
    621           * @brief   Handle a Node Descriptor request.
    622           *
    623           * @param   pData  - MT message data
    624           *
    625           * @return  void
    626           ***************************************************************************************************/
    627          static void MT_ZdoNodeDescRequest (uint8 *pBuf)
    628          {
    629            uint8 cmdId;
    630            uint8 retValue;
    631            zAddrType_t destAddr;
    632            uint16 shortAddr;
    633          
    634            /* parse header */
    635            cmdId = pBuf[MT_RPC_POS_CMD1];
    636            pBuf += MT_RPC_FRAME_HDR_SZ;
    637          
    638            /* Destination address */
    639            destAddr.addrMode = Addr16Bit;
    640            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    641            pBuf += 2;
    642          
    643            /* Network address of interest */
    644            shortAddr = osal_build_uint16( pBuf );
    645          
    646            retValue = (uint8)ZDP_NodeDescReq( &destAddr, shortAddr, 0);
    647          
    648            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    649          }
    650          
    651          /***************************************************************************************************
    652           * @fn      MT_ZdoPowerDescRequest
    653           *
    654           * @brief   Handle a Power Descriptor request.
    655           *
    656           * @param   pData  - MT message data
    657           *
    658           * @return  void
    659           ***************************************************************************************************/
    660          static void MT_ZdoPowerDescRequest(uint8 *pBuf)
    661          {
    662            uint8 cmdId;
    663            uint8 retValue;
    664            zAddrType_t destAddr;
    665            uint16 shortAddr;
    666          
    667            /* parse header */
    668            cmdId = pBuf[MT_RPC_POS_CMD1];
    669            pBuf += MT_RPC_FRAME_HDR_SZ;
    670          
    671            /* Dev address */
    672            destAddr.addrMode = Addr16Bit;
    673            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    674            pBuf += 2;
    675          
    676            /* Network address of interest */
    677            shortAddr = osal_build_uint16( pBuf );
    678          
    679            retValue = (uint8)ZDP_PowerDescReq( &destAddr, shortAddr, 0);
    680          
    681            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    682          }
    683          
    684          /***************************************************************************************************
    685           * @fn      MT_ZdoSimpleDescRequest
    686           *
    687           * @brief   Handle a Simple Descriptor request.
    688           *
    689           * @param   pBuf  - MT message data
    690           *
    691           * @return  void
    692           ***************************************************************************************************/
    693          static void MT_ZdoSimpleDescRequest(uint8 *pBuf)
    694          {
    695            uint8 cmdId;
    696            uint8 retValue;
    697            uint8 epInt;
    698            zAddrType_t destAddr;
    699            uint16 shortAddr;
    700          
    701            /* parse header */
    702            cmdId = pBuf[MT_RPC_POS_CMD1];
    703            pBuf += MT_RPC_FRAME_HDR_SZ;
    704          
    705            /* Dev address */
    706            destAddr.addrMode = Addr16Bit;
    707            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    708            pBuf += 2;
    709          
    710            /* Network address of interest */
    711            shortAddr = osal_build_uint16( pBuf );
    712            pBuf += 2;
    713          
    714            /* endpoint/interface */
    715            epInt = *pBuf;
    716          
    717            retValue = (uint8)ZDP_SimpleDescReq( &destAddr, shortAddr, epInt, 0);
    718          
    719            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    720          }
    721          
    722          /***************************************************************************************************
    723           * @fn      MT_ZdoActiveEpRequest
    724           *
    725           * @brief   Handle a Active EP request.
    726           *
    727           * @param   pBuf  - MT message data
    728           *
    729           * @return  void
    730           ***************************************************************************************************/
    731          static void MT_ZdoActiveEpRequest(uint8 *pBuf)
    732          {
    733            uint8 cmdId;
    734            uint8 retValue;
    735            zAddrType_t destAddr;
    736            uint16 shortAddr;
    737          
    738            /* parse header */
    739            cmdId = pBuf[MT_RPC_POS_CMD1];
    740            pBuf += MT_RPC_FRAME_HDR_SZ;
    741          
    742            /* Dev address */
    743            destAddr.addrMode = Addr16Bit;
    744            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    745            pBuf += 2;
    746          
    747            /* Network address of interest */
    748            shortAddr = osal_build_uint16( pBuf );
    749          
    750            retValue = (uint8)ZDP_ActiveEPReq( &destAddr, shortAddr, 0);
    751          
    752            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    753          }
    754          
    755          /***************************************************************************************************
    756           * @fn      MT_ZdoMatchDescRequest
    757           *
    758           * @brief   Handle a Match Descriptor request.
    759           *
    760           * @param   pBuf  - MT message data
    761           *
    762           * @return  void
    763           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    764          static void MT_ZdoMatchDescRequest(uint8 *pBuf)
   \                     MT_ZdoMatchDescRequest:
    765          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 74
   \   000005   74B6         MOV       A,#-0x4a
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine33 & 0xFFFF
    766            uint8 cmdId;
    767            uint8 retValue = 0;
    768            uint8 i, numInClusters, numOutClusters;
    769            uint16 profileId;
    770            zAddrType_t destAddr;
    771            uint16 shortAddr;
    772            uint16 inClusters[MTZDO_MAX_MATCH_CLUSTERS], outClusters[MTZDO_MAX_MATCH_CLUSTERS];
    773          
    774            /* parse header */
    775            cmdId = pBuf[MT_RPC_POS_CMD1];
    776            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_206:
   \   00000D   5001         JNC       ??MT_ZdoMatchDescRequest_0
   \   00000F   0F           INC       R7
    777          
    778            /* Dev address */
    779            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoMatchDescRequest_0:
   \   000010   7409         MOV       A,#0x9
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine44 & 0xFFFF
    780            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??CrossCallReturnLabel_200:
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ??Subroutine113_0 & 0xFFFF
    781            pBuf += 2;
   \                     ??CrossCallReturnLabel_217:
   \   00001E   5001         JNC       ??MT_ZdoMatchDescRequest_1
   \   000020   0F           INC       R7
    782          
    783            /* Network address of interest */
    784            shortAddr = osal_build_uint16( pBuf );
   \                     ??MT_ZdoMatchDescRequest_1:
   \   000021                ; Setup parameters for call to function osal_build_uint16
   \   000021   12....       LCALL     ?Subroutine88 & 0xFFFF
    785            pBuf += 2;
   \                     ??CrossCallReturnLabel_196:
   \   000024   EE           MOV       A,R6
   \   000025   2402         ADD       A,#0x2
   \   000027   FE           MOV       R6,A
   \   000028   5001         JNC       ??MT_ZdoMatchDescRequest_2
   \   00002A   0F           INC       R7
    786          
    787            /* Profile ID */
    788            profileId = osal_build_uint16( pBuf );
   \                     ??MT_ZdoMatchDescRequest_2:
   \   00002B                ; Setup parameters for call to function osal_build_uint16
   \   00002B   12....       LCALL     ?Subroutine89 & 0xFFFF
    789            pBuf += 2;
    790          
    791            /* NumInClusters */
    792            numInClusters = *pBuf++;
   \                     ??CrossCallReturnLabel_160:
   \   00002E   F5..         MOV       ?V6,A
   \   000030   EE           MOV       A,R6
   \   000031   2403         ADD       A,#0x3
   \   000033   FE           MOV       R6,A
   \   000034   5001         JNC       ??MT_ZdoMatchDescRequest_3
   \   000036   0F           INC       R7
    793            if ( numInClusters <= MTZDO_MAX_MATCH_CLUSTERS )
   \                     ??MT_ZdoMatchDescRequest_3:
   \   000037   E5..         MOV       A,?V6
   \   000039   C3           CLR       C
   \   00003A   9411         SUBB      A,#0x11
   \   00003C   501C         JNC       ??MT_ZdoMatchDescRequest_4
    794            {
    795              /* IN clusters */
    796              for ( i = 0; i < numInClusters; i++ )
   \   00003E   75..00       MOV       ?V3,#0x0
   \                     ??MT_ZdoMatchDescRequest_5:
   \   000041   E5..         MOV       A,?V3
   \   000043   C3           CLR       C
   \   000044   95..         SUBB      A,?V6
   \   000046   501B         JNC       ??MT_ZdoMatchDescRequest_6
    797              {
    798                inClusters[i] = osal_build_uint16( pBuf );
   \   000048                ; Setup parameters for call to function osal_build_uint16
   \   000048   12....       LCALL     ?Subroutine45 & 0xFFFF
    799                pBuf += 2;
    800              }
   \                     ??CrossCallReturnLabel_69:
   \   00004B   742A         MOV       A,#0x2a
   \   00004D   12....       LCALL     ?XSTACK_DISP0_8
   \   000050   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000053   5001         JNC       ??MT_ZdoMatchDescRequest_7
   \   000055   0F           INC       R7
   \                     ??MT_ZdoMatchDescRequest_7:
   \   000056   05..         INC       ?V3
   \   000058   80E7         SJMP      ??MT_ZdoMatchDescRequest_5
    801            }
    802            else
    803            {
    804              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoMatchDescRequest_4:
   \   00005A   85..82       MOV       DPL,?XSP + 0
   \   00005D   85..83       MOV       DPH,?XSP + 1
   \   000060   7480         MOV       A,#-0x80
   \   000062   F0           MOVX      @DPTR,A
    805            }
    806          
    807            /* NumOutClusters */
    808            numOutClusters = *pBuf++;
   \                     ??MT_ZdoMatchDescRequest_6:
   \   000063   8E82         MOV       DPL,R6
   \   000065   8F83         MOV       DPH,R7
   \   000067   E0           MOVX      A,@DPTR
   \   000068   F5..         MOV       ?V7,A
   \   00006A   A3           INC       DPTR
   \   00006B   AE82         MOV       R6,DPL
   \   00006D   AF83         MOV       R7,DPH
    809            if ( numOutClusters <= MTZDO_MAX_MATCH_CLUSTERS )
   \   00006F   C3           CLR       C
   \   000070   9411         SUBB      A,#0x11
   \   000072   501C         JNC       ??MT_ZdoMatchDescRequest_8
    810            {
    811              /* OUT Clusters */
    812              for ( i = 0; i < numOutClusters; i++ )
   \   000074   75..00       MOV       ?V3,#0x0
   \                     ??MT_ZdoMatchDescRequest_9:
   \   000077   E5..         MOV       A,?V3
   \   000079   C3           CLR       C
   \   00007A   95..         SUBB      A,?V7
   \   00007C   501C         JNC       ??MT_ZdoMatchDescRequest_10
    813              {
    814                outClusters[i] = osal_build_uint16( pBuf );
   \   00007E                ; Setup parameters for call to function osal_build_uint16
   \   00007E   12....       LCALL     ?Subroutine45 & 0xFFFF
    815                pBuf += 2;
    816              }
   \                     ??CrossCallReturnLabel_70:
   \   000081   740A         MOV       A,#0xa
   \   000083   12....       LCALL     ?XSTACK_DISP0_8
   \   000086   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000089   5001         JNC       ??MT_ZdoMatchDescRequest_11
   \   00008B   0F           INC       R7
   \                     ??MT_ZdoMatchDescRequest_11:
   \   00008C   05..         INC       ?V3
   \   00008E   80E7         SJMP      ??MT_ZdoMatchDescRequest_9
    817            }
    818            else
    819            {
    820              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoMatchDescRequest_8:
   \   000090   85..82       MOV       DPL,?XSP + 0
   \   000093   85..83       MOV       DPH,?XSP + 1
   \   000096   7480         MOV       A,#-0x80
   \   000098   8055         SJMP      ??MT_ZdoMatchDescRequest_12
    821            }
    822          
    823            if ( retValue == 0 )
   \                     ??MT_ZdoMatchDescRequest_10:
   \   00009A   85..82       MOV       DPL,?XSP + 0
   \   00009D   85..83       MOV       DPH,?XSP + 1
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   704D         JNZ       ??MT_ZdoMatchDescRequest_13
    824            {
    825              retValue = (uint8)ZDP_MatchDescReq( &destAddr, shortAddr, profileId, numInClusters,
    826                                                 inClusters, numOutClusters, outClusters, 0);
   \   0000A3                ; Setup parameters for call to function ZDP_MatchDescReq
   \   0000A3   75..00       MOV       ?V3,#0x0
   \   0000A6   78..         MOV       R0,#?V3
   \   0000A8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AB   740B         MOV       A,#0xb
   \   0000AD   12....       LCALL     ?XSTACK_DISP100_8
   \   0000B0   88..         MOV       ?V8,R0
   \   0000B2   89..         MOV       ?V9,R1
   \   0000B4   78..         MOV       R0,#?V8
   \   0000B6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B9   E5..         MOV       A,?V7
   \   0000BB   F5..         MOV       ?V3,A
   \   0000BD   78..         MOV       R0,#?V3
   \   0000BF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C2   742E         MOV       A,#0x2e
   \   0000C4   12....       LCALL     ?XSTACK_DISP100_8
   \   0000C7   88..         MOV       ?V8,R0
   \   0000C9   89..         MOV       ?V9,R1
   \   0000CB   78..         MOV       R0,#?V8
   \   0000CD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D0   78..         MOV       R0,#?V4
   \   0000D2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D5   A9..         MOV       R1,?V6
   \   0000D7   AC..         MOV       R4,?V0
   \   0000D9   AD..         MOV       R5,?V1
   \   0000DB   7409         MOV       A,#0x9
   \   0000DD   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E0   12....       LCALL     `??ZDP_MatchDescReq::?relay`; Banked call to: ZDP_MatchDescReq
   \   0000E3   7408         MOV       A,#0x8
   \   0000E5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E8   E9           MOV       A,R1
   \   0000E9   85..82       MOV       DPL,?XSP + 0
   \   0000EC   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_ZdoMatchDescRequest_12:
   \   0000EF   F0           MOVX      @DPTR,A
    827            }
    828          
    829            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoMatchDescRequest_13:
   \   0000F0                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000F0   AC..         MOV       R4,?XSP + 0
   \   0000F2   AD..         MOV       R5,?XSP + 1
   \   0000F4   7B01         MOV       R3,#0x1
   \   0000F6   AA..         MOV       R2,?V2
   \   0000F8   7965         MOV       R1,#0x65
   \   0000FA   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    830          }
   \   0000FD   744A         MOV       A,#0x4a
   \   0000FF                REQUIRE ?Subroutine3
   \   0000FF                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine107_0
   \   000003                ; // Fall through to label ??Subroutine107_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   7F0A         MOV       R7,#0xa
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   FA           MOV       R2,A
   \   000001   EF           MOV       A,R7
   \   000002                REQUIRE ??Subroutine108_0
   \   000002                ; // Fall through to label ??Subroutine108_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine108_0:
   \   000000   FB           MOV       R3,A
   \   000001                REQUIRE ??Subroutine109_0
   \   000001                ; // Fall through to label ??Subroutine109_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine109_0:
   \   000000   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000003   8A..         MOV       ?V0,R2
   \   000005   8B..         MOV       ?V1,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   EE           MOV       A,R6
   \   000001   FA           MOV       R2,A
   \   000002   EF           MOV       A,R7
   \   000003   FB           MOV       R3,A
   \   000004   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000007   A8..         MOV       R0,?V3
   \   000009   E8           MOV       A,R0
   \   00000A   28           ADD       A,R0
   \   00000B   F8           MOV       R0,A
   \   00000C   E4           CLR       A
   \   00000D   33           RLC       A
   \   00000E   F9           MOV       R1,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   7402         MOV       A,#0x2
   \   000002   F0           MOVX      @DPTR,A
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003   0A           INC       R2
   \   000004   0A           INC       R2
   \   000005   0A           INC       R2
   \   000006                REQUIRE ??Subroutine110_0
   \   000006                ; // Fall through to label ??Subroutine110_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine110_0:
   \   000000   EF           MOV       A,R7
   \   000001   FB           MOV       R3,A
   \   000002   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000005   7401         MOV       A,#0x1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   EB           MOV       A,R3
   \   000001   FF           MOV       R7,A
   \   000002   85..82       MOV       DPL,?XSP + 0
   \   000005   85..83       MOV       DPH,?XSP + 1
   \   000008   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   00000B                REQUIRE ??Subroutine111_0
   \   00000B                ; // Fall through to label ??Subroutine111_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine111_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   F5..         MOV       ?V2,A
   \   000005   EA           MOV       A,R2
   \   000006   2403         ADD       A,#0x3
   \   000008   FE           MOV       R6,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   E4           CLR       A
   \   000001                REQUIRE ??Subroutine112_0
   \   000001                ; // Fall through to label ??Subroutine112_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   E582         MOV       A,DPL
   \   000002   28           ADD       A,R0
   \   000003   F582         MOV       DPL,A
   \   000005   E583         MOV       A,DPH
   \   000007   39           ADDC      A,R1
   \   000008   F583         MOV       DPH,A
   \   00000A                REQUIRE ??Subroutine113_0
   \   00000A                ; // Fall through to label ??Subroutine113_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine113_0:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   EE           MOV       A,R6
   \   000006   2402         ADD       A,#0x2
   \   000008   FE           MOV       R6,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   FA           MOV       R2,A
   \   000001   EF           MOV       A,R7
   \   000002   FB           MOV       R3,A
   \   000003   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000006   8A..         MOV       ?V4,R2
   \   000008   8B..         MOV       ?V5,R3
   \   00000A   8E82         MOV       DPL,R6
   \   00000C   8F83         MOV       DPH,R7
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   22           RET
    831          
    832          /***************************************************************************************************
    833           * @fn      MT_ZdoComplexDescRequest
    834           *
    835           * @brief   Handle a Complex Descriptor request.
    836           *
    837           * @param   pBuf  - MT message data
    838           *
    839           * @return  void
    840           ***************************************************************************************************/
    841          static void MT_ZdoComplexDescRequest(uint8 *pBuf)
    842          {
    843            uint8 cmdId;
    844            uint8 retValue;
    845            zAddrType_t destAddr;
    846            uint16 shortAddr;
    847          
    848            /* parse header */
    849            cmdId = pBuf[MT_RPC_POS_CMD1];
    850            pBuf += MT_RPC_FRAME_HDR_SZ;
    851          
    852            /* Dev address */
    853            destAddr.addrMode = Addr16Bit;
    854            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    855            pBuf += 2;
    856          
    857            /* Network address of interest */
    858            shortAddr = osal_build_uint16( pBuf );
    859          
    860            retValue = (uint8)ZDP_ComplexDescReq( &destAddr, shortAddr, 0);
    861          
    862            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    863          }
    864          
    865          /***************************************************************************************************
    866           * @fn      MT_ZdoUserDescRequest
    867           *
    868           * @brief   Handle a User Descriptor request.
    869           *
    870           * @param   pBuf  - MT message data
    871           *
    872           * @return  void
    873           ***************************************************************************************************/
    874          static void MT_ZdoUserDescRequest(uint8 *pBuf)
    875          {
    876            uint8 cmdId;
    877            uint8 retValue;
    878            zAddrType_t destAddr;
    879            uint16 shortAddr;
    880          
    881            /* parse header */
    882            cmdId = pBuf[MT_RPC_POS_CMD1];
    883            pBuf += MT_RPC_FRAME_HDR_SZ;
    884          
    885            /* Dev address */
    886            destAddr.addrMode = Addr16Bit;
    887            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    888            pBuf += 2;
    889          
    890            /* Network address of interest */
    891            shortAddr = osal_build_uint16( pBuf );
    892          
    893            retValue = (uint8)ZDP_UserDescReq( &destAddr, shortAddr, 0);
    894          
    895            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    896          }
    897          
    898          /***************************************************************************************************
    899           * @fn      MT_ZdoEndDevAnnce
    900           *
    901           * @brief   Handle a End Device Announce Descriptor request.
    902           *
    903           * @param   pBuf  - MT message data
    904           *
    905           * @return  void
    906           ***************************************************************************************************/
    907          static void MT_ZdoEndDevAnnce(uint8 *pBuf)
    908          {
    909            uint8 cmdId;
    910            uint8 retValue;
    911            uint16 shortAddr;
    912            uint8 *pIEEEAddr;
    913          
    914            /* parse header */
    915            cmdId = pBuf[MT_RPC_POS_CMD1];
    916            pBuf += MT_RPC_FRAME_HDR_SZ;
    917          
    918            /* network address */
    919            shortAddr = osal_build_uint16( pBuf );
    920            pBuf += 2;
    921          
    922            /* extended address */
    923            pIEEEAddr = pBuf;
    924            pBuf += Z_EXTADDR_LEN;
    925          
    926            retValue = (uint8)ZDP_DeviceAnnce( shortAddr, pIEEEAddr, *pBuf, 0);
    927          
    928            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    929          }
    930          
    931          /***************************************************************************************************
    932           * @fn      MT_ZdoUserDescSet
    933           *
    934           * @brief   Handle a User Descriptor Set.
    935           *
    936           * @param   pBuf  - MT message data
    937           *
    938           * @return  void
    939           ***************************************************************************************************/
    940          static void MT_ZdoUserDescSet(uint8 *pBuf)
    941          {
    942            uint8 cmdId;
    943            uint8 retValue;
    944            zAddrType_t destAddr;
    945            uint16 shortAddr;
    946            UserDescriptorFormat_t userDesc;
    947          
    948            /* parse header */
    949            cmdId = pBuf[MT_RPC_POS_CMD1];
    950            pBuf += MT_RPC_FRAME_HDR_SZ;
    951          
    952            /* Dev address */
    953            destAddr.addrMode = Addr16Bit;
    954            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    955            pBuf += 2;
    956          
    957            /* Network address of interest */
    958            shortAddr = osal_build_uint16( pBuf );
    959            pBuf += 2;
    960          
    961            /* User descriptor */
    962            userDesc.len = *pBuf++;
    963            osal_memcpy( userDesc.desc, pBuf, userDesc.len );
    964          
    965            retValue = (uint8)ZDP_UserDescSet( &destAddr, shortAddr, &userDesc, 0);
    966          
    967            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    968          }
    969          
    970          /***************************************************************************************************
    971           * @fn      MT_ZdoServiceDiscRequest
    972           *
    973           * @brief   Handle a Server Discovery request.
    974           *
    975           * @param   pBuf  - MT message data
    976           *
    977           * @return  void
    978           ***************************************************************************************************/
    979          static void MT_ZdoServiceDiscRequest(uint8 *pBuf)
    980          {
    981            uint8 cmdId;
    982            uint8 retValue;
    983            uint16 serviceMask;
    984          
    985            /* parse header */
    986            cmdId = pBuf[MT_RPC_POS_CMD1];
    987            pBuf += MT_RPC_FRAME_HDR_SZ;
    988          
    989            /* Service Mask */
    990            serviceMask = osal_build_uint16( pBuf );
    991          
    992            retValue = (uint8)ZDP_ServerDiscReq( serviceMask, 0);
    993          
    994            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    995          }
    996          
    997          /***************************************************************************************************
    998           * @fn      MT_ZdoEndDevBindRequest
    999           *
   1000           * @brief   Handle a End Device Bind request.
   1001           *
   1002           * @param   pBuf  - MT message data
   1003           *
   1004           * @return  void
   1005           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1006          static void MT_ZdoEndDevBindRequest(uint8 *pBuf)
   \                     MT_ZdoEndDevBindRequest:
   1007          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 70
   \   000005   74BA         MOV       A,#-0x46
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine33 & 0xFFFF
   1008            uint8 cmdId;
   1009            uint8 retValue = 0;
   1010            uint8 i, epInt, numInClusters, numOutClusters;
   1011            zAddrType_t destAddr;
   1012            uint16 shortAddr;
   1013            uint16 profileID, inClusters[MTZDO_MAX_ED_BIND_CLUSTERS], outClusters[MTZDO_MAX_ED_BIND_CLUSTERS];
   1014          
   1015            /* parse header */
   1016            cmdId = pBuf[MT_RPC_POS_CMD1];
   1017            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_207:
   \   00000D   5001         JNC       ??MT_ZdoEndDevBindRequest_0
   \   00000F   0F           INC       R7
   1018          
   1019            /* Dev address */
   1020            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoEndDevBindRequest_0:
   \   000010   7409         MOV       A,#0x9
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine44 & 0xFFFF
   1021            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??CrossCallReturnLabel_201:
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ??Subroutine113_0 & 0xFFFF
   1022            pBuf += 2;
   \                     ??CrossCallReturnLabel_218:
   \   00001E   5001         JNC       ??MT_ZdoEndDevBindRequest_1
   \   000020   0F           INC       R7
   1023          
   1024            /* Local coordinator of the binding */
   1025            shortAddr = osal_build_uint16( pBuf );
   \                     ??MT_ZdoEndDevBindRequest_1:
   \   000021                ; Setup parameters for call to function osal_build_uint16
   \   000021   12....       LCALL     ?Subroutine43 & 0xFFFF
   1026            pBuf += 2;
   1027          
   1028            /* For now, skip past the extended address */
   1029            pBuf += Z_EXTADDR_LEN;
   1030          
   1031            /* Endpoint */
   1032            epInt = *pBuf++;
   \                     ??CrossCallReturnLabel_67:
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F5..         MOV       ?V3,A
   \   00002F   EE           MOV       A,R6
   \   000030   240B         ADD       A,#0xb
   \   000032   FE           MOV       R6,A
   \   000033   5001         JNC       ??MT_ZdoEndDevBindRequest_2
   \   000035   0F           INC       R7
   1033          
   1034            /* Profile ID */
   1035            profileID = osal_build_uint16( pBuf );
   \                     ??MT_ZdoEndDevBindRequest_2:
   \   000036                ; Setup parameters for call to function osal_build_uint16
   \   000036   FA           MOV       R2,A
   \   000037   EF           MOV       A,R7
   \   000038   FB           MOV       R3,A
   \   000039   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00003C   8A..         MOV       ?V6,R2
   \   00003E   8B..         MOV       ?V7,R3
   1036            pBuf += 2;
   1037          
   1038            /* NumInClusters */
   1039            numInClusters = *pBuf++;
   \   000040   8E82         MOV       DPL,R6
   \   000042   8F83         MOV       DPH,R7
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F5..         MOV       ?V4,A
   \   000049   EE           MOV       A,R6
   \   00004A   2403         ADD       A,#0x3
   \   00004C   FE           MOV       R6,A
   \   00004D   5001         JNC       ??MT_ZdoEndDevBindRequest_3
   \   00004F   0F           INC       R7
   1040            if ( numInClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
   \                     ??MT_ZdoEndDevBindRequest_3:
   \   000050   E5..         MOV       A,?V4
   \   000052   C3           CLR       C
   \   000053   9410         SUBB      A,#0x10
   \   000055   501C         JNC       ??MT_ZdoEndDevBindRequest_4
   1041            {
   1042              for ( i = 0; i < numInClusters; i++ )
   \   000057   75..00       MOV       ?V5,#0x0
   \                     ??MT_ZdoEndDevBindRequest_5:
   \   00005A   E5..         MOV       A,?V5
   \   00005C   C3           CLR       C
   \   00005D   95..         SUBB      A,?V4
   \   00005F   501B         JNC       ??MT_ZdoEndDevBindRequest_6
   1043              {
   1044                inClusters[i] = osal_build_uint16( pBuf );
   \   000061                ; Setup parameters for call to function osal_build_uint16
   \   000061   12....       LCALL     ?Subroutine46 & 0xFFFF
   1045                pBuf += 2;
   1046              }
   \                     ??CrossCallReturnLabel_71:
   \   000064   7428         MOV       A,#0x28
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   00006C   5001         JNC       ??MT_ZdoEndDevBindRequest_7
   \   00006E   0F           INC       R7
   \                     ??MT_ZdoEndDevBindRequest_7:
   \   00006F   05..         INC       ?V5
   \   000071   80E7         SJMP      ??MT_ZdoEndDevBindRequest_5
   1047            }
   1048            else
   1049            {
   1050              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoEndDevBindRequest_4:
   \   000073   85..82       MOV       DPL,?XSP + 0
   \   000076   85..83       MOV       DPH,?XSP + 1
   \   000079   7480         MOV       A,#-0x80
   \   00007B   F0           MOVX      @DPTR,A
   1051            }
   1052          
   1053            /* NumOutClusters */
   1054            numOutClusters = *pBuf++;
   \                     ??MT_ZdoEndDevBindRequest_6:
   \   00007C   8E82         MOV       DPL,R6
   \   00007E   8F83         MOV       DPH,R7
   \   000080   E0           MOVX      A,@DPTR
   \   000081   F5..         MOV       ?V8,A
   \   000083   A3           INC       DPTR
   \   000084   AE82         MOV       R6,DPL
   \   000086   AF83         MOV       R7,DPH
   1055            if ( numOutClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
   \   000088   C3           CLR       C
   \   000089   9410         SUBB      A,#0x10
   \   00008B   501C         JNC       ??MT_ZdoEndDevBindRequest_8
   1056            {
   1057              for ( i = 0; i < numOutClusters; i++ )
   \   00008D   75..00       MOV       ?V5,#0x0
   \                     ??MT_ZdoEndDevBindRequest_9:
   \   000090   E5..         MOV       A,?V5
   \   000092   C3           CLR       C
   \   000093   95..         SUBB      A,?V8
   \   000095   501C         JNC       ??MT_ZdoEndDevBindRequest_10
   1058              {
   1059                outClusters[i] = osal_build_uint16( pBuf );
   \   000097                ; Setup parameters for call to function osal_build_uint16
   \   000097   12....       LCALL     ?Subroutine46 & 0xFFFF
   1060                pBuf += 2;
   1061              }
   \                     ??CrossCallReturnLabel_72:
   \   00009A   740A         MOV       A,#0xa
   \   00009C   12....       LCALL     ?XSTACK_DISP0_8
   \   00009F   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   0000A2   5001         JNC       ??MT_ZdoEndDevBindRequest_11
   \   0000A4   0F           INC       R7
   \                     ??MT_ZdoEndDevBindRequest_11:
   \   0000A5   05..         INC       ?V5
   \   0000A7   80E7         SJMP      ??MT_ZdoEndDevBindRequest_9
   1062            }
   1063            else
   1064            {
   1065              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoEndDevBindRequest_8:
   \   0000A9   85..82       MOV       DPL,?XSP + 0
   \   0000AC   85..83       MOV       DPH,?XSP + 1
   \   0000AF   7480         MOV       A,#-0x80
   \   0000B1   805A         SJMP      ??MT_ZdoEndDevBindRequest_12
   1066            }
   1067          
   1068            if ( retValue == 0 )
   \                     ??MT_ZdoEndDevBindRequest_10:
   \   0000B3   85..82       MOV       DPL,?XSP + 0
   \   0000B6   85..83       MOV       DPH,?XSP + 1
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   7052         JNZ       ??MT_ZdoEndDevBindRequest_13
   1069            {
   1070              retValue = (uint8)ZDP_EndDeviceBindReq( &destAddr, shortAddr, epInt, profileID,
   1071                                                    numInClusters, inClusters, numOutClusters, outClusters, 0);
   \   0000BC                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   0000BC   75..00       MOV       ?V5,#0x0
   \   0000BF   78..         MOV       R0,#?V5
   \   0000C1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C4   740B         MOV       A,#0xb
   \   0000C6   12....       LCALL     ?XSTACK_DISP100_8
   \   0000C9   88..         MOV       ?V10,R0
   \   0000CB   89..         MOV       ?V11,R1
   \   0000CD   78..         MOV       R0,#?V10
   \   0000CF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D2   E5..         MOV       A,?V8
   \   0000D4   F5..         MOV       ?V5,A
   \   0000D6   78..         MOV       R0,#?V5
   \   0000D8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DB   742C         MOV       A,#0x2c
   \   0000DD   12....       LCALL     ?XSTACK_DISP100_8
   \   0000E0   88..         MOV       ?V8,R0
   \   0000E2   89..         MOV       ?V9,R1
   \   0000E4   78..         MOV       R0,#?V8
   \   0000E6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E9   78..         MOV       R0,#?V4
   \   0000EB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000EE   78..         MOV       R0,#?V6
   \   0000F0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F3   A9..         MOV       R1,?V3
   \   0000F5   AC..         MOV       R4,?V0
   \   0000F7   AD..         MOV       R5,?V1
   \   0000F9   740A         MOV       A,#0xa
   \   0000FB   12....       LCALL     ?XSTACK_DISP101_8
   \   0000FE   12....       LCALL     `??ZDP_EndDeviceBindReq::?relay`; Banked call to: ZDP_EndDeviceBindReq
   \   000101   7409         MOV       A,#0x9
   \   000103   12....       LCALL     ?DEALLOC_XSTACK8
   \   000106   E9           MOV       A,R1
   \   000107   85..82       MOV       DPL,?XSP + 0
   \   00010A   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_ZdoEndDevBindRequest_12:
   \   00010D   F0           MOVX      @DPTR,A
   1072            }
   1073          
   1074            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoEndDevBindRequest_13:
   \   00010E                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00010E   AC..         MOV       R4,?XSP + 0
   \   000110   AD..         MOV       R5,?XSP + 1
   \   000112   7B01         MOV       R3,#0x1
   \   000114   AA..         MOV       R2,?V2
   \   000116   7965         MOV       R1,#0x65
   \   000118   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1075          }
   \   00011B   7446         MOV       A,#0x46
   \   00011D                REQUIRE ?Subroutine4
   \   00011D                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F0C         MOV       R7,#0xc
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   EE           MOV       A,R6
   \   000001   FA           MOV       R2,A
   \   000002   EF           MOV       A,R7
   \   000003   FB           MOV       R3,A
   \   000004   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000007   A8..         MOV       R0,?V5
   \   000009   E8           MOV       A,R0
   \   00000A   28           ADD       A,R0
   \   00000B   F8           MOV       R0,A
   \   00000C   E4           CLR       A
   \   00000D   33           RLC       A
   \   00000E   F9           MOV       R1,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000003   8E82         MOV       DPL,R6
   \   000005   8F83         MOV       DPH,R7
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET
   1076          
   1077          /***************************************************************************************************
   1078           * @fn      MT_ZdoBindRequest
   1079           *
   1080           * @brief   Handle a Bind request.
   1081           *
   1082           * @param   pBuf  - MT message data
   1083           *
   1084           * @return  void
   1085           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1086          static void MT_ZdoBindRequest(uint8 *pBuf)
   \                     MT_ZdoBindRequest:
   1087          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV       A,#-0x13
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine19 & 0xFFFF
   1088            uint8 cmdId;
   1089            uint8 retValue;
   1090            zAddrType_t destAddr, devAddr;
   1091            uint8 *pSrcAddr, *ptr;
   1092            uint8 srcEPInt, dstEPInt;
   1093            uint16 clusterID;
   1094          
   1095            /* parse header */
   1096            cmdId = pBuf[MT_RPC_POS_CMD1];
   1097            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_224:
   \   00000D   5001         JNC       ??MT_ZdoBindRequest_0
   \   00000F   0F           INC       R7
   1098          
   1099            /* Dev address */
   1100            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoBindRequest_0:
   \   000010   7412         MOV       A,#0x12
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine56 & 0xFFFF
   1101            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??CrossCallReturnLabel_94:
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine11 & 0xFFFF
   1102            pBuf += 2;
   1103          
   1104            /* SrcAddress */
   1105            pSrcAddr = pBuf;
   1106            pBuf += Z_EXTADDR_LEN;
   1107          
   1108            /* SrcEPInt */
   1109            srcEPInt = *pBuf++;
   1110          
   1111            /* ClusterID */
   1112            clusterID = osal_build_uint16( pBuf );
   1113            pBuf += 2;
   1114          
   1115            /* Destination Address mode */
   1116            devAddr.addrMode = *pBuf++;
   \                     ??CrossCallReturnLabel_14:
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   E8           MOV       A,R0
   \   000022   F0           MOVX      @DPTR,A
   \   000023   EE           MOV       A,R6
   \   000024   2403         ADD       A,#0x3
   \   000026   FE           MOV       R6,A
   \   000027   5001         JNC       ??MT_ZdoBindRequest_1
   \   000029   0F           INC       R7
   1117          
   1118            /* Destination Address */
   1119            if ( devAddr.addrMode == Addr64Bit )
   \                     ??MT_ZdoBindRequest_1:
   \   00002A   7403         MOV       A,#0x3
   \   00002C   68           XRL       A,R0
   \   00002D   700E         JNZ       ??MT_ZdoBindRequest_2
   1120            {
   1121              ptr = pBuf;
   1122              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
   \   00002F                ; Setup parameters for call to function sAddrExtCpy
   \   00002F   EE           MOV       A,R6
   \   000030   FC           MOV       R4,A
   \   000031   EF           MOV       A,R7
   \   000032   FD           MOV       R5,A
   \   000033   7401         MOV       A,#0x1
   \   000035   12....       LCALL     ?XSTACK_DISP101_8
   \   000038   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00003B   800B         SJMP      ??CrossCallReturnLabel_110
   1123            }
   1124            else
   1125            {
   1126              devAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??MT_ZdoBindRequest_2:
   \   00003D                ; Setup parameters for call to function osal_build_uint16
   \   00003D   EE           MOV       A,R6
   \   00003E   FA           MOV       R2,A
   \   00003F   12....       LCALL     ??Subroutine110_0 & 0xFFFF
   1127            }
   \                     ??CrossCallReturnLabel_203:
   \   000042   12....       LCALL     ?XSTACK_DISP0_8
   \   000045   12....       LCALL     ?Subroutine62 & 0xFFFF
   1128            /* The short address occupies LSB two bytes */
   1129            pBuf += Z_EXTADDR_LEN;
   1130          
   1131            /* DstEPInt */
   1132            dstEPInt = *pBuf;
   1133          
   1134            retValue = (uint8)ZDP_BindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   \                     ??CrossCallReturnLabel_110:
   \   000048                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   000048   75..00       MOV       ?V6,#0x0
   \   00004B   78..         MOV       R0,#?V6
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000050   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   000053   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000056   7403         MOV       A,#0x3
   \   000058   12....       LCALL     ?XSTACK_DISP100_8
   \   00005B   88..         MOV       ?V6,R0
   \   00005D   89..         MOV       ?V7,R1
   \   00005F   78..         MOV       R0,#?V6
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000064   78..         MOV       R0,#?V4
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000069   78..         MOV       R0,#?V2
   \   00006B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006E   A9..         MOV       R1,?V1
   \   000070   7412         MOV       A,#0x12
   \   000072   12....       LCALL     ?XSTACK_DISP102_8
   \   000075   7A21         MOV       R2,#0x21
   \   000077                REQUIRE ?Subroutine1
   \   000077                ; // Fall through to label ?Subroutine1
   1135          
   1136            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1137          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   12....       LCALL     `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
   \   000005   7408         MOV       A,#0x8
   \   000007   12....       LCALL     ?DEALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00000D   7413         MOV       A,#0x13
   \   00000F                REQUIRE ??Subroutine114_0
   \   00000F                ; // Fall through to label ??Subroutine114_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C                REQUIRE ??Subroutine115_0
   \   00000C                ; // Fall through to label ??Subroutine115_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine115_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V6,A
   \   000003   78..         MOV       R0,#?V6
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   7402         MOV       A,#0x2
   \   000002   F0           MOVX      @DPTR,A
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003   0A           INC       R2
   \   000004   0A           INC       R2
   \   000005   0A           INC       R2
   \   000006   EF           MOV       A,R7
   \   000007   FB           MOV       R3,A
   \   000008   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00000B   740A         MOV       A,#0xa
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   EB           MOV       A,R3
   \   000001   FF           MOV       R7,A
   \   000002   8A82         MOV       DPL,R2
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine116_0
   \   000006                ; // Fall through to label ??Subroutine116_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   EE           MOV       A,R6
   \   000006   2402         ADD       A,#0x2
   \   000008   F5..         MOV       ?V2,A
   \   00000A   E4           CLR       A
   \   00000B   3F           ADDC      A,R7
   \   00000C   F5..         MOV       ?V3,A
   \   00000E   E5..         MOV       A,?V2
   \   000010   2408         ADD       A,#0x8
   \   000012   FE           MOV       R6,A
   \   000013   E4           CLR       A
   \   000014   35..         ADDC      A,?V3
   \   000016   8E82         MOV       DPL,R6
   \   000018   F583         MOV       DPH,A
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F5..         MOV       ?V1,A
   \   00001D   A3           INC       DPTR
   \   00001E   AE82         MOV       R6,DPL
   \   000020   AF83         MOV       R7,DPH
   \   000022                ; Setup parameters for call to function osal_build_uint16
   \   000022                ; Setup parameters for call to function osal_build_uint16
   \   000022   EE           MOV       A,R6
   \   000023   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000026   F8           MOV       R0,A
   \   000027   7409         MOV       A,#0x9
   \   000029   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
   1138          
   1139          /***************************************************************************************************
   1140           * @fn      MT_ZdoUnbindRequest
   1141           *
   1142           * @brief   Handle a Unbind request.
   1143           *
   1144           * @param   pBuf  - MT message data
   1145           *
   1146           * @return  void
   1147           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1148          static void MT_ZdoUnbindRequest(uint8 *pBuf)
   \                     MT_ZdoUnbindRequest:
   1149          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV       A,#-0x13
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine19 & 0xFFFF
   1150            uint8 cmdId;
   1151            uint8 retValue;
   1152            zAddrType_t destAddr, devAddr;
   1153            uint8 *pSrcAddr, *ptr;
   1154            uint8 srcEPInt, dstEPInt;
   1155            uint16 clusterID;
   1156          
   1157            /* parse header */
   1158            cmdId = pBuf[MT_RPC_POS_CMD1];
   1159            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_225:
   \   00000D   5001         JNC       ??MT_ZdoUnbindRequest_0
   \   00000F   0F           INC       R7
   1160          
   1161            /* dev address */
   1162            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoUnbindRequest_0:
   \   000010   7412         MOV       A,#0x12
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine56 & 0xFFFF
   1163            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??CrossCallReturnLabel_95:
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine11 & 0xFFFF
   1164            pBuf += 2;
   1165          
   1166            /* SrcAddress */
   1167            pSrcAddr = pBuf;
   1168            pBuf += Z_EXTADDR_LEN;
   1169          
   1170            /* SrcEPInt */
   1171            srcEPInt = *pBuf++;
   1172          
   1173            /* ClusterID */
   1174            clusterID = osal_build_uint16( pBuf );
   1175            pBuf += 2;
   1176          
   1177            /* Destination Address mode */
   1178            devAddr.addrMode = *pBuf++;
   \                     ??CrossCallReturnLabel_15:
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   E8           MOV       A,R0
   \   000022   F0           MOVX      @DPTR,A
   \   000023   EE           MOV       A,R6
   \   000024   2403         ADD       A,#0x3
   \   000026   FE           MOV       R6,A
   \   000027   5001         JNC       ??MT_ZdoUnbindRequest_1
   \   000029   0F           INC       R7
   1179          
   1180            /* Destination Address */
   1181            if ( devAddr.addrMode == Addr64Bit )
   \                     ??MT_ZdoUnbindRequest_1:
   \   00002A   7403         MOV       A,#0x3
   \   00002C   68           XRL       A,R0
   \   00002D   700E         JNZ       ??MT_ZdoUnbindRequest_2
   1182            {
   1183              ptr = pBuf;
   1184              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
   \   00002F                ; Setup parameters for call to function sAddrExtCpy
   \   00002F   EE           MOV       A,R6
   \   000030   FC           MOV       R4,A
   \   000031   EF           MOV       A,R7
   \   000032   FD           MOV       R5,A
   \   000033   7401         MOV       A,#0x1
   \   000035   12....       LCALL     ?XSTACK_DISP101_8
   \   000038   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00003B   800B         SJMP      ??CrossCallReturnLabel_111
   1185            }
   1186            else
   1187            {
   1188              devAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??MT_ZdoUnbindRequest_2:
   \   00003D                ; Setup parameters for call to function osal_build_uint16
   \   00003D   EE           MOV       A,R6
   \   00003E   FA           MOV       R2,A
   \   00003F   12....       LCALL     ??Subroutine110_0 & 0xFFFF
   1189            }
   \                     ??CrossCallReturnLabel_204:
   \   000042   12....       LCALL     ?XSTACK_DISP0_8
   \   000045   12....       LCALL     ?Subroutine62 & 0xFFFF
   1190            /* The short address occupies LSB two bytes */
   1191            pBuf += Z_EXTADDR_LEN;
   1192          
   1193            /* dstEPInt */
   1194            dstEPInt = *pBuf;
   1195          
   1196            retValue = (uint8)ZDP_UnbindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   \                     ??CrossCallReturnLabel_111:
   \   000048                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   000048   75..00       MOV       ?V6,#0x0
   \   00004B   78..         MOV       R0,#?V6
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000050   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000053   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000056   7403         MOV       A,#0x3
   \   000058   12....       LCALL     ?XSTACK_DISP100_8
   \   00005B   88..         MOV       ?V6,R0
   \   00005D   89..         MOV       ?V7,R1
   \   00005F   78..         MOV       R0,#?V6
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000064   78..         MOV       R0,#?V4
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000069   78..         MOV       R0,#?V2
   \   00006B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006E   A9..         MOV       R1,?V1
   \   000070   7412         MOV       A,#0x12
   \   000072   12....       LCALL     ?XSTACK_DISP102_8
   \   000075   7A22         MOV       R2,#0x22
   \   000077   02....       LJMP      ?Subroutine1 & 0xFFFF
   1197          
   1198            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1199          }
   1200          
   1201          #if defined (MT_SYS_KEY_MANAGEMENT)
   1202          /***************************************************************************************************
   1203           * @fn      MT_ZdoSetLinkKey
   1204           *
   1205           * @brief   Set an application or trust center link key.
   1206           *
   1207           * @param   pBuf  - MT message data
   1208           *
   1209           * @return  void
   1210           ***************************************************************************************************/
   1211          static void MT_ZdoSetLinkKey(uint8 *pBuf)
   1212          {
   1213            uint8 cmdId;
   1214            uint8 retValue;
   1215            uint8 *pExtAddr;
   1216            uint8 *pKey;
   1217            uint16 shortAddr;
   1218          
   1219            /* parse header */
   1220            cmdId = pBuf[MT_RPC_POS_CMD1];
   1221            pBuf += MT_RPC_FRAME_HDR_SZ;
   1222          
   1223            /* ShortAddr */
   1224            shortAddr = osal_build_uint16( pBuf );
   1225            pBuf += 2;
   1226          
   1227            /* Extended Addr */
   1228            pExtAddr = pBuf;
   1229            pBuf += Z_EXTADDR_LEN;
   1230          
   1231            /* Key data */
   1232            pKey = pBuf;
   1233          
   1234            retValue = (uint8)ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pKey);
   1235          
   1236            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1237          }
   1238          
   1239          /***************************************************************************************************
   1240           * @fn      MT_ZdoRemoveLinkKey
   1241           *
   1242           * @brief   Remove an application or trust center link key.
   1243           *
   1244           * @param   pBuf  - MT message data
   1245           *
   1246           * @return  void
   1247           ***************************************************************************************************/
   1248          static void MT_ZdoRemoveLinkKey(uint8 *pBuf)
   1249          {
   1250            uint8 cmdId;
   1251            uint8 retValue = ZNwkUnknownDevice;
   1252            uint8 *pExtAddr;
   1253          
   1254            /* parse header */
   1255            cmdId = pBuf[MT_RPC_POS_CMD1];
   1256            pBuf += MT_RPC_FRAME_HDR_SZ;
   1257          
   1258            /* ShortAddr */
   1259            pExtAddr = pBuf;
   1260            
   1261            if( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ))
   1262            {
   1263              uint16 tempIndex;
   1264              APSME_TCLKDevEntry_t TCLKDevEntry;
   1265              uint8 found;
   1266                                                             //Reset the frame counter associated to this device  TCLinkKeyFrmCntr
   1267              tempIndex = APSME_SearchTCLinkKeyEntry(pExtAddr,&found, &TCLKDevEntry);
   1268              
   1269              if(found)
   1270              {
   1271                uint16 i;
   1272                
   1273                i = tempIndex - ZCD_NV_TCLK_TABLE_START;
   1274                
   1275                TCLinkKeyFrmCntr[i].txFrmCntr = 0;
   1276                TCLinkKeyFrmCntr[i].rxFrmCntr = 0;
   1277                
   1278                if(TCLKDevEntry.keyAttributes == ZG_PROVISIONAL_KEY)
   1279                {
   1280                  APSME_EraseICEntry(&TCLKDevEntry.SeedShift_IcIndex);
   1281                }
   1282                
   1283                osal_memset(&TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
   1284                osal_nv_write( ( tempIndex), 0, sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
   1285                retValue = ZSuccess;
   1286              }
   1287            }
   1288            else
   1289            {
   1290              retValue = ZDSecMgrDeviceRemoveByExtAddr( pExtAddr );
   1291            }
   1292            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1293          }
   1294          
   1295          /***************************************************************************************************
   1296           * @fn      MT_ZdoGetLinkKey
   1297           *
   1298           * @brief   Get the application link key.
   1299           *
   1300           * @param   pBuf  - MT message data
   1301           *
   1302           * @return  void
   1303           ***************************************************************************************************/
   1304          static void MT_ZdoGetLinkKey(uint8 *pBuf)
   1305          {
   1306            uint8 cmdId;
   1307            uint8 retValue;
   1308            uint8 *pExtAddr;
   1309            uint8 *retBuf = NULL;
   1310            uint8 len;
   1311            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   1312            uint16 apsLinkKeyNvId;
   1313          
   1314            // parse header
   1315            len = pBuf[MT_RPC_POS_LEN];
   1316            cmdId = pBuf[MT_RPC_POS_CMD1];
   1317            pBuf += MT_RPC_FRAME_HDR_SZ;
   1318          
   1319            // Extended Address
   1320            pExtAddr = pBuf;
   1321          
   1322            // Check for illegal extended address -- indicating network address lookup
   1323            if ( ( pExtAddr[2] == 0xFE ) && ( pExtAddr[3] == 0xFF ) &&
   1324                 ( len >= Z_EXTADDR_LEN )            )
   1325            {
   1326              uint16 nwkAddr;
   1327              nwkAddr = osal_build_uint16( pExtAddr );
   1328              (void)AddrMgrExtAddrLookup( nwkAddr, pExtAddr );
   1329            }
   1330          
   1331            // Fetch the key NV ID
   1332            retValue = APSME_LinkKeyNVIdGet( pExtAddr, &apsLinkKeyNvId );
   1333          
   1334            if (retValue == ZSuccess)
   1335            {
   1336              if ((pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t))) != NULL)
   1337              {
   1338                // retrieve key from NV
   1339                if (osal_nv_read( apsLinkKeyNvId, 0,
   1340                                 sizeof(APSME_LinkKeyData_t), pApsLinkKey) != SUCCESS)
   1341                {
   1342                  retValue = ZNwkUnknownDevice;
   1343                }
   1344              }
   1345              else
   1346              {
   1347                retValue = ZNwkUnknownDevice;
   1348              }
   1349            }
   1350          
   1351            // Construct the response message
   1352            len = MT_ZDO_STATUS_LEN + Z_EXTADDR_LEN + SEC_KEY_LEN; // status + extAddr + key
   1353            if ((retBuf = (uint8 *)osal_mem_alloc(len)) != NULL)
   1354            {
   1355              if (retValue == ZSuccess)
   1356              {
   1357                // Extended Address
   1358                osal_memcpy( &(retBuf[1]), pExtAddr, Z_EXTADDR_LEN );
   1359          
   1360                // Key data
   1361                osal_memcpy( &(retBuf[1 + Z_EXTADDR_LEN]), pApsLinkKey->key, SEC_KEY_LEN );
   1362              }
   1363              else
   1364              {
   1365                // Failed case - set the rest fields to all FF
   1366                osal_memset( &(retBuf[1]), 0xFF, Z_EXTADDR_LEN + SEC_KEY_LEN );
   1367              }
   1368          
   1369              retBuf[0] = retValue;  // Status
   1370          
   1371              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, len, retBuf);
   1372          
   1373              // clear retBuf because it contains key data and free allocated memory
   1374              osal_memset(retBuf, 0x00, len);
   1375          
   1376              osal_mem_free(retBuf);
   1377            }
   1378          
   1379            // clear copy of key in RAM
   1380            if (pApsLinkKey != NULL)
   1381            {
   1382              osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   1383          
   1384              osal_mem_free(pApsLinkKey);
   1385            }
   1386          
   1387            return;
   1388          }
   1389          #endif // MT_SYS_KEY_MANAGEMENT
   1390          
   1391          #if defined (MT_ZDO_MGMT)
   1392          /***************************************************************************************************
   1393           * @fn      MT_ZdoMgmtNwkDiscRequest
   1394           *
   1395           * @brief   Handle a Mgmt Nwk Discovery request.
   1396           *
   1397           * @param   pBuf  - MT message data
   1398           *
   1399           * @return  void
   1400           ***************************************************************************************************/
   1401          static void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf)
   1402          {
   1403            uint8 cmdId;
   1404            uint8 retValue;
   1405            zAddrType_t destAddr;
   1406            uint32 scanChannels;
   1407            uint8 scanDuration, startIndex;
   1408          
   1409            /* parse header */
   1410            cmdId = pBuf[MT_RPC_POS_CMD1];
   1411            pBuf += MT_RPC_FRAME_HDR_SZ;
   1412          
   1413            /* Dev address */
   1414            destAddr.addrMode = Addr16Bit;
   1415            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1416            pBuf += 2;
   1417          
   1418            /* Scan Channels */
   1419            scanChannels = osal_build_uint32(pBuf, 4);
   1420            pBuf += 4;
   1421          
   1422            /* Scan Duration */
   1423            scanDuration = *pBuf++;
   1424          
   1425            /* Start Index */
   1426            startIndex = *pBuf;
   1427          
   1428            retValue = (uint8)ZDP_MgmtNwkDiscReq( &destAddr, scanChannels, scanDuration, startIndex, 0);
   1429          
   1430            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1431          }
   1432          
   1433          /***************************************************************************************************
   1434           * @fn      MT_ZdoMgmtLqiRequest
   1435           *
   1436           * @brief   Handle a Mgmt Lqi request.
   1437           *
   1438           * @param   pBuf  - MT message data
   1439           *
   1440           * @return  void
   1441           ***************************************************************************************************/
   1442          static void MT_ZdoMgmtLqiRequest(uint8 *pBuf)
   1443          {
   1444            uint8 cmdId;
   1445            uint8 retValue;
   1446            zAddrType_t destAddr;
   1447            uint8 startIndex;
   1448          
   1449            /* parse header */
   1450            cmdId = pBuf[MT_RPC_POS_CMD1];
   1451            pBuf += MT_RPC_FRAME_HDR_SZ;
   1452          
   1453            /* Dev address */
   1454            destAddr.addrMode = Addr16Bit;
   1455            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1456            pBuf += 2;
   1457          
   1458            /* Start Index */
   1459            startIndex = *pBuf;
   1460          
   1461            retValue = (uint8)ZDP_MgmtLqiReq( &destAddr, startIndex, 0);
   1462          
   1463            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1464          }
   1465          
   1466          /***************************************************************************************************
   1467           * @fn      MT_ZdoMgmtRtgRequest
   1468           *
   1469           * @brief   Handle a Mgmt Rtg request.
   1470           *
   1471           * @param   pBuf  - MT message data
   1472           *
   1473           * @return  void
   1474           ***************************************************************************************************/
   1475          static void MT_ZdoMgmtRtgRequest(uint8 *pBuf)
   1476          {
   1477            uint8 cmdId;
   1478            uint8 retValue;
   1479            zAddrType_t destAddr;
   1480            uint8 startIndex;
   1481          
   1482            /* parse header */
   1483            cmdId = pBuf[MT_RPC_POS_CMD1];
   1484            pBuf += MT_RPC_FRAME_HDR_SZ;
   1485          
   1486            /* Dev Address */
   1487            destAddr.addrMode = Addr16Bit;
   1488            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1489            pBuf += 2;
   1490          
   1491            /* Start Index */
   1492            startIndex = *pBuf;
   1493          
   1494            retValue = (byte)ZDP_MgmtRtgReq( &destAddr, startIndex, 0);
   1495          
   1496            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1497          }
   1498          
   1499          /***************************************************************************************************
   1500           * @fn      MT_ZdoMgmtBindRequest
   1501           *
   1502           * @brief   Handle a Mgmt Bind request.
   1503           *
   1504           * @param   pBuf  - MT message data
   1505           *
   1506           * @return  void
   1507           ***************************************************************************************************/
   1508          static void MT_ZdoMgmtBindRequest(uint8 *pBuf)
   1509          {
   1510            uint8 cmdId;
   1511            uint8 retValue;
   1512            zAddrType_t destAddr;
   1513            uint8 startIndex;
   1514          
   1515            /* parse header */
   1516            cmdId = pBuf[MT_RPC_POS_CMD1];
   1517            pBuf += MT_RPC_FRAME_HDR_SZ;
   1518          
   1519            /* Dev Address */
   1520            destAddr.addrMode = Addr16Bit;
   1521            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1522            pBuf += 2;
   1523          
   1524            /* Start Index */
   1525            startIndex = *pBuf;
   1526          
   1527            retValue = (uint8)ZDP_MgmtBindReq( &destAddr, startIndex, 0);
   1528          
   1529            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1530          }
   1531          
   1532          /***************************************************************************************************
   1533           * @fn      MT_ZdoMgmtLeaveRequest
   1534           *
   1535           * @brief   Handle a Mgmt Leave request.
   1536           *
   1537           * @param   pBuf  - MT message data
   1538           *
   1539           * @return  void
   1540           ***************************************************************************************************/
   1541          static void MT_ZdoMgmtLeaveRequest(uint8 *pBuf)
   1542          {
   1543            uint8 cmdId;
   1544            uint8 retValue;
   1545            zAddrType_t destAddr;
   1546            uint8 *pIEEEAddr;
   1547            uint8 removeChildren;
   1548            uint8 rejoin;
   1549          
   1550            /* parse header */
   1551            cmdId = pBuf[MT_RPC_POS_CMD1];
   1552            pBuf += MT_RPC_FRAME_HDR_SZ;
   1553          
   1554            /* Destination Address */
   1555            destAddr.addrMode = Addr16Bit;
   1556            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1557            pBuf += 2;
   1558          
   1559            /* IEEE address */
   1560            pIEEEAddr = pBuf;
   1561            pBuf += Z_EXTADDR_LEN;
   1562          
   1563            /* Rejoin if bit0 is set */
   1564            rejoin = ( *pBuf & 0x01 ) ? TRUE : FALSE;
   1565          
   1566            /* Remove Children if bit1 is set */
   1567            removeChildren = ( *pBuf & 0x02 ) ? TRUE : FALSE;
   1568          
   1569            retValue = (byte)ZDP_MgmtLeaveReq( &destAddr, pIEEEAddr, removeChildren, rejoin, 0);
   1570          
   1571            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1572          }
   1573          
   1574          /***************************************************************************************************
   1575           * @fn      MT_ZdoMgmtDirectJoinRequest
   1576           *
   1577           * @brief   Handle a Mgmt Direct Join request.
   1578           *
   1579           * @param   pBuf  - MT message data
   1580           *
   1581           * @return  void
   1582           ***************************************************************************************************/
   1583          static void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf)
   1584          {
   1585            uint8 cmdId;
   1586            uint8 retValue;
   1587            zAddrType_t destAddr;
   1588            uint8 *deviceAddr;
   1589            uint8 capInfo;
   1590          
   1591            /* parse header */
   1592            cmdId = pBuf[MT_RPC_POS_CMD1];
   1593            pBuf += MT_RPC_FRAME_HDR_SZ;
   1594          
   1595            /* Destination Address */
   1596            destAddr.addrMode = Addr16Bit;
   1597            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1598            pBuf += 2;
   1599          
   1600            /* Device Address */
   1601            deviceAddr = pBuf;
   1602            pBuf += Z_EXTADDR_LEN;
   1603          
   1604            /* Capability information */
   1605            capInfo = *pBuf;
   1606          
   1607            retValue = (uint8)ZDP_MgmtDirectJoinReq( &destAddr, deviceAddr, capInfo, 0);
   1608          
   1609            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1610          }
   1611          
   1612          /***************************************************************************************************
   1613           * @fn      MT_ZdoMgmtPermitJoinRequest
   1614           *
   1615           * @brief   Handle a Mgmt Permit Join request.
   1616           *
   1617           * @param   pBuf  - MT message data
   1618           *
   1619           * @return  void
   1620           ***************************************************************************************************/
   1621          static void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf)
   1622          {
   1623            uint8 cmdId;
   1624            uint8 dataLn;
   1625            uint8 retValue;
   1626            uint8 duration;
   1627            uint8 tcSignificance;
   1628            zAddrType_t destAddr;
   1629          
   1630            /* parse header */
   1631            dataLn = pBuf[MT_RPC_POS_LEN];
   1632            cmdId = pBuf[MT_RPC_POS_CMD1];
   1633            pBuf += MT_RPC_FRAME_HDR_SZ;
   1634          
   1635            if ( 4 == dataLn )
   1636            {
   1637              /* addrMode was hardwired up to Z-Stack 2.6.0 */
   1638              destAddr.addrMode = afAddr16Bit;
   1639            }
   1640            else
   1641            {
   1642              /* addrMode is a parameter after Z-Stack 2.6.0 */
   1643              destAddr.addrMode = *pBuf++;
   1644            }
   1645          
   1646            /* Destination Address */
   1647            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1648            pBuf += 2;
   1649          
   1650            /* Duration */
   1651            duration = *pBuf++;
   1652          
   1653            /* Trust center significance */
   1654            tcSignificance = *pBuf;
   1655          
   1656            ignoreIndication = TRUE;
   1657            retValue = (uint8)ZDP_MgmtPermitJoinReq( &destAddr, duration, tcSignificance, 0);
   1658            ignoreIndication = FALSE;
   1659          
   1660            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1661          }
   1662          
   1663          /***************************************************************************************************
   1664           * @fn      MT_ZdoMgmtNwkUpdateRequest
   1665           *
   1666           * @brief   Handle a Mgmt Nwk Update request.
   1667           *
   1668           * @param   pBuf  - MT message data
   1669           *
   1670           * @return  void
   1671           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1672          static void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf)
   \                     MT_ZdoMgmtNwkUpdateRequest:
   1673          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine19 & 0xFFFF
   1674            uint8 cmdId;
   1675            uint8 retValue;
   1676            zAddrType_t destAddr;
   1677            uint32 channelMask;
   1678            uint8 scanDuration, scanCount;
   1679            uint16 nwkManagerAddr;
   1680          
   1681              /* parse header */
   1682            cmdId = pBuf[MT_RPC_POS_CMD1];
   1683            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_226:
   \   00000D   5001         JNC       ??MT_ZdoMgmtNwkUpdateRequest_0
   \   00000F   0F           INC       R7
   1684          
   1685            /* Destination address */
   1686            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??MT_ZdoMgmtNwkUpdateRequest_0:
   \   000010                ; Setup parameters for call to function osal_build_uint16
   \   000010   FA           MOV       R2,A
   \   000011   12....       LCALL     ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine62 & 0xFFFF
   1687            pBuf += 2;
   1688          
   1689            /* Destination address mode */
   1690            destAddr.addrMode = *pBuf++;
   \                     ??CrossCallReturnLabel_112:
   \   00001A   8E82         MOV       DPL,R6
   \   00001C   8F83         MOV       DPH,R7
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   C0E0         PUSH      A
   \   000023   7409         MOV       A,#0x9
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   D0E0         POP       A
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   EE           MOV       A,R6
   \   00002C   2403         ADD       A,#0x3
   \   00002E   FE           MOV       R6,A
   \   00002F   5001         JNC       ??MT_ZdoMgmtNwkUpdateRequest_1
   \   000031   0F           INC       R7
   1691          
   1692            channelMask = osal_build_uint32(pBuf, 4);
   \                     ??MT_ZdoMgmtNwkUpdateRequest_1:
   \   000032                ; Setup parameters for call to function osal_build_uint32
   \   000032   7904         MOV       R1,#0x4
   \   000034   FA           MOV       R2,A
   \   000035   EF           MOV       A,R7
   \   000036   FB           MOV       R3,A
   \   000037   12....       LCALL     ?Subroutine65 & 0xFFFF
   1693            pBuf += 4;
   1694          
   1695            /* Scan duration */
   1696            scanDuration = *pBuf++;
   \                     ??CrossCallReturnLabel_118:
   \   00003A   8E82         MOV       DPL,R6
   \   00003C   8F83         MOV       DPH,R7
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F5..         MOV       ?V1,A
   1697          
   1698            /* Scan count */
   1699            scanCount = *pBuf++;
   \   000045   8E82         MOV       DPL,R6
   \   000047   8F83         MOV       DPH,R7
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   F5..         MOV       ?V2,A
   1700          
   1701            /* NWK manager address */
   1702            nwkManagerAddr = osal_build_uint16( pBuf );
   \   000051                ; Setup parameters for call to function osal_build_uint16
   \   000051   EE           MOV       A,R6
   \   000052   2406         ADD       A,#0x6
   \   000054   FA           MOV       R2,A
   \   000055   E4           CLR       A
   \   000056   3F           ADDC      A,R7
   \   000057   FB           MOV       R3,A
   \   000058   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00005B   8A..         MOV       ?V8,R2
   \   00005D   8B..         MOV       ?V9,R3
   1703          
   1704            /* Send the Management Network Update request */
   1705            retValue = (uint8)ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1706                                                    scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   \   00005F                ; Setup parameters for call to function ZDP_MgmtNwkUpdateReq
   \   00005F   78..         MOV       R0,#?V8
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000064   78..         MOV       R0,#?V4
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000069   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00006C   12....       LCALL     ?XSTACK_DISP101_8
   \   00006F   12....       LCALL     `??ZDP_MgmtNwkUpdateReq::?relay`; Banked call to: ZDP_MgmtNwkUpdateReq
   \   000072   7406         MOV       A,#0x6
   \   000074   12....       LCALL     ?DEALLOC_XSTACK8
   \   000077   E9           MOV       A,R1
   \   000078   85..82       MOV       DPL,?XSP + 0
   \   00007B   85..83       MOV       DPH,?XSP + 1
   \   00007E   F0           MOVX      @DPTR,A
   1707          
   1708            /*
   1709              Since we don't recevied our own broadcast messages, we should
   1710              send a unicast copy of the message to ourself.
   1711            */
   1712            if ( destAddr.addrMode == AddrBroadcast )
   \   00007F   7409         MOV       A,#0x9
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   E0           MOVX      A,@DPTR
   \   000085   640F         XRL       A,#0xf
   \   000087   702D         JNZ       ??MT_ZdoMgmtNwkUpdateRequest_2
   1713            {
   1714              destAddr.addrMode = Addr16Bit;
   \   000089   12....       LCALL     ?Subroutine27 & 0xFFFF
   1715              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   \                     ??CrossCallReturnLabel_243:
   \   00008C   7401         MOV       A,#0x1
   \   00008E   12....       LCALL     ?XSTACK_DISP0_8
   \   000091   E8           MOV       A,R0
   \   000092   F0           MOVX      @DPTR,A
   \   000093   A3           INC       DPTR
   \   000094   E9           MOV       A,R1
   \   000095   F0           MOVX      @DPTR,A
   1716              retValue = (uint8) ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1717                                                       scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   \   000096                ; Setup parameters for call to function ZDP_MgmtNwkUpdateReq
   \   000096   78..         MOV       R0,#?V8
   \   000098   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009B   78..         MOV       R0,#?V4
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   0000A0   12....       LCALL     ?Subroutine39 & 0xFFFF
   1718            }
   \                     ??CrossCallReturnLabel_58:
   \   0000A3   12....       LCALL     ?XSTACK_DISP101_8
   \   0000A6   12....       LCALL     `??ZDP_MgmtNwkUpdateReq::?relay`; Banked call to: ZDP_MgmtNwkUpdateReq
   \   0000A9   7406         MOV       A,#0x6
   \   0000AB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AE   E9           MOV       A,R1
   \   0000AF   85..82       MOV       DPL,?XSP + 0
   \   0000B2   85..83       MOV       DPH,?XSP + 1
   \   0000B5   F0           MOVX      @DPTR,A
   1719          
   1720            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoMgmtNwkUpdateRequest_2:
   \   0000B6                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000B6   AC..         MOV       R4,?XSP + 0
   \   0000B8   AD..         MOV       R5,?XSP + 1
   \   0000BA   7B01         MOV       R3,#0x1
   \   0000BC   AA..         MOV       R2,?V0
   \   0000BE   7965         MOV       R1,#0x65
   \   0000C0   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1721          }
   \   0000C3   740A         MOV       A,#0xa
   \   0000C5   02....       LJMP      ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000003   8A..         MOV       ?V4,R2
   \   000005   8B..         MOV       ?V5,R3
   \   000007   8C..         MOV       ?V6,R4
   \   000009   8D..         MOV       ?V7,R5
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   90....       MOV       DPTR,#_NIB + 109
   \   000003   E0           MOVX      A,@DPTR
   \   000004   04           INC       A
   \   000005   FD           MOV       R5,A
   \   000006   AC..         MOV       R4,?V2
   \   000008   A9..         MOV       R1,?V1
   \   00000A   7407         MOV       A,#0x7
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   7402         MOV       A,#0x2
   \   000002   F0           MOVX      @DPTR,A
   \   000003                REQUIRE ??Subroutine119_0
   \   000003                ; // Fall through to label ??Subroutine119_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine119_0:
   \   000000   90....       MOV       DPTR,#_NIB + 20
   \   000003                REQUIRE ??Subroutine120_0
   \   000003                ; // Fall through to label ??Subroutine120_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine120_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET
   1722          #endif /* MT_ZDO_MGMT */
   1723          
   1724          /***************************************************************************************************
   1725           * @fn      MT_ZdoSendData
   1726           *
   1727           * @brief   Handle a ZDO Send Data request.
   1728           *
   1729           * @param   pBuf  - MT message data
   1730           *
   1731           * @return  void
   1732           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   FA           MOV       R2,A
   \   000001   AB..         MOV       R3,?V1
   \   000003                REQUIRE ??Subroutine103_0
   \   000003                ; // Fall through to label ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine103_0:
   \   000000   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000003   8A..         MOV       ?V2,R2
   \   000005   8B..         MOV       ?V3,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine105_0
   \   000002                ; // Fall through to label ??Subroutine105_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1733          static void MT_ZdoSendData( uint8 *pBuf )
   \                     MT_ZdoSendData:
   1734          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8B..         MOV       ?V1,R3
   1735            uint8 cmdId;
   1736            uint8 retValue;
   1737            zAddrType_t destAddr;
   1738            uint8 transSeq;
   1739            uint8 len;
   1740            uint16 cmd;
   1741          
   1742              /* parse header */
   1743            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000C   12....       LCALL     ?Subroutine82 & 0xFFFF
   1744            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_152:
   \   00000F   F5..         MOV       ?V0,A
   \   000011   5002         JNC       ??MT_ZdoSendData_0
   \   000013   05..         INC       ?V1
   1745          
   1746            /* Destination address */
   1747            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoSendData_0:
   \   000015   740A         MOV       A,#0xa
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   12....       LCALL     ?Subroutine42 & 0xFFFF
   1748            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??CrossCallReturnLabel_240:
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   12....       LCALL     ?Subroutine62 & 0xFFFF
   1749            pBuf += 2;
   1750          
   1751            /* Destination address mode */
   1752            transSeq = *pBuf++;
   \                     ??CrossCallReturnLabel_113:
   \   000023   85..82       MOV       DPL,?V0
   \   000026   85..83       MOV       DPH,?V1
   \   000029   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   00002C   E5..         MOV       A,?V0
   \   00002E   2403         ADD       A,#0x3
   \   000030   F5..         MOV       ?V0,A
   \   000032   5002         JNC       ??MT_ZdoSendData_1
   \   000034   05..         INC       ?V1
   1753          
   1754            /* cmd */
   1755            cmd = osal_build_uint16( pBuf );
   \                     ??MT_ZdoSendData_1:
   \   000036                ; Setup parameters for call to function osal_build_uint16
   \   000036   12....       LCALL     ?Subroutine90 & 0xFFFF
   1756            pBuf += 2;
   1757            len = *pBuf++;
   \                     ??CrossCallReturnLabel_181:
   \   000039   85..82       MOV       DPL,?V0
   \   00003C   85..83       MOV       DPH,?V1
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   FE           MOV       R6,A
   \   000043   E5..         MOV       A,?V0
   \   000045   2403         ADD       A,#0x3
   \   000047   F5..         MOV       ?V0,A
   \   000049   5002         JNC       ??MT_ZdoSendData_2
   \   00004B   05..         INC       ?V1
   1758          
   1759            /* Send the Generic ZDO message request */
   1760            retValue = (uint8)ZDP_SendData( &transSeq, &destAddr, cmd, len, pBuf, 0 );
   \                     ??MT_ZdoSendData_2:
   \   00004D                ; Setup parameters for call to function ZDP_SendData
   \   00004D   75..00       MOV       ?V4,#0x0
   \   000050   78..         MOV       R0,#?V4
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000055   78..         MOV       R0,#?V0
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005A   78..         MOV       R0,#?V2
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005F   EE           MOV       A,R6
   \   000060   F9           MOV       R1,A
   \   000061   7407         MOV       A,#0x7
   \   000063   12....       LCALL     ?XSTACK_DISP102_8
   \   000066   7405         MOV       A,#0x5
   \   000068   12....       LCALL     ?XSTACK_DISP101_8
   \   00006B   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00006E   7405         MOV       A,#0x5
   \   000070   12....       LCALL     ?DEALLOC_XSTACK8
   \   000073   7401         MOV       A,#0x1
   \   000075   12....       LCALL     ?XSTACK_DISP0_8
   \   000078   E9           MOV       A,R1
   \   000079   F0           MOVX      @DPTR,A
   1761            /*
   1762              Since we don't recevied our own broadcast messages, we should
   1763              send a unicast copy of the message to ourself.
   1764            */
   1765            if ( destAddr.addrMode == AddrBroadcast )
   \   00007A   740A         MOV       A,#0xa
   \   00007C   12....       LCALL     ?XSTACK_DISP0_8
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   640F         XRL       A,#0xf
   \   000082   7037         JNZ       ??MT_ZdoSendData_3
   1766            {
   1767              destAddr.addrMode = Addr16Bit;
   \   000084   12....       LCALL     ?Subroutine27 & 0xFFFF
   1768              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   \                     ??CrossCallReturnLabel_244:
   \   000087   7402         MOV       A,#0x2
   \   000089   12....       LCALL     ?XSTACK_DISP0_8
   \   00008C   E8           MOV       A,R0
   \   00008D   F0           MOVX      @DPTR,A
   \   00008E   A3           INC       DPTR
   \   00008F   E9           MOV       A,R1
   \   000090   F0           MOVX      @DPTR,A
   1769              retValue = (uint8)ZDP_SendData( &transSeq, &destAddr, cmd, len, pBuf, 0 );
   \   000091                ; Setup parameters for call to function ZDP_SendData
   \   000091   78..         MOV       R0,#?V4
   \   000093   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000096   78..         MOV       R0,#?V0
   \   000098   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009B   78..         MOV       R0,#?V2
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A0   EE           MOV       A,R6
   \   0000A1   F9           MOV       R1,A
   \   0000A2   7407         MOV       A,#0x7
   \   0000A4   12....       LCALL     ?XSTACK_DISP102_8
   \   0000A7   7405         MOV       A,#0x5
   \   0000A9   12....       LCALL     ?XSTACK_DISP101_8
   \   0000AC   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000AF   7405         MOV       A,#0x5
   \   0000B1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B4   7401         MOV       A,#0x1
   \   0000B6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B9   E9           MOV       A,R1
   \   0000BA   F0           MOVX      @DPTR,A
   1770            }
   1771          
   1772            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoSendData_3:
   \   0000BB                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000BB   7401         MOV       A,#0x1
   \   0000BD   12....       LCALL     ?XSTACK_DISP102_8
   \   0000C0   7B01         MOV       R3,#0x1
   \   0000C2   EF           MOV       A,R7
   \   0000C3   FA           MOV       R2,A
   \   0000C4   7965         MOV       R1,#0x65
   \   0000C6   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1773          }
   \   0000C9   740B         MOV       A,#0xb
   \   0000CB   02....       LJMP      ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   7402         MOV       A,#0x2
   \   000002   F0           MOVX      @DPTR,A
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003   0A           INC       R2
   \   000004   0A           INC       R2
   \   000005   0A           INC       R2
   \   000006                REQUIRE ??Subroutine117_0
   \   000006                ; // Fall through to label ??Subroutine117_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine117_0:
   \   000000   AB..         MOV       R3,?V1
   \   000002                REQUIRE ??Subroutine118_0
   \   000002                ; // Fall through to label ??Subroutine118_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine118_0:
   \   000000   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine126_0
   \   000003                ; // Fall through to label ??Subroutine126_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine126_0:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1774          
   1775          /***************************************************************************************************
   1776           * @fn      MT_ZdoNwkAddrOfInterestReq
   1777           *
   1778           * @brief   Handle a ZDO Network Address of Interest request.
   1779           *
   1780           * @param   pBuf  - MT message data
   1781           *
   1782           * @return  void
   1783           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1784          static void MT_ZdoNwkAddrOfInterestReq( uint8 *pBuf )
   \                     MT_ZdoNwkAddrOfInterestReq:
   1785          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EB           MOV       A,R3
   \   00000B   FF           MOV       R7,A
   1786            uint8 cmdId;
   1787            uint8 retValue;
   1788            zAddrType_t destAddr;
   1789            uint16 nwkAddr;
   1790            uint8 cmd;
   1791          
   1792              /* parse header */
   1793            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   F583         MOV       DPH,A
   \   000010   12....       LCALL     ??Subroutine111_0 & 0xFFFF
   1794            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_208:
   \   000013   5001         JNC       ??MT_ZdoNwkAddrOfInterestReq_0
   \   000015   0F           INC       R7
   1795          
   1796            /* Destination address */
   1797            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoNwkAddrOfInterestReq_0:
   \   000016   7409         MOV       A,#0x9
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine44 & 0xFFFF
   1798            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??CrossCallReturnLabel_202:
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   12....       LCALL     ??Subroutine113_0 & 0xFFFF
   1799            pBuf += 2;
   \                     ??CrossCallReturnLabel_219:
   \   000024   5001         JNC       ??MT_ZdoNwkAddrOfInterestReq_1
   \   000026   0F           INC       R7
   1800          
   1801            /* Network Address of Interest */
   1802            nwkAddr = osal_build_uint16( pBuf );
   \                     ??MT_ZdoNwkAddrOfInterestReq_1:
   \   000027                ; Setup parameters for call to function osal_build_uint16
   \   000027   12....       LCALL     ?Subroutine43 & 0xFFFF
   1803            pBuf += 2;
   1804          
   1805            cmd = *pBuf++;
   \                     ??CrossCallReturnLabel_68:
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   FE           MOV       R6,A
   1806          
   1807            /* Send the Generic ZDO message request */
   1808            retValue = (uint8)ZDP_NWKAddrOfInterestReq( &destAddr, nwkAddr, cmd, 0 );
   \   00002C                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   00002C   75..00       MOV       ?V3,#0x0
   \   00002F   78..         MOV       R0,#?V3
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000034   EE           MOV       A,R6
   \   000035   F9           MOV       R1,A
   \   000036   AC..         MOV       R4,?V0
   \   000038   AD..         MOV       R5,?V1
   \   00003A   7402         MOV       A,#0x2
   \   00003C   12....       LCALL     ?XSTACK_DISP101_8
   \   00003F   12....       LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   000042   7401         MOV       A,#0x1
   \   000044   12....       LCALL     ?DEALLOC_XSTACK8
   \   000047   E9           MOV       A,R1
   \   000048   85..82       MOV       DPL,?XSP + 0
   \   00004B   85..83       MOV       DPH,?XSP + 1
   \   00004E   F0           MOVX      @DPTR,A
   1809          
   1810          
   1811            /*
   1812              Since we don't recevied our own broadcast messages, we should
   1813              send a unicast copy of the message to ourself.
   1814            */
   1815            if ( destAddr.addrMode == AddrBroadcast )
   \   00004F   7409         MOV       A,#0x9
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   E0           MOVX      A,@DPTR
   \   000055   640F         XRL       A,#0xf
   \   000057   702D         JNZ       ??MT_ZdoNwkAddrOfInterestReq_2
   1816            {
   1817              destAddr.addrMode = Addr16Bit;
   \   000059   12....       LCALL     ?Subroutine27 & 0xFFFF
   1818              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   \                     ??CrossCallReturnLabel_245:
   \   00005C   7401         MOV       A,#0x1
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   E8           MOV       A,R0
   \   000062   F0           MOVX      @DPTR,A
   \   000063   A3           INC       DPTR
   \   000064   E9           MOV       A,R1
   \   000065   F0           MOVX      @DPTR,A
   1819              retValue = (uint8)ZDP_NWKAddrOfInterestReq( &destAddr, nwkAddr, cmd, 0 );
   \   000066                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000066   78..         MOV       R0,#?V3
   \   000068   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006B   EE           MOV       A,R6
   \   00006C   F9           MOV       R1,A
   \   00006D   AC..         MOV       R4,?V0
   \   00006F   AD..         MOV       R5,?V1
   \   000071   7402         MOV       A,#0x2
   \   000073   12....       LCALL     ?XSTACK_DISP101_8
   \   000076   12....       LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   000079   7401         MOV       A,#0x1
   \   00007B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007E   E9           MOV       A,R1
   \   00007F   85..82       MOV       DPL,?XSP + 0
   \   000082   85..83       MOV       DPH,?XSP + 1
   \   000085   F0           MOVX      @DPTR,A
   1820            }
   1821          
   1822            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoNwkAddrOfInterestReq_2:
   \   000086                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000086   AC..         MOV       R4,?XSP + 0
   \   000088   AD..         MOV       R5,?XSP + 1
   \   00008A   7B01         MOV       R3,#0x1
   \   00008C   AA..         MOV       R2,?V2
   \   00008E   7965         MOV       R1,#0x65
   \   000090   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1823          }
   \   000093   740A         MOV       A,#0xa
   \   000095   02....       LJMP      ?Subroutine5 & 0xFFFF
   1824          
   1825          /***************************************************************************************************
   1826           * @fn      MT_ZdoStartupFromApp
   1827           *
   1828           * @brief   Handle a Startup from App request.
   1829           *
   1830           * @param   pBuf  - MT message data
   1831           *
   1832           * @return  void
   1833           ***************************************************************************************************/
   1834          static void MT_ZdoStartupFromApp(uint8 *pBuf)
   1835          {
   1836            uint8 cmd0, cmd1, retValue;
   1837            retValue = ZSuccess;
   1838          
   1839            /* parse header */
   1840            cmd0 = pBuf[MT_RPC_POS_CMD0];
   1841            cmd1 = pBuf[MT_RPC_POS_CMD1];
   1842            pBuf += MT_RPC_FRAME_HDR_SZ;
   1843            
   1844            if(ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE)
   1845            {
   1846              bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_FORMATION);
   1847            }
   1848            else if (ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE)
   1849            {
   1850              bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING);
   1851            }
   1852            else
   1853            {
   1854               retValue = ZFailure;
   1855            }
   1856          
   1857            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   1858            {
   1859              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1,1, &retValue);
   1860            }
   1861          }
   1862          
   1863          
   1864          /***************************************************************************************************
   1865           * @fn      MT_ZdoNetworkDiscoveryReq
   1866           *
   1867           * @brief   Handle a ZDO Network Discovery request.
   1868           *
   1869           * @param   pBuf  - MT message data
   1870           *
   1871           * @return  void
   1872           ***************************************************************************************************/
   1873          static void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf)
   1874          {
   1875            uint8  retValue = ZFailure;
   1876            uint8  cmdId;
   1877            uint32 scanChannels;
   1878          
   1879            /* parse header */
   1880            cmdId = pBuf[MT_RPC_POS_CMD1];
   1881            pBuf += MT_RPC_FRAME_HDR_SZ;
   1882          
   1883            /* Packet format */
   1884            /* scan channels (4) | scan duration (1) */
   1885          
   1886            /* Scan channels */
   1887            scanChannels = osal_build_uint32(pBuf, 4);
   1888            pBuf += 4;
   1889          
   1890            retValue = ZDApp_NetworkDiscoveryReq(scanChannels, *pBuf);
   1891          
   1892            // Register ZDO callback for MT to handle the network discovery confirm
   1893            // and beacon notification confirm
   1894            ZDO_RegisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID, &MT_ZdoNwkDiscoveryCnfCB );
   1895            ZDO_RegisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID, &MT_ZdoBeaconIndCB );
   1896          
   1897            /* Build and send back the response */
   1898            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
   1899          }
   1900          
   1901          
   1902          /***************************************************************************************************
   1903           * @fn      MT_ZdoJoinReq
   1904           *
   1905           * @brief   Handle a ZDO Join request.
   1906           *
   1907           * @param   pBuf  - MT message data
   1908           *
   1909           * @return  void
   1910           ***************************************************************************************************/
   1911          static void MT_ZdoJoinReq(uint8 *pBuf)
   1912          {
   1913            uint8  retValue = ZFailure;
   1914            uint8  cmdId;
   1915            uint16 panId;
   1916            uint16 chosenParent;
   1917          
   1918            /* parse header */
   1919            cmdId = pBuf[MT_RPC_POS_CMD1];
   1920            pBuf += MT_RPC_FRAME_HDR_SZ;
   1921          
   1922            /* Packet format */
   1923            /* channel     (1) | panID (2) | extendedPanID (8) | chosenParent (2) |
   1924             * parentDepth (1) | stackProfile  (1)
   1925             */
   1926          
   1927            panId        = osal_build_uint16( &pBuf[1] );
   1928            chosenParent = osal_build_uint16( &pBuf[11] );
   1929          
   1930            retValue = ZDApp_JoinReq(pBuf[0], panId, &(pBuf[3]), chosenParent, pBuf[13], pBuf[14]);
   1931          
   1932            /* Register for MT to receive Join Confirm */
   1933            ZDO_RegisterForZdoCB( ZDO_JOIN_CNF_CBID, &MT_ZdoJoinCnfCB );
   1934          
   1935            /* Build and send back the response */
   1936            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
   1937          
   1938          }
   1939          
   1940          
   1941          /***************************************************************************************************
   1942           * @fn          MT_ZdoNwkDiscoveryCnfCB
   1943           *
   1944           * @brief       Send an indication to inform host device the completion of
   1945           *              network discovery scan
   1946           *
   1947           * @param       pStr - pointer to a parameter and a structure of parameters
   1948           *
   1949           * @return      void
   1950           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1951          void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr )
   \                     MT_ZdoNwkDiscoveryCnfCB:
   1952          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1953            /* pStr: status (uint8) */
   1954            /* Packet Format */
   1955            /* Status (1) */
   1956          
   1957            // Scan completed. De-register the callback with ZDO
   1958            ZDO_DeregisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID );
   \   000009                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   000009   7902         MOV       R1,#0x2
   \   00000B   12....       LCALL     `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
   1959            ZDO_DeregisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID );
   \   00000E                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   00000E   7903         MOV       R1,#0x3
   \   000010   12....       LCALL     `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
   1960          
   1961            // Send the buffered beacon indication
   1962            MT_ZdoBeaconIndCB ( NULL );
   \   000013                ; Setup parameters for call to function MT_ZdoBeaconIndCB
   \   000013   7A00         MOV       R2,#0x0
   \   000015   7B00         MOV       R3,#0x0
   \   000017   12....       LCALL     `??MT_ZdoBeaconIndCB::?relay`; Banked call to: MT_ZdoBeaconIndCB
   1963          
   1964            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1965                                                   MT_ZDO_NWK_DISCOVERY_CNF, 1, pStr);
   \   00001A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00001A   EE           MOV       A,R6
   \   00001B   FC           MOV       R4,A
   \   00001C   EF           MOV       A,R7
   \   00001D   FD           MOV       R5,A
   \   00001E   7B01         MOV       R3,#0x1
   \   000020   7AC7         MOV       R2,#-0x39
   \   000022   12....       LCALL     ?Subroutine67 & 0xFFFF
   1966            return NULL;
   \                     ??CrossCallReturnLabel_119:
   \   000025                REQUIRE ?Subroutine6
   \   000025                ; // Fall through to label ?Subroutine6
   1967          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   7945         MOV       R1,#0x45
   \   000002   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000005   7A00         MOV       R2,#0x0
   \   000007   7B00         MOV       R3,#0x0
   \   000009   22           RET
   1968          
   1969          /***************************************************************************************************
   1970           * @fn          MT_ZdoBeaconIndCB
   1971           *
   1972           * @brief       Send an indication to host device of a beacon notification
   1973           *
   1974           * @param       pStr -  pointer to a parameter and a structure of parameters
   1975           *
   1976           * @return      void
   1977           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine104_0
   \   000001                ; // Fall through to label ??Subroutine104_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine104_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F583         MOV       DPH,A
   \   000003   8882         MOV       DPL,R0
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1978          void *MT_ZdoBeaconIndCB ( void *pStr )
   \                     MT_ZdoBeaconIndCB:
   1979          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1980            zdoBeaconInd_t *pBeacon = pStr;
   1981            uint8 *pTmp;
   1982          
   1983            /* Packet Format */
   1984            /* devCnt (1) | device #1 (21) | device #2 (21) |... | device #n (21) */
   1985          
   1986            if( pStr != NULL)
   \   000009   EA           MOV       A,R2
   \   00000A   4F           ORL       A,R7
   \   00000B   90....       MOV       DPTR,#pBeaconIndBuf
   \   00000E   7003         JNZ       $+5
   \   000010   02....       LJMP      ??MT_ZdoBeaconIndCB_0 & 0xFFFF
   1987            {
   1988              if( pBeaconIndBuf == NULL )
   \   000013   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000016   701C         JNZ       ??MT_ZdoBeaconIndCB_1
   1989              {
   1990                // If pBeaconIndBuf has not been allocated yet
   1991                // allocate memory now with MAX_UART_TX_BUFF
   1992                if( NULL == (pBeaconIndBuf = (uint8 *)osal_mem_alloc(MT_ZDO_BEACON_IND_PACK_LEN)))
   \   000018                ; Setup parameters for call to function osal_mem_alloc
   \   000018   7AF9         MOV       R2,#-0x7
   \   00001A   7B00         MOV       R3,#0x0
   \   00001C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001F   90....       MOV       DPTR,#pBeaconIndBuf
   \   000022   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000025   F9           MOV       R1,A
   \   000026   EA           MOV       A,R2
   \   000027   49           ORL       A,R1
   \   000028   7003         JNZ       $+5
   \   00002A   02....       LJMP      ??MT_ZdoBeaconIndCB_2 & 0xFFFF
   1993                {
   1994                  // Memory failure
   1995                  return NULL;
   1996                }
   1997                pBeaconIndBuf[0] = 0; // First byte is devCnt. Initialize to 0.
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F583         MOV       DPH,A
   \   000030   8A82         MOV       DPL,R2
   \   000032   E4           CLR       A
   \   000033   F0           MOVX      @DPTR,A
   1998              }
   1999          
   2000              // Fill in the buffer with the beacon indication
   2001              pTmp = pBeaconIndBuf + (1 + pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN);
   \                     ??MT_ZdoBeaconIndCB_1:
   \   000034   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000037   F8           MOV       R0,A
   \   000038   A9..         MOV       R1,?B
   \   00003A   90....       MOV       DPTR,#pBeaconIndBuf
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   28           ADD       A,R0
   \   00003F   FA           MOV       R2,A
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   39           ADDC      A,R1
   \   000043   8A82         MOV       DPL,R2
   \   000045   F583         MOV       DPH,A
   \   000047   A3           INC       DPTR
   \   000048   AA82         MOV       R2,DPL
   \   00004A   AB83         MOV       R3,DPH
   2002              *pTmp++ = LO_UINT16(pBeacon->sourceAddr);
   \   00004C   8E82         MOV       DPL,R6
   \   00004E   8F83         MOV       DPH,R7
   \   000050   12....       LCALL     ?Subroutine30 & 0xFFFF
   2003              *pTmp++ = HI_UINT16(pBeacon->sourceAddr);
   \                     ??CrossCallReturnLabel_43:
   \   000053   8E82         MOV       DPL,R6
   \   000055   8F83         MOV       DPH,R7
   \   000057   12....       LCALL     ?Subroutine79 & 0xFFFF
   2004              *pTmp++ = LO_UINT16(pBeacon->panID);
   \                     ??CrossCallReturnLabel_266:
   \   00005A   EE           MOV       A,R6
   \   00005B   2402         ADD       A,#0x2
   \   00005D   F8           MOV       R0,A
   \   00005E   E4           CLR       A
   \   00005F   3F           ADDC      A,R7
   \   000060   F9           MOV       R1,A
   \   000061   8882         MOV       DPL,R0
   \   000063   12....       LCALL     ?Subroutine17 & 0xFFFF
   2005              *pTmp++ = HI_UINT16(pBeacon->panID);
   \                     ??CrossCallReturnLabel_258:
   \   000066   8882         MOV       DPL,R0
   \   000068   8983         MOV       DPH,R1
   \   00006A   12....       LCALL     ?Subroutine21 & 0xFFFF
   2006              *pTmp++ = pBeacon->logicalChannel;
   \                     ??CrossCallReturnLabel_250:
   \   00006D   8E82         MOV       DPL,R6
   \   00006F   8F83         MOV       DPH,R7
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   12....       LCALL     ?Subroutine35 & 0xFFFF
   2007              *pTmp++ = pBeacon->permitJoining;
   \                     ??CrossCallReturnLabel_53:
   \   000077   8E82         MOV       DPL,R6
   \   000079   8F83         MOV       DPH,R7
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   12....       LCALL     ?Subroutine34 & 0xFFFF
   2008              *pTmp++ = pBeacon->routerCapacity;
   \                     ??CrossCallReturnLabel_51:
   \   000083   8E82         MOV       DPL,R6
   \   000085   8F83         MOV       DPH,R7
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   12....       LCALL     ?Subroutine31 & 0xFFFF
   2009              *pTmp++ = pBeacon->deviceCapacity;
   \                     ??CrossCallReturnLabel_47:
   \   000090   8E82         MOV       DPL,R6
   \   000092   8F83         MOV       DPH,R7
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   12....       LCALL     ?Subroutine29 & 0xFFFF
   2010              *pTmp++ = pBeacon->protocolVersion;
   \                     ??CrossCallReturnLabel_41:
   \   00009E   8E82         MOV       DPL,R6
   \   0000A0   8F83         MOV       DPH,R7
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   12....       LCALL     ?Subroutine22 & 0xFFFF
   2011              *pTmp++ = pBeacon->stackProfile;
   \                     ??CrossCallReturnLabel_31:
   \   0000AC   8E82         MOV       DPL,R6
   \   0000AE   8F83         MOV       DPH,R7
   \   0000B0   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0000B3   F0           MOVX      @DPTR,A
   2012              *pTmp++ = pBeacon->LQI;
   \   0000B4   8E82         MOV       DPL,R6
   \   0000B6   8F83         MOV       DPH,R7
   \   0000B8   A3           INC       DPTR
   \   0000B9   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000BC   A3           INC       DPTR
   \   0000BD   12....       LCALL     ?Subroutine58 & 0xFFFF
   2013              *pTmp++ = pBeacon->depth;
   \                     ??CrossCallReturnLabel_99:
   \   0000C0   C0E0         PUSH      A
   \   0000C2   EA           MOV       A,R2
   \   0000C3   240B         ADD       A,#0xb
   \   0000C5   F582         MOV       DPL,A
   \   0000C7   E4           CLR       A
   \   0000C8   3B           ADDC      A,R3
   \   0000C9   F583         MOV       DPH,A
   \   0000CB   D0E0         POP       A
   \   0000CD   12....       LCALL     ?Subroutine59 & 0xFFFF
   2014              *pTmp++ = pBeacon->updateID;
   \                     ??CrossCallReturnLabel_101:
   \   0000D0   C0E0         PUSH      A
   \   0000D2   EA           MOV       A,R2
   \   0000D3   240C         ADD       A,#0xc
   \   0000D5   F582         MOV       DPL,A
   \   0000D7   E4           CLR       A
   \   0000D8   3B           ADDC      A,R3
   \   0000D9   F583         MOV       DPH,A
   \   0000DB   D0E0         POP       A
   \   0000DD   F0           MOVX      @DPTR,A
   2015              osal_memcpy( pTmp, pBeacon->extendedPanID, Z_EXTADDR_LEN);
   \   0000DE                ; Setup parameters for call to function osal_memcpy
   \   0000DE   EE           MOV       A,R6
   \   0000DF   240D         ADD       A,#0xd
   \   0000E1   F5..         MOV       ?V0,A
   \   0000E3   E4           CLR       A
   \   0000E4   3F           ADDC      A,R7
   \   0000E5   F5..         MOV       ?V1,A
   \   0000E7   75..00       MOV       ?V2,#0x0
   \   0000EA   78..         MOV       R0,#?V0
   \   0000EC   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000EF   7C08         MOV       R4,#0x8
   \   0000F1   7D00         MOV       R5,#0x0
   \   0000F3   EA           MOV       A,R2
   \   0000F4   240D         ADD       A,#0xd
   \   0000F6   FA           MOV       R2,A
   \   0000F7   5001         JNC       ??MT_ZdoBeaconIndCB_3
   \   0000F9   0B           INC       R3
   \                     ??MT_ZdoBeaconIndCB_3:
   \   0000FA   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   0000FD   12....       LCALL     ?DEALLOC_XSTACK8
   2016          
   2017              pBeaconIndBuf[0] += 1; // Increment the devCnt
   \   000100   90....       MOV       DPTR,#pBeaconIndBuf
   \   000103   E0           MOVX      A,@DPTR
   \   000104   F8           MOV       R0,A
   \   000105   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000108   04           INC       A
   \   000109   F0           MOVX      @DPTR,A
   2018          
   2019              // Check if the buffer can fit in another beacon
   2020              if( ((pBeaconIndBuf[0] + 1) * MT_ZDO_BEACON_IND_LEN + 1) > MT_ZDO_BEACON_IND_PACK_LEN )
   \   00010A   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00010D   A9..         MOV       R1,?B
   \   00010F   2416         ADD       A,#0x16
   \   000111   5001         JNC       ??MT_ZdoBeaconIndCB_4
   \   000113   09           INC       R1
   \                     ??MT_ZdoBeaconIndCB_4:
   \   000114   C3           CLR       C
   \   000115   94FA         SUBB      A,#-0x6
   \   000117   E9           MOV       A,R1
   \   000118   9400         SUBB      A,#0x0
   \   00011A   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00011C   65D0         XRL       A,PSW
   \   00011E   33           RLC       A
   \   00011F   402E         JC        ??MT_ZdoBeaconIndCB_2
   2021              {
   2022                // Packet full, send the packet over MT
   2023                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2024                                             MT_ZDO_BEACON_NOTIFY_IND,
   2025                                             (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
   \   000121                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000121   12....       LCALL     ?Subroutine10 & 0xFFFF
   2026                pBeaconIndBuf[0] = 0; // Reset the devCnt back to zero
   2027              }
   2028            }
   \                     ??CrossCallReturnLabel_12:
   \   000124   F583         MOV       DPH,A
   \   000126   8882         MOV       DPL,R0
   \   000128   E4           CLR       A
   \   000129   8023         SJMP      ??MT_ZdoBeaconIndCB_5
   2029            else
   2030            {
   2031              if( (pBeaconIndBuf != NULL) && (pBeaconIndBuf[0] != 0) )
   \                     ??MT_ZdoBeaconIndCB_0:
   \   00012B   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00012E   601F         JZ        ??MT_ZdoBeaconIndCB_2
   \   000130   12....       LCALL     ??Subroutine104_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000133   6008         JZ        ??MT_ZdoBeaconIndCB_6
   2032              {
   2033                // End of beacon indication, send the packet over MT
   2034                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2035                                             MT_ZDO_BEACON_NOTIFY_IND,
   2036                                             (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
   \   000135                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000135   12....       LCALL     ?Subroutine10 & 0xFFFF
   2037              }
   2038              // Free the allocated memory
   2039              if(pBeaconIndBuf != NULL)
   \                     ??CrossCallReturnLabel_13:
   \   000138   F9           MOV       R1,A
   \   000139   E8           MOV       A,R0
   \   00013A   49           ORL       A,R1
   \   00013B   6012         JZ        ??MT_ZdoBeaconIndCB_2
   2040              {
   2041                osal_mem_free(pBeaconIndBuf);
   \                     ??MT_ZdoBeaconIndCB_6:
   \   00013D                ; Setup parameters for call to function osal_mem_free
   \   00013D   90....       MOV       DPTR,#pBeaconIndBuf
   \   000140   E0           MOVX      A,@DPTR
   \   000141   FA           MOV       R2,A
   \   000142   A3           INC       DPTR
   \   000143   E0           MOVX      A,@DPTR
   \   000144   FB           MOV       R3,A
   \   000145   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2042                pBeaconIndBuf = NULL;
   \   000148   90....       MOV       DPTR,#pBeaconIndBuf
   \   00014B   E4           CLR       A
   \   00014C   F0           MOVX      @DPTR,A
   \   00014D   A3           INC       DPTR
   \                     ??MT_ZdoBeaconIndCB_5:
   \   00014E   F0           MOVX      @DPTR,A
   2043              }
   2044            }
   2045          
   2046            return NULL;
   \                     ??MT_ZdoBeaconIndCB_2:
   \   00014F   7A00         MOV       R2,#0x0
   \   000151   7B00         MOV       R3,#0x0
   \   000153   02....       LJMP      ??Subroutine129_0 & 0xFFFF
   2047          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   90....       MOV       DPTR,#pBeaconIndBuf
   \   000003   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000006   E0           MOVX      A,@DPTR
   \   000007   75..15       MOV       ?B,#0x15
   \   00000A   A4           MUL       AB
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   00000B   A3           INC       DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine121_0
   \   000001                ; // Fall through to label ??Subroutine121_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine121_0:
   \   000000   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   49           ORL       A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine122_0
   \   000002                ; // Fall through to label ??Subroutine122_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine122_0:
   \   000000   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV       DPTR,#pBeaconIndBuf
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FC           MOV       R4,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FD           MOV       R5,A
   \   000008   75..15       MOV       ?B,#0x15
   \   00000B   F583         MOV       DPH,A
   \   00000D   8882         MOV       DPL,R0
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   A4           MUL       AB
   \   000011   04           INC       A
   \   000012   FB           MOV       R3,A
   \   000013   7AC5         MOV       R2,#-0x3b
   \   000015   7945         MOV       R1,#0x45
   \   000017   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   00001A   90....       MOV       DPTR,#pBeaconIndBuf
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F8           MOV       R0,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine127_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   EE           MOV       A,R6
   \   000002   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   240C         ADD       A,#0xc
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F583         MOV       DPH,A
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   EE           MOV       A,R6
   \   000002   240B         ADD       A,#0xb
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   3F           ADDC      A,R7
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine129_0:
   \   000000   7F03         MOV       R7,#0x3
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   2048          
   2049          /***************************************************************************************************
   2050           * @fn          MT_ZdoJoinCnfCB
   2051           *
   2052           * @brief       Handle the ZDO Join Confirm from ZDO
   2053           *
   2054           * @param       pStr - pointer to a parameter and a structure of parameters
   2055           *
   2056           * @return      void
   2057           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2058          void *MT_ZdoJoinCnfCB ( void *pStr )
   \                     MT_ZdoJoinCnfCB:
   2059          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2060            /* pStr: zdoJoinCnf_t* */
   2061            /* Packet Format */
   2062            /* Status (1) | device addr (2) | parent addr (2) */
   2063          
   2064            uint8 buf[MT_ZDO_JOIN_CNF_LEN];
   2065            zdoJoinCnf_t *joinCnf = pStr;
   2066          
   2067            /* Join Complete. De-register the callback with ZDO */
   2068            ZDO_DeregisterForZdoCB( ZDO_JOIN_CNF_CBID );
   \   00000E                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   00000E   7904         MOV       R1,#0x4
   \   000010   12....       LCALL     `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
   2069          
   2070            buf[0] = joinCnf->status;
   \   000013   8E82         MOV       DPL,R6
   \   000015   8F83         MOV       DPH,R7
   \   000017   12....       LCALL     ??Subroutine105_0 & 0xFFFF
   2071            buf[1] = LO_UINT16( joinCnf->deviceAddr );
   \                     ??CrossCallReturnLabel_186:
   \   00001A   8E82         MOV       DPL,R6
   \   00001C   8F83         MOV       DPH,R7
   \   00001E   A3           INC       DPTR
   \   00001F   A882         MOV       R0,DPL
   \   000021   A983         MOV       R1,DPH
   \   000023   E0           MOVX      A,@DPTR
   \   000024   C0E0         PUSH      A
   \   000026   7401         MOV       A,#0x1
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   D0E0         POP       A
   \   00002D   12....       LCALL     ?Subroutine55 & 0xFFFF
   2072            buf[2] = HI_UINT16( joinCnf->deviceAddr );
   \                     ??CrossCallReturnLabel_91:
   \   000030   C0E0         PUSH      A
   \   000032   7402         MOV       A,#0x2
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   D0E0         POP       A
   \   000039   F0           MOVX      @DPTR,A
   2073            buf[3] = LO_UINT16( joinCnf->parentAddr );
   \   00003A   EE           MOV       A,R6
   \   00003B   2403         ADD       A,#0x3
   \   00003D   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000040   E0           MOVX      A,@DPTR
   \   000041   C0E0         PUSH      A
   \   000043   7403         MOV       A,#0x3
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   D0E0         POP       A
   \   00004A   12....       LCALL     ?Subroutine55 & 0xFFFF
   2074            buf[4] = HI_UINT16( joinCnf->parentAddr );
   \                     ??CrossCallReturnLabel_92:
   \   00004D   C0E0         PUSH      A
   \   00004F   7404         MOV       A,#0x4
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   D0E0         POP       A
   \   000056   12....       LCALL     ?Subroutine61 & 0xFFFF
   2075          
   2076            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2077                                         MT_ZDO_JOIN_CNF, MT_ZDO_JOIN_CNF_LEN, buf);
   \                     ??CrossCallReturnLabel_105:
   \   000059   7B05         MOV       R3,#0x5
   \   00005B   7AC6         MOV       R2,#-0x3a
   \   00005D   12....       LCALL     ?Subroutine67 & 0xFFFF
   2078          
   2079            return NULL;
   \                     ??CrossCallReturnLabel_120:
   \   000060   7405         MOV       A,#0x5
   \   000062   12....       LCALL     ?DEALLOC_XSTACK8
   \   000065   02....       LJMP      ?Subroutine6 & 0xFFFF
   2080          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   3F           ADDC      A,R7
   \   000003   F9           MOV       R1,A
   \   000004   8882         MOV       DPL,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001   AC..         MOV       R4,?XSP + 0
   \   000003   AD..         MOV       R5,?XSP + 1
   \   000005   22           RET
   2081          
   2082          /*************************************************************************************************
   2083           * @fn      MT_ZdoRegisterForZDOMsg(pBuf);
   2084           *
   2085           * @brief   MT proxy for ZDO_RegisterForZDOMsg.
   2086           *
   2087           * @param   pBuf  - MT message data
   2088           *
   2089           * @return  void
   2090           *************************************************************************************************/
   2091          void MT_ZdoRegisterForZDOMsg(uint8 *pBuf)
   2092          {
   2093            uint8 cmd0, cmd1, tmp;
   2094            uint16 cId;
   2095          
   2096            /* parse header */
   2097            cmd0 = pBuf[MT_RPC_POS_CMD0];
   2098            cmd1 = pBuf[MT_RPC_POS_CMD1];
   2099            pBuf += MT_RPC_FRAME_HDR_SZ;
   2100          
   2101            cId = osal_build_uint16( pBuf );
   2102            tmp = ZDO_RegisterForZDOMsg(MT_TaskID, cId);
   2103          
   2104            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   2105            {
   2106              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   2107            }
   2108          }
   2109          
   2110          /*************************************************************************************************
   2111           * @fn      MT_ZdoRemoveRegisteredCB(pBuf);
   2112           *
   2113           * @brief   MT proxy for ZDO_RemoveRegisteredCB.
   2114           *
   2115           * @param   pBuf  - MT message data
   2116           *
   2117           * @return  void
   2118           *************************************************************************************************/
   2119          void MT_ZdoRemoveRegisteredCB(uint8 *pBuf)
   2120          {
   2121            uint8 cmd0, cmd1, tmp;
   2122            uint16 cId;
   2123          
   2124            /* parse header */
   2125            cmd0 = pBuf[MT_RPC_POS_CMD0];
   2126            cmd1 = pBuf[MT_RPC_POS_CMD1];
   2127            pBuf += MT_RPC_FRAME_HDR_SZ;
   2128          
   2129            cId = osal_build_uint16( pBuf );
   2130            tmp = ZDO_RemoveRegisteredCB(MT_TaskID, cId);
   2131          
   2132            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   2133            {
   2134              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   2135            }
   2136          }
   2137          
   2138          /*************************************************************************************************
   2139           * @fn      MT_ZdoSetRejoinParameters(pBuf);
   2140           *
   2141           * @brief   Set Rejoin backoff and scan duration from MT
   2142           *
   2143           * @param   pBuf  - MT message data
   2144           *
   2145           * @return  void
   2146           *************************************************************************************************/
   2147          static void MT_ZdoSetRejoinParameters(uint8 *pBuf)
   2148          {
   2149            uint8 cmdId;
   2150            uint8 retValue;
   2151            uint32 rejoinBackoffDuration, rejoinScanDuration;
   2152          
   2153            // parse header
   2154            cmdId = pBuf[MT_RPC_POS_CMD1];
   2155            pBuf += MT_RPC_FRAME_HDR_SZ;
   2156          
   2157            //Rejoin Backoff Duration
   2158            rejoinBackoffDuration = osal_build_uint32(pBuf, 4);
   2159            pBuf += 4;
   2160          
   2161            //Rejoin Scan Duration
   2162            rejoinScanDuration = osal_build_uint32(pBuf, 4);
   2163          
   2164            ZDApp_SetRejoinScanDuration(rejoinScanDuration);
   2165            ZDApp_SetRejoinBackoffDuration(rejoinBackoffDuration);
   2166          
   2167            retValue = ZSuccess;
   2168          
   2169            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   2170          
   2171          }
   2172          
   2173          #endif /* MT_ZDO_FUNC */
   2174          
   2175          
   2176          /***************************************************************************************************
   2177           * Callback handling function
   2178           ***************************************************************************************************/
   2179          
   2180          #if defined (MT_ZDO_CB_FUNC)
   2181          
   2182          /***************************************************************************************************
   2183           * @fn      MT_ZdoStateChangeCB
   2184           *
   2185           * @brief   Handle state change OSAL message from ZDO.
   2186           *
   2187           * @param   pMsg  - Message data
   2188           *
   2189           * @return  void
   2190           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2191          void MT_ZdoStateChangeCB(osal_event_hdr_t *pMsg)
   \                     MT_ZdoStateChangeCB:
   2192          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2193            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2194                                                 MT_ZDO_STATE_CHANGE_IND, 1, &pMsg->status);
   \   000004                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   AC82         MOV       R4,DPL
   \   00000B   AD83         MOV       R5,DPH
   \   00000D   7B01         MOV       R3,#0x1
   \   00000F   7AC0         MOV       R2,#-0x40
   \   000011   7945         MOV       R1,#0x45
   \   000013   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2195          }
   \   000016   02....       LJMP      ?Subroutine0 & 0xFFFF
   2196          
   2197          /***************************************************************************************************
   2198           * @fn     MT_ZdoDirectCB()
   2199           *
   2200           * @brief  ZDO direct callback.  Build an MT message directly from the
   2201           *         over-the-air ZDO message.
   2202           *
   2203           * @param  pData - Incoming AF frame.
   2204           *
   2205           * @return  none
   2206           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2207          void MT_ZdoDirectCB( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
   \                     MT_ZdoDirectCB:
   2208          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   2209            uint8 len, *pBuf;
   2210            uint16 origClusterId;
   2211          
   2212            // save original value because MT_ZdoHandleExceptions() function could modify pData->clusterId
   2213            origClusterId = pData->clusterId;
   \   000012   8A82         MOV       DPL,R2
   \   000014   8B83         MOV       DPH,R3
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V7,A
   2214          
   2215            // Is the message an exception or not a response?
   2216            if ( MT_ZdoHandleExceptions( pData, inMsg ) || ( (origClusterId & ZDO_RESPONSE_BIT) == 0 ) )
   \   00001E   75..01       MOV       ?V4,#0x1
   \   000021   EC           MOV       A,R4
   \   000022   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000025   F5..         MOV       ?V2,A
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F5..         MOV       ?V3,A
   \   00002B   78..         MOV       R0,#?V2
   \   00002D   12....       LCALL     ?US_SWITCH_SPARSE
   \                     `?<Jumptable for MT_ZdoDirectCB>_0`:
   \   000030   0100         DW        1
   \   000032   0080         DW        32768
   \   000034   0180         DW        32769
   \   000036   ....         DW        ??MT_ZdoDirectCB_0
   \   000038   0200         DW        2
   \   00003A   1300         DW        19
   \   00003C   ....         DW        ??MT_ZdoDirectCB_1
   \   00003E   0480         DW        32772
   \   000040   ....         DW        ??MT_ZdoDirectCB_2
   \   000042   ....         DW        ??MT_ZdoDirectCB_3
   \                     ??MT_ZdoDirectCB_2:
   \   000044   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000047   C3           CLR       C
   \   000048   E0           MOVX      A,@DPTR
   \   000049   9406         SUBB      A,#0x6
   \   00004B   A3           INC       DPTR
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   9400         SUBB      A,#0x0
   \   00004F   5065         JNC       ??MT_ZdoDirectCB_3
   \   000051   75..00       MOV       ?V4,#0x0
   \   000054   8A82         MOV       DPL,R2
   \   000056   8B83         MOV       DPH,R3
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   7440         MOV       A,#0x40
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   A3           INC       DPTR
   \   000060   E4           CLR       A
   \   000061   F0           MOVX      @DPTR,A
   \   000062   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000065   7402         MOV       A,#0x2
   \   000067   F0           MOVX      @DPTR,A
   \   000068   A3           INC       DPTR
   \   000069   E4           CLR       A
   \   00006A   F0           MOVX      @DPTR,A
   \   00006B   804C         SJMP      ??MT_ZdoDirectCB_4
   \                     ??MT_ZdoDirectCB_1:
   \   00006D                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   00006D   AC..         MOV       R4,?XSP + 0
   \   00006F   AD..         MOV       R5,?XSP + 1
   \   000071   EE           MOV       A,R6
   \   000072   FA           MOV       R2,A
   \   000073   EF           MOV       A,R7
   \   000074   FB           MOV       R3,A
   \   000075   12....       LCALL     `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
   \   000078                ; Setup parameters for call to function MT_ZdoEndDevAnnceCB
   \   000078   8E82         MOV       DPL,R6
   \   00007A   8F83         MOV       DPH,R7
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   FC           MOV       R4,A
   \   000080   A3           INC       DPTR
   \   000081   E0           MOVX      A,@DPTR
   \   000082   FD           MOV       R5,A
   \   000083   AA..         MOV       R2,?XSP + 0
   \   000085   AB..         MOV       R3,?XSP + 1
   \   000087   12....       LCALL     `??MT_ZdoEndDevAnnceCB::?relay`; Banked call to: MT_ZdoEndDevAnnceCB
   \   00008A   802D         SJMP      ??MT_ZdoDirectCB_4
   \                     ??MT_ZdoDirectCB_0:
   \   00008C                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00008C   EC           MOV       A,R4
   \   00008D   FA           MOV       R2,A
   \   00008E   ED           MOV       A,R5
   \   00008F   FB           MOV       R3,A
   \   000090   12....       LCALL     `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   000093   8A..         MOV       ?V2,R2
   \   000095   8B..         MOV       ?V3,R3
   \   000097   EA           MOV       A,R2
   \   000098   4B           ORL       A,R3
   \   000099   601E         JZ        ??MT_ZdoDirectCB_4
   \   00009B   8A82         MOV       DPL,R2
   \   00009D   8B83         MOV       DPH,R3
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   700B         JNZ       ??MT_ZdoDirectCB_5
   \   0000A2                ; Setup parameters for call to function MT_ZdoAddrRspCB
   \   0000A2   EE           MOV       A,R6
   \   0000A3   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   0000A6   FC           MOV       R4,A
   \   0000A7   A3           INC       DPTR
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   FD           MOV       R5,A
   \   0000AA   12....       LCALL     `??MT_ZdoAddrRspCB::?relay`; Banked call to: MT_ZdoAddrRspCB
   \                     ??MT_ZdoDirectCB_5:
   \   0000AD                ; Setup parameters for call to function osal_mem_free
   \   0000AD   AA..         MOV       R2,?V2
   \   0000AF   AB..         MOV       R3,?V3
   \   0000B1   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000B4   8003         SJMP      ??MT_ZdoDirectCB_4
   \                     ??MT_ZdoDirectCB_3:
   \   0000B6   75..00       MOV       ?V4,#0x0
   \                     ??MT_ZdoDirectCB_4:
   \   0000B9   E5..         MOV       A,?V4
   \   0000BB   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000BD   4067         JC        ??CrossCallReturnLabel_260
   \   0000BF   E5..         MOV       A,?V7
   \   0000C1   5480         ANL       A,#0x80
   \   0000C3   7002         JNZ       ??MT_ZdoDirectCB_6
   2217            {
   2218              return;  // Handled somewhere else or not needed.
   \                     ??MT_ZdoDirectCB_7:
   \   0000C5   805F         SJMP      ??CrossCallReturnLabel_260
   2219            }
   2220          
   2221            /* ZDO data starts after one-byte sequence number and the msg buffer length includes
   2222             * two bytes for srcAddr.
   2223             */
   2224            len = pData->cmd.DataLength - 1 + sizeof(uint16);
   \                     ??MT_ZdoDirectCB_6:
   \   0000C7   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   0000CA   04           INC       A
   \   0000CB   12....       LCALL     ?Subroutine71 & 0xFFFF
   2225          
   2226            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   \                     ??CrossCallReturnLabel_130:
   \   0000CE   6056         JZ        ??CrossCallReturnLabel_260
   2227            {
   2228              uint8 id = MT_ZDO_CID_TO_AREQ_ID(pData->clusterId);
   \   0000D0   85..82       MOV       DPL,?V0
   \   0000D3   85..83       MOV       DPH,?V1
   \   0000D6   A3           INC       DPTR
   \   0000D7   A3           INC       DPTR
   \   0000D8   A3           INC       DPTR
   \   0000D9   A3           INC       DPTR
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   4480         ORL       A,#0x80
   \   0000DD   F5..         MOV       ?V3,A
   2229          
   2230              pBuf[0] = LO_UINT16(pData->srcAddr.addr.shortAddr);
   \   0000DF   E5..         MOV       A,?V0
   \   0000E1   2406         ADD       A,#0x6
   \   0000E3   F8           MOV       R0,A
   \   0000E4   E4           CLR       A
   \   0000E5   35..         ADDC      A,?V1
   \   0000E7   12....       LCALL     ?Subroutine9 & 0xFFFF
   2231              pBuf[1] = HI_UINT16(pData->srcAddr.addr.shortAddr);
   2232          
   2233              /* copy ZDO data, skipping one-byte sequence number */
   2234              osal_memcpy(pBuf+2, (pData->cmd.Data + 1), pData->cmd.DataLength-1);
   \                     ??CrossCallReturnLabel_263:
   \   0000EA                ; Setup parameters for call to function osal_memcpy
   \   0000EA   E5..         MOV       A,?V0
   \   0000EC   2422         ADD       A,#0x22
   \   0000EE   12....       LCALL     ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   0000F1   2401         ADD       A,#0x1
   \   0000F3   F5..         MOV       ?V4,A
   \   0000F5   A3           INC       DPTR
   \   0000F6   E0           MOVX      A,@DPTR
   \   0000F7   3400         ADDC      A,#0x0
   \   0000F9   F5..         MOV       ?V5,A
   \   0000FB   75..00       MOV       ?V6,#0x0
   \   0000FE   78..         MOV       R0,#?V4
   \   000100   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000103   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000106   24FF         ADD       A,#-0x1
   \   000108   FC           MOV       R4,A
   \   000109   A3           INC       DPTR
   \   00010A   E0           MOVX      A,@DPTR
   \   00010B   34FF         ADDC      A,#-0x1
   \   00010D   FD           MOV       R5,A
   \   00010E   EA           MOV       A,R2
   \   00010F   2402         ADD       A,#0x2
   \   000111   FA           MOV       R2,A
   \   000112   E4           CLR       A
   \   000113   3F           ADDC      A,R7
   \   000114   FB           MOV       R3,A
   \   000115   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000118   12....       LCALL     ?DEALLOC_XSTACK8
   2235          
   2236              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   \   00011B                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00011B   EE           MOV       A,R6
   \   00011C   FC           MOV       R4,A
   \   00011D   EF           MOV       A,R7
   \   00011E   FD           MOV       R5,A
   \   00011F   AB..         MOV       R3,?V2
   \   000121   AA..         MOV       R2,?V3
   \   000123   12....       LCALL     ?Subroutine68 & 0xFFFF
   2237              osal_mem_free(pBuf);
   2238            }
   2239          }
   \                     ??CrossCallReturnLabel_260:
   \   000126   740B         MOV       A,#0xb
   \   000128   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   7945         MOV       R1,#0x45
   \   000002                REQUIRE ??Subroutine123_0
   \   000002                ; // Fall through to label ??Subroutine123_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine123_0:
   \   000000   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000003                ; Setup parameters for call to function osal_mem_free
   \   000003                ; Setup parameters for call to function osal_mem_free
   \   000003                ; Setup parameters for call to function osal_mem_free
   \   000003   EE           MOV       A,R6
   \   000004   FA           MOV       R2,A
   \   000005   EF           MOV       A,R7
   \   000006   FB           MOV       R3,A
   \   000007   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F9           MOV       R1,A
   \   000001   8882         MOV       DPL,R0
   \   000003   F583         MOV       DPH,A
   \   000005                REQUIRE ??Subroutine124_0
   \   000005                ; // Fall through to label ??Subroutine124_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine124_0:
   \   000000   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000003   8882         MOV       DPL,R0
   \   000005   8983         MOV       DPH,R1
   \   000007   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   E5..         MOV       A,?V0
   \   000002   2420         ADD       A,#0x20
   \   000004                REQUIRE ??Subroutine125_0
   \   000004                ; // Fall through to label ??Subroutine125_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine125_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V1
   \   000005   F583         MOV       DPH,A
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   F5..         MOV       ?V2,A
   \   000002                ; Setup parameters for call to function osal_mem_alloc
   \   000002                ; Setup parameters for call to function osal_mem_alloc
   \   000002   FA           MOV       R2,A
   \   000003   7B00         MOV       R3,#0x0
   \   000005   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000008   8A..         MOV       ?V4,R2
   \   00000A   8B..         MOV       ?V5,R3
   \   00000C   AE..         MOV       R6,?V4
   \   00000E   AF..         MOV       R7,?V5
   \   000010   EA           MOV       A,R2
   \   000011   4F           ORL       A,R7
   \   000012   22           RET
   2240          
   2241          /***************************************************************************************************
   2242           * @fn     MT_ZdoHandleExceptions()
   2243           *
   2244           * @brief  Handles all messages that are an exception to the generic MT ZDO Response.
   2245           *
   2246           * @param  pData - Incoming AF frame.
   2247           *
   2248           * @return  TRUE if handled by this function, FALSE if not
   2249           ***************************************************************************************************/
   2250          static uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
   2251          {
   2252            uint8 ret = TRUE;
   2253            ZDO_NwkIEEEAddrResp_t *nwkRsp;
   2254            ZDO_DeviceAnnce_t devAnnce;
   2255            uint8 doDefault = FALSE;
   2256          
   2257            switch ( inMsg->clusterID )
   2258            {
   2259              case NWK_addr_rsp:
   2260              case IEEE_addr_rsp:
   2261                if ( NULL != (nwkRsp = ZDO_ParseAddrRsp(inMsg)) )
   2262                {
   2263                  if ( nwkRsp->status == ZDO_SUCCESS )
   2264                  {
   2265                    MT_ZdoAddrRspCB( nwkRsp, inMsg->clusterID );
   2266                  }
   2267                  osal_mem_free( nwkRsp );
   2268                }
   2269                break;
   2270          
   2271              case Device_annce:
   2272                ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
   2273                MT_ZdoEndDevAnnceCB( &devAnnce, inMsg->srcAddr.addr.shortAddr );
   2274                break;
   2275          
   2276              case Simple_Desc_rsp:
   2277                if ( pData->cmd.DataLength > 5 )
   2278                {
   2279                  ret = FALSE;
   2280                }
   2281                else
   2282                {
   2283                  doDefault = TRUE;
   2284                }
   2285                break;
   2286          
   2287              default:
   2288                ret = FALSE;
   2289                break;
   2290            }
   2291          
   2292            if ( doDefault )
   2293            {
   2294              ret = FALSE;
   2295              pData->clusterId = MtZdoDef_rsp;
   2296              pData->cmd.DataLength = 2;
   2297            }
   2298          
   2299            return ( ret );
   2300          }
   2301          
   2302          /***************************************************************************************************
   2303           * @fn      MT_ZdoAddrRspCB
   2304           *
   2305           * @brief   Handle IEEE or nwk address response OSAL message from ZDO.
   2306           *
   2307           * @param   pMsg  - Message data
   2308           *
   2309           * @return  void
   2310           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2311          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID )
   \                     MT_ZdoAddrRspCB:
   2312          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   2313            uint8   listLen, len, *pBuf;
   2314          
   2315            /* both ZDO_NwkAddrResp_t and ZDO_IEEEAddrResp_t must be the same */
   2316          
   2317            /* get length, sanity check length */
   2318            listLen = pMsg->numAssocDevs;
   \   00000B   EA           MOV       A,R2
   \   00000C   240B         ADD       A,#0xb
   \   00000E   12....       LCALL     ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000011   F5..         MOV       ?V4,A
   2319          
   2320            /* calculate msg length */
   2321            len = MT_ZDO_ADDR_RSP_LEN + (listLen * sizeof(uint16));
   \   000013   C3           CLR       C
   \   000014   33           RLC       A
   \   000015   240D         ADD       A,#0xd
   \   000017   F5..         MOV       ?V5,A
   2322          
   2323            /* get buffer */
   2324            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   \   000019                ; Setup parameters for call to function osal_mem_alloc
   \   000019   FA           MOV       R2,A
   \   00001A   7B00         MOV       R3,#0x0
   \   00001C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001F   8A..         MOV       ?V6,R2
   \   000021   8B..         MOV       ?V7,R3
   \   000023   EA           MOV       A,R2
   \   000024   4B           ORL       A,R3
   \   000025   6075         JZ        ??MT_ZdoAddrRspCB_0
   2325            {
   2326              uint8 id = MT_ZDO_CID_TO_AREQ_ID(clusterID);
   2327              uint8 *pTmp = pBuf;
   2328          
   2329              *pTmp++ = pMsg->status;
   \   000027   85..82       MOV       DPL,?V0
   \   00002A   85..83       MOV       DPH,?V1
   \   00002D   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000030   A3           INC       DPTR
   \   000031   AE82         MOV       R6,DPL
   \   000033   AF83         MOV       R7,DPH
   2330          
   2331              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   \   000035                ; Setup parameters for call to function sAddrExtCpy
   \   000035   E5..         MOV       A,?V0
   \   000037   2403         ADD       A,#0x3
   \   000039   FC           MOV       R4,A
   \   00003A   E4           CLR       A
   \   00003B   35..         ADDC      A,?V1
   \   00003D   FD           MOV       R5,A
   \   00003E   EE           MOV       A,R6
   \   00003F   FA           MOV       R2,A
   \   000040   EF           MOV       A,R7
   \   000041   FB           MOV       R3,A
   \   000042   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2332              pTmp += Z_EXTADDR_LEN;
   2333          
   2334              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   \   000045   85..82       MOV       DPL,?V0
   \   000048   85..83       MOV       DPH,?V1
   \   00004B   A3           INC       DPTR
   \   00004C   A882         MOV       R0,DPL
   \   00004E   A983         MOV       R1,DPH
   \   000050   12....       LCALL     ?Subroutine24 & 0xFFFF
   2335              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   \                     ??CrossCallReturnLabel_35:
   \   000053   8882         MOV       DPL,R0
   \   000055   8983         MOV       DPH,R1
   \   000057   A3           INC       DPTR
   \   000058   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00005B   F0           MOVX      @DPTR,A
   2336          
   2337              *pTmp++ = pMsg->startIndex;
   \   00005C   E5..         MOV       A,?V0
   \   00005E   240C         ADD       A,#0xc
   \   000060   F582         MOV       DPL,A
   \   000062   E4           CLR       A
   \   000063   35..         ADDC      A,?V1
   \   000065   F583         MOV       DPH,A
   \   000067   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00006A   A3           INC       DPTR
   \   00006B   12....       LCALL     ?Subroutine91 & 0xFFFF
   2338              *pTmp++ = listLen;
   \                     ??CrossCallReturnLabel_162:
   \   00006E   E5..         MOV       A,?V4
   \   000070   F0           MOVX      @DPTR,A
   2339          
   2340              MT_Word2Buf(pTmp, pMsg->devList, listLen);
   \   000071                ; Setup parameters for call to function MT_Word2Buf
   \   000071   F9           MOV       R1,A
   \   000072   E5..         MOV       A,?V0
   \   000074   240D         ADD       A,#0xd
   \   000076   FC           MOV       R4,A
   \   000077   E4           CLR       A
   \   000078   35..         ADDC      A,?V1
   \   00007A   FD           MOV       R5,A
   \   00007B   EE           MOV       A,R6
   \   00007C   240C         ADD       A,#0xc
   \   00007E   FA           MOV       R2,A
   \   00007F   E4           CLR       A
   \   000080   3F           ADDC      A,R7
   \   000081   FB           MOV       R3,A
   \   000082   12....       LCALL     `??MT_Word2Buf::?relay`; Banked call to: MT_Word2Buf
   2341          
   2342              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   \   000085                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000085   AC..         MOV       R4,?V6
   \   000087   AD..         MOV       R5,?V7
   \   000089   AB..         MOV       R3,?V5
   \   00008B   E5..         MOV       A,?V2
   \   00008D   4480         ORL       A,#0x80
   \   00008F   FA           MOV       R2,A
   \   000090   7945         MOV       R1,#0x45
   \   000092   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2343              osal_mem_free(pBuf);
   \   000095                ; Setup parameters for call to function osal_mem_free
   \   000095   AA..         MOV       R2,?V6
   \   000097   AB..         MOV       R3,?V7
   \   000099   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2344            }
   2345          }
   \                     ??MT_ZdoAddrRspCB_0:
   \   00009C   02....       LJMP      ??Subroutine107_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   22           RET
   2346          
   2347          /***************************************************************************************************
   2348           * @fn      MT_ZdoEndDevAnnceCB
   2349           *
   2350           * @brief   Handle end device announce OSAL message from ZDO.
   2351           *
   2352           * @param   pMsg  - Message data
   2353           *
   2354           * @return  void
   2355           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2356          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr )
   \                     MT_ZdoEndDevAnnceCB:
   2357          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   2358            uint8 *pBuf;
   2359          
   2360            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(MT_ZDO_END_DEVICE_ANNCE_IND_LEN)))
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A0D         MOV       R2,#0xd
   \   00000F   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000012   6051         JZ        ??CrossCallReturnLabel_128
   2361            {
   2362              uint8 *pTmp = pBuf;
   2363          
   2364              *pTmp++ = LO_UINT16(srcAddr);
   \   000014   EE           MOV       A,R6
   \   000015   8A82         MOV       DPL,R2
   \   000017   8B83         MOV       DPH,R3
   \   000019   F0           MOVX      @DPTR,A
   2365              *pTmp++ = HI_UINT16(srcAddr);
   \   00001A   EF           MOV       A,R7
   \   00001B   A3           INC       DPTR
   \   00001C   F0           MOVX      @DPTR,A
   2366          
   2367              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   \   00001D   85..82       MOV       DPL,?V2
   \   000020   85..83       MOV       DPH,?V3
   \   000023   12....       LCALL     ??Subroutine122_0 & 0xFFFF
   2368              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   \                     ??CrossCallReturnLabel_256:
   \   000026   85..82       MOV       DPL,?V2
   \   000029   85..83       MOV       DPH,?V3
   \   00002C   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   00002F   EA           MOV       A,R2
   \   000030   2404         ADD       A,#0x4
   \   000032   FE           MOV       R6,A
   \   000033   E4           CLR       A
   \   000034   35..         ADDC      A,?V1
   \   000036   FF           MOV       R7,A
   2369          
   2370              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   \   000037                ; Setup parameters for call to function sAddrExtCpy
   \   000037   E5..         MOV       A,?V2
   \   000039   2402         ADD       A,#0x2
   \   00003B   FC           MOV       R4,A
   \   00003C   E4           CLR       A
   \   00003D   35..         ADDC      A,?V3
   \   00003F   FD           MOV       R5,A
   \   000040   EE           MOV       A,R6
   \   000041   FA           MOV       R2,A
   \   000042   EF           MOV       A,R7
   \   000043   FB           MOV       R3,A
   \   000044   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2371              pTmp += Z_EXTADDR_LEN;
   2372          
   2373              *pTmp = pMsg->capabilities;
   \   000047   85..82       MOV       DPL,?V2
   \   00004A   85..83       MOV       DPH,?V3
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   12....       LCALL     ?Subroutine24 & 0xFFFF
   2374          
   2375              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2376                                                   MT_ZDO_END_DEVICE_ANNCE_IND,
   2377                                                   MT_ZDO_END_DEVICE_ANNCE_IND_LEN, pBuf);
   \                     ??CrossCallReturnLabel_36:
   \   00005A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00005A   AC..         MOV       R4,?V0
   \   00005C   AD..         MOV       R5,?V1
   \   00005E   7B0D         MOV       R3,#0xd
   \   000060   7AC1         MOV       R2,#-0x3f
   \   000062   12....       LCALL     ?Subroutine70 & 0xFFFF
   2378              osal_mem_free(pBuf);
   2379            }
   2380          }
   \                     ??CrossCallReturnLabel_128:
   \   000065   80..         SJMP      ??Subroutine126_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EA           MOV       A,R2
   \   00000A   4B           ORL       A,R3
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   7945         MOV       R1,#0x45
   \   000002   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000005                ; Setup parameters for call to function osal_mem_free
   \   000005                ; Setup parameters for call to function osal_mem_free
   \   000005   AA..         MOV       R2,?V0
   \   000007   AB..         MOV       R3,?V1
   \   000009   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00000C   22           RET
   2381          
   2382          /***************************************************************************************************
   2383           * @fn      MT_ZdoSrcRtgCB
   2384           *
   2385           * @brief   Handle Src Route from ZDO.
   2386           *
   2387           * @param   pStr  - pointer to the data structure for the src route
   2388           *
   2389           * @return  void*
   2390           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2391          void* MT_ZdoSrcRtgCB( void *pStr )
   \                     MT_ZdoSrcRtgCB:
   2392          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   2393            uint8 len, *pBuf;
   2394            zdoSrcRtg_t *pSrcRtg = pStr;
   2395          
   2396            // srcAddr (2) + relayCnt (1) + relayList( relaycnt * 2 )
   2397            len = 2 + 1 + pSrcRtg->relayCnt * sizeof(uint16);
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   C3           CLR       C
   \   000011   33           RLC       A
   \   000012   2403         ADD       A,#0x3
   \   000014   12....       LCALL     ?Subroutine71 & 0xFFFF
   2398          
   2399            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   \                     ??CrossCallReturnLabel_131:
   \   000017   605A         JZ        ??CrossCallReturnLabel_261
   2400            {
   2401              uint8 idx, *pTmp = pBuf;
   2402              uint16 *pRelay;
   2403          
   2404              // Packet payload
   2405              *pTmp++ = LO_UINT16(pSrcRtg->srcAddr);
   \   000019   12....       LCALL     ?Subroutine15 & 0xFFFF
   2406              *pTmp++ = HI_UINT16(pSrcRtg->srcAddr);
   2407              *pTmp++ = pSrcRtg->relayCnt;
   \                     ??CrossCallReturnLabel_22:
   \   00001C   85..82       MOV       DPL,?V0
   \   00001F   85..83       MOV       DPH,?V1
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   12....       LCALL     ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000027   EA           MOV       A,R2
   \   000028   2403         ADD       A,#0x3
   \   00002A   FA           MOV       R2,A
   \   00002B   E4           CLR       A
   \   00002C   3F           ADDC      A,R7
   \   00002D   FB           MOV       R3,A
   2408          
   2409              // Relay List
   2410              if( ( pRelay = pSrcRtg->pRelayList ) != NULL )
   \   00002E   85..82       MOV       DPL,?V0
   \   000031   85..83       MOV       DPH,?V1
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00003A   602C         JZ        ??MT_ZdoSrcRtgCB_0
   2411              {
   2412                for( idx = 0; idx < pSrcRtg->relayCnt; idx ++ )
   \   00003C   75..00       MOV       ?V3,#0x0
   \   00003F   8017         SJMP      ??MT_ZdoSrcRtgCB_1
   2413                {
   2414                  *pTmp++ = LO_UINT16(*pRelay);
   \                     ??MT_ZdoSrcRtgCB_2:
   \   000041   8882         MOV       DPL,R0
   \   000043   8983         MOV       DPH,R1
   \   000045   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   2415                  *pTmp++ = HI_UINT16(*pRelay);
   \                     ??CrossCallReturnLabel_265:
   \   000048   EA           MOV       A,R2
   \   000049   2402         ADD       A,#0x2
   \   00004B   FA           MOV       R2,A
   \   00004C   5001         JNC       ??MT_ZdoSrcRtgCB_3
   \   00004E   0B           INC       R3
   2416                  pRelay++;
   \                     ??MT_ZdoSrcRtgCB_3:
   \   00004F   E8           MOV       A,R0
   \   000050   2402         ADD       A,#0x2
   \   000052   F8           MOV       R0,A
   \   000053   5001         JNC       ??MT_ZdoSrcRtgCB_4
   \   000055   09           INC       R1
   2417                }
   \                     ??MT_ZdoSrcRtgCB_4:
   \   000056   05..         INC       ?V3
   \                     ??MT_ZdoSrcRtgCB_1:
   \   000058   85..82       MOV       DPL,?V0
   \   00005B   85..83       MOV       DPH,?V1
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   E0           MOVX      A,@DPTR
   \   000061   FC           MOV       R4,A
   \   000062   E5..         MOV       A,?V3
   \   000064   C3           CLR       C
   \   000065   9C           SUBB      A,R4
   \   000066   40D9         JC        ??MT_ZdoSrcRtgCB_2
   2418              }
   2419              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2420                                                   MT_ZDO_SRC_RTG_IND, len, pBuf);
   \                     ??MT_ZdoSrcRtgCB_0:
   \   000068                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000068   EE           MOV       A,R6
   \   000069   FC           MOV       R4,A
   \   00006A   EF           MOV       A,R7
   \   00006B   FD           MOV       R5,A
   \   00006C   AB..         MOV       R3,?V2
   \   00006E   7AC4         MOV       R2,#-0x3c
   \   000070   12....       LCALL     ?Subroutine68 & 0xFFFF
   2421              osal_mem_free(pBuf);
   2422            }
   2423          
   2424            return NULL;
   \                     ??CrossCallReturnLabel_261:
   \   000073   7A00         MOV       R2,#0x0
   \   000075   7B00         MOV       R3,#0x0
   \   000077   80..         SJMP      ??Subroutine126_0
   2425          }
   2426          
   2427          /***************************************************************************************************
   2428           * @fn          MT_ZdoConcentratorIndCB
   2429           *
   2430           * @brief       Handle the ZDO Concentrator Indication callback from the ZDO.
   2431           *
   2432           * @param       pStr - pointer to a parameter and a structure of parameters
   2433           *
   2434           * @return      NULL
   2435           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2436          void *MT_ZdoConcentratorIndCB(void *pStr)
   \                     MT_ZdoConcentratorIndCB:
   2437          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine12 & 0xFFFF
   2438            uint8 buf[MT_ZDO_CONCENTRATOR_IND_LEN], *pTmp = buf;
   2439            zdoConcentratorInd_t *pInd = (zdoConcentratorInd_t *)pStr;
   2440          
   2441            *pTmp++ = LO_UINT16(pInd->nwkAddr);
   2442            *pTmp++ = HI_UINT16(pInd->nwkAddr);
   \                     ??CrossCallReturnLabel_16:
   \   00000D   C0E0         PUSH      A
   \   00000F   7401         MOV       A,#0x1
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   D0E0         POP       A
   \   000016   12....       LCALL     ?Subroutine63 & 0xFFFF
   2443            pTmp = osal_memcpy(pTmp, pInd->extAddr, Z_EXTADDR_LEN);
   \                     ??CrossCallReturnLabel_115:
   \   000019   F5..         MOV       ?V0,A
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V1,A
   \   00001F   75..00       MOV       ?V2,#0x0
   \   000022   78..         MOV       R0,#?V0
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000027   7C08         MOV       R4,#0x8
   \   000029   7D00         MOV       R5,#0x0
   \   00002B   7405         MOV       A,#0x5
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   000033   12....       LCALL     ?DEALLOC_XSTACK8
   2444            *pTmp = pInd->pktCost;
   \   000036   8E82         MOV       DPL,R6
   \   000038   8F83         MOV       DPH,R7
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   12....       LCALL     ?Subroutine30 & 0xFFFF
   2445          
   2446            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2447                                              MT_ZDO_CONCENTRATOR_IND_CB, MT_ZDO_CONCENTRATOR_IND_LEN, buf);
   \                     ??CrossCallReturnLabel_45:
   \   000041                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000041   AC..         MOV       R4,?XSP + 0
   \   000043   AD..         MOV       R5,?XSP + 1
   \   000045   7B0B         MOV       R3,#0xb
   \   000047   7AC8         MOV       R2,#-0x38
   \   000049   12....       LCALL     ?Subroutine67 & 0xFFFF
   2448            return NULL;
   \                     ??CrossCallReturnLabel_121:
   \   00004C   740B         MOV       A,#0xb
   \   00004E   02....       LJMP      ?Subroutine7 & 0xFFFF
   2449          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004                REQUIRE ??Subroutine127_0
   \   000004                ; // Fall through to label ??Subroutine127_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004   8A82         MOV       DPL,R2
   \   000006   F583         MOV       DPH,A
   \   000008   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   00000B   8A82         MOV       DPL,R2
   \   00000D   8B83         MOV       DPH,R3
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine129_0
   \   000003                ; // Fall through to label ??Subroutine129_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET
   2450          
   2451          /***************************************************************************************************
   2452           * @fn          MT_ZdoLeaveInd
   2453           *
   2454           * @brief       Handle the ZDO Leave Indication callback from the ZDO.
   2455           *
   2456           * @param       vPtr - Pointer to the received Leave Indication message.
   2457           *
   2458           * @return      NULL
   2459           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2460          static void *MT_ZdoLeaveInd(void *vPtr)
   \                     MT_ZdoLeaveInd:
   2461          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine12 & 0xFFFF
   2462            NLME_LeaveInd_t *pInd = (NLME_LeaveInd_t *)vPtr;
   2463            uint8 buf[sizeof(NLME_LeaveInd_t)];
   2464          
   2465            buf[0] = LO_UINT16(pInd->srcAddr);
   2466            buf[1] = HI_UINT16(pInd->srcAddr);
   \                     ??CrossCallReturnLabel_17:
   \   00000D   C0E0         PUSH      A
   \   00000F   7401         MOV       A,#0x1
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   D0E0         POP       A
   \   000016   12....       LCALL     ?Subroutine52 & 0xFFFF
   2467            (void)osal_memcpy(buf+2, pInd->extAddr, Z_EXTADDR_LEN);
   \                     ??CrossCallReturnLabel_86:
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00001C   7C08         MOV       R4,#0x8
   \   00001E   7D00         MOV       R5,#0x0
   \   000020   7405         MOV       A,#0x5
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   000028   12....       LCALL     ?DEALLOC_XSTACK8
   2468            buf[2+Z_EXTADDR_LEN] = pInd->request;
   \   00002B   8E82         MOV       DPL,R6
   \   00002D   8F83         MOV       DPH,R7
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   C0E0         PUSH      A
   \   00003C   740A         MOV       A,#0xa
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   D0E0         POP       A
   \   000043   12....       LCALL     ?Subroutine58 & 0xFFFF
   2469            buf[3+Z_EXTADDR_LEN] = pInd->removeChildren;
   \                     ??CrossCallReturnLabel_100:
   \   000046   C0E0         PUSH      A
   \   000048   740B         MOV       A,#0xb
   \   00004A   12....       LCALL     ?XSTACK_DISP0_8
   \   00004D   D0E0         POP       A
   \   00004F   12....       LCALL     ?Subroutine59 & 0xFFFF
   2470            buf[4+Z_EXTADDR_LEN] = pInd->rejoin;
   \                     ??CrossCallReturnLabel_102:
   \   000052   C0E0         PUSH      A
   \   000054   740C         MOV       A,#0xc
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   D0E0         POP       A
   \   00005B   12....       LCALL     ?Subroutine61 & 0xFFFF
   2471          
   2472            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2473                                                 MT_ZDO_LEAVE_IND, 5+Z_EXTADDR_LEN, buf);
   \                     ??CrossCallReturnLabel_106:
   \   00005E   7B0D         MOV       R3,#0xd
   \   000060   7AC9         MOV       R2,#-0x37
   \   000062   12....       LCALL     ?Subroutine67 & 0xFFFF
   2474            return NULL;
   \                     ??CrossCallReturnLabel_122:
   \   000065   740D         MOV       A,#0xd
   \   000067   02....       LJMP      ?Subroutine7 & 0xFFFF
   2475          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000003   A3           INC       DPTR
   \   000004   A982         MOV       R1,DPL
   \   000006   AA83         MOV       R2,DPH
   \   000008   89..         MOV       ?V0,R1
   \   00000A   8A..         MOV       ?V1,R2
   \   00000C   75..00       MOV       ?V2,#0x0
   \   00000F   78..         MOV       R0,#?V0
   \   000011   22           RET
   2476          
   2477          /***************************************************************************************************
   2478           * @fn          MT_ZdoTcDeviceInd
   2479           *
   2480           * @brief       Handle the ZDO TC Device Indication callback from the ZDO.
   2481           *
   2482           * @param       params - pointer to Trust Center joining device information
   2483           *
   2484           * @return      NULL
   2485           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2486          void *MT_ZdoTcDeviceInd( void *params )
   \                     MT_ZdoTcDeviceInd:
   2487          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine12 & 0xFFFF
   2488            ZDO_TC_Device_t *pDev = (ZDO_TC_Device_t *)params;
   2489            uint8 buf[12];
   2490          
   2491            buf[0] = LO_UINT16( pDev->nwkAddr );
   2492            buf[1] = HI_UINT16( pDev->nwkAddr );
   \                     ??CrossCallReturnLabel_18:
   \   00000D   C0E0         PUSH      A
   \   00000F   7401         MOV       A,#0x1
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   D0E0         POP       A
   \   000016   12....       LCALL     ?Subroutine52 & 0xFFFF
   2493            (void)osal_memcpy( &buf[2], pDev->extAddr, Z_EXTADDR_LEN);
   \                     ??CrossCallReturnLabel_87:
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00001C   7C08         MOV       R4,#0x8
   \   00001E   7D00         MOV       R5,#0x0
   \   000020   7405         MOV       A,#0x5
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000028   12....       LCALL     ?DEALLOC_XSTACK8
   2494            buf[2+Z_EXTADDR_LEN] = LO_UINT16( pDev->parentAddr );
   \   00002B   EE           MOV       A,R6
   \   00002C   240A         ADD       A,#0xa
   \   00002E   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000031   E0           MOVX      A,@DPTR
   \   000032   C0E0         PUSH      A
   \   000034   740A         MOV       A,#0xa
   \   000036   12....       LCALL     ?XSTACK_DISP0_8
   \   000039   D0E0         POP       A
   \   00003B   12....       LCALL     ?Subroutine55 & 0xFFFF
   2495            buf[3+Z_EXTADDR_LEN] = HI_UINT16( pDev->parentAddr );
   \                     ??CrossCallReturnLabel_93:
   \   00003E   C0E0         PUSH      A
   \   000040   740B         MOV       A,#0xb
   \   000042   12....       LCALL     ?XSTACK_DISP0_8
   \   000045   D0E0         POP       A
   \   000047   12....       LCALL     ?Subroutine61 & 0xFFFF
   2496          
   2497            MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2498                                                 MT_ZDO_TC_DEVICE_IND, 12, buf );
   \                     ??CrossCallReturnLabel_107:
   \   00004A   7B0C         MOV       R3,#0xc
   \   00004C   7ACA         MOV       R2,#-0x36
   \   00004E   12....       LCALL     ?Subroutine67 & 0xFFFF
   2499          
   2500            return ( NULL );
   \                     ??CrossCallReturnLabel_123:
   \   000051   740C         MOV       A,#0xc
   \   000053   02....       LJMP      ?Subroutine7 & 0xFFFF
   2501          }
   2502          
   2503          /***************************************************************************************************
   2504           * @fn          MT_ZdoPermitJoinInd
   2505           *
   2506           * @brief       Handle the ZDO Permit Join Indication callback from the ZDO.
   2507           *
   2508           * @param       duration - permit join duration
   2509           *
   2510           * @return      NULL
   2511           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2512          void *MT_ZdoPermitJoinInd( void *duration )
   \                     MT_ZdoPermitJoinInd:
   2513          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2514            if ( ignoreIndication == FALSE )
   \   000004   90....       MOV       DPTR,#ignoreIndication
   \   000007   E0           MOVX      A,@DPTR
   \   000008   7027         JNZ       ??MT_ZdoPermitJoinInd_0
   2515            {
   2516              // The following condition was moved here from NLME_PermitJoiningSet. It was removed there to
   2517              // support calling the callback for every time a permit join command is processed, and let the
   2518              // callback decide how to act.
   2519              if ((( *(uint8*)duration == 0x00 ) && ( NLME_PermitJoining )) || (( *(uint8*)duration != 0x00 ) && ( ! NLME_PermitJoining )))
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   7006         JNZ       ??MT_ZdoPermitJoinInd_1
   \   000011   90....       MOV       DPTR,#NLME_PermitJoining
   \   000014   E0           MOVX      A,@DPTR
   \   000015   700D         JNZ       ??MT_ZdoPermitJoinInd_2
   \                     ??MT_ZdoPermitJoinInd_1:
   \   000017   8A82         MOV       DPL,R2
   \   000019   8B83         MOV       DPH,R3
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   6013         JZ        ??MT_ZdoPermitJoinInd_0
   \   00001E   90....       MOV       DPTR,#NLME_PermitJoining
   \   000021   E0           MOVX      A,@DPTR
   \   000022   700D         JNZ       ??MT_ZdoPermitJoinInd_0
   2520              {  
   2521                MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2522                                                 MT_ZDO_PERMIT_JOIN_IND, 1, (uint8 *)duration );
   \                     ??MT_ZdoPermitJoinInd_2:
   \   000024                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000024   EA           MOV       A,R2
   \   000025   FC           MOV       R4,A
   \   000026   EB           MOV       A,R3
   \   000027   FD           MOV       R5,A
   \   000028   7B01         MOV       R3,#0x1
   \   00002A   7ACB         MOV       R2,#-0x35
   \   00002C   7945         MOV       R1,#0x45
   \   00002E   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2523              }
   2524            }
   2525          
   2526            return ( NULL );
   \                     ??MT_ZdoPermitJoinInd_0:
   \   000031   7A00         MOV       R2,#0x0
   \   000033   7B00         MOV       R3,#0x0
   \   000035   02....       LJMP      ?Subroutine0 & 0xFFFF
   2527          }
   2528          #endif // MT_ZDO_CB_FUNC
   2529          
   2530          /***************************************************************************************************
   2531           * @fn      MT_ZdoSendMsgCB
   2532           *
   2533           * @brief   Proxy the ZDO_SendMsgCBs one message at a time.
   2534           *
   2535           * @param   pMsg  - Message data
   2536           *
   2537           * @return  void
   2538           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2539          void MT_ZdoSendMsgCB(zdoIncomingMsg_t *pMsg)
   \                     MT_ZdoSendMsgCB:
   2540          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2541            uint8 len = pMsg->asduLen + 9;
   \   000009   EA           MOV       A,R2
   \   00000A   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   00000D   2409         ADD       A,#0x9
   \   00000F   F5..         MOV       ?V2,A
   2542            uint8 *pBuf = (uint8 *)osal_mem_alloc(len);
   \   000011                ; Setup parameters for call to function osal_mem_alloc
   \   000011   FA           MOV       R2,A
   \   000012   12....       LCALL     ?Subroutine72 & 0xFFFF
   2543          
   2544            if (pBuf != NULL)
   \                     ??CrossCallReturnLabel_133:
   \   000015   7003         JNZ       $+5
   \   000017   02....       LJMP      ??CrossCallReturnLabel_129 & 0xFFFF
   2545            {
   2546              uint8 *pTmp = pBuf;
   2547          
   2548              // Assuming exclusive use of network short addresses.
   2549              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   00001A   EE           MOV       A,R6
   \   00001B   2402         ADD       A,#0x2
   \   00001D   F8           MOV       R0,A
   \   00001E   E4           CLR       A
   \   00001F   3F           ADDC      A,R7
   \   000020   12....       LCALL     ?Subroutine9 & 0xFFFF
   2550              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   2551              *pTmp++ = pMsg->wasBroadcast;
   \                     ??CrossCallReturnLabel_264:
   \   000023   EE           MOV       A,R6
   \   000024   240B         ADD       A,#0xb
   \   000026   F582         MOV       DPL,A
   \   000028   E4           CLR       A
   \   000029   3F           ADDC      A,R7
   \   00002A   12....       LCALL     ?Subroutine17 & 0xFFFF
   2552              *pTmp++ = LO_UINT16(pMsg->clusterID);
   \                     ??CrossCallReturnLabel_259:
   \   00002D   EE           MOV       A,R6
   \   00002E   240C         ADD       A,#0xc
   \   000030   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000033   12....       LCALL     ??Subroutine121_0 & 0xFFFF
   2553              *pTmp++ = HI_UINT16(pMsg->clusterID);
   \                     ??CrossCallReturnLabel_249:
   \   000036   8882         MOV       DPL,R0
   \   000038   8983         MOV       DPH,R1
   \   00003A   12....       LCALL     ?Subroutine35 & 0xFFFF
   2554              *pTmp++ = pMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_54:
   \   00003D   EE           MOV       A,R6
   \   00003E   240E         ADD       A,#0xe
   \   000040   F582         MOV       DPL,A
   \   000042   E4           CLR       A
   \   000043   3F           ADDC      A,R7
   \   000044   F583         MOV       DPH,A
   \   000046   12....       LCALL     ?Subroutine34 & 0xFFFF
   2555              *pTmp++ = pMsg->TransSeq;
   \                     ??CrossCallReturnLabel_52:
   \   000049   EE           MOV       A,R6
   \   00004A   240F         ADD       A,#0xf
   \   00004C   F582         MOV       DPL,A
   \   00004E   E4           CLR       A
   \   00004F   3F           ADDC      A,R7
   \   000050   F583         MOV       DPH,A
   \   000052   12....       LCALL     ?Subroutine31 & 0xFFFF
   2556              // Skipping asduLen since it can be deduced from the RPC packet length.
   2557              *pTmp++ = LO_UINT16(pMsg->macDestAddr);
   \                     ??CrossCallReturnLabel_48:
   \   000055   EE           MOV       A,R6
   \   000056   2411         ADD       A,#0x11
   \   000058   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   00005B   12....       LCALL     ?Subroutine29 & 0xFFFF
   2558              *pTmp++ = HI_UINT16(pMsg->macDestAddr);
   \                     ??CrossCallReturnLabel_42:
   \   00005E   8882         MOV       DPL,R0
   \   000060   8983         MOV       DPH,R1
   \   000062   12....       LCALL     ?Subroutine22 & 0xFFFF
   2559              (void)osal_memcpy(pTmp, pMsg->asdu, pMsg->asduLen);
   \                     ??CrossCallReturnLabel_32:
   \   000065                ; Setup parameters for call to function osal_memcpy
   \   000065   EE           MOV       A,R6
   \   000066   2413         ADD       A,#0x13
   \   000068   F582         MOV       DPL,A
   \   00006A   E4           CLR       A
   \   00006B   3F           ADDC      A,R7
   \   00006C   F583         MOV       DPH,A
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   F5..         MOV       ?V4,A
   \   000071   A3           INC       DPTR
   \   000072   E0           MOVX      A,@DPTR
   \   000073   F5..         MOV       ?V5,A
   \   000075   75..00       MOV       ?V6,#0x0
   \   000078   78..         MOV       R0,#?V4
   \   00007A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00007D   EE           MOV       A,R6
   \   00007E   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000081   FC           MOV       R4,A
   \   000082   7D00         MOV       R5,#0x0
   \   000084   EA           MOV       A,R2
   \   000085   2409         ADD       A,#0x9
   \   000087   FA           MOV       R2,A
   \   000088   E4           CLR       A
   \   000089   35..         ADDC      A,?V1
   \   00008B   FB           MOV       R3,A
   \   00008C   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   00008F   12....       LCALL     ?DEALLOC_XSTACK8
   2560          
   2561              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2562                                                   MT_ZDO_MSG_CB_INCOMING, len, pBuf);
   \   000092                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000092   AC..         MOV       R4,?V0
   \   000094   AD..         MOV       R5,?V1
   \   000096   AB..         MOV       R3,?V2
   \   000098   7AFF         MOV       R2,#-0x1
   \   00009A   12....       LCALL     ?Subroutine70 & 0xFFFF
   2563          
   2564              osal_mem_free(pBuf);
   2565            }
   2566          }
   \                     ??CrossCallReturnLabel_129:
   \   00009D   7F07         MOV       R7,#0x7
   \   00009F   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   2410         ADD       A,#0x10
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F583         MOV       DPH,A
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET
   2567          
   2568          
   2569          #if defined ( MT_ZDO_EXTENSIONS )
   2570          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2571          /***************************************************************************************************
   2572           * @fn          MT_ZdoSecUpdateNwkKey
   2573           *
   2574           * @brief       Handle the ZDO Security Update Network Key extension message
   2575           *
   2576           * @param       pBuf - Pointer to the received message data.
   2577           *
   2578           * @return      NULL
   2579           ***************************************************************************************************/
   2580          static void MT_ZdoSecUpdateNwkKey( uint8 *pBuf )
   2581          {
   2582            uint16 dstAddr;
   2583            uint8 keySeqNum;
   2584            uint8 status;
   2585          
   2586            pBuf += MT_RPC_FRAME_HDR_SZ;
   2587          
   2588            dstAddr = osal_build_uint16( pBuf );
   2589            pBuf += 2;
   2590            keySeqNum = *pBuf++;
   2591          
   2592            status = ZDSecMgrUpdateNwkKey( pBuf, keySeqNum, dstAddr );
   2593          
   2594            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2595                                                 MT_ZDO_EXT_UPDATE_NWK_KEY, 1, &status );
   2596          }
   2597          
   2598          /***************************************************************************************************
   2599           * @fn          MT_ZdoSecSwitchNwkKey
   2600           *
   2601           * @brief       Handle the ZDO Security Switch Network Key extension message
   2602           *
   2603           * @param       pBuf - Pointer to the received message data.
   2604           *
   2605           * @return      NULL
   2606           ***************************************************************************************************/
   2607          static void MT_ZdoSecSwitchNwkKey( uint8 *pBuf )
   2608          {
   2609            uint16 dstAddr;
   2610            uint8 keySeqNum;
   2611            uint8 status;
   2612          
   2613            pBuf += MT_RPC_FRAME_HDR_SZ;
   2614          
   2615            dstAddr = osal_build_uint16( pBuf );
   2616            pBuf += 2;
   2617            keySeqNum = *pBuf++;
   2618          
   2619            status = ZDSecMgrSwitchNwkKey( keySeqNum, dstAddr );
   2620          
   2621            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2622                                                 MT_ZDO_EXT_SWITCH_NWK_KEY, 1, &status );
   2623          }
   2624          #endif // ZG_BUILD_COORDINATOR_TYPE
   2625          
   2626          /***************************************************************************************************
   2627           * @fn          MT_ZdoSecAddLinkKey
   2628           *
   2629           * @brief       Handle the ZDO Security Add Link Key extension message
   2630           *
   2631           * @param       pBuf - Pointer to the received message data.
   2632           *
   2633           * @return      NULL
   2634           ***************************************************************************************************/
   2635          static void MT_ZdoSecAddLinkKey( uint8 *pBuf )
   2636          {
   2637            uint16 shortAddr;
   2638            uint8 *pExtAddr;
   2639            uint8 status;
   2640          
   2641            pBuf += MT_RPC_FRAME_HDR_SZ;
   2642          
   2643            shortAddr = osal_build_uint16( pBuf );
   2644            pBuf += 2;
   2645            pExtAddr = pBuf;
   2646            pBuf += Z_EXTADDR_LEN;
   2647          
   2648            status = ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pBuf );
   2649          
   2650            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2651                                                 MT_ZDO_SEC_ADD_LINK_KEY, 1, &status );
   2652          }
   2653          
   2654          /***************************************************************************************************
   2655           * @fn          MT_ZdoSecEntryLookupExt
   2656           *
   2657           * @brief       Handle the ZDO Security Entry Lookup Extended extension message
   2658           *
   2659           * @param       pBuf - Pointer to the received message data.
   2660           *
   2661           * @return      NULL
   2662           ***************************************************************************************************/
   2663          static void MT_ZdoSecEntryLookupExt( uint8 *pBuf )
   2664          {
   2665            ZDSecMgrEntry_t *pEntry = NULL;
   2666            uint8 buf[6] = {0};
   2667          
   2668            pBuf += MT_RPC_FRAME_HDR_SZ;
   2669          
   2670            // lookup entry index for specified EXT address
   2671            buf[0] = ZDSecMgrEntryLookupExt( pBuf, &pEntry );
   2672            if ( pEntry )
   2673            {
   2674              buf[1] = LO_UINT16( pEntry->ami );
   2675              buf[2] = HI_UINT16( pEntry->ami );
   2676              buf[3] = LO_UINT16( pEntry->keyNvId );
   2677              buf[4] = HI_UINT16( pEntry->keyNvId );
   2678              buf[5] = (uint8)pEntry->authenticateOption;
   2679            }
   2680          
   2681            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2682                                                 MT_ZDO_SEC_ENTRY_LOOKUP_EXT, 6, buf );
   2683          }
   2684          
   2685          /***************************************************************************************************
   2686           * @fn          MT_ZdoSecDeviceRemove
   2687           *
   2688           * @brief       Handle the ZDO Security Remove Device extension message
   2689           *
   2690           * @param       pBuf - Pointer to the received message data.
   2691           *
   2692           * @return      NULL
   2693           ***************************************************************************************************/
   2694          static void MT_ZdoSecDeviceRemove( uint8 *pBuf )
   2695          {
   2696            ZStatus_t status;
   2697          
   2698            pBuf += MT_RPC_FRAME_HDR_SZ;
   2699          
   2700            // lookup entry index for specified EXT address
   2701            status = ZDSecMgrDeviceRemoveByExtAddr( pBuf );
   2702          
   2703            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2704                                                 MT_ZDO_SEC_DEVICE_REMOVE, 1, &status );
   2705          }
   2706          
   2707          /***************************************************************************************************
   2708           * @fn          MT_ZdoExtRouteDisc
   2709           *
   2710           * @brief       Handle the ZDO Route Discovery extension message
   2711           *
   2712           * @param       pBuf - Pointer to the received message data.
   2713           *
   2714           * @return      NULL
   2715           ***************************************************************************************************/
   2716          static void MT_ZdoExtRouteDisc( uint8 *pBuf )
   2717          {
   2718            ZStatus_t status;
   2719            uint16 dstAddr;
   2720          
   2721            pBuf += MT_RPC_FRAME_HDR_SZ;
   2722          
   2723            dstAddr = osal_build_uint16( pBuf );
   2724          
   2725            status = NLME_RouteDiscoveryRequest( dstAddr, pBuf[2], pBuf[3] );
   2726          
   2727          
   2728            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2729                                                 MT_ZDO_EXT_ROUTE_DISC, 1, &status );
   2730          }
   2731          
   2732          /***************************************************************************************************
   2733           * @fn          MT_ZdoExtRouteCheck
   2734           *
   2735           * @brief       Handle the ZDO Route Check extension message
   2736           *
   2737           * @param       pBuf - Pointer to the received message data.
   2738           *
   2739           * @return      NULL
   2740           ***************************************************************************************************/
   2741          static void MT_ZdoExtRouteCheck( uint8 *pBuf )
   2742          {
   2743            ZStatus_t status;
   2744            uint16 dstAddr;
   2745          
   2746            pBuf += MT_RPC_FRAME_HDR_SZ;
   2747          
   2748            dstAddr = osal_build_uint16( pBuf );
   2749          
   2750            status = RTG_CheckRtStatus( dstAddr, pBuf[2], pBuf[3] );
   2751          
   2752            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2753                                                 MT_ZDO_EXT_ROUTE_CHECK, 1, &status );
   2754          }
   2755          
   2756          /***************************************************************************************************
   2757           * @fn          MT_ZdoExtRemoveGroup
   2758           *
   2759           * @brief       Handle the ZDO extension Remove Group message
   2760           *
   2761           * @param       pBuf - Pointer to the received message data.
   2762           *
   2763           * @return      NULL
   2764           ***************************************************************************************************/
   2765          static void MT_ZdoExtRemoveGroup( uint8 *pBuf )
   2766          {
   2767            ZStatus_t status;
   2768            uint8 endpoint;
   2769            uint16 groupID;
   2770          
   2771            pBuf += MT_RPC_FRAME_HDR_SZ;
   2772          
   2773            endpoint = *pBuf++;
   2774            groupID = osal_build_uint16( pBuf );
   2775          
   2776            if ( aps_RemoveGroup( endpoint, groupID ) )
   2777            {
   2778              status = ZSuccess;
   2779            }
   2780            else
   2781            {
   2782              status = ZFailure;
   2783            }
   2784          
   2785            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2786                                                 MT_ZDO_EXT_REMOVE_GROUP, 1, &status );
   2787          }
   2788          
   2789          /***************************************************************************************************
   2790           * @fn          MT_ZdoExtRemoveAllGroup
   2791           *
   2792           * @brief       Handle the ZDO extension Remove All Groups message
   2793           *
   2794           * @param       pBuf - Pointer to the received message data.
   2795           *
   2796           * @return      NULL
   2797           ***************************************************************************************************/
   2798          static void MT_ZdoExtRemoveAllGroup( uint8 *pBuf )
   2799          {
   2800            ZStatus_t status = ZSuccess;
   2801          
   2802            pBuf += MT_RPC_FRAME_HDR_SZ;
   2803          
   2804            aps_RemoveAllGroup( *pBuf );
   2805          
   2806            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2807                                                 MT_ZDO_EXT_REMOVE_GROUP, 1, &status );
   2808          }
   2809          
   2810          /***************************************************************************************************
   2811           * @fn          MT_ZdoExtFindAllGroupsEndpoint
   2812           *
   2813           * @brief       Handle the ZDO extension Find All Groups for Endpoint message
   2814           *
   2815           * @param       pBuf - Pointer to the received message data.
   2816           *
   2817           * @return      NULL
   2818           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2819          static void MT_ZdoExtFindAllGroupsEndpoint( uint8 *pBuf )
   \                     MT_ZdoExtFindAllGroupsEndpoint:
   2820          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 33
   \   000005   74DF         MOV       A,#-0x21
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   2821            uint16 groupList[ APS_MAX_GROUPS ];
   2822            uint8 groups;
   2823            uint8 msgLen;
   2824            uint8 *pMsg;
   2825          
   2826            pBuf += MT_RPC_FRAME_HDR_SZ;
   2827          
   2828            groups = aps_FindAllGroupsForEndpoint( *pBuf, groupList );
   \   00000E                ; Setup parameters for call to function aps_FindAllGroupsForEndpoint
   \   00000E   7401         MOV       A,#0x1
   \   000010   12....       LCALL     ?XSTACK_DISP101_8
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F9           MOV       R1,A
   \   000018   12....       LCALL     `??aps_FindAllGroupsForEndpoint::?relay`; Banked call to: aps_FindAllGroupsForEndpoint
   \   00001B   E9           MOV       A,R1
   \   00001C   85..82       MOV       DPL,?XSP + 0
   \   00001F   85..83       MOV       DPH,?XSP + 1
   \   000022   F0           MOVX      @DPTR,A
   2829          
   2830            msgLen = 1 + (2 * groups);
   \   000023   C3           CLR       C
   \   000024   33           RLC       A
   \   000025   04           INC       A
   \   000026   F5..         MOV       ?V0,A
   2831            pMsg = osal_mem_alloc( msgLen );
   \   000028                ; Setup parameters for call to function osal_mem_alloc
   \   000028   FA           MOV       R2,A
   \   000029   7B00         MOV       R3,#0x0
   \   00002B   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002E   8A..         MOV       ?V2,R2
   \   000030   8B..         MOV       ?V3,R3
   \   000032   AE..         MOV       R6,?V2
   \   000034   AF..         MOV       R7,?V3
   2832            if ( pMsg )
   \   000036   EA           MOV       A,R2
   \   000037   4F           ORL       A,R7
   \   000038   85..82       MOV       DPL,?XSP + 0
   \   00003B   85..83       MOV       DPH,?XSP + 1
   \   00003E   6056         JZ        ??MT_ZdoExtFindAllGroupsEndpoint_0
   2833            {
   2834              uint8 x;
   2835              uint8 *pBuf = pMsg;
   2836          
   2837              *pBuf++ = groups;
   \   000040   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000043   A3           INC       DPTR
   \   000044   A882         MOV       R0,DPL
   \   000046   A983         MOV       R1,DPH
   2838              for ( x = 0; x < groups; x++ )
   \   000048   7C00         MOV       R4,#0x0
   \   00004A   802E         SJMP      ??MT_ZdoExtFindAllGroupsEndpoint_1
   2839              {
   2840                *pBuf++ = LO_UINT16( groupList[x] );
   \                     ??MT_ZdoExtFindAllGroupsEndpoint_2:
   \   00004C   EC           MOV       A,R4
   \   00004D   25E0         ADD       A,0xE0 /* A   */
   \   00004F   FA           MOV       R2,A
   \   000050   E4           CLR       A
   \   000051   33           RLC       A
   \   000052   FB           MOV       R3,A
   \   000053   7401         MOV       A,#0x1
   \   000055   12....       LCALL     ?XSTACK_DISP0_8
   \   000058   E582         MOV       A,DPL
   \   00005A   2A           ADD       A,R2
   \   00005B   FA           MOV       R2,A
   \   00005C   E583         MOV       A,DPH
   \   00005E   3B           ADDC      A,R3
   \   00005F   FB           MOV       R3,A
   \   000060   8A82         MOV       DPL,R2
   \   000062   F583         MOV       DPH,A
   \   000064   E0           MOVX      A,@DPTR
   \   000065   8882         MOV       DPL,R0
   \   000067   8983         MOV       DPH,R1
   \   000069   12....       LCALL     ?Subroutine57 & 0xFFFF
   2841                *pBuf++ = HI_UINT16( groupList[x] );
   2842              }
   \                     ??CrossCallReturnLabel_96:
   \   00006C   8882         MOV       DPL,R0
   \   00006E   8983         MOV       DPH,R1
   \   000070   A3           INC       DPTR
   \   000071   F0           MOVX      @DPTR,A
   \   000072   E8           MOV       A,R0
   \   000073   2402         ADD       A,#0x2
   \   000075   F8           MOV       R0,A
   \   000076   5001         JNC       ??MT_ZdoExtFindAllGroupsEndpoint_3
   \   000078   09           INC       R1
   \                     ??MT_ZdoExtFindAllGroupsEndpoint_3:
   \   000079   0C           INC       R4
   \                     ??MT_ZdoExtFindAllGroupsEndpoint_1:
   \   00007A   85..82       MOV       DPL,?XSP + 0
   \   00007D   85..83       MOV       DPH,?XSP + 1
   \   000080   E0           MOVX      A,@DPTR
   \   000081   FA           MOV       R2,A
   \   000082   EC           MOV       A,R4
   \   000083   C3           CLR       C
   \   000084   9A           SUBB      A,R2
   \   000085   40C5         JC        ??MT_ZdoExtFindAllGroupsEndpoint_2
   2843          
   2844              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2845                                                 MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT, msgLen, pMsg );
   \   000087                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000087   EE           MOV       A,R6
   \   000088   FC           MOV       R4,A
   \   000089   EF           MOV       A,R7
   \   00008A   FD           MOV       R5,A
   \   00008B   AB..         MOV       R3,?V0
   \   00008D   7A49         MOV       R2,#0x49
   \   00008F   7965         MOV       R1,#0x65
   \   000091   12....       LCALL     ??Subroutine123_0 & 0xFFFF
   2846              osal_mem_free( pMsg );
   2847            }
   \                     ??CrossCallReturnLabel_262:
   \   000094   800B         SJMP      ??MT_ZdoExtFindAllGroupsEndpoint_4
   2848            else
   2849            {
   2850              groups = 0;
   \                     ??MT_ZdoExtFindAllGroupsEndpoint_0:
   \   000096   E4           CLR       A
   \   000097   12....       LCALL     ??Subroutine128_0 & 0xFFFF
   2851              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2852                                                 MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT, 1, &groups );
   2853            }
   \                     ??CrossCallReturnLabel_299:
   \   00009A   7A49         MOV       R2,#0x49
   \   00009C   7965         MOV       R1,#0x65
   \   00009E   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2854          }
   \                     ??MT_ZdoExtFindAllGroupsEndpoint_4:
   \   0000A1   7421         MOV       A,#0x21
   \   0000A3   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine128_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001   AC..         MOV       R4,?XSP + 0
   \   000003   AD..         MOV       R5,?XSP + 1
   \   000005   7B01         MOV       R3,#0x1
   \   000007   22           RET
   2855          
   2856          /***************************************************************************************************
   2857           * @fn          MT_ZdoExtFindGroup
   2858           *
   2859           * @brief       Handle the ZDO extension Find Group message
   2860           *
   2861           * @param       pBuf - Pointer to the received message data.
   2862           *
   2863           * @return      NULL
   2864           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2865          static void MT_ZdoExtFindGroup( uint8 *pBuf )
   \                     MT_ZdoExtFindGroup:
   2866          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV       A,#-0x13
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2867            uint8 endpoint;
   2868            uint16 groupID;
   2869            aps_Group_t *pGroup;
   2870            uint8 buf[1+2+APS_GROUP_NAME_LEN] = {0};
   \   00000A   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   7413         MOV       A,#0x13
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   2871          
   2872            pBuf += MT_RPC_FRAME_HDR_SZ;
   2873          
   2874            endpoint = *pBuf++;
   \   000016   8A82         MOV       DPL,R2
   \   000018   8B83         MOV       DPH,R3
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   FE           MOV       R6,A
   2875            groupID = osal_build_uint16( pBuf );
   \   00001F                ; Setup parameters for call to function osal_build_uint16
   \   00001F   EA           MOV       A,R2
   \   000020   2404         ADD       A,#0x4
   \   000022   FA           MOV       R2,A
   \   000023   5001         JNC       ??MT_ZdoExtFindGroup_0
   \   000025   0B           INC       R3
   \                     ??MT_ZdoExtFindGroup_0:
   \   000026   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   2876          
   2877            pGroup = aps_FindGroup( endpoint, groupID );
   \   000029                ; Setup parameters for call to function aps_FindGroup
   \   000029   EE           MOV       A,R6
   \   00002A   F9           MOV       R1,A
   \   00002B   12....       LCALL     `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   2878            if ( pGroup  )
   \   00002E   EA           MOV       A,R2
   \   00002F   4B           ORL       A,R3
   \   000030   85..82       MOV       DPL,?XSP + 0
   \   000033   85..83       MOV       DPH,?XSP + 1
   \   000036   6047         JZ        ??MT_ZdoExtFindGroup_1
   2879            {
   2880              buf[0] = ZSuccess;
   \   000038   12....       LCALL     ?Subroutine99 & 0xFFFF
   2881              buf[1] = LO_UINT16( pGroup->ID );
   2882              buf[2] = HI_UINT16( pGroup->ID );
   2883              buf[3] = pGroup->name[0];
   2884              osal_memcpy( &buf[4], &pGroup->name[1], buf[3] );
   2885            }
   \                     ??CrossCallReturnLabel_210:
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   C0E0         PUSH      A
   \   00003E   7401         MOV       A,#0x1
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   D0E0         POP       A
   \   000045   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000048   C0E0         PUSH      A
   \   00004A   7402         MOV       A,#0x2
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   D0E0         POP       A
   \   000051   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000054   F9           MOV       R1,A
   \   000055   7403         MOV       A,#0x3
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   E9           MOV       A,R1
   \   00005B   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   00005E   AC82         MOV       R4,DPL
   \   000060   AD83         MOV       R5,DPH
   \   000062   8C..         MOV       ?V0,R4
   \   000064   8D..         MOV       ?V1,R5
   \   000066   75..00       MOV       ?V2,#0x0
   \   000069   78..         MOV       R0,#?V0
   \   00006B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00006E   E9           MOV       A,R1
   \   00006F   FC           MOV       R4,A
   \   000070   7D00         MOV       R5,#0x0
   \   000072   7407         MOV       A,#0x7
   \   000074   12....       LCALL     ?XSTACK_DISP0_8
   \   000077   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   00007A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007D   8003         SJMP      ??MT_ZdoExtFindGroup_2
   2886            else
   2887            {
   2888              buf[0] = ZFailure;
   \                     ??MT_ZdoExtFindGroup_1:
   \   00007F   7401         MOV       A,#0x1
   \   000081   F0           MOVX      @DPTR,A
   2889            }
   2890          
   2891            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2892                                MT_ZDO_EXT_FIND_GROUP, (1+2+APS_GROUP_NAME_LEN), buf );
   \                     ??MT_ZdoExtFindGroup_2:
   \   000082                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000082   AC..         MOV       R4,?XSP + 0
   \   000084   AD..         MOV       R5,?XSP + 1
   \   000086   7B13         MOV       R3,#0x13
   \   000088   7A4A         MOV       R2,#0x4a
   \   00008A   7965         MOV       R1,#0x65
   \   00008C   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2893          }
   \   00008F   7413         MOV       A,#0x13
   \   000091                REQUIRE ?Subroutine7
   \   000091                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   12....       LCALL     ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET
   2894          
   2895          /***************************************************************************************************
   2896           * @fn          MT_ZdoExtAddGroup
   2897           *
   2898           * @brief       Handle the ZDO extension Add Group message
   2899           *
   2900           * @param       pBuf - Pointer to the received message data.
   2901           *
   2902           * @return      NULL
   2903           ***************************************************************************************************/
   2904          static void MT_ZdoExtAddGroup( uint8 *pBuf )
   2905          {
   2906            ZStatus_t status = ZSuccess;
   2907            aps_Group_t group = {0};
   2908            uint8 endpoint;
   2909          
   2910            pBuf += MT_RPC_FRAME_HDR_SZ;
   2911          
   2912            endpoint = *pBuf++;
   2913            group.ID = osal_build_uint16( pBuf );
   2914            group.name[0] = pBuf[2];
   2915            if ( group.name[0] > (APS_GROUP_NAME_LEN-1) )
   2916            {
   2917              group.name[0] = (APS_GROUP_NAME_LEN-1);
   2918            }
   2919          
   2920            if (group.name[0] > 0 )
   2921            {
   2922              osal_memcpy( &group.name[1], &pBuf[3], group.name[0] );
   2923            }
   2924          
   2925            status = aps_AddGroup( endpoint, &group );
   2926          
   2927            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2928                                                 MT_ZDO_EXT_ADD_GROUP, 1, &status );
   2929          }
   2930          
   2931          /***************************************************************************************************
   2932           * @fn          MT_ZdoExtCountAllGroups
   2933           *
   2934           * @brief       Handle the ZDO extension Count All Groups message
   2935           *
   2936           * @param       pBuf - Pointer to the received message data.
   2937           *
   2938           * @return      NULL
   2939           ***************************************************************************************************/
   2940          static void MT_ZdoExtCountAllGroups( uint8 *pBuf )
   2941          {
   2942            ZStatus_t status = 0;
   2943          
   2944            pBuf += MT_RPC_FRAME_HDR_SZ;
   2945          
   2946            status = (ZStatus_t)aps_CountAllGroups();
   2947          
   2948            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2949                                                 MT_ZDO_EXT_COUNT_ALL_GROUPS, 1, &status );
   2950          }
   2951          
   2952          
   2953          /***************************************************************************************************
   2954           * @fn          MT_ZdoExtRxIdle
   2955           *
   2956           * @brief       Handle the ZDO extension Get/Set RxOnIdle to ZMac message
   2957           *
   2958           * @param       pBuf - Pointer to the received message data.
   2959           *
   2960           * @return      NULL
   2961           ***************************************************************************************************/
   2962          static void MT_ZdoExtRxIdle( uint8 *pBuf )
   2963          {
   2964            uint8 setFlag;
   2965            uint8 setValue;
   2966          
   2967            pBuf += MT_RPC_FRAME_HDR_SZ;
   2968          
   2969            setFlag = *pBuf++;
   2970            setValue = *pBuf++;
   2971          
   2972            if ( setFlag )
   2973            {
   2974              ZMacSetReq( ZMacRxOnIdle, &setValue );
   2975            }
   2976            else
   2977            {
   2978              ZMacGetReq( ZMacRxOnIdle, &setValue );
   2979            }
   2980          
   2981            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2982                                                 MT_ZDO_EXT_RX_IDLE, 1, &setValue );
   2983          }
   2984          
   2985          /***************************************************************************************************
   2986           * @fn          MT_ZdoExtNwkInfo
   2987           *
   2988           * @brief       Handle the ZDO extension Network Info Request message
   2989           *
   2990           * @param       pBuf - Pointer to the received message data.
   2991           *
   2992           * @return      NULL
   2993           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2994          static void MT_ZdoExtNwkInfo( uint8 *pBuf )
   \                     MT_ZdoExtNwkInfo:
   2995          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV       A,#-0x18
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2996            uint8 buf[24];
   2997            uint8 *pMsg;
   2998          
   2999            pMsg = buf;
   3000          
   3001            *pMsg++ = LO_UINT16( _NIB.nwkDevAddress );
   \   00000A   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   00000D   E8           MOV       A,R0
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   F0           MOVX      @DPTR,A
   3002            *pMsg++ = HI_UINT16( _NIB.nwkDevAddress );
   \   000015   7401         MOV       A,#0x1
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   E9           MOV       A,R1
   \   00001B   F0           MOVX      @DPTR,A
   3003          
   3004            *pMsg++ = devState;
   \   00001C   90....       MOV       DPTR,#devState
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   C0E0         PUSH      A
   \   000022   7402         MOV       A,#0x2
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   D0E0         POP       A
   \   000029   F0           MOVX      @DPTR,A
   3005            *pMsg++ = LO_UINT16( _NIB.nwkPanId );
   \   00002A   90....       MOV       DPTR,#_NIB + 33
   \   00002D   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000030   7403         MOV       A,#0x3
   \   000032   12....       LCALL     ?XSTACK_DISP0_8
   \   000035   E8           MOV       A,R0
   \   000036   F0           MOVX      @DPTR,A
   3006            *pMsg++ = HI_UINT16( _NIB.nwkPanId );
   \   000037   7404         MOV       A,#0x4
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   E9           MOV       A,R1
   \   00003D   F0           MOVX      @DPTR,A
   3007            *pMsg++ = LO_UINT16( _NIB.nwkCoordAddress );
   \   00003E   90....       MOV       DPTR,#_NIB + 23
   \   000041   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000044   7405         MOV       A,#0x5
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   E8           MOV       A,R0
   \   00004A   F0           MOVX      @DPTR,A
   3008            *pMsg++ = HI_UINT16( _NIB.nwkCoordAddress );
   \   00004B   7406         MOV       A,#0x6
   \   00004D   12....       LCALL     ?XSTACK_DISP0_8
   \   000050   E9           MOV       A,R1
   \   000051   F0           MOVX      @DPTR,A
   3009            osal_memcpy( pMsg, _NIB.extendedPANID, 8 );
   \   000052                ; Setup parameters for call to function osal_memcpy
   \   000052   75....       MOV       ?V0,#(_NIB + 53) & 0xff
   \   000055   75....       MOV       ?V1,#((_NIB + 53) >> 8) & 0xff
   \   000058   75..00       MOV       ?V2,#0x0
   \   00005B   78..         MOV       R0,#?V0
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000060   7C08         MOV       R4,#0x8
   \   000062   7D00         MOV       R5,#0x0
   \   000064   740A         MOV       A,#0xa
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   00006C   12....       LCALL     ?DEALLOC_XSTACK8
   3010            pMsg += 8;
   3011            osal_memcpy( pMsg, _NIB.nwkCoordExtAddress, 8 );
   \   00006F                ; Setup parameters for call to function osal_memcpy
   \   00006F   75....       MOV       ?V0,#(_NIB + 25) & 0xff
   \   000072   75....       MOV       ?V1,#((_NIB + 25) >> 8) & 0xff
   \   000075   78..         MOV       R0,#?V0
   \   000077   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00007A   7C08         MOV       R4,#0x8
   \   00007C   7D00         MOV       R5,#0x0
   \   00007E   7412         MOV       A,#0x12
   \   000080   12....       LCALL     ?XSTACK_DISP0_8
   \   000083   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000086   12....       LCALL     ?DEALLOC_XSTACK8
   3012            pMsg += 8;
   3013            *pMsg++ = _NIB.nwkLogicalChannel;
   \   000089   90....       MOV       DPTR,#_NIB + 22
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   C0E0         PUSH      A
   \   00008F   7417         MOV       A,#0x17
   \   000091   12....       LCALL     ?XSTACK_DISP0_8
   \   000094   D0E0         POP       A
   \   000096   12....       LCALL     ?Subroutine61 & 0xFFFF
   3014          
   3015            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   3016                                                 MT_ZDO_EXT_NWK_INFO, 24, buf );
   \                     ??CrossCallReturnLabel_108:
   \   000099   7B18         MOV       R3,#0x18
   \   00009B   7A50         MOV       R2,#0x50
   \   00009D   7965         MOV       R1,#0x65
   \   00009F   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   3017          }
   \   0000A2   7418         MOV       A,#0x18
   \   0000A4   02....       LJMP      ?Subroutine7 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E4           CLR       A
   \   000007   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000003   F5..         MOV       ?V0,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003   E5..         MOV       A,?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   35..         ADDC      A,?V1
   \   000007   12....       LCALL     ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   00000A   AC..         MOV       R4,?V0
   \   00000C   AD..         MOV       R5,?V1
   \   00000E                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   00000E                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   00000E                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   00000E                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   00000E                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   00000E   8E..         MOV       ?V0,R6
   \   000010   78..         MOV       R0,#?V0
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function osal_build_uint16
   \   000005                ; Setup parameters for call to function osal_build_uint16
   \   000005                ; Setup parameters for call to function osal_build_uint16
   \   000005                ; Setup parameters for call to function osal_build_uint16
   \   000005                ; Setup parameters for call to function osal_build_uint16
   \   000005   E5..         MOV       A,?V0
   \   000007   2402         ADD       A,#0x2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003   0A           INC       R2
   \   000004   0A           INC       R2
   \   000005   0A           INC       R2
   \   000006   FB           MOV       R3,A
   \   000007   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FF           MOV       R7,A
   \   000008   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   EA           MOV       A,R2
   \   000001   2403         ADD       A,#0x3
   \   000003   F5..         MOV       ?V0,A
   \   000005   E4           CLR       A
   \   000006   3B           ADDC      A,R3
   \   000007   F5..         MOV       ?V1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003   0A           INC       R2
   \   000004   0A           INC       R2
   \   000005   0A           INC       R2
   \   000006   FB           MOV       R3,A
   \   000007   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000003                ; Setup parameters for call to function NLME_RouteDiscoveryRequest
   \   000003                ; Setup parameters for call to function RTG_CheckRtStatus
   \   000003                REQUIRE ??Subroutine106_0
   \   000003                ; // Fall through to label ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F9           MOV       R1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FC           MOV       R4,A
   \   000005   85..82       MOV       DPL,?V0
   \   000008   85..83       MOV       DPH,?V1
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003   7904         MOV       R1,#0x4
   \   000005   0A           INC       R2
   \   000006   0A           INC       R2
   \   000007   0A           INC       R2
   \   000008   FB           MOV       R3,A
   \   000009   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000003   740A         MOV       A,#0xa
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   EA           MOV       A,R2
   \   000001   2420         ADD       A,#0x20
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   35..         ADDC      A,?V1
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   E9           MOV       A,R1
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007                REQUIRE ??Subroutine128_0
   \   000007                ; // Fall through to label ??Subroutine128_0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, `:
   \   000000   0000         DW 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   3018          
   3019          /***************************************************************************************************
   3020           * @fn          MT_ZdoExtSecApsRemoveReq
   3021           *
   3022           * @brief       Handle the ZDO extension Security Manager APS Remove Request message
   3023           *
   3024           * @param       pBuf - Pointer to the received message data.
   3025           *
   3026           * @return      NULL
   3027           ***************************************************************************************************/
   3028          static void MT_ZdoExtSecApsRemoveReq( uint8 *pBuf )
   3029          {
   3030            ZStatus_t status = 0;
   3031            uint16 parentAddr;
   3032            uint16 nwkAddr;
   3033          
   3034            pBuf += MT_RPC_FRAME_HDR_SZ;
   3035          
   3036            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   3037            {
   3038              parentAddr = osal_build_uint16( pBuf );
   3039              pBuf += 2;
   3040          
   3041              nwkAddr = osal_build_uint16( pBuf );
   3042              pBuf += 2;
   3043          
   3044              status = ZDSecMgrAPSRemove( nwkAddr, pBuf, parentAddr );
   3045            }
   3046            else
   3047            {
   3048              status = ZUnsupportedMode;
   3049            }
   3050          
   3051            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   3052                                                 MT_ZDO_EXT_SEC_APS_REMOVE_REQ, 1, &status );
   3053          }
   3054          
   3055          /***************************************************************************************************
   3056           * @fn          MT_ZdoExtSetParams
   3057           *
   3058           * @brief       Set Parameters not settable through NV.
   3059           *
   3060           * @param       pBuf - Pointer to the received message data.
   3061           *
   3062           * @return      NULL
   3063           ***************************************************************************************************/
   3064          static void MT_ZdoExtSetParams( uint8 *pBuf )
   3065          {
   3066            ZStatus_t status = ZSuccess;
   3067            uint8 useMultiCast;
   3068          
   3069            pBuf += MT_RPC_FRAME_HDR_SZ;
   3070          
   3071            // Is the useMulticast in this message
   3072            useMultiCast = *pBuf++;
   3073            if ( useMultiCast & 0x80 )
   3074            {
   3075              if ( useMultiCast & 0x7F )
   3076              {
   3077                _NIB.nwkUseMultiCast = TRUE;
   3078              }
   3079              else
   3080              {
   3081                _NIB.nwkUseMultiCast = FALSE;
   3082              }
   3083            }
   3084          
   3085            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   3086                                                 MT_ZDO_EXT_SET_PARAMS, 1, &status );
   3087          }
   3088          #endif // MT_ZDO_EXTENSIONS
   3089          
   3090          #endif   /*ZDO Command Processing in MT*/
   3091          /***************************************************************************************************
   3092          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     47   MT_ZdoAddrRspCB
        0     18   -> MT_BuildAndSendZToolResponse
        0     18   -> MT_Word2Buf
        0     18   -> osal_mem_alloc
        0     18   -> osal_mem_free
        0     18   -> sAddrExtCpy
      1     23   MT_ZdoBeaconIndCB
        0     11   -> MT_BuildAndSendZToolResponse
        0     11   -> osal_mem_alloc
        0     11   -> osal_mem_free
        0     14   -> osal_memcpy
      1    113   MT_ZdoBindRequest
        0     35   -> MT_BuildAndSendZToolResponse
        0     43   -> ZDP_BindUnbindReq
        0     35   -> osal_build_uint16
        0     35   -> sAddrExtCpy
      1     75   MT_ZdoCommandProcessing
        0     70   -> MT_BuildAndSendZToolResponse
        0     70   -> MT_ZdoBindRequest
        0     70   -> MT_ZdoEndDevBindRequest
        0     70   -> MT_ZdoExtFindAllGroupsEndpoint
        0     70   -> MT_ZdoExtFindGroup
        0     70   -> MT_ZdoExtNwkInfo
        0     70   -> MT_ZdoMatchDescRequest
        0     70   -> MT_ZdoMgmtNwkUpdateRequest
        0     70   -> MT_ZdoNWKAddressRequest
        0     70   -> MT_ZdoNwkAddrOfInterestReq
        0     70   -> MT_ZdoSendData
        0     70   -> MT_ZdoUnbindRequest
        0     70   -> NLME_RouteDiscoveryRequest
        0     70   -> RTG_CheckRtStatus
        0     70   -> ZDApp_ForceConcentratorChange
        0     74   -> ZDApp_JoinReq
        0     70   -> ZDApp_NetworkDiscoveryReq
        0     70   -> ZDApp_SetRejoinBackoffDuration
        0     70   -> ZDApp_SetRejoinScanDuration
        0     70   -> ZDO_RegisterForZDOMsg
        0     70   -> ZDO_RegisterForZdoCB
        0     70   -> ZDO_RemoveRegisteredCB
        0     71   -> ZDP_DeviceAnnce
        0     70   -> ZDP_IEEEAddrReq
        0     71   -> ZDP_MgmtDirectJoinReq
        0     72   -> ZDP_MgmtLeaveReq
        0     74   -> ZDP_MgmtNwkDiscReq
        0     70   -> ZDP_MgmtPermitJoinReq
        0     71   -> ZDP_NWKAddrOfInterestReq
        0     75   -> ZDP_SendData
        0     70   -> ZDP_ServerDiscReq
        0     71   -> ZDP_SimpleDescReq
        0     72   -> ZDP_UserDescSet
        0     72   -> ZDSecMgrAPSRemove
        0     72   -> ZDSecMgrAddLinkKey
        0     70   -> ZDSecMgrDeviceRemoveByExtAddr
        0     70   -> ZDSecMgrEntryLookupExt
        0     70   -> ZDSecMgrSwitchNwkKey
        0     70   -> ZDSecMgrUpdateNwkKey
        0     70   -> ZMacGetReq
        0     70   -> ZMacSetReq
        0     70   -> aps_AddGroup
        0     70   -> aps_CountAllGroups
        0     70   -> aps_RemoveAllGroup
        0     70   -> aps_RemoveGroup
        0     70   -> bdb_StartCommissioning
        0     70   -> osal_build_uint16
        0     70   -> osal_build_uint32
        0     73   -> osal_memcpy
      1     25   MT_ZdoConcentratorIndCB
        0     22   -> MT_BuildAndSendZToolResponse
        0     25   -> osal_memcpy
      1     32   MT_ZdoDirectCB
        0     29   -> MT_BuildAndSendZToolResponse
        0     29   -> MT_ZdoAddrRspCB
        0     29   -> MT_ZdoEndDevAnnceCB
        0     29   -> ZDO_ParseAddrRsp
        0     29   -> ZDO_ParseDeviceAnnce
        0     29   -> osal_mem_alloc
        0     29   -> osal_mem_free
        0     32   -> osal_memcpy
      1     43   MT_ZdoEndDevAnnceCB
        0     14   -> MT_BuildAndSendZToolResponse
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
        0     14   -> sAddrExtCpy
      1    169   MT_ZdoEndDevBindRequest
        0     90   -> MT_BuildAndSendZToolResponse
        0     99   -> ZDP_EndDeviceBindReq
        0     90   -> osal_build_uint16
      1    115   MT_ZdoExtFindAllGroupsEndpoint
        0     45   -> MT_BuildAndSendZToolResponse
        0     45   -> aps_FindAllGroupsForEndpoint
        0     45   -> osal_mem_alloc
        0     45   -> osal_mem_free
      1    103   MT_ZdoExtFindGroup
        0     30   -> MT_BuildAndSendZToolResponse
        0     30   -> aps_FindGroup
        0     30   -> osal_build_uint16
        0     33   -> osal_memcpy
      1    108   MT_ZdoExtNwkInfo
        0     35   -> MT_BuildAndSendZToolResponse
        0     38   -> osal_memcpy
      2      0   MT_ZdoInit
        2      0   -> ZDO_RegisterForZdoCB
      1     14   MT_ZdoJoinCnfCB
        0     14   -> MT_BuildAndSendZToolResponse
        0     14   -> ZDO_DeregisterForZdoCB
      1     27   MT_ZdoLeaveInd
        0     24   -> MT_BuildAndSendZToolResponse
        0     27   -> osal_memcpy
      1    170   MT_ZdoMatchDescRequest
        0     92   -> MT_BuildAndSendZToolResponse
        0    100   -> ZDP_MatchDescReq
        0     92   -> osal_build_uint16
      1    106   MT_ZdoMgmtNwkUpdateRequest
        0     30   -> MT_BuildAndSendZToolResponse
        0     36   -> ZDP_MgmtNwkUpdateReq
        0     30   -> osal_build_uint16
        0     30   -> osal_build_uint32
      1    104   MT_ZdoNWKAddressRequest
        0     34   -> AssocGetWithExt
        0     34   -> MT_BuildAndSendZToolResponse
        0     34   -> NLME_GetShortAddr
        0     34   -> ZDP_NwkAddrReq
        0     34   -> sAddrExtCpy
      1     95   MT_ZdoNwkAddrOfInterestReq
        0     24   -> MT_BuildAndSendZToolResponse
        0     25   -> ZDP_NWKAddrOfInterestReq
        0     24   -> osal_build_uint16
      0      9   MT_ZdoNwkDiscoveryCnfCB
        0      9   -> MT_BuildAndSendZToolResponse
        0      9   -> MT_ZdoBeaconIndCB
        0      9   -> ZDO_DeregisterForZdoCB
      2      0   MT_ZdoPermitJoinInd
        2      0   -> MT_BuildAndSendZToolResponse
      1    100   MT_ZdoSendData
        0     25   -> MT_BuildAndSendZToolResponse
        0     30   -> ZDP_SendData
        0     25   -> osal_build_uint16
      1     18   MT_ZdoSendMsgCB
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free
        0     18   -> osal_memcpy
      1     14   MT_ZdoSrcRtgCB
        0     14   -> MT_BuildAndSendZToolResponse
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
      2      0   MT_ZdoStateChangeCB
        2      0   -> MT_BuildAndSendZToolResponse
      1     26   MT_ZdoTcDeviceInd
        0     23   -> MT_BuildAndSendZToolResponse
        0     26   -> osal_memcpy
      1    113   MT_ZdoUnbindRequest
        0     35   -> MT_BuildAndSendZToolResponse
        0     43   -> ZDP_BindUnbindReq
        0     35   -> osal_build_uint16
        0     35   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      19  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
       6  ?<Constant {0, 0, 0, 0, 0, 0}>
      18  ?<Constant {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       8  ??Subroutine103_0
       7  ??Subroutine104_0
       4  ??Subroutine105_0
      12  ??Subroutine106_0
       5  ??Subroutine107_0
       1  ??Subroutine108_0
       8  ??Subroutine109_0
       8  ??Subroutine110_0
      10  ??Subroutine111_0
       6  ??Subroutine112_0
      10  ??Subroutine113_0
       8  ??Subroutine114_0
       6  ??Subroutine115_0
      10  ??Subroutine116_0
       2  ??Subroutine117_0
       6  ??Subroutine118_0
       3  ??Subroutine119_0
       6  ??Subroutine120_0
       5  ??Subroutine121_0
       6  ??Subroutine122_0
      11  ??Subroutine123_0
      11  ??Subroutine124_0
       9  ??Subroutine125_0
       5  ??Subroutine126_0
       6  ??Subroutine127_0
       8  ??Subroutine128_0
       5  ??Subroutine129_0
       7  ?Subroutine0
      15  ?Subroutine1
      34  ?Subroutine10
      10  ?Subroutine100
       6  ?Subroutine101
       7  ?Subroutine102
      42  ?Subroutine11
      18  ?Subroutine12
      13  ?Subroutine13
       3  ?Subroutine14
      19  ?Subroutine15
      11  ?Subroutine16
       2  ?Subroutine17
      13  ?Subroutine18
       6  ?Subroutine19
       8  ?Subroutine2
       8  ?Subroutine20
       1  ?Subroutine21
       5  ?Subroutine22
      13  ?Subroutine23
       5  ?Subroutine24
       5  ?Subroutine25
      12  ?Subroutine26
       3  ?Subroutine27
       2  ?Subroutine28
       6  ?Subroutine29
       3  ?Subroutine3
       4  ?Subroutine30
       5  ?Subroutine31
       4  ?Subroutine32
      11  ?Subroutine33
       6  ?Subroutine34
       6  ?Subroutine35
      12  ?Subroutine36
       1  ?Subroutine37
       5  ?Subroutine38
      13  ?Subroutine39
       8  ?Subroutine4
       4  ?Subroutine40
      19  ?Subroutine41
       6  ?Subroutine42
      10  ?Subroutine43
       6  ?Subroutine44
      16  ?Subroutine45
      16  ?Subroutine46
       6  ?Subroutine47
       9  ?Subroutine48
      10  ?Subroutine49
       3  ?Subroutine5
      10  ?Subroutine50
       6  ?Subroutine51
      18  ?Subroutine52
      22  ?Subroutine53
       7  ?Subroutine54
       8  ?Subroutine55
      14  ?Subroutine56
       5  ?Subroutine57
       5  ?Subroutine58
       6  ?Subroutine59
       5  ?Subroutine6
      12  ?Subroutine60
       6  ?Subroutine61
       6  ?Subroutine62
       6  ?Subroutine63
       4  ?Subroutine64
      12  ?Subroutine65
       4  ?Subroutine66
      10  ?Subroutine67
       2  ?Subroutine68
       9  ?Subroutine69
       3  ?Subroutine7
      13  ?Subroutine70
      19  ?Subroutine71
      12  ?Subroutine72
       4  ?Subroutine73
      11  ?Subroutine74
      10  ?Subroutine75
      12  ?Subroutine76
       7  ?Subroutine77
      14  ?Subroutine78
       6  ?Subroutine79
       6  ?Subroutine8
       4  ?Subroutine80
      14  ?Subroutine81
      12  ?Subroutine82
       5  ?Subroutine83
       7  ?Subroutine84
       9  ?Subroutine85
       9  ?Subroutine86
      11  ?Subroutine87
       2  ?Subroutine88
      18  ?Subroutine89
       5  ?Subroutine9
       3  ?Subroutine90
      11  ?Subroutine91
       9  ?Subroutine92
      10  ?Subroutine93
       7  ?Subroutine94
       5  ?Subroutine95
      10  ?Subroutine96
       7  ?Subroutine97
       4  ?Subroutine98
       1  ?Subroutine99
     159  MT_ZdoAddrRspCB
     342  MT_ZdoBeaconIndCB
     119  MT_ZdoBindRequest
    2353  MT_ZdoCommandProcessing
      81  MT_ZdoConcentratorIndCB
     299  MT_ZdoDirectCB
     103  MT_ZdoEndDevAnnceCB
     285  MT_ZdoEndDevBindRequest
     166  MT_ZdoExtFindAllGroupsEndpoint
     145  MT_ZdoExtFindGroup
     167  MT_ZdoExtNwkInfo
      49  MT_ZdoInit
     104  MT_ZdoJoinCnfCB
     106  MT_ZdoLeaveInd
     255  MT_ZdoMatchDescRequest
     200  MT_ZdoMgmtNwkUpdateRequest
     217  MT_ZdoNWKAddressRequest
     152  MT_ZdoNwkAddrOfInterestReq
      37  MT_ZdoNwkDiscoveryCnfCB
      56  MT_ZdoPermitJoinInd
     206  MT_ZdoSendData
     162  MT_ZdoSendMsgCB
     121  MT_ZdoSrcRtgCB
      25  MT_ZdoStateChangeCB
      86  MT_ZdoTcDeviceInd
     122  MT_ZdoUnbindRequest
       4  _zdoCallbackSub
       1  ignoreIndication
       2  pBeaconIndBuf
     156  -- Other

 
 7 217 bytes in segment BANKED_CODE
   156 bytes in segment BANK_RELAYS
    43 bytes in segment XDATA_ROM_C
     7 bytes in segment XDATA_Z
 
   156 bytes of CODE     memory
    43 bytes of CONST    memory
 7 217 bytes of HUGECODE memory
     7 bytes of XDATA    memory

Errors: none
Warnings: none
