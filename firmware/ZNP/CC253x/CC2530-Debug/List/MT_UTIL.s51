///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.40.1.7397 for 8051              01/May/2021  14:39:40
// Copyright 2004-2021 IAR Systems AB.
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        E:\Texas Instruments\Z-Stack 3.0.2\Components\mt\MT_UTIL.c
//    Command line       =  
//        -f C:\Users\asus\AppData\Local\Temp\EWD80C.tmp ("E:\Texas
//        Instruments\Z-Stack 3.0.2\Components\mt\MT_UTIL.c" -D
//        BDB_FINDING_BINDING_CAPABILITY_ENABLED=0 -D HAL_UART_DMA_RX_MAX=128
//        -D MAXMEMHEAP=2765 -D TC_LINKKEY_JOIN -D NWK_MAX_DEVICE_LIST=10 -D
//        ZDSECMGR_TC_DEVICE_MAX=30 -D DISABLE_GREENPOWER_BASIC_PROXY -D
//        POWER_SAVING -D FEATURE_SYSTEM_STATS -D MT_GP_CB_FUNC -lC "E:\Texas
//        Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" -lA "E:\Texas
//        Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" --diag_suppress
//        Pe001,Pa010 -o "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj" -e --debug
//        --core=plain --dptr=16,1 --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 16 -f "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
//        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR |
//        DEVICE_BUILD_ROUTER | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL
//        -DZNP_RUN_WDOG=FALSE -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO
//        -DZIGBEE_FRAGMENTATION -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE
//        -DSAPI_CB_FUNC=FALSE -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT
//        -DNUM_DISC_ATTEMPTS=0 -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC
//        -DMT_SAPI_FUNC -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC
//        -DMT_ZDO_MGMT -DMT_ZDO_EXTENSIONS -DMT_GP_CB_FUNC -DMT_APP_FUNC
//        -DMT_APP_CNF_FUNC) -f "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg" -I
//        "E:\Texas Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\" -I
//        "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\Source\" -I "E:\Texas
//        Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\..\Source\" -I
//        "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "E:\Texas
//        Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I "E:\Texas
//        Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
//        "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\" -I
//        "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\gp\" -I
//        "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\bdb\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\" -I
//        "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes --no_code_motion)
//    Locale             =  English_USA.1252
//    List file          =  
//        E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-Debug\List\MT_UTIL.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME MT_UTIL

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?UL_DIV_MOD
        EXTERN ?UL_SHR
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN ?XSTORE_R0123

        FUNCTION `??MT_UtilBindAddEntry::?relay`,0203H
        PUBLIC `??MT_UtilCommandProcessing::?relay`
        FUNCTION `??MT_UtilCommandProcessing::?relay`,0203H
        FUNCTION `??MT_UtilGetDeviceInfo::?relay`,0203H
        FUNCTION `??MT_UtilGetNvInfo::?relay`,0203H
        FUNCTION `??MT_UtilGpioSetDirection::?relay`,0203H
        FUNCTION `??MT_UtilGpioWrite::?relay`,0203H
        PUBLIC `??MT_UtilSetDevNwkInfo::?relay`
        FUNCTION `??MT_UtilSetDevNwkInfo::?relay`,0203H
        FUNCTION `??packBindEntry_t::?relay`,0203H
        FUNCTION `??packDev_t::?relay`,0203H
        FUNCTION MT_UtilBindAddEntry,0a1203H
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 45, STACK
        PUBLIC MT_UtilCommandProcessing
        FUNCTION MT_UtilCommandProcessing,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 82, STACK
        FUNCTION MT_UtilGetDeviceInfo,0a1203H
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        FUNCTION MT_UtilGetNvInfo,0a1203H
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        FUNCTION MT_UtilGpioSetDirection,0a1203H
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        FUNCTION MT_UtilGpioWrite,0a1203H
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC MT_UtilSetDevNwkInfo
        FUNCTION MT_UtilSetDevNwkInfo,021203H
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBWEAK P0DIR
        PUBWEAK P1DIR
        PUBWEAK P2DIR
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        PUBWEAK _A_P2
        PUBWEAK __Constant_3e8
        FUNCTION packBindEntry_t,0a1203H
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        FUNCTION packDev_t,0a1203H
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AddrMgrEntryLookupExt SYMBOL "AddrMgrEntryLookupExt"
`??AddrMgrEntryLookupExt::?relay` SYMBOL "?relay", AddrMgrEntryLookupExt
AddrMgrEntryLookupNwk SYMBOL "AddrMgrEntryLookupNwk"
`??AddrMgrEntryLookupNwk::?relay` SYMBOL "?relay", AddrMgrEntryLookupNwk
AddrMgrExtAddrValid SYMBOL "AddrMgrExtAddrValid"
`??AddrMgrExtAddrValid::?relay` SYMBOL "?relay", AddrMgrExtAddrValid
AssocCount          SYMBOL "AssocCount"
`??AssocCount::?relay` SYMBOL "?relay", AssocCount
AssocFindDevice     SYMBOL "AssocFindDevice"
`??AssocFindDevice::?relay` SYMBOL "?relay", AssocFindDevice
AssocGetWithAddress SYMBOL "AssocGetWithAddress"
`??AssocGetWithAddress::?relay` SYMBOL "?relay", AssocGetWithAddress
AssocMakeList       SYMBOL "AssocMakeList"
`??AssocMakeList::?relay` SYMBOL "?relay", AssocMakeList
MT_BuildAndSendZToolResponse SYMBOL "MT_BuildAndSendZToolResponse"
`??MT_BuildAndSendZToolResponse::?relay` SYMBOL "?relay", MT_BuildAndSendZToolResponse
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NwkPollReq          SYMBOL "NwkPollReq"
`??NwkPollReq::?relay` SYMBOL "?relay", NwkPollReq
ZDSecMgrRequestAppKey SYMBOL "ZDSecMgrRequestAppKey"
`??ZDSecMgrRequestAppKey::?relay` SYMBOL "?relay", ZDSecMgrRequestAppKey
bindAddEntry        SYMBOL "bindAddEntry"
`??bindAddEntry::?relay` SYMBOL "?relay", bindAddEntry
osal_GetSystemClock SYMBOL "osal_GetSystemClock"
`??osal_GetSystemClock::?relay` SYMBOL "?relay", osal_GetSystemClock
osal_buffer_uint32  SYMBOL "osal_buffer_uint32"
`??osal_buffer_uint32::?relay` SYMBOL "?relay", osal_buffer_uint32
osal_build_uint16   SYMBOL "osal_build_uint16"
`??osal_build_uint16::?relay` SYMBOL "?relay", osal_build_uint16
osal_build_uint32   SYMBOL "osal_build_uint32"
`??osal_build_uint32::?relay` SYMBOL "?relay", osal_build_uint32
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_nv_item_len    SYMBOL "osal_nv_item_len"
`??osal_nv_item_len::?relay` SYMBOL "?relay", osal_nv_item_len
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
MT_UtilCommandProcessing SYMBOL "MT_UtilCommandProcessing"
`??MT_UtilCommandProcessing::?relay` SYMBOL "?relay", MT_UtilCommandProcessing
MT_UtilSetDevNwkInfo SYMBOL "MT_UtilSetDevNwkInfo"
`??MT_UtilSetDevNwkInfo::?relay` SYMBOL "?relay", MT_UtilSetDevNwkInfo

        EXTERN `??AddrMgrEntryLookupExt::?relay`
        FUNCTION `??AddrMgrEntryLookupExt::?relay`,00H
        EXTERN `??AddrMgrEntryLookupNwk::?relay`
        FUNCTION `??AddrMgrEntryLookupNwk::?relay`,00H
        EXTERN `??AddrMgrExtAddrValid::?relay`
        FUNCTION `??AddrMgrExtAddrValid::?relay`,00H
        EXTERN `??AssocCount::?relay`
        FUNCTION `??AssocCount::?relay`,00H
        EXTERN `??AssocFindDevice::?relay`
        FUNCTION `??AssocFindDevice::?relay`,00H
        EXTERN `??AssocGetWithAddress::?relay`
        FUNCTION `??AssocGetWithAddress::?relay`,00H
        EXTERN `??AssocMakeList::?relay`
        FUNCTION `??AssocMakeList::?relay`,00H
        EXTERN `??MT_BuildAndSendZToolResponse::?relay`
        FUNCTION `??MT_BuildAndSendZToolResponse::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NwkPollReq::?relay`
        FUNCTION `??NwkPollReq::?relay`,00H
        EXTERN `??ZDSecMgrRequestAppKey::?relay`
        FUNCTION `??ZDSecMgrRequestAppKey::?relay`,00H
        EXTERN `??bindAddEntry::?relay`
        FUNCTION `??bindAddEntry::?relay`,00H
        EXTERN `??osal_GetSystemClock::?relay`
        FUNCTION `??osal_GetSystemClock::?relay`,00H
        EXTERN `??osal_buffer_uint32::?relay`
        FUNCTION `??osal_buffer_uint32::?relay`,00H
        EXTERN `??osal_build_uint16::?relay`
        FUNCTION `??osal_build_uint16::?relay`,00H
        EXTERN `??osal_build_uint32::?relay`
        FUNCTION `??osal_build_uint32::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_nv_item_len::?relay`
        FUNCTION `??osal_nv_item_len::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN AddrMgrEntryLookupExt
        FUNCTION AddrMgrEntryLookupExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupNwk
        FUNCTION AddrMgrEntryLookupNwk,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrValid
        FUNCTION AddrMgrExtAddrValid,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocCount
        FUNCTION AssocCount,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocFindDevice
        FUNCTION AssocFindDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocGetWithAddress
        FUNCTION AssocGetWithAddress,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocMakeList
        FUNCTION AssocMakeList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_BuildAndSendZToolResponse
        FUNCTION MT_BuildAndSendZToolResponse,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NwkPollReq
        FUNCTION NwkPollReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrRequestAppKey
        FUNCTION ZDSecMgrRequestAppKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN _sapiCallbackSub
        EXTERN _zdoCallbackSub
        EXTERN bindAddEntry
        FUNCTION bindAddEntry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN devState
        EXTERN osal_GetSystemClock
        FUNCTION osal_GetSystemClock,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_buffer_uint32
        FUNCTION osal_buffer_uint32,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint16
        FUNCTION osal_build_uint16,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint32
        FUNCTION osal_build_uint32,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_len
        FUNCTION osal_nv_item_len,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgDeviceLogicalType

// E:\Texas Instruments\Z-Stack 3.0.2\Components\mt\MT_UTIL.c
//    1 /***************************************************************************************************
//    2   Filename:       MT_UTIL.c
//    3   Revised:        $Date: 2015-01-26 08:25:50 -0800 (Mon, 26 Jan 2015) $
//    4   Revision:       $Revision: 42025 $
//    5 
//    6   Description:    MonitorTest Utility Functions
//    7 
//    8   Copyright 2007-2015 Texas Instruments Incorporated. All rights reserved.
//    9 
//   10   IMPORTANT: Your use of this Software is limited to those specific rights
//   11   granted under the terms of a software license agreement between the user
//   12   who downloaded the software, his/her employer (which must be your employer)
//   13   and Texas Instruments Incorporated (the "License"). You may not use this
//   14   Software unless you agree to abide by the terms of the License. The License
//   15   limits your use, and you acknowledge, that the Software may not be modified,
//   16   copied or distributed unless embedded on a Texas Instruments microcontroller
//   17   or used solely and exclusively in conjunction with a Texas Instruments radio
//   18   frequency transceiver, which is integrated into your product. Other than for
//   19   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   20   works of, modify, distribute, perform, display or sell this Software and/or
//   21   its documentation for any purpose.
//   22 
//   23   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   24   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   25   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   26   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   27   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   28   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   29   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   30   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   31   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   32   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   33   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   34 
//   35   Should you have any questions regarding your right to use this Software,
//   36   contact Texas Instruments Incorporated at www.TI.com.
//   37 
//   38  ***************************************************************************************************/
//   39 
//   40 /***************************************************************************************************
//   41  * INCLUDES
//   42  ***************************************************************************************************/
//   43 #include "ZComDef.h"
//   44 
//   45 #include "AddrMgr.h"
//   46 
//   47 #include "OnBoard.h"   /* This is here because of the key reading */

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a0H
// union <unnamed> volatile __sfr _A_P2
_A_P2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DATA8
        DS 1
//   48 #include "hal_key.h"
//   49 #include "hal_led.h"
//   50 #include "OSAL_Nv.h"
//   51 #include "osal.h"
//   52 #include "NLMEDE.h"
//   53 #include "MT.h"
//   54 #include "MT_UTIL.h"
//   55 #include "MT_MAC.h"
//   56 #include "ssp.h"
//   57 #if defined ZCL_KEY_ESTABLISH
//   58 #include "zcl_key_establish.h"
//   59 #include "zcl_se.h"
//   60 #endif
//   61 
//   62 #if !defined NONWK
//   63 #include "MT_ZDO.h"
//   64 #include "MT_SAPI.h"
//   65 #include "MT_NWK.h"
//   66 #include "MT_AF.h"
//   67 #include "AssocList.h"
//   68 #include "ZDApp.h"
//   69 #include "ZDSecMgr.h"
//   70 #endif
//   71 
//   72 #if defined MT_SRNG
//   73 #include "hal_srng.h"
//   74 #endif
//   75 
//   76 #if defined FEATURE_DUAL_MAC
//   77 #include "dmmgr.h"
//   78 #endif
//   79 
//   80 /***************************************************************************************************
//   81  * CONSTANTS
//   82  ***************************************************************************************************/
//   83 #define MT_UTIL_DEVICE_INFO_RESPONSE_LEN 14
//   84 #define MT_UTIL_STATUS_LEN    1
//   85 #define MT_UTIL_FRM_CTR_LEN   4
//   86 // Status + LinkKeyDataLen + Tx+Rx Frame counter.
//   87 #define MT_APSME_LINKKEY_GET_RSP_LEN (MT_UTIL_STATUS_LEN + SEC_KEY_LEN + (MT_UTIL_FRM_CTR_LEN * 2))
//   88 // Status + NV id
//   89 #define MT_APSME_LINKKEY_NV_ID_GET_RSP_LEN (MT_UTIL_STATUS_LEN + 2)
//   90 
//   91 /***************************************************************************************************
//   92  * LOCAL VARIABLES
//   93  ***************************************************************************************************/
//   94 #if defined ZCL_KEY_ESTABLISH
//   95 uint8 zcl_key_establish_task_id;
//   96 #endif
//   97 
//   98 #ifdef FEATURE_GET_PRIMARY_IEEE
//   99 /* This feature is not compatible with MSP430 or ARM platforms. */
//  100 __no_init const __xdata char ieeeMac[1] @ 0x780C;
//  101 #endif
//  102 
//  103 /***************************************************************************************************
//  104  * LOCAL FUNCTIONS
//  105  ***************************************************************************************************/
//  106 #ifdef AUTO_PEND
//  107 static void MT_UtilRevExtCpy( uint8 *pDst, uint8 *pSrc );
//  108 static void MT_UtilSpi2Addr( zAddrType_t *pDst, uint8 *pSrc );
//  109 #endif
//  110 
//  111 #if defined (MT_UTIL_FUNC)
//  112 static void MT_UtilGetDeviceInfo(void);
//  113 static void MT_UtilGetNvInfo(void);
//  114 static void MT_UtilSetPanID(uint8 *pBuf);
//  115 static void MT_UtilSetChannels(uint8 *pBuf);
//  116 static void MT_UtilSetSecLevel(uint8 *pBuf);
//  117 static void MT_UtilSetPreCfgKey(uint8 *pBuf);
//  118 static void MT_UtilCallbackSub(uint8 *pData);
//  119 static void MT_UtilTimeAlive(void);
//  120 static void MT_UtilSrcMatchEnable (uint8 *pBuf);
//  121 static void MT_UtilSrcMatchAddEntry (uint8 *pBuf);
//  122 static void MT_UtilSrcMatchDeleteEntry (uint8 *pBuf);
//  123 static void MT_UtilSrcMatchCheckSrcAddr (uint8 *pBuf);
//  124 static void MT_UtilSrcMatchAckAllPending (uint8 *pBuf);
//  125 static void MT_UtilSrcMatchCheckAllPending (uint8 *pBuf);
//  126 
//  127 static void MT_UtilGpioSetDirection(uint8 *pBuf);
//  128 static void MT_UtilGpioRead(uint8 *pBuf);
//  129 static void MT_UtilGpioWrite(uint8 *pBuf);
//  130 
//  131 #if (defined HAL_KEY) && (HAL_KEY == TRUE)
//  132 static void MT_UtilKeyEvent(uint8 *pBuf);
//  133 #endif
//  134 
//  135 #if (defined HAL_LED) && (HAL_LED == TRUE)
//  136 static void MT_UtilLedControl(uint8 *pBuf);
//  137 #endif
//  138 
//  139 #ifdef MT_SRNG
//  140 static void MT_UtilSrngGen(void);
//  141 #endif
//  142 
//  143 #ifdef FEATURE_GET_PRIMARY_IEEE
//  144 static void MT_UtilGetPrimaryIEEE(void);
//  145 #endif
//  146 
//  147 #if !defined NONWK
//  148 static void MT_UtilDataReq(uint8 *pBuf);
//  149 static void MT_UtilAddrMgrEntryLookupExt(uint8 *pBuf);
//  150 static void MT_UtilAddrMgrEntryLookupNwk(uint8 *pBuf);
//  151 #if defined MT_SYS_KEY_MANAGEMENT
//  152 static void MT_UtilAPSME_LinkKeyDataGet(uint8 *pBuf);
//  153 static void MT_UtilAPSME_LinkKeyNvIdGet(uint8 *pBuf);
//  154 #endif //MT_SYS_KEY_MANAGEMENT
//  155 static void MT_UtilAPSME_RequestKeyCmd(uint8 *pBuf);
//  156 static void MT_UtilAssocCount(uint8 *pBuf);
//  157 static void MT_UtilAssocFindDevice(uint8 *pBuf);
//  158 static void MT_UtilAssocGetWithAddress(uint8 *pBuf);
//  159 static void MT_UtilBindAddEntry(uint8 *pBuf);
//  160 static void packDev_t(uint8 *pBuf, associated_devices_t *pDev);
//  161 static void packBindEntry_t(uint8 *pBuf, BindingEntry_t *pBind);
//  162 #if defined ZCL_KEY_ESTABLISH
//  163 static void MT_UtilzclGeneral_KeyEstablish_InitiateKeyEstablishment(uint8 *pBuf);
//  164 static void MT_UtilzclGeneral_KeyEstablishment_ECDSASign(uint8 *pBuf);
//  165 #endif // ZCL_KEY_ESTABLISH
//  166 static void MT_UtilSync(void);
//  167 static void MT_UtilGetDevNwkInfo( uint8 *pBuf );
//  168 
//  169 #endif // !defined NONWK
//  170 #endif // MT_UTIL_FUNC
//  171 
//  172 #if defined (MT_UTIL_FUNC)
//  173 /***************************************************************************************************
//  174 * @fn      MT_UtilProcessing
//  175 *
//  176 * @brief   Process all the DEBUG commands that are issued by test tool
//  177 *
//  178 * @param   pBuf  - pointer to received SPI data message
//  179 *
//  180 * @return  status
//  181 ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  182 uint8 MT_UtilCommandProcessing(uint8 *pBuf)
MT_UtilCommandProcessing:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function MT_UtilCommandProcessing
        CODE
//  183 {
        FUNCALL MT_UtilCommandProcessing, MT_UtilGetDeviceInfo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilGetNvInfo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_build_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_GetSystemClock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_buffer_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilGpioSetDirection
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilGpioWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, NwkPollReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, ZDSecMgrRequestAppKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, AssocCount
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, AssocFindDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, packDev_t
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, AddrMgrExtAddrValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, AssocGetWithAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, packDev_t
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilBindAddEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilSetDevNwkInfo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 62
        MOV       A,#-0x3e
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 78)
        MOV       ?V0,R2
        MOV       ?V1,R3
//  184   uint8 status = MT_RPC_SUCCESS;
        MOV       R7,#0x0
//  185 
//  186   switch (pBuf[MT_RPC_POS_CMD1])
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_0 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_1 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_2 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_3 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_4 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_5 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_6 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_7 & 0xFFFF
        ADD       A,#-0x2
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_8 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_7 & 0xFFFF
        ADD       A,#-0x6
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_9 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_10 & 0xFFFF
        ADD       A,#-0x3
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_11 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_12 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_13 & 0xFFFF
        ADD       A,#-0xa
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_14 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_14 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_14 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_15 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_14 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_16 & 0xFFFF
        ADD       A,#-0x1b
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_17 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_18 & 0xFFFF
        ADD       A,#-0x7
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_19 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_20 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_21 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_22 & 0xFFFF
        ADD       A,#-0x2
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_23 & 0xFFFF
        ADD       A,#-0x53
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_24 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_25 & 0xFFFF
        ADD       A,#-0x3f
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_26 & 0xFFFF
        LJMP      ??MT_UtilCommandProcessing_27 & 0xFFFF
//  187   {
//  188     // CC253X MAC Network Processor does not have NV support
//  189 #if !defined(CC253X_MACNP)
//  190   case MT_UTIL_GET_DEVICE_INFO:
//  191     MT_UtilGetDeviceInfo();
??MT_UtilCommandProcessing_0:
        ; Setup parameters for call to function MT_UtilGetDeviceInfo
        LCALL     `??MT_UtilGetDeviceInfo::?relay`; Banked call to: MT_UtilGetDeviceInfo
//  192     break;
        LJMP      ??MT_UtilCommandProcessing_7 & 0xFFFF
//  193 
//  194   case MT_UTIL_GET_NV_INFO:
//  195     MT_UtilGetNvInfo();
??MT_UtilCommandProcessing_1:
        ; Setup parameters for call to function MT_UtilGetNvInfo
        LCALL     `??MT_UtilGetNvInfo::?relay`; Banked call to: MT_UtilGetNvInfo
//  196     break;
        LJMP      ??MT_UtilCommandProcessing_7 & 0xFFFF
//  197 
//  198   case MT_UTIL_SET_PANID:
//  199     MT_UtilSetPanID(pBuf);
??MT_UtilCommandProcessing_2:
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_nv_item_len
        MOV       R2,#-0x7d
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV       ?V0,R2
        MOV       ?V1,R3
        ; Setup parameters for call to function osal_nv_write
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 80)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 82)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7d
        LJMP      ??MT_UtilCommandProcessing_28 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 78)
//  200     break;
//  201 
//  202   case MT_UTIL_SET_CHANNELS:
//  203     MT_UtilSetChannels(pBuf);
??MT_UtilCommandProcessing_3:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
        ; Setup parameters for call to function osal_build_uint32
        MOV       R1,#0x4
        MOV       A,R2
        ADD       A,#0x3
        MOV       R2,A
        CLR       A
        ADDC      A,?V1
        MOV       R3,A
        LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
        MOV       A,R2
        MOV       R0,A
        MOV       A,R3
        MOV       R1,A
        MOV       A,R4
        MOV       R2,A
        MOV       A,R5
        MOV       R3,A
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?XSTORE_R0123
        ; Setup parameters for call to function osal_nv_item_len
        MOV       R2,#-0x7c
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV       ?V0,R2
        MOV       ?V1,R3
        ; Setup parameters for call to function osal_nv_write
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 80)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 82)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7c
        SJMP      ??MT_UtilCommandProcessing_28
          CFI CFA_XSP16 add(XSP16, 78)
//  204     break;
//  205 
//  206   case MT_UTIL_SET_SECLEVEL:
//  207     MT_UtilSetSecLevel(pBuf);
??MT_UtilCommandProcessing_4:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
        ; Setup parameters for call to function osal_nv_item_len
        MOV       R2,#0x61
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_25:
        JNC       ??MT_UtilCommandProcessing_29
        INC       ?V1
??MT_UtilCommandProcessing_29:
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 80)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 82)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x61
        SJMP      ??MT_UtilCommandProcessing_28
          CFI CFA_XSP16 add(XSP16, 78)
//  208     break;
//  209 
//  210   case MT_UTIL_SET_PRECFGKEY:
//  211     MT_UtilSetPreCfgKey(pBuf);
??MT_UtilCommandProcessing_5:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
        ; Setup parameters for call to function osal_nv_item_len
        MOV       R2,#0x62
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_26:
        JNC       ??MT_UtilCommandProcessing_30
        INC       ?V1
??MT_UtilCommandProcessing_30:
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 80)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 82)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x62
??MT_UtilCommandProcessing_28:
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 78)
        LJMP      ??MT_UtilCommandProcessing_31 & 0xFFFF
//  212     break;
//  213 #endif
//  214 
//  215 #ifdef FEATURE_GET_PRIMARY_IEEE
//  216   case MT_UTIL_GET_PRIMARY_IEEE:
//  217     MT_UtilGetPrimaryIEEE();
//  218     break;
//  219 #endif
//  220 
//  221   case MT_UTIL_CALLBACK_SUB_CMD:
//  222     MT_UtilCallbackSub(pBuf);
??MT_UtilCommandProcessing_6:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
        MOV       A,R2
        ADD       A,#0x3
        MOV       ?V0,A
        JNC       ??MT_UtilCommandProcessing_32
        INC       ?V1
??MT_UtilCommandProcessing_32:
        ; Setup parameters for call to function osal_build_uint16
        INC       R2
        INC       R2
        INC       R2
        MOV       R3,?V1
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,?V2
        MOV       R1,?V3
        MOV       A,R3
        ANL       A,#0x1f
        MOV       R2,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JZ        ??MT_UtilCommandProcessing_33
        MOV       A,#0x5
        XRL       A,R2
        JZ        ??MT_UtilCommandProcessing_34
        MOV       A,#-0x1
        XRL       A,R0
        JNZ       ??MT_UtilCommandProcessing_35
        MOV       A,#-0x1
        XRL       A,R1
??MT_UtilCommandProcessing_35:
        JNZ       ??MT_UtilCommandProcessing_36
??MT_UtilCommandProcessing_34:
        MOV       DPTR,#_zdoCallbackSub
        MOV       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
??MT_UtilCommandProcessing_36:
        MOV       A,#0x6
        XRL       A,R2
        JZ        ??MT_UtilCommandProcessing_37
        MOV       A,#-0x1
        XRL       A,R0
        JNZ       ??MT_UtilCommandProcessing_38
        MOV       A,#-0x1
        XRL       A,R1
??MT_UtilCommandProcessing_38:
        JNZ       ??MT_UtilCommandProcessing_39
??MT_UtilCommandProcessing_37:
        MOV       DPTR,#_sapiCallbackSub
        MOV       A,#-0x1
        SJMP      ??MT_UtilCommandProcessing_40
??MT_UtilCommandProcessing_33:
        MOV       A,#0x5
        XRL       A,R2
        JZ        ??MT_UtilCommandProcessing_41
        MOV       A,#-0x1
        XRL       A,R0
        JNZ       ??MT_UtilCommandProcessing_42
        MOV       A,#-0x1
        XRL       A,R1
??MT_UtilCommandProcessing_42:
        JNZ       ??MT_UtilCommandProcessing_43
??MT_UtilCommandProcessing_41:
        MOV       DPTR,#_zdoCallbackSub
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
??MT_UtilCommandProcessing_43:
        MOV       A,#0x6
        XRL       A,R2
        JZ        ??MT_UtilCommandProcessing_44
        MOV       A,#-0x1
        XRL       A,R0
        JNZ       ??MT_UtilCommandProcessing_45
        MOV       A,#-0x1
        XRL       A,R1
??MT_UtilCommandProcessing_45:
        JNZ       ??MT_UtilCommandProcessing_39
??MT_UtilCommandProcessing_44:
        MOV       DPTR,#_sapiCallbackSub
        CLR       A
??MT_UtilCommandProcessing_40:
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
??MT_UtilCommandProcessing_39:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        LJMP      ??MT_UtilCommandProcessing_46 & 0xFFFF
//  223     break;
//  224 
//  225   case MT_UTIL_KEY_EVENT:
//  226 #if (defined HAL_KEY) && (HAL_KEY == TRUE)
//  227     MT_UtilKeyEvent(pBuf);
//  228 #endif
//  229     break;
//  230 
//  231   case MT_UTIL_TIME_ALIVE:
//  232     MT_UtilTimeAlive();
??MT_UtilCommandProcessing_8:
        ; Setup parameters for call to function osal_GetSystemClock
        LCALL     `??osal_GetSystemClock::?relay`; Banked call to: osal_GetSystemClock
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
        ; Setup parameters for call to function osal_buffer_uint32
        MOV       DPTR,#__Constant_3e8
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       R0,#?V0
        MOV       R1,#?V4
        LCALL     ?UL_DIV_MOD
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 82)
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 78)
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP102_8
        MOV       R3,#0x4
        MOV       R2,#0x9
        LJMP      ??MT_UtilCommandProcessing_47 & 0xFFFF
//  233     break;
//  234 
//  235   case MT_UTIL_LED_CONTROL:
//  236 #if (defined HAL_LED) && (HAL_LED == TRUE)
//  237     MT_UtilLedControl(pBuf);
//  238 #endif
//  239     break;
//  240 
//  241   case MT_UTIL_SRC_MATCH_ENABLE:
//  242     MT_UtilSrcMatchEnable(pBuf);
//  243     break;
//  244 
//  245   case MT_UTIL_SRC_MATCH_ADD_ENTRY:
//  246     MT_UtilSrcMatchAddEntry(pBuf);
//  247     break;
//  248 
//  249   case MT_UTIL_SRC_MATCH_DEL_ENTRY:
//  250     MT_UtilSrcMatchDeleteEntry(pBuf);
//  251     break;
//  252 
//  253   case MT_UTIL_SRC_MATCH_CHECK_SRC_ADDR:
//  254     MT_UtilSrcMatchCheckSrcAddr(pBuf);
??MT_UtilCommandProcessing_15:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0xb
        MOVX      @DPTR,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x1
        MOVX      @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,#0x1
        SJMP      ??MT_UtilCommandProcessing_48
//  255     break;
//  256 
//  257   case MT_UTIL_SRC_MATCH_ACK_ALL_PENDING:
//  258     MT_UtilSrcMatchAckAllPending(pBuf);
??MT_UtilCommandProcessing_14:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0xb
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_18:
        LJMP      ??MT_UtilCommandProcessing_47 & 0xFFFF
//  259     break;
//  260 
//  261   case MT_UTIL_SRC_MATCH_CHECK_ALL_PENDING:
//  262     MT_UtilSrcMatchCheckAllPending(pBuf);
??MT_UtilCommandProcessing_16:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0xb
        MOVX      @DPTR,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        INC       A
??MT_UtilCommandProcessing_48:
        LCALL     ?XSTACK_DISP102_8
        MOV       R3,#0x2
        LJMP      ??MT_UtilCommandProcessing_47 & 0xFFFF
//  263     break;
//  264 
//  265   case MT_UTIL_TEST_LOOPBACK:
//  266     MT_BuildAndSendZToolResponse((MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_UTIL), MT_UTIL_TEST_LOOPBACK,
//  267                                  pBuf[MT_RPC_POS_LEN], (pBuf+MT_RPC_FRAME_HDR_SZ));
??MT_UtilCommandProcessing_9:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,R2
        ADD       A,#0x3
        MOV       R4,A
        CLR       A
        ADDC      A,?V1
        MOV       R5,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       R2,#0x10
        LJMP      ??MT_UtilCommandProcessing_47 & 0xFFFF
//  268     break;
//  269 
//  270   case MT_UTIL_GPIO_SET_DIRECTION:
//  271     MT_UtilGpioSetDirection(pBuf);
??MT_UtilCommandProcessing_11:
        ; Setup parameters for call to function MT_UtilGpioSetDirection
        LCALL     `??MT_UtilGpioSetDirection::?relay`; Banked call to: MT_UtilGpioSetDirection
//  272     break;
        LJMP      ??MT_UtilCommandProcessing_7 & 0xFFFF
//  273 
//  274   case MT_UTIL_GPIO_READ:
//  275     MT_UtilGpioRead(pBuf);
??MT_UtilCommandProcessing_12:
        MOV       A,0x80
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,0x90
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,0xa0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,0xfd
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,0xfe
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,0xff
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP102_8
        MOV       R3,#0x6
        MOV       R2,#0x15
        LJMP      ??MT_UtilCommandProcessing_47 & 0xFFFF
//  276     break;
//  277 
//  278   case MT_UTIL_GPIO_WRITE:
//  279     MT_UtilGpioWrite(pBuf);
??MT_UtilCommandProcessing_13:
        ; Setup parameters for call to function MT_UtilGpioWrite
        LCALL     `??MT_UtilGpioWrite::?relay`; Banked call to: MT_UtilGpioWrite
//  280     break;
        LJMP      ??MT_UtilCommandProcessing_7 & 0xFFFF
//  281 
//  282 #if !defined NONWK
//  283   case MT_UTIL_DATA_REQ:
//  284     MT_UtilDataReq(pBuf);
??MT_UtilCommandProcessing_10:
        ; Setup parameters for call to function NwkPollReq
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??NwkPollReq::?relay`; Banked call to: NwkPollReq
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV       R2,#0x11
        LJMP      ??MT_UtilCommandProcessing_47 & 0xFFFF
//  285     break;
//  286 
//  287   case MT_UTIL_ADDRMGR_EXT_ADDR_LOOKUP:
//  288     MT_UtilAddrMgrEntryLookupExt(pBuf);
??MT_UtilCommandProcessing_17:
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 78)
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP102_8
        LJMP      ??MT_UtilCommandProcessing_49 & 0xFFFF
//  289     break;
//  290 
//  291   case MT_UTIL_ADDRMGR_NWK_ADDR_LOOKUP:
//  292     MT_UtilAddrMgrEntryLookupNwk(pBuf);
??MT_UtilCommandProcessing_18:
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        MOV       R4,DPL
        MOV       R5,DPH
        MOV       R3,#0x8
        LJMP      ??MT_UtilCommandProcessing_50 & 0xFFFF
//  293     break;
//  294 
//  295 #if defined MT_SYS_KEY_MANAGEMENT
//  296   case MT_UTIL_APSME_LINK_KEY_DATA_GET:
//  297     MT_UtilAPSME_LinkKeyDataGet(pBuf);
//  298     break;
//  299 
//  300   case MT_UTIL_APSME_LINK_KEY_NV_ID_GET:
//  301     MT_UtilAPSME_LinkKeyNvIdGet(pBuf);
//  302     break;
//  303 #endif // MT_SYS_KEY_MANAGEMENT
//  304 
//  305   case MT_UTIL_APSME_REQUEST_KEY_CMD:
//  306     MT_UtilAPSME_RequestKeyCmd(pBuf);
??MT_UtilCommandProcessing_22:
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0x1d
        LCALL     ?XSTACK_DISP101_8
        LCALL     ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_28:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 78)
        ; Setup parameters for call to function ZDSecMgrRequestAppKey
        MOV       A,#0x1a
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDSecMgrRequestAppKey::?relay`; Banked call to: ZDSecMgrRequestAppKey
??MT_UtilCommandProcessing_31:
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
??MT_UtilCommandProcessing_46:
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        LJMP      ??MT_UtilCommandProcessing_50 & 0xFFFF
//  307     break;
//  308 
//  309   case MT_UTIL_ASSOC_COUNT:
//  310     MT_UtilAssocCount(pBuf);
??MT_UtilCommandProcessing_19:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
        MOV       A,R2
        ADD       A,#0x3
        MOV       ?V0,A
        JNC       ??MT_UtilCommandProcessing_51
        INC       ?V1
??MT_UtilCommandProcessing_51:
        MOV       DPL,A
        MOV       DPH,?V1
        INC       DPTR
        MOV       ?V2,DPL
        MOV       ?V3,DPH
        ; Setup parameters for call to function AssocCount
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??AssocCount::?relay`; Banked call to: AssocCount
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOV       A,R2
        MOVX      @DPTR,A
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOV       A,R3
        MOVX      @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?V0
        MOV       R5,?V1
??MT_UtilCommandProcessing_49:
        MOV       R3,#0x2
        SJMP      ??MT_UtilCommandProcessing_50
//  311     break;
//  312 
//  313   case MT_UTIL_ASSOC_FIND_DEVICE:
//  314     MT_UtilAssocFindDevice(pBuf);
??MT_UtilCommandProcessing_20:
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_37:
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??AssocFindDevice::?relay`; Banked call to: AssocFindDevice
        SJMP      ??MT_UtilCommandProcessing_52
//  315     break;
//  316 
//  317   case MT_UTIL_ASSOC_GET_WITH_ADDRESS:
//  318     MT_UtilAssocGetWithAddress(pBuf);
??MT_UtilCommandProcessing_21:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
        MOV       A,R2
        ADD       A,#0x3
        MOV       ?V0,A
        JNC       ??MT_UtilCommandProcessing_53
        INC       ?V1
??MT_UtilCommandProcessing_53:
        ; Setup parameters for call to function AddrMgrExtAddrValid
        INC       R2
        INC       R2
        INC       R2
        MOV       R3,?V1
        LCALL     `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
        MOV       A,R1
        JZ        ??MT_UtilCommandProcessing_54
        MOV       R2,?V0
        MOV       R3,?V1
        SJMP      ??MT_UtilCommandProcessing_55
??MT_UtilCommandProcessing_54:
        MOV       R2,#0x0
        MOV       R3,#0x0
??MT_UtilCommandProcessing_55:
        ; Setup parameters for call to function AssocGetWithAddress
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R4
        ADD       A,R7
        CLR       A
        ADDC      A,R1
        MOV       R5,A
        LCALL     `??AssocGetWithAddress::?relay`; Banked call to: AssocGetWithAddress
??MT_UtilCommandProcessing_52:
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R4,?V0
        MOV       R5,?V1
        ; Setup parameters for call to function packDev_t
        MOV       A,#0x22
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??packDev_t::?relay`; Banked call to: packDev_t
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,#0x22
        LCALL     ?XSTACK_DISP102_8
        MOV       R3,#0x1c
??MT_UtilCommandProcessing_50:
        MOV       A,R6
        MOV       R2,A
        SJMP      ??MT_UtilCommandProcessing_47
//  319     break;
//  320 
//  321   case MT_UTIL_BIND_ADD_ENTRY:
//  322     MT_UtilBindAddEntry(pBuf);
??MT_UtilCommandProcessing_23:
        ; Setup parameters for call to function MT_UtilBindAddEntry
        LCALL     `??MT_UtilBindAddEntry::?relay`; Banked call to: MT_UtilBindAddEntry
//  323     break;
        SJMP      ??MT_UtilCommandProcessing_7
//  324 
//  325 #if defined ZCL_KEY_ESTABLISH
//  326   case MT_UTIL_ZCL_KEY_EST_INIT_EST:
//  327     MT_UtilzclGeneral_KeyEstablish_InitiateKeyEstablishment(pBuf);
//  328     break;
//  329 
//  330   case MT_UTIL_ZCL_KEY_EST_SIGN:
//  331     MT_UtilzclGeneral_KeyEstablishment_ECDSASign(pBuf);
//  332     break;
//  333 #endif
//  334 
//  335   case MT_UTIL_SYNC_REQ:
//  336     MT_UtilSync();
??MT_UtilCommandProcessing_26:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R3,#0x0
        MOV       R2,#-0x20
        MOV       R1,#0x47
        SJMP      ??MT_UtilCommandProcessing_56
//  337     break;
//  338     
//  339   case MT_UTIL_GET_DEV_NWK_INFO:
//  340     MT_UtilGetDevNwkInfo(pBuf);
??MT_UtilCommandProcessing_24:
        MOV       DPTR,#_NIB + 20
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
        MOV       DPTR,#_NIB + 33
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
        MOV       DPTR,#_NIB
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPTR,#_NIB + 22
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP102_8
        MOV       R3,#0x6
        MOV       R2,#-0x60
??MT_UtilCommandProcessing_47:
        MOV       R1,#0x67
??MT_UtilCommandProcessing_56:
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  341     break;
        SJMP      ??MT_UtilCommandProcessing_7
//  342     
//  343   case MT_UTIL_SET_DEV_NWK_INFO:
//  344     MT_UtilSetDevNwkInfo(pBuf);
??MT_UtilCommandProcessing_25:
        ; Setup parameters for call to function MT_UtilSetDevNwkInfo
        LCALL     `??MT_UtilSetDevNwkInfo::?relay`; Banked call to: MT_UtilSetDevNwkInfo
//  345     break;
        SJMP      ??MT_UtilCommandProcessing_7
//  346 #endif /* !defined NONWK */
//  347 
//  348 #ifdef MT_SRNG
//  349   case MT_UTIL_SRNG_GENERATE:
//  350     MT_UtilSrngGen();
//  351     break;
//  352 #endif
//  353 
//  354   default:
//  355     status = MT_RPC_ERR_COMMAND_ID;
??MT_UtilCommandProcessing_27:
        MOV       R7,#0x2
//  356     break;
//  357   }
//  358 
//  359   return status;
??MT_UtilCommandProcessing_7:
        MOV       A,R7
        MOV       R1,A
        MOV       A,#0x3e
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        REQUIRE _A_P0
        REQUIRE _A_P1
        REQUIRE _A_P2
        REQUIRE P0DIR
        REQUIRE P1DIR
        REQUIRE P2DIR
        ; // Fall through to label ?Subroutine0
//  360 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 78)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Valid
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function MT_UtilCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function MT_UtilCommandProcessing
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond3) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond3) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV       ?V2,R2
        MOV       ?V3,R3
        ; Setup parameters for call to function osal_nv_write
        ; Setup parameters for call to function osal_nv_write
        MOV       A,?V0
        ADD       A,#0x3
        MOV       ?V0,A
        RET
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function MT_UtilCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function MT_UtilCommandProcessing
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiPicker7 Using cfiCommon1
          CFI (cfiPicker7) NoFunction
          CFI (cfiPicker7) Picker
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R2
        ADD       A,#0x3
        MOV       R2,A
        CLR       A
        ADDC      A,?V1
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiPicker7

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond8 Using cfiCommon0
          CFI Function MT_UtilCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function MT_UtilCommandProcessing
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-2
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiPicker10 Using cfiCommon1
          CFI (cfiPicker10) NoFunction
          CFI (cfiPicker10) Picker
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_38:
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V0,R1
        MOV       ?V1,R2
        MOV       ?V2,R7
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiPicker10

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond11 Using cfiCommon0
          CFI Function MT_UtilCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_37
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function MT_UtilCommandProcessing
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_6
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-4
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function MT_UtilCommandProcessing
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_7
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-4
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiPicker14 Using cfiCommon1
          CFI (cfiPicker14) NoFunction
          CFI (cfiPicker14) Picker
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
        ; Setup parameters for call to function AssocFindDevice
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiPicker14
//  361 
//  362 /***************************************************************************************************
//  363 * @fn      MT_UtilGetDeviceInfo
//  364 *
//  365 * @brief   The Get Device Info serial message.
//  366 *
//  367 * @param   None.
//  368 *
//  369 * @return  void
//  370 ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  371 static void MT_UtilGetDeviceInfo(void)
MT_UtilGetDeviceInfo:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function MT_UtilGetDeviceInfo
        CODE
//  372 {
        FUNCALL MT_UtilGetDeviceInfo, AssocMakeList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetDeviceInfo, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetDeviceInfo, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetDeviceInfo, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetDeviceInfo, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetDeviceInfo, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetDeviceInfo, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
//  373   uint8  *buf;
//  374   uint8  *pBuf;
//  375   uint8  bufLen = MT_UTIL_DEVICE_INFO_RESPONSE_LEN;
        MOV       ?V2,#0xe
//  376   uint16 *assocList = NULL;
        MOV       R6,#0x0
        MOV       R7,#0x0
//  377 
//  378 #if !defined NONWK
//  379   uint8  assocCnt = 0;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
//  380 
//  381   if (ZG_DEVICE_RTR_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        JZ        ??MT_UtilGetDeviceInfo_0
        XRL       A,#0x1
        JNZ       ??MT_UtilGetDeviceInfo_1
//  382   {
//  383     assocList = AssocMakeList( &assocCnt );
??MT_UtilGetDeviceInfo_0:
        ; Setup parameters for call to function AssocMakeList
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??AssocMakeList::?relay`; Banked call to: AssocMakeList
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R6,?V0
        MOV       R7,?V1
//  384     bufLen += (assocCnt * sizeof(uint16));
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        CLR       C
        RLC       A
        ADD       A,#0xe
        MOV       ?V2,A
//  385   }
//  386 #endif
//  387 
//  388   buf = osal_mem_alloc( bufLen );
??MT_UtilGetDeviceInfo_1:
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,?V2
        LCALL     ?Subroutine17 & 0xFFFF
//  389   if ( buf )
??CrossCallReturnLabel_46:
        MOV       A,R2
        ORL       A,R3
        JNZ       $+5
        LJMP      ??MT_UtilGetDeviceInfo_2 & 0xFFFF
//  390   {
//  391     pBuf = buf;
//  392 
//  393     *pBuf++ = ZSUCCESS; // Status
        MOV       DPL,R2
        MOV       DPH,R3
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOV       ?V4,DPL
        MOV       ?V5,DPH
//  394 
//  395     osal_nv_read( ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf );
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       ?V6,#0x8
        MOV       ?V7,#0x0
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_49:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
//  396     pBuf += Z_EXTADDR_LEN;
//  397 
//  398 #if defined NONWK
//  399     // Skip past ZStack only parameters for NONWK
//  400     *pBuf++ = 0;
//  401     *pBuf++ = 0;
//  402     *pBuf++ = 0;
//  403     *pBuf++ = 0;
//  404     *pBuf = 0;
//  405 #else
//  406     {
//  407       uint16 shortAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
//  408       *pBuf++ = LO_UINT16( shortAddr );
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R2
        LCALL     ?Subroutine10 & 0xFFFF
//  409       *pBuf++ = HI_UINT16( shortAddr );
//  410     }
??CrossCallReturnLabel_16:
        MOV       A,R3
        LCALL     ?Subroutine10 & 0xFFFF
//  411 
//  412     /* Return device type */
//  413     *pBuf++ = ZSTACK_DEVICE_BUILD;
??CrossCallReturnLabel_17:
        INC       DPTR
        MOV       A,#0x7
        MOVX      @DPTR,A
//  414 
//  415     /*Return device state */
//  416     *pBuf++ = (uint8)devState;
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,?V4
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,?V5
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  417 
//  418     if (ZG_DEVICE_RTR_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        JZ        ??MT_UtilGetDeviceInfo_3
        XRL       A,#0x1
        JNZ       ??MT_UtilGetDeviceInfo_4
//  419     {
//  420       *pBuf++ = assocCnt;
??MT_UtilGetDeviceInfo_3:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_31:
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,?V4
        ADD       A,#0xd
        MOV       ?V4,A
        JNC       ??MT_UtilGetDeviceInfo_5
        INC       ?V5
//  421 
//  422       if ( assocCnt )
??MT_UtilGetDeviceInfo_5:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        JZ        ??MT_UtilGetDeviceInfo_6
//  423       {
//  424         uint8 x;
//  425         uint16 *puint16 = assocList;
        MOV       A,R6
        MOV       R0,A
        MOV       A,R7
        MOV       R1,A
//  426 
//  427         for ( x = 0; x < assocCnt; x++, puint16++ )
        MOV       R4,#0x0
??MT_UtilGetDeviceInfo_7:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       A,R4
        CLR       C
        SUBB      A,R2
        JNC       ??MT_UtilGetDeviceInfo_6
//  428         {
//  429           *pBuf++ = LO_UINT16( *puint16 );
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      @DPTR,A
//  430           *pBuf++ = HI_UINT16( *puint16 );
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        MOVX      @DPTR,A
        MOV       A,?V4
        ADD       A,#0x2
        MOV       ?V4,A
        JNC       ??MT_UtilGetDeviceInfo_8
        INC       ?V5
//  431         }
??MT_UtilGetDeviceInfo_8:
        INC       R4
        MOV       A,R0
        ADD       A,#0x2
        MOV       R0,A
        JNC       ??MT_UtilGetDeviceInfo_7
        INC       R1
        SJMP      ??MT_UtilGetDeviceInfo_7
//  432       }
//  433     }
//  434     else
//  435     {
//  436       *pBuf++ = 0;
??MT_UtilGetDeviceInfo_4:
        LCALL     ?Subroutine19 & 0xFFFF
//  437     }
??CrossCallReturnLabel_32:
        CLR       A
        MOVX      @DPTR,A
        MOV       A,?V4
        ADD       A,#0xd
//  438 #endif
//  439 
//  440     MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
//  441                                  MT_UTIL_GET_DEVICE_INFO,
//  442                                  bufLen, buf );
??MT_UtilGetDeviceInfo_6:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       R3,?V2
        MOV       R2,#0x0
        MOV       R1,#0x67
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  443 
//  444     osal_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  445   }
//  446 
//  447   if ( assocList )
??MT_UtilGetDeviceInfo_2:
        MOV       A,R6
        ORL       A,R7
        JZ        ??MT_UtilGetDeviceInfo_9
//  448   {
//  449     osal_mem_free( assocList );
        ; Setup parameters for call to function osal_mem_free
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  450   }
//  451 }
??MT_UtilGetDeviceInfo_9:
        MOV       A,#0x1
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock15

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond16 Using cfiCommon0
          CFI Function MT_UtilGetDeviceInfo
          CFI Conditional ??CrossCallReturnLabel_31
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function MT_UtilGetDeviceInfo
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker18 Using cfiCommon1
          CFI (cfiPicker18) NoFunction
          CFI (cfiPicker18) Picker
        MOV       A,?V4
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,?V5
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiPicker18

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond19 Using cfiCommon0
          CFI Function MT_UtilGetDeviceInfo
          CFI Conditional ??CrossCallReturnLabel_46
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function MT_UtilGetNvInfo
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker21 Using cfiCommon1
          CFI (cfiPicker21) NoFunction
          CFI (cfiPicker21) Picker
        MOV       R3,#0x0
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiPicker21
        REQUIRE ??Subroutine27_0
        ; // Fall through to label ??Subroutine27_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine27_0:
          CFI Block cfiCond22 Using cfiCommon0
          CFI Function MT_UtilBindAddEntry
          CFI Conditional ??CrossCallReturnLabel_48
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 42)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function MT_UtilGetDeviceInfo
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-2
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function MT_UtilGetNvInfo
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-2
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker25 Using cfiCommon1
          CFI (cfiPicker25) NoFunction
          CFI (cfiPicker25) Picker
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
        RET
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiPicker25

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond26 Using cfiCommon0
          CFI Function MT_UtilGetDeviceInfo
          CFI Conditional ??CrossCallReturnLabel_49
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function MT_UtilGetNvInfo
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker28 Using cfiCommon1
          CFI (cfiPicker28) NoFunction
          CFI (cfiPicker28) Picker
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x1
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiPicker28
        REQUIRE ??Subroutine28_0
        ; // Fall through to label ??Subroutine28_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine28_0:
          CFI Block cfiCond29 Using cfiCommon0
          CFI Function MT_UtilGetNvInfo
          CFI Conditional ??CrossCallReturnLabel_51
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function MT_UtilGetNvInfo
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function MT_UtilGetNvInfo
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function MT_UtilGetNvInfo
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function MT_UtilGetDeviceInfo
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function MT_UtilGetNvInfo
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker35 Using cfiCommon1
          CFI (cfiPicker35) NoFunction
          CFI (cfiPicker35) Picker
        MOV       R3,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        RET
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiPicker35

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond36 Using cfiCommon0
          CFI Function MT_UtilGetDeviceInfo
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function MT_UtilGetDeviceInfo
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-2
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker38 Using cfiCommon1
          CFI (cfiPicker38) NoFunction
          CFI (cfiPicker38) Picker
        MOVX      @DPTR,A
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiPicker38
//  452 
//  453 #ifdef MT_SRNG
//  454 /***************************************************************************************************
//  455 * @fn      MT_UtilSrngGen
//  456 *
//  457 * @brief   Generate Secure Random Numbers
//  458 *
//  459 * @param   None.
//  460 *
//  461 * @return  void
//  462 ***************************************************************************************************/
//  463 static void MT_UtilSrngGen(void)
//  464 {
//  465   static uint32 count = 125000; /* 125000 * 8 bits = 1000000 bits */
//  466   uint8 outrng[100];
//  467   uint8 status;
//  468 
//  469   if(count > 0)
//  470   {
//  471     status = ssp_srng_generate((uint8 *)outrng, 100, NULL);
//  472     if (status != SRNG_SUCCESS)
//  473     {
//  474       if(RNG_INIT_ERROR == status)
//  475       {
//  476         ssp_srng_reseed();
//  477       }
//  478       else
//  479       {
//  480         while(1)
//  481         {
//  482           ASM_NOP;
//  483         }
//  484       } /* if(RNG_INIT_ERROR == status) */
//  485     }/*if (status != SRNG_SUCCESS) */
//  486 
//  487     if(count >= 100)
//  488     {
//  489       count -= 100;
//  490     }
//  491     else
//  492     {
//  493       count = 0;
//  494     }
//  495     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ |
//  496                                  (uint8)MT_RPC_SYS_DBG),
//  497                                   MT_DEBUG_MSG,
//  498                                   100,
//  499                                   outrng);
//  500     osal_start_timerEx(MT_TaskID, MT_SRNG_EVENT, 100);
//  501   }
//  502 }
//  503 #endif
//  504 
//  505 /***************************************************************************************************
//  506  * @fn      MT_UtilGetNvInfo
//  507  *
//  508  * @brief   The Get NV Info serial message.
//  509  *
//  510  * @param   None.
//  511  *
//  512  * @return  void
//  513  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  514 static void MT_UtilGetNvInfo(void)
MT_UtilGetNvInfo:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI Function MT_UtilGetNvInfo
        CODE
//  515 {
        FUNCALL MT_UtilGetNvInfo, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 6
        MOV       A,#-0x6
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
//  516   uint8 len;
//  517   uint8 stat;
//  518   uint8 *buf;
//  519   uint8 *pBuf;
//  520   uint16 tmp16;
//  521   uint32 tmp32;
//  522 
//  523   /*
//  524     Get required length of buffer
//  525     Status + ExtAddr + ChanList + PanID  + SecLevel + PreCfgKey
//  526   */
//  527   len = 1 + Z_EXTADDR_LEN + 4 + 2 + 1 + SEC_KEY_LEN;
//  528 
//  529   buf = osal_mem_alloc( len );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x20
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_47:
        MOV       R6,?V0
        MOV       R7,?V1
//  530   if ( buf )
        MOV       A,R2
        ORL       A,R7
        JNZ       $+5
        LJMP      ??MT_UtilGetNvInfo_0 & 0xFFFF
//  531   {
//  532     /* Assume NV not available */
//  533     osal_memset( buf, 0xFF, len );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x20
        MOV       R5,#0x0
        MOV       R1,#-0x1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  534 
//  535     /* Skip over status */
//  536     pBuf = buf + 1;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       ?V2,DPL
        MOV       ?V3,DPH
//  537 
//  538     /* Start with 64-bit extended address */
//  539     stat = osal_nv_read( ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf );
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V0,#0x8
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_50:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R1
        MOV       ?V0,A
//  540     if ( stat ) stat = 0x01;
        JZ        ??MT_UtilGetNvInfo_1
        MOV       ?V0,#0x1
//  541     pBuf += Z_EXTADDR_LEN;
??MT_UtilGetNvInfo_1:
        MOV       A,?V2
        ADD       A,#0x8
        MOV       ?V2,A
        JNC       ??MT_UtilGetNvInfo_2
        INC       ?V3
//  542 
//  543     /* Scan channel list (bit mask) */
//  544     if (  osal_nv_read( ZCD_NV_CHANLIST, 0, sizeof( tmp32 ), &tmp32 ) )
??MT_UtilGetNvInfo_2:
        ; Setup parameters for call to function osal_nv_read
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V4,#0x4
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7c
        LCALL     ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_51:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R1
        JZ        ??MT_UtilGetNvInfo_3
//  545     {
//  546       stat |= 0x02;
        MOV       A,?V0
        SETB      0xE0 /* A   */.1
        MOV       ?V0,A
        SJMP      ??MT_UtilGetNvInfo_4
//  547     }
//  548     else
//  549     {
//  550       pBuf[0] = BREAK_UINT32( tmp32, 3 );
??MT_UtilGetNvInfo_3:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       A,#0x18
        MOV       R0,#?V4
        LCALL     ?UL_SHR
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOV       A,?V4
        MOVX      @DPTR,A
//  551       pBuf[1] = BREAK_UINT32( tmp32, 2 );
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       A,#0x10
        MOV       R0,#?V4
        LCALL     ?UL_SHR
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        MOV       A,?V4
        MOVX      @DPTR,A
//  552       pBuf[2] = BREAK_UINT32( tmp32, 1 );
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       A,?V5
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
//  553       pBuf[3] = BREAK_UINT32( tmp32, 0 );
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,?V4
        MOVX      @DPTR,A
//  554     }
//  555     pBuf += sizeof( tmp32 );
??MT_UtilGetNvInfo_4:
        MOV       A,?V2
        ADD       A,#0x4
        MOV       ?V2,A
        JNC       ??MT_UtilGetNvInfo_5
        INC       ?V3
//  556 
//  557     /* ZigBee PanID */
//  558     if ( osal_nv_read( ZCD_NV_PANID, 0, sizeof( tmp16 ), &tmp16 ) )
??MT_UtilGetNvInfo_5:
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V4,#0x2
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7d
        LCALL     ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_52:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R1
        JZ        ??MT_UtilGetNvInfo_6
//  559     {
//  560       stat |= 0x04;
        MOV       A,?V0
        SETB      0xE0 /* A   */.2
        MOV       ?V0,A
        SJMP      ??MT_UtilGetNvInfo_7
//  561     }
//  562     else
//  563     {
//  564       pBuf[0] = LO_UINT16( tmp16 );
??MT_UtilGetNvInfo_6:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      @DPTR,A
//  565       pBuf[1] = HI_UINT16( tmp16 );
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        MOVX      @DPTR,A
//  566     }
//  567     pBuf += sizeof( tmp16 );
??MT_UtilGetNvInfo_7:
        MOV       A,?V2
        ADD       A,#0x2
        MOV       ?V2,A
        JNC       ??MT_UtilGetNvInfo_8
        INC       ?V3
//  568 
//  569     /* Security level */
//  570     if ( osal_nv_read( ZCD_NV_SECURITY_LEVEL, 0, sizeof( uint8 ), pBuf++ ) )
??MT_UtilGetNvInfo_8:
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V4,#0x1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x61
        LCALL     ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_53:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R1
        MOV       R0,A
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        MOV       ?V2,DPL
        MOV       ?V3,DPH
        JZ        ??MT_UtilGetNvInfo_9
//  571     {
//  572       stat |= 0x08;
        MOV       A,?V0
        SETB      0xE0 /* A   */.3
        MOV       ?V0,A
//  573     }
//  574     /* Pre-configured security key */
//  575     if ( osal_nv_read( ZCD_NV_PRECFGKEY, 0, SEC_KEY_LEN, pBuf ) )
??MT_UtilGetNvInfo_9:
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V2,#0x10
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x62
        LCALL     ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_54:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R1
        JZ        ??MT_UtilGetNvInfo_10
//  576     {
//  577       stat |= 0x10;
        MOV       A,?V0
        SETB      0xE0 /* A   */.4
        MOV       ?V0,A
//  578     }
//  579     /* Status bit mask - bit=1 indicates failure */
//  580     *buf = stat;
??MT_UtilGetNvInfo_10:
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,?V0
        MOVX      @DPTR,A
//  581 
//  582     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), MT_UTIL_GET_NV_INFO,
//  583                                   len, buf );
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R3,#0x20
        MOV       R2,#0x1
        MOV       R1,#0x67
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  584 
//  585     osal_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  586   }
//  587 }
??MT_UtilGetNvInfo_0:
        MOV       A,#0x6
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock39
//  588 
//  589 /***************************************************************************************************
//  590  * @fn      MT_UtilSetPanID
//  591  *
//  592  * @brief   Set PanID message
//  593  *
//  594  * @param   pBuf - pointer to the data
//  595  *
//  596  * @return  void
//  597  ***************************************************************************************************/
//  598 static void MT_UtilSetPanID(uint8 *pBuf)
//  599 {
//  600   uint16 temp16;
//  601   uint8 retValue;
//  602   uint8 cmdId;
//  603 
//  604   /* parse header */
//  605   cmdId = pBuf[MT_RPC_POS_CMD1];
//  606   pBuf += MT_RPC_FRAME_HDR_SZ;
//  607 
//  608   temp16 = osal_build_uint16( pBuf );
//  609 
//  610   retValue = osal_nv_write(ZCD_NV_PANID, 0, osal_nv_item_len( ZCD_NV_PANID ), &temp16);
//  611 
//  612   /* Build and send back the response */
//  613   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue);
//  614 }
//  615 
//  616 /***************************************************************************************************
//  617  * @fn      MT_UtilSetChannels
//  618  *
//  619  * @brief   Set Channels
//  620  *
//  621  * @param   pBuf - pointer to the data
//  622  *
//  623  * @return  void
//  624  ***************************************************************************************************/
//  625 static void MT_UtilSetChannels(uint8 *pBuf)
//  626 {
//  627   uint32 tmp32;
//  628   uint8 retValue;
//  629   uint8 cmdId;
//  630 
//  631   /* parse header */
//  632   cmdId = pBuf[MT_RPC_POS_CMD1];
//  633   pBuf += MT_RPC_FRAME_HDR_SZ;
//  634 
//  635   tmp32 = osal_build_uint32( pBuf, 4 );
//  636 
//  637   retValue = osal_nv_write(ZCD_NV_CHANLIST, 0, osal_nv_item_len( ZCD_NV_CHANLIST ), &tmp32);
//  638 
//  639   /* Build and send back the response */
//  640   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue);
//  641 }
//  642 
//  643 /***************************************************************************************************
//  644  * @fn      MT_UtilSetSecLevel
//  645  *
//  646  * @brief   Set Sec Level
//  647  *
//  648  * @param   byte *msg - pointer to the data
//  649  *
//  650  * @return  void
//  651  ***************************************************************************************************/
//  652 static void MT_UtilSetSecLevel(uint8 *pBuf)
//  653 {
//  654   uint8 retValue;
//  655   uint8 cmdId;
//  656 
//  657   /* parse header */
//  658   cmdId = pBuf[MT_RPC_POS_CMD1];
//  659   pBuf += MT_RPC_FRAME_HDR_SZ;
//  660 
//  661   retValue = osal_nv_write( ZCD_NV_SECURITY_LEVEL, 0, osal_nv_item_len( ZCD_NV_SECURITY_LEVEL ), pBuf);
//  662 
//  663   /* Build and send back the response */
//  664   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
//  665 
//  666 }
//  667 
//  668 /***************************************************************************************************
//  669  * @fn      MT_UtilSetPreCfgKey
//  670  *
//  671  * @brief   Set Pre Cfg Key
//  672  *
//  673  * @param   pBuf - pointer to the data
//  674  *
//  675  * @return  void
//  676  ***************************************************************************************************/
//  677 static void MT_UtilSetPreCfgKey(uint8 *pBuf)
//  678 {
//  679   uint8 retValue;
//  680   uint8 cmdId;
//  681 
//  682   /* parse header */
//  683   cmdId = pBuf[MT_RPC_POS_CMD1];
//  684   pBuf += MT_RPC_FRAME_HDR_SZ;
//  685 
//  686   retValue = osal_nv_write( ZCD_NV_PRECFGKEY, 0, osal_nv_item_len( ZCD_NV_PRECFGKEY ), pBuf);
//  687 
//  688   /* Build and send back the response */
//  689   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
//  690 
//  691 }
//  692 
//  693 #ifdef FEATURE_GET_PRIMARY_IEEE
//  694 /***************************************************************************************************
//  695  * @fn      MT_UtilGetPrimaryIEEE
//  696  *
//  697  * @brief   Return a copy of the Primary IEEE address
//  698  *
//  699  * @param   none
//  700  *
//  701  * @return  void
//  702  ***************************************************************************************************/
//  703 static void MT_UtilGetPrimaryIEEE(void)
//  704 {
//  705   uint8 i;
//  706   uint8 retBuf[Z_EXTADDR_LEN+1];
//  707 
//  708   retBuf[0] = SUCCESS;
//  709 
//  710   for(i = 1; i <= Z_EXTADDR_LEN; i++)
//  711   {
//  712     retBuf[i] = ieeeMac[i];
//  713   }
//  714 
//  715   MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
//  716                                   MT_UTIL_GET_PRIMARY_IEEE, Z_EXTADDR_LEN+1, retBuf );
//  717 }
//  718 #endif /* FEATURE_GET_PRIMARY_IEEE */
//  719 
//  720 /***************************************************************************************************
//  721  * @fn      MT_UtilCallbackSub
//  722  *
//  723  * @brief   The Callback subscribe.
//  724  *
//  725  * @param   pBuf - pointer to the data
//  726  *
//  727  * @return  void
//  728  ***************************************************************************************************/
//  729 void MT_UtilCallbackSub(uint8 *pBuf)
//  730 {
//  731   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
//  732   uint8 retValue = ZFailure;
//  733 
//  734 #if defined(MT_MAC_CB_FUNC) || defined(MT_NWK_CB_FUNC) || defined(MT_ZDO_CB_FUNC) || defined(MT_AF_CB_FUNC) || defined(MT_SAPI_CB_FUNC)
//  735   uint8 subSystem;
//  736   uint16 subscribed_command;
//  737 
//  738   // Move past header
//  739   retValue = ZSuccess;
//  740   pBuf += MT_RPC_FRAME_HDR_SZ;
//  741 
//  742   /* Command */
//  743   subscribed_command = osal_build_uint16( pBuf );
//  744   pBuf += 2;
//  745 
//  746   /* Subsystem - 5 bits on the MSB of the command */
//  747   subSystem = HI_UINT16(subscribed_command) & 0x1F ;
//  748 
//  749   /* What is the action - SUBSCRIBE or !SUBSCRIBE */
//  750   if (*pBuf)
//  751   {
//  752     /* Turn ON */
//  753   #if defined( MT_MAC_CB_FUNC )
//  754     if ((subSystem == MT_RPC_SYS_MAC) || (subscribed_command == 0xFFFF))
//  755     {
//  756     #if !defined (FEATURE_DUAL_MAC)
//  757       _macCallbackSub = 0xFFFF;
//  758     #else
//  759       DMMGR_SaveMacCbReg( 0xFFFF );
//  760     #endif /* ! FEATURE_DUAL_MAC */
//  761     }
//  762   #endif
//  763 
//  764   #if defined( MT_NWK_CB_FUNC )
//  765     if ((subSystem == MT_RPC_SYS_NWK) || (subscribed_command == 0xFFFF))
//  766       _nwkCallbackSub = 0xFFFF;
//  767   #endif
//  768 
//  769   #if defined( MT_ZDO_CB_FUNC )
//  770     if ((subSystem == MT_RPC_SYS_ZDO) || (subscribed_command == 0xFFFF))
//  771       _zdoCallbackSub = 0xFFFFFFFF;
//  772   #endif
//  773 
//  774   #if defined( MT_AF_CB_FUNC )
//  775     if ((subSystem == MT_RPC_SYS_AF) || (subscribed_command == 0xFFFF))
//  776       _afCallbackSub = 0xFFFF;
//  777   #endif
//  778 
//  779   #if defined( MT_SAPI_CB_FUNC )
//  780     if ((subSystem == MT_RPC_SYS_SAPI) || (subscribed_command == 0xFFFF))
//  781       _sapiCallbackSub = 0xFFFF;
//  782   #endif
//  783   }
//  784   else
//  785   {
//  786     /* Turn OFF */
//  787   #if defined( MT_MAC_CB_FUNC )
//  788     if ((subSystem == MT_RPC_SYS_MAC) || (subscribed_command == 0xFFFF))
//  789       _macCallbackSub = 0x0000;
//  790 
//  791   #if defined (FEATURE_DUAL_MAC )
//  792     DMMGR_SaveMacCbReg( 0x0000 );
//  793   #endif /* FEATURE_DUAL_MAC */
//  794 
//  795   #endif
//  796 
//  797   #if defined( MT_NWK_CB_FUNC )
//  798     if ((subSystem == MT_RPC_SYS_NWK) || (subscribed_command == 0xFFFF))
//  799       _nwkCallbackSub = 0x0000;
//  800   #endif
//  801 
//  802   #if defined( MT_ZDO_CB_FUNC )
//  803     if ((subSystem == MT_RPC_SYS_ZDO) || (subscribed_command == 0xFFFF))
//  804       _zdoCallbackSub = 0x00000000;
//  805   #endif
//  806 
//  807   #if defined( MT_AF_CB_FUNC )
//  808     if ((subSystem == MT_RPC_SYS_AF) || (subscribed_command == 0xFFFF))
//  809       _afCallbackSub = 0x0000;
//  810   #endif
//  811 
//  812   #if defined( MT_SAPI_CB_FUNC )
//  813     if ((subSystem == MT_RPC_SYS_SAPI) || (subscribed_command == 0xFFFF))
//  814         _sapiCallbackSub = 0x0000;
//  815   #endif
//  816   }
//  817 #endif  // MT_MAC_CB_FUNC || MT_NWK_CB_FUNC || MT_ZDO_CB_FUNC || MT_AF_CB_FUNC || MT_SAPI_CB_FUNC || MT_SAPI_CB_FUNC
//  818 
//  819   /* Build and send back the response */
//  820   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
//  821 }
//  822 
//  823 #if (defined HAL_KEY) && (HAL_KEY == TRUE)
//  824 /***************************************************************************************************
//  825  * @fn      MT_UtilKeyEvent
//  826  *
//  827  * @brief   Process Key Event
//  828  *
//  829  * @param   pBuf - pointer to the data
//  830  *
//  831  * @return  void
//  832  ***************************************************************************************************/
//  833 static void MT_UtilKeyEvent(uint8 *pBuf)
//  834 {
//  835   uint8 x = 0;
//  836   uint8 retValue;
//  837   uint8 cmdId;
//  838 
//  839   /* parse header */
//  840   cmdId = pBuf[MT_RPC_POS_CMD1];
//  841   pBuf += MT_RPC_FRAME_HDR_SZ;
//  842 
//  843   /* Translate between SPI values to device values */
//  844   if ( *pBuf & 0x01 )
//  845     x |= HAL_KEY_SW_1;
//  846   if ( *pBuf & 0x02 )
//  847     x |= HAL_KEY_SW_2;
//  848   if ( *pBuf & 0x04 )
//  849     x |= HAL_KEY_SW_3;
//  850   if ( *pBuf & 0x08 )
//  851     x |= HAL_KEY_SW_4;
//  852 #if defined ( HAL_KEY_SW_5 )
//  853   if ( *pBuf & 0x10 )
//  854     x |= HAL_KEY_SW_5;
//  855 #endif
//  856 #if defined ( HAL_KEY_SW_6 )
//  857   if ( *pBuf & 0x20 )
//  858     x |= HAL_KEY_SW_6;
//  859 #endif
//  860 #if defined ( HAL_KEY_SW_7 )
//  861   if ( *pBuf & 0x40 )
//  862     x |= HAL_KEY_SW_7;
//  863 #endif
//  864 #if defined ( HAL_KEY_SW_8 )
//  865   if ( *pBuf & 0x80 )
//  866     x |= HAL_KEY_SW_8;
//  867 #endif
//  868   pBuf++;
//  869 
//  870   retValue = OnBoard_SendKeys(x, *pBuf);
//  871 
//  872   /* Build and send back the response */
//  873   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
//  874 }
//  875 #endif
//  876 
//  877 /***************************************************************************************************
//  878  * @fn      MT_UtilTimeAlive
//  879  *
//  880  * @brief   Process Time Alive
//  881  *
//  882  * @param   None.
//  883  *
//  884  * @return  None
//  885  ***************************************************************************************************/
//  886 static void MT_UtilTimeAlive(void)
//  887 {
//  888   uint8 timeAlive[4];
//  889   uint32 tmp32;
//  890 
//  891   /* Time since last reset (seconds) */
//  892   tmp32 = osal_GetSystemClock() / 1000;
//  893 
//  894   /* Convert to high byte first into temp buffer */
//  895   osal_buffer_uint32( timeAlive, tmp32 );
//  896 
//  897   /* Build and send back the response */
//  898   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
//  899                                        MT_UTIL_TIME_ALIVE, sizeof(timeAlive), timeAlive);
//  900 }
//  901 
//  902 #if (defined HAL_LED) && (HAL_LED == TRUE)
//  903 /***************************************************************************************************
//  904  * @fn      MT_UtilLedControl
//  905  *
//  906  * @brief   Process the LED Control Message
//  907  *
//  908  * @param   pBuf - pointer to the received data
//  909  *
//  910  * @return  None
//  911  ***************************************************************************************************/
//  912 static void MT_UtilLedControl(uint8 *pBuf)
//  913 {
//  914   uint8 iLed, Led, iMode, Mode, cmdId;
//  915   uint8 retValue;
//  916 
//  917   /* parse header */
//  918   cmdId = pBuf[MT_RPC_POS_CMD1];
//  919   pBuf += MT_RPC_FRAME_HDR_SZ;
//  920 
//  921   /* LED and Mode */
//  922   iLed = *pBuf++;
//  923   iMode = *pBuf;
//  924 
//  925   if ( iLed == 1 )
//  926     Led = HAL_LED_1;
//  927   else if ( iLed == 2 )
//  928     Led = HAL_LED_2;
//  929   else if ( iLed == 3 )
//  930     Led = HAL_LED_3;
//  931   else if ( iLed == 4 )
//  932     Led = HAL_LED_4;
//  933   else if ( iLed == 0xFF )
//  934     Led = HAL_LED_ALL;
//  935   else
//  936     Led = 0;
//  937 
//  938   if ( iMode == 0 )
//  939     Mode = HAL_LED_MODE_OFF;
//  940   else if ( iMode == 1 )
//  941     Mode = HAL_LED_MODE_ON;
//  942   else if ( iMode == 2 )
//  943     Mode = HAL_LED_MODE_BLINK;
//  944   else if ( iMode == 3 )
//  945     Mode = HAL_LED_MODE_FLASH;
//  946   else if ( iMode == 4 )
//  947     Mode = HAL_LED_MODE_TOGGLE;
//  948   else
//  949     Led = 0;
//  950 
//  951   if ( Led != 0 )
//  952   {
//  953     HalLedSet (Led, Mode);
//  954     retValue = ZSuccess;
//  955   }
//  956   else
//  957   {
//  958     retValue = ZFailure;
//  959   }
//  960 
//  961   /* Build and send back the response */
//  962   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
//  963 }
//  964 #endif /* HAL_LED */
//  965 
//  966 /***************************************************************************************************
//  967  * @fn          MT_UtilSrcMatchEnable
//  968  *
//  969  * @brief      Enabled AUTOPEND and source address matching.
//  970  *
//  971  * @param      pBuf - Buffer contains the data
//  972  *
//  973  * @return     void
//  974  ***************************************************************************************************/
//  975 static void MT_UtilSrcMatchEnable (uint8 *pBuf)
//  976 {
//  977   uint8 retValue, cmdId;
//  978 
//  979   /* Parse header */
//  980   cmdId = pBuf[MT_RPC_POS_CMD1];
//  981   pBuf += MT_RPC_FRAME_HDR_SZ;
//  982 
//  983 #ifdef AUTO_PEND
//  984   /* Call the routine */
//  985   retValue = ZMacSrcMatchEnable();
//  986 #else
//  987   retValue = ZMacUnsupported;
//  988 #endif
//  989 
//  990   /* Build and send back the response */
//  991   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
//  992 
//  993 }
//  994 
//  995 /***************************************************************************************************
//  996  * @fn          MT_UtilSrcMatchAddEntry
//  997  *
//  998  * @brief       Add a short or extended address to source address table.
//  999  *
// 1000  * @param       pBuf - Buffer contains the data
// 1001  *
// 1002  * @return      void
// 1003  ***************************************************************************************************/
// 1004 static void MT_UtilSrcMatchAddEntry (uint8 *pBuf)
// 1005 {
// 1006   uint8 retValue, cmdId;
// 1007 
// 1008   /* Parse header */
// 1009   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1010   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1011 
// 1012 #ifdef AUTO_PEND
// 1013   uint16 panID;
// 1014   zAddrType_t devAddr;
// 1015 
// 1016   /* Address mode */
// 1017   devAddr.addrMode = *pBuf++;
// 1018 
// 1019   /* Address based on the address mode */
// 1020   MT_UtilSpi2Addr( &devAddr, pBuf);
// 1021   pBuf += Z_EXTADDR_LEN;
// 1022 
// 1023   /* PanID */
// 1024   panID = osal_build_uint16( pBuf );
// 1025 
// 1026   /* Call the routine */
// 1027   retValue =  ZMacSrcMatchAddEntry (&devAddr, panID);
// 1028 #else
// 1029   retValue = ZMacUnsupported;
// 1030 #endif
// 1031 
// 1032   /* Build and send back the response */
// 1033   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
// 1034 }
// 1035 
// 1036 /***************************************************************************************************
// 1037  * @fn          MT_UtilSrcMatchDeleteEntry
// 1038  *
// 1039  * @brief      Delete a short or extended address from source address table.
// 1040  *
// 1041  * @param      pBuf - Buffer contains the data
// 1042  *
// 1043  * @return     void
// 1044  ***************************************************************************************************/
// 1045 static void MT_UtilSrcMatchDeleteEntry (uint8 *pBuf)
// 1046 {
// 1047   uint8 retValue, cmdId;
// 1048 
// 1049   /* Parse header */
// 1050   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1051   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1052 
// 1053 #ifdef AUTO_PEND
// 1054   uint16 panID;
// 1055   zAddrType_t devAddr;
// 1056 
// 1057   /* Address mode */
// 1058   devAddr.addrMode = *pBuf++;
// 1059 
// 1060   /* Address based on the address mode */
// 1061   MT_UtilSpi2Addr( &devAddr, pBuf);
// 1062   pBuf += Z_EXTADDR_LEN;
// 1063 
// 1064   /* PanID */
// 1065   panID = osal_build_uint16( pBuf );
// 1066 
// 1067   /* Call the routine */
// 1068   retValue =  ZMacSrcMatchDeleteEntry (&devAddr, panID);
// 1069 #else
// 1070   retValue = ZMacUnsupported;
// 1071 #endif
// 1072 
// 1073   /* Build and send back the response */
// 1074   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
// 1075 }
// 1076 
// 1077 /***************************************************************************************************
// 1078  * @fn          MT_UtilSrcMatchCheckSrcAddr
// 1079  *
// 1080  * @brief      Check if a short or extended address is in the source address table.
// 1081  *
// 1082  * @param      pBuf - Buffer contains the data
// 1083  *
// 1084  * @return     void
// 1085  ***************************************************************************************************/
// 1086 static void MT_UtilSrcMatchCheckSrcAddr (uint8 *pBuf)
// 1087 {
// 1088   uint8 cmdId;
// 1089   uint8 retArray[2];
// 1090 
// 1091   /* Parse header */
// 1092   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1093   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1094 
// 1095 #if 0  /* Unsupported  */
// 1096   uint16 panID;
// 1097   zAddrType_t devAddr;
// 1098 
// 1099   /* Address mode */
// 1100   devAddr.addrMode = *pBuf++;
// 1101 
// 1102   /* Address based on the address mode */
// 1103   MT_UtilSpi2Addr( &devAddr, pBuf);
// 1104   pBuf += Z_EXTADDR_LEN;
// 1105 
// 1106   /* PanID */
// 1107   panID = osal_build_uint16( pBuf );
// 1108 
// 1109   /* Call the routine */
// 1110   retArray[1] =  ZMacSrcMatchCheckSrcAddr (&devAddr, panID);
// 1111 
// 1112     /* Return failure if the index is invalid */
// 1113   if (retArray[1] == ZMacSrcMatchInvalidIndex )
// 1114   {
// 1115     retArray[0] = ZFailure;
// 1116   }
// 1117   else
// 1118   {
// 1119     retArray[0] = ZSuccess;
// 1120   }
// 1121 #else
// 1122   retArray[0] = ZMacUnsupported;
// 1123   retArray[1] = ZMacSrcMatchInvalidIndex;
// 1124 #endif
// 1125 
// 1126   /* Build and send back the response */
// 1127   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 2, retArray );
// 1128 }
// 1129 
// 1130 /***************************************************************************************************
// 1131  * @fn          MT_UtilSrcMatchAckAllPending
// 1132  *
// 1133  * @brief       Enabled/disable acknowledging all packets with pending bit set
// 1134  *              It is normally enabled when adding new entries to
// 1135  *              the source address table fails due to the table is full, or
// 1136  *              disabled when more entries are deleted and the table has
// 1137  *              empty slots.
// 1138  *
// 1139  * @param       pBuf - Buffer contains the data
// 1140  *
// 1141  * @return      void
// 1142  ***************************************************************************************************/
// 1143 static void MT_UtilSrcMatchAckAllPending (uint8 *pBuf)
// 1144 {
// 1145   uint8 retValue, cmdId;
// 1146 
// 1147   /* Parse header */
// 1148   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1149   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1150 
// 1151 #ifdef AUTO_PEND
// 1152   /* Call the routine */
// 1153   retValue = ZMacSrcMatchAckAllPending(*pBuf);
// 1154 #else
// 1155   retValue = ZMacUnsupported;
// 1156 #endif
// 1157 
// 1158   /* Build and send back the response */
// 1159   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
// 1160 }
// 1161 
// 1162 /***************************************************************************************************
// 1163  * @fn          MT_UtilSrcMatchCheckAllPending
// 1164  *
// 1165  * @brief       Check if acknowledging all packets with pending bit set
// 1166  *              is enabled.
// 1167  *
// 1168  * @param       pBuf - Buffer contains the data
// 1169  *
// 1170  * @return      void
// 1171  ***************************************************************************************************/
// 1172 static void MT_UtilSrcMatchCheckAllPending (uint8 *pBuf)
// 1173 {
// 1174   uint8 retArray[2], cmdId;
// 1175 
// 1176   /* Parse header */
// 1177   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1178   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1179 
// 1180 #ifdef AUTO_PEND
// 1181   /* Call the routine */
// 1182   retArray[0] = ZMacSuccess;
// 1183   retArray[1] = ZMacSrcMatchCheckAllPending();
// 1184 #else
// 1185   retArray[0] = ZMacUnsupported;
// 1186   retArray[1] = FALSE;
// 1187 #endif
// 1188 
// 1189   /* Build and send back the response */
// 1190   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 2, retArray );
// 1191 }
// 1192 
// 1193 /***************************************************************************************************
// 1194  * SUPPORT
// 1195  ***************************************************************************************************/
// 1196 
// 1197 #ifdef AUTO_PEND
// 1198 /***************************************************************************************************
// 1199  * @fn      MT_UtilRevExtCpy
// 1200  *
// 1201  * @brief
// 1202  *
// 1203  *   Reverse-copy an extended address.
// 1204  *
// 1205  * @param   pDst - Pointer to data destination
// 1206  * @param   pSrc - Pointer to data source
// 1207  *
// 1208  * @return  void
// 1209  ***************************************************************************************************/
// 1210 static void MT_UtilRevExtCpy( uint8 *pDst, uint8 *pSrc )
// 1211 {
// 1212   int8 i;
// 1213 
// 1214   for ( i = Z_EXTADDR_LEN - 1; i >= 0; i-- )
// 1215   {
// 1216     *pDst++ = pSrc[i];
// 1217   }
// 1218 }
// 1219 
// 1220 /***************************************************************************************************
// 1221  * @fn      MT_UtilSpi2Addr
// 1222  *
// 1223  * @brief   Copy an address from an SPI message to an address struct.  The
// 1224  *          addrMode in pAddr must already be set.
// 1225  *
// 1226  * @param   pDst - Pointer to address struct
// 1227  * @param   pSrc - Pointer SPI message byte array
// 1228  *
// 1229  * @return  void
// 1230  ***************************************************************************************************/
// 1231 static void MT_UtilSpi2Addr( zAddrType_t *pDst, uint8 *pSrc )
// 1232 {
// 1233   if ( pDst->addrMode == Addr16Bit )
// 1234   {
// 1235     pDst->addr.shortAddr = osal_build_uint16( pSrc );
// 1236   }
// 1237   else if ( pDst->addrMode == Addr64Bit )
// 1238   {
// 1239     MT_UtilRevExtCpy( pDst->addr.extAddr, pSrc );
// 1240   }
// 1241 }
// 1242 #endif // AUTO_PEND
// 1243 
// 1244 /***************************************************************************************************
// 1245  * @fn      MT_UtilGpioRead
// 1246  *
// 1247  * @brief   Read values of all GPIOs (P0_0 -P2_4)
// 1248  *
// 1249  * @param   void
// 1250  *
// 1251  * @return  P0, P1, P2, P0DIR, P1DIR, P2DIR
// 1252  ***************************************************************************************************/
// 1253 static void MT_UtilGpioRead(uint8 *pBuf)
// 1254 {
// 1255 #if defined ( HAL_MCU_CC2530 )
// 1256   uint8 rtrn[6] = {P0, P1, P2, P0DIR, P1DIR, P2DIR};
// 1257 #else
// 1258   uint8 rtrn[6] = {0, 0, 0, 0, 0, 0};
// 1259 #endif
// 1260   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), MT_UTIL_GPIO_READ,
// 1261     6, rtrn);
// 1262 }
// 1263 
// 1264 /***************************************************************************************************
// 1265  * @fn      MT_UtilGpioSetDirection
// 1266  *
// 1267  * @brief   Set the direction of a specific GPIO (P0_0 -P2_4)
// 1268  *
// 1269  * @param   port - 0, 1 or 2
// 1270  * @param   bit - 0 - 7
// 1271  * @param   direction - 0 for input, 1 for output
// 1272  *
// 1273  * @return  oldP0DIR, oldP1DIR, oldP2DIR, newP0DIR, newP1DIR, newP2DIR
// 1274  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1275 static void MT_UtilGpioSetDirection(uint8 *pBuf)
MT_UtilGpioSetDirection:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI Function MT_UtilGpioSetDirection
        CODE
// 1276 {
        FUNCALL MT_UtilGpioSetDirection, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 6
        MOV       A,#-0x6
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 1277 #if defined ( HAL_MCU_CC2530 )
// 1278   uint8 rtrn[6] = {P0DIR, P1DIR, P2DIR, 0, 0, 0};
        MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0}>`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x6
        LCALL     ?MOVE_LONG8_XDATA_XDATA
        MOV       A,0xfd
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        MOV       A,0xfe
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,0xff
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine4 & 0xFFFF
// 1279   uint8 port = pBuf[MT_RPC_POS_DAT0 + 0];
// 1280   uint8 bit = pBuf[MT_RPC_POS_DAT0 + 1];
// 1281   uint8 direction = pBuf[MT_RPC_POS_DAT0 + 2];
// 1282 
// 1283   if (direction == 0)
??CrossCallReturnLabel_4:
        JNZ       ??MT_UtilGpioSetDirection_0
// 1284   {
// 1285     switch (port)
        MOV       A,R1
        JZ        ??MT_UtilGpioSetDirection_1
        DEC       A
        JZ        ??MT_UtilGpioSetDirection_2
        DEC       A
        JZ        ??MT_UtilGpioSetDirection_3
        SJMP      ??MT_UtilGpioSetDirection_4
// 1286     {
// 1287       case 0:
// 1288         P0DIR &= (~ BV(bit));
??MT_UtilGpioSetDirection_1:
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       A,R0
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        CPL       A
        ANL       0xfd,A
// 1289         break;
        SJMP      ??MT_UtilGpioSetDirection_4
// 1290       case 1:
// 1291         P1DIR &= (~ BV(bit));
??MT_UtilGpioSetDirection_2:
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       A,R0
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        CPL       A
        ANL       0xfe,A
// 1292         break;
        SJMP      ??MT_UtilGpioSetDirection_4
// 1293       case 2:
// 1294         P2DIR &= (~ BV(bit));
??MT_UtilGpioSetDirection_3:
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       A,R0
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        CPL       A
        ANL       0xff,A
// 1295         break;
        SJMP      ??MT_UtilGpioSetDirection_4
// 1296     }
// 1297   }
// 1298   else
// 1299   {
// 1300     switch (port)
??MT_UtilGpioSetDirection_0:
        MOV       A,R1
        JZ        ??MT_UtilGpioSetDirection_5
        DEC       A
        JZ        ??MT_UtilGpioSetDirection_6
        DEC       A
        JZ        ??MT_UtilGpioSetDirection_7
        SJMP      ??MT_UtilGpioSetDirection_4
// 1301     {
// 1302       case 0:
// 1303         P0DIR |= BV(bit);
??MT_UtilGpioSetDirection_5:
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       A,R0
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        ORL       0xfd,A
// 1304         break;
        SJMP      ??MT_UtilGpioSetDirection_4
// 1305       case 1:
// 1306         P1DIR |= BV(bit);
??MT_UtilGpioSetDirection_6:
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       A,R0
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        ORL       0xfe,A
// 1307         break;
        SJMP      ??MT_UtilGpioSetDirection_4
// 1308       case 2:
// 1309         P2DIR |= BV(bit);
??MT_UtilGpioSetDirection_7:
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       A,R0
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        ORL       0xff,A
// 1310         break;
// 1311     }
// 1312   }
// 1313 
// 1314   rtrn[3] = P0DIR;
??MT_UtilGpioSetDirection_4:
        MOV       A,0xfd
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1315   rtrn[4] = P1DIR;
        MOV       A,0xfe
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1316   rtrn[5] = P2DIR;
        MOV       A,0xff
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1317 #else
// 1318   uint8 rtrn[6] = {0, 0, 0, 0, 0, 0};
// 1319 #endif
// 1320 
// 1321   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), MT_UTIL_GPIO_SET_DIRECTION,
// 1322     6, rtrn);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x6
        MOV       R2,#0x14
        MOV       R1,#0x67
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1323 }
        MOV       A,#0x6
          CFI EndBlock cfiBlock40
        REQUIRE ?Subroutine1
        REQUIRE P0DIR
        REQUIRE P1DIR
        REQUIRE P2DIR
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock41
        REQUIRE ??Subroutine29_0
        ; // Fall through to label ??Subroutine29_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine29_0:
          CFI Block cfiBlock42 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock42

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0}>`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
// 1324 
// 1325 /***************************************************************************************************
// 1326  * @fn      MT_UtilGpioWrite
// 1327  *
// 1328  * @brief   Write value of a specific GPIO (P0_0 -P2_4)
// 1329  *
// 1330  * @param   port - 0, 1 or 2
// 1331  * @param   bit - 0 - 7
// 1332  * @param   value - 0 or 1
// 1333  *
// 1334  * @return  oldP0, oldP1, oldP2, newP0, newP1, newP2, P0DIR, P1DIR, P2DIR
// 1335  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1336 static void MT_UtilGpioWrite(uint8 *pBuf)
MT_UtilGpioWrite:
          CFI Block cfiBlock43 Using cfiCommon0
          CFI Function MT_UtilGpioWrite
        CODE
// 1337 {
        FUNCALL MT_UtilGpioWrite, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 1338 #if defined ( HAL_MCU_CC2530 )
// 1339   uint8 rtrn[9] = {P0, P1, P2, 0, 0, 0, P0DIR, P1DIR, P2DIR};
        MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0}>`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x9
        LCALL     ?MOVE_LONG8_XDATA_XDATA
        MOV       A,0x80
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        MOV       A,0x90
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,0xa0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,0xfd
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,0xfe
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,0xff
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine4 & 0xFFFF
// 1340   uint8 port = pBuf[MT_RPC_POS_DAT0 + 0];
// 1341   uint8 bit = pBuf[MT_RPC_POS_DAT0 + 1];
// 1342   uint8 value = pBuf[MT_RPC_POS_DAT0 + 2];
// 1343 
// 1344   if (value == 0)
??CrossCallReturnLabel_5:
        JNZ       ??MT_UtilGpioWrite_0
// 1345   {
// 1346     switch (port)
        MOV       A,R1
        JZ        ??MT_UtilGpioWrite_1
        DEC       A
        JZ        ??MT_UtilGpioWrite_2
        DEC       A
        JZ        ??MT_UtilGpioWrite_3
        SJMP      ??MT_UtilGpioWrite_4
// 1347     {
// 1348       case 0:
// 1349         P0 &= (~ BV(bit));
??MT_UtilGpioWrite_1:
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       A,R0
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        CPL       A
        ANL       0x80,A
// 1350         break;
        SJMP      ??MT_UtilGpioWrite_4
// 1351       case 1:
// 1352         P1 &= (~ BV(bit));
??MT_UtilGpioWrite_2:
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       A,R0
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        CPL       A
        ANL       0x90,A
// 1353         break;
        SJMP      ??MT_UtilGpioWrite_4
// 1354       case 2:
// 1355         P2 &= (~ BV(bit));
??MT_UtilGpioWrite_3:
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       A,R0
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        CPL       A
        ANL       0xa0,A
// 1356         break;
        SJMP      ??MT_UtilGpioWrite_4
// 1357     }
// 1358   }
// 1359   else
// 1360   {
// 1361     switch (port)
??MT_UtilGpioWrite_0:
        MOV       A,R1
        JZ        ??MT_UtilGpioWrite_5
        DEC       A
        JZ        ??MT_UtilGpioWrite_6
        DEC       A
        JZ        ??MT_UtilGpioWrite_7
        SJMP      ??MT_UtilGpioWrite_4
// 1362     {
// 1363       case 0:
// 1364         P0 |= BV(bit);
??MT_UtilGpioWrite_5:
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       A,R0
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        ORL       0x80,A
// 1365         break;
        SJMP      ??MT_UtilGpioWrite_4
// 1366       case 1:
// 1367         P1 |= BV(bit);
??MT_UtilGpioWrite_6:
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       A,R0
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        ORL       0x90,A
// 1368         break;
        SJMP      ??MT_UtilGpioWrite_4
// 1369       case 2:
// 1370         P2 |= BV(bit);
??MT_UtilGpioWrite_7:
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       A,R0
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        ORL       0xa0,A
// 1371         break;
// 1372     }
// 1373   }
// 1374 
// 1375   rtrn[3] = P0;
??MT_UtilGpioWrite_4:
        MOV       A,0x80
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1376   rtrn[4] = P1;
        MOV       A,0x90
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1377   rtrn[5] = P2;
        MOV       A,0xa0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1378 
// 1379 #else
// 1380   uint8 rtrn[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
// 1381 #endif
// 1382 
// 1383   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), MT_UTIL_GPIO_WRITE,
// 1384     9, rtrn);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x9
        MOV       R2,#0x16
        MOV       R1,#0x67
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1385 }
        MOV       A,#0x9
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock43
        REQUIRE _A_P0
        REQUIRE _A_P1
        REQUIRE _A_P2
        REQUIRE P0DIR
        REQUIRE P1DIR
        REQUIRE P2DIR

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond44 Using cfiCommon0
          CFI Function MT_UtilGpioSetDirection
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function MT_UtilGpioWrite
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-2
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker46 Using cfiCommon1
          CFI (cfiPicker46) NoFunction
          CFI (cfiPicker46) Picker
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_41:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiPicker46

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0}>`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
// 1386 
// 1387 #if !defined NONWK
// 1388 /**************************************************************************************************
// 1389  * @fn      MT_UtilDataReq
// 1390  *
// 1391  * @brief   Process the MAC Data Request command.
// 1392  *
// 1393  * @param   pBuf - pointer to the received data
// 1394  *
// 1395  * @return  None
// 1396 **************************************************************************************************/
// 1397 static void MT_UtilDataReq(uint8 *pBuf)
// 1398 {
// 1399   uint8 rtrn = NwkPollReq(pBuf[MT_RPC_POS_DAT0]);
// 1400   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), MT_UTIL_DATA_REQ,
// 1401                                                                                1, &rtrn);
// 1402 }
// 1403 
// 1404 /***************************************************************************************************
// 1405  * @fn      MT_UtilAddrMgrEntryLookupExt
// 1406  *
// 1407  * @brief   Proxy the AddrMgrEntryLookupExt() function.
// 1408  *
// 1409  * @param   pBuf - pointer to the received buffer
// 1410  *
// 1411  * @return  void
// 1412  ***************************************************************************************************/
// 1413 static void MT_UtilAddrMgrEntryLookupExt(uint8 *pBuf)
// 1414 {
// 1415   uint8 nwkAddr[2];
// 1416   AddrMgrEntry_t entry;
// 1417   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1418   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1419 
// 1420   osal_memcpy(entry.extAddr, pBuf, Z_EXTADDR_LEN);
// 1421   (void)AddrMgrEntryLookupExt(&entry);
// 1422 
// 1423   nwkAddr[0] = LO_UINT16(entry.nwkAddr);
// 1424   nwkAddr[1] = HI_UINT16(entry.nwkAddr);
// 1425   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
// 1426                                        cmdId, sizeof(uint16), nwkAddr);
// 1427 }
// 1428 
// 1429 /***************************************************************************************************
// 1430  * @fn      MT_UtilAddrMgrEntryLookupNwk
// 1431  *
// 1432  * @brief   Proxy the AddrMgrEntryLookupNwk() function.
// 1433  *
// 1434  * @param   pBuf - pointer to the received buffer
// 1435  *
// 1436  * @return  void
// 1437  ***************************************************************************************************/
// 1438 static void MT_UtilAddrMgrEntryLookupNwk(uint8 *pBuf)
// 1439 {
// 1440   AddrMgrEntry_t entry;
// 1441   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1442   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1443 
// 1444   entry.nwkAddr = osal_build_uint16( pBuf );
// 1445   (void)AddrMgrEntryLookupNwk(&entry);
// 1446 
// 1447   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
// 1448                                        cmdId, Z_EXTADDR_LEN, entry.extAddr);
// 1449 }
// 1450 
// 1451 #if defined MT_SYS_KEY_MANAGEMENT
// 1452 /***************************************************************************************************
// 1453  * @fn      MT_UtilAPSME_LinkKeyDataGet
// 1454  *
// 1455  * @brief   Retrieves APS Link Key data from NV.
// 1456  *
// 1457  * @param   pBuf - pointer to the received buffer
// 1458  *
// 1459  * @return  void
// 1460  ***************************************************************************************************/
// 1461 static void MT_UtilAPSME_LinkKeyDataGet(uint8 *pBuf)
// 1462 {
// 1463   uint8 rsp[MT_APSME_LINKKEY_GET_RSP_LEN];
// 1464   APSME_LinkKeyData_t *pData = NULL;
// 1465   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1466   uint16 apsLinkKeyNvId;
// 1467   uint32 *apsRxFrmCntr;
// 1468   uint32 *apsTxFrmCntr;
// 1469 
// 1470   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1471 
// 1472   *rsp = APSME_LinkKeyNVIdGet(pBuf, &apsLinkKeyNvId);
// 1473 
// 1474   if (SUCCESS == *rsp)
// 1475   {
// 1476     pData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
// 1477 
// 1478     if (pData != NULL)
// 1479     {
// 1480       // retrieve key from NV
// 1481       if ( osal_nv_read( apsLinkKeyNvId, 0,
// 1482                         sizeof(APSME_LinkKeyData_t), pData) == SUCCESS)
// 1483 
// 1484       {
// 1485         uint8 *ptr = rsp+1;
// 1486         apsRxFrmCntr = &ApsLinkKeyFrmCntr[apsLinkKeyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr;
// 1487         apsTxFrmCntr = &ApsLinkKeyFrmCntr[apsLinkKeyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr;
// 1488 
// 1489         (void)osal_memcpy(ptr, pData->key, SEC_KEY_LEN);
// 1490         ptr += SEC_KEY_LEN;
// 1491         osal_buffer_uint32( ptr, *apsTxFrmCntr );
// 1492         ptr += 4;
// 1493         osal_buffer_uint32( ptr, *apsRxFrmCntr );
// 1494       }
// 1495 
// 1496       // clear copy of key in RAM
// 1497       osal_memset( pData, 0x00, sizeof(APSME_LinkKeyData_t) );
// 1498 
// 1499       osal_mem_free(pData);
// 1500     }
// 1501   }
// 1502   else
// 1503   {
// 1504     // set data key and counters 0xFF
// 1505     osal_memset(&rsp[1], 0xFF, SEC_KEY_LEN + (MT_UTIL_FRM_CTR_LEN * 2));
// 1506   }
// 1507 
// 1508   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
// 1509                                        MT_APSME_LINKKEY_GET_RSP_LEN, rsp);
// 1510 
// 1511   // clear key data
// 1512   osal_memset(rsp, 0x00, MT_APSME_LINKKEY_GET_RSP_LEN);
// 1513 
// 1514 }
// 1515 
// 1516 /***************************************************************************************************
// 1517  * @fn      MT_UtilAPSME_LinkKeyNvIdGet
// 1518  *
// 1519  * @brief   Retrieves APS Link Key NV ID from the entry table.
// 1520  *
// 1521  * @param   pBuf - pointer to the received buffer
// 1522  *
// 1523  * @return  void
// 1524  ***************************************************************************************************/
// 1525 static void MT_UtilAPSME_LinkKeyNvIdGet(uint8 *pBuf)
// 1526 {
// 1527   uint8 rsp[MT_APSME_LINKKEY_NV_ID_GET_RSP_LEN];
// 1528   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1529   uint16 apsLinkKeyNvId;
// 1530 
// 1531   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1532 
// 1533   *rsp = APSME_LinkKeyNVIdGet(pBuf, &apsLinkKeyNvId);
// 1534 
// 1535   if (SUCCESS == *rsp)
// 1536   {
// 1537     rsp[1] = LO_UINT16(apsLinkKeyNvId);
// 1538     rsp[2] = HI_UINT16(apsLinkKeyNvId);
// 1539   }
// 1540   else
// 1541   {
// 1542     // send failure response with invalid NV ID
// 1543     osal_memset(&rsp[1], 0xFF, 2);
// 1544   }
// 1545 
// 1546   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
// 1547                                        MT_APSME_LINKKEY_NV_ID_GET_RSP_LEN, rsp);
// 1548 }
// 1549 #endif // MT_SYS_KEY_MANAGEMENT
// 1550 
// 1551 /***************************************************************************************************
// 1552  * @fn      MT_UtilAPSME_RequestKeyCmd
// 1553  *
// 1554  * @brief   Send RequestKey command message to TC for a specific partner Address.
// 1555  *
// 1556  * @param   pBuf  - pointer to the received buffer
// 1557  *
// 1558  * @return  void
// 1559  ***************************************************************************************************/
// 1560 void MT_UtilAPSME_RequestKeyCmd(uint8 *pBuf)
// 1561 {
// 1562   uint8 cmdId;
// 1563   uint8 partnerAddr[Z_EXTADDR_LEN];
// 1564   uint8 retValue;
// 1565 
// 1566   // parse header
// 1567   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1568   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1569 
// 1570   /* PartnerAddress */
// 1571   osal_memcpy(partnerAddr, pBuf, Z_EXTADDR_LEN);
// 1572 
// 1573   retValue = (uint8)ZDSecMgrRequestAppKey(partnerAddr);
// 1574 
// 1575   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue);
// 1576 }
// 1577 
// 1578 /***************************************************************************************************
// 1579  * @fn      MT_UtilAssocCount
// 1580  *
// 1581  * @brief   Proxy the AssocCount() function.
// 1582  *
// 1583  * @param   pBuf - pointer to the received buffer
// 1584  *
// 1585  * @return  void
// 1586  ***************************************************************************************************/
// 1587 static void MT_UtilAssocCount(uint8 *pBuf)
// 1588 {
// 1589   uint16 cnt;
// 1590   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1591   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1592 
// 1593   cnt = AssocCount(pBuf[0], pBuf[1]);
// 1594   pBuf[0] = LO_UINT16(cnt);
// 1595   pBuf[1] = HI_UINT16(cnt);
// 1596 
// 1597   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 2, pBuf);
// 1598 }
// 1599 
// 1600 /***************************************************************************************************
// 1601  * @fn      MT_UtilAssocFindDevice
// 1602  *
// 1603  * @brief   Get an associated device by index.
// 1604  *
// 1605  * @param   pBuf - pointer to the received buffer
// 1606  *
// 1607  * @return  void
// 1608  ***************************************************************************************************/
// 1609 static void MT_UtilAssocFindDevice(uint8 *pBuf)
// 1610 {
// 1611   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1612   uint8 buf[sizeof(associated_devices_t)];
// 1613 
// 1614   packDev_t(buf, AssocFindDevice(pBuf[MT_RPC_FRAME_HDR_SZ]));
// 1615   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
// 1616                                        sizeof(associated_devices_t), buf);
// 1617 }
// 1618 
// 1619 /***************************************************************************************************
// 1620  * @fn      MT_UtilAssocGetWithAddress
// 1621  *
// 1622  * @brief   Get an associated device by address.
// 1623  *
// 1624  * @param   pBuf - pointer to the received buffer
// 1625  *
// 1626  * @return  void
// 1627  ***************************************************************************************************/
// 1628 static void MT_UtilAssocGetWithAddress(uint8 *pBuf)
// 1629 {
// 1630   extern associated_devices_t *AssocGetWithAddress(uint8 *extAddr, uint16 shortAddr);
// 1631   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1632   uint8 buf[sizeof(associated_devices_t)];
// 1633 
// 1634   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1635   packDev_t(buf, AssocGetWithAddress(((AddrMgrExtAddrValid(pBuf)) ? pBuf : NULL),
// 1636                                   BUILD_UINT16(pBuf[Z_EXTADDR_LEN], pBuf[Z_EXTADDR_LEN+1])));
// 1637 
// 1638   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
// 1639                                        sizeof(associated_devices_t), buf);
// 1640 }
// 1641 
// 1642 /***************************************************************************************************
// 1643  * @fn      MT_UtilBindAddEntry
// 1644  *
// 1645  * @brief   Add Binding Entry into Local Table.
// 1646  *
// 1647  * @param   pBuf - pointer to the received buffer
// 1648  *
// 1649  * @return  void
// 1650  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1651 static void MT_UtilBindAddEntry(uint8 *pBuf)
MT_UtilBindAddEntry:
          CFI Block cfiBlock47 Using cfiCommon0
          CFI Function MT_UtilBindAddEntry
        CODE
// 1652 {
        FUNCALL MT_UtilBindAddEntry, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, bindAddEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, packBindEntry_t
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        MOV       A,#-0x13
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 23
        MOV       A,#-0x17
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 42)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1653   uint8 srcEp;
// 1654   zAddrType_t dstAddr;
// 1655   uint8 dstEp;
// 1656   uint8 numClusterIds;
// 1657   uint16 *clusterIds;
// 1658   uint8 buf[sizeof(BindingEntry_t)];
// 1659   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV       DPL,R2
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V7,A
// 1660   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1661 
// 1662   // Initialize the return buffer
// 1663   osal_memset( buf, 0xFF, sizeof(BindingEntry_t) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0xe
        MOV       R5,#0x0
        MOV       R1,#-0x1
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 1664   buf[2] = 0xFE;    // set the default value of INVALID_NODE_ADDR
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x2
        MOVX      @DPTR,A
// 1665   buf[3] = 0xFF;    // set the default value of INVALID_NODE_ADDR
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x1
        LCALL     ?Subroutine12 & 0xFFFF
// 1666 
// 1667   srcEp = *pBuf++;
??CrossCallReturnLabel_21:
        MOV       ?V4,A
// 1668 
// 1669   // Destination Address mode
// 1670   dstAddr.addrMode = *pBuf++;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        MOV       A,R6
        ADD       A,#0x5
        MOV       R6,A
        JNC       ??MT_UtilBindAddEntry_0
        INC       R7
// 1671 
// 1672   // Destination Address
// 1673   if ( dstAddr.addrMode == Addr64Bit )
??MT_UtilBindAddEntry_0:
        MOV       A,#0x3
        XRL       A,R0
        JNZ       ??MT_UtilBindAddEntry_1
// 1674   {
// 1675     uint8 *ptr; // Use this additional pointer because *pBuf is incremented later for both cases
// 1676 
// 1677     ptr = pBuf;
// 1678     osal_cpyExtAddr( dstAddr.addr.extAddr, ptr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        SJMP      ??MT_UtilBindAddEntry_2
// 1679   }
// 1680   else
// 1681   {
// 1682     dstAddr.addr.shortAddr = osal_build_uint16( pBuf );
??MT_UtilBindAddEntry_1:
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 1683   }
// 1684   // The short address occupies LSB two bytes
// 1685   pBuf += Z_EXTADDR_LEN;
// 1686 
// 1687   // DstEPInt
// 1688   dstEp = *pBuf++;
??MT_UtilBindAddEntry_2:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V5,A
// 1689 
// 1690   numClusterIds = *pBuf++;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V6,A
// 1691 
// 1692   if ( numClusterIds > 0 )
        JZ        ??MT_UtilBindAddEntry_3
// 1693   {
// 1694     // copy list of clusters
// 1695     clusterIds = (uint16 *)osal_mem_alloc( numClusterIds * sizeof(uint16) );
        ADD       A,0xE0 /* A   */
        MOV       ?V2,A
        CLR       A
        RLC       A
        MOV       ?V3,A
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,?V2
        MOV       R3,A
        LCALL     ??Subroutine27_0 & 0xFFFF
// 1696     osal_memcpy( clusterIds, pBuf, numClusterIds * sizeof(uint16));
??CrossCallReturnLabel_48:
        ; Setup parameters for call to function osal_memcpy
        MOV       A,R6
        ADD       A,#0xa
        MOV       ?V8,A
        CLR       A
        ADDC      A,R7
        MOV       ?V9,A
        MOV       ?V10,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 45)
        MOV       R4,?V2
        MOV       R5,?V3
        LCALL     ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_29:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 42)
// 1697 
// 1698     if ( clusterIds != NULL )
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??MT_UtilBindAddEntry_3
// 1699     {
// 1700       // The response to MT interface has to be pack into buf
// 1701       packBindEntry_t( buf, bindAddEntry( srcEp, &dstAddr, dstEp, numClusterIds, clusterIds ));
        ; Setup parameters for call to function bindAddEntry
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 44)
        MOV       R5,?V6
        MOV       R4,?V5
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        MOV       R1,?V4
        LCALL     `??bindAddEntry::?relay`; Banked call to: bindAddEntry
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 42)
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R4,?V2
        MOV       R5,?V3
        ; Setup parameters for call to function packBindEntry_t
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??packBindEntry_t::?relay`; Banked call to: packBindEntry_t
// 1702 
// 1703       osal_mem_free( clusterIds );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1704     }
// 1705   }
// 1706 
// 1707   MT_BuildAndSendZToolResponse( ( (uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL ),
// 1708                                 cmdId, sizeof(BindingEntry_t), buf );
??MT_UtilBindAddEntry_3:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP102_8
        MOV       R3,#0xe
        MOV       R2,?V7
        MOV       R1,#0x67
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1709 }
        MOV       A,#0x17
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R7,#0xb
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock47

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond48 Using cfiCommon0
          CFI Function MT_UtilCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_27
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function MT_UtilCommandProcessing
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-2
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function MT_UtilBindAddEntry
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-2
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 45)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function packBindEntry_t
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker52 Using cfiCommon1
          CFI (cfiPicker52) NoFunction
          CFI (cfiPicker52) Picker
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        RET
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiPicker52
// 1710 
// 1711 /***************************************************************************************************
// 1712  * @fn      packDev_t
// 1713  *
// 1714  * @brief   Pack an associated_devices_t structure into a byte buffer (pack INVALID_NODE_ADDR if
// 1715  *          the pDev parameter is NULL).
// 1716  *
// 1717  * @param   pBuf - pointer to the buffer into which to pack the structure.
// 1718  * @param   pDev - pointer to the structure.
// 1719  *
// 1720  * @return  void
// 1721  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1722 static void packDev_t(uint8 *pBuf, associated_devices_t *pDev)
packDev_t:
          CFI Block cfiBlock53 Using cfiCommon0
          CFI Function packDev_t
        CODE
// 1723 {
        FUNCALL packDev_t, osal_buffer_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
// 1724   if (NULL == pDev)
        MOV       A,R4
        ORL       A,R5
        JNZ       ??packDev_t_0
// 1725   {
// 1726     uint16 rtrn = INVALID_NODE_ADDR;
// 1727     *pBuf++ = LO_UINT16(rtrn);
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,#-0x2
        MOVX      @DPTR,A
// 1728     *pBuf++ = HI_UINT16(rtrn);
        INC       DPTR
        INC       A
        MOVX      @DPTR,A
        MOV       A,R2
        LJMP      ??packDev_t_1 & 0xFFFF
// 1729   }
// 1730   else
// 1731   {
// 1732     *pBuf++ = LO_UINT16(pDev->shortAddr);
??packDev_t_0:
        LCALL     ?Subroutine3 & 0xFFFF
// 1733     *pBuf++ = HI_UINT16(pDev->shortAddr);
// 1734     *pBuf++ = LO_UINT16(pDev->addrIdx);
??CrossCallReturnLabel_2:
        ADDC      A,?V1
        LCALL     ?Subroutine2 & 0xFFFF
// 1735     *pBuf++ = HI_UINT16(pDev->addrIdx);
// 1736     *pBuf++ = pDev->nodeRelation;
// 1737     *pBuf++ = pDev->devStatus;
??CrossCallReturnLabel_0:
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine9 & 0xFFFF
// 1738     *pBuf++ = pDev->assocCnt;
??CrossCallReturnLabel_14:
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_35:
        LCALL     ?Subroutine13 & 0xFFFF
// 1739     *pBuf++ = pDev->age;
??CrossCallReturnLabel_55:
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL     ??Subroutine30_0 & 0xFFFF
// 1740     *pBuf++ = pDev->linkInfo.txCounter;
??CrossCallReturnLabel_57:
        INC       DPTR
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_13:
        LCALL     ?Subroutine13 & 0xFFFF
// 1741     *pBuf++ = pDev->linkInfo.txCost;
??CrossCallReturnLabel_56:
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL     ??Subroutine30_0 & 0xFFFF
// 1742     *pBuf++ = pDev->linkInfo.rxLqi;
??CrossCallReturnLabel_58:
        INC       DPTR
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_11:
        INC       DPTR
        MOVX      @DPTR,A
// 1743     *pBuf++ = pDev->linkInfo.inKeySeqNum;
        MOV       A,R4
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R2
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,R2
        ADD       A,#0xc
        MOV       R6,A
        JNC       ??packDev_t_2
        INC       R7
// 1744     osal_buffer_uint32( pBuf, pDev->linkInfo.inFrmCntr );
??packDev_t_2:
        ; Setup parameters for call to function osal_buffer_uint32
        MOV       A,R4
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1745     *pBuf += 4;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        ADD       A,#0x4
        MOVX      @DPTR,A
// 1746     *pBuf++ = LO_UINT16(pDev->linkInfo.txFailure);
        MOV       A,?V0
        ADD       A,#0x10
        MOV       R0,A
        CLR       A
        ADDC      A,?V1
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      @DPTR,A
// 1747     *pBuf++ = HI_UINT16(pDev->linkInfo.txFailure);
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOVX      @DPTR,A
        MOV       A,R6
??packDev_t_1:
        ADD       A,#0x2
// 1748   }
// 1749 }
        LJMP      ??Subroutine29_0 & 0xFFFF
          CFI EndBlock cfiBlock53

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond54 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_55
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function packDev_t
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+-2
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker56 Using cfiCommon1
          CFI (cfiPicker56) NoFunction
          CFI (cfiPicker56) Picker
        INC       DPTR
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiPicker56
        REQUIRE ??Subroutine30_0
        ; // Fall through to label ??Subroutine30_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine30_0:
          CFI Block cfiCond57 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_57
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function packDev_t
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-2
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function packDev_t
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+-2
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function packDev_t
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-2
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker61 Using cfiCommon1
          CFI (cfiPicker61) NoFunction
          CFI (cfiPicker61) Picker
        MOVX      @DPTR,A
        MOV       DPL,R4
        MOV       DPH,R5
        RET
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiPicker61

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond62 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function packDev_t
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+-2
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker64 Using cfiCommon1
          CFI (cfiPicker64) NoFunction
          CFI (cfiPicker64) Picker
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_34:
        RET
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiPicker64

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond65 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function packDev_t
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_13
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+-4
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function packDev_t
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_10
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+-4
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function packDev_t
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_11
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-4
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker69 Using cfiCommon1
          CFI (cfiPicker69) NoFunction
          CFI (cfiPicker69) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_44:
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiPicker69

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond70 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function packDev_t
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-2
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker72 Using cfiCommon1
          CFI (cfiPicker72) NoFunction
          CFI (cfiPicker72) Picker
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_33:
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiPicker72
// 1750 
// 1751 /***************************************************************************************************
// 1752  * @fn      packBindEntry_t
// 1753  *
// 1754  * @brief   Pack a BindingEntry_t structure into a byte buffer (pack INVALID_NODE_ADDR
// 1755  *          as dstIdx if the pBind parameter is NULL).
// 1756  *
// 1757  * @param   pBuf - pointer to the buffer into which to pack the structure.
// 1758  * @param   pBind - pointer to the structure.
// 1759  *
// 1760  * @return  void
// 1761  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1762 static void packBindEntry_t(uint8 *pBuf, BindingEntry_t *pBind)
packBindEntry_t:
          CFI Block cfiBlock73 Using cfiCommon0
          CFI Function packBindEntry_t
        CODE
// 1763 {
        FUNCALL packBindEntry_t, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
// 1764   if ( NULL == pBind )
        MOV       A,R4
        ORL       A,R5
        JNZ       ??packBindEntry_t_0
// 1765   {
// 1766     uint16 rtrn = INVALID_NODE_ADDR;
// 1767     *pBuf++ = 0xFF;
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 1768     *pBuf++ = 0xFF;
        INC       DPTR
        MOVX      @DPTR,A
// 1769     *pBuf++ = LO_UINT16(rtrn);
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        DEC       A
        LCALL     ?Subroutine24 & 0xFFFF
// 1770     *pBuf++ = HI_UINT16(rtrn);
// 1771     *pBuf++ = 0xFF;
// 1772     *pBuf++ = 0xFF;
// 1773 
// 1774   }
??CrossCallReturnLabel_42:
        INC       A
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_24:
        INC       DPTR
        MOVX      @DPTR,A
        MOV       A,R2
        ADD       A,#0x6
        SJMP      ??packBindEntry_t_1
// 1775   else
// 1776   {
// 1777     *pBuf++ = pBind->srcEP;
??packBindEntry_t_0:
        LCALL     ?Subroutine3 & 0xFFFF
// 1778     *pBuf++ = pBind->dstGroupMode;
// 1779     *pBuf++ = LO_UINT16( pBind->dstIdx );
??CrossCallReturnLabel_3:
        ADDC      A,R5
        LCALL     ?Subroutine2 & 0xFFFF
// 1780     *pBuf++ = HI_UINT16( pBind->dstIdx );
// 1781     *pBuf++ = pBind->dstEP;
// 1782     *pBuf++ = pBind->numClusterIds;
??CrossCallReturnLabel_1:
        MOV       A,R4
        ADD       A,#0x5
        MOV       R0,A
        CLR       A
        ADDC      A,R5
        MOV       R1,A
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       DPL,R0
        MOV       DPH,A
        LCALL     ?Subroutine9 & 0xFFFF
// 1783 
// 1784     osal_memcpy( pBuf, pBind->clusterIdList, pBind->numClusterIds * sizeof(uint16));
??CrossCallReturnLabel_15:
        ; Setup parameters for call to function osal_memcpy
        MOV       A,R4
        ADD       A,#0x6
        MOV       ?V0,A
        CLR       A
        ADDC      A,R5
        MOV       ?V1,A
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       DPL,R6
        MOV       DPH,R1
        MOVX      A,@DPTR
        ADD       A,0xE0 /* A   */
        MOV       R4,A
        CLR       A
        RLC       A
        MOV       R5,A
        MOV       A,R2
        ADD       A,#0x6
        MOV       R2,A
        JNC       ??packBindEntry_t_2
        INC       R3
??packBindEntry_t_2:
        LCALL     ?Subroutine18 & 0xFFFF
// 1785   }
??CrossCallReturnLabel_30:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
// 1786 }
??packBindEntry_t_1:
        MOV       R7,#0x3
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock73

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond74 Using cfiCommon0
          CFI Function MT_UtilGpioSetDirection
          CFI Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function MT_UtilGpioWrite
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_5
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-4
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function packBindEntry_t
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-2
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function packBindEntry_t
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_23
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+-4
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function packBindEntry_t
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_24
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-4
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker79 Using cfiCommon1
          CFI (cfiPicker79) NoFunction
          CFI (cfiPicker79) Picker
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiPicker79

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond80 Using cfiCommon0
          CFI Function packBindEntry_t
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function packBindEntry_t
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-2
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker82 Using cfiCommon1
          CFI (cfiPicker82) NoFunction
          CFI (cfiPicker82) Picker
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_43:
        INC       DPTR
        RET
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiPicker82

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond83 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function packBindEntry_t
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-2
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker85 Using cfiCommon1
          CFI (cfiPicker85) NoFunction
          CFI (cfiPicker85) Picker
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_36:
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiPicker85

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond86 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_35
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function packDev_t
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_14
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-4
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function packBindEntry_t
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_15
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-4
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker89 Using cfiCommon1
          CFI (cfiPicker89) NoFunction
          CFI (cfiPicker89) Picker
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_45:
        RET
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiPicker89

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond90 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function packDev_t
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_13
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+-6
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function packDev_t
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_10
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-6
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function packDev_t
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_11
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-6
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function packDev_t
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_35
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-4
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function packDev_t
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_14
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-6
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function packBindEntry_t
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_15
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-6
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker97 Using cfiCommon1
          CFI (cfiPicker97) NoFunction
          CFI (cfiPicker97) Picker
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiPicker97

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond98 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function packBindEntry_t
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+-2
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker100 Using cfiCommon1
          CFI (cfiPicker100) NoFunction
          CFI (cfiPicker100) Picker
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_60:
        MOVX      @DPTR,A
        MOV       A,R4
        ADD       A,#0x2
        MOV       R0,A
        CLR       A
        RET
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiPicker100

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond101 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function packBindEntry_t
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_3
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_SP SP+-4
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function packDev_t
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_0
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-6
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function packBindEntry_t
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_1
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-6
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function packDev_t
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_0
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-6
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function packBindEntry_t
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_1
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-6
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker107 Using cfiCommon1
          CFI (cfiPicker107) NoFunction
          CFI (cfiPicker107) Picker
        INC       DPTR
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiPicker107
        REQUIRE ??Subroutine31_0
        ; // Fall through to label ??Subroutine31_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine31_0:
          CFI Block cfiCond108 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function packBindEntry_t
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_1
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-4
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function packDev_t
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_2
          CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond110) CFA_SP SP+-4
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function packBindEntry_t
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_3
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-4
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function packDev_t
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_0
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-6
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function packBindEntry_t
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_1
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+-6
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function packDev_t
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_0
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-6
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function packBindEntry_t
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_1
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+-6
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker116 Using cfiCommon1
          CFI (cfiPicker116) NoFunction
          CFI (cfiPicker116) Picker
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        RET
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiPicker116

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond117 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function packBindEntry_t
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-2
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker119 Using cfiCommon1
          CFI (cfiPicker119) NoFunction
          CFI (cfiPicker119) Picker
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        LCALL     ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_59:
        INC       DPTR
        MOVX      @DPTR,A
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_39:
        MOVX      @DPTR,A
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_40:
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiPicker119

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond120 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function packBindEntry_t
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_1
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-4
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function packDev_t
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_0
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-4
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function packBindEntry_t
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_1
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-4
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker124 Using cfiCommon1
          CFI (cfiPicker124) NoFunction
          CFI (cfiPicker124) Picker
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_61:
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiPicker124
// 1787 
// 1788 #if defined ZCL_KEY_ESTABLISH
// 1789 /***************************************************************************************************
// 1790  * @fn      MT_UtilzclGeneral_KeyEstablish_InitiateKeyEstablishment
// 1791  *
// 1792  * @brief   Proxy the zclKE_StartDirect() function.
// 1793  *
// 1794  * @param   pBuf - pointer to the received buffer
// 1795  *
// 1796  * @return  void
// 1797  ***************************************************************************************************/
// 1798 static void MT_UtilzclGeneral_KeyEstablish_InitiateKeyEstablishment(uint8 *pBuf)
// 1799 {
// 1800   afAddrType_t partnerAddr;
// 1801   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1802   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1803 
// 1804   partnerAddr.panId = 0;  // Not an inter-pan message.
// 1805   partnerAddr.endPoint = pBuf[2];
// 1806   partnerAddr.addrMode = afAddr16Bit;
// 1807   partnerAddr.addr.shortAddr = osal_build_uint16( &pBuf[4] );
// 1808 
// 1809   zcl_key_establish_task_id = pBuf[0];
// 1810 
// 1811   *pBuf = zclKE_StartDirect(MT_TaskID, &partnerAddr, pBuf[1], pBuf[3]);
// 1812 
// 1813   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, pBuf);
// 1814 }
// 1815 
// 1816 /***************************************************************************************************
// 1817  * @fn      MT_UtilzclGeneral_KeyEstablishment_ECDSASign
// 1818  *
// 1819  * @brief   Proxy the zclGeneral_KeyEstablishment_ECDSASign() function.
// 1820  *
// 1821  * @param   pBuf - pointer to the received buffer
// 1822  *
// 1823  * @return  void
// 1824  ***************************************************************************************************/
// 1825 static void MT_UtilzclGeneral_KeyEstablishment_ECDSASign(uint8 *pBuf)
// 1826 {
// 1827 #if defined ZCL_KEY_ESTABLISH
// 1828   uint8 *output;
// 1829   uint8 signLen;
// 1830   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1831   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1832 
// 1833   signLen = zclKE_ECDSASignGetLen(ZCL_KE_SUITE_1);
// 1834 
// 1835   output = osal_mem_alloc(signLen+1);
// 1836 
// 1837   if (NULL == output)
// 1838   {
// 1839     *pBuf = FAILURE;
// 1840     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, pBuf);
// 1841   }
// 1842   else
// 1843   {
// 1844     *output = zclKE_ECDSASign(ZCL_KE_SUITE_1, pBuf+1, *pBuf, output+1);
// 1845     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
// 1846                                          signLen+1, output);
// 1847     osal_mem_free(output);
// 1848   }
// 1849 #endif
// 1850 }
// 1851 
// 1852 /***************************************************************************************************
// 1853  * @fn      MT_UtilKeyEstablishInd
// 1854  *
// 1855  * @brief   Proxy the ZCL_KEY_ESTABLISH_IND command.
// 1856  *
// 1857  * @param   pInd - Pointer to a zclKE_StatusInd_t structure.
// 1858  *
// 1859  * @return  None
// 1860  ***************************************************************************************************/
// 1861 void MT_UtilKeyEstablishInd(zclKE_StatusInd_t *pInd)
// 1862 {
// 1863   uint8 msg[6];
// 1864 
// 1865   msg[0] = zcl_key_establish_task_id;
// 1866   msg[1] = pInd->hdr.event;
// 1867   msg[2] = pInd->hdr.status;
// 1868   msg[3] = pInd->waitTime;
// 1869   msg[4] = LO_UINT16(pInd->suites);
// 1870   msg[5] = HI_UINT16(pInd->suites);
// 1871 
// 1872   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_UTIL),
// 1873                                        MT_UTIL_ZCL_KEY_ESTABLISH_IND, 6, msg);
// 1874 }
// 1875 #endif
// 1876 
// 1877 /***************************************************************************************************
// 1878  * @fn      MT_UtilSync
// 1879  *
// 1880  * @brief   Process the MT_UTIL_SYNC command
// 1881  *
// 1882  * @param   None
// 1883  *
// 1884  * @return  None
// 1885  ***************************************************************************************************/
// 1886 static void MT_UtilSync(void)
// 1887 {
// 1888  MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ|(uint8)MT_RPC_SYS_UTIL),MT_UTIL_SYNC_REQ,0,0);
// 1889 }
// 1890 
// 1891 /***************************************************************************************************
// 1892  * @fn          MT_UtilGetDevNwkInfo
// 1893  *
// 1894  * @brief       Handle the Util get device network information.
// 1895  *
// 1896  * @param       pBuf - Pointer to the received message data.
// 1897  *
// 1898  * @return      NULL
// 1899  ***************************************************************************************************/
// 1900 static void MT_UtilGetDevNwkInfo( uint8 *pBuf )
// 1901 {
// 1902   uint8 buf[6];
// 1903   uint8 *pMsg;
// 1904 
// 1905   pMsg = buf;
// 1906 
// 1907   *pMsg++ = LO_UINT16( _NIB.nwkDevAddress );
// 1908   *pMsg++ = HI_UINT16( _NIB.nwkDevAddress );
// 1909   *pMsg++ = LO_UINT16( _NIB.nwkPanId );
// 1910   *pMsg++ = HI_UINT16( _NIB.nwkPanId );
// 1911   *pMsg++ = _NIB.SequenceNum;
// 1912   *pMsg++ = _NIB.nwkLogicalChannel;
// 1913 
// 1914   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
// 1915                                        MT_UTIL_GET_DEV_NWK_INFO, 6, buf );
// 1916 }
// 1917 
// 1918 /***************************************************************************************************
// 1919  * @fn          MT_UtiSetDevNwkInfo
// 1920  *
// 1921  * @brief       Handle the Util set device network information.
// 1922  *
// 1923  * @param       pBuf - Pointer to the received message data.
// 1924  *
// 1925  * @return      NULL
// 1926  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1927 void MT_UtilSetDevNwkInfo( uint8 *pBuf )
MT_UtilSetDevNwkInfo:
          CFI Block cfiBlock125 Using cfiCommon0
          CFI Function MT_UtilSetDevNwkInfo
        CODE
// 1928 {
        FUNCALL MT_UtilSetDevNwkInfo, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilSetDevNwkInfo, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilSetDevNwkInfo, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1929   uint8 *pMsg;
// 1930   uint8 status = 0;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
// 1931   
// 1932   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1933   pMsg = pBuf;
        MOV       A,R2
        ADD       A,#0x3
        MOV       R6,A
        CLR       A
        ADDC      A,R3
        MOV       R7,A
// 1934 
// 1935   _NIB.nwkDevAddress = osal_build_uint16(pMsg);
        ; Setup parameters for call to function osal_build_uint16
        INC       R2
        INC       R2
        INC       R2
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       DPTR,#_NIB + 20
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 1936   pMsg += 2;
        MOV       A,R6
        ADD       A,#0x2
        MOV       R6,A
        JNC       ??MT_UtilSetDevNwkInfo_0
        INC       R7
// 1937   _NIB.nwkPanId = osal_build_uint16(pMsg);
??MT_UtilSetDevNwkInfo_0:
        ; Setup parameters for call to function osal_build_uint16
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       DPTR,#_NIB + 33
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 1938   pMsg += 2;
// 1939   _NIB.SequenceNum = *pMsg++;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPTR,#_NIB
        LCALL     ?Subroutine12 & 0xFFFF
// 1940   _NIB.nwkLogicalChannel = *pMsg++;
??CrossCallReturnLabel_22:
        MOV       DPTR,#_NIB + 22
        LCALL     ?Subroutine11 & 0xFFFF
// 1941 
// 1942   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
// 1943                                        MT_UTIL_GET_DEV_NWK_INFO, 1, &status );
??CrossCallReturnLabel_20:
        MOV       R2,#-0x60
        MOV       R1,#0x67
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1944 }
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock125

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond126 Using cfiCommon0
          CFI Function MT_UtilBindAddEntry
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 42)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function MT_UtilSetDevNwkInfo
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+-2
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker128 Using cfiCommon1
          CFI (cfiPicker128) NoFunction
          CFI (cfiPicker128) Picker
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiPicker128

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond129 Using cfiCommon0
          CFI Function MT_UtilCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function MT_UtilCommandProcessing
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-2
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function MT_UtilSetDevNwkInfo
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-2
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker132 Using cfiCommon1
          CFI (cfiPicker132) NoFunction
          CFI (cfiPicker132) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        RET
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiPicker132

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilCommandProcessing::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilCommandProcessing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilGetDeviceInfo::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilGetDeviceInfo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilGetNvInfo::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilGetNvInfo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilGpioSetDirection::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilGpioSetDirection

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilGpioWrite::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilGpioWrite

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilBindAddEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilBindAddEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??packDev_t::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    packDev_t

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??packBindEntry_t::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    packBindEntry_t

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilSetDevNwkInfo::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilSetDevNwkInfo

        END
// 1945 #endif /* !defined NONWK */
// 1946 #endif /* MT_UTIL_FUNC */
// 1947 /**************************************************************************************************
// 1948  **************************************************************************************************/
// 
// 3 591 bytes in segment BANKED_CODE
//    54 bytes in segment BANK_RELAYS
//     6 bytes in segment SFR_AN
//    19 bytes in segment XDATA_ROM_C
// 
//    54 bytes of CODE     memory
//    15 bytes of CONST    memory (+ 4 bytes shared)
//     0 bytes of DATA     memory (+ 6 bytes shared)
// 3 591 bytes of HUGECODE memory
//
//Errors: none
//Warnings: none
