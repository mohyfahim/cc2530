###############################################################################
#
# IAR C/C++ Compiler V10.40.1.7397 for 8051               01/May/2021  14:39:34
# Copyright 2004-2021 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Components\mac\low_level\srf04\mac_rx.c
#    Command line       =  
#        -f C:\Users\asus\AppData\Local\Temp\EWC1D5.tmp ("E:\Texas
#        Instruments\Z-Stack 3.0.2\Components\mac\low_level\srf04\mac_rx.c" -D
#        BDB_FINDING_BINDING_CAPABILITY_ENABLED=0 -D HAL_UART_DMA_RX_MAX=128 -D
#        MAXMEMHEAP=2765 -D TC_LINKKEY_JOIN -D NWK_MAX_DEVICE_LIST=10 -D
#        ZDSECMGR_TC_DEVICE_MAX=30 -D DISABLE_GREENPOWER_BASIC_PROXY -D
#        POWER_SAVING -D FEATURE_SYSTEM_STATS -D MT_GP_CB_FUNC -lC "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" -lA "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" --diag_suppress
#        Pe001,Pa010 -o "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj" -e --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_GP_CB_FUNC -DMT_APP_FUNC -DMT_APP_CNF_FUNC)
#        -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg" -I
#        "E:\Texas Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\Source\" -I "E:\Texas
#        Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\..\Source\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\gp\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\bdb\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  English_USA.1252
#    List file          =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-Debug\List\mac_rx.lst
#    Object file        =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj\mac_rx.r51
#
###############################################################################

E:\Texas Instruments\Z-Stack 3.0.2\Components\mac\low_level\srf04\mac_rx.c
      1          /**************************************************************************************************
      2            Filename:       mac_rx.c
      3            Revised:        $Date: 2014-05-16 10:22:59 -0700 (Fri, 16 May 2014) $
      4            Revision:       $Revision: 38564 $
      5          
      6            Description:    Describe the purpose and contents of the file.
      7          
      8          
      9            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          
     45          /* hal */
     46          #include "hal_defs.h"
     47          #include "hal_types.h"
     48          
     49          /* OSAL */
     50          #include "OSAL.h"
     51          
     52          /* high-level */
     53          #include "mac_high_level.h"
     54          #include "mac_spec.h"
     55          #include "mac_pib.h"
     56          
     57          /* MAC security */
     58          #include "mac_security.h"
     59          
     60          /* exported low-level */
     61          #include "mac_low_level.h"
     62          
     63          /* low-level specific */
     64          #include "mac_rx.h"
     65          #include "mac_tx.h"
     66          #include "mac_rx_onoff.h"
     67          #include "mac_radio.h"
     68          
     69          /* target specific */
     70          #include "mac_radio_defs.h"

   \                                 In  segment SFR_AN, at 0x91
   \   unsigned char volatile __sfr RFIRQF1
   \                     RFIRQF1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9b
   \   unsigned char volatile __sfr S1CON
   \                     S1CON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe1
   \   unsigned char volatile __sfr RFST
   \                     RFST:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe9
   \   unsigned char volatile __sfr RFIRQF0
   \                     RFIRQF0:
   \   000000                DS 1
     71          #include "mac_autopend.h"
     72          
     73          /* debug */
     74          #include "mac_assert.h"
     75          
     76          #ifdef ACK_DONE_ISR_WORKAROUND
     77          typedef struct macTimer_s
     78          {
     79            struct macTimer_s     *pNext;                     /* next timer in queue */
     80            int32                 backoff;                    /* timer expiration count */
     81            void                  (*pFunc)(uint8 parameter);  /* timer callback function */
     82            uint8                 parameter;                  /* callback function parameter */
     83          } macTimer_t;
     84          
     85          extern macTimer_t macTxAckIsrTimer;
     86          extern void macTimerCancel(macTimer_t *pTimer);
     87          #endif /* ACK_DONE_ISR_WROKAROUND */
     88          
     89          
     90          
     91          /* ------------------------------------------------------------------------------------------------
     92           *                                            Defines
     93           * ------------------------------------------------------------------------------------------------
     94           */
     95          #define MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT   16   /* adjustable to tune performance */
     96          
     97          /* receive FIFO bytes needed to start a valid receive (see function rxStartIsr for details) */
     98          #define RX_THRESHOLD_START_LEN    (MAC_PHY_PHR_LEN        +  \
     99                                             MAC_FCF_FIELD_LEN      +  \
    100                                             MAC_SEQ_NUM_FIELD_LEN  +  \
    101                                             MAC_FCS_FIELD_LEN)
    102          
    103          /* maximum size of addressing fields (note: command frame identifier processed as part of address) */
    104          #define MAX_ADDR_FIELDS_LEN  ((MAC_EXT_ADDR_FIELD_LEN + MAC_PAN_ID_FIELD_LEN) * 2)
    105          
    106          /* addressing mode reserved value */
    107          #define ADDR_MODE_RESERVERED  1
    108          
    109          /* length of command frame identifier */
    110          #define CMD_FRAME_ID_LEN      1
    111          
    112          /* packet size mask is equal to the maximum value */
    113          #define PHY_PACKET_SIZE_MASK  0x7F
    114          
    115          /* value for promiscuous off, must not conflict with other mode variants from separate include files */
    116          #define PROMISCUOUS_MODE_OFF  0x00
    117          
    118          /* bit of proprietary FCS format that indicates if the CRC is OK */
    119          #define PROPRIETARY_FCS_CRC_OK_BIT  0x80
    120          
    121          /* dummy length value for unused entry in lookup table */
    122          #define DUMMY_LEN   0xBE
    123          
    124          /* value for rxThresholdIntState */
    125          #define RX_THRESHOLD_INT_STATE_INACTIVE   0
    126          #define RX_THRESHOLD_INT_STATE_ACTIVE     1
    127          #define RX_THRESHOLD_INT_STATE_RESET      2
    128          
    129          
    130          /* ------------------------------------------------------------------------------------------------
    131           *                                             Macros
    132           * ------------------------------------------------------------------------------------------------
    133           */
    134          #define MEM_ALLOC(x)   macDataRxMemAlloc(x)
    135          #define MEM_FREE(x)    macDataRxMemFree((uint8 **)x)
    136          
    137          /*
    138           *  Macro for encoding frame control information into internal flags format.
    139           *  Parameter is pointer to the frame.  NOTE!  If either the internal frame
    140           *  format *or* the specification changes, this macro will need to be modified.
    141           */
    142          #define INTERNAL_FCF_FLAGS(p)  ((((p)[1] >> 4) & 0x03) | ((p)[0] & 0x78))
    143          
    144          /*
    145           *  The radio replaces the actual FCS with different information.  This proprietary FCS is
    146           *  the same length as the original and includes:
    147           *    1) the RSSI value
    148           *    2) the average correlation value (used for LQI)
    149           *    3) a CRC passed bit
    150           *
    151           *  These macros decode the proprietary FCS.  The macro parameter is a pointer to the two byte FCS.
    152           */
    153          #define PROPRIETARY_FCS_RSSI(p)                 ((int8)((p)[0]))
    154          #define PROPRIETARY_FCS_CRC_OK(p)               ((p)[1] & PROPRIETARY_FCS_CRC_OK_BIT)
    155          #define PROPRIETARY_FCS_CORRELATION_VALUE(p)    ((p)[1] & ~PROPRIETARY_FCS_CRC_OK_BIT)
    156          
    157          /*
    158           *  Macros for security control field.
    159           */
    160          #define SECURITY_LEVEL(s)                       (s & 0x07)
    161          #define KEY_IDENTIFIER_MODE(s)                  ((s & 0x18) >> 3)
    162          #define SECURITY_CONTROL_RESERVED(s)            ((s & 0xE0) >> 5)
    163          
    164          /* ------------------------------------------------------------------------------------------------
    165           *                                       Global Variables
    166           * ------------------------------------------------------------------------------------------------
    167           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    168          uint8 macRxActive;
   \                     macRxActive:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          uint8 macRxFilter;
   \                     macRxFilter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    170          uint8 macRxOutgoingAckFlag;
   \                     macRxOutgoingAckFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    171          
    172          
    173          /* ------------------------------------------------------------------------------------------------
    174           *                                       Local Constants
    175           * ------------------------------------------------------------------------------------------------
    176           */

   \                                 In  segment CODE_C, align 1
    177          static const uint8 CODE macRxAddrLen[] =
   \                     macRxAddrLen:
   \   000000   00           DB 0
   \   000001   BE           DB 190
   \   000002   04           DB 4
   \   000003   0A           DB 10
    178          {
    179            0,                                                /* no address */
    180            DUMMY_LEN,                                        /* reserved */
    181            MAC_PAN_ID_FIELD_LEN + MAC_SHORT_ADDR_FIELD_LEN,  /* short address + pan id */
    182            MAC_PAN_ID_FIELD_LEN + MAC_EXT_ADDR_FIELD_LEN     /* extended address + pan id */
    183          };
    184          
    185          
    186          /* ------------------------------------------------------------------------------------------------
    187           *                                       Local Prototypes
    188           * ------------------------------------------------------------------------------------------------
    189           */
    190          static void rxHaltCleanupFinalStep(void);
    191          
    192          static void rxStartIsr(void);
    193          static void rxAddrIsr(void);
    194          
    195          #ifdef FEATURE_MAC_SECURITY
    196            static void rxSecurityHdrIsr(void);
    197          #endif
    198          
    199          static void rxPayloadIsr(void);
    200          static void rxDiscardIsr(void);
    201          static void rxFcsIsr(void);
    202          
    203          static void rxPrepPayload(void);
    204          static void rxDiscardFrame(void);
    205          static void rxDone(void);
    206          static void rxPostRxUpdates(void);
    207          
    208          
    209          /* ------------------------------------------------------------------------------------------------
    210           *                                         Local Variables
    211           * ------------------------------------------------------------------------------------------------
    212           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    213          static void    (* pFuncRxState)(void);
   \                     pFuncRxState:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    214          static macRx_t  * pRxBuf;
   \                     pRxBuf:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    215          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    216          static uint8  rxBuf[MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN];
   \                     rxBuf:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    217          static uint8  rxUnreadLen;
   \                     rxUnreadLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    218          static uint8  rxNextLen;
   \                     rxNextLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    219          static uint8  rxPayloadLen;
   \                     rxPayloadLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    220          static uint8  rxFilter;
   \                     rxFilter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    221          static uint8  rxPromiscuousMode;
   \                     rxPromiscuousMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    222          static uint8  rxIsrActiveFlag;
   \                     rxIsrActiveFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    223          static uint8  rxResetFlag;
   \                     rxResetFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    224          static uint8  rxFifoOverflowCount;
   \                     rxFifoOverflowCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    225          
    226          
    227          /**************************************************************************************************
    228           * @fn          macRxInit
    229           *
    230           * @brief       Initialize receive variable states.
    231           *
    232           * @param       none
    233           *
    234           * @return      none
    235           **************************************************************************************************
    236           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    237          MAC_INTERNAL_API void macRxInit(void)
   \                     macRxInit:
    238          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    239            macRxFilter          = RX_FILTER_OFF;
   \   000004   90....       MOV       DPTR,#macRxFilter
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
    240            rxPromiscuousMode    = PROMISCUOUS_MODE_OFF;
   \   000009   90....       MOV       DPTR,#rxPromiscuousMode
   \   00000C   F0           MOVX      @DPTR,A
    241            pRxBuf               = NULL; /* required for macRxReset() to function correctly */
   \   00000D   90....       MOV       DPTR,#pRxBuf
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   F0           MOVX      @DPTR,A
    242            macRxActive          = MAC_RX_ACTIVE_NO_ACTIVITY;
   \   000013   90....       MOV       DPTR,#macRxActive
   \   000016   12....       LCALL     ?Subroutine25 & 0xFFFF
    243            pFuncRxState         = &rxStartIsr;
   \                     ??CrossCallReturnLabel_41:
   \   000019   12....       LCALL     ??Subroutine33_0 & 0xFFFF
    244            macRxOutgoingAckFlag = 0;
    245            rxIsrActiveFlag      = 0;
   \                     ??CrossCallReturnLabel_58:
   \   00001C   90....       MOV       DPTR,#rxIsrActiveFlag
   \   00001F   F0           MOVX      @DPTR,A
    246            rxResetFlag          = 0;
   \   000020   90....       MOV       DPTR,#rxResetFlag
   \   000023   F0           MOVX      @DPTR,A
    247            rxFifoOverflowCount  = 0;
   \   000024   90....       MOV       DPTR,#rxFifoOverflowCount
   \   000027   02....       LJMP      ?Subroutine0 & 0xFFFF
    248          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#macRxOutgoingAckFlag
   \   000004   E4           CLR       A
   \   000005   F0           MOVX      @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                REQUIRE ??Subroutine37_0
   \   000001                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#pFuncRxState
   \   000004   74..         MOV       A,#`??rxStartIsr::?relay` & 0xff
   \   000006   F0           MOVX      @DPTR,A
   \   000007   A3           INC       DPTR
   \   000008   74..         MOV       A,#(`??rxStartIsr::?relay` >> 8) & 0xff
   \   00000A   22           RET
    249          
    250          
    251          /**************************************************************************************************
    252           * @fn          macRxRadioPowerUpInit
    253           *
    254           * @brief       Initialization for after radio first powers up.
    255           *
    256           * @param       none
    257           *
    258           * @return      none
    259           **************************************************************************************************
    260           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    261          MAC_INTERNAL_API void macRxRadioPowerUpInit(void)
   \                     macRxRadioPowerUpInit:
    262          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    263            /* set threshold at initial value */
    264            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \   000004   906194       MOV       DPTR,#0x6194
   \   000007   7405         MOV       A,#0x5
   \   000009   12....       LCALL     ?Subroutine10 & 0xFFFF
    265          
    266            /* clear any accidental threshold interrupt that happened as part of power up sequence */
    267            MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
   \                     ??CrossCallReturnLabel_15:
   \   00000C   75E9FB       MOV       0xe9,#-0x5
   \   00000F   E8           MOV       A,R0
   \   000010   A2E7         MOV       C,0xE0 /* A   */.7
   \   000012   92AF         MOV       0xa8.7,C
    268          
    269            /* enable threshold interrupts */
    270            MAC_RADIO_ENABLE_RX_THRESHOLD_INTERRUPT();
   \   000014   9061A3       MOV       DPTR,#0x61a3
   \   000017   E0           MOVX      A,@DPTR
   \   000018   D2E2         SETB      0xE0 /* A   */.2
   \   00001A   02....       LJMP      ?Subroutine0 & 0xFFFF
   \   00001D                REQUIRE _A_IEN0
   \   00001D                REQUIRE S1CON
   \   00001D                REQUIRE RFIRQF0
    271          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A8A8         MOV       R0,0xa8+0x0
   \   000003   C2AF         CLR       0xa8.7
   \   000005   759B00       MOV       0x9b,#0x0
   \   000008   22           RET
    272          
    273          
    274          /**************************************************************************************************
    275           * @fn          macRxTxReset
    276           *
    277           * @brief       Reset the receive state.
    278           *
    279           * @param       none
    280           *
    281           * @return      none
    282           **************************************************************************************************
    283           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    284          MAC_INTERNAL_API void macRxTxReset(void)
   \                     macRxTxReset:
    285          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    286            /* forces receiver off, cleans up by calling macRxHaltCleanup() and macTxHaltCleanup() */
    287            macRxHardDisable();
   \   000004                ; Setup parameters for call to function macRxHardDisable
   \   000004   12....       LCALL     `??macRxHardDisable::?relay`; Banked call to: macRxHardDisable
    288          
    289            /*
    290             *   Note : transmit does not require any reset logic
    291             *          beyond what macRxHardDisable() provides.
    292             */
    293          
    294            /* restore deault filter mode to off */
    295            macRxFilter = RX_FILTER_OFF;
   \   000007   90....       MOV       DPTR,#macRxFilter
   \   00000A   E4           CLR       A
   \   00000B   F0           MOVX      @DPTR,A
    296          
    297            /* return promiscuous mode to default off state */
    298            macRxPromiscuousMode(MAC_PROMISCUOUS_MODE_OFF);
   \   00000C                ; Setup parameters for call to function macRxPromiscuousMode
   \   00000C   F9           MOV       R1,A
   \   00000D   12....       LCALL     `??macRxPromiscuousMode::?relay`; Banked call to: macRxPromiscuousMode
    299          }
   \   000010   02....       LJMP      ??Subroutine37_0 & 0xFFFF
    300          
    301          
    302          /**************************************************************************************************
    303           * @fn          macRxHaltCleanup
    304           *
    305           * @brief       Cleanup up the receive logic after receiver is forced off.
    306           *
    307           * @param       none
    308           *
    309           * @return      none
    310           **************************************************************************************************
    311           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    312          MAC_INTERNAL_API void macRxHaltCleanup(void)
   \                     macRxHaltCleanup:
    313          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    314            rxResetFlag = 1;
   \   000004   90....       MOV       DPTR,#rxResetFlag
   \   000007   7401         MOV       A,#0x1
   \   000009   F0           MOVX      @DPTR,A
    315            if (!rxIsrActiveFlag)
   \   00000A   90....       MOV       DPTR,#rxIsrActiveFlag
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   7003         JNZ       ??CrossCallReturnLabel_39
    316            {
    317              rxHaltCleanupFinalStep();
   \   000010                ; Setup parameters for call to function rxHaltCleanupFinalStep
   \   000010   12....       LCALL     ?Subroutine23 & 0xFFFF
    318              rxResetFlag = 0;
    319            }
    320          }
   \                     ??CrossCallReturnLabel_39:
   \   000013   02....       LJMP      ??Subroutine37_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL     `??rxHaltCleanupFinalStep::?relay`; Banked call to: rxHaltCleanupFinalStep
   \   000003   90....       MOV       DPTR,#rxResetFlag
   \   000006   E4           CLR       A
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET
    321          
    322          
    323          /*=================================================================================================
    324           * @fn          rxHaltCleanupFinalStep
    325           *
    326           * @brief       Required cleanup if receiver is halted in the middle of a receive.
    327           *
    328           * @param       none
    329           *
    330           * @return      none
    331           *=================================================================================================
    332           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    333          static void rxHaltCleanupFinalStep(void)
   \                     rxHaltCleanupFinalStep:
    334          {  
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    335            /* cancel any upcoming ACK transmit complete callback */
    336            MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \   000004   9061A4       MOV       DPTR,#0x61a4
   \   000007   E0           MOVX      A,@DPTR
   \   000008   C2E0         CLR       0xE0 /* A   */.0
   \   00000A   F0           MOVX      @DPTR,A
    337          
    338            /* set start of frame threshold */
    339            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \   00000B   906194       MOV       DPTR,#0x6194
   \   00000E   7405         MOV       A,#0x5
   \   000010   F0           MOVX      @DPTR,A
    340          
    341            /* flush the receive FIFO */
    342            MAC_RADIO_FLUSH_RX_FIFO();
   \   000011   75E1ED       MOV       0xe1,#-0x13
   \   000014   75E1ED       MOV       0xe1,#-0x13
    343          
    344            /* clear any receive interrupt that happened to squeak through */
    345            MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
   \   000017   A8A8         MOV       R0,0xa8+0x0
   \   000019   C2AF         CLR       0xa8.7
   \   00001B   759B00       MOV       0x9b,#0x0
   \   00001E   75E9FB       MOV       0xe9,#-0x5
   \   000021   E8           MOV       A,R0
   \   000022   A2E7         MOV       C,0xE0 /* A   */.7
   \   000024   92AF         MOV       0xa8.7,C
    346          
    347            /* if data buffer has been allocated, free it */
    348            if (pRxBuf != NULL)
   \   000026   90....       MOV       DPTR,#pRxBuf
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F8           MOV       R0,A
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F9           MOV       R1,A
   \   00002E   E8           MOV       A,R0
   \   00002F   49           ORL       A,R1
   \   000030   6007         JZ        ??rxHaltCleanupFinalStep_0
    349            {
    350              MEM_FREE((uint8 **)&pRxBuf);
   \   000032                ; Setup parameters for call to function macDataRxMemFree
   \   000032   7A..         MOV       R2,#pRxBuf & 0xff
   \   000034   7B..         MOV       R3,#(pRxBuf >> 8) & 0xff
   \   000036   12....       LCALL     `??macDataRxMemFree::?relay`; Banked call to: macDataRxMemFree
    351            }
    352            /* MEM_FREE() sets parameter to NULL. */
    353          
    354            pFuncRxState = &rxStartIsr;
   \                     ??rxHaltCleanupFinalStep_0:
   \   000039   90....       MOV       DPTR,#pFuncRxState
   \   00003C   74..         MOV       A,#`??rxStartIsr::?relay` & 0xff
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   A3           INC       DPTR
   \   000040   74..         MOV       A,#(`??rxStartIsr::?relay` >> 8) & 0xff
   \   000042   F0           MOVX      @DPTR,A
    355          
    356            /* if receive was active, perform the post receive updates */
    357            if (macRxActive || macRxOutgoingAckFlag)
   \   000043   90....       MOV       DPTR,#macRxActive
   \   000046   E0           MOVX      A,@DPTR
   \   000047   7006         JNZ       ??rxHaltCleanupFinalStep_1
   \   000049   90....       MOV       DPTR,#macRxOutgoingAckFlag
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   600C         JZ        ??rxHaltCleanupFinalStep_2
    358            {
    359              macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxHaltCleanupFinalStep_1:
   \   00004F   90....       MOV       DPTR,#macRxActive
   \   000052   E4           CLR       A
   \   000053   F0           MOVX      @DPTR,A
    360              macRxOutgoingAckFlag = 0;
   \   000054   90....       MOV       DPTR,#macRxOutgoingAckFlag
   \   000057   F0           MOVX      @DPTR,A
    361          
    362              rxPostRxUpdates();
   \   000058                ; Setup parameters for call to function rxPostRxUpdates
   \   000058   12....       LCALL     `??rxPostRxUpdates::?relay`; Banked call to: rxPostRxUpdates
    363            }
    364          }
   \                     ??rxHaltCleanupFinalStep_2:
   \   00005B   02....       LJMP      ??Subroutine37_0 & 0xFFFF
   \   00005E                REQUIRE RFST
   \   00005E                REQUIRE _A_IEN0
   \   00005E                REQUIRE S1CON
   \   00005E                REQUIRE RFIRQF0
    365          
    366          
    367          /**************************************************************************************************
    368           * @fn          macRxThresholdIsr
    369           *
    370           * @brief       Interrupt service routine called when bytes in FIFO reach threshold value.
    371           *              It implements a state machine for receiving a packet.
    372           *
    373           * @param       none
    374           *
    375           * @return      none
    376           **************************************************************************************************
    377           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    378          MAC_INTERNAL_API void macRxThresholdIsr(void)
   \                     macRxThresholdIsr:
    379          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    380            /* if currently reseting, do not execute receive ISR logic */
    381            if (rxResetFlag)
   \   000004   90....       MOV       DPTR,#rxResetFlag
   \   000007   E0           MOVX      A,@DPTR
   \   000008   701D         JNZ       ??CrossCallReturnLabel_40
    382            {
    383              return;
    384            }
    385          
    386            /*
    387             *  Call the function that handles the current receive state.
    388             *  A flag is set for the duration of the call to indicate
    389             *  the ISR is executing.  This is necessary for the reset
    390             *  logic so it does not perform a reset in the middle of
    391             *  executing the ISR.
    392             */
    393            rxIsrActiveFlag = 1;
   \   00000A   90....       MOV       DPTR,#rxIsrActiveFlag
   \   00000D   7401         MOV       A,#0x1
   \   00000F   F0           MOVX      @DPTR,A
    394            (*pFuncRxState)();
   \   000010                ; Setup parameters for indirect call
   \   000010   90....       MOV       DPTR,#pFuncRxState
   \   000013   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000016   12....       LCALL     ?CALL_IND
    395            rxIsrActiveFlag = 0;
   \   000019   90....       MOV       DPTR,#rxIsrActiveFlag
   \   00001C   E4           CLR       A
   \   00001D   F0           MOVX      @DPTR,A
    396          
    397            /* if a reset occurred during the ISR, peform cleanup here */
    398            if (rxResetFlag)
   \   00001E   90....       MOV       DPTR,#rxResetFlag
   \   000021   E0           MOVX      A,@DPTR
   \   000022   6003         JZ        ??CrossCallReturnLabel_40
    399            {
    400              rxHaltCleanupFinalStep();
   \   000024                ; Setup parameters for call to function rxHaltCleanupFinalStep
   \   000024   12....       LCALL     ?Subroutine23 & 0xFFFF
    401              rxResetFlag = 0;
    402            }
    403          }
   \                     ??CrossCallReturnLabel_40:
   \   000027   02....       LJMP      ??Subroutine37_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET
    404          
    405          
    406          /*=================================================================================================
    407           * @fn          rxStartIsr
    408           *
    409           * @brief       First ISR state for receiving a packet - compute packet length, allocate
    410           *              buffer, initialize buffer.  Acknowledgements are handled immediately without
    411           *              allocating a buffer.
    412           *
    413           * @param       none
    414           *
    415           * @return      none
    416           *=================================================================================================
    417           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    418          static void rxStartIsr(void)
   \                     rxStartIsr:
    419          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    420            uint8  addrLen;
    421            uint8  ackWithPending;
    422            uint8  dstAddrMode;
    423            uint8  srcAddrMode;
    424            uint8  mhrLen = 0;
   \   00000A   75..00       MOV       ?V2,#0x0
    425          
    426            MAC_ASSERT(!macRxActive); /* receive on top of receive */
   \   00000D   90....       MOV       DPTR,#macRxActive
   \   000010   E0           MOVX      A,@DPTR
   \   000011   6003         JZ        ??rxStartIsr_0
   \   000013                ; Setup parameters for call to function halAssertHandler
   \   000013   12....       LCALL     `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    427          
    428            /* indicate rx is active */
    429            macRxActive = MAC_RX_ACTIVE_STARTED;
   \                     ??rxStartIsr_0:
   \   000016   90....       MOV       DPTR,#macRxActive
   \   000019   7481         MOV       A,#-0x7f
   \   00001B   F0           MOVX      @DPTR,A
    430          
    431            /*
    432             *  For bullet proof functionality, need to see if the receiver was just turned off.
    433             *  The logic to request turning off the receiver, disables interrupts and then checks
    434             *  the value of macRxActive.  If it is TRUE, the receiver will not be turned off.
    435             *
    436             *  There is a small hole though.  It's possible to attempt turning off the receiver
    437             *  in the window from when the receive interrupt fires and the point where macRxActive
    438             *  is set to TRUE.  To plug this hole, the on/off status must be tested *after*
    439             *  macRxActive has been set.  If the receiver is off at this point, there is nothing
    440             *  in the RX fifo and the receive is simply aborted.
    441             *
    442             *  Also, there are some considerations in case a hard disable just happened.  Usually,
    443             *  the receiver will just be off at this point after a hard disable.  The check described
    444             *  above will account for this case too.  However, if a hard disable were immediately
    445             *  followed by an enable, the receiver would be on.  To catch this case, the receive
    446             *  FIFO is also tested to see if it is empty.  Recovery is identical to the other cases.
    447             */
    448            if (!macRxOnFlag || MAC_RADIO_RX_FIFO_IS_EMPTY())
   \   00001C   90....       MOV       DPTR,#macRxOnFlag
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   600D         JZ        ??rxStartIsr_1
   \   000022   906193       MOV       DPTR,#0x6193
   \   000025   E0           MOVX      A,@DPTR
   \   000026   A2E7         MOV       C,0xE0 /* A   */.7
   \   000028   4010         JC        ??rxStartIsr_2
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   A2E6         MOV       C,0xE0 /* A   */.6
   \   00002D   400B         JC        ??rxStartIsr_2
    449            {
    450              /* reset active flag */
    451              macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxStartIsr_1:
   \   00002F   90....       MOV       DPTR,#macRxActive
   \   000032   E4           CLR       A
   \   000033   F0           MOVX      @DPTR,A
    452          
    453              /*
    454               *  To be absolutely bulletproof, must make sure no transmit queue'ed up during
    455               *  the tiny, tiny window when macRxActive was not zero.
    456               */
    457              rxPostRxUpdates();
   \   000034                ; Setup parameters for call to function rxPostRxUpdates
   \   000034   12....       LCALL     `??rxPostRxUpdates::?relay`; Banked call to: rxPostRxUpdates
    458          
    459              /* return immediately from here */
    460              return;
   \   000037   02....       LJMP      ??rxStartIsr_3 & 0xFFFF
    461            }
    462          
    463            /*
    464             *  If interrupts are held off for too long it's possible the previous "transmit done"
    465             *  callback is pending.  If this is the case, it needs to be completed before
    466             *  continuing with the receive logic.
    467             */
    468            MAC_RADIO_FORCE_TX_DONE_IF_PENDING();
   \                     ??rxStartIsr_2:
   \   00003A                ; Setup parameters for call to function macCspForceTxDoneIfPending
   \   00003A   12....       LCALL     `??macCspForceTxDoneIfPending::?relay`; Banked call to: macCspForceTxDoneIfPending
    469          
    470            /*
    471             *  It's possible receive logic is still waiting for confirmation of an ACK that went out
    472             *  for the previous receive.  This is OK but the callback needs to be canceled at this point.
    473             *  That callback execute receive cleanup logic that will run at the completion
    474             *  of *this* receive.  Also, it is important the flag for the outgoing ACK to be cleared.
    475             */
    476            MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \   00003D   12....       LCALL     ?Subroutine6 & 0xFFFF
    477            macRxOutgoingAckFlag = 0;
    478          
    479            /*
    480             *  Make a module-local copy of macRxFilter.  This prevents the selected
    481             *  filter from changing in the middle of a receive.
    482             */
    483            rxFilter = macRxFilter;
   \                     ??CrossCallReturnLabel_56:
   \   000040   90....       MOV       DPTR,#macRxFilter
   \   000043   E0           MOVX      A,@DPTR
   \   000044   90....       MOV       DPTR,#rxFilter
   \   000047   F0           MOVX      @DPTR,A
    484          
    485            /*-------------------------------------------------------------------------------
    486             *  Read initial frame information from FIFO.
    487             *
    488             *   This code is not triggered until the following are in the RX FIFO:
    489             *     frame length          - one byte containing length of MAC frame (excludes this field)
    490             *     frame control field   - two bytes defining frame type, addressing fields, control flags
    491             *     sequence number       - one byte unique sequence identifier
    492             *     additional two bytes  - these bytes are available in case the received frame is an ACK,
    493             *                             if so, the frame can be verified and responded to immediately,
    494             *                             if not an ACK, these bytes will be processed normally
    495             */
    496          
    497            /* read frame length, frame control field, and sequence number from FIFO */
    498            MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN);
   \   000048                ; Setup parameters for call to function macMemReadRxFifo
   \   000048   7904         MOV       R1,#0x4
   \   00004A   7A..         MOV       R2,#rxBuf & 0xff
   \   00004C   7B..         MOV       R3,#(rxBuf >> 8) & 0xff
   \   00004E   12....       LCALL     `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
    499          
    500            /* bytes to read from FIFO equals frame length minus length of MHR fields just read from FIFO */
    501            rxUnreadLen = (rxBuf[0] & PHY_PACKET_SIZE_MASK) - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN;
   \   000051   90....       MOV       DPTR,#rxBuf
   \   000054   E0           MOVX      A,@DPTR
   \   000055   547F         ANL       A,#0x7f
   \   000057   24FD         ADD       A,#-0x3
   \   000059   90....       MOV       DPTR,#rxUnreadLen
   \   00005C   F0           MOVX      @DPTR,A
    502          
    503            /*
    504             *  Workaround for chip bug #1547.  The receive buffer can sometimes be corrupted by hardware.
    505             *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
    506             *  the entire receive buffer is flushed.
    507             */
    508            if ((rxUnreadLen > (MAC_A_MAX_PHY_PACKET_SIZE - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN)) ||
    509                (MAC_FRAME_TYPE(&rxBuf[1]) > MAC_FRAME_TYPE_MAX_VALID))
   \   00005D   C3           CLR       C
   \   00005E   947D         SUBB      A,#0x7d
   \   000060   4003         JC        $+5
   \   000062   02....       LJMP      ??rxStartIsr_4 & 0xFFFF
   \   000065   90....       MOV       DPTR,#rxBuf + 1
   \   000068   E0           MOVX      A,@DPTR
   \   000069   5407         ANL       A,#0x7
   \   00006B   C3           CLR       C
   \   00006C   9404         SUBB      A,#0x4
   \   00006E   4003         JC        $+5
   \   000070   02....       LJMP      ??rxStartIsr_4 & 0xFFFF
    510            {
    511              MAC_RADIO_FLUSH_RX_FIFO();
    512              rxDone();
    513              return;
    514            }
    515          
    516          
    517            /*-------------------------------------------------------------------------------
    518             *  Process ACKs.
    519             *
    520             *  If this frame is an ACK, process it immediately and exit from here.
    521             *  If this frame is not an ACK and transmit is listening for an ACK, let
    522             *  the transmit logic know an non-ACK was received so transmit can complete.
    523             *
    524             *  In promiscuous mode ACKs are treated like any other frame.
    525             */
    526            if ((MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_ACK) && (rxPromiscuousMode == PROMISCUOUS_MODE_OFF))
   \   000073   E0           MOVX      A,@DPTR
   \   000074   5407         ANL       A,#0x7
   \   000076   6402         XRL       A,#0x2
   \   000078   6003         JZ        $+5
   \   00007A   02....       LJMP      ??rxStartIsr_5 & 0xFFFF
   \   00007D   90....       MOV       DPTR,#rxPromiscuousMode
   \   000080   E0           MOVX      A,@DPTR
   \   000081   6003         JZ        $+5
   \   000083   02....       LJMP      ??rxStartIsr_5 & 0xFFFF
    527            {
    528              halIntState_t  s;
    529              uint8 fcsBuf[MAC_FCF_FIELD_LEN];
    530              /*
    531               *  There are guaranteed to be two unread bytes in the FIFO.  By defintion, for ACK frames
    532               *  these two bytes will be the FCS.
    533               */
    534          
    535              /* read FCS from FIFO (threshold set so bytes are guaranteed to be there) */
    536              MAC_RADIO_READ_RX_FIFO(fcsBuf, MAC_FCS_FIELD_LEN);
   \   000086                ; Setup parameters for call to function macMemReadRxFifo
   \   000086   7902         MOV       R1,#0x2
   \   000088   AA..         MOV       R2,?XSP + 0
   \   00008A   AB..         MOV       R3,?XSP + 1
   \   00008C   12....       LCALL     `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
    537          
    538              /*
    539               *  This critical section ensures that the ACK timeout won't be triggered in the
    540               *  middle of receiving the ACK frame.
    541               */
    542              HAL_ENTER_CRITICAL_SECTION(s);
   \   00008F   A2AF         MOV       C,0xa8.7
   \   000091   E4           CLR       A
   \   000092   33           RLC       A
   \   000093   F5..         MOV       ?V0,A
   \   000095   C2AF         CLR       0xa8.7
    543          
    544              /* see if transmit is listening for an ACK */
    545              if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
   \   000097   90....       MOV       DPTR,#macTxActive
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   6486         XRL       A,#0x86
   \   00009D   7076         JNZ       ??rxStartIsr_6
    546              {
    547                MAC_ASSERT(pMacDataTx != NULL); /* transmit buffer must be present */
   \   00009F   90....       MOV       DPTR,#pMacDataTx
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   F8           MOV       R0,A
   \   0000A4   A3           INC       DPTR
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   F9           MOV       R1,A
   \   0000A7   E8           MOV       A,R0
   \   0000A8   49           ORL       A,R1
   \   0000A9   7003         JNZ       ??rxStartIsr_7
   \   0000AB                ; Setup parameters for call to function halAssertHandler
   \   0000AB   12....       LCALL     `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    548          
    549                /* record link quality metrics for the receive ACK */
    550                {
    551                  int8 rssiDbm;
    552                  uint8 corr;
    553          
    554                  rssiDbm = PROPRIETARY_FCS_RSSI(fcsBuf) + MAC_RADIO_RSSI_OFFSET;
   \                     ??rxStartIsr_7:
   \   0000AE   85..82       MOV       DPL,?XSP + 0
   \   0000B1   85..83       MOV       DPH,?XSP + 1
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   24B7         ADD       A,#-0x49
   \   0000B7   FE           MOV       R6,A
    555                  MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
    556                  corr = PROPRIETARY_FCS_CORRELATION_VALUE(fcsBuf);
   \   0000B8   7401         MOV       A,#0x1
   \   0000BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BD   E0           MOVX      A,@DPTR
   \   0000BE   547F         ANL       A,#0x7f
   \   0000C0   FF           MOV       R7,A
    557          
    558                  pMacDataTx->internal.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
   \   0000C1                ; Setup parameters for call to function macRadioComputeLQI
   \   0000C1   FA           MOV       R2,A
   \   0000C2   EE           MOV       A,R6
   \   0000C3   F9           MOV       R1,A
   \   0000C4   12....       LCALL     `??macRadioComputeLQI::?relay`; Banked call to: macRadioComputeLQI
   \   0000C7   90....       MOV       DPTR,#pMacDataTx
   \   0000CA   12....       LCALL     ??Subroutine34_0 & 0xFFFF
    559                  pMacDataTx->internal.correlation = corr;
    560                  pMacDataTx->internal.rssi= rssiDbm;
    561                }
   \                     ??CrossCallReturnLabel_59:
   \   0000CD   2415         ADD       A,#0x15
   \   0000CF   F582         MOV       DPL,A
   \   0000D1   E4           CLR       A
   \   0000D2   38           ADDC      A,R0
   \   0000D3   F583         MOV       DPH,A
   \   0000D5   E9           MOV       A,R1
   \   0000D6   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000D9   2416         ADD       A,#0x16
   \   0000DB   F582         MOV       DPL,A
   \   0000DD   E4           CLR       A
   \   0000DE   38           ADDC      A,R0
   \   0000DF   F583         MOV       DPH,A
   \   0000E1   EF           MOV       A,R7
   \   0000E2   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000E5   2417         ADD       A,#0x17
   \   0000E7   F582         MOV       DPL,A
   \   0000E9   E4           CLR       A
   \   0000EA   38           ADDC      A,R0
   \   0000EB   F583         MOV       DPH,A
   \   0000ED   EE           MOV       A,R6
   \   0000EE   F0           MOVX      @DPTR,A
    562          
    563                /*
    564                 *  It's okay if the ACK timeout is triggered here. The callbacks for ACK received
    565                 *  or ACK not received will check "macTxActive" flag before taking any actions.
    566                 */
    567                HAL_EXIT_CRITICAL_SECTION(s);
   \   0000EF   E5..         MOV       A,?V0
   \   0000F1   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000F3   92AF         MOV       0xa8.7,C
    568          
    569                /*
    570                 *  An ACK was received so transmit logic needs to know.  If the FCS failed,
    571                 *  the transmit logic still needs to know.  In that case, treat the frame
    572                 *  as a non-ACK to complete the active transmit.
    573                 */
    574                if (PROPRIETARY_FCS_CRC_OK(fcsBuf))
   \   0000F5   7401         MOV       A,#0x1
   \   0000F7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FA   E0           MOVX      A,@DPTR
   \   0000FB   A2E7         MOV       C,0xE0 /* A   */.7
   \   0000FD   5011         JNC       ??rxStartIsr_8
    575                {
    576                  /* call transmit logic to indicate ACK was received */
    577                  macTxAckReceivedCallback(MAC_SEQ_NUMBER(&rxBuf[1]), MAC_FRAME_PENDING(&rxBuf[1]));
   \   0000FF                ; Setup parameters for call to function macTxAckReceivedCallback
   \   0000FF   90....       MOV       DPTR,#rxBuf + 1
   \   000102   E0           MOVX      A,@DPTR
   \   000103   5410         ANL       A,#0x10
   \   000105   FA           MOV       R2,A
   \   000106   90....       MOV       DPTR,#rxBuf + 3
   \   000109   E0           MOVX      A,@DPTR
   \   00010A   F9           MOV       R1,A
   \   00010B   12....       LCALL     `??macTxAckReceivedCallback::?relay`; Banked call to: macTxAckReceivedCallback
   \   00010E   807A         SJMP      ??rxStartIsr_9
    578                }
    579                else
    580                {
    581                  macTxAckNotReceivedCallback();
   \                     ??rxStartIsr_8:
   \   000110                ; Setup parameters for call to function macTxAckNotReceivedCallback
   \   000110   12....       LCALL     `??macTxAckNotReceivedCallback::?relay`; Banked call to: macTxAckNotReceivedCallback
   \   000113   8075         SJMP      ??rxStartIsr_9
    582                }
    583              }
    584              else
    585              {
    586                HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??rxStartIsr_6:
   \   000115   E5..         MOV       A,?V0
   \   000117   A2E0         MOV       C,0xE0 /* A   */.0
   \   000119   92AF         MOV       0xa8.7,C
    587              }
    588          
    589              /* receive is done, exit from here */
    590              rxDone();
   \   00011B                ; Setup parameters for call to function rxDone
   \   00011B   806D         SJMP      ??rxStartIsr_9
    591              return;
    592            }
    593            else if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
   \                     ??rxStartIsr_5:
   \   00011D   90....       MOV       DPTR,#macTxActive
   \   000120   E0           MOVX      A,@DPTR
   \   000121   6486         XRL       A,#0x86
   \   000123   7003         JNZ       ??rxStartIsr_10
    594            {
    595              macTxAckNotReceivedCallback();
   \   000125                ; Setup parameters for call to function macTxAckNotReceivedCallback
   \   000125   12....       LCALL     `??macTxAckNotReceivedCallback::?relay`; Banked call to: macTxAckNotReceivedCallback
    596            }
    597          
    598            /*-------------------------------------------------------------------------------
    599             *  Apply filtering.
    600             *
    601             *  For efficiency, see if filtering is even 'on' before processing.  Also test
    602             *  to make sure promiscuous mode is disabled.  If promiscuous mode is enabled,
    603             *  do not apply filtering.
    604             */
    605            if ((rxFilter != RX_FILTER_OFF) && !rxPromiscuousMode)
   \                     ??rxStartIsr_10:
   \   000128   90....       MOV       DPTR,#rxFilter
   \   00012B   E0           MOVX      A,@DPTR
   \   00012C   602F         JZ        ??rxStartIsr_11
   \   00012E   90....       MOV       DPTR,#rxPromiscuousMode
   \   000131   E0           MOVX      A,@DPTR
   \   000132   7029         JNZ       ??rxStartIsr_11
    606            {
    607              if (/* filter all frames */
    608                   (rxFilter == RX_FILTER_ALL) ||
    609          
    610                   /* filter non-beacon frames */
    611                   ((rxFilter == RX_FILTER_NON_BEACON_FRAMES) &&
    612                    (MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_BEACON)) ||
    613          
    614                   /* filter non-command frames */
    615                   ((rxFilter == RX_FILTER_NON_COMMAND_FRAMES) &&
    616                    ((MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_COMMAND))))
   \   000134   90....       MOV       DPTR,#rxFilter
   \   000137   E0           MOVX      A,@DPTR
   \   000138   6401         XRL       A,#0x1
   \   00013A   7003         JNZ       $+5
   \   00013C   02....       LJMP      ??rxStartIsr_12 & 0xFFFF
   \   00013F   E0           MOVX      A,@DPTR
   \   000140   6402         XRL       A,#0x2
   \   000142   700A         JNZ       ??rxStartIsr_13
   \   000144   90....       MOV       DPTR,#rxBuf + 1
   \   000147   E0           MOVX      A,@DPTR
   \   000148   5407         ANL       A,#0x7
   \   00014A   7079         JNZ       ??rxStartIsr_12
   \   00014C   800F         SJMP      ??rxStartIsr_11
   \                     ??rxStartIsr_13:
   \   00014E   E0           MOVX      A,@DPTR
   \   00014F   6403         XRL       A,#0x3
   \   000151   700A         JNZ       ??rxStartIsr_11
   \   000153   90....       MOV       DPTR,#rxBuf + 1
   \   000156   E0           MOVX      A,@DPTR
   \   000157   5407         ANL       A,#0x7
   \   000159   6403         XRL       A,#0x3
   \   00015B   7068         JNZ       ??rxStartIsr_12
    617              {
    618                /* discard rest of frame */
    619                rxDiscardFrame();
    620                return;
    621              }
    622            }
    623          
    624            /*-------------------------------------------------------------------------------
    625             *  Compute length of addressing fields.  Compute payload length.
    626             */
    627          
    628            /* decode addressing modes */
    629            dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
   \                     ??rxStartIsr_11:
   \   00015D   90....       MOV       DPTR,#rxBuf + 2
   \   000160   E0           MOVX      A,@DPTR
   \   000161   F8           MOV       R0,A
   \   000162   13           RRC       A
   \   000163   13           RRC       A
   \   000164   543F         ANL       A,#0x3f
   \   000166   5403         ANL       A,#0x3
   \   000168   F5..         MOV       ?V0,A
    630            srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
   \   00016A   E8           MOV       A,R0
   \   00016B   C4           SWAP      A
   \   00016C   13           RRC       A
   \   00016D   13           RRC       A
   \   00016E   5403         ANL       A,#0x3
   \   000170   F5..         MOV       ?V1,A
    631          
    632            /*
    633            *  Workaround for chip bug #1547.  The receive buffer can sometimes be corrupted by hardware.
    634             *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
    635             *  the entire receive buffer is flushed.
    636             */
    637            if (macChipVersion == REV_A)
   \   000172   90....       MOV       DPTR,#macChipVersion
   \   000175   E0           MOVX      A,@DPTR
   \   000176   7018         JNZ       ??rxStartIsr_14
    638            {
    639              if ((srcAddrMode == ADDR_MODE_RESERVERED) || (dstAddrMode == ADDR_MODE_RESERVERED))
   \   000178   7401         MOV       A,#0x1
   \   00017A   65..         XRL       A,?V1
   \   00017C   6006         JZ        ??rxStartIsr_4
   \   00017E   7401         MOV       A,#0x1
   \   000180   65..         XRL       A,?V0
   \   000182   700C         JNZ       ??rxStartIsr_14
    640              {
    641                MAC_RADIO_FLUSH_RX_FIFO();
   \                     ??rxStartIsr_4:
   \   000184   75E1ED       MOV       0xe1,#-0x13
   \   000187   75E1ED       MOV       0xe1,#-0x13
    642                rxDone();
   \   00018A                ; Setup parameters for call to function rxDone
   \                     ??rxStartIsr_9:
   \   00018A   12....       LCALL     `??rxDone::?relay`; Banked call to: rxDone
    643                return;
   \   00018D   02....       LJMP      ??rxStartIsr_3 & 0xFFFF
    644              }
    645            }
    646          
    647            /*
    648             *  Compute the addressing field length.  A lookup table based on addressing
    649             *  mode is used for efficiency.  If the source address is present and the
    650             *  frame is intra-PAN, the PAN Id is not repeated.  In this case, the address
    651             *  length is adjusted to match the smaller length.
    652             */
    653            addrLen = macRxAddrLen[dstAddrMode] + macRxAddrLen[srcAddrMode];
   \                     ??rxStartIsr_14:
   \   000190   A8..         MOV       R0,?V1
   \   000192   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000195   FA           MOV       R2,A
   \   000196   A8..         MOV       R0,?V0
   \   000198   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00019B   2A           ADD       A,R2
   \   00019C   FE           MOV       R6,A
    654            if ((srcAddrMode != SADDR_MODE_NONE) && MAC_INTRA_PAN(&rxBuf[1]))
   \   00019D   E5..         MOV       A,?V1
   \   00019F   600A         JZ        ??rxStartIsr_15
   \   0001A1   90....       MOV       DPTR,#rxBuf + 1
   \   0001A4   E0           MOVX      A,@DPTR
   \   0001A5   A2E6         MOV       C,0xE0 /* A   */.6
   \   0001A7   5002         JNC       ??rxStartIsr_15
    655            {
    656              addrLen -= MAC_PAN_ID_FIELD_LEN;
   \   0001A9   1E           DEC       R6
   \   0001AA   1E           DEC       R6
    657            }
    658          
    659            /*
    660             *  If there are not enough unread bytes to include the computed address
    661             *  plus FCS field, the frame is corrupted and must be discarded.
    662             */
    663            if ((addrLen + MAC_FCS_FIELD_LEN) > rxUnreadLen)
   \                     ??rxStartIsr_15:
   \   0001AB   90....       MOV       DPTR,#rxUnreadLen
   \   0001AE   E0           MOVX      A,@DPTR
   \   0001AF   FA           MOV       R2,A
   \   0001B0   EE           MOV       A,R6
   \   0001B1   7900         MOV       R1,#0x0
   \   0001B3   2402         ADD       A,#0x2
   \   0001B5   F8           MOV       R0,A
   \   0001B6   5001         JNC       ??rxStartIsr_16
   \   0001B8   09           INC       R1
   \                     ??rxStartIsr_16:
   \   0001B9   C3           CLR       C
   \   0001BA   EA           MOV       A,R2
   \   0001BB   98           SUBB      A,R0
   \   0001BC   E4           CLR       A
   \   0001BD   99           SUBB      A,R1
   \   0001BE   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0001C0   65D0         XRL       A,PSW
   \   0001C2   33           RLC       A
   \   0001C3   5006         JNC       ??rxStartIsr_17
    664            {
    665              /* discard frame and exit */
    666              rxDiscardFrame();
   \                     ??rxStartIsr_12:
   \   0001C5                ; Setup parameters for call to function rxDiscardFrame
   \   0001C5   12....       LCALL     `??rxDiscardFrame::?relay`; Banked call to: rxDiscardFrame
    667              return;
   \   0001C8   02....       LJMP      ??rxStartIsr_3 & 0xFFFF
    668            }
    669          
    670            /* aux security header plus payload length is equal to unread bytes minus
    671             * address length, minus the FCS
    672             */
    673            rxPayloadLen = rxUnreadLen - addrLen - MAC_FCS_FIELD_LEN;
   \                     ??rxStartIsr_17:
   \   0001CB   E0           MOVX      A,@DPTR
   \   0001CC   C3           CLR       C
   \   0001CD   9E           SUBB      A,R6
   \   0001CE   24FE         ADD       A,#-0x2
   \   0001D0   90....       MOV       DPTR,#rxPayloadLen
   \   0001D3   12....       LCALL     ?Subroutine4 & 0xFFFF
    674          
    675            /*-------------------------------------------------------------------------------
    676             *  Allocate memory for the incoming frame.
    677             */
    678            if (MAC_SEC_ENABLED(&rxBuf[1]))
   \                     ??CrossCallReturnLabel_6:
   \   0001D6   5003         JNC       ??rxStartIsr_18
    679            {
    680              /* increase the allocation size of MAC header for security */
    681              mhrLen = MAC_MHR_LEN;
   \   0001D8   75..25       MOV       ?V2,#0x25
    682            }
    683          
    684            pRxBuf = (macRx_t *) MEM_ALLOC(sizeof(macRx_t) + mhrLen + rxPayloadLen);
   \                     ??rxStartIsr_18:
   \   0001DB                ; Setup parameters for call to function macDataRxMemAlloc
   \   0001DB   90....       MOV       DPTR,#rxPayloadLen
   \   0001DE   E0           MOVX      A,@DPTR
   \   0001DF   F8           MOV       R0,A
   \   0001E0   E5..         MOV       A,?V2
   \   0001E2   28           ADD       A,R0
   \   0001E3   F8           MOV       R0,A
   \   0001E4   E4           CLR       A
   \   0001E5   3400         ADDC      A,#0x0
   \   0001E7   F9           MOV       R1,A
   \   0001E8   E8           MOV       A,R0
   \   0001E9   243A         ADD       A,#0x3a
   \   0001EB   FA           MOV       R2,A
   \   0001EC   E4           CLR       A
   \   0001ED   39           ADDC      A,R1
   \   0001EE   FB           MOV       R3,A
   \   0001EF   12....       LCALL     `??macDataRxMemAlloc::?relay`; Banked call to: macDataRxMemAlloc
   \   0001F2   90....       MOV       DPTR,#pRxBuf
   \   0001F5   12....       LCALL     ??Subroutine35_0 & 0xFFFF
    685            if (pRxBuf == NULL)
   \                     ??CrossCallReturnLabel_68:
   \   0001F8   F9           MOV       R1,A
   \   0001F9   EA           MOV       A,R2
   \   0001FA   49           ORL       A,R1
   \   0001FB   7005         JNZ       ??rxStartIsr_19
    686            {
    687              /* Cancel the outgoing TX ACK */
    688              MAC_RADIO_CANCEL_TX_ACK();
   \   0001FD   75E1E8       MOV       0xe1,#-0x18
   \   000200   80C3         SJMP      ??rxStartIsr_12
    689          
    690              /* buffer allocation failed, discard the frame and exit*/
    691              rxDiscardFrame();
    692              return;
    693            }
    694          
    695            /*-------------------------------------------------------------------------------
    696             *  Set up to process ACK request.  Do not ACK if in promiscuous mode.
    697             */
    698            ackWithPending = 0;
   \                     ??rxStartIsr_19:
   \   000202   7F00         MOV       R7,#0x0
    699            if (!rxPromiscuousMode)
   \   000204   90....       MOV       DPTR,#rxPromiscuousMode
   \   000207   E0           MOVX      A,@DPTR
   \   000208   700A         JNZ       ??rxStartIsr_20
    700            {
    701              macRxOutgoingAckFlag = MAC_ACK_REQUEST(&rxBuf[1]);
   \   00020A   90....       MOV       DPTR,#rxBuf + 1
   \   00020D   E0           MOVX      A,@DPTR
   \   00020E   5420         ANL       A,#0x20
   \   000210   90....       MOV       DPTR,#macRxOutgoingAckFlag
   \   000213   F0           MOVX      @DPTR,A
    702            }
    703          
    704            /*-------------------------------------------------------------------------------
    705             *  Process any ACK request.
    706             */
    707            if (macRxOutgoingAckFlag)
   \                     ??rxStartIsr_20:
   \   000214   90....       MOV       DPTR,#macRxOutgoingAckFlag
   \   000217   E0           MOVX      A,@DPTR
   \   000218   604D         JZ        ??rxStartIsr_21
    708            {
    709              halIntState_t  s;
    710          
    711              /*
    712               *  This critical section ensures that the callback ISR is initiated within time
    713               *  to guarantee correlation with the strobe.
    714               */
    715              HAL_ENTER_CRITICAL_SECTION(s);
   \   00021A   A2AF         MOV       C,0xa8.7
   \   00021C   E4           CLR       A
   \   00021D   33           RLC       A
   \   00021E   F5..         MOV       ?V2,A
   \   000220   C2AF         CLR       0xa8.7
    716          
    717              /* Do not ack data packet with pending more data */
    718              if( MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_COMMAND )
   \   000222   90....       MOV       DPTR,#rxBuf + 1
   \   000225   E0           MOVX      A,@DPTR
   \   000226   5407         ANL       A,#0x7
   \   000228   6403         XRL       A,#0x3
   \   00022A   701D         JNZ       ??rxStartIsr_22
    719              {
    720                if( macRxCheckMACPendingCallback())
   \   00022C                ; Setup parameters for call to function macRxCheckMACPendingCallback
   \   00022C   12....       LCALL     `??macRxCheckMACPendingCallback::?relay`; Banked call to: macRxCheckMACPendingCallback
   \   00022F   E9           MOV       A,R1
   \   000230   6003         JZ        $+5
   \   000232   02....       LJMP      ??rxStartIsr_23 & 0xFFFF
    721                {
    722                  /* Check is any mac data pending for end devices */
    723                  ackWithPending = MAC_RX_FLAG_ACK_PENDING;
    724                }
    725                else
    726                {
    727                  if( macSrcMatchIsEnabled )
   \   000235   90....       MOV       DPTR,#macSrcMatchIsEnabled
   \   000238   E0           MOVX      A,@DPTR
   \   000239   7003         JNZ       $+5
   \   00023B   02....       LJMP      ??rxStartIsr_24 & 0xFFFF
    728                  {
    729                    /* When autopend is enabled, check if allpending is set to true */
    730                    if( MAC_SrcMatchCheckAllPending() == MAC_AUTOACK_PENDING_ALL_ON )
   \   00023E                ; Setup parameters for call to function MAC_SrcMatchCheckAllPending
   \   00023E   12....       LCALL     `??MAC_SrcMatchCheckAllPending::?relay`; Banked call to: MAC_SrcMatchCheckAllPending
   \   000241   E9           MOV       A,R1
   \   000242   64FE         XRL       A,#0xfe
   \   000244   7003         JNZ       $+5
   \   000246   02....       LJMP      ??rxStartIsr_23 & 0xFFFF
    731                    {
    732                      ackWithPending = MAC_RX_FLAG_ACK_PENDING;
    733                    }
    734                  }
    735                  else
    736                  {
    737                    /* When autopend is disabled, check the application pending callback */
    738                    if( macRxCheckPendingCallback() )
    739                    {
    740                      ackWithPending = MAC_RX_FLAG_ACK_PENDING;
    741                    }
    742                  }
    743                }
    744              }
    745          
    746              if( ackWithPending == MAC_RX_FLAG_ACK_PENDING )
    747              {
    748                MAC_RADIO_TX_ACK_PEND();
    749              }
    750              else
    751              {
    752                MAC_RADIO_TX_ACK();
   \                     ??rxStartIsr_22:
   \   000249   90618A       MOV       DPTR,#0x618a
   \   00024C   E0           MOVX      A,@DPTR
   \   00024D   C2E2         CLR       0xE0 /* A   */.2
    753              }
   \                     ??rxStartIsr_25:
   \   00024F   12....       LCALL     ?Subroutine10 & 0xFFFF
    754          
    755          
    756              /* request a callback to macRxAckTxDoneCallback() when the ACK transmit has finished */
    757              MAC_RADIO_REQUEST_ACK_TX_DONE_CALLBACK();
   \                     ??CrossCallReturnLabel_16:
   \   000252   7591FE       MOV       0x91,#-0x2
   \   000255   E8           MOV       A,R0
   \   000256   A2E7         MOV       C,0xE0 /* A   */.7
   \   000258   92AF         MOV       0xa8.7,C
   \   00025A   9061A4       MOV       DPTR,#0x61a4
   \   00025D   E0           MOVX      A,@DPTR
   \   00025E   D2E0         SETB      0xE0 /* A   */.0
   \   000260   F0           MOVX      @DPTR,A
    758              HAL_EXIT_CRITICAL_SECTION(s);
   \   000261   E5..         MOV       A,?V2
   \   000263   A2E0         MOV       C,0xE0 /* A   */.0
   \   000265   92AF         MOV       0xa8.7,C
    759            }
    760          
    761           /*-------------------------------------------------------------------------------
    762            *  Populate the receive buffer going up to high-level.
    763            */
    764          
    765            /* configure the payload buffer
    766             * save MAC header pointer regardless of security status.
    767             */
    768            pRxBuf->mhr.p   = pRxBuf->msdu.p   = (uint8 *) (pRxBuf + 1);
   \                     ??rxStartIsr_21:
   \   000267   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00026A   F583         MOV       DPH,A
   \   00026C   8A82         MOV       DPL,R2
   \   00026E   A3           INC       DPTR
   \   00026F   A3           INC       DPTR
   \   000270   E8           MOV       A,R0
   \   000271   F0           MOVX      @DPTR,A
   \   000272   A3           INC       DPTR
   \   000273   E9           MOV       A,R1
   \   000274   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000277   12....       LCALL     ?Subroutine24 & 0xFFFF
    769            pRxBuf->mhr.len = pRxBuf->msdu.len =  rxPayloadLen;
   \                     ??CrossCallReturnLabel_51:
   \   00027A   90....       MOV       DPTR,#rxPayloadLen
   \   00027D   E0           MOVX      A,@DPTR
   \   00027E   C0E0         PUSH      A
   \   000280   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000283   D0E0         POP       A
   \   000285   F0           MOVX      @DPTR,A
   \   000286   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000289   E0           MOVX      A,@DPTR
   \   00028A   C0E0         PUSH      A
   \   00028C   90....       MOV       DPTR,#pRxBuf + 1
   \   00028F   12....       LCALL     ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000292   D0E0         POP       A
   \   000294   12....       LCALL     ?Subroutine4 & 0xFFFF
    770          
    771            if (MAC_SEC_ENABLED(&rxBuf[1]))
   \                     ??CrossCallReturnLabel_7:
   \   000297   5032         JNC       ??CrossCallReturnLabel_69
    772            {
    773              /* Copy FCF and sequence number to RX buffer */
    774              pRxBuf->mhr.len = MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN;
   \   000299   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00029C   7403         MOV       A,#0x3
   \   00029E   F0           MOVX      @DPTR,A
    775              osal_memcpy(pRxBuf->mhr.p, &rxBuf[1], pRxBuf->mhr.len);
   \   00029F                ; Setup parameters for call to function osal_memcpy
   \   00029F   75....       MOV       ?V4,#(rxBuf + 1) & 0xff
   \   0002A2   75....       MOV       ?V5,#((rxBuf + 1) >> 8) & 0xff
   \   0002A5   75..00       MOV       ?V6,#0x0
   \   0002A8   78..         MOV       R0,#?V4
   \   0002AA   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0002AD   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   0002B0   E0           MOVX      A,@DPTR
   \   0002B1   FC           MOV       R4,A
   \   0002B2   7D00         MOV       R5,#0x0
   \   0002B4   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0002B7   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0002BA   7403         MOV       A,#0x3
   \   0002BC   12....       LCALL     ?DEALLOC_XSTACK8
    776              pRxBuf->mhr.p += pRxBuf->mhr.len;
   \   0002BF   90....       MOV       DPTR,#pRxBuf
   \   0002C2   E0           MOVX      A,@DPTR
   \   0002C3   2433         ADD       A,#0x33
   \   0002C5   12....       LCALL     ?Subroutine12 & 0xFFFF
    777            }
   \                     ??CrossCallReturnLabel_20:
   \   0002C8   12....       LCALL     ?Subroutine9 & 0xFFFF
    778          
    779            /* set internal values */
    780            pRxBuf->mac.srcAddr.addrMode  = srcAddrMode;
   \                     ??CrossCallReturnLabel_69:
   \   0002CB   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0002CE   241B         ADD       A,#0x1b
   \   0002D0   F582         MOV       DPL,A
   \   0002D2   E4           CLR       A
   \   0002D3   38           ADDC      A,R0
   \   0002D4   F583         MOV       DPH,A
   \   0002D6   E5..         MOV       A,?V1
   \   0002D8   12....       LCALL     ?Subroutine2 & 0xFFFF
    781            pRxBuf->mac.dstAddr.addrMode  = dstAddrMode;
   \                     ??CrossCallReturnLabel_0:
   \   0002DB   2424         ADD       A,#0x24
   \   0002DD   F582         MOV       DPL,A
   \   0002DF   E4           CLR       A
   \   0002E0   38           ADDC      A,R0
   \   0002E1   F583         MOV       DPH,A
   \   0002E3   E5..         MOV       A,?V0
   \   0002E5   F0           MOVX      @DPTR,A
    782            pRxBuf->mac.timestamp         = MAC_RADIO_BACKOFF_CAPTURE();
   \   0002E6                ; Setup parameters for call to function macMcuOverflowCapture
   \   0002E6   12....       LCALL     `??macMcuOverflowCapture::?relay`; Banked call to: macMcuOverflowCapture
   \   0002E9   8A..         MOV       ?V0,R2
   \   0002EB   8B..         MOV       ?V1,R3
   \   0002ED   8C..         MOV       ?V2,R4
   \   0002EF   8D..         MOV       ?V3,R5
   \   0002F1   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0002F4   2425         ADD       A,#0x25
   \   0002F6   F582         MOV       DPL,A
   \   0002F8   E4           CLR       A
   \   0002F9   38           ADDC      A,R0
   \   0002FA   F583         MOV       DPH,A
   \   0002FC   78..         MOV       R0,#?V0
   \   0002FE   12....       LCALL     ?L_MOV_TO_X
    783            pRxBuf->mac.timestamp2        = MAC_RADIO_TIMER_CAPTURE();
   \   000301                ; Setup parameters for call to function macMcuTimerCapture
   \   000301   12....       LCALL     `??macMcuTimerCapture::?relay`; Banked call to: macMcuTimerCapture
   \   000304   8A..         MOV       ?V0,R2
   \   000306   12....       LCALL     ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000309   CA           XCH       A,R2
   \   00030A   2429         ADD       A,#0x29
   \   00030C   F582         MOV       DPL,A
   \   00030E   E4           CLR       A
   \   00030F   3A           ADDC      A,R2
   \   000310   F583         MOV       DPH,A
   \   000312   E5..         MOV       A,?V0
   \   000314   12....       LCALL     ??Subroutine36_0 & 0xFFFF
    784          
    785            /* Special Case for Enhanced Beacon Request which has a different
    786             * frame version
    787             */
    788          #ifdef FEATURE_ENHANCED_BEACON
    789            if( MAC_FRAME_VERSION(&rxBuf[1]) == 2 )
    790            {
    791                pRxBuf->internal.frameType  = MAC_FRAME_TYPE_INTERNAL_MAC_VERSION_E | \
    792                                            MAC_FRAME_TYPE(&rxBuf[1]);
    793            }
    794            else
    795          #endif
    796            {
    797              pRxBuf->internal.frameType  = MAC_FRAME_TYPE(&rxBuf[1]);
   \                     ??CrossCallReturnLabel_65:
   \   000317   90....       MOV       DPTR,#rxBuf + 1
   \   00031A   E0           MOVX      A,@DPTR
   \   00031B   5407         ANL       A,#0x7
   \   00031D   C0E0         PUSH      A
   \   00031F   12....       LCALL     ?Subroutine11 & 0xFFFF
    798            }
   \                     ??CrossCallReturnLabel_19:
   \   000322   A3           INC       DPTR
   \   000323   D0E0         POP       A
   \   000325   F0           MOVX      @DPTR,A
    799          
    800            pRxBuf->mac.dsn               = MAC_SEQ_NUMBER(&rxBuf[1]);
   \   000326   90....       MOV       DPTR,#rxBuf + 3
   \   000329   E0           MOVX      A,@DPTR
   \   00032A   C0E0         PUSH      A
   \   00032C   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00032F   2432         ADD       A,#0x32
   \   000331   F582         MOV       DPL,A
   \   000333   E4           CLR       A
   \   000334   38           ADDC      A,R0
   \   000335   F583         MOV       DPH,A
   \   000337   D0E0         POP       A
   \   000339   F0           MOVX      @DPTR,A
    801            pRxBuf->internal.flags        = INTERNAL_FCF_FLAGS(&rxBuf[1]) | ackWithPending;
   \   00033A   90....       MOV       DPTR,#rxBuf + 1
   \   00033D   E0           MOVX      A,@DPTR
   \   00033E   5478         ANL       A,#0x78
   \   000340   F8           MOV       R0,A
   \   000341   A3           INC       DPTR
   \   000342   E0           MOVX      A,@DPTR
   \   000343   C4           SWAP      A
   \   000344   540F         ANL       A,#0xf
   \   000346   5403         ANL       A,#0x3
   \   000348   48           ORL       A,R0
   \   000349   4F           ORL       A,R7
   \   00034A   C0E0         PUSH      A
   \   00034C   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00034F   D0E0         POP       A
   \   000351   F0           MOVX      @DPTR,A
    802          
    803            /*-------------------------------------------------------------------------------
    804             *  If the processing the addressing fields does not require more bytes from
    805             *  the FIFO go directly address processing function.  Otherwise, configure
    806             *  interrupt to jump there once bytes are received.
    807             */
    808            if (addrLen == 0)
   \   000352   EE           MOV       A,R6
   \   000353   7019         JNZ       ??rxStartIsr_26
    809            {
    810              /* no addressing fields to read, prepare for payload interrupts */
    811              pFuncRxState = &rxPayloadIsr;
   \   000355   12....       LCALL     ?Subroutine5 & 0xFFFF
    812              rxPrepPayload();
    813            }
   \                     ??CrossCallReturnLabel_9:
   \   000358   802F         SJMP      ??rxStartIsr_3
   \                     ??rxStartIsr_24:
   \   00035A                ; Setup parameters for call to function macRxCheckPendingCallback
   \   00035A   12....       LCALL     `??macRxCheckPendingCallback::?relay`; Banked call to: macRxCheckPendingCallback
   \   00035D   E9           MOV       A,R1
   \   00035E   7003         JNZ       $+5
   \   000360   02....       LJMP      ??rxStartIsr_22 & 0xFFFF
   \                     ??rxStartIsr_23:
   \   000363   7F04         MOV       R7,#0x4
   \   000365   90618A       MOV       DPTR,#0x618a
   \   000368   E0           MOVX      A,@DPTR
   \   000369   D2E2         SETB      0xE0 /* A   */.2
   \   00036B   02....       LJMP      ??rxStartIsr_25 & 0xFFFF
    814            else
    815            {
    816              /* need to read and process addressing fields, prepare for address interrupt */
    817              rxNextLen = addrLen;
   \                     ??rxStartIsr_26:
   \   00036E   90....       MOV       DPTR,#rxNextLen
   \   000371   12....       LCALL     ?Subroutine4 & 0xFFFF
    818              if (MAC_SEC_ENABLED(&rxBuf[1]))
   \                     ??CrossCallReturnLabel_8:
   \   000374   90....       MOV       DPTR,#rxNextLen
   \   000377   E0           MOVX      A,@DPTR
   \   000378   4001         JC        ??rxStartIsr_27
    819              {
    820                /* When security is enabled, read off security control field as well */
    821                MAC_RADIO_SET_RX_THRESHOLD(rxNextLen + MAC_SEC_CONTROL_FIELD_LEN);
    822              }
    823              else
    824              {
    825                MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   00037A   14           DEC       A
   \                     ??rxStartIsr_27:
   \   00037B   906194       MOV       DPTR,#0x6194
   \   00037E   F0           MOVX      @DPTR,A
    826              }
    827              pFuncRxState = &rxAddrIsr;
   \   00037F   90....       MOV       DPTR,#pFuncRxState
   \   000382   74..         MOV       A,#`??rxAddrIsr::?relay` & 0xff
   \   000384   F0           MOVX      @DPTR,A
   \   000385   A3           INC       DPTR
   \   000386   74..         MOV       A,#(`??rxAddrIsr::?relay` >> 8) & 0xff
   \   000388   F0           MOVX      @DPTR,A
    828            }
    829          }
   \                     ??rxStartIsr_3:
   \   000389   7402         MOV       A,#0x2
   \   00038B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00038E   7F07         MOV       R7,#0x7
   \   000390   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000393                REQUIRE RFST
   \   000393                REQUIRE _A_IEN0
   \   000393                REQUIRE S1CON
   \   000393                REQUIRE RFIRQF1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   CA           XCH       A,R2
   \   000001   2433         ADD       A,#0x33
   \   000003                REQUIRE ??Subroutine31_0
   \   000003                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3A           ADDC      A,R2
   \   000004   F583         MOV       DPH,A
   \   000006   E8           MOV       A,R0
   \   000007   F0           MOVX      @DPTR,A
   \   000008   A3           INC       DPTR
   \   000009   E9           MOV       A,R1
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   74..         MOV       A,#macRxAddrLen & 0xff
   \   000002   28           ADD       A,R0
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   34..         ADDC      A,#(macRxAddrLen >> 8) & 0xff
   \   000008   F583         MOV       DPH,A
   \   00000A   E4           CLR       A
   \   00000B   93           MOVC      A,@A+DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   90....       MOV       DPTR,#pRxBuf
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F8           MOV       R0,A
   \   000005   A3           INC       DPTR
   \   000006                REQUIRE ??Subroutine32_0
   \   000006                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   C8           XCH       A,R0
   \   000002   2435         ADD       A,#0x35
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   38           ADDC      A,R0
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   90....       MOV       DPTR,#pRxBuf
   \   000003   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#pMacDataTx
   \   000004   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   9061A4       MOV       DPTR,#0x61a4
   \   000003   E0           MOVX      A,@DPTR
   \   000004   C2E0         CLR       0xE0 /* A   */.0
   \   000006                REQUIRE ??Subroutine33_0
   \   000006                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#rxBuf + 1
   \   000004   E0           MOVX      A,@DPTR
   \   000005   A2E3         MOV       C,0xE0 /* A   */.3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   90....       MOV       DPTR,#pRxBuf
   \   000003                REQUIRE ??Subroutine34_0
   \   000003                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000003   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   2407         ADD       A,#0x7
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   38           ADDC      A,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   8882         MOV       DPL,R0
   \   000004   8983         MOV       DPH,R1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   2A           ADD       A,R2
   \   000008   FA           MOV       R2,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   3400         ADDC      A,#0x0
   \   00000D   FB           MOV       R3,A
   \   00000E   8882         MOV       DPL,R0
   \   000010   8983         MOV       DPH,R1
   \   000012                REQUIRE ??Subroutine35_0
   \   000012                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   EA           MOV       A,R2
   \   000001                REQUIRE ??Subroutine36_0
   \   000001                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   EB           MOV       A,R3
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   90....       MOV       DPTR,#pFuncRxState
   \   000003   74..         MOV       A,#`??rxPayloadIsr::?relay` & 0xff
   \   000005   F0           MOVX      @DPTR,A
   \   000006   A3           INC       DPTR
   \   000007   74..         MOV       A,#(`??rxPayloadIsr::?relay` >> 8) & 0xff
   \   000009   F0           MOVX      @DPTR,A
   \   00000A                ; Setup parameters for call to function rxPrepPayload
   \   00000A                ; Setup parameters for call to function rxPrepPayload
   \   00000A   12....       LCALL     `??rxPrepPayload::?relay`; Banked call to: rxPrepPayload
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003   2433         ADD       A,#0x33
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   12....       LCALL     ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00000E   FB           MOV       R3,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   90....       MOV       DPTR,#pRxBuf
   \   000003   E0           MOVX      A,@DPTR
   \   000004   243A         ADD       A,#0x3a
   \   000006   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   F8           MOV       R0,A
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   3400         ADDC      A,#0x0
   \   000005   F9           MOV       R1,A
   \   000006   12....       LCALL     ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000003   CA           XCH       A,R2
   \   000004   2435         ADD       A,#0x35
   \   000006   F582         MOV       DPL,A
   \   000008   E4           CLR       A
   \   000009   3A           ADDC      A,R2
   \   00000A   F583         MOV       DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function macRxCompleteCallback
   \   000001   12....       LCALL     ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   90....       MOV       DPTR,#pRxBuf
   \   000003                REQUIRE ??Subroutine39_0
   \   000003                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   90....       MOV       DPTR,#pRxBuf
   \   000003                REQUIRE ??Subroutine40_0
   \   000003                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   C8           XCH       A,R0
   \   000005   22           RET
    830          
    831          
    832          /*=================================================================================================
    833           * @fn          rxAddrIsr
    834           *
    835           * @brief       Receive ISR state for decoding address.  Reads and stores the address information
    836           *              from the incoming packet.
    837           *
    838           * @param       none
    839           *
    840           * @return      none
    841           *=================================================================================================
    842           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    843          static void rxAddrIsr(void)
   \                     rxAddrIsr:
    844          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    845            uint8 buf[MAX_ADDR_FIELDS_LEN];
    846            uint8 dstAddrMode;
    847            uint8 srcAddrMode;
    848          #ifdef FEATURE_MAC_SECURITY
    849            uint8 securityControl;
    850          #endif /* MAC_SECURITY */
    851            uint8  * p;
    852          
    853            MAC_ASSERT(rxNextLen != 0); /* logic assumes at least one address byte in buffer */
   \   00000A   90....       MOV       DPTR,#rxNextLen
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   7003         JNZ       ??rxAddrIsr_0
   \   000010                ; Setup parameters for call to function halAssertHandler
   \   000010   12....       LCALL     `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    854          
    855            /*  read out address fields into local buffer in one shot */
    856            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
   \                     ??rxAddrIsr_0:
   \   000013                ; Setup parameters for call to function macMemReadRxFifo
   \   000013   12....       LCALL     ?Subroutine20 & 0xFFFF
    857          
    858            /* set pointer to buffer with addressing fields */
    859            p = buf;
   \                     ??CrossCallReturnLabel_33:
   \   000016   A8..         MOV       R0,?XSP + 0
   \   000018   A9..         MOV       R1,?XSP + 1
   \   00001A   88..         MOV       ?V0,R0
   \   00001C   89..         MOV       ?V1,R1
   \   00001E   AC..         MOV       R4,?V0
   \   000020   AD..         MOV       R5,?V1
    860          
    861            /* destination address */
    862            dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
   \   000022   90....       MOV       DPTR,#rxBuf + 2
   \   000025   E0           MOVX      A,@DPTR
   \   000026   13           RRC       A
   \   000027   13           RRC       A
   \   000028   543F         ANL       A,#0x3f
   \   00002A   5403         ANL       A,#0x3
   \   00002C   FE           MOV       R6,A
    863            if (dstAddrMode != SADDR_MODE_NONE)
   \   00002D   6070         JZ        ??rxAddrIsr_1
    864            {
    865              pRxBuf->mac.srcPanId = pRxBuf->mac.dstPanId = BUILD_UINT16(p[0], p[1]);
   \   00002F   90....       MOV       DPTR,#pRxBuf
   \   000032   E0           MOVX      A,@DPTR
   \   000033   242D         ADD       A,#0x2d
   \   000035   F8           MOV       R0,A
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   3400         ADDC      A,#0x0
   \   00003A   F9           MOV       R1,A
   \   00003B   85..82       MOV       DPL,?XSP + 0
   \   00003E   85..83       MOV       DPH,?XSP + 1
   \   000041   E0           MOVX      A,@DPTR
   \   000042   FC           MOV       R4,A
   \   000043   7401         MOV       A,#0x1
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   E0           MOVX      A,@DPTR
   \   000049   FB           MOV       R3,A
   \   00004A   EC           MOV       A,R4
   \   00004B   8882         MOV       DPL,R0
   \   00004D   8983         MOV       DPH,R1
   \   00004F   12....       LCALL     ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000052   8882         MOV       DPL,R0
   \   000054   8983         MOV       DPH,R1
   \   000056   E0           MOVX      A,@DPTR
   \   000057   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   00005A   CA           XCH       A,R2
   \   00005B   242B         ADD       A,#0x2b
   \   00005D   F582         MOV       DPL,A
   \   00005F   E4           CLR       A
   \   000060   3A           ADDC      A,R2
   \   000061   F583         MOV       DPH,A
   \   000063   E8           MOV       A,R0
   \   000064   12....       LCALL     ??Subroutine36_0 & 0xFFFF
    866              p += MAC_PAN_ID_FIELD_LEN;
    867              if (dstAddrMode == SADDR_MODE_EXT)
   \                     ??CrossCallReturnLabel_67:
   \   000067   7403         MOV       A,#0x3
   \   000069   6E           XRL       A,R6
   \   00006A   7016         JNZ       ??rxAddrIsr_2
    868              {
    869                sAddrExtCpy(pRxBuf->mac.dstAddr.addr.extAddr, p);
   \   00006C                ; Setup parameters for call to function sAddrExtCpy
   \   00006C   7402         MOV       A,#0x2
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   AC82         MOV       R4,DPL
   \   000073   AD83         MOV       R5,DPH
   \   000075   90....       MOV       DPTR,#pRxBuf
   \   000078   E0           MOVX      A,@DPTR
   \   000079   241C         ADD       A,#0x1c
   \   00007B   12....       LCALL     ?Subroutine21 & 0xFFFF
    870                p += MAC_EXT_ADDR_FIELD_LEN;
   \                     ??CrossCallReturnLabel_35:
   \   00007E   740A         MOV       A,#0xa
   \   000080   8016         SJMP      ??rxAddrIsr_3
    871              }
    872              else
    873              {
    874                pRxBuf->mac.dstAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
   \                     ??rxAddrIsr_2:
   \   000082   7402         MOV       A,#0x2
   \   000084   12....       LCALL     ?XSTACK_DISP0_8
   \   000087   E0           MOVX      A,@DPTR
   \   000088   FA           MOV       R2,A
   \   000089   7403         MOV       A,#0x3
   \   00008B   12....       LCALL     ?XSTACK_DISP0_8
   \   00008E   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000091   241C         ADD       A,#0x1c
   \   000093   12....       LCALL     ??Subroutine31_0 & 0xFFFF
    875                p += MAC_SHORT_ADDR_FIELD_LEN;
   \                     ??CrossCallReturnLabel_49:
   \   000096   7404         MOV       A,#0x4
   \                     ??rxAddrIsr_3:
   \   000098   12....       LCALL     ?XSTACK_DISP0_8
   \   00009B   AC82         MOV       R4,DPL
   \   00009D   AD83         MOV       R5,DPH
    876              }
    877            }
    878          
    879            /* sources address */
    880            srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
   \                     ??rxAddrIsr_1:
   \   00009F   90....       MOV       DPTR,#rxBuf + 2
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   C4           SWAP      A
   \   0000A4   13           RRC       A
   \   0000A5   13           RRC       A
   \   0000A6   5403         ANL       A,#0x3
   \   0000A8   FA           MOV       R2,A
    881            if (srcAddrMode != SADDR_MODE_NONE)
   \   0000A9   604C         JZ        ??CrossCallReturnLabel_50
    882            {
    883              if (!(pRxBuf->internal.flags & MAC_RX_FLAG_INTRA_PAN))
   \   0000AB   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   A2E6         MOV       C,0xE0 /* A   */.6
   \   0000B1   4025         JC        ??rxAddrIsr_4
    884              {
    885                pRxBuf->mac.srcPanId = BUILD_UINT16(p[0], p[1]);
   \   0000B3   8C82         MOV       DPL,R4
   \   0000B5   8D83         MOV       DPH,R5
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   FE           MOV       R6,A
   \   0000B9   A3           INC       DPTR
   \   0000BA   E0           MOVX      A,@DPTR
   \   0000BB   F9           MOV       R1,A
   \   0000BC   90....       MOV       DPTR,#pRxBuf
   \   0000BF   E0           MOVX      A,@DPTR
   \   0000C0   FB           MOV       R3,A
   \   0000C1   A3           INC       DPTR
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   CB           XCH       A,R3
   \   0000C4   242B         ADD       A,#0x2b
   \   0000C6   F582         MOV       DPL,A
   \   0000C8   E4           CLR       A
   \   0000C9   3B           ADDC      A,R3
   \   0000CA   F583         MOV       DPH,A
   \   0000CC   EE           MOV       A,R6
   \   0000CD   F0           MOVX      @DPTR,A
   \   0000CE   A3           INC       DPTR
   \   0000CF   E9           MOV       A,R1
   \   0000D0   F0           MOVX      @DPTR,A
    886                p += MAC_PAN_ID_FIELD_LEN;
   \   0000D1   EC           MOV       A,R4
   \   0000D2   2402         ADD       A,#0x2
   \   0000D4   FC           MOV       R4,A
   \   0000D5   5001         JNC       ??rxAddrIsr_4
   \   0000D7   0D           INC       R5
    887              }
    888              if (srcAddrMode == SADDR_MODE_EXT)
   \                     ??rxAddrIsr_4:
   \   0000D8   7403         MOV       A,#0x3
   \   0000DA   6A           XRL       A,R2
   \   0000DB   700B         JNZ       ??rxAddrIsr_5
    889              {
    890                sAddrExtCpy(pRxBuf->mac.srcAddr.addr.extAddr, p);
   \   0000DD                ; Setup parameters for call to function sAddrExtCpy
   \   0000DD   90....       MOV       DPTR,#pRxBuf
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   2413         ADD       A,#0x13
   \   0000E3   12....       LCALL     ?Subroutine21 & 0xFFFF
    891              }
   \                     ??CrossCallReturnLabel_36:
   \   0000E6   800F         SJMP      ??CrossCallReturnLabel_50
    892              else
    893              {
    894                pRxBuf->mac.srcAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
   \                     ??rxAddrIsr_5:
   \   0000E8   8C82         MOV       DPL,R4
   \   0000EA   8D83         MOV       DPH,R5
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   FA           MOV       R2,A
   \   0000EE   A3           INC       DPTR
   \   0000EF   12....       LCALL     ?Subroutine19 & 0xFFFF
    895              }
    896            }
   \                     ??CrossCallReturnLabel_32:
   \   0000F2   2413         ADD       A,#0x13
   \   0000F4   12....       LCALL     ??Subroutine31_0 & 0xFFFF
    897          
    898          #ifdef FEATURE_MAC_SECURITY
    899            if (MAC_SEC_ENABLED(&rxBuf[1]))
    900            {
    901              uint8 keyIdMode;
    902          
    903              if (MAC_FRAME_VERSION(&rxBuf[1]) == 0)
    904              {
    905                /* MAC_UNSUPPORTED_LEGACY - Cancel the outgoing TX ACK.
    906                 * It may be too late but we have to try.
    907                 */
    908                MAC_RADIO_CANCEL_TX_ACK();
    909          
    910                /* clean up after unsupported security legacy */
    911                macRxHaltCleanup();
    912                return;
    913              }
    914          
    915              /* Copy addressing fields to RX buffer */
    916              osal_memcpy(pRxBuf->mhr.p, buf, rxNextLen);
    917              pRxBuf->mhr.p   += rxNextLen;
    918              pRxBuf->mhr.len += rxNextLen;
    919          
    920              /*-------------------------------------------------------------------------------
    921               *  Prepare for auxiliary security header interrupts.
    922               */
    923          
    924              /* read out security control field from FIFO (threshold set so bytes are guaranteed to be there) */
    925              MAC_RADIO_READ_RX_FIFO(&securityControl, MAC_SEC_CONTROL_FIELD_LEN);
    926          
    927              /* Copy security fields to MHR buffer */
    928              *pRxBuf->mhr.p   = securityControl;
    929              pRxBuf->mhr.p   += MAC_SEC_CONTROL_FIELD_LEN;
    930              pRxBuf->mhr.len += MAC_SEC_CONTROL_FIELD_LEN;
    931          
    932              /* store security level and key ID mode */
    933              pRxBuf->sec.securityLevel = SECURITY_LEVEL(securityControl);
    934              pRxBuf->sec.keyIdMode = keyIdMode = KEY_IDENTIFIER_MODE(securityControl);
    935          
    936              /* Corrupted RX frame, should never occur. */
    937              if ((keyIdMode > MAC_KEY_ID_MODE_8)
    938              /* Get the next RX length according to AuxLen table minus security control field.
    939               * The security control length is counted already.
    940               */
    941              || ((macKeySourceLen[keyIdMode] + MAC_FRAME_COUNTER_LEN) >= rxPayloadLen)
    942              /* Security Enabled subfield is one, but the Security Level in the header is zero:
    943               * MAC_UNSUPPORTED_SECURITY - Cancel the outgoing TX ACK.
    944               */
    945              || (pRxBuf->sec.securityLevel == MAC_SEC_LEVEL_NONE))
    946              {
    947                /* It may be too late but we have to try. */
    948                MAC_RADIO_CANCEL_TX_ACK();
    949          
    950                /* clean up after unsupported security or corrupted RX frame. */
    951                macRxHaltCleanup();
    952                return;
    953              }
    954          
    955              /* get the next RX length according to AuxLen table minus security control field.
    956               * The sceurity control length is counted already.
    957               */
    958              rxNextLen = macKeySourceLen[keyIdMode] + MAC_FRAME_COUNTER_LEN;
    959              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
    960              pFuncRxState = &rxSecurityHdrIsr;
    961            }
    962            else
    963          #endif /* MAC_SECURITY */
    964            {
    965              /* clear security level */
    966              pRxBuf->sec.securityLevel = MAC_SEC_LEVEL_NONE;
   \                     ??CrossCallReturnLabel_50:
   \   0000F7   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000FA   2410         ADD       A,#0x10
   \   0000FC   F582         MOV       DPL,A
   \   0000FE   E4           CLR       A
   \   0000FF   38           ADDC      A,R0
   \   000100   F583         MOV       DPH,A
   \   000102   E4           CLR       A
   \   000103   F0           MOVX      @DPTR,A
    967          
    968              /*-------------------------------------------------------------------------------
    969               *  Prepare for payload interrupts.
    970               */
    971              pFuncRxState = &rxPayloadIsr;
   \   000104   12....       LCALL     ?Subroutine5 & 0xFFFF
    972              rxPrepPayload();
    973            }
    974          }
   \                     ??CrossCallReturnLabel_10:
   \   000107   7414         MOV       A,#0x14
   \   000109   12....       LCALL     ?DEALLOC_XSTACK8
   \   00010C                REQUIRE ?Subroutine1
   \   00010C                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   FA           MOV       R2,A
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   3400         ADDC      A,#0x0
   \   000005   FB           MOV       R3,A
   \   000006   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   EA           MOV       A,R2
   \   000003   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000006   CA           XCH       A,R2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   F8           MOV       R0,A
   \   000001                REQUIRE ??Subroutine38_0
   \   000001                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   90....       MOV       DPTR,#rxNextLen
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   AA..         MOV       R2,?XSP + 0
   \   000007   AB..         MOV       R3,?XSP + 1
   \   000009   12....       LCALL     `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
   \   00000C   22           RET
    975          
    976          
    977          #ifdef FEATURE_MAC_SECURITY
    978          /*=================================================================================================
    979           * @fn          rxSecurityHdrIsr
    980           *
    981           * @brief       Receive ISR state for reading out and storing the auxiliary security header.
    982           *
    983           * @param       none
    984           *
    985           * @return      none
    986           *=================================================================================================
    987           */
    988          static void rxSecurityHdrIsr(void)
    989          {
    990            uint8 buf[MAC_FRAME_COUNTER_LEN + MAC_KEY_ID_8_LEN];
    991          
    992            /* read out frame counter and key ID */
    993            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
    994          
    995            /* Incoming frame counter */
    996            pRxBuf->frameCounter = BUILD_UINT32(buf[0], buf[1], buf[2], buf[3]);
    997            if (rxNextLen - MAC_FRAME_COUNTER_LEN > 0)
    998            {
    999              /* Explicit mode */
   1000              osal_memcpy(pRxBuf->sec.keySource, &buf[MAC_FRAME_COUNTER_LEN], rxNextLen - MAC_FRAME_COUNTER_LEN - 1);
   1001              pRxBuf->sec.keyIndex = buf[rxNextLen - MAC_KEY_INDEX_LEN];
   1002            }
   1003          
   1004            /* Copy security fields to RX buffer */
   1005            osal_memcpy(pRxBuf->mhr.p, buf, rxNextLen);
   1006            pRxBuf->mhr.p   += rxNextLen;
   1007            pRxBuf->mhr.len += rxNextLen;
   1008          
   1009            /* Update payload pointer and payload length. The rxPayloadLen includes security header length
   1010             * and SCF byte. The security header and SCF length must be deducted from the rxPayloadLen.
   1011             */
   1012            rxPayloadLen    -= (rxNextLen + MAC_SEC_CONTROL_FIELD_LEN);
   1013            pRxBuf->msdu.len = rxPayloadLen;
   1014            pRxBuf->mhr.len += rxPayloadLen;
   1015          
   1016            /*-------------------------------------------------------------------------------
   1017             *  Prepare for payload interrupts.
   1018             */
   1019            pFuncRxState = &rxPayloadIsr;
   1020            rxPrepPayload();
   1021          }
   1022          #endif /* MAC_SECURITY */
   1023          
   1024          
   1025          /*=================================================================================================
   1026           * @fn          rxPrepPayload
   1027           *
   1028           * @brief       Common code to prepare for the payload ISR.
   1029           *
   1030           * @param       none
   1031           *
   1032           * @return      none
   1033           *=================================================================================================
   1034           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1035          static void rxPrepPayload(void)
   \                     rxPrepPayload:
   1036          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1037            if (rxPayloadLen == 0)
   \   000004   90....       MOV       DPTR,#rxPayloadLen
   \   000007   E0           MOVX      A,@DPTR
   \   000008   7011         JNZ       ??rxPrepPayload_0
   1038            {
   1039              MAC_RADIO_SET_RX_THRESHOLD(MAC_FCS_FIELD_LEN);
   \   00000A   906194       MOV       DPTR,#0x6194
   \   00000D   7401         MOV       A,#0x1
   \   00000F   F0           MOVX      @DPTR,A
   1040              pFuncRxState = &rxFcsIsr;
   \   000010   90....       MOV       DPTR,#pFuncRxState
   \   000013   74..         MOV       A,#`??rxFcsIsr::?relay` & 0xff
   \   000015   F0           MOVX      @DPTR,A
   \   000016   A3           INC       DPTR
   \   000017   74..         MOV       A,#(`??rxFcsIsr::?relay` >> 8) & 0xff
   \   000019   8016         SJMP      ??rxPrepPayload_1
   1041            }
   1042            else
   1043            {
   1044              rxNextLen = MIN(rxPayloadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
   \                     ??rxPrepPayload_0:
   \   00001B   C3           CLR       C
   \   00001C   9410         SUBB      A,#0x10
   \   00001E   5006         JNC       ??rxPrepPayload_2
   \   000020   E0           MOVX      A,@DPTR
   \   000021   90....       MOV       DPTR,#rxNextLen
   \   000024   8005         SJMP      ??rxPrepPayload_3
   \                     ??rxPrepPayload_2:
   \   000026   90....       MOV       DPTR,#rxNextLen
   \   000029   7410         MOV       A,#0x10
   \                     ??rxPrepPayload_3:
   \   00002B   F0           MOVX      @DPTR,A
   1045              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   14           DEC       A
   \   00002E   906194       MOV       DPTR,#0x6194
   1046            }
   \                     ??rxPrepPayload_1:
   \   000031   80..         SJMP      ?Subroutine0
   1047          }
   1048          
   1049          
   1050          /*=================================================================================================
   1051           * @fn          rxPayloadIsr
   1052           *
   1053           * @brief       Receive ISR state for reading out and storing the packet payload.
   1054           *
   1055           * @param       none
   1056           *
   1057           * @return      none
   1058           *=================================================================================================
   1059           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1060          static void rxPayloadIsr(void)
   \                     rxPayloadIsr:
   1061          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1062            MAC_RADIO_READ_RX_FIFO(pRxBuf->mhr.p, rxNextLen);
   \   000004                ; Setup parameters for call to function macMemReadRxFifo
   \   000004   90....       MOV       DPTR,#rxNextLen
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00000C   12....       LCALL     `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
   1063            pRxBuf->mhr.p += rxNextLen;
   \   00000F   90....       MOV       DPTR,#pRxBuf
   \   000012   E0           MOVX      A,@DPTR
   \   000013   2433         ADD       A,#0x33
   \   000015   F8           MOV       R0,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   3400         ADDC      A,#0x0
   \   00001A   F9           MOV       R1,A
   \   00001B   90....       MOV       DPTR,#rxNextLen
   \   00001E   12....       LCALL     ?Subroutine9 & 0xFFFF
   1064          
   1065            rxPayloadLen -= rxNextLen;
   \                     ??CrossCallReturnLabel_70:
   \   000021   90....       MOV       DPTR,#rxNextLen
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F8           MOV       R0,A
   \   000026   90....       MOV       DPTR,#rxPayloadLen
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   C3           CLR       C
   \   00002B   98           SUBB      A,R0
   \   00002C   F0           MOVX      @DPTR,A
   1066          
   1067            rxPrepPayload();
   \   00002D                ; Setup parameters for call to function rxPrepPayload
   \   00002D   12....       LCALL     `??rxPrepPayload::?relay`; Banked call to: rxPrepPayload
   1068          }
   \   000030   80..         SJMP      ??Subroutine37_0
   1069          
   1070          
   1071          /*=================================================================================================
   1072           * @fn          rxFcsIsr
   1073           *
   1074           * @brief       Receive ISR state for handling the FCS.
   1075           *
   1076           * @param       none
   1077           *
   1078           * @return      none
   1079           *=================================================================================================
   1080           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1081          static void rxFcsIsr(void)
   \                     rxFcsIsr:
   1082          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1083            uint8 crcOK;
   1084            uint8 ackWithPending = 0;
   \   000005   7E00         MOV       R6,#0x0
   1085          
   1086            /* read FCS, rxBuf is now available storage */
   1087            MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_FCS_FIELD_LEN);
   \   000007                ; Setup parameters for call to function macMemReadRxFifo
   \   000007   7902         MOV       R1,#0x2
   \   000009   7A..         MOV       R2,#rxBuf & 0xff
   \   00000B   7B..         MOV       R3,#(rxBuf >> 8) & 0xff
   \   00000D   12....       LCALL     `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
   1088          
   1089            /*
   1090             *  The FCS has actually been replaced within the radio by a proprietary version of the FCS.
   1091             *  This proprietary FCS is two bytes (same length as the real FCS) and contains:
   1092             *    1) the RSSI value
   1093             *    2) the average correlation value (used for LQI)
   1094             *    3) a CRC passed bit
   1095             */
   1096          
   1097            /* save the "CRC-is-OK" status */
   1098            crcOK = PROPRIETARY_FCS_CRC_OK(rxBuf);
   \   000010   90....       MOV       DPTR,#rxBuf + 1
   \   000013   E0           MOVX      A,@DPTR
   \   000014   5480         ANL       A,#0x80
   \   000016   F5..         MOV       ?V1,A
   1099          
   1100            /*
   1101             *  See if the frame should be passed up to high-level MAC.  If the CRC is OK, the
   1102             *  the frame is always passed up.  Frames with a bad CRC are also passed up *if*
   1103             *  a special variant of promiscuous mode is active.
   1104             */
   1105            if (crcOK || (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC))
   \   000018   700B         JNZ       ??rxFcsIsr_0
   \   00001A   90....       MOV       DPTR,#rxPromiscuousMode
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   6402         XRL       A,#0x2
   \   000020   6003         JZ        $+5
   \   000022   02....       LJMP      ??rxFcsIsr_1 & 0xFFFF
   1106            {
   1107              int8 rssiDbm;
   1108              uint8 corr;
   1109          
   1110          #ifdef FEATURE_SYSTEM_STATS
   1111              /* Increment diagnostic CRC success counter */
   1112              macLowLevelDiags( MAC_DIAGS_RX_CRC_PASS );
   \                     ??rxFcsIsr_0:
   \   000025                ; Setup parameters for call to function macLowLevelDiags
   \   000025   79E7         MOV       R1,#-0x19
   \   000027   12....       LCALL     `??macLowLevelDiags::?relay`; Banked call to: macLowLevelDiags
   1113          #endif /* FEATURE_SYSTEM_STATS */
   1114          
   1115              /*
   1116               *  As power saving optimization, set state variable to indicate physical receive
   1117               *  has completed and then request turning of the receiver.  This means the receiver
   1118               *  can be off (if other conditions permit) during execution of the callback function.
   1119               *
   1120               *  The receiver will be requested to turn off once again at the end of the receive
   1121               *  logic.  There is no harm in doing this.
   1122               */
   1123              macRxActive = MAC_RX_ACTIVE_DONE;
   \   00002A   90....       MOV       DPTR,#macRxActive
   \   00002D   7402         MOV       A,#0x2
   \   00002F   F0           MOVX      @DPTR,A
   1124              macRxOffRequest();
   \   000030                ; Setup parameters for call to function macRxOffRequest
   \   000030   12....       LCALL     `??macRxOffRequest::?relay`; Banked call to: macRxOffRequest
   1125          
   1126              /* decode RSSI and correlation values */
   1127              rssiDbm = PROPRIETARY_FCS_RSSI(rxBuf) + MAC_RADIO_RSSI_OFFSET;
   \   000033   90....       MOV       DPTR,#rxBuf
   \   000036   E0           MOVX      A,@DPTR
   \   000037   24B7         ADD       A,#-0x49
   \   000039   F5..         MOV       ?V0,A
   1128              MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
   1129              corr = PROPRIETARY_FCS_CORRELATION_VALUE(rxBuf);
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   547F         ANL       A,#0x7f
   \   00003F   FF           MOV       R7,A
   1130          
   1131              /* record parameters that get passed up to high-level */
   1132              pRxBuf->mac.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
   \   000040                ; Setup parameters for call to function macRadioComputeLQI
   \   000040   FA           MOV       R2,A
   \   000041   A9..         MOV       R1,?V0
   \   000043   12....       LCALL     `??macRadioComputeLQI::?relay`; Banked call to: macRadioComputeLQI
   \   000046   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000049   242F         ADD       A,#0x2f
   \   00004B   F582         MOV       DPL,A
   \   00004D   E4           CLR       A
   \   00004E   38           ADDC      A,R0
   \   00004F   F583         MOV       DPH,A
   \   000051   E9           MOV       A,R1
   \   000052   12....       LCALL     ?Subroutine2 & 0xFFFF
   1133              pRxBuf->mac.rssi = rssiDbm;
   \                     ??CrossCallReturnLabel_1:
   \   000055   2431         ADD       A,#0x31
   \   000057   F582         MOV       DPL,A
   \   000059   E4           CLR       A
   \   00005A   38           ADDC      A,R0
   \   00005B   F583         MOV       DPH,A
   \   00005D   E5..         MOV       A,?V0
   \   00005F   12....       LCALL     ?Subroutine2 & 0xFFFF
   1134              pRxBuf->mac.correlation = corr;
   \                     ??CrossCallReturnLabel_2:
   \   000062   2430         ADD       A,#0x30
   \   000064   F582         MOV       DPL,A
   \   000066   E4           CLR       A
   \   000067   38           ADDC      A,R0
   \   000068   F583         MOV       DPH,A
   \   00006A   EF           MOV       A,R7
   \   00006B   F0           MOVX      @DPTR,A
   1135          
   1136              /* set the MSDU pointer to point at start of data */
   1137              pRxBuf->mhr.p   = (uint8 *) (pRxBuf + 1);
   \   00006C   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00006F   12....       LCALL     ?Subroutine24 & 0xFFFF
   1138              pRxBuf->msdu.p += (pRxBuf->mhr.len - pRxBuf->msdu.len);
   \                     ??CrossCallReturnLabel_52:
   \   000072   90....       MOV       DPTR,#pRxBuf
   \   000075   E0           MOVX      A,@DPTR
   \   000076   2402         ADD       A,#0x2
   \   000078   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   FA           MOV       R2,A
   \   00007D   90....       MOV       DPTR,#pRxBuf
   \   000080   E0           MOVX      A,@DPTR
   \   000081   FC           MOV       R4,A
   \   000082   A3           INC       DPTR
   \   000083   E0           MOVX      A,@DPTR
   \   000084   F583         MOV       DPH,A
   \   000086   8C82         MOV       DPL,R4
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   FC           MOV       R4,A
   \   00008E   EA           MOV       A,R2
   \   00008F   C3           CLR       C
   \   000090   9C           SUBB      A,R4
   \   000091   FA           MOV       R2,A
   \   000092   95E0         SUBB      A,0xE0 /* A   */
   \   000094   FB           MOV       R3,A
   \   000095   8882         MOV       DPL,R0
   \   000097   8983         MOV       DPH,R1
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   2A           ADD       A,R2
   \   00009B   FA           MOV       R2,A
   \   00009C   A3           INC       DPTR
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   3B           ADDC      A,R3
   \   00009F   FB           MOV       R3,A
   \   0000A0   8882         MOV       DPL,R0
   \   0000A2   8983         MOV       DPH,R1
   \   0000A4   EA           MOV       A,R2
   \   0000A5   F0           MOVX      @DPTR,A
   \   0000A6   A3           INC       DPTR
   \   0000A7   EB           MOV       A,R3
   \   0000A8   12....       LCALL     ?Subroutine2 & 0xFFFF
   1139          
   1140              if ((pRxBuf->internal.flags & MAC_RX_FLAG_ACK_PENDING) && (*pRxBuf->msdu.p != MAC_DATA_REQ_FRAME))
   \                     ??CrossCallReturnLabel_3:
   \   0000AB   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   A2E2         MOV       C,0xE0 /* A   */.2
   \   0000B1   5017         JNC       ??rxFcsIsr_2
   \   0000B3   90....       MOV       DPTR,#pRxBuf
   \   0000B6   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000B9   A3           INC       DPTR
   \   0000BA   A3           INC       DPTR
   \   0000BB   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   6404         XRL       A,#0x4
   \   0000C1   6007         JZ        ??rxFcsIsr_2
   1141              {
   1142                /* For non-data request commands, cancel the pending bit in the ACK. */
   1143                MAC_RADIO_TX_ACK();
   \   0000C3   90618A       MOV       DPTR,#0x618a
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   C2E2         CLR       0xE0 /* A   */.2
   \   0000C9   F0           MOVX      @DPTR,A
   1144              }
   1145          
   1146              /* Read the source matching result back */
   1147              if( macSrcMatchIsEnabled && MAC_RADIO_SRC_MATCH_RESULT() )
   \                     ??rxFcsIsr_2:
   \   0000CA   90....       MOV       DPTR,#macSrcMatchIsEnabled
   \   0000CD   E0           MOVX      A,@DPTR
   \   0000CE   6008         JZ        ??rxFcsIsr_3
   \   0000D0                ; Setup parameters for call to function MAC_SrcMatchCheckResult
   \   0000D0   12....       LCALL     `??MAC_SrcMatchCheckResult::?relay`; Banked call to: MAC_SrcMatchCheckResult
   \   0000D3   E9           MOV       A,R1
   \   0000D4   6002         JZ        ??rxFcsIsr_3
   1148              {
   1149                /* This result will not overwrite the previously determined pRxBuf->internal.flags */
   1150                ackWithPending = MAC_RX_FLAG_ACK_PENDING;
   \   0000D6   7E04         MOV       R6,#0x4
   1151              }
   1152              pRxBuf->internal.flags |= ( crcOK | ackWithPending );
   \                     ??rxFcsIsr_3:
   \   0000D8   E5..         MOV       A,?V1
   \   0000DA   4E           ORL       A,R6
   \   0000DB   F8           MOV       R0,A
   \   0000DC   90....       MOV       DPTR,#pRxBuf
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   F9           MOV       R1,A
   \   0000E1   A3           INC       DPTR
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   C9           XCH       A,R1
   \   0000E4   2407         ADD       A,#0x7
   \   0000E6   F582         MOV       DPL,A
   \   0000E8   E4           CLR       A
   \   0000E9   39           ADDC      A,R1
   \   0000EA   F583         MOV       DPH,A
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   48           ORL       A,R0
   \   0000EE   12....       LCALL     ?Subroutine8 & 0xFFFF
   1153          
   1154              /* finally... execute callback function */
   1155              macRxCompleteCallback(pRxBuf);
   \                     ??CrossCallReturnLabel_13:
   \   0000F1   FB           MOV       R3,A
   \   0000F2   12....       LCALL     `??macRxCompleteCallback::?relay`; Banked call to: macRxCompleteCallback
   1156              pRxBuf = NULL; /* needed to indicate buffer is no longer allocated */
   \   0000F5   800F         SJMP      ??rxFcsIsr_4
   1157            }
   1158            else
   1159            {
   1160          #ifdef FEATURE_SYSTEM_STATS
   1161              /* Increment diagnostic CRC failure counter */
   1162              macLowLevelDiags( MAC_DIAGS_RX_CRC_FAIL );
   \                     ??rxFcsIsr_1:
   \   0000F7                ; Setup parameters for call to function macLowLevelDiags
   \   0000F7   79E8         MOV       R1,#-0x18
   \   0000F9   12....       LCALL     `??macLowLevelDiags::?relay`; Banked call to: macLowLevelDiags
   1163          #endif /* FEATURE_SYSTEM_STATS */
   1164          
   1165              /*
   1166               *  The CRC is bad so no ACK was sent.  Cancel any callback and clear the flag.
   1167               *  (It's OK to cancel the outgoing ACK even if an ACK was not requested.  It's
   1168               *  slightly more efficient to do so.)
   1169               */
   1170              MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \   0000FC   12....       LCALL     ?Subroutine6 & 0xFFFF
   1171              macRxOutgoingAckFlag = 0;
   1172          
   1173              /* the CRC failed so the packet must be discarded */
   1174              MEM_FREE((uint8 **)&pRxBuf);
   \                     ??CrossCallReturnLabel_57:
   \   0000FF                ; Setup parameters for call to function macDataRxMemFree
   \   0000FF   7A..         MOV       R2,#pRxBuf & 0xff
   \   000101   7B..         MOV       R3,#(pRxBuf >> 8) & 0xff
   \   000103   12....       LCALL     `??macDataRxMemFree::?relay`; Banked call to: macDataRxMemFree
   1175              pRxBuf = NULL;  /* needed to indicate buffer is no longer allocated */
   \                     ??rxFcsIsr_4:
   \   000106   90....       MOV       DPTR,#pRxBuf
   \   000109   E4           CLR       A
   \   00010A   F0           MOVX      @DPTR,A
   \   00010B   A3           INC       DPTR
   \   00010C   F0           MOVX      @DPTR,A
   1176            }
   1177          
   1178            /* reset threshold level, reset receive state, and complete receive logic */
   1179            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \   00010D   12....       LCALL     ?Subroutine3 & 0xFFFF
   1180            pFuncRxState = &rxStartIsr;
   1181            rxDone();
   1182          }
   \                     ??CrossCallReturnLabel_4:
   \   000110   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   906194       MOV       DPTR,#0x6194
   \   000003   7405         MOV       A,#0x5
   \   000005   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000008   F0           MOVX      @DPTR,A
   \   000009                ; Setup parameters for call to function rxDone
   \   000009                ; Setup parameters for call to function rxDone
   \   000009   12....       LCALL     `??rxDone::?relay`; Banked call to: rxDone
   \   00000C   22           RET
   1183          
   1184          
   1185          /*=================================================================================================
   1186           * @fn          rxDone
   1187           *
   1188           * @brief       Common exit point for receive.
   1189           *
   1190           * @param       none
   1191           *
   1192           * @return      none
   1193           *=================================================================================================
   1194           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1195          static void rxDone(void)
   \                     rxDone:
   1196          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1197            /* if the receive FIFO has overflowed, flush it here */
   1198            if (MAC_RADIO_RX_FIFO_HAS_OVERFLOWED())
   \   000004   906193       MOV       DPTR,#0x6193
   \   000007   E0           MOVX      A,@DPTR
   \   000008   A2E6         MOV       C,0xE0 /* A   */.6
   \   00000A   500B         JNC       ??rxDone_0
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   A2E7         MOV       C,0xE0 /* A   */.7
   \   00000F   4006         JC        ??rxDone_0
   1199            {
   1200              MAC_RADIO_FLUSH_RX_FIFO();
   \   000011   75E1ED       MOV       0xe1,#-0x13
   \   000014   75E1ED       MOV       0xe1,#-0x13
   1201            }
   1202          
   1203            /* mark receive as inactive */
   1204            macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxDone_0:
   \   000017   90....       MOV       DPTR,#macRxActive
   \   00001A   E4           CLR       A
   \   00001B   F0           MOVX      @DPTR,A
   1205          
   1206            /* if there is no outgoing ACK, run the post receive updates */
   1207            if (!macRxOutgoingAckFlag)
   \   00001C   90....       MOV       DPTR,#macRxOutgoingAckFlag
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   7003         JNZ       ??rxDone_1
   1208            {
   1209              rxPostRxUpdates();
   \   000022                ; Setup parameters for call to function rxPostRxUpdates
   \   000022   12....       LCALL     `??rxPostRxUpdates::?relay`; Banked call to: rxPostRxUpdates
   1210            }
   1211          }
   \                     ??rxDone_1:
   \   000025   02....       LJMP      ??Subroutine37_0 & 0xFFFF
   \   000028                REQUIRE RFST
   1212          
   1213          
   1214          /**************************************************************************************************
   1215           * @fn          macRxAckTxDoneCallback
   1216           *
   1217           * @brief       Function called when the outoing ACK has completed transmitting.
   1218           *
   1219           * @param       none
   1220           *
   1221           * @return      none
   1222           **************************************************************************************************
   1223           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1224          void macRxAckTxDoneCallback(void)
   \                     macRxAckTxDoneCallback:
   1225          {  
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1226            macRxOutgoingAckFlag = 0;
   \   000004   90....       MOV       DPTR,#macRxOutgoingAckFlag
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
   1227          
   1228          #ifdef ACK_DONE_ISR_WORKAROUND
   1229            macTimerCancel(&macTxAckIsrTimer);
   1230          #endif /* ACK_DONE_ISR_WROKAROUND */
   1231          
   1232            /*
   1233             *  With certain interrupt priorities and timing conditions, it is possible this callback
   1234             *  could be executed before the primary receive logic completes.  To prevent this, the
   1235             *  post updates are only executed if receive logic is no longer active.  In the case the
   1236             *  post updates are not executed here, they will execute when the main receive logic
   1237             *  completes.
   1238             */
   1239            if (!macRxActive)
   \   000009   90....       MOV       DPTR,#macRxActive
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   7003         JNZ       ??macRxAckTxDoneCallback_0
   1240            {
   1241              rxPostRxUpdates();
   \   00000F                ; Setup parameters for call to function rxPostRxUpdates
   \   00000F   12....       LCALL     `??rxPostRxUpdates::?relay`; Banked call to: rxPostRxUpdates
   1242            }
   1243          }
   \                     ??macRxAckTxDoneCallback_0:
   \   000012   02....       LJMP      ??Subroutine37_0 & 0xFFFF
   1244          
   1245          
   1246          /*=================================================================================================
   1247           * @fn          rxPostRxUpdates
   1248           *
   1249           * @brief       Updates that need to be performed once receive is complete.
   1250           *
   1251           *              It is not fatal to execute this function if somehow receive is active.  Under
   1252           *              certain timing/interrupt conditions a new receive may have started before this
   1253           *              function executes.  This should happen very rarely (if it happens at all) and
   1254           *              would cause no problems.
   1255           *
   1256           * @param       none
   1257           *
   1258           * @return      none
   1259           *=================================================================================================
   1260           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1261          static void rxPostRxUpdates(void)
   \                     rxPostRxUpdates:
   1262          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1263            /* turn off receiver if permitted */
   1264            macRxOffRequest();
   \   000004                ; Setup parameters for call to function macRxOffRequest
   \   000004   12....       LCALL     `??macRxOffRequest::?relay`; Banked call to: macRxOffRequest
   1265          
   1266            /* update the transmit power, update may have been blocked by transmit of outgoing ACK */
   1267            macRadioUpdateTxPower();
   \   000007                ; Setup parameters for call to function macRadioUpdateTxPower
   \   000007   12....       LCALL     `??macRadioUpdateTxPower::?relay`; Banked call to: macRadioUpdateTxPower
   1268          
   1269            /* initiate and transmit that was queued during receive */
   1270            macTxStartQueuedFrame();
   \   00000A                ; Setup parameters for call to function macTxStartQueuedFrame
   \   00000A   12....       LCALL     `??macTxStartQueuedFrame::?relay`; Banked call to: macTxStartQueuedFrame
   1271          }
   \   00000D   02....       LJMP      ??Subroutine37_0 & 0xFFFF
   1272          
   1273          
   1274          /*=================================================================================================
   1275           * @fn          rxDiscardFrame
   1276           *
   1277           * @brief       Initializes for discarding a packet.  Must be called before ACK is strobed.
   1278           *
   1279           * @param       none
   1280           *
   1281           * @return      none
   1282           *=================================================================================================
   1283           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1284          static void rxDiscardFrame(void)
   \                     rxDiscardFrame:
   1285          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1286            MAC_ASSERT(pFuncRxState == &rxStartIsr); /* illegal state for calling discard frame function */
   \   000004   90....       MOV       DPTR,#pFuncRxState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   64..         XRL       A,#`??rxStartIsr::?relay` & 0xff
   \   00000A   7004         JNZ       ??rxDiscardFrame_0
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   64..         XRL       A,#(`??rxStartIsr::?relay` >> 8) & 0xff
   \                     ??rxDiscardFrame_0:
   \   000010   6003         JZ        ??rxDiscardFrame_1
   \   000012                ; Setup parameters for call to function halAssertHandler
   \   000012   12....       LCALL     `??halAssertHandler::?relay`; Banked call to: halAssertHandler
   1287          
   1288            if (rxUnreadLen == 0)
   \                     ??rxDiscardFrame_1:
   \   000015   90....       MOV       DPTR,#rxUnreadLen
   \   000018   E0           MOVX      A,@DPTR
   \   000019   7005         JNZ       ??rxDiscardFrame_2
   1289            {
   1290              rxDone();
   \   00001B                ; Setup parameters for call to function rxDone
   \   00001B   12....       LCALL     `??rxDone::?relay`; Banked call to: rxDone
   \   00001E   8021         SJMP      ??rxDiscardFrame_3
   1291            }
   1292            else
   1293            {
   1294              rxNextLen = MIN(rxUnreadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
   \                     ??rxDiscardFrame_2:
   \   000020   C3           CLR       C
   \   000021   9410         SUBB      A,#0x10
   \   000023   5006         JNC       ??rxDiscardFrame_4
   \   000025   E0           MOVX      A,@DPTR
   \   000026   90....       MOV       DPTR,#rxNextLen
   \   000029   8005         SJMP      ??rxDiscardFrame_5
   \                     ??rxDiscardFrame_4:
   \   00002B   90....       MOV       DPTR,#rxNextLen
   \   00002E   7410         MOV       A,#0x10
   \                     ??rxDiscardFrame_5:
   \   000030   F0           MOVX      @DPTR,A
   1295              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   000031   E0           MOVX      A,@DPTR
   \   000032   14           DEC       A
   \   000033   906194       MOV       DPTR,#0x6194
   \   000036   F0           MOVX      @DPTR,A
   1296              pFuncRxState = &rxDiscardIsr;
   \   000037   90....       MOV       DPTR,#pFuncRxState
   \   00003A   74..         MOV       A,#`??rxDiscardIsr::?relay` & 0xff
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   A3           INC       DPTR
   \   00003E   74..         MOV       A,#(`??rxDiscardIsr::?relay` >> 8) & 0xff
   \   000040   F0           MOVX      @DPTR,A
   1297            }
   1298          }
   \                     ??rxDiscardFrame_3:
   \   000041   02....       LJMP      ??Subroutine37_0 & 0xFFFF
   1299          
   1300          
   1301          /*=================================================================================================
   1302           * @fn          rxDiscardIsr
   1303           *
   1304           * @brief       Receive ISR state for discarding a packet.
   1305           *
   1306           * @param       none
   1307           *
   1308           * @return      none
   1309           *=================================================================================================
   1310           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1311          static void rxDiscardIsr(void)
   \                     rxDiscardIsr:
   1312          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 16
   \   000004   74F0         MOV       A,#-0x10
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   1313            uint8 buf[MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT];
   1314          
   1315            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
   \   000009                ; Setup parameters for call to function macMemReadRxFifo
   \   000009   12....       LCALL     ?Subroutine20 & 0xFFFF
   1316            rxUnreadLen -= rxNextLen;
   \                     ??CrossCallReturnLabel_34:
   \   00000C   90....       MOV       DPTR,#rxNextLen
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F8           MOV       R0,A
   \   000011   90....       MOV       DPTR,#rxUnreadLen
   \   000014   E0           MOVX      A,@DPTR
   \   000015   C3           CLR       C
   \   000016   98           SUBB      A,R0
   \   000017   F0           MOVX      @DPTR,A
   1317          
   1318            /* read out and discard bytes until all bytes of packet are disposed of */
   1319            if (rxUnreadLen != 0)
   \   000018   6011         JZ        ??rxDiscardIsr_0
   1320            {
   1321              if (rxUnreadLen < MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT)
   \   00001A   C3           CLR       C
   \   00001B   9410         SUBB      A,#0x10
   \   00001D   500F         JNC       ??CrossCallReturnLabel_5
   1322              {
   1323                rxNextLen = rxUnreadLen;
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   90....       MOV       DPTR,#rxNextLen
   \   000023   F0           MOVX      @DPTR,A
   1324                MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   000024   14           DEC       A
   \   000025   906194       MOV       DPTR,#0x6194
   \   000028   F0           MOVX      @DPTR,A
   \   000029   8003         SJMP      ??CrossCallReturnLabel_5
   1325              }
   1326            }
   1327            else
   1328            {
   1329              /* reset threshold level, reset receive state, and complete receive logic */
   1330              MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \                     ??rxDiscardIsr_0:
   \   00002B   12....       LCALL     ?Subroutine3 & 0xFFFF
   1331              pFuncRxState = &rxStartIsr;
   1332              rxDone();
   1333            }
   1334          }
   \                     ??CrossCallReturnLabel_5:
   \   00002E   7410         MOV       A,#0x10
   \   000030   12....       LCALL     ?DEALLOC_XSTACK8
   \   000033   02....       LJMP      ??Subroutine37_0 & 0xFFFF
   1335          
   1336          
   1337          /**************************************************************************************************
   1338           * @fn          macRxFifoOverflowIsr
   1339           *
   1340           * @brief       This interrupt service routine is called when RX FIFO overflow. Note that this
   1341           *              exception does not retrieve the good frames that are trapped in the RX FIFO.
   1342           *              It simply halts and cleanup the RX.
   1343           *
   1344           * @param       none
   1345           *
   1346           * @return      none
   1347           **************************************************************************************************
   1348           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1349          MAC_INTERNAL_API void macRxFifoOverflowIsr(void)
   \                     macRxFifoOverflowIsr:
   1350          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1351            rxFifoOverflowCount++; /* This flag is used for debug purpose only */
   \   000004   90....       MOV       DPTR,#rxFifoOverflowCount
   \   000007   E0           MOVX      A,@DPTR
   \   000008   04           INC       A
   \   000009   F0           MOVX      @DPTR,A
   1352            macRxHaltCleanup();
   \   00000A                ; Setup parameters for call to function macRxHaltCleanup
   \   00000A   12....       LCALL     `??macRxHaltCleanup::?relay`; Banked call to: macRxHaltCleanup
   1353          }
   \   00000D   02....       LJMP      ??Subroutine37_0 & 0xFFFF
   1354          
   1355          
   1356          /**************************************************************************************************
   1357           * @fn          macRxPromiscuousMode
   1358           *
   1359           * @brief       Sets promiscuous mode - enabling or disabling it.
   1360           *
   1361           * @param       none
   1362           *
   1363           * @return      none
   1364           **************************************************************************************************
   1365           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1366          MAC_INTERNAL_API void macRxPromiscuousMode(uint8 mode)
   \                     macRxPromiscuousMode:
   1367          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   1368            rxPromiscuousMode = mode;
   \   000007   90....       MOV       DPTR,#rxPromiscuousMode
   \   00000A   F0           MOVX      @DPTR,A
   1369          
   1370            if (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_OFF)
   \   00000B   700A         JNZ       ??macRxPromiscuousMode_0
   1371            {
   1372              MAC_RADIO_TURN_ON_RX_FRAME_FILTERING();
   \   00000D   906180       MOV       DPTR,#0x6180
   \   000010   E4           CLR       A
   \   000011   F0           MOVX      @DPTR,A
   \   000012   E0           MOVX      A,@DPTR
   \   000013   4409         ORL       A,#0x9
   \   000015   8013         SJMP      ??macRxPromiscuousMode_1
   1373            }
   1374            else
   1375            {
   1376              MAC_ASSERT((mode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC)   ||
   1377                         (mode == MAC_PROMISCUOUS_MODE_COMPLIANT));  /* invalid mode */
   \                     ??macRxPromiscuousMode_0:
   \   000017   7402         MOV       A,#0x2
   \   000019   6E           XRL       A,R6
   \   00001A   6008         JZ        ??macRxPromiscuousMode_2
   \   00001C   7401         MOV       A,#0x1
   \   00001E   6E           XRL       A,R6
   \   00001F   6003         JZ        ??macRxPromiscuousMode_2
   \   000021                ; Setup parameters for call to function halAssertHandler
   \   000021   12....       LCALL     `??halAssertHandler::?relay`; Banked call to: halAssertHandler
   1378          
   1379              MAC_RADIO_TURN_OFF_RX_FRAME_FILTERING();
   \                     ??macRxPromiscuousMode_2:
   \   000024   906180       MOV       DPTR,#0x6180
   \   000027   E0           MOVX      A,@DPTR
   \   000028   C2E0         CLR       0xE0 /* A   */.0
   \                     ??macRxPromiscuousMode_1:
   \   00002A   F0           MOVX      @DPTR,A
   1380            }
   1381          }
   \   00002B   7F01         MOV       R7,#0x1
   \   00002D   02....       LJMP      ?BANKED_LEAVE_XDATA
   1382          
   1383          
   1384          /**************************************************************************************************
   1385           *                                  Compile Time Integrity Checks
   1386           **************************************************************************************************
   1387           */
   1388          
   1389          /* check for changes to the spec that would affect the source code */
   1390          #if ((MAC_A_MAX_PHY_PACKET_SIZE   !=  0x7F )   ||  \
   1391               (MAC_FCF_FIELD_LEN           !=  2    )   ||  \
   1392               (MAC_FCF_FRAME_TYPE_POS      !=  0    )   ||  \
   1393               (MAC_FCF_FRAME_PENDING_POS   !=  4    )   ||  \
   1394               (MAC_FCF_ACK_REQUEST_POS     !=  5    )   ||  \
   1395               (MAC_FCF_INTRA_PAN_POS       !=  6    )   ||  \
   1396               (MAC_FCF_DST_ADDR_MODE_POS   !=  10   )   ||  \
   1397               (MAC_FCF_FRAME_VERSION_POS   !=  12   )   ||  \
   1398               (MAC_FCF_SRC_ADDR_MODE_POS   !=  14   ))
   1399          #error "ERROR!  Change to the spec that requires modification of source code."
   1400          #endif
   1401          
   1402          /* check for changes to the internal flags format */
   1403          #if ((MAC_RX_FLAG_VERSION      !=  0x03)  ||  \
   1404               (MAC_RX_FLAG_ACK_PENDING  !=  0x04)  ||  \
   1405               (MAC_RX_FLAG_SECURITY     !=  0x08)  ||  \
   1406               (MAC_RX_FLAG_PENDING      !=  0x10)  ||  \
   1407               (MAC_RX_FLAG_ACK_REQUEST  !=  0x20)  ||  \
   1408               (MAC_RX_FLAG_INTRA_PAN    !=  0x40))
   1409          #error "ERROR!  Change to the internal RX flags format.  Requires modification of source code."
   1410          #endif
   1411          
   1412          /* validate CRC OK bit optimization */
   1413          #if (MAC_RX_FLAG_CRC_OK != PROPRIETARY_FCS_CRC_OK_BIT)
   1414          #error "ERROR!  Optimization relies on these bits having the same position."
   1415          #endif
   1416          
   1417          #if (MAC_RX_ACTIVE_NO_ACTIVITY != 0x00)
   1418          #error "ERROR! Zero is reserved value of macRxActive. Allows boolean operations, e.g !macRxActive."
   1419          #endif
   1420          
   1421          #if (MAC_PROMISCUOUS_MODE_OFF != 0x00)
   1422          #error "ERROR! Zero is reserved value of rxPromiscuousMode. Allows boolean operations, e.g !rxPromiscuousMode."
   1423          #endif
   1424          
   1425          
   1426          /**************************************************************************************************
   1427          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   macRxAckTxDoneCallback
        2      0   -> rxPostRxUpdates
      2      0   macRxFifoOverflowIsr
        2      0   -> macRxHaltCleanup
      2      0   macRxHaltCleanup
        2      0   -> rxHaltCleanupFinalStep
      2      0   macRxInit
      0      9   macRxPromiscuousMode
        0      9   -> halAssertHandler
      2      0   macRxRadioPowerUpInit
      2      0   macRxThresholdIsr
        2      0   -> rxHaltCleanupFinalStep
      2      0   macRxTxReset
        2      0   -> macRxHardDisable
        2      0   -> macRxPromiscuousMode
      0     30   rxAddrIsr
        0     30   -> halAssertHandler
        0     30   -> macMemReadRxFifo
        0     30   -> rxPrepPayload
        0     30   -> sAddrExtCpy
      2     17   rxDiscardFrame
        2      0   -> halAssertHandler
        2      0   -> rxDone
      2     16   rxDiscardIsr
        2     16   -> macMemReadRxFifo
        2     16   -> rxDone
      2     17   rxDone
        2      0   -> rxPostRxUpdates
      1     10   rxFcsIsr
        0     10   -> MAC_SrcMatchCheckResult
        0     10   -> macDataRxMemFree
        0     10   -> macLowLevelDiags
        0     10   -> macMemReadRxFifo
        0     10   -> macRadioComputeLQI
        0     10   -> macRxCompleteCallback
        0     10   -> macRxOffRequest
        0     10   -> rxDone
      2      0   rxHaltCleanupFinalStep
        2      0   -> macDataRxMemFree
        2      0   -> rxPostRxUpdates
      2      0   rxPayloadIsr
        2      0   -> macMemReadRxFifo
        2      0   -> rxPrepPayload
      2     17   rxPostRxUpdates
        2      0   -> macRadioUpdateTxPower
        2      0   -> macRxOffRequest
        2      0   -> macTxStartQueuedFrame
      2     30   rxPrepPayload
      1     20   rxStartIsr
        0     17   -> MAC_SrcMatchCheckAllPending
        0     17   -> halAssertHandler
        0     17   -> macCspForceTxDoneIfPending
        0     17   -> macDataRxMemAlloc
        0     17   -> macMcuOverflowCapture
        0     17   -> macMcuTimerCapture
        0     17   -> macMemReadRxFifo
        0     17   -> macRadioComputeLQI
        0     17   -> macRxCheckMACPendingCallback
        0     17   -> macRxCheckPendingCallback
        0     17   -> macTxAckNotReceivedCallback
        0     17   -> macTxAckReceivedCallback
        0     20   -> osal_memcpy
        0     17   -> rxDiscardFrame
        0     17   -> rxDone
        0     17   -> rxPostRxUpdates
        0     17   -> rxPrepPayload


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      12  ??Subroutine31_0
      11  ??Subroutine32_0
       7  ??Subroutine33_0
       4  ??Subroutine34_0
       1  ??Subroutine35_0
       5  ??Subroutine36_0
       7  ??Subroutine37_0
       3  ??Subroutine38_0
       5  ??Subroutine39_0
       6  ??Subroutine40_0
       1  ?Subroutine0
       5  ?Subroutine1
       9  ?Subroutine10
      11  ?Subroutine11
      13  ?Subroutine12
      16  ?Subroutine13
       6  ?Subroutine14
      10  ?Subroutine15
       4  ?Subroutine16
       7  ?Subroutine17
       3  ?Subroutine18
       8  ?Subroutine19
       5  ?Subroutine2
      13  ?Subroutine20
      10  ?Subroutine21
      13  ?Subroutine22
       9  ?Subroutine23
       3  ?Subroutine24
      11  ?Subroutine25
       3  ?Subroutine26
      10  ?Subroutine27
       9  ?Subroutine28
       9  ?Subroutine29
      13  ?Subroutine3
       1  ?Subroutine30
       8  ?Subroutine4
      14  ?Subroutine5
       6  ?Subroutine6
       8  ?Subroutine7
       5  ?Subroutine8
      18  ?Subroutine9
       1  RFIRQF0
       1  RFIRQF1
       1  RFST
       1  S1CON
       1  _A_IEN0
      21  macRxAckTxDoneCallback
       1  macRxActive
       4  macRxAddrLen
      16  macRxFifoOverflowIsr
       1  macRxFilter
      22  macRxHaltCleanup
      42  macRxInit
       1  macRxOutgoingAckFlag
      48  macRxPromiscuousMode
      29  macRxRadioPowerUpInit
      42  macRxThresholdIsr
      19  macRxTxReset
       2  pFuncRxState
       2  pRxBuf
     268  rxAddrIsr
       4  rxBuf
      68  rxDiscardFrame
      54  rxDiscardIsr
      40  rxDone
     275  rxFcsIsr
       1  rxFifoOverflowCount
       1  rxFilter
      94  rxHaltCleanupFinalStep
       1  rxIsrActiveFlag
       1  rxNextLen
      50  rxPayloadIsr
       1  rxPayloadLen
      16  rxPostRxUpdates
      51  rxPrepPayload
       1  rxPromiscuousMode
       1  rxResetFlag
     915  rxStartIsr
       1  rxUnreadLen
     108  -- Other

 
 2 392 bytes in segment BANKED_CODE
   108 bytes in segment BANK_RELAYS
     4 bytes in segment CODE_C
     5 bytes in segment SFR_AN
    19 bytes in segment XDATA_Z
 
   112 bytes of CODE     memory
     0 bytes of DATA     memory (+ 5 bytes shared)
 2 392 bytes of HUGECODE memory
    19 bytes of XDATA    memory

Errors: none
Warnings: none
