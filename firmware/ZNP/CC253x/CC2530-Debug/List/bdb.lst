###############################################################################
#
# IAR C/C++ Compiler V10.40.1.7397 for 8051               01/May/2021  14:39:26
# Copyright 2004-2021 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\Texas Instruments\Z-Stack 3.0.2\Components\stack\bdb\bdb.c
#    Command line       =  
#        -f C:\Users\asus\AppData\Local\Temp\EWA0B1.tmp ("E:\Texas
#        Instruments\Z-Stack 3.0.2\Components\stack\bdb\bdb.c" -D
#        BDB_FINDING_BINDING_CAPABILITY_ENABLED=0 -D HAL_UART_DMA_RX_MAX=128 -D
#        MAXMEMHEAP=2765 -D TC_LINKKEY_JOIN -D NWK_MAX_DEVICE_LIST=10 -D
#        ZDSECMGR_TC_DEVICE_MAX=30 -D DISABLE_GREENPOWER_BASIC_PROXY -D
#        POWER_SAVING -D FEATURE_SYSTEM_STATS -D MT_GP_CB_FUNC -lC "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" -lA "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" --diag_suppress
#        Pe001,Pa010 -o "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj" -e --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_GP_CB_FUNC -DMT_APP_FUNC -DMT_APP_CNF_FUNC)
#        -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg" -I
#        "E:\Texas Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\Source\" -I "E:\Texas
#        Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\..\Source\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\gp\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\bdb\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  English_USA.1252
#    List file          =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-Debug\List\bdb.lst
#    Object file        =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj\bdb.r51
#
###############################################################################

E:\Texas Instruments\Z-Stack 3.0.2\Components\stack\bdb\bdb.c
      1          /**************************************************************************************************
      2            Filename:       bdb.c
      3            Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
      4            Revision:       $Revision: - $
      5          
      6            Description:    This file contains the Base Device Behavior functions and attributes.
      7          
      8          
      9            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "bdb.h"
     45          #include "ZDApp.h"
     46          #include "OSAL.h"
     47          #include "ZDConfig.h"
     48          #include "hal_led.h"
     49          #include "ZDObject.h"
     50          #include "OSAL_Nv.h"
     51          #include "AddrMgr.h"
     52          #include "ZDSecMgr.h"
     53          #include "nwk.h"
     54          #include "nwk_util.h"
     55          #include "ssp_hash.h"
     56          #ifdef BDB_REPORTING
     57          #include "bdb_Reporting.h"
     58          #endif 
     59          
     60          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
     61          #include "gp_interface.h"
     62          #include "gp_common.h"
     63          #include "dgp_stub.h"
     64          #endif
     65          
     66          #include "bdb_interface.h"
     67          
     68          #if defined ( INTER_PAN ) 
     69          #if defined ( BDB_TL_INITIATOR )  
     70          #include "bdb_touchlink_initiator.h"
     71          #endif
     72          #if defined ( BDB_TL_TARGET )  
     73          #include "bdb_touchlink_target.h"
     74          #endif
     75          #endif
     76             
     77          #if defined ( INTER_PAN ) && ( defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET ) )
     78            #include "bdb_touchlink.h"
     79          #endif
     80           
     81          #ifdef MT_APP_CNF_FUNC
     82          #include "MT_APP_CONFIG.h"
     83          #endif
     84             
     85           /*********************************************************************
     86           * MACROS
     87           */
     88          //This is actually the channels used
     89          #define vScanChannels  zgDefaultChannelList
     90             
     91           /*********************************************************************
     92           * CONSTANTS
     93           */
     94          
     95          #define NUMBER_OF_CHANNELS     16
     96          
     97          #define CHANNEL_11_MASK_POS    11
     98          #define CHANNEL_26_MASK_POS    26
     99             

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    100          uint8 bdb_FB_InitiatorCurrentCyclesNumber = 0; //last cycle is #1 (i.e. cycles-left = (bdb_FB_InitiatorCurrentCyclesNumber - 1))
   \                     bdb_FB_InitiatorCurrentCyclesNumber:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    101          
    102          /*********************************************************************
    103           * TYPEDEFS
    104           */
    105           
    106           
    107           /*********************************************************************
    108           * GLOBAL VARIABLES
    109           */
    110          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    111          byte bdb_TaskID;
   \                     bdb_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    112          bdbAttributes_t bdbAttributes = BDB_ATTRIBUTES_DEFAULT_CONFIG;
   \                     bdbAttributes:
   \   000000                DS 22
   \   000016                REQUIRE `?<Initializer for bdbAttributes>`
   \   000016                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    113          epList_t *bdb_HeadEpDescriptorList = NULL;
   \                     bdb_HeadEpDescriptorList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    114          epList_t *bdb_CurrEpDescriptorList = NULL;
   \                     bdb_CurrEpDescriptorList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    115          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    116          bdbFindingBindingRespondent_t *pRespondentHead = NULL;
   \                     pRespondentHead:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          bdbFindingBindingRespondent_t *pRespondentCurr = NULL;
   \                     pRespondentCurr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          bdbFindingBindingRespondent_t *pRespondentNext = NULL;
   \                     pRespondentNext:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    119          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    120          bdbCommissioningProcedureState_t bdbCommissioningProcedureState; 
   \                     bdbCommissioningProcedureState:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          bool bdb_initialization = FALSE;  //Variable to tell if the initialization process has been started
   \                     bdb_initialization:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    122          
    123          //Nwk formation and nwk steering for nodes not in nwk

   \                                 In  segment XDATA_I, align 1, keep-with-next
    124          bool vDoPrimaryScan = TRUE;
   \                     vDoPrimaryScan:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for vDoPrimaryScan>`
   \   000001                REQUIRE __INIT_XDATA_I
    125          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    126          uint8 zgBdbInstallCodeCRC[INSTALL_CODE_LEN + INSTALL_CODE_CRC_LEN] = {0x83,0xFE,0xD3,0x40,0x7A,0x93,0x97,0x23,0xA5,0xC6,0x39,0xB2,0x69,0x16,0xD5,0x05,0xC3,0xB5};
   \                     zgBdbInstallCodeCRC:
   \   000000                DS 18
   \   000012                REQUIRE `?<Initializer for zgBdbInstallCodeCRC>`
   \   000012                REQUIRE __INIT_XDATA_I
    127          
    128          //Pointer of the nwk being tried in association process
    129          #if (ZG_BUILD_JOINING_TYPE)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    130          static networkDesc_t *pBDBListNwk = NULL;
   \                     pBDBListNwk:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    131          #endif
    132          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          uint8 bdb_ZclTransactionSequenceNumber=0x00;
   \                     bdb_ZclTransactionSequenceNumber:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    134          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          bool touchLinkTargetEnabled = FALSE;
   \                     touchLinkTargetEnabled:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    136          
    137           /*********************************************************************
    138           * EXTERNAL VARIABLES
    139           */
    140          
    141          extern devStartModes_t devStartMode;
    142          extern bool  requestNewTrustCenterLinkKey;
    143          extern uint32 requestLinkKeyTimeout;
    144          extern uint32 ZDApp_SavedPollRate;
    145          
    146          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
    147          extern bdbGCB_IdentifyTimeChange_t pfnIdentifyTimeChangeCB;
    148          extern uint8 bdbIndentifyActiveEndpoint;
    149          #endif
    150          
    151          extern bdbFindingBindingRespondent_t *pRespondentNext;
    152          
    153          #ifndef DISABLE_GREENPOWER_BASIC_PROXY
    154          extern ZDO_DeviceAnnce_t aliasConflictAnnce;
    155          #endif
    156          
    157          /*********************************************************************
    158           * EXTERNAL FUNCTIONS
    159           */
    160          
    161          extern void ZDApp_ResetTimerStart( uint16 delay );
    162          extern void ZDApp_NodeProfileSync( uint8 stackProfile );
    163          extern uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt );
    164          extern uint8 ZDApp_ReadNetworkRestoreState( void );
    165          
    166          extern bdbFindingBindingRespondent_t* bdb_getRespondentRetry(bdbFindingBindingRespondent_t* pRespondentHead);
    167          extern void bdb_ProcessSimpleDesc( zdoIncomingMsg_t *msgPtr );
    168          extern void bdb_ProcessIEEEAddrRsp(zdoIncomingMsg_t *pMsg);
    169          
    170          /*********************************************************************
    171           * LOCAL VARIABLES
    172           */
    173          #if (ZG_BUILD_JOINING_TYPE)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    174            static uint8 bdb_nwkAssocRetriesCount = 0;
   \                     bdb_nwkAssocRetriesCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    175          #endif
    176          #if (ZG_BUILD_COORDINATOR_TYPE)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    177            static bdb_joiningDeviceList_t *bdb_joiningDeviceList = NULL;
   \                     bdb_joiningDeviceList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    178          #endif
    179            
    180          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
    181          //Latch to save the status success of any attempt in the periodic F&B process  
    182          static uint8 bdb_FBStateSuccessLatch = FALSE;
    183          #endif
    184           /*********************************************************************
    185           * LOCAL FUNCTIONS
    186           */
    187          static void bdb_ProcessOSALMsg(bdbInMsg_t *msgPtr);
    188          void bdb_NotifyCommissioningModeStart(uint8 commissioningMode);
    189          static void bdb_processZDOMgs(zdoIncomingMsg_t *pMsg);
    190          
    191          #if (ZG_BUILD_JOINING_TYPE)
    192          static void bdb_requestTCStackVersion(void);
    193          static void bdb_requestTCLinkKey(void);
    194          static void bdb_requestVerifyTCLinkKey(void);
    195          static void bdb_tryNwkAssoc(void);
    196          #endif
    197          
    198          
    199          static void bdb_processTimeout(void);
    200          static void bdb_startResumeCommissioningProcess(void);
    201          static void bdb_nwkSteeringDeviceOnNwk(void);
    202          static void bdb_nwkJoiningFormation(bool isJoining);
    203          
    204          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
    205          static uint8 gp_ChangeChannelReq(void);
    206          static void gp_CBInit(void);
    207          #endif
    208          
    209          
    210          #if (ZG_BUILD_COORDINATOR_TYPE)
    211          static void bdb_TCProcessJoiningList(void);
    212          static ZStatus_t bdb_TCJoiningDeviceFree(bdb_joiningDeviceList_t* JoiningDeviceToRemove);
    213          #endif
    214          #if (ZG_BUILD_COORDINATOR_TYPE)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    215          static bdbGCB_TCLinkKeyExchangeProcess_t  pfnTCLinkKeyExchangeProcessCB = NULL;
   \                     pfnTCLinkKeyExchangeProcessCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    216          #endif

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    217          static bdbGCB_CommissioningStatus_t       pfnCommissioningStatusCB = NULL; 
   \                     pfnCommissioningStatusCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    218          #if (ZG_BUILD_JOINING_TYPE)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    219          static bdbGCB_CBKETCLinkKeyExchange_t     pfnCBKETCLinkKeyExchange = NULL;
   \                     pfnCBKETCLinkKeyExchange:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    220          static bdbGCB_FilterNwkDesc_t             pfnFilterNwkDesc = NULL;   
   \                     pfnFilterNwkDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    221          #endif
    222          
    223          
    224          
    225          void bdb_calculateCCITT_CRC (uint8 *Mb, uint32 msglen, uint16 *crc);
    226          void bdb_crcInit(uint16 *crc, uint16 *crcinit_direct, uint16 *crcinit_nondirect);
    227          uint16 bdb_crcReflect (uint16 crc, uint16 bitnum);
    228          uint16 bdb_crcBitByBitFast(uint8 * p, uint32 len, uint16 crcinit_direct, uint16 crcinit_nondirect);
    229          void bdb_ProcessNodeDescRsp(zdoIncomingMsg_t *pMsg);
    230          
    231          /*********************************************************************
    232           * PUBLIC FUNCTIONS
    233           *********************************************************************/
    234          void bdb_filterNwkDisc(void);
    235          ZStatus_t bdb_joinProcess(networkDesc_t *pChosenNwk);
    236          
    237          ZStatus_t bdb_TCAddJoiningDevice(uint16 parentAddr, uint8* JoiningExtAddr);
    238          void bdb_TCjoiningDeviceComplete(uint8* JoiningExtAddr);
    239          
    240           /*********************************************************************
    241           * @fn          bdb_Init
    242           *
    243           * @brief       Initialization function for the Base Device Behavior.
    244           *
    245           * @param       task_id - bdb_TaskID Task ID
    246           *
    247           * @return      none
    248           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    249          void bdb_Init( byte task_id )
   \                     bdb_Init:
    250          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    251            bdb_TaskID = task_id;
   \   000006   90....       MOV       DPTR,#bdb_TaskID
   \   000009   12....       LCALL     ?Subroutine10 & 0xFFFF
    252              
    253          #if (ZG_BUILD_COORDINATOR_TYPE)
    254            if(ZG_DEVICE_COORDINATOR_TYPE)
   \                     ??CrossCallReturnLabel_4:
   \   00000C   700C         JNZ       ??bdb_Init_0
    255            {
    256              if(bdbAttributes.bdbJoinUsesInstallCodeKey)
   \   00000E   90....       MOV       DPTR,#bdbAttributes + 15
   \   000011   E0           MOVX      A,@DPTR
   \   000012   6006         JZ        ??bdb_Init_0
    257              {
    258                zgAllowInstallCodes = ZG_IC_MUST_USED;
   \   000014   90....       MOV       DPTR,#zgAllowInstallCodes
   \   000017   7402         MOV       A,#0x2
   \   000019   F0           MOVX      @DPTR,A
    259              }
    260            }
    261          #endif
    262            
    263          #if defined ( INTER_PAN ) && defined ( BDB_TL_INITIATOR )  
    264            touchLinkInitiator_InitDevice( );
    265          #endif
    266          
    267          #if (BDB_REPORTING)
    268            bdb_RepInit();
    269          #endif  
    270            
    271            //Register ZDO callbacks
    272            ZDO_RegisterForZDOMsg ( task_id, Node_Desc_rsp );
   \                     ??bdb_Init_0:
   \   00001A                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001A   7A02         MOV       R2,#0x2
   \   00001C   7B80         MOV       R3,#-0x80
   \   00001E   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    273          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
    274            ZDO_RegisterForZDOMsg ( task_id, IEEE_addr_rsp );
    275            ZDO_RegisterForZDOMsg ( task_id, Simple_Desc_rsp );
    276          #endif
    277            
    278          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
    279            gp_RegisterGPChangeChannelReqForBDBCB(gp_ChangeChannelReq);
    280            gp_CBInit();
    281          #endif
    282          }
   \   000021   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    283          
    284          /*********************************************************************
    285           * @fn      bdb_RegisterSimpleDescriptor
    286           *
    287           * @brief   Register the Simple descriptor. This function also registers 
    288           *          the profile's cluster conversion table.
    289           *
    290           * @param   simpleDesc - a pointer to a valid SimpleDescriptionFormat_t, must not be NULL.
    291           *
    292           * @return  none
    293           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    294          void bdb_RegisterSimpleDescriptor( SimpleDescriptionFormat_t *simpleDesc )
   \                     bdb_RegisterSimpleDescriptor:
    295          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    296            endPointDesc_t *epDesc;
    297          
    298            // Register the application's endpoint descriptor
    299            //  - This memory is allocated and never freed.
    300            epDesc = osal_mem_alloc( sizeof ( endPointDesc_t ) );
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   7A07         MOV       R2,#0x7
   \   00000B   7B00         MOV       R3,#0x0
   \   00000D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
    301            if ( epDesc )
   \   000010   EA           MOV       A,R2
   \   000011   4B           ORL       A,R3
   \   000012   6023         JZ        ??bdb_RegisterSimpleDescriptor_0
    302            {
    303              // Fill out the endpoint description.
    304              epDesc->endPoint = simpleDesc->EndPoint;
   \   000014   8E82         MOV       DPL,R6
   \   000016   8F83         MOV       DPH,R7
   \   000018   E0           MOVX      A,@DPTR
   \   000019   8A82         MOV       DPL,R2
   \   00001B   8B83         MOV       DPH,R3
   \   00001D   F0           MOVX      @DPTR,A
    305              epDesc->task_id = &zcl_TaskID;   // all messages get sent to ZCL first
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   74..         MOV       A,#zcl_TaskID & 0xff
   \   000022   F0           MOVX      @DPTR,A
   \   000023   A3           INC       DPTR
   \   000024   74..         MOV       A,#(zcl_TaskID >> 8) & 0xff
   \   000026   12....       LCALL     ?Subroutine15 & 0xFFFF
    306              epDesc->simpleDesc = simpleDesc;
   \                     ??CrossCallReturnLabel_21:
   \   000029   EE           MOV       A,R6
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   A3           INC       DPTR
   \   00002C   EF           MOV       A,R7
   \   00002D   12....       LCALL     ?Subroutine15 & 0xFFFF
    307              epDesc->latencyReq = noLatencyReqs;
   \                     ??CrossCallReturnLabel_22:
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   E4           CLR       A
   \   000033   F0           MOVX      @DPTR,A
    308          
    309              // Register the endpoint description with the AF
    310              afRegister( epDesc );
   \   000034                ; Setup parameters for call to function afRegister
   \   000034   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    311            }
    312          }
   \                     ??bdb_RegisterSimpleDescriptor_0:
   \   000037   02....       LJMP      ??Subroutine69_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine69_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    313          
    314          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
    315          /*********************************************************************
    316           * @fn      bdb_ZclIdentifyCmdInd
    317           *
    318           * @brief   Callback from the ZCL General Cluster Library when
    319           *          it received an Identity Command for this application.
    320           *
    321           * @param   identifyTime - the number of seconds to identify yourself
    322           * @param   endpoint - destination endpoint
    323           *
    324           * @return  none
    325           */
    326          void bdb_ZclIdentifyCmdInd( uint16 identifyTime, uint8 endpoint )
    327          {
    328            zclAttrRec_t identifyAttrRec;
    329            
    330            if ( zclFindAttrRec( endpoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    331                                ATTRID_IDENTIFY_TIME, &identifyAttrRec ) )
    332            {
    333              //If we are processing an actual change
    334              if(*(uint16*)identifyAttrRec.attr.dataPtr != identifyTime)
    335              {
    336                if ( identifyTime > 0 )
    337                {
    338                  *((uint16*)identifyAttrRec.attr.dataPtr) = identifyTime;
    339                  osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
    340                }
    341                else if ( identifyTime <= 0 )
    342                {
    343                  *((uint16*)identifyAttrRec.attr.dataPtr) = 0;
    344                  osal_stop_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT );
    345                }
    346                
    347                if(pfnIdentifyTimeChangeCB != NULL)
    348                {
    349                  pfnIdentifyTimeChangeCB(endpoint);
    350                }
    351              }
    352            }
    353          }
    354          #endif
    355          
    356          
    357          #if (ZG_BUILD_JOINING_TYPE) 
    358           /*********************************************************************
    359           * @fn          bdb_setActiveCentralizedLinkKey
    360           *
    361           * @brief       Set the active centralized key to be used, Global or IC derived. See zstack_CentralizedLinkKeyModes_t
    362           *
    363           * @param       zstack_CentralizedLinkKeyModes - Key to be used for joining centralized network
    364           * @param       pKey - Key to be used (if any)
    365           *
    366           * @return      ZStatus_t - ZFailure when no valid BDB_INSTALL_CODE_USE is used
    367           *                          ZInvalidParameter when IC buffer is null
    368           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    369          ZStatus_t bdb_setActiveCentralizedLinkKey(uint8 zstack_CentralizedLinkKeyModes, uint8* pKey)
   \                     bdb_setActiveCentralizedLinkKey:
    370          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
    371            ZStatus_t Status;
    372          
    373            uint8 extAddr[Z_EXTADDR_LEN];
    374          
    375            osal_memset(extAddr,0x00,Z_EXTADDR_LEN);
   \   000010                ; Setup parameters for call to function osal_memset
   \   000010   7C08         MOV       R4,#0x8
   \   000012   7D00         MOV       R5,#0x0
   \   000014   7900         MOV       R1,#0x0
   \   000016   AA..         MOV       R2,?XSP + 0
   \   000018   AB..         MOV       R3,?XSP + 1
   \   00001A   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    376          
    377            if(pKey == NULL)
   \   00001D   EE           MOV       A,R6
   \   00001E   4F           ORL       A,R7
   \   00001F   603E         JZ        ??bdb_setActiveCentralizedLinkKey_0
    378            {
    379              return ZInvalidParameter;
    380            }
    381          
    382            //Clear it, if the request requires it, it will be set
    383            gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = FALSE;
   \   000021   90....       MOV       DPTR,#gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY
   \   000024   E4           CLR       A
   \   000025   F0           MOVX      @DPTR,A
    384          
    385            switch(zstack_CentralizedLinkKeyModes)
   \   000026   E5..         MOV       A,?V0
   \   000028   600E         JZ        ??bdb_setActiveCentralizedLinkKey_1
   \   00002A   14           DEC       A
   \   00002B   6013         JZ        ??bdb_setActiveCentralizedLinkKey_2
   \   00002D   14           DEC       A
   \   00002E   600D         JZ        ??bdb_setActiveCentralizedLinkKey_3
   \   000030   14           DEC       A
   \   000031   601D         JZ        ??bdb_setActiveCentralizedLinkKey_4
   \   000033   14           DEC       A
   \   000034   6017         JZ        ??bdb_setActiveCentralizedLinkKey_5
   \   000036   8027         SJMP      ??bdb_setActiveCentralizedLinkKey_0
    386            {
    387              case zstack_UseDefaultGlobalTrustCenterLinkKey:
    388                //Set the default key to be used in centralized networks as defaultTCLinkKey
    389                Status = APSME_SetDefaultKey();
   \                     ??bdb_setActiveCentralizedLinkKey_1:
   \   000038                ; Setup parameters for call to function APSME_SetDefaultKey
   \   000038   12....       LCALL     `??APSME_SetDefaultKey::?relay`; Banked call to: APSME_SetDefaultKey
   \   00003B   801E         SJMP      ??bdb_setActiveCentralizedLinkKey_6
    390              break;
    391          
    392              case zstack_UseInstallCodeWithFallback:
    393                //same as zstack_UseInstallCode but attempt default TRUE
    394                gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = TRUE;
   \                     ??bdb_setActiveCentralizedLinkKey_3:
   \   00003D   7401         MOV       A,#0x1
   \   00003F   F0           MOVX      @DPTR,A
    395              case zstack_UseInstallCode:
    396                 //Set the install code as default key
    397                Status = bdb_addInstallCode(pKey,extAddr);
   \                     ??bdb_setActiveCentralizedLinkKey_2:
   \   000040                ; Setup parameters for call to function bdb_addInstallCode
   \   000040   AC..         MOV       R4,?XSP + 0
   \   000042   AD..         MOV       R5,?XSP + 1
   \   000044   EE           MOV       A,R6
   \   000045   FA           MOV       R2,A
   \   000046   EF           MOV       A,R7
   \   000047   FB           MOV       R3,A
   \   000048   12....       LCALL     `??bdb_addInstallCode::?relay`; Banked call to: bdb_addInstallCode
   \   00004B   800E         SJMP      ??bdb_setActiveCentralizedLinkKey_6
    398              break;
    399          
    400              case zstack_UseAPSKeyWithFallback:
    401                //same as zstack_UseAPSKey but attempt default TRUE
    402                gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = TRUE;
   \                     ??bdb_setActiveCentralizedLinkKey_5:
   \   00004D   7401         MOV       A,#0x1
   \   00004F   F0           MOVX      @DPTR,A
    403              case zstack_UseAPSKey:
    404                //Set the key as global default
    405                Status = APSME_AddTCLinkKey(pKey,extAddr);
   \                     ??bdb_setActiveCentralizedLinkKey_4:
   \   000050                ; Setup parameters for call to function APSME_AddTCLinkKey
   \   000050   AC..         MOV       R4,?XSP + 0
   \   000052   AD..         MOV       R5,?XSP + 1
   \   000054   EE           MOV       A,R6
   \   000055   FA           MOV       R2,A
   \   000056   EF           MOV       A,R7
   \   000057   FB           MOV       R3,A
   \   000058   12....       LCALL     `??APSME_AddTCLinkKey::?relay`; Banked call to: APSME_AddTCLinkKey
   \                     ??bdb_setActiveCentralizedLinkKey_6:
   \   00005B   E9           MOV       A,R1
   \   00005C   F9           MOV       R1,A
    406              break;
   \   00005D   8002         SJMP      ??bdb_setActiveCentralizedLinkKey_7
    407              
    408              default:
    409                Status = ZInvalidParameter;
   \                     ??bdb_setActiveCentralizedLinkKey_0:
   \   00005F   7902         MOV       R1,#0x2
    410              break;
    411            }
    412          
    413            return Status;
   \                     ??bdb_setActiveCentralizedLinkKey_7:
   \   000061   7408         MOV       A,#0x8
   \   000063   12....       LCALL     ?DEALLOC_XSTACK8
   \   000066   02....       LJMP      ?Subroutine0 & 0xFFFF
    414          }
    415          #endif
    416          
    417          
    418              
    419            
    420          /******************************************************************************
    421           * @fn          bdb_addInstallCode
    422           *
    423           * @brief       Interface to add an install codes and adds a APS TC Link key.
    424           *
    425           * @param       pInstallCode - [in] Install Code with CRC (buffer size of 18 bytes).
    426           *              pExt - [in] Extended address of the node.
    427           *
    428           * @return      ZStatus_t
    429           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    430          ZStatus_t bdb_addInstallCode(uint8* pInstallCode, uint8* pExt)
   \                     bdb_addInstallCode:
    431          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
    432            uint8  hashOutput[16];
    433            uint16 CRC;
    434            
    435          #if (ZG_BUILD_COORDINATOR_TYPE)
    436            if(ZG_DEVICE_COORDINATOR_TYPE)
   \   000012   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000015   E0           MOVX      A,@DPTR
   \   000016   700A         JNZ       ??bdb_addInstallCode_0
    437            {
    438              if(zgAllowInstallCodes == ZG_IC_NOT_SUPPORTED)
   \   000018   90....       MOV       DPTR,#zgAllowInstallCodes
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   7004         JNZ       ??bdb_addInstallCode_0
    439              {
    440                return ZFailure;
   \   00001E   7901         MOV       R1,#0x1
   \   000020   805C         SJMP      ??bdb_addInstallCode_1
    441              }
    442            }
    443          #endif
    444                 
    445            if((pInstallCode == NULL) || (pExt == NULL))
   \                     ??bdb_addInstallCode_0:
   \   000022   EA           MOV       A,R2
   \   000023   4F           ORL       A,R7
   \   000024   601F         JZ        ??bdb_addInstallCode_2
   \   000026   EC           MOV       A,R4
   \   000027   4D           ORL       A,R5
   \   000028   601B         JZ        ??bdb_addInstallCode_2
    446            {
    447              return ZInvalidParameter;
    448            }
    449            
    450            CRC = bdb_GenerateInstallCodeCRC(pInstallCode);
   \   00002A                ; Setup parameters for call to function bdb_GenerateInstallCodeCRC
   \   00002A   12....       LCALL     `??bdb_GenerateInstallCodeCRC::?relay`; Banked call to: bdb_GenerateInstallCodeCRC
   \   00002D   8A..         MOV       ?V2,R2
   \   00002F   8B..         MOV       ?V3,R3
    451          
    452            //Validate CRC
    453            if(CRC != osal_build_uint16(&pInstallCode[INSTALL_CODE_LEN]))
   \   000031                ; Setup parameters for call to function osal_build_uint16
   \   000031   EE           MOV       A,R6
   \   000032   2410         ADD       A,#0x10
   \   000034   FA           MOV       R2,A
   \   000035   E4           CLR       A
   \   000036   3F           ADDC      A,R7
   \   000037   FB           MOV       R3,A
   \   000038   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00003B   EA           MOV       A,R2
   \   00003C   65..         XRL       A,?V2
   \   00003E   7003         JNZ       ??bdb_addInstallCode_3
   \   000040   EB           MOV       A,R3
   \   000041   65..         XRL       A,?V3
   \                     ??bdb_addInstallCode_3:
   \   000043   6004         JZ        ??bdb_addInstallCode_4
    454            {
    455              return ZInvalidParameter;
   \                     ??bdb_addInstallCode_2:
   \   000045   7902         MOV       R1,#0x2
   \   000047   8035         SJMP      ??bdb_addInstallCode_1
    456            }
    457          
    458            sspMMOHash (NULL, 0, pInstallCode,(INSTALL_CODE_LEN + INSTALL_CODE_CRC_LEN) * BITS_PER_BYTE, hashOutput);
   \                     ??bdb_addInstallCode_4:
   \   000049                ; Setup parameters for call to function sspMMOHash
   \   000049   A8..         MOV       R0,?XSP + 0
   \   00004B   A9..         MOV       R1,?XSP + 1
   \   00004D   88..         MOV       ?V2,R0
   \   00004F   89..         MOV       ?V3,R1
   \   000051   78..         MOV       R0,#?V2
   \   000053   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000056   75..90       MOV       ?V2,#-0x70
   \   000059   75..00       MOV       ?V3,#0x0
   \   00005C   78..         MOV       R0,#?V2
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000061   EE           MOV       A,R6
   \   000062   FC           MOV       R4,A
   \   000063   EF           MOV       A,R7
   \   000064   FD           MOV       R5,A
   \   000065   7900         MOV       R1,#0x0
   \   000067   7A00         MOV       R2,#0x0
   \   000069   7B00         MOV       R3,#0x0
   \   00006B   12....       LCALL     `??sspMMOHash::?relay`; Banked call to: sspMMOHash
   \   00006E   7404         MOV       A,#0x4
   \   000070   12....       LCALL     ?DEALLOC_XSTACK8
    459          
    460            return APSME_AddTCLinkKey(hashOutput,pExt);
   \   000073                ; Setup parameters for call to function APSME_AddTCLinkKey
   \   000073   AC..         MOV       R4,?V0
   \   000075   AD..         MOV       R5,?V1
   \   000077   AA..         MOV       R2,?XSP + 0
   \   000079   AB..         MOV       R3,?XSP + 1
   \   00007B   12....       LCALL     `??APSME_AddTCLinkKey::?relay`; Banked call to: APSME_AddTCLinkKey
   \                     ??bdb_addInstallCode_1:
   \   00007E   7410         MOV       A,#0x10
   \   000080   12....       LCALL     ?DEALLOC_XSTACK8
   \   000083   7F06         MOV       R7,#0x6
   \   000085   02....       LJMP      ?BANKED_LEAVE_XDATA
    461          }    
    462              
    463          
    464          #if (ZG_BUILD_COORDINATOR_TYPE)
    465           /*********************************************************************
    466           * @fn      bdb_RegisterTCLinkKeyExchangeProcessCB
    467           *
    468           * @brief   Register a callback to receive notifications on the joining devices 
    469           *          and its status on TC link key exchange
    470           *
    471           * @param   bdbGCB_TCLinkKeyExchangeProcess - application callback 
    472           *          (extended address of device, status: 0 = Joining, 1 = TC link key exchange success, 2 = TC link key exchange failed)
    473           *
    474           * @return  none
    475           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    476          void bdb_RegisterTCLinkKeyExchangeProcessCB(bdbGCB_TCLinkKeyExchangeProcess_t bdbGCB_TCLinkKeyExchangeProcess)
   \                     bdb_RegisterTCLinkKeyExchangeProcessCB:
    477          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    478            if(bdbGCB_TCLinkKeyExchangeProcess != NULL)
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   6006         JZ        ??CrossCallReturnLabel_13
    479            {
    480              pfnTCLinkKeyExchangeProcessCB = bdbGCB_TCLinkKeyExchangeProcess;
   \   000008   90....       MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
   \   00000B   12....       LCALL     ?Subroutine14 & 0xFFFF
    481            }
    482          }
   \                     ??CrossCallReturnLabel_13:
   \   00000E   02....       LJMP      ??Subroutine54_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
    483          
    484          
    485          
    486           /*********************************************************************
    487           * @fn          bdb_setTCRequireKeyExchange
    488           *
    489           * @brief       Set the bdb_setTCRequireKeyExchange attribute
    490           *
    491           * @param       isKeyExchangeRequired - True if TC will remove devices that do 
    492           *              not perform key exchange after bdbTrustCenterNodeJoinTimeout, 
    493           *              False to not remove devices.
    494           *
    495           * @return      none
    496           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    497          void bdb_setTCRequireKeyExchange(bool isKeyExchangeRequired)
   \                     bdb_setTCRequireKeyExchange:
    498          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    499            bdbAttributes.bdbTrustCenterRequireKeyExchange = isKeyExchangeRequired;
   \   000004   E9           MOV       A,R1
   \   000005   90....       MOV       DPTR,#bdbAttributes + 17
   \   000008   02....       LJMP      ??Subroutine53_0 & 0xFFFF
    500          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                REQUIRE ??Subroutine54_0
   \   000001                ; // Fall through to label ??Subroutine54_0
    501          
    502          
    503          
    504           /*********************************************************************
    505           * @fn          bdb_TCAddJoiningDevice
    506           *
    507           * @brief       Add a joining device to the list of devices that must request a 
    508           *              key before bdbTrustCenterNodeJoinTimeout.
    509           *
    510           * @param       parentAddr - Address of the parent device
    511           * @param       JoiningExtAddr - IEEE address of the joining device
    512           *
    513           * @return      ZStatus_t - ZFailure No memory to allocate the device in the list
    514           *                          ZInvalidParameter
    515           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    516          ZStatus_t bdb_TCAddJoiningDevice(uint16 parentAddr, uint8* JoiningExtAddr)
   \                     bdb_TCAddJoiningDevice:
    517          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
    518            bdb_joiningDeviceList_t* tempJoiningDescNode;
    519            
    520            if((parentAddr == INVALID_NODE_ADDR) || (JoiningExtAddr == NULL))
   \   000012   74FE         MOV       A,#-0x2
   \   000014   6A           XRL       A,R2
   \   000015   7003         JNZ       ??bdb_TCAddJoiningDevice_0
   \   000017   74FF         MOV       A,#-0x1
   \   000019   6B           XRL       A,R3
   \                     ??bdb_TCAddJoiningDevice_0:
   \   00001A   6004         JZ        ??bdb_TCAddJoiningDevice_1
   \   00001C   EC           MOV       A,R4
   \   00001D   4D           ORL       A,R5
   \   00001E   7005         JNZ       ??bdb_TCAddJoiningDevice_2
    521            {
    522              return ZInvalidParameter;
   \                     ??bdb_TCAddJoiningDevice_1:
   \   000020   7902         MOV       R1,#0x2
   \   000022   02....       LJMP      ??bdb_TCAddJoiningDevice_3 & 0xFFFF
    523            }
    524            
    525            //If the list was empty and element was allocated, then start the timer
    526            if(bdb_joiningDeviceList == NULL)
   \                     ??bdb_TCAddJoiningDevice_2:
   \   000025   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000028   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   00002B   702E         JNZ       ??bdb_TCAddJoiningDevice_4
    527            {
    528              bdb_joiningDeviceList = osal_mem_alloc(sizeof(bdb_joiningDeviceList_t));
   \   00002D                ; Setup parameters for call to function osal_mem_alloc
   \   00002D   7A0D         MOV       R2,#0xd
   \   00002F   7B00         MOV       R3,#0x0
   \   000031   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000034   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000037   12....       LCALL     ?Subroutine14 & 0xFFFF
    529              if(bdb_joiningDeviceList == NULL)
   \                     ??CrossCallReturnLabel_14:
   \   00003A   F9           MOV       R1,A
   \   00003B   EA           MOV       A,R2
   \   00003C   49           ORL       A,R1
   \   00003D   606A         JZ        ??bdb_TCAddJoiningDevice_5
    530              {
    531                return ZFailure;
    532              }
    533             
    534              osal_start_reload_timer(bdb_TaskID,BDB_TC_JOIN_TIMEOUT,1000);
   \   00003F                ; Setup parameters for call to function osal_start_reload_timer
   \   00003F   90....       MOV       DPTR,#__Constant_3e8
   \   000042   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000045   7A00         MOV       R2,#0x0
   \   000047   7B08         MOV       R3,#0x8
   \   000049   90....       MOV       DPTR,#bdb_TaskID
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   F9           MOV       R1,A
   \   00004E   12....       LCALL     `??osal_start_reload_timer::?relay`; Banked call to: osal_start_reload_timer
   \   000051   7404         MOV       A,#0x4
   \   000053   12....       LCALL     ?DEALLOC_XSTACK8
    535              tempJoiningDescNode = bdb_joiningDeviceList;
   \   000056   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000059   8055         SJMP      ??CrossCallReturnLabel_77
    536            }
    537            //if the list was not empty then add the entry at the end of the list
    538            else
    539            {
    540              tempJoiningDescNode = bdb_joiningDeviceList;
   \                     ??bdb_TCAddJoiningDevice_4:
   \   00005B   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   00005E   12....       LCALL     ?Subroutine22 & 0xFFFF
    541              
    542              //Validate that this is not already in the list... somehow
    543              if(osal_memcmp(JoiningExtAddr,tempJoiningDescNode->bdbJoiningNodeEui64,Z_EXTADDR_LEN))
   \                     ??CrossCallReturnLabel_29:
   \   000061   75..00       MOV       ?V6,#0x0
   \   000064   78..         MOV       R0,#?V4
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000069   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   00006C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006F   E9           MOV       A,R1
   \   000070   701E         JNZ       ??bdb_TCAddJoiningDevice_6
    544              {
    545                //The device added is already in the list, refresh its time and do nothing else
    546                tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
    547                return ZSuccess;
    548              }
    549              
    550              while(tempJoiningDescNode->nextDev != NULL)
   \                     ??bdb_TCAddJoiningDevice_7:
   \   000072   EE           MOV       A,R6
   \   000073   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000076   3F           ADDC      A,R7
   \   000077   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   00007A   601A         JZ        ??bdb_TCAddJoiningDevice_8
    551              {
    552                tempJoiningDescNode = tempJoiningDescNode->nextDev;
   \   00007C   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   00007F   12....       LCALL     ?Subroutine22 & 0xFFFF
    553                
    554                //Validate that this is not already in the list... somehow
    555                if(osal_memcmp(JoiningExtAddr,tempJoiningDescNode->bdbJoiningNodeEui64,Z_EXTADDR_LEN))
   \                     ??CrossCallReturnLabel_30:
   \   000082   78..         MOV       R0,#?V4
   \   000084   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000087   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   00008A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008D   E9           MOV       A,R1
   \   00008E   60E2         JZ        ??bdb_TCAddJoiningDevice_7
    556                {
    557                  //The device added is already in the list, refresh its time and do nothing else
    558                  tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
   \                     ??bdb_TCAddJoiningDevice_6:
   \   000090   12....       LCALL     ?Subroutine26 & 0xFFFF
    559                  return ZSuccess;
   \                     ??CrossCallReturnLabel_35:
   \   000093   02....       LJMP      ??bdb_TCAddJoiningDevice_9 & 0xFFFF
    560                }
    561              }
    562              
    563              tempJoiningDescNode->nextDev = osal_mem_alloc(sizeof(bdb_joiningDeviceList_t));
   \                     ??bdb_TCAddJoiningDevice_8:
   \   000096                ; Setup parameters for call to function osal_mem_alloc
   \   000096   7A0D         MOV       R2,#0xd
   \   000098   7B00         MOV       R3,#0x0
   \   00009A   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00009D   8B..         MOV       ?V5,R3
   \   00009F   A9..         MOV       R1,?V5
   \   0000A1   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0000A4   12....       LCALL     ??Subroutine70_0 & 0xFFFF
    564              if(tempJoiningDescNode->nextDev == NULL)
   \                     ??CrossCallReturnLabel_166:
   \   0000A7   7004         JNZ       ??bdb_TCAddJoiningDevice_10
    565              {
    566                return ZFailure;
   \                     ??bdb_TCAddJoiningDevice_5:
   \   0000A9   7901         MOV       R1,#0x1
   \   0000AB   807E         SJMP      ??bdb_TCAddJoiningDevice_3
    567              }
    568              
    569              tempJoiningDescNode = tempJoiningDescNode->nextDev;
   \                     ??bdb_TCAddJoiningDevice_10:
   \   0000AD   12....       LCALL     ?Subroutine34 & 0xFFFF
    570            }
   \                     ??CrossCallReturnLabel_77:
   \   0000B0   12....       LCALL     ?Subroutine31 & 0xFFFF
    571            
    572            if(pfnTCLinkKeyExchangeProcessCB)
   \                     ??CrossCallReturnLabel_47:
   \   0000B3   90....       MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
   \   0000B6   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   0000B9   6040         JZ        ??bdb_TCAddJoiningDevice_11
    573            {
    574              bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
    575              osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
   \   0000BB                ; Setup parameters for call to function osal_memcpy
   \   0000BB   8E82         MOV       DPL,R6
   \   0000BD   8F83         MOV       DPH,R7
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   A982         MOV       R1,DPL
   \   0000C3   AA83         MOV       R2,DPH
   \   0000C5   89..         MOV       ?V4,R1
   \   0000C7   8A..         MOV       ?V5,R2
   \   0000C9   75..00       MOV       ?V6,#0x0
   \   0000CC   78..         MOV       R0,#?V4
   \   0000CE   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000D1   7C08         MOV       R4,#0x8
   \   0000D3   7D00         MOV       R5,#0x0
   \   0000D5   7404         MOV       A,#0x4
   \   0000D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DA   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   0000DD   12....       LCALL     ?DEALLOC_XSTACK8
    576              bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_JOINING;
   \   0000E0   85..82       MOV       DPL,?XSP + 0
   \   0000E3   85..83       MOV       DPH,?XSP + 1
   \   0000E6   E4           CLR       A
   \   0000E7   F0           MOVX      @DPTR,A
    577              
    578              bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
   \   0000E8                ; Setup parameters for call to function bdb_SendMsg
   \   0000E8   A8..         MOV       R0,?XSP + 0
   \   0000EA   A9..         MOV       R1,?XSP + 1
   \   0000EC   88..         MOV       ?V4,R0
   \   0000EE   89..         MOV       ?V5,R1
   \   0000F0   78..         MOV       R0,#?V4
   \   0000F2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F5   12....       LCALL     ?Subroutine19 & 0xFFFF
    579            }
   \                     ??CrossCallReturnLabel_109:
   \   0000F8   12....       LCALL     ?DEALLOC_XSTACK8
    580            
    581            tempJoiningDescNode->nextDev = NULL;
   \                     ??bdb_TCAddJoiningDevice_11:
   \   0000FB   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0000FE   E4           CLR       A
   \   0000FF   F0           MOVX      @DPTR,A
   \   000100   A3           INC       DPTR
   \   000101   F0           MOVX      @DPTR,A
    582            tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
   \   000102   12....       LCALL     ?Subroutine26 & 0xFFFF
    583            tempJoiningDescNode->parentAddr = parentAddr;
   \                     ??CrossCallReturnLabel_36:
   \   000105   8E82         MOV       DPL,R6
   \   000107   8F83         MOV       DPH,R7
   \   000109   E5..         MOV       A,?V2
   \   00010B   F0           MOVX      @DPTR,A
   \   00010C   A3           INC       DPTR
   \   00010D   E5..         MOV       A,?V3
   \   00010F   F0           MOVX      @DPTR,A
    584            osal_memcpy(tempJoiningDescNode->bdbJoiningNodeEui64, JoiningExtAddr, Z_EXTADDR_LEN);
   \   000110                ; Setup parameters for call to function osal_memcpy
   \   000110   75..00       MOV       ?V2,#0x0
   \   000113   78..         MOV       R0,#?V0
   \   000115   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000118   7C08         MOV       R4,#0x8
   \   00011A   7D00         MOV       R5,#0x0
   \   00011C   EE           MOV       A,R6
   \   00011D   2402         ADD       A,#0x2
   \   00011F   FA           MOV       R2,A
   \   000120   E4           CLR       A
   \   000121   3F           ADDC      A,R7
   \   000122   FB           MOV       R3,A
   \   000123   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000126   12....       LCALL     ?DEALLOC_XSTACK8
    585            
    586            return ZSuccess;
   \                     ??bdb_TCAddJoiningDevice_9:
   \   000129   7900         MOV       R1,#0x0
   \                     ??bdb_TCAddJoiningDevice_3:
   \   00012B   02....       LJMP      ?Subroutine3 & 0xFFFF
    587          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   EE           MOV       A,R6
   \   000001                REQUIRE ??Subroutine47_0
   \   000001                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   90....       MOV       DPTR,#bdbAttributes + 16
   \   000003   E0           MOVX      A,@DPTR
   \   000004   8E82         MOV       DPL,R6
   \   000006   8F83         MOV       DPH,R7
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   F0           MOVX      @DPTR,A
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005                ; Setup parameters for call to function osal_memcmp
   \   000005                ; Setup parameters for call to function osal_memcmp
   \   000005   8882         MOV       DPL,R0
   \   000007   F583         MOV       DPH,A
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A982         MOV       R1,DPL
   \   00000D   AA83         MOV       R2,DPH
   \   00000F   89..         MOV       ?V4,R1
   \   000011   8A..         MOV       ?V5,R2
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   240B         ADD       A,#0xb
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004                REQUIRE ??Subroutine48_0
   \   000004                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7409         MOV       A,#0x9
   \   000002                REQUIRE ??Subroutine49_0
   \   000002                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine50_0
   \   000003                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   7F07         MOV       R7,#0x7
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   7C08         MOV       R4,#0x8
   \   000002   7D00         MOV       R5,#0x0
   \   000004   85..82       MOV       DPL,?V0
   \   000007   85..83       MOV       DPH,?V1
   \   00000A                REQUIRE ??Subroutine51_0
   \   00000A                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   A982         MOV       R1,DPL
   \   000002   AA83         MOV       R2,DPH
   \   000004   7B00         MOV       R3,#0x0
   \   000006   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000009   7403         MOV       A,#0x3
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   7C09         MOV       R4,#0x9
   \   000002   7B00         MOV       R3,#0x0
   \   000004   7A09         MOV       R2,#0x9
   \   000006                REQUIRE ??Subroutine58_0
   \   000006                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   90....       MOV       DPTR,#bdb_TaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
   \   000008   7402         MOV       A,#0x2
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine61_0
   \   000002                ; // Fall through to label ??Subroutine61_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   49           ORL       A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine70_0:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   EA           MOV       A,R2
   \   000006   49           ORL       A,R1
   \   000007   22           RET
    588          
    589          /****************************************************************************
    590           * @fn          bdb_TCProcessJoiningList
    591           *
    592           * @brief       Process the timer to handle the joining devices if the TC link 
    593           *              key is mandatory for all devices
    594           *
    595           * @param       none
    596           *
    597           * @return      none
    598           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    599          void bdb_TCProcessJoiningList(void)
   \                     bdb_TCProcessJoiningList:
    600          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 42
   \   000005   74D6         MOV       A,#-0x2a
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    601            bdb_joiningDeviceList_t* tempJoiningDescNode;
    602            
    603            if(bdb_joiningDeviceList)
   \   00000A   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   00000D   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000010   7003         JNZ       $+5
   \   000012   02....       LJMP      ??bdb_TCProcessJoiningList_0 & 0xFFFF
    604            {
    605              tempJoiningDescNode = bdb_joiningDeviceList;
   \   000015   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000018   12....       LCALL     ?Subroutine43 & 0xFFFF
    606            
    607              while(tempJoiningDescNode)
    608              {
    609                if(tempJoiningDescNode->NodeJoinTimeout)
   \                     ??CrossCallReturnLabel_68:
   \   00001B   85..82       MOV       DPL,?V0
   \   00001E   85..83       MOV       DPH,?V1
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   6013         JZ        ??bdb_TCProcessJoiningList_1
    610                {
    611                  tempJoiningDescNode->NodeJoinTimeout--;
   \   00002E   E5..         MOV       A,?V0
   \   000030   240A         ADD       A,#0xa
   \   000032   F582         MOV       DPL,A
   \   000034   E4           CLR       A
   \   000035   35..         ADDC      A,?V1
   \   000037   F583         MOV       DPH,A
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   14           DEC       A
   \   00003B   F0           MOVX      @DPTR,A
    612                }
    613                
    614                if(tempJoiningDescNode->NodeJoinTimeout == 0)
   \   00003C   6003         JZ        $+5
   \   00003E   02....       LJMP      ??bdb_TCProcessJoiningList_2 & 0xFFFF
    615                {
    616                  //Check if the key exchange is required 
    617                  if(bdb_doTrustCenterRequireKeyExchange())
   \                     ??bdb_TCProcessJoiningList_1:
   \   000041   90....       MOV       DPTR,#bdbAttributes + 17
   \   000044   E0           MOVX      A,@DPTR
   \   000045   605A         JZ        ??bdb_TCProcessJoiningList_3
    618                  {
    619                      AddrMgrEntry_t entry;
    620                      
    621                      entry.user = ADDRMGR_USER_DEFAULT;
   \   000047   740A         MOV       A,#0xa
   \   000049   12....       LCALL     ?XSTACK_DISP0_8
   \   00004C   E4           CLR       A
   \   00004D   F0           MOVX      @DPTR,A
    622                      osal_memcpy(entry.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
   \   00004E                ; Setup parameters for call to function osal_memcpy
   \   00004E   85..82       MOV       DPL,?V0
   \   000051   85..83       MOV       DPH,?V1
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A982         MOV       R1,DPL
   \   000058   AA83         MOV       R2,DPH
   \   00005A   89..         MOV       ?V4,R1
   \   00005C   8A..         MOV       ?V5,R2
   \   00005E   F5..         MOV       ?V6,A
   \   000060   78..         MOV       R0,#?V4
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000065   7C08         MOV       R4,#0x8
   \   000067   7D00         MOV       R5,#0x0
   \   000069   7410         MOV       A,#0x10
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
    623                      
    624                      if(AddrMgrEntryLookupExt(&entry))
   \   000074                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000074   740A         MOV       A,#0xa
   \   000076   12....       LCALL     ?XSTACK_DISP101_8
   \   000079   12....       LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   00007C   E9           MOV       A,R1
   \   00007D   6022         JZ        ??bdb_TCProcessJoiningList_3
    625                      {
    626                        ZDSecMgrAPSRemove(entry.nwkAddr,entry.extAddr,tempJoiningDescNode->parentAddr);
   \   00007F                ; Setup parameters for call to function ZDSecMgrAPSRemove
   \   00007F   85..82       MOV       DPL,?V0
   \   000082   85..83       MOV       DPH,?V1
   \   000085   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000088   740F         MOV       A,#0xf
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   AC82         MOV       R4,DPL
   \   00008F   AD83         MOV       R5,DPH
   \   000091   740D         MOV       A,#0xd
   \   000093   12....       LCALL     ?XSTACK_DISP0_8
   \   000096   12....       LCALL     ??Subroutine71_0 & 0xFFFF
    627                      }
    628                  }
   \                     ??CrossCallReturnLabel_167:
   \   000099   12....       LCALL     `??ZDSecMgrAPSRemove::?relay`; Banked call to: ZDSecMgrAPSRemove
   \   00009C   7402         MOV       A,#0x2
   \   00009E   12....       LCALL     ?DEALLOC_XSTACK8
    629                  
    630                  //Expired device either is legacy device not using the TCLK entry or got 
    631                  //removed from the network because of timeout, eitherway it is not using
    632                  //TCLK entry neither the Security user in the address manager, so free the entry
    633                  //in both tables.
    634                  
    635                  uint16 keyNvIndex;
    636                  uint16 index;        
    637                  APSME_TCLKDevEntry_t TCLKDevEntry;
    638                  uint8 found;
    639                  
    640                  //Remove the entry in address manager
    641                  ZDSecMgrAddrClear(tempJoiningDescNode->bdbJoiningNodeEui64);
   \                     ??bdb_TCProcessJoiningList_3:
   \   0000A1   E5..         MOV       A,?V0
   \   0000A3   2402         ADD       A,#0x2
   \   0000A5   FE           MOV       R6,A
   \   0000A6   E4           CLR       A
   \   0000A7   35..         ADDC      A,?V1
   \   0000A9   FF           MOV       R7,A
   \   0000AA                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   0000AA   EE           MOV       A,R6
   \   0000AB   FA           MOV       R2,A
   \   0000AC   EF           MOV       A,R7
   \   0000AD   FB           MOV       R3,A
   \   0000AE   12....       LCALL     `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
    642                  
    643                  //search for the entry in the TCLK table
    644                  keyNvIndex = APSME_SearchTCLinkKeyEntry(tempJoiningDescNode->bdbJoiningNodeEui64,&found, NULL);
   \   0000B1                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   0000B1   E4           CLR       A
   \   0000B2   F5..         MOV       ?V2,A
   \   0000B4   F5..         MOV       ?V3,A
   \   0000B6   78..         MOV       R0,#?V2
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BB   7402         MOV       A,#0x2
   \   0000BD   12....       LCALL     ?XSTACK_DISP102_8
   \   0000C0   EE           MOV       A,R6
   \   0000C1   FA           MOV       R2,A
   \   0000C2   EF           MOV       A,R7
   \   0000C3   FB           MOV       R3,A
   \   0000C4   12....       LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
   \   0000C7   7402         MOV       A,#0x2
   \   0000C9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000CC   8A..         MOV       ?V2,R2
   \   0000CE   8B..         MOV       ?V3,R3
   \   0000D0   AE..         MOV       R6,?V2
   \   0000D2   AF..         MOV       R7,?V3
    645                  
    646                  //If found, erase it.
    647                  if(found == TRUE)
   \   0000D4   85..82       MOV       DPL,?XSP + 0
   \   0000D7   85..83       MOV       DPH,?XSP + 1
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   6401         XRL       A,#0x1
   \   0000DD   706E         JNZ       ??bdb_TCProcessJoiningList_4
    648                  {
    649                    osal_memset(&TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
   \   0000DF                ; Setup parameters for call to function osal_memset
   \   0000DF   7C13         MOV       R4,#0x13
   \   0000E1   7D00         MOV       R5,#0x0
   \   0000E3   7900         MOV       R1,#0x0
   \   0000E5   7417         MOV       A,#0x17
   \   0000E7   12....       LCALL     ?XSTACK_DISP101_8
   \   0000EA   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    650                    TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
   \   0000ED   7427         MOV       A,#0x27
   \   0000EF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F2   74FF         MOV       A,#-0x1
   \   0000F4   F0           MOVX      @DPTR,A
    651                    
    652                    //Increase the shift by one. Validate the maximum shift of the seed which is 15
    653                    index = keyNvIndex - ZCD_NV_TCLK_TABLE_START;
   \   0000F5   EE           MOV       A,R6
   \   0000F6   24EF         ADD       A,#-0x11
   \   0000F8   F8           MOV       R0,A
   \   0000F9   EF           MOV       A,R7
   \   0000FA   34FE         ADDC      A,#-0x2
   \   0000FC   F9           MOV       R1,A
    654                    
    655                    TCLinkKeyFrmCntr[index].rxFrmCntr = 0;
   \   0000FD   E8           MOV       A,R0
   \   0000FE   75..09       MOV       ?B,#0x9
   \   000101   A4           MUL       AB
   \   000102   F8           MOV       R0,A
   \   000103   AA..         MOV       R2,?B
   \   000105   75..09       MOV       ?B,#0x9
   \   000108   E9           MOV       A,R1
   \   000109   A4           MUL       AB
   \   00010A   2A           ADD       A,R2
   \   00010B   F9           MOV       R1,A
   \   00010C   74..         MOV       A,#TCLinkKeyFrmCntr & 0xff
   \   00010E   28           ADD       A,R0
   \   00010F   F8           MOV       R0,A
   \   000110   74..         MOV       A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   000112   39           ADDC      A,R1
   \   000113   F9           MOV       R1,A
   \   000114   8882         MOV       DPL,R0
   \   000116   F583         MOV       DPH,A
   \   000118   A3           INC       DPTR
   \   000119   A3           INC       DPTR
   \   00011A   A3           INC       DPTR
   \   00011B   A3           INC       DPTR
   \   00011C   12....       LCALL     ?Subroutine9 & 0xFFFF
    656                    TCLinkKeyFrmCntr[index].txFrmCntr = 0;
   \                     ??CrossCallReturnLabel_98:
   \   00011F   8882         MOV       DPL,R0
   \   000121   8983         MOV       DPH,R1
   \   000123   12....       LCALL     ??Subroutine52_0 & 0xFFFF
    657                    
    658                    //Update the entry
    659                    osal_nv_write(keyNvIndex,0,sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
   \                     ??CrossCallReturnLabel_96:
   \   000126                ; Setup parameters for call to function osal_nv_write
   \   000126   7417         MOV       A,#0x17
   \   000128   12....       LCALL     ?XSTACK_DISP100_8
   \   00012B   88..         MOV       ?V2,R0
   \   00012D   89..         MOV       ?V3,R1
   \   00012F   78..         MOV       R0,#?V2
   \   000131   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000134   75..13       MOV       ?V2,#0x13
   \   000137   75..00       MOV       ?V3,#0x0
   \   00013A   78..         MOV       R0,#?V2
   \   00013C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00013F   7C00         MOV       R4,#0x0
   \   000141   7D00         MOV       R5,#0x0
   \   000143   EE           MOV       A,R6
   \   000144   FA           MOV       R2,A
   \   000145   EF           MOV       A,R7
   \   000146   FB           MOV       R3,A
   \   000147   12....       LCALL     ??Subroutine67_0 & 0xFFFF
    660                  }
   \                     ??CrossCallReturnLabel_161:
   \   00014A   12....       LCALL     ?DEALLOC_XSTACK8
    661                  
    662                  if(pfnTCLinkKeyExchangeProcessCB)
   \                     ??bdb_TCProcessJoiningList_4:
   \   00014D   90....       MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
   \   000150   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000153   6042         JZ        ??bdb_TCProcessJoiningList_5
    663                  {
    664                    bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
    665                    osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
   \   000155                ; Setup parameters for call to function osal_memcpy
   \   000155   85..82       MOV       DPL,?V0
   \   000158   85..83       MOV       DPH,?V1
   \   00015B   A3           INC       DPTR
   \   00015C   A3           INC       DPTR
   \   00015D   A982         MOV       R1,DPL
   \   00015F   AA83         MOV       R2,DPH
   \   000161   89..         MOV       ?V4,R1
   \   000163   8A..         MOV       ?V5,R2
   \   000165   75..00       MOV       ?V6,#0x0
   \   000168   78..         MOV       R0,#?V4
   \   00016A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00016D   7C08         MOV       R4,#0x8
   \   00016F   7D00         MOV       R5,#0x0
   \   000171   7405         MOV       A,#0x5
   \   000173   12....       LCALL     ?XSTACK_DISP0_8
   \   000176   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000179   12....       LCALL     ?DEALLOC_XSTACK8
    666                    bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_EXCH_FAIL;
   \   00017C   7401         MOV       A,#0x1
   \   00017E   12....       LCALL     ?XSTACK_DISP0_8
   \   000181   7402         MOV       A,#0x2
   \   000183   F0           MOVX      @DPTR,A
    667                    
    668                    bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
   \   000184                ; Setup parameters for call to function bdb_SendMsg
   \   000184   14           DEC       A
   \   000185   12....       LCALL     ?XSTACK_DISP100_8
   \   000188   88..         MOV       ?V2,R0
   \   00018A   89..         MOV       ?V3,R1
   \   00018C   78..         MOV       R0,#?V2
   \   00018E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000191   12....       LCALL     ?Subroutine19 & 0xFFFF
    669                  }
   \                     ??CrossCallReturnLabel_110:
   \   000194   12....       LCALL     ?DEALLOC_XSTACK8
    670                 
    671                  //Free the device from the list
    672                  bdb_TCJoiningDeviceFree(tempJoiningDescNode);
   \                     ??bdb_TCProcessJoiningList_5:
   \   000197                ; Setup parameters for call to function bdb_TCJoiningDeviceFree
   \   000197   AA..         MOV       R2,?V0
   \   000199   AB..         MOV       R3,?V1
   \   00019B   12....       LCALL     `??bdb_TCJoiningDeviceFree::?relay`; Banked call to: bdb_TCJoiningDeviceFree
    673                }
    674                tempJoiningDescNode = tempJoiningDescNode->nextDev;
   \                     ??bdb_TCProcessJoiningList_2:
   \   00019E   E5..         MOV       A,?V0
   \   0001A0   12....       LCALL     ?Subroutine46 & 0xFFFF
    675              }
    676            }
   \                     ??CrossCallReturnLabel_83:
   \   0001A3   35..         ADDC      A,?V1
   \   0001A5   F583         MOV       DPH,A
   \   0001A7   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   0001AA   6003         JZ        $+5
   \   0001AC   02....       LJMP      ??CrossCallReturnLabel_68 & 0xFFFF
    677          
    678            //we are done with the list
    679            if(bdb_joiningDeviceList == NULL)
   \   0001AF   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   0001B2   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   0001B5   7007         JNZ       ??CrossCallReturnLabel_153
    680            {
    681              osal_stop_timerEx(bdb_TaskID,BDB_TC_JOIN_TIMEOUT);
   \                     ??bdb_TCProcessJoiningList_0:
   \   0001B7                ; Setup parameters for call to function osal_stop_timerEx
   \   0001B7   7A00         MOV       R2,#0x0
   \   0001B9   7B08         MOV       R3,#0x8
   \   0001BB   12....       LCALL     ??Subroutine62_0 & 0xFFFF
    682            }
    683          }
   \                     ??CrossCallReturnLabel_153:
   \   0001BE   742A         MOV       A,#0x2a
   \   0001C0   80..         SJMP      ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E4           CLR       A
   \   000001                REQUIRE ??Subroutine52_0
   \   000001                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   F0           MOVX      @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine62_0:
   \   000000   90....       MOV       DPTR,#bdb_TaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine67_0:
   \   000000   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine71_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000003   E5..         MOV       A,?V0
   \   000005   45..         ORL       A,?V1
   \   000007   22           RET
    684          
    685          
    686          
    687          /****************************************************************************
    688           * @fn          bdb_TCjoiningDeviceComplete
    689           *
    690           * @brief       This function frees a joining device from the list that has 
    691           *              finished TC link key exchange process
    692           *
    693           * @param       JoiningExtAddr - Extended address of the device
    694           *
    695           * @return      none
    696           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    697          void bdb_TCjoiningDeviceComplete(uint8* JoiningExtAddr)
   \                     bdb_TCjoiningDeviceComplete:
    698          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
    699            bdb_joiningDeviceList_t* tempJoiningDescNode;
    700            
    701            if((bdb_joiningDeviceList != NULL) && (JoiningExtAddr != NULL))
   \   00000E   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000011   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000014   7003         JNZ       $+5
   \   000016   02....       LJMP      ??CrossCallReturnLabel_154 & 0xFFFF
   \   000019   EA           MOV       A,R2
   \   00001A   4B           ORL       A,R3
   \   00001B   7003         JNZ       $+5
   \   00001D   02....       LJMP      ??CrossCallReturnLabel_154 & 0xFFFF
    702            {
    703              tempJoiningDescNode = bdb_joiningDeviceList;
   \   000020   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000023   12....       LCALL     ?Subroutine31 & 0xFFFF
    704              
    705              while(tempJoiningDescNode != NULL)
    706              {
    707                if(osal_memcmp(tempJoiningDescNode->bdbJoiningNodeEui64,JoiningExtAddr,Z_EXTADDR_LEN))
   \                     ??CrossCallReturnLabel_48:
   \   000026                ; Setup parameters for call to function osal_memcmp
   \   000026   85....       MOV       ?V4,?V0
   \   000029   85....       MOV       ?V5,?V1
   \   00002C   75..00       MOV       ?V6,#0x0
   \   00002F   78..         MOV       R0,#?V4
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000034   7C08         MOV       R4,#0x8
   \   000036   7D00         MOV       R5,#0x0
   \   000038   8E82         MOV       DPL,R6
   \   00003A   8F83         MOV       DPH,R7
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000041   12....       LCALL     ?DEALLOC_XSTACK8
   \   000044   E9           MOV       A,R1
   \   000045   6042         JZ        ??bdb_TCjoiningDeviceComplete_0
    708                {
    709                  if(pfnTCLinkKeyExchangeProcessCB)
   \   000047   90....       MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
   \   00004A   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   00004D   6031         JZ        ??bdb_TCjoiningDeviceComplete_1
    710                  {
    711                    bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
    712                    osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
   \   00004F                ; Setup parameters for call to function osal_memcpy
   \   00004F   8E82         MOV       DPL,R6
   \   000051   8F83         MOV       DPH,R7
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   A982         MOV       R1,DPL
   \   000057   AA83         MOV       R2,DPH
   \   000059   89..         MOV       ?V0,R1
   \   00005B   8A..         MOV       ?V1,R2
   \   00005D   75..00       MOV       ?V2,#0x0
   \   000060   78..         MOV       R0,#?V0
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000065   7C08         MOV       R4,#0x8
   \   000067   7D00         MOV       R5,#0x0
   \   000069   7404         MOV       A,#0x4
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
    713                    bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_EXCH_SUCCESS;
   \   000074   12....       LCALL     ?Subroutine11 & 0xFFFF
    714                    
    715                    bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
    716                  }        
   \                     ??CrossCallReturnLabel_9:
   \   000077   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007A   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   00007D   12....       LCALL     ?DEALLOC_XSTACK8
    717                  
    718                  bdb_TCJoiningDeviceFree(tempJoiningDescNode);
   \                     ??bdb_TCjoiningDeviceComplete_1:
   \   000080                ; Setup parameters for call to function bdb_TCJoiningDeviceFree
   \   000080   EE           MOV       A,R6
   \   000081   FA           MOV       R2,A
   \   000082   EF           MOV       A,R7
   \   000083   FB           MOV       R3,A
   \   000084   12....       LCALL     `??bdb_TCJoiningDeviceFree::?relay`; Banked call to: bdb_TCJoiningDeviceFree
    719                  break;
   \   000087   8008         SJMP      ??bdb_TCjoiningDeviceComplete_2
    720                }
    721                tempJoiningDescNode = tempJoiningDescNode->nextDev;
   \                     ??bdb_TCjoiningDeviceComplete_0:
   \   000089   12....       LCALL     ?Subroutine34 & 0xFFFF
    722              }
   \                     ??CrossCallReturnLabel_79:
   \   00008C   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00008F   7095         JNZ       ??CrossCallReturnLabel_48
    723             
    724              if(bdb_joiningDeviceList == NULL)
   \                     ??bdb_TCjoiningDeviceComplete_2:
   \   000091   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000094   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000097   7007         JNZ       ??CrossCallReturnLabel_154
    725              {
    726                osal_stop_timerEx(bdb_TaskID,BDB_TC_JOIN_TIMEOUT);
   \   000099                ; Setup parameters for call to function osal_stop_timerEx
   \   000099   7A00         MOV       R2,#0x0
   \   00009B   7B08         MOV       R3,#0x8
   \   00009D   12....       LCALL     ??Subroutine62_0 & 0xFFFF
    727              }
    728            }
    729          }
   \                     ??CrossCallReturnLabel_154:
   \   0000A0   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   EE           MOV       A,R6
   \   000006   4F           ORL       A,R7
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   7401         MOV       A,#0x1
   \   000008   F0           MOVX      @DPTR,A
   \   000009                ; Setup parameters for call to function bdb_SendMsg
   \   000009                ; Setup parameters for call to function bdb_SendMsg
   \   000009   A8..         MOV       R0,?XSP + 0
   \   00000B   A9..         MOV       R1,?XSP + 1
   \   00000D   88..         MOV       ?V0,R0
   \   00000F   89..         MOV       ?V1,R1
   \   000011   78..         MOV       R0,#?V0
   \   000013   22           RET
    730          
    731          
    732          
    733          /****************************************************************************
    734           * @fn          bdb_TCJoiningDeviceFree
    735           *
    736           * @brief       This function frees a joining device from the list.
    737           *
    738           * @param       ZSuccess - If the device was found and erased
    739           * @param       ZInvalidParameter - Not found
    740           *
    741           * @return      none
    742           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    743          ZStatus_t bdb_TCJoiningDeviceFree(bdb_joiningDeviceList_t* JoiningDeviceToRemove)
   \                     bdb_TCJoiningDeviceFree:
    744          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    745            bdb_joiningDeviceList_t* descCurrent;
    746            bdb_joiningDeviceList_t* descPrev;
    747            
    748            //validate empty list?
    749            
    750            //Is it the first?
    751            if(osal_memcmp(bdb_joiningDeviceList->bdbJoiningNodeEui64, JoiningDeviceToRemove->bdbJoiningNodeEui64, Z_EXTADDR_LEN))
   \   000009                ; Setup parameters for call to function osal_memcmp
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A982         MOV       R1,DPL
   \   000011   AA83         MOV       R2,DPH
   \   000013   89..         MOV       ?V4,R1
   \   000015   8A..         MOV       ?V5,R2
   \   000017   75..00       MOV       ?V6,#0x0
   \   00001A   78..         MOV       R0,#?V4
   \   00001C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00001F   7C08         MOV       R4,#0x8
   \   000021   7D00         MOV       R5,#0x0
   \   000023   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000026   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000029   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002C   E9           MOV       A,R1
   \   00002D   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000030   601E         JZ        ??CrossCallReturnLabel_80
    752            {
    753              descCurrent = bdb_joiningDeviceList;
   \   000032   12....       LCALL     ?Subroutine31 & 0xFFFF
    754              bdb_joiningDeviceList = bdb_joiningDeviceList->nextDev;
   \                     ??CrossCallReturnLabel_49:
   \   000035   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000038   E0           MOVX      A,@DPTR
   \   000039   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00003C   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00003F   90....       MOV       DPTR,#bdb_joiningDeviceList
   \   000042   E8           MOV       A,R0
   \   000043   F0           MOVX      @DPTR,A
   \   000044   A3           INC       DPTR
   \   000045   E9           MOV       A,R1
   \   000046   F0           MOVX      @DPTR,A
    755              osal_mem_free( descCurrent );
   \   000047                ; Setup parameters for call to function osal_mem_free
   \   000047   EE           MOV       A,R6
   \   000048   FA           MOV       R2,A
   \   000049   EF           MOV       A,R7
   \   00004A   FB           MOV       R3,A
   \   00004B   803F         SJMP      ??bdb_TCJoiningDeviceFree_0
    756              return ZSuccess;
    757            }
    758            
    759            descPrev = NULL;
    760            descCurrent = bdb_joiningDeviceList;
    761            
    762            while(descCurrent != NULL)
    763            {
    764              if(osal_memcmp(descCurrent->nextDev->bdbJoiningNodeEui64, JoiningDeviceToRemove->bdbJoiningNodeEui64, Z_EXTADDR_LEN))
    765              {
    766                descPrev = descCurrent;
    767                break;
    768              }
    769              descCurrent = descCurrent->nextDev;
   \                     ??bdb_TCJoiningDeviceFree_1:
   \   00004D   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000050   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000053   603E         JZ        ??bdb_TCJoiningDeviceFree_2
   \   000055                ; Setup parameters for call to function osal_memcmp
   \   000055   78..         MOV       R0,#?V4
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00005A   7C08         MOV       R4,#0x8
   \   00005C   7D00         MOV       R5,#0x0
   \   00005E   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000061   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000064   12....       LCALL     ?DEALLOC_XSTACK8
   \   000067   E9           MOV       A,R1
   \   000068   60E3         JZ        ??bdb_TCJoiningDeviceFree_1
    770            }
    771            if(descPrev == NULL)
    772            {
    773              //Not found
    774              return ZInvalidParameter;
    775            }
    776            
    777            descPrev->nextDev = descPrev->nextDev->nextDev;
   \   00006A   EE           MOV       A,R6
   \   00006B   240B         ADD       A,#0xb
   \   00006D   F8           MOV       R0,A
   \   00006E   E4           CLR       A
   \   00006F   3F           ADDC      A,R7
   \   000070   F9           MOV       R1,A
   \   000071   8882         MOV       DPL,R0
   \   000073   F583         MOV       DPH,A
   \   000075   E0           MOVX      A,@DPTR
   \   000076   FA           MOV       R2,A
   \   000077   A3           INC       DPTR
   \   000078   E0           MOVX      A,@DPTR
   \   000079   CA           XCH       A,R2
   \   00007A   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   00007D   3A           ADDC      A,R2
   \   00007E   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000081   8882         MOV       DPL,R0
   \   000083   8983         MOV       DPH,R1
   \   000085   12....       LCALL     ?Subroutine14 & 0xFFFF
    778              
    779            osal_mem_free( JoiningDeviceToRemove );
   \                     ??CrossCallReturnLabel_15:
   \   000088                ; Setup parameters for call to function osal_mem_free
   \   000088   AA..         MOV       R2,?V0
   \   00008A   AB..         MOV       R3,?V1
   \                     ??bdb_TCJoiningDeviceFree_0:
   \   00008C   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    780            return ZSuccess;
   \   00008F   7900         MOV       R1,#0x0
   \   000091   8002         SJMP      ??bdb_TCJoiningDeviceFree_3
   \                     ??bdb_TCJoiningDeviceFree_2:
   \   000093   7902         MOV       R1,#0x2
   \                     ??bdb_TCJoiningDeviceFree_3:
   \   000095   02....       LJMP      ??Subroutine50_0 & 0xFFFF
    781          
    782          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine71_0
   \   000002                ; // Fall through to label ??Subroutine71_0
    783          
    784           /*********************************************************************
    785           * @fn          bdb_setJoinUsesInstallCodeKey
    786           *
    787           * @brief       Set BDB attribute bdbJoinUsesInstallCodeKey.
    788           *
    789           * @param       set - If TRUE only devices with IC register in TC can join the 
    790           *              nwk, otherwise devices may or not have a IC register
    791           *
    792           * @return      none
    793           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    794          void bdb_setJoinUsesInstallCodeKey(bool set)
   \                     bdb_setJoinUsesInstallCodeKey:
    795          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    796            bdbAttributes.bdbJoinUsesInstallCodeKey = set;
   \   000004   E9           MOV       A,R1
   \   000005   90....       MOV       DPTR,#bdbAttributes + 15
   \   000008   F0           MOVX      @DPTR,A
    797            if(set)
   \   000009   90....       MOV       DPTR,#zgAllowInstallCodes
   \   00000C   6004         JZ        ??bdb_setJoinUsesInstallCodeKey_0
    798            {
    799              zgAllowInstallCodes = ZG_IC_MUST_USED;
   \   00000E   7402         MOV       A,#0x2
   \   000010   8002         SJMP      ??bdb_setJoinUsesInstallCodeKey_1
    800            }
    801            else
    802            {
    803              zgAllowInstallCodes = ZG_IC_SUPPORTED_NOT_REQUIRED;
   \                     ??bdb_setJoinUsesInstallCodeKey_0:
   \   000012   7401         MOV       A,#0x1
    804            }
   \                     ??bdb_setJoinUsesInstallCodeKey_1:
   \   000014   02....       LJMP      ??Subroutine53_0 & 0xFFFF
    805          }
    806          #endif
    807          
    808           /*********************************************************************
    809           * @fn          bdb_StartCommissioning
    810           *
    811           * @brief       Start the commissioning process setting the commissioning mode given.
    812           *
    813           * @param       mode - refer to bdbCommissioningMode
    814           *
    815           * @return      none
    816           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    817          void bdb_StartCommissioning(uint8 mode)
   \                     bdb_StartCommissioning:
    818          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
    819            //Application cannot request to set the device in initialization mode or parent lost
    820            mode &= ~(BDB_COMMISSIONING_MODE_INITIALIZATION | BDB_COMMISSIONING_MODE_PARENT_LOST);
    821              
    822          #ifdef BDB_TL_INITIATOR
    823            if ( touchlinkFNReset == TRUE )
    824            {
    825              return;
    826            }
    827          #else
    828            //Commissioning mode used only for initiator
    829            mode &= ~BDB_COMMISSIONING_MODE_INITIATOR_TL;
    830          #endif
    831            
    832          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==0)    
    833            //Commissioning mode used only for devices with F&B
    834            mode &= ~BDB_COMMISSIONING_MODE_FINDING_BINDING;
   \   00000C   53..C6       ANL       ?V0,#0xc6
    835          #endif
    836           
    837            //If we have running process or the machine state is triggered, then just append and it will be excecuted
    838            if((bdbAttributes.bdbCommissioningMode) || (osal_get_timeoutEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE)))
   \   00000F   90....       MOV       DPTR,#bdbAttributes + 11
   \   000012   E0           MOVX      A,@DPTR
   \   000013   7012         JNZ       ??bdb_StartCommissioning_0
   \   000015                ; Setup parameters for call to function osal_get_timeoutEx
   \   000015   7A04         MOV       R2,#0x4
   \   000017   7B00         MOV       R3,#0x0
   \   000019   90....       MOV       DPTR,#bdb_TaskID
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F9           MOV       R1,A
   \   00001E   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000021   EA           MOV       A,R2
   \   000022   4B           ORL       A,R3
   \   000023   4C           ORL       A,R4
   \   000024   4D           ORL       A,R5
   \   000025   602B         JZ        ??bdb_StartCommissioning_1
    839            {
    840          #if ZG_BUILD_ENDDEVICE_TYPE
    841              if(ZG_DEVICE_ENDDEVICE_TYPE)
   \                     ??bdb_StartCommissioning_0:
   \   000027   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   6402         XRL       A,#0x2
   \   00002D   700B         JNZ       ??bdb_StartCommissioning_2
    842              {
    843                //Devices with parent lost are not allowed to perform actions
    844                if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)
   \   00002F   90....       MOV       DPTR,#bdbAttributes + 11
   \   000032   E0           MOVX      A,@DPTR
   \   000033   A2E5         MOV       C,0xE0 /* A   */.5
   \   000035   5003         JNC       $+5
   \   000037   02....       LJMP      ??bdb_StartCommissioning_3 & 0xFFFF
    845                {
    846                  return;
    847                }
    848              }
    849          #endif
    850              
    851              //If we are on the network and got requested to do nwk steering, we do not need to wait other process, 
    852              // just send permit joining and report the application
    853              if((bdbAttributes.bdbNodeIsOnANetwork) && (mode & BDB_COMMISSIONING_MODE_NWK_STEERING))
   \                     ??bdb_StartCommissioning_2:
   \   00003A   90....       MOV       DPTR,#bdbAttributes + 14
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   600C         JZ        ??bdb_StartCommissioning_4
   \   000040   E5..         MOV       A,?V0
   \   000042   A2E1         MOV       C,0xE0 /* A   */.1
   \   000044   5006         JNC       ??bdb_StartCommissioning_4
    854              {
    855                bdb_nwkSteeringDeviceOnNwk();
   \   000046                ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
   \   000046   12....       LCALL     ?Subroutine38 & 0xFFFF
    856                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
    857                
    858                //Clean nwk steering
    859                mode ^= BDB_COMMISSIONING_MODE_NWK_STEERING; 
   \                     ??CrossCallReturnLabel_59:
   \   000049   63..02       XRL       ?V0,#0x2
    860              }
    861              
    862              //add the remaining valid commissioning modes requested, those will be process when bdb finish its current process
    863              bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
   \                     ??bdb_StartCommissioning_4:
   \   00004C   12....       LCALL     ?Subroutine39 & 0xFFFF
    864              return;      
   \                     ??CrossCallReturnLabel_62:
   \   00004F   02....       LJMP      ??bdb_StartCommissioning_3 & 0xFFFF
    865            }
    866          
    867            //Save the commissioning modes valid requested
    868            bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
   \                     ??bdb_StartCommissioning_1:
   \   000052   12....       LCALL     ?Subroutine39 & 0xFFFF
    869            
    870            
    871            //Start processing the initialization, once per power cycle.
    872            if(!bdb_initialization)
   \                     ??CrossCallReturnLabel_63:
   \   000055   90....       MOV       DPTR,#bdb_initialization
   \   000058   E0           MOVX      A,@DPTR
   \   000059   6003         JZ        $+5
   \   00005B   02....       LJMP      ??bdb_StartCommissioning_5 & 0xFFFF
    873            {
    874              bdb_initialization = TRUE;
   \   00005E   7401         MOV       A,#0x1
   \   000060   12....       LCALL     ?Subroutine16 & 0xFFFF
    875              
    876          #ifdef BDB_REPORTING
    877              //Delete NV data if startup was with factory reset
    878              if(ZDO_INITDEV_NEW_NETWORK_STATE == ZDApp_ReadNetworkRestoreState())
    879              {
    880                //Factory reset bdb reporting NV data
    881                uint16 attrRepNvLen = osal_nv_item_len( ZCD_NV_BDBREPORTINGCONFIG );
    882                if ( attrRepNvLen > 0 )
    883                {
    884                  osal_nv_delete( ZCD_NV_BDBREPORTINGCONFIG, attrRepNvLen );
    885                }
    886              }
    887          
    888              //Construct the Endpoint-cluster array
    889              bdb_RepConstructReportingData();
    890          #endif //BDB_REPORTING
    891              
    892              osal_nv_read(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
   \                     ??CrossCallReturnLabel_23:
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000066   75..01       MOV       ?V2,#0x1
   \   000069   75..00       MOV       ?V3,#0x0
   \   00006C   78..         MOV       R0,#?V2
   \   00006E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000071   7C00         MOV       R4,#0x0
   \   000073   7D00         MOV       R5,#0x0
   \   000075   7A55         MOV       R2,#0x55
   \   000077   7B00         MOV       R3,#0x0
   \   000079   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00007C   7404         MOV       A,#0x4
   \   00007E   12....       LCALL     ?DEALLOC_XSTACK8
    893              
    894              //Are we on a network
    895              if(bdbAttributes.bdbNodeIsOnANetwork == TRUE)
   \   000081   90....       MOV       DPTR,#bdbAttributes + 14
   \   000084   E0           MOVX      A,@DPTR
   \   000085   6401         XRL       A,#0x1
   \   000087   6003         JZ        $+5
   \   000089   02....       LJMP      ??bdb_StartCommissioning_5 & 0xFFFF
    896              {
    897          #ifdef ZG_BUILD_JOINING_TYPE
    898                //Only for joining devices validate the joining procedure
    899                if(ZG_DEVICE_JOINING_TYPE)
   \   00008C   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   6401         XRL       A,#0x1
   \   000092   6008         JZ        ??bdb_StartCommissioning_6
   \   000094   E0           MOVX      A,@DPTR
   \   000095   6402         XRL       A,#0x2
   \   000097   6003         JZ        $+5
   \   000099   02....       LJMP      ??bdb_StartCommissioning_7 & 0xFFFF
    900                {
    901                  //If we got into a network
    902                  if(!osal_isbufset( AIB_apsTrustCenterAddress, 0x00, Z_EXTADDR_LEN ))
   \                     ??bdb_StartCommissioning_6:
   \   00009C                ; Setup parameters for call to function osal_isbufset
   \   00009C   7C08         MOV       R4,#0x8
   \   00009E   7900         MOV       R1,#0x0
   \   0000A0   90....       MOV       DPTR,#AIB_apsTrustCenterAddress
   \   0000A3   12....       LCALL     ??Subroutine71_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   0000A6   12....       LCALL     `??osal_isbufset::?relay`; Banked call to: osal_isbufset
   \   0000A9   E9           MOV       A,R1
   \   0000AA   6003         JZ        $+5
   \   0000AC   02....       LJMP      ??bdb_StartCommissioning_7 & 0xFFFF
    903                  {
    904                    //Which is not distributed
    905                    if(!APSME_IsDistributedSecurity())
   \   0000AF                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   0000AF   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   0000B2   E9           MOV       A,R1
   \   0000B3   6003         JZ        $+5
   \   0000B5   02....       LJMP      ??bdb_StartCommissioning_7 & 0xFFFF
    906                    {
    907                      uint8 keyAttributes;
    908                      osal_nv_read(ZCD_NV_TCLK_TABLE_START, osal_offsetof(APSME_TCLKDevEntry_t,keyAttributes), sizeof(uint8), &keyAttributes);
   \   0000B8                ; Setup parameters for call to function osal_nv_read
   \   0000B8   A8..         MOV       R0,?XSP + 0
   \   0000BA   A9..         MOV       R1,?XSP + 1
   \   0000BC   88..         MOV       ?V2,R0
   \   0000BE   89..         MOV       ?V3,R1
   \   0000C0   78..         MOV       R0,#?V2
   \   0000C2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C5   75..01       MOV       ?V2,#0x1
   \   0000C8   75..00       MOV       ?V3,#0x0
   \   0000CB   78..         MOV       R0,#?V2
   \   0000CD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D0   7C10         MOV       R4,#0x10
   \   0000D2   7D00         MOV       R5,#0x0
   \   0000D4   7A11         MOV       R2,#0x11
   \   0000D6   7B01         MOV       R3,#0x1
   \   0000D8   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000DB   7404         MOV       A,#0x4
   \   0000DD   12....       LCALL     ?DEALLOC_XSTACK8
    909                      //If we must perform the TCLK exchange and we didn't complete it, then reset to FN
    910                      if(requestNewTrustCenterLinkKey && (keyAttributes != ZG_NON_R21_NWK_JOINED) && (keyAttributes != ZG_VERIFIED_KEY))
   \   0000E0   90....       MOV       DPTR,#requestNewTrustCenterLinkKey
   \   0000E3   E0           MOVX      A,@DPTR
   \   0000E4   607A         JZ        ??bdb_StartCommissioning_7
   \   0000E6   85..82       MOV       DPL,?XSP + 0
   \   0000E9   85..83       MOV       DPH,?XSP + 1
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   64FD         XRL       A,#0xfd
   \   0000EF   606F         JZ        ??bdb_StartCommissioning_7
   \   0000F1   E0           MOVX      A,@DPTR
   \   0000F2   6402         XRL       A,#0x2
   \   0000F4   606A         JZ        ??bdb_StartCommissioning_7
    911                      {
    912                        //Force to initialize the entry
    913                        APSME_TCLKDevEntry_t APSME_TCLKDevEntry;
    914                        
    915                        osal_memset(&APSME_TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
   \   0000F6                ; Setup parameters for call to function osal_memset
   \   0000F6   7C13         MOV       R4,#0x13
   \   0000F8   7D00         MOV       R5,#0x0
   \   0000FA   7900         MOV       R1,#0x0
   \   0000FC   7401         MOV       A,#0x1
   \   0000FE   12....       LCALL     ?XSTACK_DISP101_8
   \   000101   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    916                        APSME_TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
   \   000104   7411         MOV       A,#0x11
   \   000106   12....       LCALL     ?XSTACK_DISP0_8
   \   000109   74FF         MOV       A,#-0x1
   \   00010B   F0           MOVX      @DPTR,A
    917                        osal_nv_write(ZCD_NV_TCLK_TABLE_START, 0, sizeof(APSME_TCLKDevEntry_t), &APSME_TCLKDevEntry);
   \   00010C                ; Setup parameters for call to function osal_nv_write
   \   00010C   7401         MOV       A,#0x1
   \   00010E   12....       LCALL     ?XSTACK_DISP100_8
   \   000111   88..         MOV       ?V2,R0
   \   000113   89..         MOV       ?V3,R1
   \   000115   78..         MOV       R0,#?V2
   \   000117   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00011A   75..13       MOV       ?V2,#0x13
   \   00011D   75..00       MOV       ?V3,#0x0
   \   000120   78..         MOV       R0,#?V2
   \   000122   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000125   7C00         MOV       R4,#0x0
   \   000127   7D00         MOV       R5,#0x0
   \   000129   7A11         MOV       R2,#0x11
   \   00012B   7B01         MOV       R3,#0x1
   \   00012D   12....       LCALL     ??Subroutine67_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000130   12....       LCALL     ?DEALLOC_XSTACK8
    918                        TCLinkKeyFrmCntr[0].txFrmCntr = 0;
   \   000133   90....       MOV       DPTR,#TCLinkKeyFrmCntr
   \   000136   12....       LCALL     ?Subroutine9 & 0xFFFF
    919                        TCLinkKeyFrmCntr[0].rxFrmCntr = 0;
   \                     ??CrossCallReturnLabel_99:
   \   000139   A3           INC       DPTR
   \   00013A   12....       LCALL     ??Subroutine52_0 & 0xFFFF
    920                        
    921                        
    922                        //reset the device parameters to FN
    923                        bdbAttributes.bdbNodeIsOnANetwork = FALSE;
   \                     ??CrossCallReturnLabel_97:
   \   00013D   90....       MOV       DPTR,#bdbAttributes + 14
   \   000140   12....       LCALL     ?Subroutine16 & 0xFFFF
    924                        osal_nv_write(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
   \                     ??CrossCallReturnLabel_24:
   \   000143   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000146   75..01       MOV       ?V2,#0x1
   \   000149   75..00       MOV       ?V3,#0x0
   \   00014C   78..         MOV       R0,#?V2
   \   00014E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000151   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000154   12....       LCALL     ?DEALLOC_XSTACK8
    925                        zgWriteStartupOptions(ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
   \   000157                ; Setup parameters for call to function zgWriteStartupOptions
   \   000157   7A03         MOV       R2,#0x3
   \   000159   79FF         MOV       R1,#-0x1
   \   00015B   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    926                        
    927                        //Then start the commissioning process requested
    928                        bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   00015E   803E         SJMP      ??bdb_StartCommissioning_8
    929                        osal_set_event( bdb_TaskID, BDB_CHANGE_COMMISSIONING_STATE );
    930                        return;
    931                      }
    932                    }
    933                  }
    934                }
    935          #endif //ZG_BUILD_JOINING_TYPE
    936                
    937                //Set the initialization
    938                bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_INITIALIZATION;
    939                bdbCommissioningProcedureState.bdbCommissioningState = BDB_INITIALIZATION;
   \                     ??bdb_StartCommissioning_7:
   \   000160   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000163   7407         MOV       A,#0x7
   \   000165   F0           MOVX      @DPTR,A
    940                bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
   \   000166   743F         MOV       A,#0x3f
   \   000168   55..         ANL       A,?V0
   \   00016A   4410         ORL       A,#0x10
   \   00016C   F8           MOV       R0,A
   \   00016D   90....       MOV       DPTR,#bdbAttributes + 11
   \   000170   E0           MOVX      A,@DPTR
   \   000171   48           ORL       A,R0
   \   000172   F0           MOVX      @DPTR,A
    941                
    942                if(ZDOInitDevice(0) == ZDO_INITDEV_RESTORED_NETWORK_STATE)
   \   000173                ; Setup parameters for call to function ZDOInitDeviceEx
   \   000173   7900         MOV       R1,#0x0
   \   000175   7A00         MOV       R2,#0x0
   \   000177   7B00         MOV       R3,#0x0
   \   000179   12....       LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
   \   00017C   E9           MOV       A,R1
   \   00017D   602F         JZ        ??bdb_StartCommissioning_3
    943                {
    944          #ifdef BDB_REPORTING
    945                  //Mark the clusterEndpoint entries that have binding, starts reporting if at least one entry was marked
    946                  bdb_RepUpdateMarkBindings();
    947          #endif
    948                  return;
    949                }
    950                bdb_setNodeIsOnANetwork(FALSE);  
   \   00017F                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   00017F   7900         MOV       R1,#0x0
   \   000181   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
    951                //Not in the network
    952                bdb_reportCommissioningState(BDB_INITIALIZATION,FALSE);
   \   000184                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000184   7A00         MOV       R2,#0x0
   \   000186   7907         MOV       R1,#0x7
   \   000188   800F         SJMP      ??bdb_StartCommissioning_9
    953                return;
    954              }
    955            }
    956          
    957            //Got requested only to initialize, if so, report that it failed
    958            if(bdbAttributes.bdbCommissioningMode == 0)
   \                     ??bdb_StartCommissioning_5:
   \   00018A   90....       MOV       DPTR,#bdbAttributes + 11
   \   00018D   E0           MOVX      A,@DPTR
   \   00018E   700E         JNZ       ??bdb_StartCommissioning_8
    959            {
    960              //Set the initialization state and report it to fail
    961              bdbCommissioningProcedureState.bdbCommissioningState = BDB_INITIALIZATION;
   \   000190   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000193   7407         MOV       A,#0x7
   \   000195   F0           MOVX      @DPTR,A
    962              bdb_reportCommissioningState(BDB_INITIALIZATION,FALSE);
   \   000196                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000196   7A00         MOV       R2,#0x0
   \   000198   F9           MOV       R1,A
   \                     ??bdb_StartCommissioning_9:
   \   000199   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    963              return;
   \   00019C   8010         SJMP      ??bdb_StartCommissioning_3
    964            }
    965          
    966            
    967            //Start the commissioning process
    968            bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \                     ??bdb_StartCommissioning_8:
   \   00019E   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0001A1   E4           CLR       A
   \   0001A2   F0           MOVX      @DPTR,A
    969            osal_set_event( bdb_TaskID, BDB_CHANGE_COMMISSIONING_STATE );
   \   0001A3                ; Setup parameters for call to function osal_set_event
   \   0001A3   7A04         MOV       R2,#0x4
   \   0001A5   FB           MOV       R3,A
   \   0001A6   90....       MOV       DPTR,#bdb_TaskID
   \   0001A9   E0           MOVX      A,@DPTR
   \   0001AA   F9           MOV       R1,A
   \   0001AB   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
    970          }
   \                     ??bdb_StartCommissioning_3:
   \   0001AE   7414         MOV       A,#0x14
   \   0001B0   02....       LJMP      ??Subroutine64_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   743F         MOV       A,#0x3f
   \   000002   55..         ANL       A,?V0
   \   000004   F8           MOV       R0,A
   \   000005   90....       MOV       DPTR,#bdbAttributes + 11
   \   000008   E0           MOVX      A,@DPTR
   \   000009   48           ORL       A,R0
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_nv_read
   \   000001                ; Setup parameters for call to function osal_nv_write
   \   000001   75....       MOV       ?V2,#(bdbAttributes + 14) & 0xff
   \   000004   75....       MOV       ?V3,#((bdbAttributes + 14) >> 8) & 0xff
   \   000007   78..         MOV       R0,#?V2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL     `??bdb_nwkSteeringDeviceOnNwk::?relay`; Banked call to: bdb_nwkSteeringDeviceOnNwk
   \   000003                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000003                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000003                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000003   7A01         MOV       R2,#0x1
   \   000005   7904         MOV       R1,#0x4
   \   000007   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine64_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine65_0
   \   000003                ; // Fall through to label ??Subroutine65_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine65_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   7C00         MOV       R4,#0x0
   \   000002   7D00         MOV       R5,#0x0
   \   000004   7A55         MOV       R2,#0x55
   \   000006                REQUIRE ??Subroutine66_0
   \   000006                ; // Fall through to label ??Subroutine66_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine66_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine67_0
   \   000002                ; // Fall through to label ??Subroutine67_0
    971          
    972          
    973           /*********************************************************************
    974           * @fn          bdb_NotifyCommissioningModeStart
    975           *
    976           * @brief       Notify the user about a commissioning method just started
    977           *
    978           * @param       commissioningMode
    979           *
    980           * @return      none
    981           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    982          void bdb_NotifyCommissioningModeStart(uint8 commissioningMode)
   \                     bdb_NotifyCommissioningModeStart:
    983          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    984            bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
    985          
    986            bdbCommissioningModeMsg.bdbCommissioningMode = commissioningMode;
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   E9           MOV       A,R1
   \   000010   F0           MOVX      @DPTR,A
    987            bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_IN_PROGRESS;
   \   000011   12....       LCALL     ?Subroutine11 & 0xFFFF
    988            //Remaining commissioning modes are set just before the call to the application to avoid race conditions
    989          
    990            bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   \                     ??CrossCallReturnLabel_10:
   \   000014   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000017   7C03         MOV       R4,#0x3
   \   000019   7B00         MOV       R3,#0x0
   \   00001B   7A0A         MOV       R2,#0xa
   \   00001D   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000020   12....       LCALL     ?DEALLOC_XSTACK8
    991          }
   \   000023   7403         MOV       A,#0x3
   \   000025   02....       LJMP      ??Subroutine68_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine68_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine69_0
   \   000003                ; // Fall through to label ??Subroutine69_0
    992          
    993          
    994          
    995          #if (ZG_BUILD_JOINING_TYPE)
    996           /*********************************************************************
    997           * @fn          bdb_setNodeJoinLinkKeyType
    998           *
    999           * @brief       Set the key type in use in the network joined. Global centralized key is used by default
   1000           *
   1001           * @param       none
   1002           *
   1003           * @return      none
   1004           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1005          void bdb_setNodeJoinLinkKeyType(uint8 KeyType)
   \                     bdb_setNodeJoinLinkKeyType:
   1006          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1007            bdbAttributes.bdbNodeJoinLinkKeyType = KeyType;
   \   000004   E9           MOV       A,R1
   \   000005   90....       MOV       DPTR,#bdbAttributes + 18
   \   000008   02....       LJMP      ??Subroutine53_0 & 0xFFFF
   1008          }
   1009          #endif
   1010          
   1011           /*********************************************************************
   1012           * @fn          bdb_setFN
   1013           *
   1014           * @brief       Set configuration for FN. This FN configuration will be perfome 
   1015           *              upon call to ZDOInitDevice
   1016           *
   1017           * @param       none
   1018           *
   1019           * @return      none
   1020           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1021          void bdb_setFN(void)
   \                     bdb_setFN:
   1022          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1023            bdb_setNodeIsOnANetwork(FALSE);
   \   000004                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000004   7900         MOV       R1,#0x0
   \   000006   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
   1024          
   1025          #if defined ( INTER_PAN ) && defined ( BDB_TL_INITIATOR )
   1026              touchLink_InitFreeRanges( TRUE );
   1027              touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
   1028          #endif
   1029          #if defined ( INTER_PAN ) && defined ( BDB_TL_TARGET ) 
   1030              touchLink_InitFreeRanges( FALSE );
   1031              touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
   1032          #endif
   1033          
   1034            //Set the device as factory new
   1035            zgWriteStartupOptions(ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
   \   000009                ; Setup parameters for call to function zgWriteStartupOptions
   \   000009   7A03         MOV       R2,#0x3
   \   00000B   79FF         MOV       R1,#-0x1
   \   00000D   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   1036          }
   \   000010   02....       LJMP      ??Subroutine54_0 & 0xFFFF
   1037          
   1038           /*********************************************************************
   1039           * @fn          bdb_resetLocalAction
   1040           *
   1041           * @brief       Application interface to perform BDB Reset to FN.
   1042           *
   1043           * @param       none
   1044           *
   1045           * @return      none
   1046           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1047          void bdb_resetLocalAction(void)
   \                     bdb_resetLocalAction:
   1048          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 5
   \   000004   74FB         MOV       A,#-0x5
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   1049            //Process reset as nwk leave if the device is on the network and is able to process it
   1050            if((ZG_BUILD_JOINING_TYPE) && (bdbAttributes.bdbNodeIsOnANetwork) && (!(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)))
   \   000009   90....       MOV       DPTR,#bdbAttributes + 14
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6021         JZ        ??bdb_resetLocalAction_0
   \   00000F   90....       MOV       DPTR,#bdbAttributes + 11
   \   000012   E0           MOVX      A,@DPTR
   \   000013   A2E5         MOV       C,0xE0 /* A   */.5
   \   000015   4019         JC        ??bdb_resetLocalAction_0
   1051            {
   1052              NLME_LeaveReq_t leaveReq;
   1053              // Set every field to 0
   1054              osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
   \   000017                ; Setup parameters for call to function osal_memset
   \   000017   7C05         MOV       R4,#0x5
   \   000019   7D00         MOV       R5,#0x0
   \   00001B   7900         MOV       R1,#0x0
   \   00001D   AA..         MOV       R2,?XSP + 0
   \   00001F   AB..         MOV       R3,?XSP + 1
   \   000021   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1055              
   1056              bdb_setFN();
   \   000024                ; Setup parameters for call to function bdb_setFN
   \   000024   12....       LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
   1057                
   1058              NLME_LeaveReq( &leaveReq );
   \   000027                ; Setup parameters for call to function NLME_LeaveReq
   \   000027   AA..         MOV       R2,?XSP + 0
   \   000029   AB..         MOV       R3,?XSP + 1
   \   00002B   12....       LCALL     `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   1059              
   1060              return;
   \   00002E   800A         SJMP      ??bdb_resetLocalAction_1
   1061            }
   1062            else
   1063            {
   1064              bdb_setFN();
   \                     ??bdb_resetLocalAction_0:
   \   000030                ; Setup parameters for call to function bdb_setFN
   \   000030   12....       LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
   1065              
   1066              ZDApp_ResetTimerStart( 500 );
   \   000033                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000033   7AF4         MOV       R2,#-0xc
   \   000035   7B01         MOV       R3,#0x1
   \   000037   12....       LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   1067            }
   1068          }
   \                     ??bdb_resetLocalAction_1:
   \   00003A   7405         MOV       A,#0x5
   \   00003C   02....       LJMP      ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   02....       LJMP      ??Subroutine54_0 & 0xFFFF
   1069          
   1070          
   1071           /*********************************************************************
   1072           * @fn          bdb_parentLost
   1073           *
   1074           * @brief       Notify bdb that connection with parent is lost
   1075           *
   1076           * @return      none
   1077           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1078          void bdb_parentLost(void)
   \                     bdb_parentLost:
   1079          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV       A,#-0x1
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   1080          #if ZG_BUILD_ENDDEVICE_TYPE
   1081            if(ZG_DEVICE_ENDDEVICE_TYPE)
   \   000009   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6402         XRL       A,#0x2
   \   00000F   7047         JNZ       ??bdb_parentLost_0
   \   000011   8003         SJMP      ??CrossCallReturnLabel_31
   1082            {
   1083              while(pBDBListNwk)
   1084              {
   1085                bdb_nwkDescFree(pBDBListNwk);
   \                     ??bdb_parentLost_1:
   \   000013                ; Setup parameters for call to function bdb_nwkDescFree
   \   000013   12....       LCALL     ?Subroutine23 & 0xFFFF
   1086              }
   \                     ??CrossCallReturnLabel_31:
   \   000016   90....       MOV       DPTR,#pBDBListNwk
   \   000019   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   00001C   70F5         JNZ       ??bdb_parentLost_1
   1087              
   1088              nwk_desc_list_free();  
   \   00001E                ; Setup parameters for call to function nwk_desc_list_free
   \   00001E   12....       LCALL     `??nwk_desc_list_free::?relay`; Banked call to: nwk_desc_list_free
   1089              if(bdbCommissioningProcedureState.bdbCommissioningState != BDB_PARENT_LOST)
   \   000021   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000024   E0           MOVX      A,@DPTR
   \   000025   6408         XRL       A,#0x8
   \   000027   6010         JZ        ??bdb_parentLost_2
   1090              {
   1091                //If parent lost during TCLK exchange, then report TCLK exchange fail
   1092                if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE)
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   6401         XRL       A,#0x1
   \   00002C   7006         JNZ       ??bdb_parentLost_3
   1093                {
   1094                  bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, FALSE);
   \   00002E                ; Setup parameters for call to function bdb_reportCommissioningState
   \   00002E   7A00         MOV       R2,#0x0
   \   000030   7901         MOV       R1,#0x1
   \   000032   8021         SJMP      ??bdb_parentLost_4
   1095                  return;
   1096                }
   1097                bdbCommissioningProcedureState.bdb_ParentLostSavedState = bdbCommissioningProcedureState.bdbCommissioningState;
   \                     ??bdb_parentLost_3:
   \   000034   E0           MOVX      A,@DPTR
   \   000035   90....       MOV       DPTR,#bdbCommissioningProcedureState + 3
   \   000038   F0           MOVX      @DPTR,A
   1098                
   1099              }
   1100              bdbCommissioningProcedureState.bdbCommissioningState = BDB_PARENT_LOST;
   \                     ??bdb_parentLost_2:
   \   000039   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00003C   7408         MOV       A,#0x8
   \   00003E   F0           MOVX      @DPTR,A
   1101              NLME_OrphanStateSet();
   \   00003F                ; Setup parameters for call to function NLME_OrphanStateSet
   \   00003F   12....       LCALL     `??NLME_OrphanStateSet::?relay`; Banked call to: NLME_OrphanStateSet
   1102              ZDApp_ChangeState( DEV_NWK_ORPHAN );
   \   000042                ; Setup parameters for call to function ZDApp_ChangeState
   \   000042   790A         MOV       R1,#0xa
   \   000044   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1103              
   1104              // turn receiver off while in orphan state
   1105              byte temp = FALSE;
   \   000047   85..82       MOV       DPL,?XSP + 0
   \   00004A   85..83       MOV       DPH,?XSP + 1
   \   00004D   E4           CLR       A
   \   00004E   12....       LCALL     ?Subroutine12 & 0xFFFF
   1106              ZMacSetReq(ZMacRxOnIdle, &temp);
   1107              
   1108              bdb_reportCommissioningState(BDB_PARENT_LOST,FALSE);
   \                     ??CrossCallReturnLabel_11:
   \   000051                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000051   7A00         MOV       R2,#0x0
   \   000053   7908         MOV       R1,#0x8
   \                     ??bdb_parentLost_4:
   \   000055   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   1109            }
   1110          #endif
   1111          }
   \                     ??bdb_parentLost_0:
   \   000058   7401         MOV       A,#0x1
   \   00005A   02....       LJMP      ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   90....       MOV       DPTR,#pBDBListNwk
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FA           MOV       R2,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FB           MOV       R3,A
   \   000008   12....       LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function ZMacSetReq
   \   000001                ; Setup parameters for call to function ZMacSetReq
   \   000001                ; Setup parameters for call to function ZMacSetReq
   \   000001                ; Setup parameters for call to function ZMacSetReq
   \   000001   AA..         MOV       R2,?XSP + 0
   \   000003   AB..         MOV       R3,?XSP + 1
   \   000005   7952         MOV       R1,#0x52
   \   000007   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   00000A   22           RET
   1112          
   1113          
   1114          
   1115          
   1116          
   1117           /*********************************************************************
   1118           * @fn          bdb_NetworkRestoredResumeState
   1119           *
   1120           * @brief       Restore the state of child device after parent lost
   1121           *
   1122           * @return      none
   1123           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1124          void bdb_NetworkRestoredResumeState(void)
   \                     bdb_NetworkRestoredResumeState:
   1125          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1126          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)   
   1127          #if ZG_BUILD_ENDDEVICE_TYPE
   1128            if(ZG_DEVICE_ENDDEVICE_TYPE)
   1129            {
   1130              uint8 restoreSimpleDesc = FALSE;
   1131              //If restored when F&B still enabled, then restore the simple descriptors attempts
   1132              if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
   1133              {
   1134                bdbFindingBindingRespondent_t  *pRespondentTemp = NULL;
   1135                
   1136                pRespondentTemp = pRespondentHead;
   1137                
   1138                while(pRespondentTemp != NULL)
   1139                {
   1140                  if(pRespondentTemp->attempts & FINDING_AND_BINDING_PARENT_LOST)
   1141                  {
   1142                    pRespondentTemp->attempts &= ~FINDING_AND_BINDING_PARENT_LOST;
   1143                    restoreSimpleDesc = TRUE;
   1144                  }
   1145                  pRespondentTemp = pRespondentTemp->pNext;
   1146                }
   1147              }
   1148              if(restoreSimpleDesc)
   1149              {
   1150                //Restore the simple Descriptor sending after 1 second of restoring the network
   1151                osal_start_timerEx(bdb_TaskID,BDB_RESPONDENT_PROCESS_TIMEOUT, 1000);
   1152              }
   1153            }
   1154          #endif
   1155          #endif
   1156          }
   \   000000   02....       LJMP      ?BRET
   1157          
   1158          #if ZG_BUILD_ENDDEVICE_TYPE
   1159           /*********************************************************************
   1160           * @fn          bdb_ZedAttemptRecoverNwk
   1161           *
   1162           * @brief       Instruct the ZED to try to rejoin its previews network
   1163           *
   1164           * @return      success if the attempt is being excecuted
   1165           *              False if device do not have nwk parameters to perform this action
   1166           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1167          uint8 bdb_ZedAttemptRecoverNwk(void)
   \                     bdb_ZedAttemptRecoverNwk:
   1168          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1169            if(ZG_DEVICE_ENDDEVICE_TYPE)
   \   000004   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6402         XRL       A,#0x2
   \   00000A   701E         JNZ       ??bdb_ZedAttemptRecoverNwk_0
   1170            {
   1171              if(bdbAttributes.bdbNodeIsOnANetwork)
   \   00000C   90....       MOV       DPTR,#bdbAttributes + 14
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   6018         JZ        ??bdb_ZedAttemptRecoverNwk_0
   1172              {
   1173                if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST)
   \   000012   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000015   E0           MOVX      A,@DPTR
   \   000016   6408         XRL       A,#0x8
   \   000018   7010         JNZ       ??bdb_ZedAttemptRecoverNwk_0
   1174                {
   1175                  if(ZDOInitDevice(0) == ZDO_INITDEV_RESTORED_NETWORK_STATE)
   \   00001A                ; Setup parameters for call to function ZDOInitDeviceEx
   \   00001A   7900         MOV       R1,#0x0
   \   00001C   7A00         MOV       R2,#0x0
   \   00001E   7B00         MOV       R3,#0x0
   \   000020   12....       LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
   \   000023   E9           MOV       A,R1
   \   000024   7004         JNZ       ??bdb_ZedAttemptRecoverNwk_0
   1176                  {
   1177                    return ZSuccess;
   \   000026   7900         MOV       R1,#0x0
   \   000028   8002         SJMP      ??bdb_ZedAttemptRecoverNwk_1
   1178                  }
   1179                }
   1180              }
   1181            }
   1182            return ZFailure;
   \                     ??bdb_ZedAttemptRecoverNwk_0:
   \   00002A   7901         MOV       R1,#0x1
   \                     ??bdb_ZedAttemptRecoverNwk_1:
   \   00002C   80..         SJMP      ??Subroutine54_0
   1183          }
   1184          
   1185          #endif
   1186          
   1187           /*********************************************************************
   1188           * @fn          bdb_reportCommissioningState
   1189           *
   1190           * @brief       Process the result of a BDB main state attempt.
   1191           *
   1192           * @param       bdbCommissioningState - MainState that is issuing fail
   1193           * @param       didSuccess - TRUE if the main state were success, FALSE otherwise
   1194           *
   1195           * @return      none
   1196           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1197          void bdb_reportCommissioningState(uint8 bdbCommissioningState,bool didSuccess)
   \                     bdb_reportCommissioningState:
   1198          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EA           MOV       A,R2
   \   00000D   FF           MOV       R7,A
   1199            bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
   1200            //Process only if we are in that state, or if we are on parent lost and processing F&B
   1201            if((bdbCommissioningProcedureState.bdbCommissioningState == bdbCommissioningState)
   1202               || ((bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST) && (bdbCommissioningProcedureState.bdb_ParentLostSavedState == BDB_COMMISSIONING_STATE_FINDING_BINDING)))
   \   00000E   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000011   E0           MOVX      A,@DPTR
   \   000012   6E           XRL       A,R6
   \   000013   6013         JZ        ??bdb_reportCommissioningState_0
   \   000015   E0           MOVX      A,@DPTR
   \   000016   6408         XRL       A,#0x8
   \   000018   6003         JZ        $+5
   \   00001A   02....       LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
   \   00001D   90....       MOV       DPTR,#bdbCommissioningProcedureState + 3
   \   000020   E0           MOVX      A,@DPTR
   \   000021   6406         XRL       A,#0x6
   \   000023   6003         JZ        $+5
   \   000025   02....       LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
   1203            {
   1204              switch(bdbCommissioningState)
   \                     ??bdb_reportCommissioningState_0:
   \   000028   E9           MOV       A,R1
   \   000029   14           DEC       A
   \   00002A   7003         JNZ       $+5
   \   00002C   02....       LJMP      ??bdb_reportCommissioningState_2 & 0xFFFF
   \   00002F   14           DEC       A
   \   000030   7003         JNZ       $+5
   \   000032   02....       LJMP      ??bdb_reportCommissioningState_3 & 0xFFFF
   \   000035   14           DEC       A
   \   000036   601C         JZ        ??bdb_reportCommissioningState_4
   \   000038   14           DEC       A
   \   000039   7003         JNZ       $+5
   \   00003B   02....       LJMP      ??bdb_reportCommissioningState_5 & 0xFFFF
   \   00003E   14           DEC       A
   \   00003F   7003         JNZ       $+5
   \   000041   02....       LJMP      ??bdb_reportCommissioningState_6 & 0xFFFF
   \   000044   24FE         ADD       A,#-0x2
   \   000046   7003         JNZ       $+5
   \   000048   02....       LJMP      ??bdb_reportCommissioningState_7 & 0xFFFF
   \   00004B   14           DEC       A
   \   00004C   7003         JNZ       $+5
   \   00004E   02....       LJMP      ??bdb_reportCommissioningState_8 & 0xFFFF
   \   000051   02....       LJMP      ??bdb_reportCommissioningState_9 & 0xFFFF
   1205              {
   1206          #if (ZG_BUILD_JOINING_TYPE)
   1207                case BDB_COMMISSIONING_STATE_JOINING:
   1208                  if(ZG_DEVICE_JOINING_TYPE)
   \                     ??bdb_reportCommissioningState_4:
   \   000054   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000057   E0           MOVX      A,@DPTR
   \   000058   6401         XRL       A,#0x1
   \   00005A   6008         JZ        ??bdb_reportCommissioningState_10
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   6402         XRL       A,#0x2
   \   00005F   6003         JZ        $+5
   \   000061   02....       LJMP      ??bdb_reportCommissioningState_9 & 0xFFFF
   1209                  {
   1210                    //Prepare for the next state or commissioning mode to be excecuted
   1211                    osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
   \                     ??bdb_reportCommissioningState_10:
   \   000064                ; Setup parameters for call to function osal_start_timerEx
   \   000064   90....       MOV       DPTR,#__Constant_32
   \   000067   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00006A   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   00006D   12....       LCALL     ?DEALLOC_XSTACK8
   1212          
   1213                    if(didSuccess)
   \   000070   EF           MOV       A,R7
   \   000071   601F         JZ        ??bdb_reportCommissioningState_11
   1214                    {
   1215                      //Next state is TC link key exchange
   1216                      bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE;
   \   000073   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000076   7401         MOV       A,#0x1
   \   000078   F0           MOVX      @DPTR,A
   \   000079   8003         SJMP      ??CrossCallReturnLabel_32
   1217                      //Free the list of nwk discovered
   1218                      while(pBDBListNwk)
   1219                      {
   1220                        bdb_nwkDescFree(pBDBListNwk);
   \                     ??bdb_reportCommissioningState_12:
   \   00007B                ; Setup parameters for call to function bdb_nwkDescFree
   \   00007B   12....       LCALL     ?Subroutine23 & 0xFFFF
   1221                      }
   \                     ??CrossCallReturnLabel_32:
   \   00007E   90....       MOV       DPTR,#pBDBListNwk
   \   000081   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000084   70F5         JNZ       ??bdb_reportCommissioningState_12
   1222                      
   1223                      //Set the poll rate of the ZED joining device to 1 second to allow TCLK 
   1224                      //exchange be perfomed successfully in cases in which application has a 
   1225                      //slow pollrate
   1226                      NLME_SetPollRate(TCLK_POLL_RATE);
   \   000086                ; Setup parameters for call to function NLME_SetPollRate
   \   000086   90....       MOV       DPTR,#__Constant_3e8
   \   000089   12....       LCALL     ?XLOAD_R2345
   \   00008C   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1227                      
   1228                      //No notification in this step
   1229                      return;
   \   00008F   02....       LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
   1230                    } 
   1231                    else
   1232                    {
   1233                      uint8 temp = FALSE;
   \                     ??bdb_reportCommissioningState_11:
   \   000092   85..82       MOV       DPL,?XSP + 0
   \   000095   85..83       MOV       DPH,?XSP + 1
   \   000098   E4           CLR       A
   \   000099   F0           MOVX      @DPTR,A
   1234                      //If fail, then restore poll rate
   1235                      NLME_SetPollRate(POLL_RATE);
   \   00009A                ; Setup parameters for call to function NLME_SetPollRate
   \   00009A   90....       MOV       DPTR,#__Constant_3e8
   \   00009D   12....       LCALL     ?XLOAD_R2345
   \   0000A0   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1236                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   \   0000A3   90....       MOV       DPTR,#bdbAttributes + 10
   \   0000A6   7402         MOV       A,#0x2
   \   0000A8   F0           MOVX      @DPTR,A
   1237                      bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
   \   0000A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AC   7401         MOV       A,#0x1
   \   0000AE   F0           MOVX      @DPTR,A
   1238                      bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   0000AF   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0000B2   E4           CLR       A
   \   0000B3   F0           MOVX      @DPTR,A
   1239                      bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_STEERING;
   \   0000B4   90....       MOV       DPTR,#bdbAttributes + 11
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   C2E1         CLR       0xE0 /* A   */.1
   \   0000BA   12....       LCALL     ?Subroutine7 & 0xFFFF
   1240                      
   1241                      //Turn off the radio
   1242                      ZMacSetReq(ZMacRxOnIdle, &temp);
   1243                      //Set the device to FN, to start as new for subsequent attempts
   1244                      bdb_setFN();
   1245                      NLME_ResetRequest();
   1246                      ZDApp_ChangeState( DEV_HOLD );
   \                     ??CrossCallReturnLabel_0:
   \   0000BD   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1247                      
   1248                      //Free the list of nwk discovered
   1249                      while(pBDBListNwk)
   \                     ??bdb_reportCommissioningState_13:
   \   0000C0   90....       MOV       DPTR,#pBDBListNwk
   \   0000C3   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   0000C6   7003         JNZ       $+5
   \   0000C8   02....       LJMP      ??bdb_reportCommissioningState_9 & 0xFFFF
   1250                      {
   1251                        bdb_nwkDescFree(pBDBListNwk);
   \   0000CB                ; Setup parameters for call to function bdb_nwkDescFree
   \   0000CB   12....       LCALL     ?Subroutine23 & 0xFFFF
   1252                      }
   1253                    }
   1254                  }
   \                     ??CrossCallReturnLabel_33:
   \   0000CE   80F0         SJMP      ??bdb_reportCommissioningState_13
   1255                break;
   1256          
   1257                case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
   1258                  if(ZG_DEVICE_JOINING_TYPE)
   \                     ??bdb_reportCommissioningState_2:
   \   0000D0   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   6401         XRL       A,#0x1
   \   0000D6   6008         JZ        ??bdb_reportCommissioningState_14
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   6402         XRL       A,#0x2
   \   0000DB   6003         JZ        $+5
   \   0000DD   02....       LJMP      ??bdb_reportCommissioningState_9 & 0xFFFF
   1259                  {
   1260                    if(didSuccess)
   \                     ??bdb_reportCommissioningState_14:
   \   0000E0   EA           MOV       A,R2
   \   0000E1   6028         JZ        ??bdb_reportCommissioningState_15
   1261                    {
   1262                      //Clear any setting that would set the device as FN
   1263                      zgWriteStartupOptions(ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);            
   \   0000E3                ; Setup parameters for call to function zgWriteStartupOptions
   \   0000E3   7A03         MOV       R2,#0x3
   \   0000E5   7900         MOV       R1,#0x0
   \   0000E7   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   1264                      
   1265                      //Next state is nwk steering on the nwk (permit joining)
   1266                      bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_STEERING_ON_NWK;
   \   0000EA   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0000ED   7404         MOV       A,#0x4
   \   0000EF   F0           MOVX      @DPTR,A
   1267                      osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE, 50);
   \   0000F0                ; Setup parameters for call to function osal_start_timerEx
   \   0000F0   90....       MOV       DPTR,#__Constant_32
   \   0000F3   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000F6   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   0000F9   12....       LCALL     ?DEALLOC_XSTACK8
   1268                      
   1269                      //Set the poll rate to the application default after TCLK success
   1270                      NLME_SetPollRate(POLL_RATE);
   \   0000FC                ; Setup parameters for call to function NLME_SetPollRate
   \   0000FC   90....       MOV       DPTR,#__Constant_3e8
   \   0000FF   12....       LCALL     ?XLOAD_R2345
   \   000102   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1271          
   1272                      osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT );
   \   000105                ; Setup parameters for call to function osal_stop_timerEx
   \   000105   12....       LCALL     ?Subroutine25 & 0xFFFF
   1273                      //No notification to the user is needed
   1274                      return;
   \                     ??CrossCallReturnLabel_147:
   \   000108   02....       LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
   1275                    }
   1276                    else
   1277                    {
   1278                      bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
   \                     ??bdb_reportCommissioningState_15:
   \   00010B   7402         MOV       A,#0x2
   \   00010D   12....       LCALL     ?XSTACK_DISP0_8
   \   000110   7401         MOV       A,#0x1
   \   000112   F0           MOVX      @DPTR,A
   1279                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_TCLK_EX_FAILURE;
   \   000113   90....       MOV       DPTR,#bdbAttributes + 10
   \   000116   7407         MOV       A,#0x7
   \   000118   F0           MOVX      @DPTR,A
   1280                      
   1281                      osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT);
   \   000119                ; Setup parameters for call to function osal_stop_timerEx
   \   000119   12....       LCALL     ?Subroutine25 & 0xFFFF
   1282                     
   1283                      //No process shall be attempted after this fail
   1284                      bdbAttributes.bdbCommissioningMode = 0;
   \                     ??CrossCallReturnLabel_148:
   \   00011C   90....       MOV       DPTR,#bdbAttributes + 11
   \   00011F   E4           CLR       A
   \   000120   F0           MOVX      @DPTR,A
   1285                      
   1286                      //Fill the context for the user notification
   1287                      osal_start_timerEx(bdb_TaskID,BDB_TC_LINK_KEY_EXCHANGE_FAIL,BDB_TC_LINK_KEY_EXCHANGE_FAIL_LEAVE_TIMEOUT);
   \   000121                ; Setup parameters for call to function osal_start_timerEx
   \   000121   90....       MOV       DPTR,#__Constant_1388
   \   000124   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000127   7A02         MOV       R2,#0x2
   \   000129   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   1288                    }
   1289                  }
   \                     ??CrossCallReturnLabel_107:
   \   00012C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00012F   02....       LJMP      ??bdb_reportCommissioningState_9 & 0xFFFF
   1290                break;
   1291          #endif
   1292                
   1293                case BDB_COMMISSIONING_STATE_STEERING_ON_NWK:
   1294                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
   \                     ??bdb_reportCommissioningState_5:
   \   000132   7402         MOV       A,#0x2
   \   000134   12....       LCALL     ?XSTACK_DISP0_8
   \   000137   7401         MOV       A,#0x1
   \   000139   F0           MOVX      @DPTR,A
   1295                  if(didSuccess)
   \   00013A   EA           MOV       A,R2
   \   00013B   601F         JZ        ??bdb_reportCommissioningState_16
   1296                  {
   1297                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \   00013D   90....       MOV       DPTR,#bdbAttributes + 10
   \   000140   E4           CLR       A
   \   000141   12....       LCALL     ?Subroutine10 & 0xFFFF
   1298                    
   1299          #if (ZG_BUILD_RTR_TYPE)          
   1300                    //Update ZDApp state
   1301                    if(ZG_DEVICE_RTRONLY_TYPE)
   \                     ??CrossCallReturnLabel_5:
   \   000144   6401         XRL       A,#0x1
   \   000146   7005         JNZ       ??bdb_reportCommissioningState_17
   1302                    {          
   1303                      ZDApp_ChangeState( DEV_ROUTER );
   \   000148                ; Setup parameters for call to function ZDApp_ChangeState
   \   000148   7907         MOV       R1,#0x7
   \   00014A   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1304                    }
   1305          #endif
   1306          #if (ZG_BUILD_ENDDEVICE_TYPE)
   1307                    if(ZG_DEVICE_ENDDEVICE_TYPE)
   \                     ??bdb_reportCommissioningState_17:
   \   00014D   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000150   E0           MOVX      A,@DPTR
   \   000151   6402         XRL       A,#0x2
   \   000153   7013         JNZ       ??bdb_reportCommissioningState_18
   1308                    {
   1309                      ZDApp_ChangeState( DEV_END_DEVICE );
   \   000155                ; Setup parameters for call to function ZDApp_ChangeState
   \   000155   7906         MOV       R1,#0x6
   \   000157   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   \   00015A   800C         SJMP      ??bdb_reportCommissioningState_18
   1310                    }
   1311          #endif
   1312                  }
   1313          #if (ZG_BUILD_COORDINATOR_TYPE)
   1314                  else
   1315                  {
   1316                    if(ZG_DEVICE_COORDINATOR_TYPE)
   \                     ??bdb_reportCommissioningState_16:
   \   00015C   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00015F   E0           MOVX      A,@DPTR
   \   000160   7006         JNZ       ??bdb_reportCommissioningState_18
   1317                    {
   1318                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   \   000162   90....       MOV       DPTR,#bdbAttributes + 10
   \   000165   7402         MOV       A,#0x2
   \   000167   F0           MOVX      @DPTR,A
   1319                    }
   1320                  }
   1321          #endif
   1322                  
   1323                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \                     ??bdb_reportCommissioningState_18:
   \   000168   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00016B   E4           CLR       A
   \   00016C   F0           MOVX      @DPTR,A
   1324                  osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
   \   00016D                ; Setup parameters for call to function osal_start_timerEx
   \   00016D   90....       MOV       DPTR,#__Constant_32
   \   000170   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000173   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000176   12....       LCALL     ?DEALLOC_XSTACK8
   1325                  bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_STEERING;
   \   000179   90....       MOV       DPTR,#bdbAttributes + 11
   \   00017C   E0           MOVX      A,@DPTR
   \   00017D   C2E1         CLR       0xE0 /* A   */.1
   \   00017F   02....       LJMP      ??bdb_reportCommissioningState_19 & 0xFFFF
   1326                break;
   1327                
   1328                case BDB_COMMISSIONING_STATE_FORMATION:
   1329                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FORMATION;
   \                     ??bdb_reportCommissioningState_6:
   \   000182   7402         MOV       A,#0x2
   \   000184   12....       LCALL     ?XSTACK_DISP0_8
   \   000187   7402         MOV       A,#0x2
   \   000189   F0           MOVX      @DPTR,A
   1330          
   1331                  if(didSuccess)
   \   00018A   EA           MOV       A,R2
   \   00018B   90....       MOV       DPTR,#bdbAttributes + 10
   \   00018E   601F         JZ        ??bdb_reportCommissioningState_20
   1332                  {
   1333                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \   000190   E4           CLR       A
   \   000191   F0           MOVX      @DPTR,A
   1334          
   1335                    //Clear any setting that would set the device as FN
   1336                    zgWriteStartupOptions(ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);          
   \   000192                ; Setup parameters for call to function zgWriteStartupOptions
   \   000192   7A03         MOV       R2,#0x3
   \   000194   F9           MOV       R1,A
   \   000195   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   1337                    
   1338                     //Update ZDApp State
   1339          #if (ZG_BUILD_RTR_TYPE)
   1340                    if(ZG_DEVICE_RTRONLY_TYPE)
   \   000198   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00019B   E0           MOVX      A,@DPTR
   \   00019C   6401         XRL       A,#0x1
   \   00019E   7005         JNZ       ??bdb_reportCommissioningState_21
   1341                    {          
   1342                      ZDApp_ChangeState( DEV_ROUTER );
   \   0001A0                ; Setup parameters for call to function ZDApp_ChangeState
   \   0001A0   7907         MOV       R1,#0x7
   \   0001A2   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1343                    }
   1344          #endif    
   1345          #if (ZG_BUILD_COORDINATOR_TYPE)
   1346                    if(ZG_DEVICE_COORDINATOR_TYPE)
   \                     ??bdb_reportCommissioningState_21:
   \   0001A5   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0001A8   E0           MOVX      A,@DPTR
   \   0001A9   7022         JNZ       ??bdb_reportCommissioningState_22
   1347                    {          
   1348                      ZDApp_ChangeState( DEV_ZB_COORD );
   \   0001AB                ; Setup parameters for call to function ZDApp_ChangeState
   \   0001AB   7909         MOV       R1,#0x9
   \   0001AD   801B         SJMP      ??CrossCallReturnLabel_1
   1349                    }     
   1350          #endif
   1351                  }
   1352                  else
   1353                  {
   1354                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_FORMATION_FAILURE;
   \                     ??bdb_reportCommissioningState_20:
   \   0001AF   7408         MOV       A,#0x8
   \   0001B1   12....       LCALL     ?Subroutine10 & 0xFFFF
   1355                    //If not on the nwk, then restart the nwk parameters
   1356          #if (ZG_BUILD_RTR_TYPE)
   1357                    if(ZG_DEVICE_RTR_TYPE)
   \                     ??CrossCallReturnLabel_6:
   \   0001B4   6004         JZ        ??bdb_reportCommissioningState_23
   \   0001B6   6401         XRL       A,#0x1
   \   0001B8   7013         JNZ       ??bdb_reportCommissioningState_22
   1358                    {           
   1359                      if(!bdbAttributes.bdbNodeIsOnANetwork)
   \                     ??bdb_reportCommissioningState_23:
   \   0001BA   90....       MOV       DPTR,#bdbAttributes + 14
   \   0001BD   E0           MOVX      A,@DPTR
   \   0001BE   700D         JNZ       ??bdb_reportCommissioningState_22
   1360                      {
   1361                        uint8 temp = FALSE;
   \   0001C0   85..82       MOV       DPL,?XSP + 0
   \   0001C3   85..83       MOV       DPH,?XSP + 1
   \   0001C6   E4           CLR       A
   \   0001C7   12....       LCALL     ?Subroutine7 & 0xFFFF
   1362                        //Turn off the radio
   1363                        ZMacSetReq(ZMacRxOnIdle, &temp);
   1364                        //Set the device to FN, to start as new for subsequent attempts
   1365                        bdb_setFN();
   1366                        NLME_ResetRequest();
   1367                        ZDApp_ChangeState( DEV_HOLD );
   1368                      }
   1369                    }
   1370          #endif
   1371                  }
   \                     ??CrossCallReturnLabel_1:
   \   0001CA   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1372                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \                     ??bdb_reportCommissioningState_22:
   \   0001CD   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0001D0   E4           CLR       A
   \   0001D1   F0           MOVX      @DPTR,A
   1373                  osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
   \   0001D2                ; Setup parameters for call to function osal_start_timerEx
   \   0001D2   90....       MOV       DPTR,#__Constant_32
   \   0001D5   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0001D8   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   0001DB   12....       LCALL     ?DEALLOC_XSTACK8
   1374                  bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_FORMATION;
   \   0001DE   90....       MOV       DPTR,#bdbAttributes + 11
   \   0001E1   E0           MOVX      A,@DPTR
   \   0001E2   C2E2         CLR       0xE0 /* A   */.2
   \   0001E4   02....       LJMP      ??bdb_reportCommissioningState_19 & 0xFFFF
   1375                break;  
   1376                
   1377          
   1378                case BDB_COMMISSIONING_STATE_FINDING_BINDING:
   1379          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
   1380                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
   1381          
   1382                  //Do not notify the status if we have another identify to send
   1383                  if(bdbAttributes.bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   1384                  {
   1385                    //Success at least once during F&B as initiator, mark it
   1386                    bdb_FBStateSuccessLatch = TRUE;
   1387                  }        
   1388                  
   1389                  //Will we process another indentify?
   1390                  if(((FINDING_AND_BINDING_PERIODIC_ENABLE == FALSE) || (bdb_FB_InitiatorCurrentCyclesNumber == 0)) && (bdb_getRespondentRetry(pRespondentHead) == NULL) && (osal_get_timeoutEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT) == 0))
   1391                  {
   1392                    // Dealocate respondent list and clean all the F&B process
   1393                    pRespondentCurr = NULL;
   1394                    pRespondentNext = NULL;
   1395                    bdb_zclRespondentListClean( &pRespondentHead );
   1396                    osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
   1397                    
   1398                    //Report success if in any of the attempts we got success, regardless that we did receive no rsp on the last attempt
   1399                    if(bdb_FBStateSuccessLatch && (bdbAttributes.bdbCommissioningStatus == BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE))
   1400                    {
   1401                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   1402                    }
   1403                    
   1404                    //Set default state
   1405                    bdb_FBStateSuccessLatch = FALSE;
   1406                    
   1407                    //Resume BDB machine state only if we were in F&B, if we were on parent lost, only clean the commissioning mode and remove from bdb_ParentLostSavedState
   1408                    if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
   1409                    {
   1410                      bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   1411                      osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50); 
   1412                    }
   1413                    else if(bdbCommissioningProcedureState.bdb_ParentLostSavedState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
   1414                    {
   1415                      bdbCommissioningProcedureState.bdb_ParentLostSavedState = BDB_COMMISSIONING_STATE_START_RESUME;
   1416                    }
   1417                    
   1418                    bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_FINDING_BINDING;
   1419                  }
   1420                  else
   1421                  {
   1422                    return;
   1423                  }
   1424          
   1425          #endif
   1426                break;     
   1427                case BDB_COMMISSIONING_STATE_TL:
   1428                  // Set NWK task to run
   1429                  nwk_setStateIdle( FALSE );
   \                     ??bdb_reportCommissioningState_3:
   \   0001E7                ; Setup parameters for call to function nwk_setStateIdle
   \   0001E7   7900         MOV       R1,#0x0
   \   0001E9   12....       LCALL     `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
   1430                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_TOUCHLINK;
   \   0001EC   7402         MOV       A,#0x2
   \   0001EE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F1   7404         MOV       A,#0x4
   \   0001F3   F0           MOVX      @DPTR,A
   1431                  if(didSuccess)
   \   0001F4   EF           MOV       A,R7
   \   0001F5   601F         JZ        ??bdb_reportCommissioningState_24
   1432                  {
   1433                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \   0001F7   90....       MOV       DPTR,#bdbAttributes + 10
   \   0001FA   E4           CLR       A
   \   0001FB   F0           MOVX      @DPTR,A
   1434                    bdbAttributes.bdbCommissioningMode = BDB_COMMISSIONING_MODE_IDDLE;
   \   0001FC   A3           INC       DPTR
   \   0001FD   12....       LCALL     ?Subroutine10 & 0xFFFF
   1435                    
   1436                    //Update ZDApp state
   1437          #if (ZG_BUILD_RTR_TYPE)
   1438                    if(ZG_DEVICE_RTRONLY_TYPE)
   \                     ??CrossCallReturnLabel_7:
   \   000200   6401         XRL       A,#0x1
   \   000202   7005         JNZ       ??bdb_reportCommissioningState_25
   1439                    {          
   1440                      ZDApp_ChangeState( DEV_ROUTER );
   \   000204                ; Setup parameters for call to function ZDApp_ChangeState
   \   000204   7907         MOV       R1,#0x7
   \   000206   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1441                    }
   1442          #endif
   1443          #if (ZG_BUILD_ENDDEVICE_TYPE)
   1444                    if(ZG_DEVICE_ENDDEVICE_TYPE)
   \                     ??bdb_reportCommissioningState_25:
   \   000209   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00020C   E0           MOVX      A,@DPTR
   \   00020D   6402         XRL       A,#0x2
   \   00020F   7005         JNZ       ??bdb_reportCommissioningState_24
   1445                    {
   1446                      ZDApp_ChangeState( DEV_END_DEVICE );
   \   000211                ; Setup parameters for call to function ZDApp_ChangeState
   \   000211   7906         MOV       R1,#0x6
   \   000213   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1447                    }
   1448          #endif          
   1449                  }
   1450                  //The fail status is already set from the calling function to report commissioning process
   1451                  
   1452                  // The commissioning FAIL status is set before calling the bdb_reportCommissioningState
   1453                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \                     ??bdb_reportCommissioningState_24:
   \   000216   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000219   E4           CLR       A
   \   00021A   F0           MOVX      @DPTR,A
   1454                  osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50); 
   \   00021B                ; Setup parameters for call to function osal_start_timerEx
   \   00021B   90....       MOV       DPTR,#__Constant_32
   \   00021E   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000221   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000224   12....       LCALL     ?DEALLOC_XSTACK8
   1455                  //Clear the event
   1456                  bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_INITIATOR_TL;
   \   000227   90....       MOV       DPTR,#bdbAttributes + 11
   \   00022A   E0           MOVX      A,@DPTR
   \   00022B   C2E0         CLR       0xE0 /* A   */.0
   \   00022D   8072         SJMP      ??bdb_reportCommissioningState_19
   1457                  
   1458                break;
   1459                
   1460                case BDB_INITIALIZATION:
   1461                  //Notify user about successfull initialization
   1462                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_INITIALIZATION;
   \                     ??bdb_reportCommissioningState_7:
   \   00022F   7402         MOV       A,#0x2
   \   000231   12....       LCALL     ?XSTACK_DISP0_8
   \   000234   E4           CLR       A
   \   000235   F0           MOVX      @DPTR,A
   1463                  if(didSuccess)
   \   000236   EA           MOV       A,R2
   \   000237   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00023A   603A         JZ        ??bdb_reportCommissioningState_26
   1464                  {
   1465                    //Update ZDApp state
   1466          #if (ZG_BUILD_COORDINATOR_TYPE)
   1467                    if(ZG_DEVICE_COORDINATOR_TYPE)
   \   00023C   E0           MOVX      A,@DPTR
   \   00023D   7005         JNZ       ??bdb_reportCommissioningState_27
   1468                    {          
   1469                      ZDApp_ChangeState( DEV_ZB_COORD );
   \   00023F                ; Setup parameters for call to function ZDApp_ChangeState
   \   00023F   7909         MOV       R1,#0x9
   \   000241   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1470                    }
   1471          #endif          
   1472          #if (ZG_BUILD_ENDDEVICE_TYPE)
   1473                    if(ZG_DEVICE_ENDDEVICE_TYPE)
   \                     ??bdb_reportCommissioningState_27:
   \   000244   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000247   E0           MOVX      A,@DPTR
   \   000248   6402         XRL       A,#0x2
   \   00024A   700E         JNZ       ??bdb_reportCommissioningState_28
   1474                    {
   1475                      uint32 pollrate = POLL_RATE;
   1476                      NLME_SetPollRate(pollrate);
   \   00024C                ; Setup parameters for call to function NLME_SetPollRate
   \   00024C   90....       MOV       DPTR,#__Constant_3e8
   \   00024F   12....       LCALL     ?XLOAD_R2345
   \   000252   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1477                      ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
   \   000255                ; Setup parameters for call to function ZDApp_ChangeState
   \   000255   7904         MOV       R1,#0x4
   \   000257   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1478                      
   1479                    }
   1480          #endif          
   1481                    ZDApp_RestoreNwkSecMaterial();
   \                     ??bdb_reportCommissioningState_28:
   \   00025A                ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
   \   00025A   12....       LCALL     `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
   1482                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NETWORK_RESTORED;
   \   00025D   90....       MOV       DPTR,#bdbAttributes + 10
   \   000260   740D         MOV       A,#0xd
   \   000262   F0           MOVX      @DPTR,A
   1483                    bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   000263   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000266   E4           CLR       A
   \   000267   F0           MOVX      @DPTR,A
   1484                    osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,200);
   \   000268                ; Setup parameters for call to function osal_start_timerEx
   \   000268   90....       MOV       DPTR,#__Constant_c8
   \   00026B   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00026E   12....       LCALL     ?Subroutine20 & 0xFFFF
   1485                  }
   \                     ??CrossCallReturnLabel_105:
   \   000271   12....       LCALL     ?DEALLOC_XSTACK8
   \   000274   8025         SJMP      ??bdb_reportCommissioningState_29
   1486                  else
   1487                  {
   1488          #if (ZG_BUILD_ENDDEVICE_TYPE)                   
   1489                    if(ZG_DEVICE_ENDDEVICE_TYPE)
   \                     ??bdb_reportCommissioningState_26:
   \   000276   E0           MOVX      A,@DPTR
   \   000277   6402         XRL       A,#0x2
   \   000279   701A         JNZ       ??bdb_reportCommissioningState_30
   1490                    {
   1491                      if(bdb_isDeviceNonFactoryNew())
   \   00027B   90....       MOV       DPTR,#bdbAttributes + 14
   \   00027E   E0           MOVX      A,@DPTR
   \   00027F   6014         JZ        ??bdb_reportCommissioningState_30
   1492                      {
   1493                        //Notify the user about losing parent
   1494                        bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_PARENT_LOST;
   \   000281   7402         MOV       A,#0x2
   \   000283   12....       LCALL     ?XSTACK_DISP0_8
   \   000286   7405         MOV       A,#0x5
   \   000288   F0           MOVX      @DPTR,A
   1495                        bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_PARENT_LOST;
   \   000289   90....       MOV       DPTR,#bdbAttributes + 11
   \   00028C   E0           MOVX      A,@DPTR
   \   00028D   D2E5         SETB      0xE0 /* A   */.5
   \   00028F   F0           MOVX      @DPTR,A
   1496                        
   1497                        //Update ZDApp state
   1498                        ZDApp_ChangeState( DEV_NWK_ORPHAN );
   \   000290                ; Setup parameters for call to function ZDApp_ChangeState
   \   000290   790A         MOV       R1,#0xa
   \   000292   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1499                      }
   1500                    }
   1501          #endif
   1502                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   \                     ??bdb_reportCommissioningState_30:
   \   000295   90....       MOV       DPTR,#bdbAttributes + 10
   \   000298   7402         MOV       A,#0x2
   \   00029A   F0           MOVX      @DPTR,A
   1503                  }
   1504                  bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_INITIALIZATION;
   \                     ??bdb_reportCommissioningState_29:
   \   00029B   90....       MOV       DPTR,#bdbAttributes + 11
   \   00029E   E0           MOVX      A,@DPTR
   \   00029F   C2E4         CLR       0xE0 /* A   */.4
   \                     ??bdb_reportCommissioningState_19:
   \   0002A1   F0           MOVX      @DPTR,A
   1505          
   1506                break;
   \   0002A2   8051         SJMP      ??bdb_reportCommissioningState_9
   1507          #if (ZG_BUILD_ENDDEVICE_TYPE)     
   1508                case BDB_PARENT_LOST:
   1509                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_PARENT_LOST;
   \                     ??bdb_reportCommissioningState_8:
   \   0002A4   7402         MOV       A,#0x2
   \   0002A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A9   7405         MOV       A,#0x5
   \   0002AB   12....       LCALL     ?Subroutine10 & 0xFFFF
   1510                  if(ZG_DEVICE_ENDDEVICE_TYPE)
   \                     ??CrossCallReturnLabel_8:
   \   0002AE   6402         XRL       A,#0x2
   \   0002B0   7043         JNZ       ??bdb_reportCommissioningState_9
   1511                  {
   1512                    if(didSuccess)
   \   0002B2   EA           MOV       A,R2
   \   0002B3   602A         JZ        ??bdb_reportCommissioningState_31
   1513                    {
   1514                      uint32 pollrate = POLL_RATE;
   1515                      bdbCommissioningProcedureState.bdbCommissioningState = bdbCommissioningProcedureState.bdb_ParentLostSavedState;  
   \   0002B5   90....       MOV       DPTR,#bdbCommissioningProcedureState + 3
   \   0002B8   E0           MOVX      A,@DPTR
   \   0002B9   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0002BC   F0           MOVX      @DPTR,A
   1516                      bdbCommissioningProcedureState.bdb_ParentLostSavedState = 0;
   \   0002BD   90....       MOV       DPTR,#bdbCommissioningProcedureState + 3
   \   0002C0   E4           CLR       A
   \   0002C1   F0           MOVX      @DPTR,A
   1517                      NLME_SetPollRate(pollrate);
   \   0002C2                ; Setup parameters for call to function NLME_SetPollRate
   \   0002C2   90....       MOV       DPTR,#__Constant_3e8
   \   0002C5   12....       LCALL     ?XLOAD_R2345
   \   0002C8   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1518                      bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_PARENT_LOST;
   \   0002CB   90....       MOV       DPTR,#bdbAttributes + 11
   \   0002CE   E0           MOVX      A,@DPTR
   \   0002CF   C2E5         CLR       0xE0 /* A   */.5
   \   0002D1   F0           MOVX      @DPTR,A
   1519                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NETWORK_RESTORED;
   \   0002D2   90....       MOV       DPTR,#bdbAttributes + 10
   \   0002D5   740D         MOV       A,#0xd
   \   0002D7   F0           MOVX      @DPTR,A
   1520                      //Update ZDApp state
   1521                      ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
   \   0002D8                ; Setup parameters for call to function ZDApp_ChangeState
   \   0002D8   7904         MOV       R1,#0x4
   \   0002DA   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1522                      
   1523                      bdb_NetworkRestoredResumeState();
   1524                    }
   \   0002DD   8016         SJMP      ??bdb_reportCommissioningState_9
   1525                    else
   1526                    {
   1527                      bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_PARENT_LOST;
   \                     ??bdb_reportCommissioningState_31:
   \   0002DF   90....       MOV       DPTR,#bdbAttributes + 11
   \   0002E2   E0           MOVX      A,@DPTR
   \   0002E3   D2E5         SETB      0xE0 /* A   */.5
   \   0002E5   F0           MOVX      @DPTR,A
   1528                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   \   0002E6   90....       MOV       DPTR,#bdbAttributes + 10
   \   0002E9   7402         MOV       A,#0x2
   \   0002EB   F0           MOVX      @DPTR,A
   1529                      
   1530                      NLME_SetPollRate(0);
   \   0002EC                ; Setup parameters for call to function NLME_SetPollRate
   \   0002EC   90....       MOV       DPTR,#__Constant_0
   \   0002EF   12....       LCALL     ?XLOAD_R2345
   \   0002F2   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1531                      
   1532                    }
   1533                  }
   1534                break;
   1535          #endif
   1536              }
   1537          #ifdef MT_APP_CNF_FUNC
   1538              //Notify the user about the status, the main state which has failed
   1539              bdbCommissioningModeMsg.bdbCommissioningStatus = bdbAttributes.bdbCommissioningStatus;
   \                     ??bdb_reportCommissioningState_9:
   \   0002F5   90....       MOV       DPTR,#bdbAttributes + 10
   \   0002F8   E0           MOVX      A,@DPTR
   \   0002F9   C0E0         PUSH      A
   \   0002FB   7401         MOV       A,#0x1
   \   0002FD   12....       LCALL     ?XSTACK_DISP0_8
   \   000300   D0E0         POP       A
   \   000302   F0           MOVX      @DPTR,A
   1540              
   1541              bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   \   000303                ; Setup parameters for call to function bdb_SendMsg
   \   000303   7401         MOV       A,#0x1
   \   000305   12....       LCALL     ?XSTACK_DISP100_8
   \   000308   88..         MOV       ?V0,R0
   \   00030A   89..         MOV       ?V1,R1
   \   00030C   78..         MOV       R0,#?V0
   \   00030E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000311   7C03         MOV       R4,#0x3
   \   000313   7B00         MOV       R3,#0x0
   \   000315   7A0A         MOV       R2,#0xa
   \   000317   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   1542          #else
   1543              if(pfnCommissioningStatusCB)
   1544              {
   1545                //Notify the user about the status, the main state which has failed
   1546                bdbCommissioningModeMsg.bdbCommissioningStatus = bdbAttributes.bdbCommissioningStatus;
   1547                
   1548                bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   1549              }
   1550          #endif
   1551            }  
   \                     ??CrossCallReturnLabel_113:
   \   00031A   12....       LCALL     ?DEALLOC_XSTACK8
   1552          }
   \                     ??bdb_reportCommissioningState_1:
   \   00031D   7404         MOV       A,#0x4
   \   00031F   02....       LJMP      ??Subroutine68_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   7A04         MOV       R2,#0x4
   \   000002                REQUIRE ??Subroutine55_0
   \   000002                ; // Fall through to label ??Subroutine55_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine56_0
   \   000002                ; // Fall through to label ??Subroutine56_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   90....       MOV       DPTR,#bdb_TaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000008   7404         MOV       A,#0x4
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000003                ; Setup parameters for call to function bdb_setFN
   \   000003                ; Setup parameters for call to function bdb_setFN
   \   000003   12....       LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
   \   000006                ; Setup parameters for call to function NLME_ResetRequest
   \   000006                ; Setup parameters for call to function NLME_ResetRequest
   \   000006   12....       LCALL     `??NLME_ResetRequest::?relay`; Banked call to: NLME_ResetRequest
   \   000009                ; Setup parameters for call to function ZDApp_ChangeState
   \   000009                ; Setup parameters for call to function ZDApp_ChangeState
   \   000009   7900         MOV       R1,#0x0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   7A00         MOV       R2,#0x0
   \   000002   7B10         MOV       R3,#0x10
   \   000004                REQUIRE ??Subroutine62_0
   \   000004                ; // Fall through to label ??Subroutine62_0
   1553          
   1554          
   1555           /*********************************************************************
   1556           * @fn          bdb_nwkFormationAttempt
   1557           *
   1558           * @brief       Process a nwk formation attempt.
   1559           *
   1560           * @param       didSuccess - TRUE if the nwk formation was success, FALSE 
   1561           *                         otherwise and try secondary channel
   1562           *
   1563           * @return      none
   1564           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1565          void bdb_nwkFormationAttempt(bool didSuccess)
   \                     bdb_nwkFormationAttempt:
   1566          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   1567            if(didSuccess)
   \   000006   6004         JZ        ??bdb_nwkFormationAttempt_0
   1568            {
   1569              bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION,TRUE);
   \   000008                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000008   7A01         MOV       R2,#0x1
   \   00000A   801F         SJMP      ??bdb_nwkFormationAttempt_1
   1570            }
   1571            else
   1572            {
   1573              //Can we try the secondary channel set?
   1574              if((vDoPrimaryScan) && (bdbAttributes.bdbSecondaryChannelSet))
   \                     ??bdb_nwkFormationAttempt_0:
   \   00000C   90....       MOV       DPTR,#vDoPrimaryScan
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   6017         JZ        ??bdb_nwkFormationAttempt_2
   \   000012   90....       MOV       DPTR,#bdbAttributes
   \   000015   12....       LCALL     ?XLOAD_R0123
   \   000018   E8           MOV       A,R0
   \   000019   49           ORL       A,R1
   \   00001A   4A           ORL       A,R2
   \   00001B   4B           ORL       A,R3
   \   00001C   600B         JZ        ??bdb_nwkFormationAttempt_2
   1575              {
   1576                vDoPrimaryScan = FALSE;
   \   00001E   90....       MOV       DPTR,#vDoPrimaryScan
   \   000021   E4           CLR       A
   \   000022   F0           MOVX      @DPTR,A
   1577                bdb_nwkJoiningFormation(FALSE);
   \   000023                ; Setup parameters for call to function bdb_nwkJoiningFormation
   \   000023   F9           MOV       R1,A
   \   000024   12....       LCALL     `??bdb_nwkJoiningFormation::?relay`; Banked call to: bdb_nwkJoiningFormation
   \   000027   8007         SJMP      ??bdb_nwkFormationAttempt_3
   1578              }
   1579              else
   1580              {
   1581                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
   \                     ??bdb_nwkFormationAttempt_2:
   \   000029                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000029   7A00         MOV       R2,#0x0
   \                     ??bdb_nwkFormationAttempt_1:
   \   00002B   7905         MOV       R1,#0x5
   \   00002D   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   1582              }
   1583            }
   1584          }
   \                     ??bdb_nwkFormationAttempt_3:
   \   000030   02....       LJMP      ?Subroutine0 & 0xFFFF
   1585          
   1586          
   1587          
   1588          /*********************************************************************
   1589           * @fn          bdb_isDeviceNonFactoryNew
   1590           *
   1591           * @brief       Returns the state of bdbNodeIsOnANetwork attribute
   1592           * 
   1593           * @param       none
   1594           *
   1595           * @return      bdbNodeIsOnANetwork
   1596           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1597          bool bdb_isDeviceNonFactoryNew(void)
   \                     bdb_isDeviceNonFactoryNew:
   1598          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1599            return bdbAttributes.bdbNodeIsOnANetwork;
   \   000004   90....       MOV       DPTR,#bdbAttributes + 14
   \   000007                REQUIRE ?Subroutine6
   \   000007                ; // Fall through to label ?Subroutine6
   1600          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E0           MOVX      A,@DPTR
   \   000001                REQUIRE ??Subroutine57_0
   \   000001                ; // Fall through to label ??Subroutine57_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   F9           MOV       R1,A
   \   000001   02....       LJMP      ??Subroutine54_0 & 0xFFFF
   1601          
   1602          
   1603          /*********************************************************************
   1604           * @fn          bdb_doTrustCenterRequireKeyExchange
   1605           *
   1606           * @brief       Returns the state of bdbTrustCenterRequireKeyExchange attribute
   1607           * 
   1608           * @param       none
   1609           *
   1610           * @return      bdbTrustCenterRequireKeyExchange
   1611           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1612          bool bdb_doTrustCenterRequireKeyExchange(void)
   \                     bdb_doTrustCenterRequireKeyExchange:
   1613          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1614          #if (ZG_BUILD_COORDINATOR_TYPE) 
   1615            return bdbAttributes.bdbTrustCenterRequireKeyExchange;
   \   000004   90....       MOV       DPTR,#bdbAttributes + 17
   \   000007   80..         SJMP      ?Subroutine6
   1616          #else
   1617            return 0;
   1618          #endif
   1619          }
   1620          
   1621          /*********************************************************************
   1622           * @fn      bdb_rejoinNwk
   1623           *
   1624           * @brief   Attempt to rejoin/resume a nwk from nv parameters
   1625           *
   1626           * @param   none
   1627           *
   1628           * @return  ZStatus_t
   1629           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1630          ZStatus_t bdb_rejoinNwk(void)
   \                     bdb_rejoinNwk:
   1631          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1632            ZStatus_t rejoinStatus = ZSuccess;
   \   00000A   7E00         MOV       R6,#0x0
   1633            
   1634            //Update the seq number
   1635            _NIB.SequenceNum ++;
   \   00000C   90....       MOV       DPTR,#_NIB
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   04           INC       A
   \   000011   F0           MOVX      @DPTR,A
   1636            
   1637            osal_nv_write(ZCD_NV_NIB,osal_offsetof( nwkIB_t, SequenceNum ), sizeof( uint8), &_NIB.SequenceNum );
   \   000012                ; Setup parameters for call to function osal_nv_write
   \   000012   75....       MOV       ?V0,#_NIB & 0xff
   \   000015   75....       MOV       ?V1,#(_NIB >> 8) & 0xff
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   75..01       MOV       ?V0,#0x1
   \   000020   8E..         MOV       ?V1,R6
   \   000022   78..         MOV       R0,#?V0
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV       R4,#0x0
   \   000029   7D00         MOV       R5,#0x0
   \   00002B   7A21         MOV       R2,#0x21
   \   00002D   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000030   12....       LCALL     ?DEALLOC_XSTACK8
   1638            
   1639            // Transition state machine to correct rejoin state based on nwk key
   1640            if ( ZDApp_RestoreNwkKey( FALSE )== TRUE )
   \   000033                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   000033   7900         MOV       R1,#0x0
   \   000035   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   000038   E9           MOV       A,R1
   \   000039   6401         XRL       A,#0x1
   \   00003B   7004         JNZ       ??bdb_rejoinNwk_0
   1641            {
   1642              ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
   \   00003D                ; Setup parameters for call to function ZDApp_ChangeState
   \   00003D   7904         MOV       R1,#0x4
   \   00003F   8002         SJMP      ??bdb_rejoinNwk_1
   1643            }
   1644            else
   1645            {
   1646              ZDApp_ChangeState( DEV_NWK_TC_REJOIN_CURR_CHANNEL );
   \                     ??bdb_rejoinNwk_0:
   \   000041                ; Setup parameters for call to function ZDApp_ChangeState
   \   000041   790E         MOV       R1,#0xe
   \                     ??bdb_rejoinNwk_1:
   \   000043   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1647            }
   1648          
   1649            // Before trying to do rejoin, check if the device has a valid short address
   1650            // If not, generate a random short address for itself
   1651            if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   \   000046   90....       MOV       DPTR,#_NIB + 20
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   64FE         XRL       A,#0xfe
   \   00004C   7003         JNZ       ??bdb_rejoinNwk_2
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   F4           CPL       A
   \                     ??bdb_rejoinNwk_2:
   \   000051   7002         JNZ       ??bdb_rejoinNwk_3
   1652            {
   1653              rejoinStatus = ZFailure;
   \   000053   7E01         MOV       R6,#0x1
   1654            }
   1655          
   1656            // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1657            if ( _NIB.nwkPanId == 0xFFFF )
   \                     ??bdb_rejoinNwk_3:
   \   000055   90....       MOV       DPTR,#_NIB + 33
   \   000058   E0           MOVX      A,@DPTR
   \   000059   F4           CPL       A
   \   00005A   7003         JNZ       ??bdb_rejoinNwk_4
   \   00005C   A3           INC       DPTR
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   F4           CPL       A
   \                     ??bdb_rejoinNwk_4:
   \   00005F   7004         JNZ       ??bdb_rejoinNwk_5
   1658            {
   1659              rejoinStatus = ZFailure;
   \   000061   7E01         MOV       R6,#0x1
   \   000063   8033         SJMP      ??bdb_rejoinNwk_6
   1660            }
   1661          
   1662            if(rejoinStatus == ZSuccess)
   \                     ??bdb_rejoinNwk_5:
   \   000065   EE           MOV       A,R6
   \   000066   A2E0         MOV       C,0xE0 /* A   */.0
   \   000068   402E         JC        ??bdb_rejoinNwk_6
   1663            {
   1664              uint8 tmp = true;
   \   00006A   85..82       MOV       DPL,?XSP + 0
   \   00006D   85..83       MOV       DPH,?XSP + 1
   \   000070   7401         MOV       A,#0x1
   \   000072   12....       LCALL     ?Subroutine12 & 0xFFFF
   1665              ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
   1666                  
   1667              // Perform Secure or Unsecure Rejoin depending on available configuration
   1668              if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == TRUE ) )
   \                     ??CrossCallReturnLabel_12:
   \   000075                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   000075   7901         MOV       R1,#0x1
   \   000077   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   00007A   E9           MOV       A,R1
   \   00007B   6401         XRL       A,#0x1
   \   00007D   90....       MOV       DPTR,#_NIB + 22
   \   000080   700B         JNZ       ??bdb_rejoinNwk_7
   1669              {
   1670                rejoinStatus = NLME_ReJoinRequest( ZDO_UseExtendedPANID, _NIB.nwkLogicalChannel);
   \   000082                ; Setup parameters for call to function NLME_ReJoinRequest
   \   000082   E0           MOVX      A,@DPTR
   \   000083   F9           MOV       R1,A
   \   000084   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000086   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000088   12....       LCALL     `??NLME_ReJoinRequest::?relay`; Banked call to: NLME_ReJoinRequest
   \   00008B   8009         SJMP      ??bdb_rejoinNwk_8
   1671              }
   1672              else
   1673              {
   1674                rejoinStatus = NLME_ReJoinRequestUnsecure( ZDO_UseExtendedPANID, _NIB.nwkLogicalChannel);
   \                     ??bdb_rejoinNwk_7:
   \   00008D                ; Setup parameters for call to function NLME_ReJoinRequestUnsecure
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   F9           MOV       R1,A
   \   00008F   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000091   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000093   12....       LCALL     `??NLME_ReJoinRequestUnsecure::?relay`; Banked call to: NLME_ReJoinRequestUnsecure
   \                     ??bdb_rejoinNwk_8:
   \   000096   E9           MOV       A,R1
   \   000097   FE           MOV       R6,A
   1675              }
   1676            }
   1677            
   1678            return rejoinStatus;
   \                     ??bdb_rejoinNwk_6:
   \   000098   EE           MOV       A,R6
   \   000099   F9           MOV       R1,A
   \   00009A   02....       LJMP      ?Subroutine1 & 0xFFFF
   1679          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7401         MOV       A,#0x1
   \   000002                REQUIRE ??Subroutine68_0
   \   000002                ; // Fall through to label ??Subroutine68_0
   1680          
   1681          #if (ZG_BUILD_JOINING_TYPE)
   1682           /*********************************************************************
   1683           * @fn          bdb_nwkDiscoveryAttempt
   1684           *
   1685           * @brief       Process a nwk discovery attempt
   1686           *
   1687           * @param       didSuccess - TRUE we found nwk in the scanned channels, FALSE if 
   1688           *                           no suitable nwks were found, try secondary channel
   1689           *
   1690           * @return      none
   1691           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1692          void bdb_nwkDiscoveryAttempt(bool didSuccess)
   \                     bdb_nwkDiscoveryAttempt:
   1693          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1694            uint8 bdbJoinEvent = BDB_JOIN_EVENT_NWK_DISCOVERY;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   E4           CLR       A
   \   000011   F0           MOVX      @DPTR,A
   1695            
   1696            if(didSuccess)
   \   000012   E9           MOV       A,R1
   \   000013   601B         JZ        ??bdb_nwkDiscoveryAttempt_0
   1697            {
   1698              bdb_SendMsg(bdb_TaskID, BDB_COMMISSIONING_STATE_JOINING, BDB_MSG_EVENT_SUCCESS,sizeof(bdbJoinEvent),(uint8*)&bdbJoinEvent);
   \   000015                ; Setup parameters for call to function bdb_SendMsg
   \   000015   A8..         MOV       R0,?XSP + 0
   \   000017   A9..         MOV       R1,?XSP + 1
   \   000019   88..         MOV       ?V0,R0
   \   00001B   89..         MOV       ?V1,R1
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000022   7C01         MOV       R4,#0x1
   \   000024   7B00         MOV       R3,#0x0
   \   000026   7A03         MOV       R2,#0x3
   \   000028   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   1699            }
   \                     ??CrossCallReturnLabel_114:
   \   00002B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002E   8030         SJMP      ??bdb_nwkDiscoveryAttempt_1
   1700            else
   1701            {
   1702              //Can we try the secondary channel set?
   1703              if((vDoPrimaryScan) && (bdbAttributes.bdbSecondaryChannelSet))
   \                     ??bdb_nwkDiscoveryAttempt_0:
   \   000030   90....       MOV       DPTR,#vDoPrimaryScan
   \   000033   E0           MOVX      A,@DPTR
   \   000034   6023         JZ        ??bdb_nwkDiscoveryAttempt_2
   \   000036   90....       MOV       DPTR,#bdbAttributes
   \   000039   12....       LCALL     ?XLOAD_R0123
   \   00003C   E8           MOV       A,R0
   \   00003D   49           ORL       A,R1
   \   00003E   4A           ORL       A,R2
   \   00003F   4B           ORL       A,R3
   \   000040   6017         JZ        ??bdb_nwkDiscoveryAttempt_2
   1704              {
   1705                vDoPrimaryScan = FALSE;
   \   000042   90....       MOV       DPTR,#vDoPrimaryScan
   \   000045   E4           CLR       A
   \   000046   F0           MOVX      @DPTR,A
   1706                bdb_setChannel(bdbAttributes.bdbSecondaryChannelSet);
   \   000047                ; Setup parameters for call to function bdb_setChannel
   \   000047   90....       MOV       DPTR,#bdbAttributes
   \   00004A   12....       LCALL     ?XLOAD_R2345
   \   00004D   12....       LCALL     `??bdb_setChannel::?relay`; Banked call to: bdb_setChannel
   1707                
   1708                ZDApp_NetworkInit( 50 );
   \   000050                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000050   7A32         MOV       R2,#0x32
   \   000052   7B00         MOV       R3,#0x0
   \   000054   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   000057   8007         SJMP      ??bdb_nwkDiscoveryAttempt_1
   1709              }
   1710              else
   1711              {
   1712                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, FALSE);
   \                     ??bdb_nwkDiscoveryAttempt_2:
   \   000059                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000059   7A00         MOV       R2,#0x0
   \   00005B   7903         MOV       R1,#0x3
   \   00005D   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   1713              }
   1714            }
   1715          }
   \                     ??bdb_nwkDiscoveryAttempt_1:
   \   000060   02....       LJMP      ?Subroutine1 & 0xFFFF
   1716          
   1717           /*********************************************************************
   1718           * @fn          bdb_filterNwkDisc
   1719           *
   1720           * @brief       Filter the nwks found and attempt to join the suitable nwks
   1721           *              Here the application can include nwk filters 
   1722           *
   1723           * @param       none
   1724           *
   1725           * @return      none
   1726           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1727          void bdb_filterNwkDisc(void)
   \                     bdb_filterNwkDisc:
   1728          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   1729            networkDesc_t* pNwkDesc;
   1730            uint8 i = 0;
   1731            uint8 ResultCount = 0;
   \   000005   75..00       MOV       ?V0,#0x0
   1732            uint8 stackProfile = 0;
   \   000008   75..00       MOV       ?V2,#0x0
   1733            uint8 stackProfilePro = 0;
   \   00000B   75..00       MOV       ?V1,#0x0
   1734            
   1735            pBDBListNwk  = nwk_getNwkDescList();
   \   00000E                ; Setup parameters for call to function nwk_getNwkDescList
   \   00000E   12....       LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   000011   90....       MOV       DPTR,#pBDBListNwk
   \   000014   12....       LCALL     ?Subroutine14 & 0xFFFF
   1736            nwk_desc_list_release();
   \                     ??CrossCallReturnLabel_16:
   \   000017                ; Setup parameters for call to function nwk_desc_list_release
   \   000017   12....       LCALL     `??nwk_desc_list_release::?relay`; Banked call to: nwk_desc_list_release
   1737            
   1738            pNwkDesc = pBDBListNwk;
   \   00001A   90....       MOV       DPTR,#pBDBListNwk
   \   00001D   8005         SJMP      ??CrossCallReturnLabel_66
   1739            while (pNwkDesc)
   1740            {
   1741              ResultCount++;
   \                     ??bdb_filterNwkDisc_0:
   \   00001F   05..         INC       ?V0
   1742              pNwkDesc = pNwkDesc->nextDesc;
   \   000021   12....       LCALL     ?Subroutine41 & 0xFFFF
   1743            }
   \                     ??CrossCallReturnLabel_66:
   \   000024   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000027   70F6         JNZ       ??bdb_filterNwkDisc_0
   1744            
   1745            if(pBDBListNwk)
   \   000029   90....       MOV       DPTR,#pBDBListNwk
   \   00002C   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   00002F   7003         JNZ       $+5
   \   000031   02....       LJMP      ??bdb_filterNwkDisc_1 & 0xFFFF
   1746            {
   1747              if(pfnFilterNwkDesc)
   \   000034   90....       MOV       DPTR,#pfnFilterNwkDesc
   \   000037   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   00003A   6011         JZ        ??bdb_filterNwkDisc_2
   1748              {
   1749                pfnFilterNwkDesc(pBDBListNwk, ResultCount);
   \   00003C                ; Setup parameters for indirect call
   \   00003C   A9..         MOV       R1,?V0
   \   00003E   90....       MOV       DPTR,#pBDBListNwk
   \   000041   12....       LCALL     ??Subroutine71_0 & 0xFFFF
   1750              }
   \                     ??CrossCallReturnLabel_169:
   \   000044   90....       MOV       DPTR,#pfnFilterNwkDesc + 1
   \   000047   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00004A   12....       LCALL     ?CALL_IND
   1751              
   1752              for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   1753              {
   1754                pNwkDesc = pBDBListNwk;
   \                     ??bdb_filterNwkDisc_2:
   \   00004D   90....       MOV       DPTR,#pBDBListNwk
   \   000050   12....       LCALL     ?Subroutine27 & 0xFFFF
   1755                
   1756                if(pNwkDesc)
   \                     ??CrossCallReturnLabel_40:
   \   000053   7003         JNZ       $+5
   \   000055   02....       LJMP      ??bdb_filterNwkDisc_3 & 0xFFFF
   1757                {
   1758                  for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   000058   75..00       MOV       ?V3,#0x0
   \   00005B   802C         SJMP      ??CrossCallReturnLabel_50
   1759                  {
   1760                    if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
   1761                    {
   1762                      // If the extended Pan ID is commissioned to a non zero value
   1763                      // Only join the Pan that has match EPID
   1764                      if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   1765                      {
   1766                        //Remove from the list
   1767                        bdb_nwkDescFree(pNwkDesc);
   1768                        ResultCount--;
   1769                        continue;
   1770                      }
   1771                    }
   1772                    else if ( zgConfigPANID != 0xFFFF )
   1773                    {
   1774                      // PAN Id is preconfigured. check if it matches
   1775                      if ( pNwkDesc->panId != zgConfigPANID )
   1776                      {
   1777                        //Remove from the list
   1778                        bdb_nwkDescFree(pNwkDesc);
   1779                        ResultCount--;
   1780                        continue;
   1781                      }
   1782                    }
   1783          
   1784                    if ( pNwkDesc->chosenRouter != _NIB.nwkCoordAddress || _NIB.nwkCoordAddress == INVALID_NODE_ADDR )
   1785                    {
   1786                      // check that network is allowing joining
   1787                      if ( ZSTACK_ROUTER_BUILD )
   1788                      {
   1789                        if ( stackProfilePro == FALSE )
   1790                        {
   1791                          if ( !pNwkDesc->routerCapacity )
   1792                          {
   1793                            //Remove from the list
   1794                            bdb_nwkDescFree(pNwkDesc);
   1795                            ResultCount--;
   1796                            continue;
   1797                          }
   1798                        }
   1799                        else
   1800                        {
   1801                          if ( !pNwkDesc->deviceCapacity )
   1802                          {
   1803                            //Remove from the list
   1804                            bdb_nwkDescFree(pNwkDesc);
   1805                            ResultCount--;
   1806                            continue;
   1807                          }
   1808                        }
   1809                      }
   1810                      else if ( ZSTACK_END_DEVICE_BUILD )
   1811                      {
   1812                        if ( !pNwkDesc->deviceCapacity )
   1813                        {
   1814                          //Remove from the list
   1815                          bdb_nwkDescFree(pNwkDesc);
   1816                          ResultCount--;
   1817                          continue;
   1818                        }
   1819                      }
   1820                    }
   1821          
   1822                    // check version of zigbee protocol
   1823                    if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   1824                      continue;
   1825          
   1826                    // check version of stack profile
   1827                    if ( pNwkDesc->stackProfile != zgStackProfile  )
   1828                    {
   1829                      if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   1830                          || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \                     ??bdb_filterNwkDisc_4:
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   6402         XRL       A,#0x2
   \   000060   7012         JNZ       ??bdb_filterNwkDisc_5
   \   000062   8E82         MOV       DPL,R6
   \   000064   8F83         MOV       DPH,R7
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   6401         XRL       A,#0x1
   \   00006F   7003         JNZ       ??bdb_filterNwkDisc_5
   1831                      {
   1832                        stackProfilePro = TRUE;
   \                     ??bdb_filterNwkDisc_6:
   \   000071   75..01       MOV       ?V1,#0x1
   1833                      }
   1834          
   1835                      if ( stackProfile == 0 )
   \                     ??bdb_filterNwkDisc_5:
   \   000074   E5..         MOV       A,?V2
   \   000076   7009         JNZ       ??bdb_filterNwkDisc_7
   1836                      {
   1837                        //Remove from the list
   1838                        bdb_nwkDescFree(pNwkDesc);
   \                     ??bdb_filterNwkDisc_8:
   \   000078                ; Setup parameters for call to function bdb_nwkDescFree
   \   000078   EE           MOV       A,R6
   \   000079   FA           MOV       R2,A
   \   00007A   EF           MOV       A,R7
   \   00007B   FB           MOV       R3,A
   \   00007C   12....       LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
   1839                        ResultCount--;
   \   00007F   15..         DEC       ?V0
   1840                        continue;
   1841                      }
   \                     ??bdb_filterNwkDisc_7:
   \   000081   05..         INC       ?V3
   \   000083   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000086   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000089   E5..         MOV       A,?V3
   \   00008B   C3           CLR       C
   \   00008C   95..         SUBB      A,?V0
   \   00008E   4003         JC        $+5
   \   000090   02....       LJMP      ??bdb_filterNwkDisc_3 & 0xFFFF
   \   000093                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000093   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000095   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000097   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00009A   E9           MOV       A,R1
   \   00009B   6401         XRL       A,#0x1
   \   00009D   7013         JNZ       ??bdb_filterNwkDisc_9
   \   00009F                ; Setup parameters for call to function sAddrExtCmp
   \   00009F   EE           MOV       A,R6
   \   0000A0   240B         ADD       A,#0xb
   \   0000A2   FC           MOV       R4,A
   \   0000A3   E4           CLR       A
   \   0000A4   3F           ADDC      A,R7
   \   0000A5   FD           MOV       R5,A
   \   0000A6   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   0000A8   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   0000AA   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   0000AD   E9           MOV       A,R1
   \   0000AE   7021         JNZ       ??bdb_filterNwkDisc_10
   \   0000B0   80C6         SJMP      ??bdb_filterNwkDisc_8
   \                     ??bdb_filterNwkDisc_9:
   \   0000B2   90....       MOV       DPTR,#zgConfigPANID
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   F4           CPL       A
   \   0000B7   7003         JNZ       ??bdb_filterNwkDisc_11
   \   0000B9   A3           INC       DPTR
   \   0000BA   E0           MOVX      A,@DPTR
   \   0000BB   F4           CPL       A
   \                     ??bdb_filterNwkDisc_11:
   \   0000BC   6013         JZ        ??bdb_filterNwkDisc_10
   \   0000BE   8E82         MOV       DPL,R6
   \   0000C0   8F83         MOV       DPH,R7
   \   0000C2   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   0000C5   90....       MOV       DPTR,#zgConfigPANID
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   68           XRL       A,R0
   \   0000CA   7003         JNZ       ??bdb_filterNwkDisc_12
   \   0000CC   A3           INC       DPTR
   \   0000CD   E0           MOVX      A,@DPTR
   \   0000CE   69           XRL       A,R1
   \                     ??bdb_filterNwkDisc_12:
   \   0000CF   70A7         JNZ       ??bdb_filterNwkDisc_8
   \                     ??bdb_filterNwkDisc_10:
   \   0000D1   8E82         MOV       DPL,R6
   \   0000D3   8F83         MOV       DPH,R7
   \   0000D5   A3           INC       DPTR
   \   0000D6   A3           INC       DPTR
   \   0000D7   A3           INC       DPTR
   \   0000D8   A3           INC       DPTR
   \   0000D9   A3           INC       DPTR
   \   0000DA   A3           INC       DPTR
   \   0000DB   A3           INC       DPTR
   \   0000DC   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0000DF   90....       MOV       DPTR,#_NIB + 23
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   68           XRL       A,R0
   \   0000E4   7003         JNZ       ??bdb_filterNwkDisc_13
   \   0000E6   A3           INC       DPTR
   \   0000E7   E0           MOVX      A,@DPTR
   \   0000E8   69           XRL       A,R1
   \                     ??bdb_filterNwkDisc_13:
   \   0000E9   700D         JNZ       ??bdb_filterNwkDisc_14
   \   0000EB   90....       MOV       DPTR,#_NIB + 23
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   64FE         XRL       A,#0xfe
   \   0000F1   7003         JNZ       ??bdb_filterNwkDisc_15
   \   0000F3   A3           INC       DPTR
   \   0000F4   E0           MOVX      A,@DPTR
   \   0000F5   F4           CPL       A
   \                     ??bdb_filterNwkDisc_15:
   \   0000F6   702E         JNZ       ??bdb_filterNwkDisc_16
   \                     ??bdb_filterNwkDisc_14:
   \   0000F8   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   6004         JZ        ??bdb_filterNwkDisc_17
   \   0000FE   6401         XRL       A,#0x1
   \   000100   7011         JNZ       ??bdb_filterNwkDisc_18
   \                     ??bdb_filterNwkDisc_17:
   \   000102   E5..         MOV       A,?V1
   \   000104   7012         JNZ       ??bdb_filterNwkDisc_19
   \   000106   8E82         MOV       DPL,R6
   \   000108   8F83         MOV       DPH,R7
   \   00010A   A3           INC       DPTR
   \   00010B   A3           INC       DPTR
   \   00010C   A3           INC       DPTR
   \   00010D   E0           MOVX      A,@DPTR
   \   00010E   7016         JNZ       ??bdb_filterNwkDisc_16
   \   000110   02....       LJMP      ??bdb_filterNwkDisc_8 & 0xFFFF
   \                     ??bdb_filterNwkDisc_18:
   \   000113   E0           MOVX      A,@DPTR
   \   000114   6402         XRL       A,#0x2
   \   000116   700E         JNZ       ??bdb_filterNwkDisc_16
   \                     ??bdb_filterNwkDisc_19:
   \   000118   8E82         MOV       DPL,R6
   \   00011A   8F83         MOV       DPH,R7
   \   00011C   A3           INC       DPTR
   \   00011D   A3           INC       DPTR
   \   00011E   A3           INC       DPTR
   \   00011F   A3           INC       DPTR
   \   000120   E0           MOVX      A,@DPTR
   \   000121   7003         JNZ       $+5
   \   000123   02....       LJMP      ??bdb_filterNwkDisc_8 & 0xFFFF
   \                     ??bdb_filterNwkDisc_16:
   \   000126   8E82         MOV       DPL,R6
   \   000128   8F83         MOV       DPH,R7
   \   00012A   A3           INC       DPTR
   \   00012B   A3           INC       DPTR
   \   00012C   A3           INC       DPTR
   \   00012D   A3           INC       DPTR
   \   00012E   A3           INC       DPTR
   \   00012F   E0           MOVX      A,@DPTR
   \   000130   F8           MOV       R0,A
   \   000131   90....       MOV       DPTR,#_NIB + 17
   \   000134   E0           MOVX      A,@DPTR
   \   000135   68           XRL       A,R0
   \   000136   6003         JZ        $+5
   \   000138   02....       LJMP      ??bdb_filterNwkDisc_7 & 0xFFFF
   \   00013B   8E82         MOV       DPL,R6
   \   00013D   8F83         MOV       DPH,R7
   \   00013F   A3           INC       DPTR
   \   000140   A3           INC       DPTR
   \   000141   A3           INC       DPTR
   \   000142   A3           INC       DPTR
   \   000143   A3           INC       DPTR
   \   000144   A3           INC       DPTR
   \   000145   E0           MOVX      A,@DPTR
   \   000146   F8           MOV       R0,A
   \   000147   90....       MOV       DPTR,#zgStackProfile
   \   00014A   E0           MOVX      A,@DPTR
   \   00014B   68           XRL       A,R0
   \   00014C   7003         JNZ       $+5
   \   00014E   02....       LJMP      ??bdb_filterNwkDisc_7 & 0xFFFF
   \   000151   E0           MOVX      A,@DPTR
   \   000152   6401         XRL       A,#0x1
   \   000154   6003         JZ        $+5
   \   000156   02....       LJMP      ??bdb_filterNwkDisc_4 & 0xFFFF
   \   000159   8E82         MOV       DPL,R6
   \   00015B   8F83         MOV       DPH,R7
   \   00015D   A3           INC       DPTR
   \   00015E   A3           INC       DPTR
   \   00015F   A3           INC       DPTR
   \   000160   A3           INC       DPTR
   \   000161   A3           INC       DPTR
   \   000162   A3           INC       DPTR
   \   000163   E0           MOVX      A,@DPTR
   \   000164   6402         XRL       A,#0x2
   \   000166   6003         JZ        $+5
   \   000168   02....       LJMP      ??bdb_filterNwkDisc_5 & 0xFFFF
   \   00016B   02....       LJMP      ??bdb_filterNwkDisc_6 & 0xFFFF
   1842                    }
   1843                  }
   1844                }
   1845              }
   \                     ??bdb_filterNwkDisc_3:
   \   00016E   05..         INC       ?V2
   \   000170   E5..         MOV       A,?V2
   \   000172   C3           CLR       C
   \   000173   9402         SUBB      A,#0x2
   \   000175   5003         JNC       $+5
   \   000177   02....       LJMP      ??bdb_filterNwkDisc_2 & 0xFFFF
   1846            }
   1847          }
   \                     ??bdb_filterNwkDisc_1:
   \   00017A   02....       LJMP      ??Subroutine65_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   EE           MOV       A,R6
   \   000001   2414         ADD       A,#0x14
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F583         MOV       DPH,A
   \   000003   8882         MOV       DPL,R0
   \   000005   22           RET
   1848                
   1849           /*********************************************************************
   1850           * @fn          bdb_tryNwkAssoc
   1851           *
   1852           * @brief       Try to associate to the first network in the network descriptor list
   1853           *
   1854           * @param       none
   1855           *
   1856           * @return      none
   1857           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1858          static void bdb_tryNwkAssoc(void)
   \                     bdb_tryNwkAssoc:
   1859          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1860            if(pBDBListNwk)
   \   00000A   90....       MOV       DPTR,#pBDBListNwk
   \   00000D   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000010   90....       MOV       DPTR,#bdbCommissioningProcedureState + 2
   \   000013   6017         JZ        ??bdb_tryNwkAssoc_0
   1861            {
   1862              bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_ASSOC;
   \   000015   12....       LCALL     ?Subroutine17 & 0xFFFF
   1863              
   1864              //Try the first in the list after the filtering
   1865              if(ZSuccess != bdb_joinProcess(pBDBListNwk))
   \                     ??CrossCallReturnLabel_25:
   \   000018   12....       LCALL     `??bdb_joinProcess::?relay`; Banked call to: bdb_joinProcess
   \   00001B   E9           MOV       A,R1
   \   00001C   6030         JZ        ??bdb_tryNwkAssoc_1
   1866              {
   1867                //If fail, free the first in the list and prepare for futher processing, either next nwk or discover again
   1868                uint8 bdbJoinEvent = BDB_JOIN_EVENT_ASSOCIATION;
   \   00001E   85..82       MOV       DPL,?XSP + 0
   \   000021   85..83       MOV       DPH,?XSP + 1
   \   000024   12....       LCALL     ?Subroutine17 & 0xFFFF
   1869                bdb_nwkDescFree(pBDBListNwk);
   \                     ??CrossCallReturnLabel_26:
   \   000027   12....       LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
   1870                bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,BDB_MSG_EVENT_FAIL,sizeof(uint8),&bdbJoinEvent);
   \   00002A                ; Setup parameters for call to function bdb_SendMsg
   \   00002A   8009         SJMP      ??bdb_tryNwkAssoc_2
   1871              }
   1872            }
   1873            else
   1874            {
   1875              bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_NWK_DISC;
   \                     ??bdb_tryNwkAssoc_0:
   \   00002C   E4           CLR       A
   \   00002D   F0           MOVX      @DPTR,A
   1876              uint8 bdbJoinEvent = BDB_JOIN_EVENT_NWK_DISCOVERY;
   \   00002E   85..82       MOV       DPL,?XSP + 0
   \   000031   85..83       MOV       DPH,?XSP + 1
   \   000034   F0           MOVX      @DPTR,A
   1877              
   1878              bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,BDB_MSG_EVENT_FAIL,sizeof(uint8),&bdbJoinEvent);
   \   000035                ; Setup parameters for call to function bdb_SendMsg
   \                     ??bdb_tryNwkAssoc_2:
   \   000035   A8..         MOV       R0,?XSP + 0
   \   000037   A9..         MOV       R1,?XSP + 1
   \   000039   88..         MOV       ?V0,R0
   \   00003B   89..         MOV       ?V1,R1
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000042   7C01         MOV       R4,#0x1
   \   000044   7B01         MOV       R3,#0x1
   \   000046   7A03         MOV       R2,#0x3
   1879            }
   \   000048   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   00004B   12....       LCALL     ?DEALLOC_XSTACK8
   1880          }
   \                     ??bdb_tryNwkAssoc_1:
   \   00004E   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   7401         MOV       A,#0x1
   \   000002   F0           MOVX      @DPTR,A
   \   000003                ; Setup parameters for call to function bdb_joinProcess
   \   000003                ; Setup parameters for call to function bdb_nwkDescFree
   \   000003   90....       MOV       DPTR,#pBDBListNwk
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FA           MOV       R2,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   FB           MOV       R3,A
   \   00000B   22           RET
   1881          
   1882          
   1883          
   1884           /*********************************************************************
   1885           * @fn          bdb_nwkAssocAttemt
   1886           *
   1887           * @brief       Process the result of an attempt to associate to a network 
   1888           *
   1889           * @param       didSuccess - bool
   1890           *
   1891           * @return      none
   1892           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1893          void bdb_nwkAssocAttemt(bool didSuccess)
   \                     bdb_nwkAssocAttemt:
   1894          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1895            bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_STATE_JOINING;
   \   00000A   90....       MOV       DPTR,#bdbAttributes + 10
   \   00000D   7403         MOV       A,#0x3
   \   00000F   F0           MOVX      @DPTR,A
   1896            uint8 bdbJoinEvent = BDB_JOIN_EVENT_ASSOCIATION;
   \   000010   85..82       MOV       DPL,?XSP + 0
   \   000013   85..83       MOV       DPH,?XSP + 1
   \   000016   7401         MOV       A,#0x1
   \   000018   F0           MOVX      @DPTR,A
   1897            uint8 status;
   1898            
   1899            if(didSuccess)
   \   000019   E9           MOV       A,R1
   \   00001A   6004         JZ        ??bdb_nwkAssocAttemt_0
   1900            {
   1901              status = BDB_MSG_EVENT_SUCCESS;
   \   00001C   7B00         MOV       R3,#0x0
   \   00001E   8017         SJMP      ??bdb_nwkAssocAttemt_1
   1902            }
   1903            else
   1904            {
   1905              if(bdb_nwkAssocRetriesCount < BDBC_REC_SAME_NETWORK_RETRY_ATTEMPS)
   \                     ??bdb_nwkAssocAttemt_0:
   \   000020   90....       MOV       DPTR,#bdb_nwkAssocRetriesCount
   \   000023   E0           MOVX      A,@DPTR
   \   000024   C3           CLR       C
   \   000025   9403         SUBB      A,#0x3
   \   000027   5004         JNC       ??bdb_nwkAssocAttemt_2
   1906              {
   1907                bdb_nwkAssocRetriesCount++;
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   04           INC       A
   \   00002B   8007         SJMP      ??bdb_nwkAssocAttemt_3
   1908              }
   1909              else
   1910              {
   1911                //Free the first in the list and prepare for futher processing
   1912                bdb_nwkDescFree(pBDBListNwk);
   \                     ??bdb_nwkAssocAttemt_2:
   \   00002D                ; Setup parameters for call to function bdb_nwkDescFree
   \   00002D   12....       LCALL     ?Subroutine23 & 0xFFFF
   1913                bdb_nwkAssocRetriesCount = 0;
   \                     ??CrossCallReturnLabel_34:
   \   000030   90....       MOV       DPTR,#bdb_nwkAssocRetriesCount
   \   000033   E4           CLR       A
   \                     ??bdb_nwkAssocAttemt_3:
   \   000034   F0           MOVX      @DPTR,A
   1914              }
   1915              status = BDB_MSG_EVENT_FAIL;
   \   000035   7B01         MOV       R3,#0x1
   1916            }
   1917            bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,status,sizeof(uint8),&bdbJoinEvent);
   \                     ??bdb_nwkAssocAttemt_1:
   \   000037                ; Setup parameters for call to function bdb_SendMsg
   \   000037   A8..         MOV       R0,?XSP + 0
   \   000039   A9..         MOV       R1,?XSP + 1
   \   00003B   88..         MOV       ?V0,R0
   \   00003D   89..         MOV       ?V1,R1
   \   00003F   78..         MOV       R0,#?V0
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000044   7C01         MOV       R4,#0x1
   \   000046   7A03         MOV       R2,#0x3
   \   000048   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   00004B   12....       LCALL     ?DEALLOC_XSTACK8
   1918          }
   \   00004E   02....       LJMP      ?Subroutine1 & 0xFFFF
   1919                                 
   1920          
   1921          /****************************************************************************
   1922           * @fn          bdb_nwkDescFree
   1923           *
   1924           * @brief       This function frees one network discovery data.
   1925           *
   1926           * @param       ZSuccess - If the device was found and erased
   1927           * @param       ZInvalidParameter - Not found
   1928           *
   1929           * @return      none
   1930           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1931          ZStatus_t bdb_nwkDescFree(networkDesc_t* nodeDescToRemove)
   \                     bdb_nwkDescFree:
   1932          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1933            networkDesc_t* current_desc;
   1934            networkDesc_t* prev_desc;
   1935            
   1936            current_desc = pBDBListNwk;
   \   000004   90....       MOV       DPTR,#pBDBListNwk
   \   000007   800A         SJMP      ??bdb_nwkDescFree_0
   1937          
   1938            while(current_desc != NULL)
   1939            {  
   1940              if(current_desc == nodeDescToRemove)
   1941              {
   1942                if (current_desc == pBDBListNwk)
   1943                {
   1944                  pBDBListNwk = pBDBListNwk->nextDesc;
   1945                }
   1946                else
   1947                {
   1948                  prev_desc->nextDesc = current_desc->nextDesc;
   1949                }
   1950                
   1951                osal_mem_free( current_desc );
   1952                
   1953                return ZSuccess;
   1954              }
   1955          
   1956              prev_desc = current_desc;
   \                     ??bdb_nwkDescFree_1:
   \   000009   E8           MOV       A,R0
   \   00000A   FC           MOV       R4,A
   \   00000B   E9           MOV       A,R1
   \   00000C   FD           MOV       R5,A
   1957              current_desc = current_desc->nextDesc;
   \   00000D   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000010   39           ADDC      A,R1
   \   000011   F583         MOV       DPH,A
   \                     ??bdb_nwkDescFree_0:
   \   000013   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000016   603F         JZ        ??bdb_nwkDescFree_2
   \   000018   EA           MOV       A,R2
   \   000019   68           XRL       A,R0
   \   00001A   7002         JNZ       ??bdb_nwkDescFree_3
   \   00001C   EB           MOV       A,R3
   \   00001D   69           XRL       A,R1
   \                     ??bdb_nwkDescFree_3:
   \   00001E   70E9         JNZ       ??bdb_nwkDescFree_1
   \   000020   90....       MOV       DPTR,#pBDBListNwk
   \   000023   12....       LCALL     ??Subroutine71_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000026   E8           MOV       A,R0
   \   000027   6A           XRL       A,R2
   \   000028   7002         JNZ       ??bdb_nwkDescFree_4
   \   00002A   E9           MOV       A,R1
   \   00002B   6B           XRL       A,R3
   \                     ??bdb_nwkDescFree_4:
   \   00002C   700D         JNZ       ??bdb_nwkDescFree_5
   \   00002E   EA           MOV       A,R2
   \   00002F   12....       LCALL     ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000032   3B           ADDC      A,R3
   \   000033   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000036   90....       MOV       DPTR,#pBDBListNwk
   \   000039   800E         SJMP      ??bdb_nwkDescFree_6
   \                     ??bdb_nwkDescFree_5:
   \   00003B   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   00003E   39           ADDC      A,R1
   \   00003F   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000042   EC           MOV       A,R4
   \   000043   12....       LCALL     ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000046   3D           ADDC      A,R5
   \   000047   F583         MOV       DPH,A
   \                     ??bdb_nwkDescFree_6:
   \   000049   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00004C                ; Setup parameters for call to function osal_mem_free
   \   00004C   E8           MOV       A,R0
   \   00004D   FA           MOV       R2,A
   \   00004E   E9           MOV       A,R1
   \   00004F   FB           MOV       R3,A
   \   000050   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000053   7900         MOV       R1,#0x0
   \   000055   8002         SJMP      ??bdb_nwkDescFree_7
   1958            }
   1959            
   1960            return ZInvalidParameter;
   \                     ??bdb_nwkDescFree_2:
   \   000057   7902         MOV       R1,#0x2
   \                     ??bdb_nwkDescFree_7:
   \   000059   02....       LJMP      ??Subroutine54_0 & 0xFFFF
   1961          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E8           MOV       A,R0
   \   000001                REQUIRE ??Subroutine59_0
   \   000001                ; // Fall through to label ??Subroutine59_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   2414         ADD       A,#0x14
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET
   1962          
   1963          /*********************************************************************
   1964          * @fn          bdb_joinProcess
   1965          *
   1966          * @brief       Start the joining process for the selected nwk
   1967          *
   1968          * @return      ZStatus_t
   1969          */  

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1970          ZStatus_t bdb_joinProcess(networkDesc_t *pChosenNwk)
   \                     bdb_joinProcess:
   1971          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1972            ZStatus_t status;
   1973           
   1974            ZDApp_ChangeState( DEV_NWK_JOINING );
   \   000009                ; Setup parameters for call to function ZDApp_ChangeState
   \   000009   7903         MOV       R1,#0x3
   \   00000B   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1975            ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
   \   00000E                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00000E   8E82         MOV       DPL,R6
   \   000010   8F83         MOV       DPH,R7
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F9           MOV       R1,A
   \   00001A   12....       LCALL     `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   1976          
   1977            status =  NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
   1978                                  pChosenNwk->logicalChannel,
   1979                                  ZDO_Config_Node_Descriptor.CapabilityFlags,
   1980                                  pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth );
   \   00001D                ; Setup parameters for call to function NLME_JoinRequest
   \   00001D   8E82         MOV       DPL,R6
   \   00001F   8F83         MOV       DPH,R7
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F5..         MOV       ?V0,A
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000033   8E82         MOV       DPL,R6
   \   000035   8F83         MOV       DPH,R7
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000041   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F5..         MOV       ?V0,A
   \   000047   78..         MOV       R0,#?V0
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004C   8E82         MOV       DPL,R6
   \   00004E   8F83         MOV       DPH,R7
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   F9           MOV       R1,A
   \   000054   8E82         MOV       DPL,R6
   \   000056   8F83         MOV       DPH,R7
   \   000058   E0           MOVX      A,@DPTR
   \   000059   FC           MOV       R4,A
   \   00005A   A3           INC       DPTR
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   FD           MOV       R5,A
   \   00005D   EE           MOV       A,R6
   \   00005E   240B         ADD       A,#0xb
   \   000060   FA           MOV       R2,A
   \   000061   E4           CLR       A
   \   000062   3F           ADDC      A,R7
   \   000063   FB           MOV       R3,A
   \   000064   12....       LCALL     `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   000067   7404         MOV       A,#0x4
   \   000069   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006C   E9           MOV       A,R1
   \   00006D   FE           MOV       R6,A
   1981            
   1982            if(status == ZSuccess)
   \   00006E   7059         JNZ       ??bdb_joinProcess_0
   1983            {
   1984              // The receiver is on, turn network layer polling off.
   1985              if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \   000070   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000073   E0           MOVX      A,@DPTR
   \   000074   A2E3         MOV       C,0xE0 /* A   */.3
   \   000076   502E         JNC       ??bdb_joinProcess_1
   1986              {
   1987                // for an End Device with NO Child Table Management process or for a Router
   1988                if ( ( ZG_DEVICE_RTR_TYPE )  ||
   1989                     ( (ZG_DEVICE_ENDDEVICE_TYPE) && ( zgChildAgingEnable == FALSE ) ) )
   \   000078   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   600F         JZ        ??bdb_joinProcess_2
   \   00007E   6401         XRL       A,#0x1
   \   000080   600B         JZ        ??bdb_joinProcess_2
   \   000082   E0           MOVX      A,@DPTR
   \   000083   6402         XRL       A,#0x2
   \   000085   7042         JNZ       ??bdb_joinProcess_0
   \   000087   90....       MOV       DPTR,#zgChildAgingEnable
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   703C         JNZ       ??bdb_joinProcess_0
   1990                {
   1991                  NLME_SetPollRate( 0 );
   \                     ??bdb_joinProcess_2:
   \   00008D                ; Setup parameters for call to function NLME_SetPollRate
   \   00008D   90....       MOV       DPTR,#__Constant_0
   \   000090   12....       LCALL     ?XLOAD_R2345
   \   000093   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1992                  NLME_SetQueuedPollRate( 0 );
   \   000096                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000096   7A00         MOV       R2,#0x0
   \   000098   7B00         MOV       R3,#0x0
   \   00009A   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1993                  NLME_SetResponseRate( 0 );
   \   00009D                ; Setup parameters for call to function NLME_SetResponseRate
   \   00009D   7A00         MOV       R2,#0x0
   \   00009F   7B00         MOV       R3,#0x0
   \   0000A1   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   \   0000A4   8023         SJMP      ??bdb_joinProcess_0
   1994                }
   1995              }
   1996              else
   1997              {
   1998                if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   \                     ??bdb_joinProcess_1:
   \   0000A6   90....       MOV       DPTR,#devStartMode
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   701D         JNZ       ??bdb_joinProcess_0
   1999                {
   2000                  ZDApp_SavedPollRate = zgPollRate;
   \   0000AC   90....       MOV       DPTR,#zgPollRate
   \   0000AF   12....       LCALL     ?XLOAD_R0123
   \   0000B2   90....       MOV       DPTR,#ZDApp_SavedPollRate
   \   0000B5   12....       LCALL     ?XSTORE_R0123
   2001                  NLME_SetPollRate( zgRejoinPollRate );
   \   0000B8                ; Setup parameters for call to function NLME_SetPollRate
   \   0000B8   90....       MOV       DPTR,#zgRejoinPollRate
   \   0000BB   E0           MOVX      A,@DPTR
   \   0000BC   F5..         MOV       ?V0,A
   \   0000BE   A3           INC       DPTR
   \   0000BF   E0           MOVX      A,@DPTR
   \   0000C0   AA..         MOV       R2,?V0
   \   0000C2   FB           MOV       R3,A
   \   0000C3   E4           CLR       A
   \   0000C4   FC           MOV       R4,A
   \   0000C5   FD           MOV       R5,A
   \   0000C6   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   2002                }
   2003              }
   2004            }
   2005            return status;
   \                     ??bdb_joinProcess_0:
   \   0000C9   EE           MOV       A,R6
   \   0000CA   F9           MOV       R1,A
   \   0000CB   02....       LJMP      ??Subroutine69_0 & 0xFFFF
   2006          }
   2007          #endif
   2008          
   2009          
   2010           /*********************************************************************
   2011           * @fn          bdb_setChannelAttribute
   2012           *
   2013           * @brief       Set the primary or seconday channel for discovery or formation procedure
   2014           *
   2015           * @param       isPrimaryChannel - True if channel to set is primary,  
   2016           *                                 False if the channel to set is secondary
   2017           *
   2018           * @param       channel - Channel mask
   2019           *
   2020           * @return      none
   2021           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2022          void bdb_setChannelAttribute(bool isPrimaryChannel, uint32 channel)
   \                     bdb_setChannelAttribute:
   2023          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   2024            if(isPrimaryChannel)
   \   00000D   E9           MOV       A,R1
   \   00000E   6005         JZ        ??bdb_setChannelAttribute_0
   2025            {
   2026              bdbAttributes.bdbPrimaryChannelSet = channel;
   \   000010   90....       MOV       DPTR,#bdbAttributes + 4
   \   000013   8003         SJMP      ??bdb_setChannelAttribute_1
   2027            }
   2028            else
   2029            {
   2030              bdbAttributes.bdbSecondaryChannelSet = channel;
   \                     ??bdb_setChannelAttribute_0:
   \   000015   90....       MOV       DPTR,#bdbAttributes
   \                     ??bdb_setChannelAttribute_1:
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?L_MOV_TO_X
   2031            }
   2032          }
   \   00001D   02....       LJMP      ??Subroutine65_0 & 0xFFFF
   2033          
   2034           /*********************************************************************
   2035           * @fn          bdb_setChannel
   2036           *
   2037           * @brief       Set channel and save it in Nv for joining/formation operations
   2038           *
   2039           * @param       channel - Channel mask
   2040           *
   2041           * @return      none
   2042           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2043          void bdb_setChannel(uint32 channel)
   \                     bdb_setChannel:
   2044          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   2045            //Assign the channel and save it into nv
   2046            vScanChannels = channel;
   \   00000D   90....       MOV       DPTR,#zgDefaultChannelList
   \   000010   78..         MOV       R0,#?V0
   \   000012   12....       LCALL     ?L_MOV_TO_X
   2047            runtimeChannel = channel;
   \   000015   90....       MOV       DPTR,#runtimeChannel
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?L_MOV_TO_X
   2048              
   2049            osal_nv_write(ZCD_NV_CHANLIST,0,sizeof(uint32),&vScanChannels);
   \   00001D                ; Setup parameters for call to function osal_nv_write
   \   00001D   75....       MOV       ?V0,#zgDefaultChannelList & 0xff
   \   000020   75....       MOV       ?V1,#(zgDefaultChannelList >> 8) & 0xff
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   75..04       MOV       ?V0,#0x4
   \   00002B   75..00       MOV       ?V1,#0x0
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   7C00         MOV       R4,#0x0
   \   000035   7D00         MOV       R5,#0x0
   \   000037   7A84         MOV       R2,#-0x7c
   \   000039   7B00         MOV       R3,#0x0
   \   00003B   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003E   02....       LJMP      ?Subroutine4 & 0xFFFF
   2050          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7404         MOV       A,#0x4
   \   000002                REQUIRE ??Subroutine64_0
   \   000002                ; // Fall through to label ??Subroutine64_0
   2051          
   2052          
   2053           /*********************************************************************
   2054           * @fn          bdb_nwkJoiningFormation   
   2055           *
   2056           * @brief       Performs Joining/Formation operation on primary or secondary channel
   2057           *
   2058           * @param       isJoining - TRUE if the device is performing joining, FALSE is performing Formation
   2059           *
   2060           * @return      none
   2061           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2062          void bdb_nwkJoiningFormation(bool isJoining)
   \                     bdb_nwkJoiningFormation:
   2063          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   2064            
   2065            if((vDoPrimaryScan) && (bdbAttributes.bdbPrimaryChannelSet))
   \   000007   90....       MOV       DPTR,#vDoPrimaryScan
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   6011         JZ        ??bdb_nwkJoiningFormation_0
   \   00000D   90....       MOV       DPTR,#bdbAttributes + 4
   \   000010   12....       LCALL     ?XLOAD_R0123
   \   000013   E8           MOV       A,R0
   \   000014   49           ORL       A,R1
   \   000015   4A           ORL       A,R2
   \   000016   4B           ORL       A,R3
   \   000017   6005         JZ        ??bdb_nwkJoiningFormation_0
   2066            {
   2067              bdb_setChannel(bdbAttributes.bdbPrimaryChannelSet);
   \   000019                ; Setup parameters for call to function bdb_setChannel
   \   000019   90....       MOV       DPTR,#bdbAttributes + 4
   \   00001C   8008         SJMP      ??bdb_nwkJoiningFormation_1
   2068            }
   2069            else
   2070            {
   2071              vDoPrimaryScan = FALSE;
   \                     ??bdb_nwkJoiningFormation_0:
   \   00001E   90....       MOV       DPTR,#vDoPrimaryScan
   \   000021   E4           CLR       A
   \   000022   F0           MOVX      @DPTR,A
   2072              bdb_setChannel(bdbAttributes.bdbSecondaryChannelSet);
   \   000023                ; Setup parameters for call to function bdb_setChannel
   \   000023   90....       MOV       DPTR,#bdbAttributes
   \                     ??bdb_nwkJoiningFormation_1:
   \   000026   12....       LCALL     ?XLOAD_R2345
   \   000029   12....       LCALL     `??bdb_setChannel::?relay`; Banked call to: bdb_setChannel
   2073            }
   2074          
   2075            if(vScanChannels)
   \   00002C   90....       MOV       DPTR,#zgDefaultChannelList
   \   00002F   12....       LCALL     ?XLOAD_R0123
   \   000032   E8           MOV       A,R0
   \   000033   49           ORL       A,R1
   \   000034   4A           ORL       A,R2
   \   000035   4B           ORL       A,R3
   \   000036   601A         JZ        ??bdb_nwkJoiningFormation_2
   2076            {
   2077              if(ZG_DEVICE_RTRONLY_TYPE)
   \   000038   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   6401         XRL       A,#0x1
   \   00003E   7007         JNZ       ??bdb_nwkJoiningFormation_3
   2078              {
   2079                if(isJoining)
   \   000040   EE           MOV       A,R6
   \   000041   7004         JNZ       ??bdb_nwkJoiningFormation_3
   2080                {
   2081                  ZDOInitDeviceEx(100,0);
   2082                }
   2083                else
   2084                {
   2085                  ZDOInitDeviceEx(100,1);
   \   000043                ; Setup parameters for call to function ZDOInitDeviceEx
   \   000043   7901         MOV       R1,#0x1
   \   000045   8002         SJMP      ??bdb_nwkJoiningFormation_4
   2086                }
   2087              }
   2088              //ZED can only join, and ZC can only create
   2089              else
   2090              {
   2091                ZDOInitDeviceEx(100,0);
   \                     ??bdb_nwkJoiningFormation_3:
   \   000047                ; Setup parameters for call to function ZDOInitDeviceEx
   \   000047   7900         MOV       R1,#0x0
   \                     ??bdb_nwkJoiningFormation_4:
   \   000049   7A64         MOV       R2,#0x64
   \   00004B   7B00         MOV       R3,#0x0
   \   00004D   12....       LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
   \   000050   800E         SJMP      ??bdb_nwkJoiningFormation_5
   2092              }
   2093            }
   2094            else
   2095            {
   2096              if(isJoining)
   \                     ??bdb_nwkJoiningFormation_2:
   \   000052   EE           MOV       A,R6
   \   000053   7A00         MOV       R2,#0x0
   \   000055   6004         JZ        ??bdb_nwkJoiningFormation_6
   2097              {
   2098                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, FALSE);
   \   000057                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000057   7903         MOV       R1,#0x3
   \   000059   8002         SJMP      ??bdb_nwkJoiningFormation_7
   2099              }
   2100              else
   2101              {
   2102                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
   \                     ??bdb_nwkJoiningFormation_6:
   \   00005B                ; Setup parameters for call to function bdb_reportCommissioningState
   \   00005B   7905         MOV       R1,#0x5
   \                     ??bdb_nwkJoiningFormation_7:
   \   00005D   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2103              }
   2104            }
   2105          }
   \                     ??bdb_nwkJoiningFormation_5:
   \   000060                REQUIRE ?Subroutine0
   \   000060                ; // Fall through to label ?Subroutine0
   2106          
   2107          #if (ZG_BUILD_JOINING_TYPE)
   2108           /*********************************************************************
   2109           * @fn          bdb_tcLinkKeyExchangeAttempt
   2110           *
   2111           * @brief       Generic send msg for TC link key exchange process attempts
   2112           *
   2113           * @param       didSuccess - FALSE if the step failed/timeout, TRUE otherwise
   2114           * @param       bdbTCExchangeState - Step in which the attemp was done
   2115           *
   2116           * @return      none
   2117           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2118          void bdb_tcLinkKeyExchangeAttempt(bool didSuccess, uint8 bdbTCExchangeState)
   \                     bdb_tcLinkKeyExchangeAttempt:
   2119          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2120            bool bdbEventStatus = BDB_MSG_EVENT_SUCCESS;
   \   00000A   7E00         MOV       R6,#0x0
   2121            uint8 dummy;
   2122            bdbCommissioningProcedureState.bdbTCExchangeState = bdbTCExchangeState;
   \   00000C   EA           MOV       A,R2
   \   00000D   90....       MOV       DPTR,#bdbCommissioningProcedureState + 1
   \   000010   F0           MOVX      @DPTR,A
   2123            if(didSuccess)
   \   000011   E9           MOV       A,R1
   \   000012   600A         JZ        ??bdb_tcLinkKeyExchangeAttempt_0
   2124            {
   2125              //Allow try since we are performing a new step.
   2126              osal_stop_timerEx(bdb_TaskID, BDB_PROCESS_TIMEOUT);
   \   000014                ; Setup parameters for call to function osal_stop_timerEx
   \   000014   12....       LCALL     ?Subroutine25 & 0xFFFF
   2127              bdbAttributes.bdbTCLinkKeyExchangeAttempts = 0;
   \                     ??CrossCallReturnLabel_149:
   \   000017   90....       MOV       DPTR,#bdbAttributes + 19
   \   00001A   E4           CLR       A
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   8002         SJMP      ??bdb_tcLinkKeyExchangeAttempt_1
   2128            }
   2129            else
   2130            {
   2131              bdbEventStatus = BDB_MSG_EVENT_FAIL;
   \                     ??bdb_tcLinkKeyExchangeAttempt_0:
   \   00001E   7E01         MOV       R6,#0x1
   2132            }
   2133            bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE,bdbEventStatus,1, &dummy);
   \                     ??bdb_tcLinkKeyExchangeAttempt_1:
   \   000020                ; Setup parameters for call to function bdb_SendMsg
   \   000020   A8..         MOV       R0,?XSP + 0
   \   000022   A9..         MOV       R1,?XSP + 1
   \   000024   88..         MOV       ?V2,R0
   \   000026   89..         MOV       ?V3,R1
   \   000028   78..         MOV       R0,#?V2
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   7C01         MOV       R4,#0x1
   \   00002F   EE           MOV       A,R6
   \   000030   FB           MOV       R3,A
   \   000031   7A01         MOV       R2,#0x1
   \   000033   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000036   12....       LCALL     ?DEALLOC_XSTACK8
   2134          }
   \   000039   7401         MOV       A,#0x1
   \   00003B   02....       LJMP      ??Subroutine64_0 & 0xFFFF
   2135          
   2136          
   2137           /*********************************************************************
   2138           * @fn          bdb_requestVerifyTCLinkKey
   2139           *
   2140           * @brief       Attempt to verify the TC link key by sending Verify Key Request
   2141           *
   2142           * @param       none
   2143           *
   2144           * @return      none
   2145           */
   2146          void bdb_requestVerifyTCLinkKey(void)
   2147          {
   2148              uint8 TC_ExtAddr[Z_EXTADDR_LEN];
   2149              APSME_VerifyKeyReq_t vKey;
   2150              
   2151              APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
   2152              
   2153              vKey.tcExtAddr = TC_ExtAddr;
   2154              vKey.keyType = KEY_TYPE_TC_LINK;
   2155              
   2156              APSME_VerifyKeyReq( &vKey );
   2157              
   2158              osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
   2159              osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT,BDBC_TC_LINK_KEY_EXANGE_TIMEOUT);
   2160              
   2161          }
   2162          
   2163          /*********************************************************************
   2164           * @fn          bdb_requestTCLinkKey
   2165           *
   2166           * @brief       Attempt to request a TC link key
   2167           *
   2168           * @param       none
   2169           *
   2170           * @return      none
   2171           */
   2172          void bdb_requestTCLinkKey(void)
   2173          {
   2174            zAddrType_t destAddr;
   2175            APSME_RequestKeyReq_t req;
   2176          
   2177            destAddr.addrMode = Addr16Bit;
   2178            destAddr.addr.shortAddr = 0x0000;
   2179            
   2180            req.dstAddr = destAddr.addr.shortAddr;
   2181            req.keyType = KEY_TYPE_TC_LINK;
   2182            
   2183            APSME_RequestKeyReq(&req);
   2184            
   2185            osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
   2186            
   2187            osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT,(uint32)requestLinkKeyTimeout);
   2188          } 
   2189          
   2190          
   2191          /*********************************************************************
   2192           * @fn          bdb_requestTCStackVersion
   2193           *
   2194           * @brief       Attempt to request the TC stack version using ZDP Node desc if 
   2195           *              join a Centralized nwk
   2196           *
   2197           * @param       none
   2198           *
   2199           * @return      none
   2200           */
   2201          void bdb_requestTCStackVersion(void)
   2202          {
   2203            if(requestNewTrustCenterLinkKey)
   2204            {
   2205              if(!APSME_IsDistributedSecurity())
   2206              {
   2207                if(bdbAttributes.bdbTCLinkKeyExchangeMethod == BDB_TC_LINK_KEY_EXCHANGE_APS_KEY)
   2208                {
   2209                  zAddrType_t destAddr;
   2210                 
   2211                  destAddr.addrMode = Addr16Bit;
   2212                  destAddr.addr.shortAddr = 0x0000;
   2213                 
   2214                  ZDP_NodeDescReq( &destAddr, destAddr.addr.shortAddr, 0);  
   2215                  
   2216                  osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
   2217                  osal_start_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT, BDBC_TC_LINK_KEY_EXANGE_TIMEOUT );
   2218                  return;
   2219                }
   2220                else
   2221                {
   2222                  if(pfnCBKETCLinkKeyExchange)
   2223                  {
   2224                    pfnCBKETCLinkKeyExchange();
   2225                  }
   2226                  return;
   2227                }
   2228              }
   2229              else
   2230              {
   2231                bdb_setNodeJoinLinkKeyType(BDB_DISTRIBUTED_SECURITY_GLOBAL_LINK_KEY);
   2232              }
   2233            }
   2234            else
   2235            {
   2236              //Key not required, set default which is global
   2237              bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
   2238            }
   2239            //TC link key not required or join distributed nwk
   2240            bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE,TRUE);
   2241          }
   2242          #endif
   2243          
   2244          
   2245          /*********************************************************************
   2246           * @fn          bdb_nwkSteeringDeviceOnNwk
   2247           *
   2248           * @brief       Send ZDP mgmt permit joining
   2249           *
   2250           * @param       none
   2251           *
   2252           * @return      none
   2253           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2254          void bdb_nwkSteeringDeviceOnNwk(void)
   \                     bdb_nwkSteeringDeviceOnNwk:
   2255          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 9
   \   000004   74F7         MOV       A,#-0x9
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   2256            zAddrType_t dstAddr;
   2257            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
   \   000009   85..82       MOV       DPL,?XSP + 0
   \   00000C   85..83       MOV       DPH,?XSP + 1
   \   00000F   74FC         MOV       A,#-0x4
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   74FF         MOV       A,#-0x1
   \   000015   F0           MOVX      @DPTR,A
   2258            dstAddr.addrMode = AddrBroadcast;
   \   000016   7408         MOV       A,#0x8
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   740F         MOV       A,#0xf
   \   00001D   F0           MOVX      @DPTR,A
   2259            // Trust Center significance is always true
   2260            ZDP_MgmtPermitJoinReq( &dstAddr, BDBC_MIN_COMMISSIONING_TIME, TRUE, FALSE );
   \   00001E                ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
   \   00001E   7D00         MOV       R5,#0x0
   \   000020   7C01         MOV       R4,#0x1
   \   000022   79B4         MOV       R1,#-0x4c
   \   000024   AA..         MOV       R2,?XSP + 0
   \   000026   AB..         MOV       R3,?XSP + 1
   \   000028   12....       LCALL     `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
   2261          }
   \   00002B   7409         MOV       A,#0x9
   \   00002D                REQUIRE ?Subroutine5
   \   00002D                ; // Fall through to label ?Subroutine5
   2262          
   2263          
   2264          /*********************************************************************
   2265           * @fn          bdb_startResumeCommissioningProcess
   2266           *
   2267           * @brief       Starts or resume the commissioning operations sets in the 
   2268           *              commissioningMode attribute
   2269           *
   2270           * @param       none
   2271           *
   2272           * @return      none
   2273           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2274          void bdb_startResumeCommissioningProcess(void)
   \                     bdb_startResumeCommissioningProcess:
   2275          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2276          
   2277          #if ( defined ( BDB_TL_INITIATOR ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) ) 
   2278            if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_INITIATOR_TL)
   2279            {
   2280              uint16 nwkAddr;
   2281          
   2282              //Does the device supports this commissioning mode?
   2283              if(bdbAttributes.bdbNodeCommissioningCapability & BDB_TOUCHLINK_CAPABILITY)
   2284              {
   2285                //Clear previous state and substates
   2286                osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState));
   2287                bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_TL;
   2288                
   2289                // Get our short address
   2290                ZMacGetReq( ZMacShortAddress, (byte*)&nwkAddr );
   2291                if ( nwkAddr >= NWK_BROADCAST_SHORTADDR_DEVZCZR )
   2292                {
   2293                  initiatorSelectNwkParams();
   2294                }
   2295                
   2296                touchLinkInitiator_StartDevDisc( );  
   2297                
   2298                bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_TOUCHLINK);
   2299              }
   2300              else
   2301              {
   2302                //Process the next commissioning mode
   2303                bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, FALSE );
   2304              }
   2305              return;
   2306            }
   2307          #endif // BDB_TOUCHLINK_CAPABILITY_ENABLED  
   2308            
   2309          #if ZG_BUILD_ENDDEVICE_TYPE
   2310            if(ZG_DEVICE_ENDDEVICE_TYPE)
   \   000004   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6402         XRL       A,#0x2
   \   00000A   7008         JNZ       ??bdb_startResumeCommissioningProcess_0
   2311            {
   2312              if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)
   \   00000C   90....       MOV       DPTR,#bdbAttributes + 11
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   A2E5         MOV       C,0xE0 /* A   */.5
   \   000012   407E         JC        ??bdb_startResumeCommissioningProcess_1
   2313              {
   2314                //No commissioning process can be performed if the ZED has lost its parent
   2315                return;
   2316              }
   2317            }
   2318          #endif
   2319            
   2320            if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_NWK_STEERING)
   \                     ??bdb_startResumeCommissioningProcess_0:
   \   000014   90....       MOV       DPTR,#bdbAttributes + 11
   \   000017   E0           MOVX      A,@DPTR
   \   000018   A2E1         MOV       C,0xE0 /* A   */.1
   \   00001A   5045         JNC       ??bdb_startResumeCommissioningProcess_2
   2321            {
   2322              bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_STEERING_ON_NWK;
   \   00001C   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00001F   7404         MOV       A,#0x4
   \   000021   F0           MOVX      @DPTR,A
   2323              
   2324              if(bdbAttributes.bdbNodeCommissioningCapability & BDB_NETWORK_STEERING_CAPABILITY)
   \   000022   90....       MOV       DPTR,#bdbAttributes + 12
   \   000025   E0           MOVX      A,@DPTR
   \   000026   A2E0         MOV       C,0xE0 /* A   */.0
   \   000028   5068         JNC       ??bdb_startResumeCommissioningProcess_1
   2325              {
   2326          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
   2327                bdb_ClearNetworkParams();
   2328          #endif
   2329                if(bdbAttributes.bdbNodeIsOnANetwork)
   \   00002A   90....       MOV       DPTR,#bdbAttributes + 14
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   6005         JZ        ??bdb_startResumeCommissioningProcess_3
   2330                {
   2331                  bdb_nwkSteeringDeviceOnNwk();
   \   000030                ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
   \   000030   12....       LCALL     ?Subroutine38 & 0xFFFF
   2332                  bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
   2333                }
   \                     ??CrossCallReturnLabel_60:
   \   000033   801D         SJMP      ??bdb_startResumeCommissioningProcess_4
   2334          #if (ZG_BUILD_JOINING_TYPE)
   2335                else
   2336                {
   2337                  if(ZG_DEVICE_JOINING_TYPE)
   \                     ??bdb_startResumeCommissioningProcess_3:
   \   000035   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000038   E0           MOVX      A,@DPTR
   \   000039   6401         XRL       A,#0x1
   \   00003B   6005         JZ        ??bdb_startResumeCommissioningProcess_5
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   6402         XRL       A,#0x2
   \   000040   7010         JNZ       ??bdb_startResumeCommissioningProcess_4
   2338                  {
   2339                    vDoPrimaryScan = TRUE;
   \                     ??bdb_startResumeCommissioningProcess_5:
   \   000042   12....       LCALL     ?Subroutine8 & 0xFFFF
   2340                    
   2341                    //Initialize the commissioning procedure state, bdbJoinState to nwk discovery and TCLinkKeyExchange to not active
   2342                    osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState_t));
   2343                    bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_JOINING;
   \                     ??CrossCallReturnLabel_2:
   \   000045   7403         MOV       A,#0x3
   \   000047   F0           MOVX      @DPTR,A
   2344                    bdb_nwkJoiningFormation(TRUE);
   \   000048                ; Setup parameters for call to function bdb_nwkJoiningFormation
   \   000048   7901         MOV       R1,#0x1
   \   00004A   12....       LCALL     `??bdb_nwkJoiningFormation::?relay`; Banked call to: bdb_nwkJoiningFormation
   2345                    bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_NWK_STEERING);
   \   00004D                ; Setup parameters for call to function bdb_NotifyCommissioningModeStart
   \   00004D   7901         MOV       R1,#0x1
   \   00004F   12....       LCALL     `??bdb_NotifyCommissioningModeStart::?relay`; Banked call to: bdb_NotifyCommissioningModeStart
   2346                  }
   2347                }
   2348          #endif
   2349          #if (ZG_BUILD_COORDINATOR_TYPE)
   2350                if(ZG_DEVICE_COORDINATOR_TYPE)
   \                     ??bdb_startResumeCommissioningProcess_4:
   \   000052   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000055   E0           MOVX      A,@DPTR
   \   000056   703A         JNZ       ??bdb_startResumeCommissioningProcess_1
   2351                {
   2352                  bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, FALSE);
   \   000058                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000058   7A00         MOV       R2,#0x0
   \   00005A   7904         MOV       R1,#0x4
   \   00005C   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2353                }
   2354          #endif
   2355              }
   2356              return;
   \                     ??bdb_startResumeCommissioningProcess_6:
   \   00005F   8031         SJMP      ??bdb_startResumeCommissioningProcess_1
   2357            }
   2358            
   2359            if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_NWK_FORMATION)
   \                     ??bdb_startResumeCommissioningProcess_2:
   \   000061   A2E2         MOV       C,0xE0 /* A   */.2
   \   000063   502D         JNC       ??bdb_startResumeCommissioningProcess_1
   2360            {
   2361              bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FORMATION;
   \   000065   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000068   7405         MOV       A,#0x5
   \   00006A   F0           MOVX      @DPTR,A
   2362              
   2363              if(bdbAttributes.bdbNodeCommissioningCapability & BDB_NETWORK_FORMATION_CAPABILITY)
   \   00006B   90....       MOV       DPTR,#bdbAttributes + 12
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   A2E1         MOV       C,0xE0 /* A   */.1
   \   000071   5018         JNC       ??bdb_startResumeCommissioningProcess_7
   2364              {
   2365                if(!bdbAttributes.bdbNodeIsOnANetwork)
   \   000073   90....       MOV       DPTR,#bdbAttributes + 14
   \   000076   E0           MOVX      A,@DPTR
   \   000077   7012         JNZ       ??bdb_startResumeCommissioningProcess_7
   2366                {
   2367          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
   2368                bdb_ClearNetworkParams();
   2369          #endif
   2370                  vDoPrimaryScan = TRUE;
   \   000079   12....       LCALL     ?Subroutine8 & 0xFFFF
   2371                  
   2372                  osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState));
   2373                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FORMATION;
   \                     ??CrossCallReturnLabel_3:
   \   00007C   7405         MOV       A,#0x5
   \   00007E   F0           MOVX      @DPTR,A
   2374          
   2375                  bdb_nwkJoiningFormation(FALSE);
   \   00007F                ; Setup parameters for call to function bdb_nwkJoiningFormation
   \   00007F   7900         MOV       R1,#0x0
   \   000081   12....       LCALL     `??bdb_nwkJoiningFormation::?relay`; Banked call to: bdb_nwkJoiningFormation
   2376                  bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_FORMATION);
   \   000084                ; Setup parameters for call to function bdb_NotifyCommissioningModeStart
   \   000084   7902         MOV       R1,#0x2
   \   000086   12....       LCALL     `??bdb_NotifyCommissioningModeStart::?relay`; Banked call to: bdb_NotifyCommissioningModeStart
   2377                  return;
   \   000089   8007         SJMP      ??bdb_startResumeCommissioningProcess_1
   2378                }
   2379              }
   2380              bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
   \                     ??bdb_startResumeCommissioningProcess_7:
   \   00008B                ; Setup parameters for call to function bdb_reportCommissioningState
   \   00008B   7A00         MOV       R2,#0x0
   \   00008D   7905         MOV       R1,#0x5
   \   00008F   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2381              return;
   2382            }
   2383          
   2384          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)    
   2385            if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_FINDING_BINDING)
   2386            {
   2387              bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FINDING_BINDING;
   2388              
   2389              //Is the device on a network?
   2390              if(bdb_isDeviceNonFactoryNew())
   2391              {
   2392                zclAttrRec_t attrRec;
   2393          
   2394                endPointDesc_t *bdb_CurrEpDescriptor = NULL;
   2395          
   2396                bdb_CurrEpDescriptor = bdb_setEpDescListToActiveEndpoint();
   2397                
   2398                //If not found endpoint with Identify cluster is found, then report fail
   2399                if(bdb_CurrEpDescriptor == NULL)
   2400                {
   2401                  bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   2402                  return;
   2403                }
   2404                
   2405                if( bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_TARGET)  //F&B as Target
   2406                {
   2407                  if (zclFindAttrRec( bdb_CurrEpDescriptor->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
   2408                            ATTRID_IDENTIFY_TIME, &attrRec ) )
   2409                  {
   2410                    //Set it to at less 180 
   2411                    if ( *((uint16*)attrRec.attr.dataPtr) <= BDBC_MIN_COMMISSIONING_TIME )
   2412                    {
   2413                      *((uint16*)attrRec.attr.dataPtr) = BDBC_MIN_COMMISSIONING_TIME;
   2414                       osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
   2415          
   2416                      if(pfnIdentifyTimeChangeCB != NULL)
   2417                      {
   2418                        if(bdbIndentifyActiveEndpoint == 0xFF)
   2419                        {
   2420                          pfnIdentifyTimeChangeCB(bdbIndentifyActiveEndpoint);  
   2421                        }
   2422                        else
   2423                        {
   2424                          pfnIdentifyTimeChangeCB(bdb_CurrEpDescriptor->endPoint);
   2425                        }
   2426                      }
   2427                    }
   2428                    //Attribute found and set, report success
   2429                    if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR))
   2430                    {
   2431                      bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FB_TARGET_IN_PROGRESS);
   2432                    }
   2433                    else
   2434                    {
   2435                      bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
   2436          
   2437                      bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
   2438                      bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_FB_TARGET_IN_PROGRESS;
   2439          
   2440                      bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   2441                    }
   2442                  }
   2443                  else
   2444                  {
   2445                    //Attribute not found and no initiator process, report fail
   2446                    if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR))
   2447                    {
   2448                      bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   2449                    }
   2450                  }
   2451                }  //F&B Target
   2452                
   2453                if( bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR)  //F&B as Initiator
   2454                {
   2455                  bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
   2456                  
   2457                  //If no function to add binds is available then do not process Initiator
   2458                  if(!pbindAddEntry)
   2459                  {
   2460                    //If no target process, then report fail
   2461                    if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_TARGET))
   2462                    {
   2463                      bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   2464                    }        
   2465                  }
   2466                  else
   2467                  {
   2468                    //Send identify query with the endpoint requested
   2469                    if(bdb_SendIdentifyQuery(bdb_CurrEpDescriptor->endPoint) != ZSuccess)
   2470                    {
   2471                      bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   2472                    }
   2473          
   2474                    //If periodic F&B is enabled
   2475                    if ( FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE )
   2476                    {
   2477                      // total F&B time will be at least BDBC_MIN_COMMISSIONING_TIME, and at most (BDBC_MIN_COMMISSIONING_TIME + FINDING_AND_BINDING_PERIODIC_TIME - 1)
   2478                      bdb_FB_InitiatorCurrentCyclesNumber = (BDBC_MIN_COMMISSIONING_TIME + (FINDING_AND_BINDING_PERIODIC_TIME - 1)) / FINDING_AND_BINDING_PERIODIC_TIME;
   2479                      
   2480                      osal_start_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT, FINDING_AND_BINDING_PERIODIC_TIME * 1000);
   2481                    }
   2482          
   2483                    bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
   2484                    bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_FB_INITITATOR_IN_PROGRESS;
   2485          
   2486                    bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   2487                  }
   2488                } //F&B Initiator
   2489              }
   2490              //Not in the network
   2491              else
   2492              {
   2493                bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   2494              }
   2495              
   2496              return;
   2497            }
   2498          #endif
   2499            
   2500          }
   \                     ??bdb_startResumeCommissioningProcess_1:
   \   000092   02....       LJMP      ??Subroutine54_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   90....       MOV       DPTR,#vDoPrimaryScan
   \   000003   7401         MOV       A,#0x1
   \   000005   F0           MOVX      @DPTR,A
   \   000006                ; Setup parameters for call to function osal_memset
   \   000006                ; Setup parameters for call to function osal_memset
   \   000006   7C04         MOV       R4,#0x4
   \   000008   7D00         MOV       R5,#0x0
   \   00000A   7900         MOV       R1,#0x0
   \   00000C   7A..         MOV       R2,#bdbCommissioningProcedureState & 0xff
   \   00000E   7B..         MOV       R3,#(bdbCommissioningProcedureState >> 8) & 0xff
   \   000010   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   000013   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000016   22           RET
   2501          
   2502          /*********************************************************************
   2503           * @fn          bdb_event_loop
   2504           *
   2505           * @brief       Main event loop bdb tasks.
   2506           *
   2507           * @param       task_id - task id
   2508           * @param       events - event bitmap
   2509           *
   2510           * @return      unprocessed events
   2511           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2512          UINT16 bdb_event_loop(byte task_id, UINT16 events)
   \                     bdb_event_loop:
   2513          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2514            (void)task_id;  // Intentionally unreferenced parameter
   2515            
   2516          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
   2517            endPointDesc_t * bdb_CurrEpDescriptor;
   2518          #endif
   2519            
   2520            if(events & BDB_CHANGE_COMMISSIONING_STATE)
   \   00000E   EA           MOV       A,R2
   \   00000F   5404         ANL       A,#0x4
   \   000011   6041         JZ        ??bdb_event_loop_0
   2521            {
   2522              switch(bdbCommissioningProcedureState.bdbCommissioningState)
   \   000013   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000016   E0           MOVX      A,@DPTR
   \   000017   600D         JZ        ??bdb_event_loop_1
   \   000019   14           DEC       A
   \   00001A   600F         JZ        ??bdb_event_loop_2
   \   00001C   24FD         ADD       A,#-0x3
   \   00001E   6014         JZ        ??bdb_event_loop_3
   \   000020   24FE         ADD       A,#-0x2
   \   000022   6015         JZ        ??bdb_event_loop_4
   \   000024   8028         SJMP      ??bdb_event_loop_5
   2523              {
   2524                case BDB_COMMISSIONING_STATE_START_RESUME:
   2525                  bdb_startResumeCommissioningProcess();
   \                     ??bdb_event_loop_1:
   \   000026                ; Setup parameters for call to function bdb_startResumeCommissioningProcess
   \   000026   12....       LCALL     `??bdb_startResumeCommissioningProcess::?relay`; Banked call to: bdb_startResumeCommissioningProcess
   2526                break;
   \   000029   8023         SJMP      ??bdb_event_loop_5
   2527                
   2528                case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
   2529                  if (ZG_BUILD_JOINING_TYPE)
   2530                  {
   2531                    bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_STACK_VERSION);
   \                     ??bdb_event_loop_2:
   \   00002B                ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
   \   00002B   7A01         MOV       R2,#0x1
   \   00002D   7901         MOV       R1,#0x1
   \   00002F   12....       LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
   2532                  }
   2533                break;
   \   000032   801A         SJMP      ??bdb_event_loop_5
   2534                
   2535                case BDB_COMMISSIONING_STATE_STEERING_ON_NWK:
   2536                  bdb_nwkSteeringDeviceOnNwk();
   \                     ??bdb_event_loop_3:
   \   000034                ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
   \   000034   12....       LCALL     ?Subroutine38 & 0xFFFF
   2537                  
   2538                  bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
   2539                break;
   \                     ??CrossCallReturnLabel_61:
   \   000037   8015         SJMP      ??bdb_event_loop_5
   2540                
   2541                case BDB_COMMISSIONING_STATE_FINDING_BINDING:
   2542                  bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \                     ??bdb_event_loop_4:
   \   000039   90....       MOV       DPTR,#bdbAttributes + 10
   \   00003C   E4           CLR       A
   \   00003D   F0           MOVX      @DPTR,A
   2543                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   00003E   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000041   F0           MOVX      @DPTR,A
   2544                  osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
   \   000042                ; Setup parameters for call to function osal_start_timerEx
   \   000042   90....       MOV       DPTR,#__Constant_32
   \   000045   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000048   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00004B   12....       LCALL     ?DEALLOC_XSTACK8
   2545                break;
   2546                
   2547              }
   2548              return (events ^ BDB_CHANGE_COMMISSIONING_STATE);
   \                     ??bdb_event_loop_5:
   \   00004E   EE           MOV       A,R6
   \   00004F   6404         XRL       A,#0x4
   \   000051   02....       LJMP      ??bdb_event_loop_6 & 0xFFFF
   2549            }
   2550          
   2551            if ( events & SYS_EVENT_MSG )
   \                     ??bdb_event_loop_0:
   \   000054   EB           MOV       A,R3
   \   000055   5480         ANL       A,#0x80
   \   000057   7064         JNZ       ??bdb_event_loop_7
   2552            {
   2553              uint8 *msg_ptr;
   2554              
   2555              while ( (msg_ptr = osal_msg_receive( bdb_TaskID )) )
   2556              {
   2557                //Process the Incomming ZDO messages used by BDB commissioning methods
   2558                if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_ZDO_CB_MSG)
   2559                {
   2560                  bdb_processZDOMgs((zdoIncomingMsg_t *)msg_ptr);
   2561                }
   2562                
   2563                //Validate the is receive on the right process
   2564                else if(((bdbInMsg_t*)msg_ptr)->hdr.event == bdbCommissioningProcedureState.bdbCommissioningState)
   2565                {
   2566                  bdb_ProcessOSALMsg( (bdbInMsg_t *)msg_ptr );
   2567                }
   2568                //Notify the user
   2569                else if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_NOTIFY_USER)
   2570                {
   2571                  ((bdbCommissioningModeMsg_t*) ((bdbInMsg_t*)msg_ptr)->buf)->bdbRemainingCommissioningModes = bdbAttributes.bdbCommissioningMode;
   2572                  if(pfnCommissioningStatusCB)
   2573                  {
   2574                    pfnCommissioningStatusCB((bdbCommissioningModeMsg_t*) (((bdbInMsg_t*)msg_ptr)->buf));
   2575                  }
   2576          #ifdef MT_APP_CNF_FUNC
   2577                  //Notify the host processor about the event
   2578                  MT_AppCnfCommissioningNotification((bdbCommissioningModeMsg_t*) (((bdbInMsg_t*)msg_ptr)->buf));
   2579          #endif
   2580                }
   2581          #if (ZG_BUILD_COORDINATOR_TYPE)
   2582                else
   2583                {
   2584                  if(ZG_DEVICE_COORDINATOR_TYPE)
   2585                  {
   2586                    //Notify the status 
   2587                    if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_TC_LINK_KEY_EXCHANGE_PROCESS)
   2588                    {
   2589                      pfnTCLinkKeyExchangeProcessCB( (bdb_TCLinkKeyExchProcess_t*) ((bdbInMsg_t*)msg_ptr)->buf);
   2590                    }
   2591                  }
   2592                }
   2593          #endif
   2594                // Release the memory
   2595                osal_msg_deallocate( msg_ptr );
   2596              }
   2597          
   2598              // Return unprocessed events
   2599              return (events ^ SYS_EVENT_MSG);
   2600            }
   2601            
   2602          
   2603            if(events & BDB_PROCESS_TIMEOUT)
   \   000059   EB           MOV       A,R3
   \   00005A   5410         ANL       A,#0x10
   \   00005C   7003         JNZ       $+5
   \   00005E   02....       LJMP      ??bdb_event_loop_8 & 0xFFFF
   2604            {
   2605              bdb_processTimeout();
   \   000061   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000064   E0           MOVX      A,@DPTR
   \   000065   6401         XRL       A,#0x1
   \   000067   6008         JZ        ??bdb_event_loop_9
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   6402         XRL       A,#0x2
   \   00006C   6003         JZ        $+5
   \   00006E   02....       LJMP      ??bdb_event_loop_10 & 0xFFFF
   \                     ??bdb_event_loop_9:
   \   000071   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000074   E0           MOVX      A,@DPTR
   \   000075   14           DEC       A
   \   000076   7003         JNZ       $+5
   \   000078   02....       LJMP      ??bdb_event_loop_11 & 0xFFFF
   \   00007B   24FE         ADD       A,#-0x2
   \   00007D   6003         JZ        $+5
   \   00007F   02....       LJMP      ??bdb_event_loop_10 & 0xFFFF
   \   000082   90....       MOV       DPTR,#bdbCommissioningProcedureState + 2
   \   000085   E0           MOVX      A,@DPTR
   \   000086   6402         XRL       A,#0x2
   \   000088   6003         JZ        $+5
   \   00008A   02....       LJMP      ??bdb_event_loop_10 & 0xFFFF
   \   00008D   7401         MOV       A,#0x1
   \   00008F   F0           MOVX      @DPTR,A
   \   000090                ; Setup parameters for call to function bdb_nwkAssocAttemt
   \   000090   7900         MOV       R1,#0x0
   \   000092   12....       LCALL     `??bdb_nwkAssocAttemt::?relay`; Banked call to: bdb_nwkAssocAttemt
   \   000095   02....       LJMP      ??bdb_event_loop_10 & 0xFFFF
   \                     ??bdb_event_loop_12:
   \   000098   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   7018         JNZ       ??bdb_event_loop_13
   \   00009E   8A82         MOV       DPL,R2
   \   0000A0   8B83         MOV       DPH,R3
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   6409         XRL       A,#0x9
   \   0000A5   700F         JNZ       ??bdb_event_loop_13
   \   0000A7                ; Setup parameters for indirect call
   \   0000A7   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   0000AA   90....       MOV       DPTR,#pfnTCLinkKeyExchangeProcessCB
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   F8           MOV       R0,A
   \   0000AF   A3           INC       DPTR
   \   0000B0   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0000B3   12....       LCALL     ?CALL_IND
   \                     ??bdb_event_loop_13:
   \   0000B6                ; Setup parameters for call to function osal_msg_deallocate
   \   0000B6   AA..         MOV       R2,?V0
   \   0000B8   AB..         MOV       R3,?V1
   \   0000BA   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??bdb_event_loop_7:
   \   0000BD                ; Setup parameters for call to function osal_msg_receive
   \   0000BD   90....       MOV       DPTR,#bdb_TaskID
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   F9           MOV       R1,A
   \   0000C2   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   0000C5   8A..         MOV       ?V0,R2
   \   0000C7   8B..         MOV       ?V1,R3
   \   0000C9   EA           MOV       A,R2
   \   0000CA   4B           ORL       A,R3
   \   0000CB   6062         JZ        ??bdb_event_loop_14
   \   0000CD   8A82         MOV       DPL,R2
   \   0000CF   8B83         MOV       DPH,R3
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   64D3         XRL       A,#0xd3
   \   0000D4   701A         JNZ       ??bdb_event_loop_15
   \   0000D6   EA           MOV       A,R2
   \   0000D7   240C         ADD       A,#0xc
   \   0000D9   F582         MOV       DPL,A
   \   0000DB   E4           CLR       A
   \   0000DC   35..         ADDC      A,?V1
   \   0000DE   F583         MOV       DPH,A
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   6402         XRL       A,#0x2
   \   0000E3   7004         JNZ       ??bdb_event_loop_16
   \   0000E5   A3           INC       DPTR
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   6480         XRL       A,#0x80
   \                     ??bdb_event_loop_16:
   \   0000E9   70CB         JNZ       ??bdb_event_loop_13
   \   0000EB                ; Setup parameters for call to function bdb_ProcessNodeDescRsp
   \   0000EB   12....       LCALL     `??bdb_ProcessNodeDescRsp::?relay`; Banked call to: bdb_ProcessNodeDescRsp
   \   0000EE   80C6         SJMP      ??bdb_event_loop_13
   \                     ??bdb_event_loop_15:
   \   0000F0   E0           MOVX      A,@DPTR
   \   0000F1   F8           MOV       R0,A
   \   0000F2   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0000F5   E0           MOVX      A,@DPTR
   \   0000F6   68           XRL       A,R0
   \   0000F7   7005         JNZ       ??bdb_event_loop_17
   \   0000F9                ; Setup parameters for call to function bdb_ProcessOSALMsg
   \   0000F9   12....       LCALL     `??bdb_ProcessOSALMsg::?relay`; Banked call to: bdb_ProcessOSALMsg
   \   0000FC   80B8         SJMP      ??bdb_event_loop_13
   \                     ??bdb_event_loop_17:
   \   0000FE   8A82         MOV       DPL,R2
   \   000100   8B83         MOV       DPH,R3
   \   000102   E0           MOVX      A,@DPTR
   \   000103   640A         XRL       A,#0xa
   \   000105   7091         JNZ       ??bdb_event_loop_12
   \   000107   90....       MOV       DPTR,#bdbAttributes + 11
   \   00010A   E0           MOVX      A,@DPTR
   \   00010B   8A82         MOV       DPL,R2
   \   00010D   8B83         MOV       DPH,R3
   \   00010F   A3           INC       DPTR
   \   000110   A3           INC       DPTR
   \   000111   A3           INC       DPTR
   \   000112   A3           INC       DPTR
   \   000113   F0           MOVX      @DPTR,A
   \   000114   90....       MOV       DPTR,#pfnCommissioningStatusCB
   \   000117   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   00011A   6009         JZ        ??bdb_event_loop_18
   \   00011C                ; Setup parameters for indirect call
   \   00011C   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   00011F   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000122   12....       LCALL     ?CALL_IND
   \                     ??bdb_event_loop_18:
   \   000125                ; Setup parameters for call to function MT_AppCnfCommissioningNotification
   \   000125   E5..         MOV       A,?V0
   \   000127   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   00012A   12....       LCALL     `??MT_AppCnfCommissioningNotification::?relay`; Banked call to: MT_AppCnfCommissioningNotification
   \   00012D   8087         SJMP      ??bdb_event_loop_13
   \                     ??bdb_event_loop_14:
   \   00012F   EE           MOV       A,R6
   \   000130   FA           MOV       R2,A
   \   000131   EF           MOV       A,R7
   \   000132   6480         XRL       A,#0x80
   \   000134   806E         SJMP      ??bdb_event_loop_19
   \                     ??bdb_event_loop_11:
   \   000136                ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
   \   000136   A3           INC       DPTR
   \   000137   E0           MOVX      A,@DPTR
   \   000138   FA           MOV       R2,A
   \   000139   7900         MOV       R1,#0x0
   \   00013B   12....       LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
   2606              // Return unprocessed events
   2607              return (events ^ BDB_PROCESS_TIMEOUT);
   \                     ??bdb_event_loop_10:
   \   00013E   EE           MOV       A,R6
   \   00013F   FA           MOV       R2,A
   \   000140   EF           MOV       A,R7
   \   000141   6410         XRL       A,#0x10
   \   000143   805F         SJMP      ??bdb_event_loop_19
   2608            }
   2609            
   2610            if(events &  BDB_REPORT_TIMEOUT){
   \                     ??bdb_event_loop_8:
   \   000145   EA           MOV       A,R2
   \   000146   5480         ANL       A,#0x80
   \   000148   6006         JZ        ??bdb_event_loop_20
   2611          #ifdef BDB_REPORTING    
   2612              bdb_RepProcessEvent();
   2613          #endif
   2614              // Return unprocessed events
   2615              return (events ^ BDB_REPORT_TIMEOUT);
   \   00014A   EA           MOV       A,R2
   \   00014B   6480         XRL       A,#0x80
   \   00014D   FA           MOV       R2,A
   \   00014E   805B         SJMP      ??bdb_event_loop_21
   2616            }
   2617            
   2618          #if (ZG_BUILD_JOINING_TYPE)
   2619            if(events & BDB_TC_LINK_KEY_EXCHANGE_FAIL)
   \                     ??bdb_event_loop_20:
   \   000150   EA           MOV       A,R2
   \   000151   5402         ANL       A,#0x2
   \   000153   603C         JZ        ??bdb_event_loop_22
   2620            {
   2621              if(ZG_DEVICE_JOINING_TYPE)
   \   000155   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000158   E0           MOVX      A,@DPTR
   \   000159   6401         XRL       A,#0x1
   \   00015B   6005         JZ        ??bdb_event_loop_23
   \   00015D   E0           MOVX      A,@DPTR
   \   00015E   6402         XRL       A,#0x2
   \   000160   7028         JNZ       ??bdb_event_loop_24
   2622              {
   2623                NLME_LeaveReq_t leaveReq;
   2624                // Set every field to 0
   2625                osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
   \                     ??bdb_event_loop_23:
   \   000162                ; Setup parameters for call to function osal_memset
   \   000162   7C05         MOV       R4,#0x5
   \   000164   7D00         MOV       R5,#0x0
   \   000166   7900         MOV       R1,#0x0
   \   000168   AA..         MOV       R2,?XSP + 0
   \   00016A   AB..         MOV       R3,?XSP + 1
   \   00016C   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2626                
   2627                bdb_setNodeIsOnANetwork(FALSE);
   \   00016F                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   00016F   7900         MOV       R1,#0x0
   \   000171   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
   2628          
   2629                if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
   \   000174                ; Setup parameters for call to function NLME_LeaveReq
   \   000174   AA..         MOV       R2,?XSP + 0
   \   000176   AB..         MOV       R3,?XSP + 1
   \   000178   12....       LCALL     `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   00017B   E9           MOV       A,R1
   \   00017C   600C         JZ        ??bdb_event_loop_24
   2630                {
   2631                  osal_set_event( bdb_TaskID,BDB_TC_LINK_KEY_EXCHANGE_FAIL);
   \   00017E                ; Setup parameters for call to function osal_set_event
   \   00017E   7A02         MOV       R2,#0x2
   \   000180   7B00         MOV       R3,#0x0
   \   000182   90....       MOV       DPTR,#bdb_TaskID
   \   000185   E0           MOVX      A,@DPTR
   \   000186   F9           MOV       R1,A
   \   000187   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   2632                }
   2633              }
   2634              // Return unprocessed events
   2635              return (events ^ BDB_TC_LINK_KEY_EXCHANGE_FAIL);
   \                     ??bdb_event_loop_24:
   \   00018A   EE           MOV       A,R6
   \   00018B   6402         XRL       A,#0x2
   \                     ??bdb_event_loop_6:
   \   00018D   FA           MOV       R2,A
   \   00018E   EF           MOV       A,R7
   \   00018F   8013         SJMP      ??bdb_event_loop_19
   2636            }
   2637          #endif
   2638            
   2639            if(events & BDB_TC_JOIN_TIMEOUT)
   \                     ??bdb_event_loop_22:
   \   000191   EB           MOV       A,R3
   \   000192   5408         ANL       A,#0x8
   \   000194   6011         JZ        ??bdb_event_loop_25
   2640            {     
   2641          #if (ZG_BUILD_COORDINATOR_TYPE)
   2642              if(ZG_DEVICE_COORDINATOR_TYPE)
   \   000196   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000199   E0           MOVX      A,@DPTR
   \   00019A   7003         JNZ       ??bdb_event_loop_26
   2643              {
   2644                bdb_TCProcessJoiningList();
   \   00019C                ; Setup parameters for call to function bdb_TCProcessJoiningList
   \   00019C   12....       LCALL     `??bdb_TCProcessJoiningList::?relay`; Banked call to: bdb_TCProcessJoiningList
   2645              }
   2646          #endif    
   2647              return (events ^ BDB_TC_JOIN_TIMEOUT);
   \                     ??bdb_event_loop_26:
   \   00019F   EE           MOV       A,R6
   \   0001A0   FA           MOV       R2,A
   \   0001A1   EF           MOV       A,R7
   \   0001A2   6408         XRL       A,#0x8
   \                     ??bdb_event_loop_19:
   \   0001A4   FB           MOV       R3,A
   \   0001A5   8004         SJMP      ??bdb_event_loop_21
   2648            }
   2649          
   2650          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
   2651            
   2652            if(events & BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT)
   2653            {
   2654              if ( FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE )
   2655              {
   2656                bdb_CurrEpDescriptor = bdb_setEpDescListToActiveEndpoint();
   2657                
   2658                //If we have endpoint from which to send the identify command, then proceed, otherwise finish
   2659                if(bdb_CurrEpDescriptor != NULL) //just a safty check. The fact that we got to this functuon at all means that this cannot be NULL
   2660                {
   2661                  //Substract an attempt
   2662                  bdb_FB_InitiatorCurrentCyclesNumber--;
   2663                  
   2664                  if(bdb_FB_InitiatorCurrentCyclesNumber > 0)
   2665                  {
   2666                    //Only send Identify Query if there is no pending responses from a previous identify query
   2667                    if ((osal_get_timeoutEx(bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT) == 0) && (bdb_getRespondentRetry(pRespondentHead) == NULL))
   2668                    {
   2669                      //Send identify query with the endpoint requested
   2670                      bdb_SendIdentifyQuery(bdb_CurrEpDescriptor->endPoint);
   2671                    }
   2672                    osal_start_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT, FINDING_AND_BINDING_PERIODIC_TIME * 1000);
   2673                  }
   2674                }
   2675              }
   2676          
   2677              if (bdb_FB_InitiatorCurrentCyclesNumber == 0)
   2678              {
   2679                bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE );
   2680              }
   2681              
   2682              return (events ^ BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
   2683            }
   2684            
   2685            if(events & BDB_IDENTIFY_TIMEOUT)
   2686            {
   2687              zclAttrRec_t identifyAttrRec;
   2688              epList_t *bdb_CurrEpDescriptorNextInList = NULL;
   2689              bdb_CurrEpDescriptorNextInList = bdb_HeadEpDescriptorList;
   2690              
   2691              bool KeepIdentifyTimerRunning = FALSE;
   2692              
   2693              while(bdb_CurrEpDescriptorNextInList != NULL )
   2694              {
   2695                endPointDesc_t *bdb_EpDescriptor = NULL;
   2696                bdb_EpDescriptor = bdb_CurrEpDescriptorNextInList->epDesc;
   2697              
   2698                //Do not check ZDO or Zigbee reserved endpoints
   2699                if((bdb_CurrEpDescriptorNextInList->epDesc->endPoint == 0) || (bdb_CurrEpDescriptorNextInList->epDesc->endPoint >= BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
   2700                {
   2701                  bdb_CurrEpDescriptorNextInList = bdb_CurrEpDescriptorNextInList->nextDesc;
   2702                  continue;
   2703                }
   2704                
   2705                if ( zclFindAttrRec( bdb_EpDescriptor->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
   2706                                  ATTRID_IDENTIFY_TIME, &identifyAttrRec ) )
   2707                {
   2708                  if(*((uint16*)identifyAttrRec.attr.dataPtr) > 0)
   2709                  {
   2710                    (uint16)(*((uint16*)identifyAttrRec.attr.dataPtr))--;
   2711                    KeepIdentifyTimerRunning = TRUE;
   2712                  }
   2713                  else
   2714                  {
   2715                    // Use bdb success main state
   2716                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   2717                    if(pfnIdentifyTimeChangeCB != NULL)
   2718                    {
   2719                      pfnIdentifyTimeChangeCB(bdb_EpDescriptor->endPoint);
   2720                    }
   2721                  }
   2722                }
   2723                bdb_CurrEpDescriptorNextInList = bdb_CurrEpDescriptorNextInList->nextDesc;
   2724              }
   2725              
   2726              //If any endpoint has identify running, keep the timer on
   2727              if(KeepIdentifyTimerRunning)
   2728              {
   2729                osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
   2730              }
   2731              else
   2732              {
   2733                osal_stop_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT );
   2734              }
   2735              
   2736              // Return unprocessed events
   2737              return (events ^ BDB_IDENTIFY_TIMEOUT);
   2738            }
   2739            
   2740            if(events & BDB_RESPONDENT_PROCESS_TIMEOUT)
   2741            {
   2742              // Send Simple Descriptor request to a respondent node
   2743              bdb_ProcessRespondentList();
   2744          
   2745              return (events ^ BDB_RESPONDENT_PROCESS_TIMEOUT);
   2746            }
   2747          #endif
   2748            
   2749            return 0;
   \                     ??bdb_event_loop_25:
   \   0001A7   7A00         MOV       R2,#0x0
   \   0001A9   7B00         MOV       R3,#0x0
   \                     ??bdb_event_loop_21:
   \   0001AB   7405         MOV       A,#0x5
   \   0001AD   80..         SJMP      ??Subroutine64_0
   2750          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   EA           MOV       A,R2
   \   000001                REQUIRE ??Subroutine63_0
   \   000001                ; // Fall through to label ??Subroutine63_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine63_0:
   \   000000   2402         ADD       A,#0x2
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   35..         ADDC      A,?V1
   \   000006   FB           MOV       R3,A
   \   000007   22           RET
   2751          
   2752          /*********************************************************************
   2753           * @fn          bdb_processZDOMgs
   2754           *
   2755           * @brief       Process ZDO messages used as part of BDB commissioning methods
   2756           *
   2757           * @param       zdoIncomingMsg_t - ZDO message
   2758           *
   2759           * @return      
   2760           */
   2761          static void bdb_processZDOMgs(zdoIncomingMsg_t *pMsg)
   2762          {
   2763            switch ( pMsg->clusterID )
   2764            {
   2765          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)      
   2766              case IEEE_addr_rsp:
   2767                 bdb_ProcessIEEEAddrRsp(pMsg);
   2768              break;
   2769              case Simple_Desc_rsp:
   2770                bdb_ProcessSimpleDesc(pMsg);
   2771              break;
   2772          #endif
   2773          
   2774          #if (ZG_BUILD_JOINING_TYPE)    
   2775              case Node_Desc_rsp:
   2776                bdb_ProcessNodeDescRsp(pMsg);
   2777              break;
   2778          #endif
   2779              
   2780              default:
   2781              break;
   2782            }
   2783          }
   2784          
   2785          
   2786          /*********************************************************************
   2787           * @fn      bdb_ProcessNodeDescRsp
   2788           *
   2789           * @brief   Process Node Descriptor response to validate the stack version of the
   2790           *
   2791           * @param   zdoIncomingMsg_t *pMsg
   2792           *
   2793           * @return  none
   2794           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2795          void bdb_ProcessNodeDescRsp(zdoIncomingMsg_t *pMsg)
   \                     bdb_ProcessNodeDescRsp:
   2796          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 35
   \   000005   74DD         MOV       A,#-0x23
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2797            //Avoid processing unintended messages
   2798            if(requestNewTrustCenterLinkKey && 
   2799              (bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE))
   \   00000E   90....       MOV       DPTR,#requestNewTrustCenterLinkKey
   \   000011   E0           MOVX      A,@DPTR
   \   000012   607C         JZ        ??CrossCallReturnLabel_64
   \   000014   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000017   E0           MOVX      A,@DPTR
   \   000018   6401         XRL       A,#0x1
   \   00001A   7074         JNZ       ??CrossCallReturnLabel_64
   2800            {
   2801              if(!APSME_IsDistributedSecurity())
   \   00001C                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   00001C   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   00001F   E9           MOV       A,R1
   \   000020   706E         JNZ       ??CrossCallReturnLabel_64
   2802              {
   2803                //Is this from the coordinator?
   2804                if(pMsg->srcAddr.addr.shortAddr == 0x0000)
   \   000022   8E82         MOV       DPL,R6
   \   000024   8F83         MOV       DPH,R7
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   00002B   7063         JNZ       ??CrossCallReturnLabel_64
   2805                {
   2806                  ZDO_NodeDescRsp_t NDRsp;
   2807                  uint8 StackComplianceRev;
   2808          
   2809                  //Stop timer to avoid unintended resets
   2810                  osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT);
   \   00002D                ; Setup parameters for call to function osal_stop_timerEx
   \   00002D   12....       LCALL     ?Subroutine25 & 0xFFFF
   2811                  
   2812                  ZDO_ParseNodeDescRsp(pMsg, &NDRsp);
   \                     ??CrossCallReturnLabel_150:
   \   000030                ; Setup parameters for call to function ZDO_ParseNodeDescRsp
   \   000030   7413         MOV       A,#0x13
   \   000032   12....       LCALL     ?XSTACK_DISP102_8
   \   000035   EE           MOV       A,R6
   \   000036   FA           MOV       R2,A
   \   000037   EF           MOV       A,R7
   \   000038   FB           MOV       R3,A
   \   000039   12....       LCALL     `??ZDO_ParseNodeDescRsp::?relay`; Banked call to: ZDO_ParseNodeDescRsp
   2813                  
   2814                  StackComplianceRev = NDRsp.nodeDesc.ServerMask >> STACK_COMPLIANCE_CURRENT_REV_POS;
   2815                  
   2816                  if( StackComplianceRev >= STACK_COMPL_REV_21 )
   \   00003C   741E         MOV       A,#0x1e
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000044   7409         MOV       A,#0x9
   \   000046   78..         MOV       R0,#?V0
   \   000048   12....       LCALL     ?US_SHR
   \   00004B   C3           CLR       C
   \   00004C   E5..         MOV       A,?V0
   \   00004E   9415         SUBB      A,#0x15
   \   000050   95E0         SUBB      A,0xE0 /* A   */
   \   000052   C3           CLR       C
   \   000053   65D0         XRL       A,PSW
   \   000055   33           RLC       A
   \   000056   4009         JC        ??bdb_ProcessNodeDescRsp_0
   2817                  {
   2818                    bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_LINK_KEY);
   \   000058                ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
   \   000058   7A02         MOV       R2,#0x2
   \   00005A   7901         MOV       R1,#0x1
   \   00005C   12....       LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
   \   00005F   802F         SJMP      ??CrossCallReturnLabel_64
   2819                  }
   2820                  else
   2821                  {
   2822                    APSME_TCLKDevEntry_t TCLKDevEntry;
   2823                    
   2824                    //Save the KeyAttribute for joining device that it has joined non-R21 nwk
   2825                    TCLKDevEntry.keyAttributes = ZG_NON_R21_NWK_JOINED;
   \                     ??bdb_ProcessNodeDescRsp_0:
   \   000061   7410         MOV       A,#0x10
   \   000063   12....       LCALL     ?XSTACK_DISP0_8
   \   000066   74FD         MOV       A,#-0x3
   \   000068   F0           MOVX      @DPTR,A
   2826                    osal_nv_write(ZCD_NV_TCLK_TABLE_START,osal_offsetof(APSME_TCLKDevEntry_t,keyAttributes),sizeof(uint8),&TCLKDevEntry.keyAttributes);
   \   000069                ; Setup parameters for call to function osal_nv_write
   \   000069   8582..       MOV       ?V0,DPL
   \   00006C   8583..       MOV       ?V1,DPH
   \   00006F   78..         MOV       R0,#?V0
   \   000071   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000074   75..01       MOV       ?V0,#0x1
   \   000077   75..00       MOV       ?V1,#0x0
   \   00007A   78..         MOV       R0,#?V0
   \   00007C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007F   7C10         MOV       R4,#0x10
   \   000081   7D00         MOV       R5,#0x0
   \   000083   7A11         MOV       R2,#0x11
   \   000085   7B01         MOV       R3,#0x1
   \   000087   12....       LCALL     ??Subroutine67_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   00008A   12....       LCALL     ?DEALLOC_XSTACK8
   2827                    
   2828                    bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
   \   00008D                ; Setup parameters for call to function bdb_setNodeJoinLinkKeyType
   \   00008D   12....       LCALL     ?Subroutine40 & 0xFFFF
   2829                    bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, TRUE);
   2830                  }
   2831                }
   2832              }
   2833            }
   2834          }
   \                     ??CrossCallReturnLabel_64:
   \   000090   7423         MOV       A,#0x23
   \   000092   80..         SJMP      ??Subroutine68_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   7900         MOV       R1,#0x0
   \   000002   12....       LCALL     `??bdb_setNodeJoinLinkKeyType::?relay`; Banked call to: bdb_setNodeJoinLinkKeyType
   \   000005                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000005                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000005   7A01         MOV       R2,#0x1
   \   000007   7901         MOV       R1,#0x1
   \   000009   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   \   00000C   22           RET
   2835          
   2836          
   2837          /*********************************************************************
   2838           * @fn          bdb_touchlinkSendFNReset
   2839           *
   2840           * @brief       Starts the Factory New Procedure for Initiator
   2841           *
   2842           * @param       isOnANetwork - TRUE if the devices is not FN, FALSE otherwise
   2843           *
   2844           * @return      none
   2845           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2846          void bdb_touchlinkSendFNReset( void )
   \                     bdb_touchlinkSendFNReset:
   2847          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2848          #ifdef BDB_TL_INITIATOR
   2849            touchLinkInitiator_ResetToFNProcedure( );
   2850          #endif
   2851          }
   \   000000   02....       LJMP      ?BRET
   2852          
   2853          
   2854          /*********************************************************************
   2855           * @fn          bdb_setNodeIsOnANetwork
   2856           *
   2857           * @brief       Sets and saves in Nv bdbNodeIsOnANetwork attribute
   2858           *
   2859           * @param       isOnANetwork - TRUE if the devices is not FN, FALSE otherwise
   2860           *
   2861           * @return      none
   2862           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2863          void bdb_setNodeIsOnANetwork(bool isOnANetwork)
   \                     bdb_setNodeIsOnANetwork:
   2864          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   2865            if((bdbAttributes.bdbNodeIsOnANetwork != isOnANetwork) || (!bdb_initialization))
   \   000007   90....       MOV       DPTR,#bdbAttributes + 14
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   6E           XRL       A,R6
   \   00000C   7006         JNZ       ??bdb_setNodeIsOnANetwork_0
   \   00000E   90....       MOV       DPTR,#bdb_initialization
   \   000011   E0           MOVX      A,@DPTR
   \   000012   7029         JNZ       ??bdb_setNodeIsOnANetwork_1
   2866            {
   2867              //We lose our network
   2868              if(!isOnANetwork)
   \                     ??bdb_setNodeIsOnANetwork_0:
   \   000014   E9           MOV       A,R1
   \   000015   7005         JNZ       ??bdb_setNodeIsOnANetwork_2
   2869              {
   2870                bdbAttributes.bdbCommissioningMode = 0;
   \   000017   90....       MOV       DPTR,#bdbAttributes + 11
   \   00001A   E4           CLR       A
   \   00001B   F0           MOVX      @DPTR,A
   2871              }
   2872              
   2873              bdbAttributes.bdbNodeIsOnANetwork = isOnANetwork;
   \                     ??bdb_setNodeIsOnANetwork_2:
   \   00001C   E9           MOV       A,R1
   \   00001D   90....       MOV       DPTR,#bdbAttributes + 14
   \   000020   F0           MOVX      @DPTR,A
   2874              
   2875              osal_nv_write(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
   \   000021                ; Setup parameters for call to function osal_nv_write
   \   000021   75....       MOV       ?V0,#(bdbAttributes + 14) & 0xff
   \   000024   75....       MOV       ?V1,#((bdbAttributes + 14) >> 8) & 0xff
   \   000027   78..         MOV       R0,#?V0
   \   000029   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002C   75..01       MOV       ?V0,#0x1
   \   00002F   75..00       MOV       ?V1,#0x0
   \   000032   78..         MOV       R0,#?V0
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   12....       LCALL     ?Subroutine36 & 0xFFFF
   2876            }
   \                     ??CrossCallReturnLabel_159:
   \   00003A   12....       LCALL     ?DEALLOC_XSTACK8
   2877          }
   \                     ??bdb_setNodeIsOnANetwork_1:
   \   00003D   80..         SJMP      ??Subroutine69_0
   2878          
   2879          /*********************************************************************
   2880           * @fn          bdb_setCommissioningGroupID
   2881           *
   2882           * @brief       Sets the commissioning groupd ID
   2883           *
   2884           * @param       groupID
   2885           *
   2886           * @return      none
   2887           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004                REQUIRE ??Subroutine53_0
   \   000004                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2888          void bdb_setCommissioningGroupID(uint16 groupID)
   \                     bdb_setCommissioningGroupID:
   2889          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2890            bdbAttributes.bdbCommissioningGroupID = groupID;
   \   000004   90....       MOV       DPTR,#bdbAttributes + 8
   \   000007   02....       LJMP      ?Subroutine2 & 0xFFFF
   2891          }
   2892          
   2893          /*********************************************************************
   2894           * @fn      bdb_CreateRespondentList
   2895           *
   2896           * @brief   Create respondent list for finding and binding if empty
   2897           *
   2898           * @param   pHead - pointer to a pointer of the list head
   2899           *
   2900           * @return  none
   2901           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004   8A82         MOV       DPL,R2
   \   000006                REQUIRE ??Subroutine60_0
   \   000006                ; // Fall through to label ??Subroutine60_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2902          void bdb_CreateRespondentList( bdbFindingBindingRespondent_t **pHead )
   \                     bdb_CreateRespondentList:
   2903          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine18 & 0xFFFF
   2904          
   2905            // Create the list if empty
   2906            if ( *pHead == NULL )
   \                     ??CrossCallReturnLabel_122:
   \   000008   7008         JNZ       ??CrossCallReturnLabel_41
   2907            {
   2908              *pHead = ( bdbFindingBindingRespondent_t* )osal_mem_alloc( sizeof( bdbFindingBindingRespondent_t ) );
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   12....       LCALL     ?Subroutine13 & 0xFFFF
   2909              
   2910              if ( *pHead != NULL )
   \                     ??CrossCallReturnLabel_164:
   \   00000D   6003         JZ        ??CrossCallReturnLabel_41
   2911              {
   2912                (*pHead)->pNext = NULL;
   \   00000F   12....       LCALL     ?Subroutine28 & 0xFFFF
   2913              }
   2914            }
   2915            return;
   \                     ??CrossCallReturnLabel_41:
   \   000012   80..         SJMP      ??Subroutine69_0
   2916          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   7A11         MOV       R2,#0x11
   \   000002   7B00         MOV       R3,#0x0
   \   000004   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000007   8B..         MOV       ?V1,R3
   \   000009   A9..         MOV       R1,?V1
   \   00000B   8E82         MOV       DPL,R6
   \   00000D   8F83         MOV       DPH,R7
   \   00000F                REQUIRE ??Subroutine70_0
   \   00000F                ; // Fall through to label ??Subroutine70_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   E0           MOVX      A,@DPTR
   \   000005   240F         ADD       A,#0xf
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F583         MOV       DPH,A
   \   00000D   E4           CLR       A
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   A3           INC       DPTR
   \   000010   F0           MOVX      @DPTR,A
   \   000011   22           RET
   2917          
   2918          /*********************************************************************
   2919           * @fn      bdb_AddRespondentNode
   2920           *
   2921           * @brief   Add node to respondent list for finding and binding
   2922           *
   2923           * @param   pHead - pointer to a pointer of the list head
   2924           *
   2925           * @return  pointer to new node
   2926           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2927          bdbFindingBindingRespondent_t* bdb_AddRespondentNode( bdbFindingBindingRespondent_t **pHead, zclIdentifyQueryRsp_t *pCmd )
   \                     bdb_AddRespondentNode:
   2928          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine18 & 0xFFFF
   2929            bdbFindingBindingRespondent_t **pCurr;
   2930            bdbFindingBindingRespondent_t *temp;
   2931            
   2932              // Create respondent list if empty
   2933            if ( *pHead == NULL )
   \                     ??CrossCallReturnLabel_123:
   \   000008   7006         JNZ       ??bdb_AddRespondentNode_0
   2934            {
   2935              bdb_CreateRespondentList( pHead );
   \   00000A                ; Setup parameters for call to function bdb_CreateRespondentList
   \   00000A   12....       LCALL     `??bdb_CreateRespondentList::?relay`; Banked call to: bdb_CreateRespondentList
   2936              return *pHead;
   \   00000D   02....       LJMP      ??CrossCallReturnLabel_42 & 0xFFFF
   2937            }
   2938            else
   2939            {
   2940              // if pCmd is equal to NULL, don't look for duplucates
   2941              if( pCmd != NULL )
   \                     ??bdb_AddRespondentNode_0:
   \   000010   EC           MOV       A,R4
   \   000011   4D           ORL       A,R5
   \   000012   606E         JZ        ??bdb_AddRespondentNode_1
   2942              {
   2943                //Find if any duplicate in the list
   2944                temp = *pHead;
   2945                
   2946                while(temp != NULL)
   2947                {
   2948                  if((temp->data.endPoint == pCmd->srcAddr->endPoint) && (temp->data.panId == pCmd->srcAddr->panId))
   \                     ??bdb_AddRespondentNode_2:
   \   000014   8882         MOV       DPL,R0
   \   000016   8983         MOV       DPH,R1
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   FA           MOV       R2,A
   \   000023   8C82         MOV       DPL,R4
   \   000025   8D83         MOV       DPH,R5
   \   000027   E0           MOVX      A,@DPTR
   \   000028   FB           MOV       R3,A
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   CB           XCH       A,R3
   \   00002C   2409         ADD       A,#0x9
   \   00002E   F582         MOV       DPL,A
   \   000030   E4           CLR       A
   \   000031   3B           ADDC      A,R3
   \   000032   F583         MOV       DPH,A
   \   000034   E0           MOVX      A,@DPTR
   \   000035   6A           XRL       A,R2
   \   000036   703E         JNZ       ??bdb_AddRespondentNode_3
   \   000038   8882         MOV       DPL,R0
   \   00003A   8983         MOV       DPH,R1
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   FA           MOV       R2,A
   \   00004B   240A         ADD       A,#0xa
   \   00004D   F582         MOV       DPL,A
   \   00004F   E4           CLR       A
   \   000050   3B           ADDC      A,R3
   \   000051   F583         MOV       DPH,A
   \   000053   E0           MOVX      A,@DPTR
   \   000054   65..         XRL       A,?V0
   \   000056   7004         JNZ       ??bdb_AddRespondentNode_4
   \   000058   A3           INC       DPTR
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   65..         XRL       A,?V1
   \                     ??bdb_AddRespondentNode_4:
   \   00005C   7018         JNZ       ??bdb_AddRespondentNode_3
   2949                  {
   2950                    //Duplicate
   2951                    if(temp->data.addr.shortAddr == pCmd->srcAddr->addr.shortAddr)
   \   00005E   8882         MOV       DPL,R0
   \   000060   8983         MOV       DPH,R1
   \   000062   12....       LCALL     ?Subroutine30 & 0xFFFF
   2952                    {
   2953                      return NULL;
   2954                    }
   2955                  }
   \                     ??CrossCallReturnLabel_46:
   \   000065   A3           INC       DPTR
   \   000066   E0           MOVX      A,@DPTR
   \   000067   F583         MOV       DPH,A
   \   000069   8A82         MOV       DPL,R2
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   65..         XRL       A,?V0
   \   00006E   7004         JNZ       ??bdb_AddRespondentNode_5
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   65..         XRL       A,?V1
   \                     ??bdb_AddRespondentNode_5:
   \   000074   6039         JZ        ??bdb_AddRespondentNode_6
   2956                  temp = temp->pNext;
   \                     ??bdb_AddRespondentNode_3:
   \   000076   E8           MOV       A,R0
   \   000077   240F         ADD       A,#0xf
   \   000079   F582         MOV       DPL,A
   \   00007B   E4           CLR       A
   \   00007C   39           ADDC      A,R1
   \   00007D   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   2957                }
   2958              }
   \                     ??CrossCallReturnLabel_125:
   \   000080   7092         JNZ       ??bdb_AddRespondentNode_2
   2959              
   2960              pCurr = &((*pHead)->pNext);
   \                     ??bdb_AddRespondentNode_1:
   \   000082   8E82         MOV       DPL,R6
   \   000084   8F83         MOV       DPH,R7
   \   000086   E0           MOVX      A,@DPTR
   \   000087   240F         ADD       A,#0xf
   \   000089   FE           MOV       R6,A
   \   00008A   A3           INC       DPTR
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   3400         ADDC      A,#0x0
   \   00008E   8010         SJMP      ??bdb_AddRespondentNode_7
   2961              
   2962              while ( *pCurr != NULL )
   2963              {
   2964                pCurr = &((*pCurr)->pNext);
   \                     ??bdb_AddRespondentNode_8:
   \   000090   8E82         MOV       DPL,R6
   \   000092   8F83         MOV       DPH,R7
   \   000094   E0           MOVX      A,@DPTR
   \   000095   240F         ADD       A,#0xf
   \   000097   F8           MOV       R0,A
   \   000098   A3           INC       DPTR
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   3400         ADDC      A,#0x0
   \   00009C   F9           MOV       R1,A
   \   00009D   E8           MOV       A,R0
   \   00009E   FE           MOV       R6,A
   \   00009F   E9           MOV       A,R1
   \                     ??bdb_AddRespondentNode_7:
   \   0000A0   FF           MOV       R7,A
   2965              }
   \   0000A1   8E82         MOV       DPL,R6
   \   0000A3   8F83         MOV       DPH,R7
   \   0000A5   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   0000A8   70E6         JNZ       ??bdb_AddRespondentNode_8
   2966          
   2967              *pCurr = ( bdbFindingBindingRespondent_t* )osal_mem_alloc( sizeof( bdbFindingBindingRespondent_t ) );
   \   0000AA                ; Setup parameters for call to function osal_mem_alloc
   \   0000AA   12....       LCALL     ?Subroutine13 & 0xFFFF
   2968              
   2969              if(*pCurr == NULL)
   \                     ??CrossCallReturnLabel_165:
   \   0000AD   7006         JNZ       ??bdb_AddRespondentNode_9
   2970              {
   2971                //No memory
   2972                return NULL;
   \                     ??bdb_AddRespondentNode_6:
   \   0000AF   7A00         MOV       R2,#0x0
   \   0000B1   7B00         MOV       R3,#0x0
   \   0000B3   800A         SJMP      ??CrossCallReturnLabel_171
   2973              }
   2974              
   2975              (*pCurr)->pNext = NULL;
   \                     ??bdb_AddRespondentNode_9:
   \   0000B5   12....       LCALL     ?Subroutine28 & 0xFFFF
   2976            }
   2977            
   2978            return *pCurr;
   \                     ??CrossCallReturnLabel_42:
   \   0000B8   8E82         MOV       DPL,R6
   \   0000BA   8F83         MOV       DPH,R7
   \   0000BC   12....       LCALL     ??Subroutine71_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   0000BF   02....       LJMP      ??Subroutine69_0 & 0xFFFF
   2979          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000003   8C82         MOV       DPL,R4
   \   000005   8D83         MOV       DPH,R5
   \   000007   22           RET
   2980          
   2981          /*********************************************************************
   2982           * @fn      bdb_zclRespondentListClean
   2983           *
   2984           * @brief   This function free reserved memory for respondent list
   2985           *
   2986           * @param   pHead - begin of the respondent list
   2987           *
   2988           * @return  status
   2989           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2990          void bdb_zclRespondentListClean( bdbFindingBindingRespondent_t **pHead )
   \                     bdb_zclRespondentListClean:
   2991          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine18 & 0xFFFF
   2992            bdbFindingBindingRespondent_t **pCurr;
   2993            bdbFindingBindingRespondent_t **pNext;
   2994            
   2995            if ( *pHead == NULL )
   \                     ??CrossCallReturnLabel_124:
   \   000008   603E         JZ        ??bdb_zclRespondentListClean_0
   2996            {
   2997              return;
   2998            }
   2999            
   3000            pCurr = pHead;
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   8025         SJMP      ??bdb_zclRespondentListClean_1
   3001            
   3002            while( *pCurr != NULL )
   3003            {
   3004              pNext = &((*pCurr)->pNext);
   \                     ??bdb_zclRespondentListClean_2:
   \   000010   85..82       MOV       DPL,?V0
   \   000013   85..83       MOV       DPH,?V1
   \   000016   12....       LCALL     ??Subroutine71_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000019   EA           MOV       A,R2
   \   00001A   240F         ADD       A,#0xf
   \   00001C   F5..         MOV       ?V2,A
   \   00001E   E4           CLR       A
   \   00001F   3B           ADDC      A,R3
   \   000020   F5..         MOV       ?V3,A
   3005              osal_mem_free( *pCurr );
   \   000022                ; Setup parameters for call to function osal_mem_free
   \   000022   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3006              *pCurr = ( bdbFindingBindingRespondent_t* )NULL;
   \   000025   85..82       MOV       DPL,?V0
   \   000028   85..83       MOV       DPH,?V1
   \   00002B   E4           CLR       A
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   A3           INC       DPTR
   \   00002E   F0           MOVX      @DPTR,A
   3007              pCurr = pNext;
   \   00002F   85....       MOV       ?V0,?V2
   \   000032   85....       MOV       ?V1,?V3
   3008            }
   \                     ??bdb_zclRespondentListClean_1:
   \   000035   85..82       MOV       DPL,?V0
   \   000038   85..83       MOV       DPH,?V1
   \   00003B   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   00003E   70D0         JNZ       ??bdb_zclRespondentListClean_2
   3009            *pHead = NULL;
   \   000040   8E82         MOV       DPL,R6
   \   000042   8F83         MOV       DPH,R7
   \   000044   E4           CLR       A
   \   000045   F0           MOVX      @DPTR,A
   \   000046   A3           INC       DPTR
   \   000047   F0           MOVX      @DPTR,A
   3010          }
   \                     ??bdb_zclRespondentListClean_0:
   \   000048   02....       LJMP      ??Subroutine65_0 & 0xFFFF
   3011          
   3012           /*********************************************************************
   3013           * PRIVATE FUNCTIONS
   3014           *********************************************************************/
   3015          
   3016          /*********************************************************************
   3017           * @fn      bdb_ProcessOSALMsg
   3018           *
   3019           * @brief   Process the incoming task message.
   3020           *
   3021           * @param   msgPtr - message to process
   3022           *
   3023           * @return  none
   3024           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3025          void bdb_ProcessOSALMsg( bdbInMsg_t *msgPtr )
   \                     bdb_ProcessOSALMsg:
   3026          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 26
   \   000005   74E6         MOV       A,#-0x1a
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3027            
   3028            switch(msgPtr->hdr.event)
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   14           DEC       A
   \   000010   7003         JNZ       $+5
   \   000012   02....       LJMP      ??bdb_ProcessOSALMsg_0 & 0xFFFF
   \   000015   24FE         ADD       A,#-0x2
   \   000017   6003         JZ        $+5
   \   000019   02....       LJMP      ??bdb_ProcessOSALMsg_1 & 0xFFFF
   3029            {
   3030          #if (ZG_BUILD_JOINING_TYPE)
   3031              case BDB_COMMISSIONING_STATE_JOINING:
   3032                if(ZG_DEVICE_JOINING_TYPE)
   \   00001C   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6401         XRL       A,#0x1
   \   000022   6008         JZ        ??bdb_ProcessOSALMsg_2
   \   000024   E0           MOVX      A,@DPTR
   \   000025   6402         XRL       A,#0x2
   \   000027   6003         JZ        $+5
   \   000029   02....       LJMP      ??bdb_ProcessOSALMsg_1 & 0xFFFF
   3033                {
   3034                  switch(msgPtr->buf[0])
   \                     ??bdb_ProcessOSALMsg_2:
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   6006         JZ        ??bdb_ProcessOSALMsg_3
   \   000035   14           DEC       A
   \   000036   6018         JZ        ??bdb_ProcessOSALMsg_4
   \   000038   02....       LJMP      ??bdb_ProcessOSALMsg_1 & 0xFFFF
   3035                  {
   3036                    case BDB_JOIN_EVENT_NWK_DISCOVERY:
   3037                      if(msgPtr->hdr.status == BDB_MSG_EVENT_SUCCESS)
   \                     ??bdb_ProcessOSALMsg_3:
   \   00003B   8A82         MOV       DPL,R2
   \   00003D   8B83         MOV       DPH,R3
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   7005         JNZ       ??bdb_ProcessOSALMsg_5
   3038                      {
   3039                        bdb_filterNwkDisc();
   \   000043                ; Setup parameters for call to function bdb_filterNwkDisc
   \   000043   12....       LCALL     `??bdb_filterNwkDisc::?relay`; Banked call to: bdb_filterNwkDisc
   3040                        bdb_tryNwkAssoc();
   \   000046                ; Setup parameters for call to function bdb_tryNwkAssoc
   \   000046   805E         SJMP      ??bdb_ProcessOSALMsg_6
   3041                      }
   3042                      else
   3043                      {
   3044                        bdb_nwkDiscoveryAttempt(FALSE);
   \                     ??bdb_ProcessOSALMsg_5:
   \   000048                ; Setup parameters for call to function bdb_nwkDiscoveryAttempt
   \   000048   7900         MOV       R1,#0x0
   \   00004A   12....       LCALL     `??bdb_nwkDiscoveryAttempt::?relay`; Banked call to: bdb_nwkDiscoveryAttempt
   \   00004D   02....       LJMP      ??bdb_ProcessOSALMsg_1 & 0xFFFF
   3045                      }
   3046                    break;
   3047                    
   3048                    case BDB_JOIN_EVENT_ASSOCIATION:
   3049                      if(msgPtr->hdr.status == BDB_MSG_EVENT_SUCCESS)
   \                     ??bdb_ProcessOSALMsg_4:
   \   000050   8A82         MOV       DPL,R2
   \   000052   8B83         MOV       DPH,R3
   \   000054   A3           INC       DPTR
   \   000055   E0           MOVX      A,@DPTR
   \   000056   700C         JNZ       ??bdb_ProcessOSALMsg_7
   3050                      {
   3051                        bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_WAITING_NWK_KEY;
   \   000058   90....       MOV       DPTR,#bdbCommissioningProcedureState + 2
   \   00005B   7402         MOV       A,#0x2
   \   00005D   F0           MOVX      @DPTR,A
   3052                        //Nwk key timeout get right timing
   3053                        osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT, BDB_DEFAULT_DEVICE_UNAUTH_TIMEOUT);
   \   00005E                ; Setup parameters for call to function osal_start_timerEx
   \   00005E   90....       MOV       DPTR,#__Constant_bb8
   \   000061   02....       LJMP      ??bdb_ProcessOSALMsg_8 & 0xFFFF
   3054                      }
   3055                      else
   3056                      {
   3057                        if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   3058                             (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   \                     ??bdb_ProcessOSALMsg_7:
   \   000064                ; Setup parameters for call to function NLME_GetShortAddr
   \   000064   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000067   74FE         MOV       A,#-0x2
   \   000069   6A           XRL       A,R2
   \   00006A   7003         JNZ       ??bdb_ProcessOSALMsg_9
   \   00006C   74FF         MOV       A,#-0x1
   \   00006E   6B           XRL       A,R3
   \                     ??bdb_ProcessOSALMsg_9:
   \   00006F   700D         JNZ       ??bdb_ProcessOSALMsg_10
   \   000071   90....       MOV       DPTR,#_NIB + 20
   \   000074   E0           MOVX      A,@DPTR
   \   000075   64FE         XRL       A,#0xfe
   \   000077   7003         JNZ       ??bdb_ProcessOSALMsg_11
   \   000079   A3           INC       DPTR
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   F4           CPL       A
   \                     ??bdb_ProcessOSALMsg_11:
   \   00007C   601D         JZ        ??bdb_ProcessOSALMsg_12
   3059                        {
   3060                          uint16 addr = INVALID_NODE_ADDR;
   \                     ??bdb_ProcessOSALMsg_10:
   \   00007E   7407         MOV       A,#0x7
   \   000080   12....       LCALL     ?XSTACK_DISP0_8
   \   000083   74FE         MOV       A,#-0x2
   \   000085   F0           MOVX      @DPTR,A
   \   000086   A3           INC       DPTR
   \   000087   04           INC       A
   \   000088   F0           MOVX      @DPTR,A
   3061                          // Invalidate nwk addr so end device does not use in its data reqs.
   3062                          _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   000089   90....       MOV       DPTR,#_NIB + 20
   \   00008C   14           DEC       A
   \   00008D   F0           MOVX      @DPTR,A
   \   00008E   A3           INC       DPTR
   \   00008F   04           INC       A
   \   000090   F0           MOVX      @DPTR,A
   3063                          ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   \   000091                ; Setup parameters for call to function ZMacSetReq
   \   000091   7407         MOV       A,#0x7
   \   000093   12....       LCALL     ?XSTACK_DISP101_8
   \   000096   7953         MOV       R1,#0x53
   \   000098   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   3064                        }
   3065          
   3066                        //Clear the neighbor Table and network discovery tables.
   3067                        nwkNeighborInitTable();
   \                     ??bdb_ProcessOSALMsg_12:
   \   00009B                ; Setup parameters for call to function nwkNeighborInitTable
   \   00009B   12....       LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   3068                        NLME_NwkDiscTerm();
   \   00009E                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   00009E   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   3069                        _NIB.nwkState = NWK_INIT;
   \   0000A1   90....       MOV       DPTR,#_NIB + 35
   \   0000A4   E4           CLR       A
   \   0000A5   F0           MOVX      @DPTR,A
   3070                        
   3071                        bdb_tryNwkAssoc();
   \   0000A6                ; Setup parameters for call to function bdb_tryNwkAssoc
   \                     ??bdb_ProcessOSALMsg_6:
   \   0000A6   12....       LCALL     `??bdb_tryNwkAssoc::?relay`; Banked call to: bdb_tryNwkAssoc
   \   0000A9   02....       LJMP      ??bdb_ProcessOSALMsg_1 & 0xFFFF
   3072                      }
   3073                    break;
   3074                  }
   3075                }
   3076              break;
   3077              
   3078              case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
   3079                if(ZG_DEVICE_JOINING_TYPE)
   \                     ??bdb_ProcessOSALMsg_0:
   \   0000AC   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   6401         XRL       A,#0x1
   \   0000B2   6008         JZ        ??bdb_ProcessOSALMsg_13
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   6402         XRL       A,#0x2
   \   0000B7   6003         JZ        $+5
   \   0000B9   02....       LJMP      ??bdb_ProcessOSALMsg_1 & 0xFFFF
   3080                {
   3081                  if(msgPtr->hdr.status != BDB_MSG_EVENT_SUCCESS)
   \                     ??bdb_ProcessOSALMsg_13:
   \   0000BC   8A82         MOV       DPL,R2
   \   0000BE   8B83         MOV       DPH,R3
   \   0000C0   A3           INC       DPTR
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   6011         JZ        ??bdb_ProcessOSALMsg_14
   3082                  {
   3083                    bdbAttributes.bdbTCLinkKeyExchangeAttempts++;
   \   0000C4   90....       MOV       DPTR,#bdbAttributes + 19
   \   0000C7   E0           MOVX      A,@DPTR
   \   0000C8   04           INC       A
   \   0000C9   F0           MOVX      @DPTR,A
   3084                    if(bdbAttributes.bdbTCLinkKeyExchangeAttempts > bdbAttributes.bdbTCLinkKeyExchangeAttemptsMax)
   \   0000CA   F8           MOV       R0,A
   \   0000CB   A3           INC       DPTR
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   C3           CLR       C
   \   0000CE   98           SUBB      A,R0
   \   0000CF   5004         JNC       ??bdb_ProcessOSALMsg_14
   3085                    {
   3086                      //TCLK process fail due to many attempts fails
   3087                      bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, FALSE);
   \   0000D1                ; Setup parameters for call to function bdb_reportCommissioningState
   \   0000D1   7A00         MOV       R2,#0x0
   \   0000D3   806D         SJMP      ??bdb_ProcessOSALMsg_15
   3088                      return;
   3089                    }
   3090                  }
   3091                  switch(bdbCommissioningProcedureState.bdbTCExchangeState)
   \                     ??bdb_ProcessOSALMsg_14:
   \   0000D5   90....       MOV       DPTR,#bdbCommissioningProcedureState + 1
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   14           DEC       A
   \   0000DA   600C         JZ        ??bdb_ProcessOSALMsg_16
   \   0000DC   14           DEC       A
   \   0000DD   606A         JZ        ??bdb_ProcessOSALMsg_17
   \   0000DF   14           DEC       A
   \   0000E0   7003         JNZ       $+5
   \   0000E2   02....       LJMP      ??bdb_ProcessOSALMsg_18 & 0xFFFF
   \   0000E5   02....       LJMP      ??bdb_ProcessOSALMsg_1 & 0xFFFF
   3092                  {
   3093                    case BDB_REQ_TC_STACK_VERSION:
   3094                      bdb_requestTCStackVersion();
   \                     ??bdb_ProcessOSALMsg_16:
   \   0000E8   90....       MOV       DPTR,#requestNewTrustCenterLinkKey
   \   0000EB   E0           MOVX      A,@DPTR
   \   0000EC   604D         JZ        ??bdb_ProcessOSALMsg_19
   \   0000EE                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   0000EE   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   0000F1   E9           MOV       A,R1
   \   0000F2   7043         JNZ       ??bdb_ProcessOSALMsg_20
   \   0000F4   90....       MOV       DPTR,#bdbAttributes + 21
   \   0000F7   E0           MOVX      A,@DPTR
   \   0000F8   702D         JNZ       ??bdb_ProcessOSALMsg_21
   \   0000FA   7419         MOV       A,#0x19
   \   0000FC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FF   7402         MOV       A,#0x2
   \   000101   F0           MOVX      @DPTR,A
   \   000102   7411         MOV       A,#0x11
   \   000104   12....       LCALL     ?XSTACK_DISP0_8
   \   000107   E4           CLR       A
   \   000108   F0           MOVX      @DPTR,A
   \   000109   A3           INC       DPTR
   \   00010A   F0           MOVX      @DPTR,A
   \   00010B                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   00010B   F5..         MOV       ?V0,A
   \   00010D   78..         MOV       R0,#?V0
   \   00010F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000112   7902         MOV       R1,#0x2
   \   000114   7C00         MOV       R4,#0x0
   \   000116   7D00         MOV       R5,#0x0
   \   000118   7412         MOV       A,#0x12
   \   00011A   12....       LCALL     ?XSTACK_DISP101_8
   \   00011D   12....       LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   000120   7401         MOV       A,#0x1
   \   000122   12....       LCALL     ?DEALLOC_XSTACK8
   \   000125                ; Setup parameters for call to function osal_stop_timerEx
   \   000125   806D         SJMP      ??bdb_ProcessOSALMsg_22
   \                     ??bdb_ProcessOSALMsg_21:
   \   000127   90....       MOV       DPTR,#pfnCBKETCLinkKeyExchange
   \   00012A   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   00012D   6078         JZ        ??bdb_ProcessOSALMsg_1
   \   00012F                ; Setup parameters for indirect call
   \   00012F   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000132   12....       LCALL     ?CALL_IND
   \   000135   8070         SJMP      ??bdb_ProcessOSALMsg_1
   \                     ??bdb_ProcessOSALMsg_20:
   \   000137                ; Setup parameters for call to function bdb_setNodeJoinLinkKeyType
   \   000137   7901         MOV       R1,#0x1
   \   000139   8002         SJMP      ??bdb_ProcessOSALMsg_23
   \                     ??bdb_ProcessOSALMsg_19:
   \   00013B                ; Setup parameters for call to function bdb_setNodeJoinLinkKeyType
   \   00013B   7900         MOV       R1,#0x0
   \                     ??bdb_ProcessOSALMsg_23:
   \   00013D   12....       LCALL     `??bdb_setNodeJoinLinkKeyType::?relay`; Banked call to: bdb_setNodeJoinLinkKeyType
   \   000140                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000140   7A01         MOV       R2,#0x1
   \                     ??bdb_ProcessOSALMsg_15:
   \   000142   7901         MOV       R1,#0x1
   \   000144   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   \   000147   805E         SJMP      ??bdb_ProcessOSALMsg_1
   3095                    break;
   3096                    case BDB_REQ_TC_LINK_KEY:
   3097                      bdb_requestTCLinkKey();
   \                     ??bdb_ProcessOSALMsg_17:
   \   000149   7403         MOV       A,#0x3
   \   00014B   12....       LCALL     ?XSTACK_DISP0_8
   \   00014E   E4           CLR       A
   \   00014F   F0           MOVX      @DPTR,A
   \   000150   7404         MOV       A,#0x4
   \   000152   12....       LCALL     ?XSTACK_DISP0_8
   \   000155   7404         MOV       A,#0x4
   \   000157   F0           MOVX      @DPTR,A
   \   000158                ; Setup parameters for call to function APSME_RequestKeyReq
   \   000158   14           DEC       A
   \   000159   12....       LCALL     ?XSTACK_DISP101_8
   \   00015C   12....       LCALL     `??APSME_RequestKeyReq::?relay`; Banked call to: APSME_RequestKeyReq
   \   00015F                ; Setup parameters for call to function osal_stop_timerEx
   \   00015F   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000162                ; Setup parameters for call to function osal_start_timerEx
   \   000162   90....       MOV       DPTR,#requestLinkKeyTimeout
   \   000165   8033         SJMP      ??bdb_ProcessOSALMsg_8
   3098                    break;
   3099                    case BDB_REQ_VERIFY_TC_LINK_KEY:
   3100                      bdb_requestVerifyTCLinkKey();
   \                     ??bdb_ProcessOSALMsg_18:
   \   000167                ; Setup parameters for call to function APSME_GetRequest
   \   000167   7409         MOV       A,#0x9
   \   000169   12....       LCALL     ?XSTACK_DISP102_8
   \   00016C   7A00         MOV       R2,#0x0
   \   00016E   7B00         MOV       R3,#0x0
   \   000170   79AB         MOV       R1,#-0x55
   \   000172   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   \   000175   7409         MOV       A,#0x9
   \   000177   12....       LCALL     ?XSTACK_DISP100_8
   \   00017A   85..82       MOV       DPL,?XSP + 0
   \   00017D   85..83       MOV       DPH,?XSP + 1
   \   000180   E8           MOV       A,R0
   \   000181   F0           MOVX      @DPTR,A
   \   000182   A3           INC       DPTR
   \   000183   E9           MOV       A,R1
   \   000184   F0           MOVX      @DPTR,A
   \   000185   7402         MOV       A,#0x2
   \   000187   12....       LCALL     ?XSTACK_DISP0_8
   \   00018A   7404         MOV       A,#0x4
   \   00018C   F0           MOVX      @DPTR,A
   \   00018D                ; Setup parameters for call to function APSME_VerifyKeyReq
   \   00018D   AA..         MOV       R2,?XSP + 0
   \   00018F   AB..         MOV       R3,?XSP + 1
   \   000191   12....       LCALL     `??APSME_VerifyKeyReq::?relay`; Banked call to: APSME_VerifyKeyReq
   \   000194                ; Setup parameters for call to function osal_stop_timerEx
   \                     ??bdb_ProcessOSALMsg_22:
   \   000194   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000197                ; Setup parameters for call to function osal_start_timerEx
   \   000197   90....       MOV       DPTR,#__Constant_1388
   \                     ??bdb_ProcessOSALMsg_8:
   \   00019A   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00019D   7A00         MOV       R2,#0x0
   \   00019F   7B10         MOV       R3,#0x10
   \   0001A1   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   0001A4   12....       LCALL     ?DEALLOC_XSTACK8
   3101                    break;
   3102                  }
   3103                }
   3104             break;
   3105          #endif
   3106             }
   3107          }
   \                     ??bdb_ProcessOSALMsg_1:
   \   0001A7   741A         MOV       A,#0x1a
   \   0001A9   02....       LJMP      ??Subroutine68_0 & 0xFFFF
   3108          
   3109          
   3110          /*********************************************************************
   3111           * @fn      bdb_processTimeout
   3112           *
   3113           * @brief   Handles timeout of the bdb process
   3114           *
   3115           * @param   msgPtr - message to process
   3116           *
   3117           * @return  none
   3118           */
   3119          void bdb_processTimeout(void)
   3120          {
   3121          #if (ZG_BUILD_JOINING_TYPE)
   3122            if(ZG_DEVICE_JOINING_TYPE)
   3123            {
   3124              switch(bdbCommissioningProcedureState.bdbCommissioningState)
   3125              {
   3126                case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
   3127                  
   3128                  bdb_tcLinkKeyExchangeAttempt(FALSE,bdbCommissioningProcedureState.bdbTCExchangeState);
   3129                break;
   3130                case BDB_COMMISSIONING_STATE_JOINING:
   3131                  if(bdbCommissioningProcedureState.bdbJoinState == BDB_JOIN_STATE_WAITING_NWK_KEY)
   3132                  {
   3133                    //If nwk key fails, then try association again
   3134                    bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_ASSOC;
   3135                    bdb_nwkAssocAttemt(FALSE);
   3136                  }
   3137                break;
   3138              }
   3139            }
   3140          #endif
   3141            
   3142          }
   3143          
   3144          
   3145          /*********************************************************************
   3146           * @fn      bdb_SendMsg
   3147           *
   3148           * @brief   Send messages to bdb processing with the expected format
   3149           *
   3150           * @param   msgPtr - message to process
   3151           *
   3152           * @return  none
   3153           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3154          void bdb_SendMsg(uint8 taskID, uint8 toCommissioningState,uint8 status, uint8 len, uint8 *buf)
   \                     bdb_SendMsg:
   3155          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000   74EF         MOV       A,#-0x11
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V7,R2
   \   000009   8B..         MOV       ?V8,R3
   \   00000B   8C..         MOV       ?V3,R4
   3156            bdbInMsg_t *msgPtr = NULL;
   3157          
   3158            if ( (len > 0) && (buf != NULL) )
   \   00000D   EC           MOV       A,R4
   \   00000E   6052         JZ        ??bdb_SendMsg_0
   \   000010   7411         MOV       A,#0x11
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000018   6048         JZ        ??bdb_SendMsg_0
   3159            {
   3160              uint8 tmpLength;
   3161              tmpLength = len;
   3162              tmpLength += sizeof(osal_event_hdr_t);
   3163              
   3164              msgPtr = (bdbInMsg_t *)osal_msg_allocate( tmpLength );
   \   00001A                ; Setup parameters for call to function osal_msg_allocate
   \   00001A   7402         MOV       A,#0x2
   \   00001C   2C           ADD       A,R4
   \   00001D   FA           MOV       R2,A
   \   00001E   7B00         MOV       R3,#0x0
   \   000020   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000023   8A..         MOV       ?V4,R2
   \   000025   8B..         MOV       ?V5,R3
   \   000027   AE..         MOV       R6,?V4
   \   000029   AF..         MOV       R7,?V5
   3165              
   3166              if ( msgPtr )
   \   00002B   EA           MOV       A,R2
   \   00002C   4F           ORL       A,R7
   \   00002D   6033         JZ        ??bdb_SendMsg_0
   3167              {
   3168                osal_memcpy( msgPtr->buf, buf, len );
   \   00002F                ; Setup parameters for call to function osal_memcpy
   \   00002F   85....       MOV       ?V4,?V0
   \   000032   85....       MOV       ?V5,?V1
   \   000035   75..00       MOV       ?V6,#0x0
   \   000038   78..         MOV       R0,#?V4
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00003D   AC..         MOV       R4,?V3
   \   00003F   7D00         MOV       R5,#0x0
   \   000041   EA           MOV       A,R2
   \   000042   2402         ADD       A,#0x2
   \   000044   FA           MOV       R2,A
   \   000045   E4           CLR       A
   \   000046   3F           ADDC      A,R7
   \   000047   FB           MOV       R3,A
   \   000048   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   00004B   12....       LCALL     ?DEALLOC_XSTACK8
   3169              
   3170                msgPtr->hdr.event = toCommissioningState;
   \   00004E   8E82         MOV       DPL,R6
   \   000050   8F83         MOV       DPH,R7
   \   000052   E5..         MOV       A,?V7
   \   000054   F0           MOVX      @DPTR,A
   3171                msgPtr->hdr.status = status;
   \   000055   A3           INC       DPTR
   \   000056   E5..         MOV       A,?V8
   \   000058   F0           MOVX      @DPTR,A
   3172                osal_msg_send( taskID, (uint8 *)msgPtr );
   \   000059                ; Setup parameters for call to function osal_msg_send
   \   000059   EE           MOV       A,R6
   \   00005A   FA           MOV       R2,A
   \   00005B   EF           MOV       A,R7
   \   00005C   FB           MOV       R3,A
   \   00005D   A9..         MOV       R1,?V2
   \   00005F   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   3173              }
   3174            }
   3175          }
   \                     ??bdb_SendMsg_0:
   \   000062   7F09         MOV       R7,#0x9
   \   000064   02....       LJMP      ?BANKED_LEAVE_XDATA
   3176          
   3177          
   3178          /*********************************************************************
   3179           * @fn      bdb_RegisterCommissioningStatusCB
   3180           *
   3181           * @brief   Register a callback in which the status of the procedures done in
   3182           *          BDB commissioning process will be reported
   3183           *
   3184           * @param   bdbGCB_CommissioningStatus - application callback
   3185           *
   3186           * @return  none
   3187           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3188          void bdb_RegisterCommissioningStatusCB(bdbGCB_CommissioningStatus_t bdbGCB_CommissioningStatus)
   \                     bdb_RegisterCommissioningStatusCB:
   3189          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3190            pfnCommissioningStatusCB = bdbGCB_CommissioningStatus;
   \   000004   90....       MOV       DPTR,#pfnCommissioningStatusCB
   \   000007   02....       LJMP      ?Subroutine2 & 0xFFFF
   3191          }
   3192          
   3193          /*********************************************************************
   3194           * @fn      bdb_ClearNetworkParams
   3195           *
   3196           * @brief   Restore nwk parameters to invalid if the device is not on a network
   3197           *
   3198           * @param   void
   3199           *
   3200           * @return  void
   3201           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3202          void bdb_ClearNetworkParams(void)
   \                     bdb_ClearNetworkParams:
   3203          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3204          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
   3205            if ( bdbAttributes.bdbNodeIsOnANetwork == FALSE )
   3206            {
   3207              //Clear the event
   3208              _NIB.nwkPanId = INVALID_NODE_ADDR;
   3209              _NIB.nwkLogicalChannel = 0;
   3210              _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   3211              touchLink_SetMacNwkParams( _NIB.nwkDevAddress, _NIB.nwkPanId, _NIB.nwkLogicalChannel );
   3212            }
   3213          #endif
   3214          }
   \   000000   02....       LJMP      ?BRET
   3215          
   3216          /*********************************************************************
   3217           * @fn      bdb_getZCLFrameCounter
   3218           *
   3219           * @brief   Get the next ZCL Frame Counter for packet sequence number
   3220           *
   3221           * @param   none
   3222           *
   3223           * @return  next ZCL frame counter
   3224           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3225          uint8 bdb_getZCLFrameCounter(void)
   \                     bdb_getZCLFrameCounter:
   3226          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3227            bdb_ZclTransactionSequenceNumber++;
   \   000004   90....       MOV       DPTR,#bdb_ZclTransactionSequenceNumber
   \   000007   E0           MOVX      A,@DPTR
   \   000008   04           INC       A
   \   000009   F0           MOVX      @DPTR,A
   3228            return bdb_ZclTransactionSequenceNumber;
   \   00000A   02....       LJMP      ??Subroutine57_0 & 0xFFFF
   3229          
   3230          }
   3231          
   3232          
   3233          #if (ZG_BUILD_JOINING_TYPE)
   3234          /*********************************************************************
   3235           * @fn      bdb_RegisterCBKETCLinkKeyExchangeCB
   3236           *
   3237           * @brief   Register a callback in which the TC link key exchange procedure will 
   3238           *          be performed by application.
   3239           *          Upon fail or success bdb must be notified, see bdb_CBKETCLinkKeyExchangeAttempt
   3240           *
   3241           * @param   bdbGCB_TCLinkKeyExchangeMethod - application callback
   3242           *
   3243           * @return  none
   3244           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3245          void bdb_RegisterCBKETCLinkKeyExchangeCB(bdbGCB_CBKETCLinkKeyExchange_t bdbGCB_CBKETCLinkKeyExchange)
   \                     bdb_RegisterCBKETCLinkKeyExchangeCB:
   3246          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3247            if(bdbGCB_CBKETCLinkKeyExchange)
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   90....       MOV       DPTR,#pfnCBKETCLinkKeyExchange
   \   000009   600A         JZ        ??bdb_RegisterCBKETCLinkKeyExchangeCB_0
   3248            {
   3249              pfnCBKETCLinkKeyExchange = bdbGCB_CBKETCLinkKeyExchange;
   \   00000B   12....       LCALL     ?Subroutine14 & 0xFFFF
   3250              bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_CBKE;
   \                     ??CrossCallReturnLabel_18:
   \   00000E   90....       MOV       DPTR,#bdbAttributes + 21
   \   000011   7401         MOV       A,#0x1
   \   000013   8007         SJMP      ??bdb_RegisterCBKETCLinkKeyExchangeCB_1
   3251            }
   3252            else
   3253            {
   3254              pfnCBKETCLinkKeyExchange = NULL;
   \                     ??bdb_RegisterCBKETCLinkKeyExchangeCB_0:
   \   000015   E4           CLR       A
   \   000016   F0           MOVX      @DPTR,A
   \   000017   A3           INC       DPTR
   \   000018   F0           MOVX      @DPTR,A
   3255              bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_APS_KEY;
   \   000019   90....       MOV       DPTR,#bdbAttributes + 21
   3256            }
   \                     ??bdb_RegisterCBKETCLinkKeyExchangeCB_1:
   \   00001C   02....       LJMP      ??Subroutine53_0 & 0xFFFF
   3257          }
   3258          
   3259          /*********************************************************************
   3260           * @fn      bdb_RegisterForFilterNwkDescCB
   3261           *
   3262           * @brief   Register a callback in which the application gets the list of network
   3263           *          descriptors got from active scan.
   3264           *          Use bdb_nwkDescFree to release the network descriptors that are not 
   3265           *          of interest and leave those which are to be attempted.
   3266           *
   3267           * @param   bdbGCB_FilterNwkDesc - application callback
   3268           *
   3269           * @return  none
   3270           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3271          void bdb_RegisterForFilterNwkDescCB(bdbGCB_FilterNwkDesc_t bdbGCB_FilterNwkDesc)
   \                     bdb_RegisterForFilterNwkDescCB:
   3272          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3273            if(bdbGCB_FilterNwkDesc)
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   6006         JZ        ??CrossCallReturnLabel_19
   3274            {
   3275              pfnFilterNwkDesc = bdbGCB_FilterNwkDesc;
   \   000008   90....       MOV       DPTR,#pfnFilterNwkDesc
   \   00000B   12....       LCALL     ?Subroutine14 & 0xFFFF
   3276            }
   3277          }
   \                     ??CrossCallReturnLabel_19:
   \   00000E   02....       LJMP      ??Subroutine54_0 & 0xFFFF
   3278          
   3279          
   3280          /*********************************************************************
   3281           * @fn          bdb_CBKETCLinkKeyExchangeAttempt
   3282           *
   3283           * @brief       Tell BDB module the result of the TC link key exchange, to try
   3284           *              the default process or to keep going with the joining process.
   3285           *
   3286           * @param       didSuccess - TRUE if the process was succes, False otherwise
   3287           *
   3288           * @return      unprocessed events
   3289           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3290          void bdb_CBKETCLinkKeyExchangeAttempt(bool didSuccess)
   \                     bdb_CBKETCLinkKeyExchangeAttempt:
   3291          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   3292            if(didSuccess)
   \   000006   6005         JZ        ??bdb_CBKETCLinkKeyExchangeAttempt_0
   3293            {
   3294              bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
   \   000008                ; Setup parameters for call to function bdb_setNodeJoinLinkKeyType
   \   000008   12....       LCALL     ?Subroutine40 & 0xFFFF
   3295              bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, TRUE);
   3296            }
   \                     ??CrossCallReturnLabel_65:
   \   00000B   8012         SJMP      ??bdb_CBKETCLinkKeyExchangeAttempt_1
   3297            else
   3298            {
   3299              bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_APS_KEY;
   \                     ??bdb_CBKETCLinkKeyExchangeAttempt_0:
   \   00000D   90....       MOV       DPTR,#bdbAttributes + 21
   \   000010   E4           CLR       A
   \   000011   F0           MOVX      @DPTR,A
   3300              //We are going back one state to try it again
   3301              bdbCommissioningProcedureState.bdbTCExchangeState -= BDB_TC_EXCHANGE_NEXT_STATE;
   \   000012   90....       MOV       DPTR,#bdbCommissioningProcedureState + 1
   \   000015   E0           MOVX      A,@DPTR
   \   000016   14           DEC       A
   \   000017   F0           MOVX      @DPTR,A
   3302              bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_STACK_VERSION);
   \   000018                ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
   \   000018   7A01         MOV       R2,#0x1
   \   00001A   7901         MOV       R1,#0x1
   \   00001C   12....       LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
   3303            }
   3304          
   3305          }
   \                     ??bdb_CBKETCLinkKeyExchangeAttempt_1:
   \   00001F   02....       LJMP      ?Subroutine0 & 0xFFFF
   3306          #endif
   3307          
   3308          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
   3309          
   3310          /*********************************************************************
   3311           * @fn      gp_ChangeChannelReq
   3312           *
   3313           * @brief   Callback function to notify the BDB about a GP commissioning 
   3314           * request that will change the current channel for at most 
   3315           * gpBirectionalCommissioningChangeChannelTimeout ms
   3316           *
   3317           * @param   channel - Channel in which the commissioning will take place
   3318           *
   3319           * @return  TRUE to allow change channel, FALSE to do not allow
   3320           */
   3321          static uint8 gp_ChangeChannelReq(void)
   3322          {
   3323            uint8 allowChangeChannel = TRUE;
   3324            
   3325            //Do not allow changes of channel if any process is in place
   3326            if(bdbAttributes.bdbCommissioningMode)
   3327            {
   3328              allowChangeChannel = FALSE;
   3329            }
   3330            
   3331            //Check application state to decide if allow change channel or not
   3332            
   3333            return allowChangeChannel;
   3334          }
   3335          
   3336          
   3337          /*********************************************************************
   3338           * @fn          gp_CBInit
   3339           *
   3340           * @brief       Register the callbacks for GP endpoint
   3341           *
   3342           * @param       none
   3343           *
   3344           * @return      none
   3345           */
   3346          void gp_CBInit(void)
   3347          {
   3348            GP_DataCnfGCB = GP_DataCnf;
   3349            GP_endpointInitGCB = gp_endpointInit;  
   3350            GP_expireDuplicateFilteringGCB = gp_expireDuplicateFiltering;
   3351            GP_stopCommissioningModeGCB = gp_stopCommissioningMode;
   3352            GP_returnOperationalChannelGCB = gp_returnOperationalChannel;
   3353            GP_DataIndGCB = GP_DataInd;
   3354            GP_SecReqGCB = GP_SecReq;   
   3355            GP_CheckAnnouncedDeviceGCB = gp_CheckAnnouncedDevice;
   3356              
   3357            GP_aliasConflictAnnce = &aliasConflictAnnce;
   3358            
   3359            GP_endpointInitGCB();
   3360          }
   3361          
   3362          #endif
   3363          
   3364          /*********************************************************************
   3365          *********************************************************************/
   3366          
   3367          
   3368          /******************************************************************************
   3369           * @fn          bdb_GenerateInstallCodeCRC
   3370           *
   3371           * @brief       Creates a CRC for the install code passed.
   3372           *
   3373           * @param       installCode - install code from which CRC will be generated
   3374           *
   3375           * @return      CRC
   3376           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3377          uint16 bdb_GenerateInstallCodeCRC(uint8 *installCode)
   \                     bdb_GenerateInstallCodeCRC:
   3378          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV       A,#-0x2
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   3379            uint16 CRC;
   3380            
   3381            bdb_calculateCCITT_CRC(installCode, INSTALL_CODE_LEN, &CRC);
   \   000009                ; Setup parameters for call to function bdb_calculateCCITT_CRC
   \   000009   90....       MOV       DPTR,#__Constant_10
   \   00000C   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00000F   7404         MOV       A,#0x4
   \   000011   12....       LCALL     ?XSTACK_DISP102_8
   \   000014   12....       LCALL     `??bdb_calculateCCITT_CRC::?relay`; Banked call to: bdb_calculateCCITT_CRC
   \   000017   7404         MOV       A,#0x4
   \   000019   12....       LCALL     ?DEALLOC_XSTACK8
   3382          
   3383            return CRC;
   \   00001C   85..82       MOV       DPL,?XSP + 0
   \   00001F   85..83       MOV       DPH,?XSP + 1
   \   000022   12....       LCALL     ??Subroutine71_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000025   7402         MOV       A,#0x2
   \   000027   02....       LJMP      ?Subroutine5 & 0xFFFF
   3384          }
   3385          
   3386          /******************************************************************************
   3387           * @fn          bdb_calculateCCITT_CRC
   3388           *
   3389           * @brief       Creates a CRC for the install code passed.
   3390           *
   3391           * @param       Mb - install code from which CRC will be generated
   3392           * @param       msglen - install code length
   3393           * @param       crc - 
   3394           *
   3395           * @return      none
   3396           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3397          void bdb_calculateCCITT_CRC (uint8 *Mb, uint32 msglen, uint16 *crc)
   \                     bdb_calculateCCITT_CRC:
   3398          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
   3399            uint16 crcinit_direct; 
   3400            uint16 crcinit_nondirect;
   3401            bdb_crcInit(crc, &crcinit_direct, &crcinit_nondirect);
   \   000012                ; Setup parameters for call to function bdb_crcInit
   \   000012   A8..         MOV       R0,?XSP + 0
   \   000014   A9..         MOV       R1,?XSP + 1
   \   000016   88..         MOV       ?V2,R0
   \   000018   89..         MOV       ?V3,R1
   \   00001A   78..         MOV       R0,#?V2
   \   00001C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001F   7404         MOV       A,#0x4
   \   000021   12....       LCALL     ?XSTACK_DISP102_8
   \   000024   AA..         MOV       R2,?V0
   \   000026   AB..         MOV       R3,?V1
   \   000028   12....       LCALL     `??bdb_crcInit::?relay`; Banked call to: bdb_crcInit
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?DEALLOC_XSTACK8
   3402            *crc = bdb_crcBitByBitFast(Mb, msglen, crcinit_direct, crcinit_nondirect);
   \   000030                ; Setup parameters for call to function bdb_crcBitByBitFast
   \   000030   85..82       MOV       DPL,?XSP + 0
   \   000033   85..83       MOV       DPH,?XSP + 1
   \   000036   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000039   7412         MOV       A,#0x12
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000041   7408         MOV       A,#0x8
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   E0           MOVX      A,@DPTR
   \   000047   FC           MOV       R4,A
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   FD           MOV       R5,A
   \   00004B   EE           MOV       A,R6
   \   00004C   FA           MOV       R2,A
   \   00004D   EF           MOV       A,R7
   \   00004E   FB           MOV       R3,A
   \   00004F   12....       LCALL     `??bdb_crcBitByBitFast::?relay`; Banked call to: bdb_crcBitByBitFast
   \   000052   7406         MOV       A,#0x6
   \   000054   12....       LCALL     ?DEALLOC_XSTACK8
   \   000057   85..82       MOV       DPL,?V0
   \   00005A   85..83       MOV       DPH,?V1
   \   00005D   12....       LCALL     ?Subroutine14 & 0xFFFF
   3403          }
   \                     ??CrossCallReturnLabel_20:
   \   000060   02....       LJMP      ?Subroutine4 & 0xFFFF
   3404          
   3405          
   3406          /******************************************************************************
   3407           * @fn          bdb_crcInit
   3408           *
   3409           * @brief       Initialize CRC calculation
   3410           *
   3411           * @param       crc - 
   3412           * @param       crcinit_direct -
   3413           * @param       crcinit_nondirect - 
   3414           *
   3415           * @return      none
   3416           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3417          void bdb_crcInit(uint16 *crc, uint16 *crcinit_direct, uint16 *crcinit_nondirect)
   \                     bdb_crcInit:
   3418          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3419          
   3420            uint16 i;
   3421            uint16 bit;
   3422          
   3423            *crcinit_direct = CRC_INIT;
   \   000005   8C82         MOV       DPL,R4
   \   000007   8D83         MOV       DPH,R5
   \   000009   74FF         MOV       A,#-0x1
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   A3           INC       DPTR
   \   00000D   F0           MOVX      @DPTR,A
   3424            *crc = CRC_INIT;
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   F0           MOVX      @DPTR,A
   \   000013   A3           INC       DPTR
   \   000014   F0           MOVX      @DPTR,A
   3425            for (i=0; i<CRC_ORDER; i++) 
   \   000015   7E10         MOV       R6,#0x10
   3426            {
   3427              bit = *crc & 1;
   \                     ??bdb_crcInit_0:
   \   000017   8A82         MOV       DPL,R2
   \   000019   8B83         MOV       DPH,R3
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F8           MOV       R0,A
   3428              if (bit) *crc^= CRC_POLYNOM;
   \   00001D   A2E0         MOV       C,0xE0 /* A   */.0
   \   00001F   5008         JNC       ??bdb_crcInit_1
   \   000021   6421         XRL       A,#0x21
   \   000023   F0           MOVX      @DPTR,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   6410         XRL       A,#0x10
   \   000028   F0           MOVX      @DPTR,A
   3429              *crc >>= 1;
   \                     ??bdb_crcInit_1:
   \   000029   8A82         MOV       DPL,R2
   \   00002B   8B83         MOV       DPH,R3
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   FC           MOV       R4,A
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   C3           CLR       C
   \   000032   13           RRC       A
   \   000033   FD           MOV       R5,A
   \   000034   EC           MOV       A,R4
   \   000035   13           RRC       A
   \   000036   8A82         MOV       DPL,R2
   \   000038   8B83         MOV       DPH,R3
   \   00003A   F0           MOVX      @DPTR,A
   \   00003B   A3           INC       DPTR
   \   00003C   ED           MOV       A,R5
   \   00003D   F0           MOVX      @DPTR,A
   3430              if (bit) *crc|= CRC_HIGHBIT;
   \   00003E   E8           MOV       A,R0
   \   00003F   A2E0         MOV       C,0xE0 /* A   */.0
   \   000041   5009         JNC       ??bdb_crcInit_2
   \   000043   8A82         MOV       DPL,R2
   \   000045   8B83         MOV       DPH,R3
   \   000047   A3           INC       DPTR
   \   000048   E0           MOVX      A,@DPTR
   \   000049   4480         ORL       A,#0x80
   \   00004B   F0           MOVX      @DPTR,A
   3431            }	
   \                     ??bdb_crcInit_2:
   \   00004C   1E           DEC       R6
   \   00004D   EE           MOV       A,R6
   \   00004E   70C7         JNZ       ??bdb_crcInit_0
   3432            *crcinit_nondirect = *crc;
   \   000050   8A82         MOV       DPL,R2
   \   000052   8B83         MOV       DPH,R3
   \   000054   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000057   7409         MOV       A,#0x9
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   FA           MOV       R2,A
   \   00005E   A3           INC       DPTR
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   F583         MOV       DPH,A
   \   000062   8A82         MOV       DPL,R2
   \   000064   E8           MOV       A,R0
   \   000065   F0           MOVX      @DPTR,A
   \   000066   A3           INC       DPTR
   \   000067   E9           MOV       A,R1
   \   000068   F0           MOVX      @DPTR,A
   3433          
   3434          }
   \   000069   02....       LJMP      ?Subroutine0 & 0xFFFF
   3435          
   3436          
   3437          /******************************************************************************
   3438           * @fn          bdb_crcReflect
   3439           *
   3440           * @brief       
   3441           *
   3442           * @param       crc - 
   3443           * @param       bitnum -
   3444           *
   3445           * @return      none
   3446           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3447          uint16 bdb_crcReflect (uint16 crc, uint16 bitnum)
   \                     bdb_crcReflect:
   3448          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3449          
   3450            // reflects the lower 'bitnum' bits of 'crc'
   3451          
   3452            uint16 i, j=1, crcout=0;
   \   000005   7E01         MOV       R6,#0x1
   \   000007   7F00         MOV       R7,#0x0
   \   000009   8F..         MOV       ?V0,R7
   \   00000B   8F..         MOV       ?V1,R7
   3453          
   3454            for (i=(uint16)1<<(bitnum-1); i; i>>=1) {
   \   00000D   8E..         MOV       ?V2,R6
   \   00000F   8F..         MOV       ?V3,R7
   \   000011   EC           MOV       A,R4
   \   000012   14           DEC       A
   \   000013   78..         MOV       R0,#?V2
   \   000015   12....       LCALL     ?S_SHL
   \   000018   A8..         MOV       R0,?V2
   \   00001A   A9..         MOV       R1,?V3
   \   00001C   8022         SJMP      ??bdb_crcReflect_0
   3455              if (crc & i) crcout|=j;
   \                     ??bdb_crcReflect_1:
   \   00001E   EA           MOV       A,R2
   \   00001F   58           ANL       A,R0
   \   000020   FC           MOV       R4,A
   \   000021   EB           MOV       A,R3
   \   000022   59           ANL       A,R1
   \   000023   FD           MOV       R5,A
   \   000024   EC           MOV       A,R4
   \   000025   4D           ORL       A,R5
   \   000026   600A         JZ        ??bdb_crcReflect_2
   \   000028   EE           MOV       A,R6
   \   000029   45..         ORL       A,?V0
   \   00002B   F5..         MOV       ?V0,A
   \   00002D   EF           MOV       A,R7
   \   00002E   45..         ORL       A,?V1
   \   000030   F5..         MOV       ?V1,A
   3456              j<<= 1;
   \                     ??bdb_crcReflect_2:
   \   000032   EE           MOV       A,R6
   \   000033   25E0         ADD       A,0xE0 /* A   */
   \   000035   FE           MOV       R6,A
   \   000036   EF           MOV       A,R7
   \   000037   33           RLC       A
   \   000038   FF           MOV       R7,A
   3457            }
   \   000039   E9           MOV       A,R1
   \   00003A   C3           CLR       C
   \   00003B   13           RRC       A
   \   00003C   F9           MOV       R1,A
   \   00003D   E8           MOV       A,R0
   \   00003E   13           RRC       A
   \   00003F   F8           MOV       R0,A
   \                     ??bdb_crcReflect_0:
   \   000040   E8           MOV       A,R0
   \   000041   49           ORL       A,R1
   \   000042   70DA         JNZ       ??bdb_crcReflect_1
   3458            return (crcout);
   \   000044   AA..         MOV       R2,?V0
   \   000046   AB..         MOV       R3,?V1
   \   000048   02....       LJMP      ??Subroutine65_0 & 0xFFFF
   3459          }
   3460          
   3461          
   3462          /******************************************************************************
   3463           * @fn          bdb_crcBitByBitFast
   3464           *
   3465           * @brief       
   3466           *
   3467           * @param       p - 
   3468           * @param       len -
   3469           * @param       crcinit_direct - 
   3470           * @param       crcinit_nondirect -
   3471           *
   3472           * @return      crc
   3473           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3474          uint16 bdb_crcBitByBitFast(uint8 * p, uint32 len, uint16 crcinit_direct, uint16 crcinit_nondirect) 
   \                     bdb_crcBitByBitFast:
   3475          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   3476            // fast bit by bit algorithm without augmented zero bytes.
   3477            // does not use lookup table, suited for polynom orders between 1...32.
   3478          
   3479            uint16 i, j, c, bit;
   3480            uint16 crc = crcinit_direct;
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   3481          
   3482            for (i=0; i<len; i++) {
   \   00000D   75..00       MOV       ?V0,#0x0
   \   000010   75..00       MOV       ?V1,#0x0
   \   000013   7414         MOV       A,#0x14
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   78..         MOV       R0,#?V8
   \   00001A   12....       LCALL     ?L_MOV_X
   \   00001D   8046         SJMP      ??bdb_crcBitByBitFast_0
   3483          
   3484              c = (uint16)*p++;
   \                     ??bdb_crcBitByBitFast_1:
   \   00001F   85..82       MOV       DPL,?V2
   \   000022   85..83       MOV       DPH,?V3
   \   000025   E0           MOVX      A,@DPTR
   \   000026   FA           MOV       R2,A
   \   000027   7B00         MOV       R3,#0x0
   \   000029   A3           INC       DPTR
   \   00002A   8582..       MOV       ?V2,DPL
   \   00002D   8583..       MOV       ?V3,DPH
   3485              c = bdb_crcReflect(c, 8);
   \   000030                ; Setup parameters for call to function bdb_crcReflect
   \   000030   7C08         MOV       R4,#0x8
   \   000032   7D00         MOV       R5,#0x0
   \   000034   12....       LCALL     `??bdb_crcReflect::?relay`; Banked call to: bdb_crcReflect
   3486          
   3487              for (j=0x80; j; j>>=1) {
   \   000037   7880         MOV       R0,#-0x80
   3488          
   3489                bit = crc & CRC_HIGHBIT;
   \                     ??bdb_crcBitByBitFast_2:
   \   000039   EF           MOV       A,R7
   \   00003A   5480         ANL       A,#0x80
   \   00003C   FD           MOV       R5,A
   3490                crc<<= 1;
   \   00003D   EE           MOV       A,R6
   \   00003E   25E0         ADD       A,0xE0 /* A   */
   \   000040   FE           MOV       R6,A
   \   000041   EF           MOV       A,R7
   \   000042   33           RLC       A
   \   000043   FF           MOV       R7,A
   3491                if (c & j) bit^= CRC_HIGHBIT;
   \   000044   EA           MOV       A,R2
   \   000045   58           ANL       A,R0
   \   000046   6004         JZ        ??bdb_crcBitByBitFast_3
   \   000048   7480         MOV       A,#-0x80
   \   00004A   6D           XRL       A,R5
   \   00004B   FD           MOV       R5,A
   3492                if (bit) crc^= CRC_POLYNOM;
   \                     ??bdb_crcBitByBitFast_3:
   \   00004C   ED           MOV       A,R5
   \   00004D   6008         JZ        ??bdb_crcBitByBitFast_4
   \   00004F   7421         MOV       A,#0x21
   \   000051   6E           XRL       A,R6
   \   000052   FE           MOV       R6,A
   \   000053   7410         MOV       A,#0x10
   \   000055   6F           XRL       A,R7
   \   000056   FF           MOV       R7,A
   3493              }
   \                     ??bdb_crcBitByBitFast_4:
   \   000057   C3           CLR       C
   \   000058   E8           MOV       A,R0
   \   000059   13           RRC       A
   \   00005A   F8           MOV       R0,A
   \   00005B   70DC         JNZ       ??bdb_crcBitByBitFast_2
   3494            }	
   \   00005D   05..         INC       ?V0
   \   00005F   E5..         MOV       A,?V0
   \   000061   7002         JNZ       ??bdb_crcBitByBitFast_0
   \   000063   05..         INC       ?V1
   \                     ??bdb_crcBitByBitFast_0:
   \   000065   85....       MOV       ?V4,?V0
   \   000068   85....       MOV       ?V5,?V1
   \   00006B   E4           CLR       A
   \   00006C   F5..         MOV       ?V6,A
   \   00006E   F5..         MOV       ?V7,A
   \   000070   78..         MOV       R0,#?V8
   \   000072   79..         MOV       R1,#?V4
   \   000074   12....       LCALL     ?UL_GT
   \   000077   40A6         JC        ??bdb_crcBitByBitFast_1
   3495          
   3496            crc=bdb_crcReflect(crc, CRC_ORDER);
   3497            crc^= CRC_XOR;
   3498          
   3499            return(crc);
   \   000079                ; Setup parameters for call to function bdb_crcReflect
   \   000079   7C10         MOV       R4,#0x10
   \   00007B   7D00         MOV       R5,#0x0
   \   00007D   EE           MOV       A,R6
   \   00007E   FA           MOV       R2,A
   \   00007F   EF           MOV       A,R7
   \   000080   FB           MOV       R3,A
   \   000081   12....       LCALL     `??bdb_crcReflect::?relay`; Banked call to: bdb_crcReflect
   \   000084   EA           MOV       A,R2
   \   000085   F4           CPL       A
   \   000086   FA           MOV       R2,A
   \   000087   EB           MOV       A,R3
   \   000088   F4           CPL       A
   \   000089   FB           MOV       R3,A
   \   00008A   7F0C         MOV       R7,#0xc
   \   00008C   02....       LJMP      ?BANKED_LEAVE_XDATA
   3500          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for bdbAttributes>`:
   \   000000   00F0FF07     DD 134213632
   \   000004   00080000     DD 2048
   \   000008   FFFF         DW 65535
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   03           DB 3
   \   00000D   04           DB 4
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   0F           DB 15
   \   000011   01           DB 1
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   03           DB 3
   \   000015   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for vDoPrimaryScan>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgBdbInstallCodeCRC>`:
   \   000000   83           DB 131
   \   000001   FE           DB 254
   \   000002   D3           DB 211
   \   000003   40           DB 64
   \   000004   7A           DB 122
   \   000005   93           DB 147
   \   000006   97           DB 151
   \   000007   23           DB 35
   \   000008   A5           DB 165
   \   000009   C6           DB 198
   \   00000A   39           DB 57
   \   00000B   B2           DB 178
   \   00000C   69           DB 105
   \   00000D   16           DB 22
   \   00000E   D5           DB 213
   \   00000F   05           DB 5
   \   000010   C3           DB 195
   \   000011   B5           DB 181

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_32:
   \   000000   32000000     DD 50

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1388:
   \   000000   88130000     DD 5000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_c8:
   \   000000   C8000000     DD 200

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_bb8:
   \   000000   B80B0000     DD 3000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_10:
   \   000000   10000000     DD 16
   3501          
   3502          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     10   bdb_AddRespondentNode
        0     10   -> bdb_CreateRespondentList
        0     10   -> osal_mem_alloc
      0      9   bdb_CBKETCLinkKeyExchangeAttempt
        0      9   -> bdb_reportCommissioningState
        0      9   -> bdb_setNodeJoinLinkKeyType
        0      9   -> bdb_tcLinkKeyExchangeAttempt
      0      0   bdb_ClearNetworkParams
      0     20   bdb_CreateRespondentList
        0     10   -> osal_mem_alloc
      2     36   bdb_GenerateInstallCodeCRC
        2      6   -> bdb_calculateCCITT_CRC
      0      9   bdb_Init
        0      9   -> ZDO_RegisterForZDOMsg
      0      0   bdb_NetworkRestoredResumeState
      1     15   bdb_NotifyCommissioningModeStart
        0     15   -> bdb_SendMsg
      0     66   bdb_ProcessNodeDescRsp
        0     45   -> APSME_IsDistributedSecurity
        0     45   -> ZDO_ParseNodeDescRsp
        0     45   -> bdb_reportCommissioningState
        0     45   -> bdb_setNodeJoinLinkKeyType
        0     45   -> bdb_tcLinkKeyExchangeAttempt
        0     49   -> osal_nv_write
        0     45   -> osal_stop_timerEx
      0     57   bdb_ProcessOSALMsg
        0     36   -> APSME_GetRequest
        0     36   -> APSME_IsDistributedSecurity
        0     36   -> APSME_RequestKeyReq
        0     36   -> APSME_VerifyKeyReq
        0     36   -> NLME_GetShortAddr
        0     36   -> NLME_NwkDiscTerm
        0     37   -> ZDP_NWKAddrOfInterestReq
        0     36   -> ZMacSetReq
        0     36   -> bdb_filterNwkDisc
        0     36   -> bdb_nwkDiscoveryAttempt
        0     36   -> bdb_reportCommissioningState
        0     36   -> bdb_setNodeJoinLinkKeyType
        0     36   -> bdb_tryNwkAssoc
        0     36   -> nwkNeighborInitTable
        0     40   -> osal_start_timerEx
        0     36   -> osal_stop_timerEx
      2      0   bdb_RegisterCBKETCLinkKeyExchangeCB
      2      0   bdb_RegisterCommissioningStatusCB
      2      0   bdb_RegisterForFilterNwkDescCB
      1     10   bdb_RegisterSimpleDescriptor
        0     10   -> afRegister
        0     10   -> osal_mem_alloc
      2      0   bdb_RegisterTCLinkKeyExchangeProcessCB
      1     79   bdb_SendMsg
        0     20   -> osal_memcpy
        0     17   -> osal_msg_allocate
        0     17   -> osal_msg_send
      0     36   bdb_StartCommissioning
        0     32   -> APSME_IsDistributedSecurity
        0     32   -> ZDOInitDeviceEx
        0     32   -> bdb_nwkSteeringDeviceOnNwk
        0     32   -> bdb_reportCommissioningState
        0     32   -> bdb_setNodeIsOnANetwork
        0     32   -> osal_get_timeoutEx
        0     32   -> osal_isbufset
        0     32   -> osal_memset
        0     36   -> osal_nv_read
        0     36   -> osal_nv_write
        0     32   -> osal_set_event
        0     32   -> zgWriteStartupOptions
      1     28   bdb_TCAddJoiningDevice
        0     26   -> bdb_SendMsg
        0     24   -> osal_mem_alloc
        0     27   -> osal_memcmp
        0     27   -> osal_memcpy
        0     28   -> osal_start_reload_timer
      0     75   bdb_TCJoiningDeviceFree
        0     15   -> osal_mem_free
        0     18   -> osal_memcmp
      0     78   bdb_TCProcessJoiningList
        0     59   -> APSME_SearchTCLinkKeyEntry
        0     57   -> AddrMgrEntryLookupExt
        0     59   -> ZDSecMgrAPSRemove
        0     57   -> ZDSecMgrAddrClear
        0     59   -> bdb_SendMsg
        0     57   -> bdb_TCJoiningDeviceFree
        0     60   -> osal_memcpy
        0     57   -> osal_memset
        0     61   -> osal_nv_write
        0     57   -> osal_stop_timerEx
      0     27   bdb_TCjoiningDeviceComplete
        0     26   -> bdb_SendMsg
        0     24   -> bdb_TCJoiningDeviceFree
        0     27   -> osal_memcmp
        0     27   -> osal_memcpy
        0     24   -> osal_stop_timerEx
      2      0   bdb_ZedAttemptRecoverNwk
        2      0   -> ZDOInitDeviceEx
      0     51   bdb_addInstallCode
        0     30   -> APSME_AddTCLinkKey
        0     30   -> bdb_GenerateInstallCodeCRC
        0     30   -> osal_build_uint16
        0     34   -> sspMMOHash
      0     28   bdb_calculateCCITT_CRC
        0     22   -> bdb_crcBitByBitFast
        0     18   -> bdb_crcInit
      0     42   bdb_crcBitByBitFast
        0     20   -> bdb_crcReflect
      0     27   bdb_crcInit
      0     32   bdb_crcReflect
      2      0   bdb_doTrustCenterRequireKeyExchange
      1     21   bdb_event_loop
        0     17   -> MT_AppCnfCommissioningNotification
        0     17   -> NLME_LeaveReq
        0     17   -> bdb_ProcessNodeDescRsp
        0     17   -> bdb_ProcessOSALMsg
        0     17   -> bdb_TCProcessJoiningList
        0     17   -> bdb_nwkAssocAttemt
        0     17   -> bdb_nwkSteeringDeviceOnNwk
        0     17   -> bdb_reportCommissioningState
        0     17   -> bdb_setNodeIsOnANetwork
        0     17   -> bdb_startResumeCommissioningProcess
        0     17   -> bdb_tcLinkKeyExchangeAttempt
        0     17   -> osal_memset
        0     17   -> osal_msg_deallocate
        0     17   -> osal_msg_receive
        0     17   -> osal_set_event
        0     21   -> osal_start_timerEx
      0     48   bdb_filterNwkDisc
        0     12   -> bdb_nwkDescFree
        0     12   -> nwk_ExtPANIDValid
        0     12   -> nwk_desc_list_release
        0     12   -> nwk_getNwkDescList
        0     12   -> sAddrExtCmp
      2      0   bdb_getZCLFrameCounter
      2      0   bdb_isDeviceNonFactoryNew
      0     25   bdb_joinProcess
        0     14   -> NLME_JoinRequest
        0     10   -> NLME_SetPollRate
        0     10   -> NLME_SetQueuedPollRate
        0     10   -> NLME_SetResponseRate
        0     10   -> ZDApp_ChangeState
        0     10   -> ZDApp_NodeProfileSync
      0     30   bdb_nwkAssocAttemt
        0     13   -> bdb_SendMsg
        0     11   -> bdb_nwkDescFree
      2     14   bdb_nwkDescFree
        2      0   -> osal_mem_free
      0     49   bdb_nwkDiscoveryAttempt
        0     11   -> ZDApp_NetworkInit
        0     13   -> bdb_SendMsg
        0     11   -> bdb_reportCommissioningState
        0     11   -> bdb_setChannel
      0      9   bdb_nwkFormationAttempt
        0      9   -> bdb_nwkJoiningFormation
        0      9   -> bdb_reportCommissioningState
      0     18   bdb_nwkJoiningFormation
        0      9   -> ZDOInitDeviceEx
        0      9   -> bdb_reportCommissioningState
        0      9   -> bdb_setChannel
      2     41   bdb_nwkSteeringDeviceOnNwk
        2      9   -> ZDP_MgmtPermitJoinReq
      2      1   bdb_parentLost
        2      1   -> NLME_OrphanStateSet
        2      1   -> ZDApp_ChangeState
        2      1   -> ZMacSetReq
        2      1   -> bdb_nwkDescFree
        2      1   -> bdb_reportCommissioningState
        2      1   -> nwk_desc_list_free
      0     15   bdb_rejoinNwk
        0     11   -> NLME_ReJoinRequest
        0     11   -> NLME_ReJoinRequestUnsecure
        0     11   -> ZDApp_ChangeState
        0     11   -> ZDApp_RestoreNwkKey
        0     11   -> ZMacSetReq
        0     15   -> osal_nv_write
      1     63   bdb_reportCommissioningState
        0     14   -> NLME_ResetRequest
        0     14   -> NLME_SetPollRate
        0     14   -> ZDApp_ChangeState
        0     14   -> ZDApp_RestoreNwkSecMaterial
        0     14   -> ZMacSetReq
        0     16   -> bdb_SendMsg
        0     14   -> bdb_nwkDescFree
        0     14   -> bdb_setFN
        0     14   -> nwk_setStateIdle
        0     18   -> osal_start_timerEx
        0     14   -> osal_stop_timerEx
        0     14   -> zgWriteStartupOptions
      2      5   bdb_resetLocalAction
        2      5   -> NLME_LeaveReq
        2      5   -> ZDApp_ResetTimerStart
        2      5   -> bdb_setFN
        2      5   -> osal_memset
      0     17   bdb_setActiveCentralizedLinkKey
        0     17   -> APSME_AddTCLinkKey
        0     17   -> APSME_SetDefaultKey
        0     17   -> bdb_addInstallCode
        0     17   -> osal_memset
      0     27   bdb_setChannel
        0     16   -> osal_nv_write
      0     12   bdb_setChannelAttribute
      2      0   bdb_setCommissioningGroupID
      2     14   bdb_setFN
        2      0   -> bdb_setNodeIsOnANetwork
        2      0   -> zgWriteStartupOptions
      2      0   bdb_setJoinUsesInstallCodeKey
      0     46   bdb_setNodeIsOnANetwork
        0     14   -> osal_nv_write
      2     45   bdb_setNodeJoinLinkKeyType
      2      0   bdb_setTCRequireKeyExchange
      2     17   bdb_startResumeCommissioningProcess
        2      0   -> bdb_NotifyCommissioningModeStart
        2      0   -> bdb_nwkJoiningFormation
        2      0   -> bdb_nwkSteeringDeviceOnNwk
        2      0   -> bdb_reportCommissioningState
        2      0   -> osal_memset
      0     60   bdb_tcLinkKeyExchangeAttempt
        0     15   -> bdb_SendMsg
        0     13   -> osal_stop_timerEx
      0      0   bdb_touchlinkSendFNReset
      0     49   bdb_tryNwkAssoc
        0     13   -> bdb_SendMsg
        0     11   -> bdb_joinProcess
        0     11   -> bdb_nwkDescFree
      0     12   bdb_zclRespondentListClean
        0     12   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      22  ?<Initializer for bdbAttributes>
       1  ?<Initializer for vDoPrimaryScan>
      18  ?<Initializer for zgBdbInstallCodeCRC>
       7  ??Subroutine47_0
       6  ??Subroutine48_0
       3  ??Subroutine49_0
       5  ??Subroutine50_0
      12  ??Subroutine51_0
       8  ??Subroutine52_0
       1  ??Subroutine53_0
       7  ??Subroutine54_0
       2  ??Subroutine55_0
      11  ??Subroutine56_0
       4  ??Subroutine57_0
      11  ??Subroutine58_0
       6  ??Subroutine59_0
       2  ??Subroutine60_0
       8  ??Subroutine61_0
       9  ??Subroutine62_0
       8  ??Subroutine63_0
       3  ??Subroutine64_0
       5  ??Subroutine65_0
       2  ??Subroutine66_0
       6  ??Subroutine67_0
       3  ??Subroutine68_0
       5  ??Subroutine69_0
       8  ??Subroutine70_0
       6  ??Subroutine71_0
       5  ?Subroutine0
       2  ?Subroutine1
       6  ?Subroutine10
      20  ?Subroutine11
       4  ?Subroutine12
      15  ?Subroutine13
       6  ?Subroutine14
      10  ?Subroutine15
      10  ?Subroutine16
      12  ?Subroutine17
       6  ?Subroutine18
       6  ?Subroutine19
       4  ?Subroutine2
       2  ?Subroutine20
      14  ?Subroutine21
      20  ?Subroutine22
      12  ?Subroutine23
       2  ?Subroutine24
       4  ?Subroutine25
      20  ?Subroutine26
       8  ?Subroutine27
      18  ?Subroutine28
       8  ?Subroutine29
       2  ?Subroutine3
       8  ?Subroutine30
       6  ?Subroutine31
       6  ?Subroutine32
       6  ?Subroutine33
       1  ?Subroutine34
       4  ?Subroutine35
       6  ?Subroutine36
       1  ?Subroutine37
      11  ?Subroutine38
      12  ?Subroutine39
       2  ?Subroutine4
      13  ?Subroutine40
      10  ?Subroutine41
       1  ?Subroutine42
       8  ?Subroutine43
      11  ?Subroutine44
      10  ?Subroutine45
       6  ?Subroutine46
       6  ?Subroutine5
       1  ?Subroutine6
      12  ?Subroutine7
      23  ?Subroutine8
       1  ?Subroutine9
       4  __Constant_0
       4  __Constant_10
       4  __Constant_1388
       4  __Constant_32
       4  __Constant_3e8
       4  __Constant_bb8
       4  __Constant_c8
      22  bdbAttributes
       4  bdbCommissioningProcedureState
     194  bdb_AddRespondentNode
      34  bdb_CBKETCLinkKeyExchangeAttempt
       3  bdb_ClearNetworkParams
      20  bdb_CreateRespondentList
       2  bdb_CurrEpDescriptorList
       1  bdb_FB_InitiatorCurrentCyclesNumber
      42  bdb_GenerateInstallCodeCRC
       2  bdb_HeadEpDescriptorList
      36  bdb_Init
       3  bdb_NetworkRestoredResumeState
      40  bdb_NotifyCommissioningModeStart
     148  bdb_ProcessNodeDescRsp
     428  bdb_ProcessOSALMsg
      31  bdb_RegisterCBKETCLinkKeyExchangeCB
      10  bdb_RegisterCommissioningStatusCB
      17  bdb_RegisterForFilterNwkDescCB
      58  bdb_RegisterSimpleDescriptor
      17  bdb_RegisterTCLinkKeyExchangeProcessCB
     103  bdb_SendMsg
     435  bdb_StartCommissioning
     302  bdb_TCAddJoiningDevice
     152  bdb_TCJoiningDeviceFree
     450  bdb_TCProcessJoiningList
     163  bdb_TCjoiningDeviceComplete
       1  bdb_TaskID
       1  bdb_ZclTransactionSequenceNumber
      46  bdb_ZedAttemptRecoverNwk
     136  bdb_addInstallCode
      99  bdb_calculateCCITT_CRC
     143  bdb_crcBitByBitFast
     108  bdb_crcInit
      75  bdb_crcReflect
       9  bdb_doTrustCenterRequireKeyExchange
     431  bdb_event_loop
     381  bdb_filterNwkDisc
      13  bdb_getZCLFrameCounter
       1  bdb_initialization
       7  bdb_isDeviceNonFactoryNew
     206  bdb_joinProcess
       2  bdb_joiningDeviceList
      81  bdb_nwkAssocAttemt
       1  bdb_nwkAssocRetriesCount
      92  bdb_nwkDescFree
      99  bdb_nwkDiscoveryAttempt
      51  bdb_nwkFormationAttempt
      96  bdb_nwkJoiningFormation
      45  bdb_nwkSteeringDeviceOnNwk
      93  bdb_parentLost
     157  bdb_rejoinNwk
     802  bdb_reportCommissioningState
      63  bdb_resetLocalAction
     105  bdb_setActiveCentralizedLinkKey
      65  bdb_setChannel
      32  bdb_setChannelAttribute
      10  bdb_setCommissioningGroupID
      19  bdb_setFN
      23  bdb_setJoinUsesInstallCodeKey
      63  bdb_setNodeIsOnANetwork
      11  bdb_setNodeJoinLinkKeyType
      11  bdb_setTCRequireKeyExchange
     149  bdb_startResumeCommissioningProcess
      62  bdb_tcLinkKeyExchangeAttempt
       3  bdb_touchlinkSendFNReset
      81  bdb_tryNwkAssoc
      75  bdb_zclRespondentListClean
       2  pBDBListNwk
       2  pRespondentCurr
       2  pRespondentHead
       2  pRespondentNext
       2  pfnCBKETCLinkKeyExchange
       2  pfnCommissioningStatusCB
       2  pfnFilterNwkDesc
       2  pfnTCLinkKeyExchangeProcessCB
       1  touchLinkTargetEnabled
       1  vDoPrimaryScan
      18  zgBdbInstallCodeCRC
     342  -- Other

 
 7 157 bytes in segment BANKED_CODE
   342 bytes in segment BANK_RELAYS
    41 bytes in segment XDATA_I
    41 bytes in segment XDATA_ID
    28 bytes in segment XDATA_ROM_C
    32 bytes in segment XDATA_Z
 
   383 bytes of CODE     memory
     0 bytes of CONST    memory (+ 28 bytes shared)
 7 157 bytes of HUGECODE memory
    73 bytes of XDATA    memory

Errors: none
Warnings: none
