###############################################################################
#
# IAR C/C++ Compiler V10.40.1.7397 for 8051               01/May/2021  14:31:41
# Copyright 2004-2021 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\Texas Instruments\Z-Stack 3.0.2\Components\zmac\f8w\zmac_cb.c
#    Command line       =  
#        -f C:\Users\asus\AppData\Local\Temp\EW85E0.tmp ("E:\Texas
#        Instruments\Z-Stack 3.0.2\Components\zmac\f8w\zmac_cb.c" -D
#        BDB_FINDING_BINDING_CAPABILITY_ENABLED=0 -D TC_LINKKEY_JOIN -D
#        HAL_UART_DMA_RX_MAX=128 -D MAXMEMHEAP=2765 -D NWK_MAX_DEVICE_LIST=10
#        -D ZDSECMGR_TC_DEVICE_MAX=30 -D DISABLE_GREENPOWER_BASIC_PROXY -D
#        POWER_SAVING -D FEATURE_SYSTEM_STATS -D MT_GP_CB_FUNC -D ASSERT_RESET
#        -D MAKE_CRC_SHDW -lC "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\List" -lA
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\List"
#        --diag_suppress Pe001,Pa010 -o "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\Obj" -e
#        --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_GP_CB_FUNC -DMT_APP_FUNC -DMT_APP_CNF_FUNC)
#        -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg" -I
#        "E:\Texas Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\Source\" -I "E:\Texas
#        Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\..\Source\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Utilities\BootLoad\Source\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\gp\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\bdb\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  English_USA.1252
#    List file          =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\List\zmac_cb.lst
#    Object file        =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\Obj\zmac_cb.r51
#
###############################################################################

E:\Texas Instruments\Z-Stack 3.0.2\Components\zmac\f8w\zmac_cb.c
      1          /**************************************************************************************************
      2            Filename:       zmac_cb.c
      3            Revised:        $Date: 2014-12-03 16:04:46 -0800 (Wed, 03 Dec 2014) $
      4            Revision:       $Revision: 41329 $
      5          
      6            Description:    This file contains the NWK functions that the ZMAC calls
      7          
      8          
      9            Copyright 2005-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /********************************************************************************************************
     41           *                                               INCLUDES
     42           ********************************************************************************************************/
     43          
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "ZMAC.h"
     47          #include "MT_MAC.h"
     48          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     49          #include "cGP_stub.h"
     50             
     51          #if !defined NONWK
     52          #include "nwk.h"
     53          #include "nwk_bufs.h"
     54          #include "ZGlobals.h"
     55          #endif
     56          
     57          #if defined( MACSIM )
     58            #include "mac_sim.h"
     59          #endif
     60          
     61          #include "mac_security.h"
     62          
     63          #include "mac_main.h"
     64          #ifdef FEATURE_DUAL_MAC
     65          #include "dmmgr.h"
     66          #endif /* FEATURE_DUAL_MAC */
     67          extern void *ZMac_ScanBuf;
     68          
     69          /********************************************************************************************************
     70           *                                               CONSTANTS
     71           ********************************************************************************************************/
     72          
     73          #if !defined NONWK
     74          /* Lookup table for size of structures. Must match with the order of MAC callback events */

   \                                 In  segment CODE_C, align 1
     75          const uint8 CODE zmacCBSizeTable [] = {
   \                     zmacCBSizeTable:
   \   000000   00           DB 0
   \   000001   16           DB 22
   \   000002   0F           DB 15
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   0B           DB 11
   \   000006   15           DB 21
   \   000007   0B           DB 11
   \   000008   02           DB 2
   \   000009   00           DB 0
   \   00000A   02           DB 2
   \   00000B   22           DB 34
   \   00000C   0F           DB 15
   \   00000D   33           DB 51
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   0E           DB 14
   \   000011   0F           DB 15
     76            0,
     77            sizeof(ZMacAssociateInd_t),       // MAC_MLME_ASSOCIATE_IND      1   Associate indication
     78            sizeof(ZMacAssociateCnf_t),       // MAC_MLME_ASSOCIATE_CNF      2   Associate confirm
     79            0,                                // MAC_MLME_DISASSOCIATE_IND   3   Disassociate indication
     80            0,                                // MAC_MLME_DISASSOCIATE_CNF   4   Disassociate confirm
     81            sizeof(macMlmeBeaconNotifyInd_t), // MAC_MLME_BEACON_NOTIFY_IND  5   con notify indication
     82            sizeof(ZMacOrphanInd_t),          // MAC_MLME_ORPHAN_IND         6   Orphan indication
     83            sizeof(ZMacScanCnf_t),            // MAC_MLME_SCAN_CNF           7   Scan confirm
     84            sizeof(ZMacStartCnf_t),           // MAC_MLME_START_CNF          8   Start confirm
     85            0,                                // MAC_MLME_SYNC_LOSS_IND      9   Sync loss indication
     86            sizeof(ZMacPollCnf_t),            // MAC_MLME_POLL_CNF           10  Poll confirm
     87            sizeof(ZMacCommStatusInd_t),      // MAC_MLME_COMM_STATUS_IND    11  Comm status indication
     88            sizeof(ZMacDataCnf_t),            // MAC_MCPS_DATA_CNF           12  Data confirm
     89            sizeof(macMcpsDataInd_t),         // MAC_MCPS_DATA_IND           13  Data indication
     90            0,                                // MAC_MCPS_PURGE_CNF          14  Purge confirm
     91            0,                                // MAC_PWR_ON_CNF              15  Power on confirm
     92            sizeof(ZMacPollInd_t),            // MAC_MLME_POLL_IND           16  Poll indication
     93            sizeof(ZMacDataCnf_t)            // MAC_MCPS_GREEN_PWR_DATA_CNF 17  Data confirm for Green Power
     94          };
     95          #endif /* !defined NONWK */
     96          
     97          /********************************************************************************************************
     98           *                                               LOCALS
     99           ********************************************************************************************************/
    100          
    101          /* LQI Adjustment Mode */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          static ZMacLqiAdjust_t lqiAdjMode = LQI_ADJ_OFF;
   \                     lqiAdjMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    103          
    104          #if !defined NONWK
    105          /* LQI Adjustment Function */
    106          static void ZMacLqiAdjust( uint8 corr, uint8* lqi );
    107          #endif
    108          
    109          /*********************************************************************
    110           * ZMAC Function Pointers
    111           */
    112          
    113          /*
    114           * ZMac Application callback function. This function will be called
    115           * for every MAC message that is received over-the-air or generated
    116           * locally by MAC for the application.
    117           *
    118           * The callback function should return TRUE if it has handled the
    119           * MAC message and no further action should be taken with it. It
    120           * should return FALSE if it has not handled the MAC message and
    121           * normal processing should take place.
    122           *
    123           * NOTE: The processing in this function should be kept to the
    124           *       minimum.
    125           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    126          uint8 (*pZMac_AppCallback)( uint8 *msgPtr ) = (void*)NULL;
   \                     pZMac_AppCallback:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    127          
    128          
    129          /*********************************************************************
    130           * ZMAC Functions
    131           */
    132          
    133          /**************************************************************************************************
    134           * @fn       MAC_CbackEvent()
    135           *
    136           * @brief    convert MAC data confirm and indication to ZMac and send to NWK
    137           *
    138           * @param    pData - pointer to macCbackEvent_t
    139           *
    140           * @return   none
    141           *************************************************************************************************/
    142          #ifdef FEATURE_DUAL_MAC
    143          void ZMacCbackEventHdlr(macCbackEvent_t *pData)
    144          #else

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    145          void MAC_CbackEvent(macCbackEvent_t *pData)
   \                     MAC_CbackEvent:
    146          #endif /* FEATURE_DUAL_MAC */
    147          #ifndef MT_MAC_CB_FUNC
    148          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EA           MOV       A,R2
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   EB           MOV       A,R3
   \   000014   12....       LCALL     ?Subroutine2 & 0xFFFF
    149          #if !defined NONWK
    150            uint8 event = pData->hdr.event;
   \                     ??CrossCallReturnLabel_2:
   \   000017   12....       LCALL     ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F5..         MOV       ?V7,A
    151            uint16 tmp = zmacCBSizeTable[event];
   \   00001D   F8           MOV       R0,A
   \   00001E   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000021   F8           MOV       R0,A
   \   000022   7402         MOV       A,#0x2
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   E8           MOV       A,R0
   \   000028   F0           MOVX      @DPTR,A
   \   000029   A3           INC       DPTR
   \   00002A   E4           CLR       A
   \   00002B   F0           MOVX      @DPTR,A
    152            macCbackEvent_t *msgPtr;
    153          
    154            /* If the Network layer will handle a new MAC callback, a non-zero value must be entered in the
    155             * corresponding location in the zmacCBSizeTable[] - thus the table acts as "should handle"?
    156             */
    157            if (tmp == 0)
   \   00002C   7402         MOV       A,#0x2
   \   00002E   12....       LCALL     ?XSTACK_DISP0_8
   \   000031   E0           MOVX      A,@DPTR
   \   000032   7003         JNZ       $+5
   \   000034   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
    158            {
    159              return;
    160            }
    161          
    162            // MAC_MCPS_DATA_IND is very special - it is the only event where the MAC does not free *pData.
    163            if ( event == MAC_MCPS_DATA_IND )
   \   000037   740D         MOV       A,#0xd
   \   000039   65..         XRL       A,?V7
   \   00003B   7046         JNZ       ??MAC_CbackEvent_1
    164            {
    165          #if defined ( ZMAC_MAX_DATA_IND ) && ( ZMAC_MAX_DATA_IND >= 1 )
    166              // This feature limits the number of unprocessed MAC Data Indications that can be queued
    167              // into the Network Task's OSAL message queue. To enable ZMAC_MAX_DATA_IND filtering, the
    168              // command-line option specifies the threshold setting where MAC_MCPS_DATD_IND callback
    169              // messages will be dropped. For example, adding ZMAC_MAX_DATA_IND=5 to the commnad-line
    170              // options allows up to five messages to be passed up and queued in the NWK layer buffer.
    171              uint8 diCount = osal_msg_count( NWK_TaskID, MAC_MCPS_DATA_IND );
    172          #endif // ZMAC_MAX_DATA_IND
    173              MAC_MlmeGetReq( MAC_SHORT_ADDRESS, &tmp );
   \   00003D                ; Setup parameters for call to function MAC_MlmeGetReq
   \   00003D   7402         MOV       A,#0x2
   \   00003F   12....       LCALL     ?XSTACK_DISP101_8
   \   000042   7953         MOV       R1,#0x53
   \   000044   12....       LCALL     `??MAC_MlmeGetReq::?relay`; Banked call to: MAC_MlmeGetReq
    174              if ( (tmp == INVALID_NODE_ADDR) ||
    175                   (tmp == NWK_BROADCAST_SHORTADDR_DEVALL) ||
    176          #if defined ( ZMAC_MAX_DATA_IND ) && ( ZMAC_MAX_DATA_IND >= 1 )
    177                   (diCount > ZMAC_MAX_DATA_IND) ||
    178          #endif // ZMAC_MAX_DATA_IND
    179                   (pData->dataInd.msdu.len == 0) )
   \   000047   7402         MOV       A,#0x2
   \   000049   12....       LCALL     ?XSTACK_DISP0_8
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   64FE         XRL       A,#0xfe
   \   00004F   7003         JNZ       ??MAC_CbackEvent_2
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   F4           CPL       A
   \                     ??MAC_CbackEvent_2:
   \   000054   7003         JNZ       $+5
   \   000056   02....       LJMP      ??MAC_CbackEvent_3 & 0xFFFF
   \   000059   7402         MOV       A,#0x2
   \   00005B   12....       LCALL     ?XSTACK_DISP0_8
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F4           CPL       A
   \   000060   7003         JNZ       ??MAC_CbackEvent_4
   \   000062   A3           INC       DPTR
   \   000063   E0           MOVX      A,@DPTR
   \   000064   F4           CPL       A
   \                     ??MAC_CbackEvent_4:
   \   000065   7003         JNZ       $+5
   \   000067   02....       LJMP      ??MAC_CbackEvent_3 & 0xFFFF
   \   00006A   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   7003         JNZ       $+5
   \   000072   02....       LJMP      ??MAC_CbackEvent_3 & 0xFFFF
    180              {
    181                mac_msg_deallocate( (uint8 **)&pData );
    182                return;
    183              }
    184              msgPtr = pData;
   \   000075   85..82       MOV       DPL,?XSP + 0
   \   000078   85..83       MOV       DPH,?XSP + 1
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   FE           MOV       R6,A
   \   00007D   A3           INC       DPTR
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   FF           MOV       R7,A
   \   000080   02....       LJMP      ??MAC_CbackEvent_5 & 0xFFFF
    185            }
    186            else
    187            {
    188              if (event == MAC_MLME_BEACON_NOTIFY_IND )
   \                     ??MAC_CbackEvent_1:
   \   000083   7405         MOV       A,#0x5
   \   000085   65..         XRL       A,?V7
   \   000087   7015         JNZ       ??MAC_CbackEvent_6
    189              {
    190                tmp += sizeof(macPanDesc_t) + pData->beaconNotifyInd.sduLength;
   \   000089   85..82       MOV       DPL,?XSP + 0
   \   00008C   85..83       MOV       DPH,?XSP + 1
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   F8           MOV       R0,A
   \   000091   12....       LCALL     ?Subroutine5 & 0xFFFF
    191              }
   \                     ??CrossCallReturnLabel_6:
   \   000094   7900         MOV       R1,#0x0
   \   000096   2421         ADD       A,#0x21
   \   000098   F8           MOV       R0,A
   \   000099   502E         JNC       ??MAC_CbackEvent_7
   \   00009B   09           INC       R1
   \   00009C   802B         SJMP      ??MAC_CbackEvent_7
    192              else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_6:
   \   00009E   7407         MOV       A,#0x7
   \   0000A0   65..         XRL       A,?V7
   \   0000A2   7031         JNZ       ??MAC_CbackEvent_8
    193              {
    194                if (pData->scanCnf.scanType == ZMAC_ED_SCAN)
   \   0000A4   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   700F         JNZ       ??MAC_CbackEvent_9
    195                {
    196                  tmp += ZMAC_ED_SCAN_MAXCHANNELS;
   \   0000AA   7402         MOV       A,#0x2
   \   0000AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   241B         ADD       A,#0x1b
   \   0000B2   F0           MOVX      @DPTR,A
   \   0000B3   A3           INC       DPTR
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   3400         ADDC      A,#0x0
   \   0000B7   801B         SJMP      ??MAC_CbackEvent_10
    197                }
    198                else
    199                {
    200                  tmp += sizeof( ZMacPanDesc_t ) * pData->scanCnf.resultListSize;
   \                     ??MAC_CbackEvent_9:
   \   0000B9   85..82       MOV       DPL,?XSP + 0
   \   0000BC   85..83       MOV       DPH,?XSP + 1
   \   0000BF   12....       LCALL     ?Subroutine5 & 0xFFFF
    201                }
    202              }
   \                     ??CrossCallReturnLabel_7:
   \   0000C2   75..21       MOV       ?B,#0x21
   \   0000C5   A4           MUL       AB
   \   0000C6   F8           MOV       R0,A
   \   0000C7   A9..         MOV       R1,?B
   \                     ??MAC_CbackEvent_7:
   \   0000C9   7402         MOV       A,#0x2
   \   0000CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   28           ADD       A,R0
   \   0000D0   F0           MOVX      @DPTR,A
   \   0000D1   A3           INC       DPTR
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   39           ADDC      A,R1
   \                     ??MAC_CbackEvent_10:
   \   0000D4   F0           MOVX      @DPTR,A
    203          
    204              if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \                     ??MAC_CbackEvent_8:
   \   0000D5                ; Setup parameters for call to function osal_msg_allocate
   \   0000D5   7402         MOV       A,#0x2
   \   0000D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DA   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000DD   8A..         MOV       ?V0,R2
   \   0000DF   8B..         MOV       ?V1,R3
   \   0000E1   AE..         MOV       R6,?V0
   \   0000E3   AF..         MOV       R7,?V1
   \   0000E5   EA           MOV       A,R2
   \   0000E6   4F           ORL       A,R7
   \   0000E7   7042         JNZ       ??MAC_CbackEvent_11
    205              {
    206                // Not enough memory. If data confirm - try again
    207                if ((event == MAC_MCPS_DATA_CNF) && (pData->dataCnf.pDataReq != NULL))
   \   0000E9   740C         MOV       A,#0xc
   \   0000EB   65..         XRL       A,?V7
   \   0000ED   6003         JZ        $+5
   \   0000EF   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
   \   0000F2   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000F5   7003         JNZ       $+5
   \   0000F7   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
    208                {
    209                  halIntState_t intState;
    210          
    211                  // This is not normally deallocated here because the pZMac_AppCallback()
    212                  // application may need it.
    213                  HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   0000FA   A2AF         MOV       C,0xa8.7
   \   0000FC   E4           CLR       A
   \   0000FD   33           RLC       A
   \   0000FE   F5..         MOV       ?V0,A
   \   000100   C2AF         CLR       0xa8.7
    214          
    215                  mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
   \   000102                ; Setup parameters for call to function mac_msg_deallocate
   \   000102   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000105   12....       LCALL     `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    216                  if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \   000108                ; Setup parameters for call to function osal_msg_allocate
   \   000108   7402         MOV       A,#0x2
   \   00010A   12....       LCALL     ?XSTACK_DISP0_8
   \   00010D   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000110   8A..         MOV       ?V2,R2
   \   000112   8B..         MOV       ?V3,R3
   \   000114   AE..         MOV       R6,?V2
   \   000116   AF..         MOV       R7,?V3
   \   000118   EA           MOV       A,R2
   \   000119   4F           ORL       A,R7
   \   00011A   7009         JNZ       ??MAC_CbackEvent_12
    217                  {
    218                    // Still no allocation, something is wrong
    219                    HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   00011C   E5..         MOV       A,?V0
   \   00011E   A2E0         MOV       C,0xE0 /* A   */.0
   \   000120   92AF         MOV       0xa8.7,C
    220                    return;
   \   000122   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
    221                  }
    222                  HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??MAC_CbackEvent_12:
   \   000125   E5..         MOV       A,?V0
   \   000127   A2E0         MOV       C,0xE0 /* A   */.0
   \   000129   92AF         MOV       0xa8.7,C
    223                }
    224                else
    225                {
    226                  // This message is dropped
    227                  return;
    228                }
    229              }
    230              osal_memcpy(msgPtr, pData, zmacCBSizeTable[event]);
   \                     ??MAC_CbackEvent_11:
   \   00012B                ; Setup parameters for call to function osal_memcpy
   \   00012B   85..82       MOV       DPL,?XSP + 0
   \   00012E   85..83       MOV       DPH,?XSP + 1
   \   000131   E0           MOVX      A,@DPTR
   \   000132   F5..         MOV       ?V0,A
   \   000134   A3           INC       DPTR
   \   000135   E0           MOVX      A,@DPTR
   \   000136   F5..         MOV       ?V1,A
   \   000138   75..00       MOV       ?V2,#0x0
   \   00013B   78..         MOV       R0,#?V0
   \   00013D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000140   A8..         MOV       R0,?V7
   \   000142   12....       LCALL     ?Subroutine11 & 0xFFFF
    231            }
   \                     ??CrossCallReturnLabel_15:
   \   000145   FC           MOV       R4,A
   \   000146   7D00         MOV       R5,#0x0
   \   000148   EE           MOV       A,R6
   \   000149   FA           MOV       R2,A
   \   00014A   EF           MOV       A,R7
   \   00014B   FB           MOV       R3,A
   \   00014C   12....       LCALL     ??Subroutine17_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00014F   12....       LCALL     ?DEALLOC_XSTACK8
    232          
    233            if ( event == MAC_MLME_BEACON_NOTIFY_IND )
   \   000152   7405         MOV       A,#0x5
   \   000154   65..         XRL       A,?V7
   \   000156   6003         JZ        $+5
   \   000158   02....       LJMP      ??MAC_CbackEvent_13 & 0xFFFF
    234            {
    235              macMlmeBeaconNotifyInd_t *pBeacon = (macMlmeBeaconNotifyInd_t*)msgPtr;
    236          
    237              osal_memcpy(pBeacon+1, pBeacon->pPanDesc, sizeof(macPanDesc_t));
   \   00015B   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00015E   2403         ADD       A,#0x3
   \   000160   F5..         MOV       ?V8,A
   \   000162   E4           CLR       A
   \   000163   3F           ADDC      A,R7
   \   000164   F5..         MOV       ?V9,A
   \   000166                ; Setup parameters for call to function osal_memcpy
   \   000166   85..82       MOV       DPL,?V8
   \   000169   F583         MOV       DPH,A
   \   00016B   E0           MOVX      A,@DPTR
   \   00016C   F5..         MOV       ?V4,A
   \   00016E   A3           INC       DPTR
   \   00016F   E0           MOVX      A,@DPTR
   \   000170   F5..         MOV       ?V5,A
   \   000172   75..00       MOV       ?V6,#0x0
   \   000175   78..         MOV       R0,#?V4
   \   000177   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00017A   7C21         MOV       R4,#0x21
   \   00017C   7D00         MOV       R5,#0x0
   \   00017E   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000181   12....       LCALL     ?DEALLOC_XSTACK8
    238              pBeacon->pPanDesc = (macPanDesc_t *)(pBeacon+1);
   \   000184   85..82       MOV       DPL,?V8
   \   000187   85..83       MOV       DPH,?V9
   \   00018A   E5..         MOV       A,?V0
   \   00018C   F0           MOVX      @DPTR,A
   \   00018D   A3           INC       DPTR
   \   00018E   E5..         MOV       A,?V1
   \   000190   F0           MOVX      @DPTR,A
    239              osal_memcpy(pBeacon->pPanDesc+1, pBeacon->pSdu, pBeacon->sduLength);
   \   000191   EE           MOV       A,R6
   \   000192   2409         ADD       A,#0x9
   \   000194   F5..         MOV       ?V2,A
   \   000196   E4           CLR       A
   \   000197   3F           ADDC      A,R7
   \   000198   F5..         MOV       ?V3,A
   \   00019A                ; Setup parameters for call to function osal_memcpy
   \   00019A   85..82       MOV       DPL,?V2
   \   00019D   F583         MOV       DPH,A
   \   00019F   E0           MOVX      A,@DPTR
   \   0001A0   F5..         MOV       ?V4,A
   \   0001A2   A3           INC       DPTR
   \   0001A3   E0           MOVX      A,@DPTR
   \   0001A4   F5..         MOV       ?V5,A
   \   0001A6   78..         MOV       R0,#?V4
   \   0001A8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001AB   8E82         MOV       DPL,R6
   \   0001AD   8F83         MOV       DPH,R7
   \   0001AF   A3           INC       DPTR
   \   0001B0   A3           INC       DPTR
   \   0001B1   A3           INC       DPTR
   \   0001B2   A3           INC       DPTR
   \   0001B3   A3           INC       DPTR
   \   0001B4   A3           INC       DPTR
   \   0001B5   A3           INC       DPTR
   \   0001B6   A3           INC       DPTR
   \   0001B7   E0           MOVX      A,@DPTR
   \   0001B8   FC           MOV       R4,A
   \   0001B9   7D00         MOV       R5,#0x0
   \   0001BB   E5..         MOV       A,?V0
   \   0001BD   2421         ADD       A,#0x21
   \   0001BF   FA           MOV       R2,A
   \   0001C0   E4           CLR       A
   \   0001C1   35..         ADDC      A,?V1
   \   0001C3   FB           MOV       R3,A
   \   0001C4   12....       LCALL     ??Subroutine17_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0001C7   12....       LCALL     ?DEALLOC_XSTACK8
    240              pBeacon->pSdu = (uint8 *)(pBeacon->pPanDesc+1);
   \   0001CA   85..82       MOV       DPL,?V8
   \   0001CD   85..83       MOV       DPH,?V9
   \   0001D0   E0           MOVX      A,@DPTR
   \   0001D1   2421         ADD       A,#0x21
   \   0001D3   F8           MOV       R0,A
   \   0001D4   A3           INC       DPTR
   \   0001D5   E0           MOVX      A,@DPTR
   \   0001D6   3400         ADDC      A,#0x0
   \   0001D8   F9           MOV       R1,A
   \   0001D9   85..82       MOV       DPL,?V2
   \   0001DC   85..83       MOV       DPH,?V3
   \   0001DF   E8           MOV       A,R0
   \   0001E0   F0           MOVX      @DPTR,A
   \   0001E1   A3           INC       DPTR
   \   0001E2   E9           MOV       A,R1
   \   0001E3   F0           MOVX      @DPTR,A
   \   0001E4   8079         SJMP      ??MAC_CbackEvent_5
    241            }
    242            else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_13:
   \   0001E6   7407         MOV       A,#0x7
   \   0001E8   65..         XRL       A,?V7
   \   0001EA   7073         JNZ       ??MAC_CbackEvent_5
    243            {
    244              macMlmeScanCnf_t *pScan = (macMlmeScanCnf_t*)msgPtr;
    245          
    246              if (ZMac_ScanBuf != NULL)
   \   0001EC   90....       MOV       DPTR,#ZMac_ScanBuf
   \   0001EF   12....       LCALL     ??Subroutine22_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0001F2   606B         JZ        ??MAC_CbackEvent_5
    247              {
    248                void *pTmp = ZMac_ScanBuf;
   \   0001F4   90....       MOV       DPTR,#ZMac_ScanBuf
   \   0001F7   E0           MOVX      A,@DPTR
   \   0001F8   F5..         MOV       ?V8,A
   \   0001FA   A3           INC       DPTR
   \   0001FB   E0           MOVX      A,@DPTR
   \   0001FC   F5..         MOV       ?V9,A
    249                ZMac_ScanBuf = NULL;
   \   0001FE   90....       MOV       DPTR,#ZMac_ScanBuf
   \   000201   E4           CLR       A
   \   000202   F0           MOVX      @DPTR,A
   \   000203   A3           INC       DPTR
   \   000204   F0           MOVX      @DPTR,A
    250          
    251                if (pScan->scanType == ZMAC_ED_SCAN)
   \   000205   8E82         MOV       DPL,R6
   \   000207   8F83         MOV       DPH,R7
   \   000209   A3           INC       DPTR
   \   00020A   A3           INC       DPTR
   \   00020B   E0           MOVX      A,@DPTR
   \   00020C   701A         JNZ       ??MAC_CbackEvent_14
    252                {
    253                  pScan->result.pEnergyDetect = (uint8*) (pScan + 1);
   \   00020E   12....       LCALL     ?Subroutine13 & 0xFFFF
    254                  osal_memcpy(pScan->result.pEnergyDetect, pTmp, ZMAC_ED_SCAN_MAXCHANNELS);
    255                }
   \                     ??CrossCallReturnLabel_17:
   \   000211   2409         ADD       A,#0x9
   \   000213   F5..         MOV       ?V2,A
   \   000215   E4           CLR       A
   \   000216   3F           ADDC      A,R7
   \   000217   85..82       MOV       DPL,?V2
   \   00021A   F583         MOV       DPH,A
   \   00021C   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00021F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000222   7C1B         MOV       R4,#0x1b
   \   000224   7D00         MOV       R5,#0x0
   \   000226   802A         SJMP      ??MAC_CbackEvent_15
    256                else
    257                {
    258                  pScan->result.pPanDescriptor = (macPanDesc_t*) (pScan + 1);
   \                     ??MAC_CbackEvent_14:
   \   000228   12....       LCALL     ?Subroutine15 & 0xFFFF
    259                  osal_memcpy(pScan + 1, pTmp, sizeof( ZMacPanDesc_t ) * pScan->resultListSize);
    260                }
   \                     ??CrossCallReturnLabel_20:
   \   00022B   8E82         MOV       DPL,R6
   \   00022D   8F83         MOV       DPH,R7
   \   00022F   A3           INC       DPTR
   \   000230   A3           INC       DPTR
   \   000231   A3           INC       DPTR
   \   000232   A3           INC       DPTR
   \   000233   A3           INC       DPTR
   \   000234   A3           INC       DPTR
   \   000235   A3           INC       DPTR
   \   000236   A3           INC       DPTR
   \   000237   A3           INC       DPTR
   \   000238   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00023B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00023E   8E82         MOV       DPL,R6
   \   000240   8F83         MOV       DPH,R7
   \   000242   A3           INC       DPTR
   \   000243   A3           INC       DPTR
   \   000244   A3           INC       DPTR
   \   000245   A3           INC       DPTR
   \   000246   A3           INC       DPTR
   \   000247   A3           INC       DPTR
   \   000248   A3           INC       DPTR
   \   000249   A3           INC       DPTR
   \   00024A   E0           MOVX      A,@DPTR
   \   00024B   75..21       MOV       ?B,#0x21
   \   00024E   A4           MUL       AB
   \   00024F   FC           MOV       R4,A
   \   000250   AD..         MOV       R5,?B
   \                     ??MAC_CbackEvent_15:
   \   000252   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000255   12....       LCALL     ?DEALLOC_XSTACK8
    261          
    262                osal_mem_free(pTmp);
   \   000258                ; Setup parameters for call to function osal_mem_free
   \   000258   AA..         MOV       R2,?V8
   \   00025A   AB..         MOV       R3,?V9
   \   00025C   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    263              }
    264            }
    265          
    266            if ( ( pZMac_AppCallback == NULL ) || ( pZMac_AppCallback( (uint8 *)msgPtr ) == FALSE ) )
   \                     ??MAC_CbackEvent_5:
   \   00025F   90....       MOV       DPTR,#pZMac_AppCallback
   \   000262   12....       LCALL     ??Subroutine22_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000265   6010         JZ        ??MAC_CbackEvent_16
   \   000267                ; Setup parameters for indirect call
   \   000267   EE           MOV       A,R6
   \   000268   FA           MOV       R2,A
   \   000269   EF           MOV       A,R7
   \   00026A   FB           MOV       R3,A
   \   00026B   12....       LCALL     ??Subroutine20_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00026E   12....       LCALL     ?CALL_IND
   \   000271   E9           MOV       A,R1
   \   000272   6003         JZ        $+5
   \   000274   02....       LJMP      ??CrossCallReturnLabel_30 & 0xFFFF
    267            {
    268              // Filter out non-zigbee packets
    269              if ( event == MAC_MCPS_DATA_IND )
   \                     ??MAC_CbackEvent_16:
   \   000277   740D         MOV       A,#0xd
   \   000279   65..         XRL       A,?V7
   \   00027B   6003         JZ        $+5
   \   00027D   02....       LJMP      ??MAC_CbackEvent_17 & 0xFFFF
    270              {
    271                uint8 fcFrameType = (pData->dataInd.msdu.p[0] & 0x03);
    272                uint8 fcProtoVer = ((pData->dataInd.msdu.p[0] >> 2) & 0x0F);
   \   000280   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000283   8882         MOV       DPL,R0
   \   000285   F583         MOV       DPH,A
   \   000287   E0           MOVX      A,@DPTR
   \   000288   FA           MOV       R2,A
   \   000289   13           RRC       A
   \   00028A   13           RRC       A
   \   00028B   543F         ANL       A,#0x3f
   \   00028D   540F         ANL       A,#0xf
   \   00028F   F9           MOV       R1,A
    273                uint8 fcReserve = (pData->dataInd.msdu.p[1] & 0xC0);
   \   000290   A3           INC       DPTR
   \   000291   E0           MOVX      A,@DPTR
   \   000292   F8           MOV       R0,A
    274                if ( (fcFrameType > 0x01) || (fcProtoVer != _NIB.nwkProtocolVersion) || (fcReserve != 0)
    275                    || (pData->dataInd.mac.srcAddr.addrMode != SADDR_MODE_SHORT) )
   \   000293   7403         MOV       A,#0x3
   \   000295   5A           ANL       A,R2
   \   000296   C3           CLR       C
   \   000297   9402         SUBB      A,#0x2
   \   000299   5024         JNC       ??MAC_CbackEvent_18
   \   00029B   90....       MOV       DPTR,#_NIB + 17
   \   00029E   E0           MOVX      A,@DPTR
   \   00029F   69           XRL       A,R1
   \   0002A0   701D         JNZ       ??MAC_CbackEvent_18
   \   0002A2   74C0         MOV       A,#-0x40
   \   0002A4   58           ANL       A,R0
   \   0002A5   7018         JNZ       ??MAC_CbackEvent_18
   \   0002A7   85..82       MOV       DPL,?XSP + 0
   \   0002AA   85..83       MOV       DPH,?XSP + 1
   \   0002AD   E0           MOVX      A,@DPTR
   \   0002AE   F8           MOV       R0,A
   \   0002AF   A3           INC       DPTR
   \   0002B0   E0           MOVX      A,@DPTR
   \   0002B1   C8           XCH       A,R0
   \   0002B2   241B         ADD       A,#0x1b
   \   0002B4   F582         MOV       DPL,A
   \   0002B6   E4           CLR       A
   \   0002B7   38           ADDC      A,R0
   \   0002B8   F583         MOV       DPH,A
   \   0002BA   E0           MOVX      A,@DPTR
   \   0002BB   6402         XRL       A,#0x2
   \   0002BD   601D         JZ        ??MAC_CbackEvent_19
    276                {
    277          #if (ZG_BUILD_RTR_TYPE)       
    278                  //Is this for GP
    279                  if(fcProtoVer == GP_ZIGBEE_PROTOCOL_VER)
   \                     ??MAC_CbackEvent_18:
   \   0002BF   7403         MOV       A,#0x3
   \   0002C1   69           XRL       A,R1
   \   0002C2   7011         JNZ       ??MAC_CbackEvent_3
    280                  {
    281                    pData->hdr.event = GP_MAC_MCPS_DATA_IND;
   \   0002C4   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0002C7   7401         MOV       A,#0x1
   \   0002C9   12....       LCALL     ?Subroutine2 & 0xFFFF
    282             
    283                    // Application hasn't already processed this message. Send it to NWK task.
    284                    osal_msg_send( gp_TaskID, (uint8 *)pData );
   \                     ??CrossCallReturnLabel_3:
   \   0002CC   FA           MOV       R2,A
   \   0002CD   A3           INC       DPTR
   \   0002CE   E0           MOVX      A,@DPTR
   \   0002CF   12....       LCALL     ?Subroutine10 & 0xFFFF
    285          
    286                    return;
   \                     ??CrossCallReturnLabel_28:
   \   0002D2   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
    287                  }
    288          #endif
    289                
    290                  // Drop the message
    291                  mac_msg_deallocate( (uint8 **)&pData );
   \                     ??MAC_CbackEvent_3:
   \   0002D5                ; Setup parameters for call to function mac_msg_deallocate
   \   0002D5   AA..         MOV       R2,?XSP + 0
   \   0002D7   AB..         MOV       R3,?XSP + 1
   \   0002D9   02....       LJMP      ??CrossCallReturnLabel_13 & 0xFFFF
    292                  return;
    293                }
    294                else
    295                {
    296                  macDataInd_t *pInd = &msgPtr->dataInd.mac;
   \                     ??MAC_CbackEvent_19:
   \   0002DC   EE           MOV       A,R6
   \   0002DD   2413         ADD       A,#0x13
   \   0002DF   F8           MOV       R0,A
   \   0002E0   E4           CLR       A
   \   0002E1   3F           ADDC      A,R7
   \   0002E2   F9           MOV       R1,A
    297                  // See if LQI needs adjustment due to frame correlation
    298                  ZMacLqiAdjust( pInd->correlation, &pInd->mpduLinkQuality );
   \   0002E3                ; Setup parameters for call to function ZMacLqiAdjust
   \   0002E3   E8           MOV       A,R0
   \   0002E4   241C         ADD       A,#0x1c
   \   0002E6   FA           MOV       R2,A
   \   0002E7   E4           CLR       A
   \   0002E8   39           ADDC      A,R1
   \   0002E9   FB           MOV       R3,A
   \   0002EA   E8           MOV       A,R0
   \   0002EB   241D         ADD       A,#0x1d
   \   0002ED   F582         MOV       DPL,A
   \   0002EF   E4           CLR       A
   \   0002F0   39           ADDC      A,R1
   \   0002F1   F583         MOV       DPH,A
   \   0002F3   E0           MOVX      A,@DPTR
   \   0002F4   F9           MOV       R1,A
   \   0002F5   12....       LCALL     `??ZMacLqiAdjust::?relay`; Banked call to: ZMacLqiAdjust
    299          
    300                  // Look for broadcast message that has a radius of greater 1
    301                  if ( (pData->dataInd.mac.dstAddr.addr.shortAddr == 0xFFFF)
    302                         && (pData->dataInd.msdu.p[6] > 1) )
   \   0002F8   85..82       MOV       DPL,?XSP + 0
   \   0002FB   85..83       MOV       DPH,?XSP + 1
   \   0002FE   E0           MOVX      A,@DPTR
   \   0002FF   F8           MOV       R0,A
   \   000300   A3           INC       DPTR
   \   000301   E0           MOVX      A,@DPTR
   \   000302   C8           XCH       A,R0
   \   000303   241C         ADD       A,#0x1c
   \   000305   F582         MOV       DPL,A
   \   000307   E4           CLR       A
   \   000308   38           ADDC      A,R0
   \   000309   F583         MOV       DPH,A
   \   00030B   E0           MOVX      A,@DPTR
   \   00030C   F4           CPL       A
   \   00030D   7003         JNZ       ??MAC_CbackEvent_20
   \   00030F   A3           INC       DPTR
   \   000310   E0           MOVX      A,@DPTR
   \   000311   F4           CPL       A
   \                     ??MAC_CbackEvent_20:
   \   000312   7060         JNZ       ??MAC_CbackEvent_21
   \   000314   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000317   C8           XCH       A,R0
   \   000318   2406         ADD       A,#0x6
   \   00031A   F582         MOV       DPL,A
   \   00031C   E4           CLR       A
   \   00031D   38           ADDC      A,R0
   \   00031E   F583         MOV       DPH,A
   \   000320   E0           MOVX      A,@DPTR
   \   000321   C3           CLR       C
   \   000322   9402         SUBB      A,#0x2
   \   000324   404E         JC        ??MAC_CbackEvent_21
    303                  {
    304                    // Send the messsage to a special broadcast queue
    305                    if ( nwk_broadcastSend( (uint8 *)msgPtr ) != SUCCESS )
   \   000326                ; Setup parameters for call to function nwk_broadcastSend
   \   000326   EE           MOV       A,R6
   \   000327   FA           MOV       R2,A
   \   000328   EF           MOV       A,R7
   \   000329   FB           MOV       R3,A
   \   00032A   12....       LCALL     `??nwk_broadcastSend::?relay`; Banked call to: nwk_broadcastSend
   \   00032D   E9           MOV       A,R1
   \   00032E   6065         JZ        ??MAC_CbackEvent_0
    306                    {
    307                      // Drop the message, too many broadcast messages to process
    308                      mac_msg_deallocate( (uint8 **)&pData );
   \   000330                ; Setup parameters for call to function mac_msg_deallocate
   \   000330   AA..         MOV       R2,?XSP + 0
   \   000332   AB..         MOV       R3,?XSP + 1
   \   000334   12....       LCALL     `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    309                    }
    310                    return;
   \                     ??MAC_CbackEvent_22:
   \   000337   805C         SJMP      ??MAC_CbackEvent_0
    311                  }
    312                }
    313              }
    314              else if ((event == MAC_MCPS_DATA_CNF) && (pData->hdr.status != MAC_NO_RESOURCES))
   \                     ??MAC_CbackEvent_17:
   \   000339   740C         MOV       A,#0xc
   \   00033B   65..         XRL       A,?V7
   \   00033D   7060         JNZ       ??MAC_CbackEvent_23
   \   00033F   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000342   A3           INC       DPTR
   \   000343   E0           MOVX      A,@DPTR
   \   000344   641A         XRL       A,#0x1a
   \   000346   602C         JZ        ??MAC_CbackEvent_21
    315              {
    316                macMcpsDataCnf_t *pCnf = &msgPtr->dataCnf;
    317          
    318                if ( pCnf->pDataReq && (pCnf->pDataReq->internal.txOptions & MAC_TXOPTION_ACK) )
   \   000348   8E82         MOV       DPL,R6
   \   00034A   8F83         MOV       DPH,R7
   \   00034C   12....       LCALL     ??Subroutine21_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00034F   6023         JZ        ??MAC_CbackEvent_21
   \   000351   E8           MOV       A,R0
   \   000352   240E         ADD       A,#0xe
   \   000354   F582         MOV       DPL,A
   \   000356   E4           CLR       A
   \   000357   39           ADDC      A,R1
   \   000358   F583         MOV       DPH,A
   \   00035A   E0           MOVX      A,@DPTR
   \   00035B   A2E0         MOV       C,0xE0 /* A   */.0
   \   00035D   5015         JNC       ??MAC_CbackEvent_21
    319                {
    320                  // See if LQI needs adjustment due to frame correlation
    321                  ZMacLqiAdjust( pCnf->correlation, &pCnf->mpduLinkQuality );
   \   00035F                ; Setup parameters for call to function ZMacLqiAdjust
   \   00035F   EE           MOV       A,R6
   \   000360   240C         ADD       A,#0xc
   \   000362   FA           MOV       R2,A
   \   000363   E4           CLR       A
   \   000364   3F           ADDC      A,R7
   \   000365   FB           MOV       R3,A
   \   000366   EE           MOV       A,R6
   \   000367   240D         ADD       A,#0xd
   \   000369   F582         MOV       DPL,A
   \   00036B   E4           CLR       A
   \   00036C   3F           ADDC      A,R7
   \   00036D   F583         MOV       DPH,A
   \   00036F   E0           MOVX      A,@DPTR
   \   000370   F9           MOV       R1,A
   \   000371   12....       LCALL     `??ZMacLqiAdjust::?relay`; Banked call to: ZMacLqiAdjust
    322                }
    323              }
    324              if(event == MAC_MCPS_GREEN_PWR_DATA_CNF)
    325              {
    326                msgPtr->dataCnf.hdr.event = GP_MAC_MCPS_DATA_CNF;
    327          #if (ZG_BUILD_RTR_TYPE)       
    328                osal_msg_send( gp_TaskID, (uint8 *)msgPtr);
    329          #endif
    330              }
    331              else
    332              {
    333                osal_msg_send( NWK_TaskID, (uint8 *)msgPtr );
   \                     ??MAC_CbackEvent_21:
   \   000374                ; Setup parameters for call to function osal_msg_send
   \   000374   EE           MOV       A,R6
   \   000375   FA           MOV       R2,A
   \   000376   EF           MOV       A,R7
   \   000377   FB           MOV       R3,A
   \   000378   90....       MOV       DPTR,#NWK_TaskID
   \   00037B   12....       LCALL     ??Subroutine18_0 & 0xFFFF
    334              }
    335            }
    336            
    337          #if (ZG_BUILD_RTR_TYPE)
    338            if ((event == MAC_MCPS_DATA_CNF || event == MAC_MCPS_GREEN_PWR_DATA_CNF) && (pData->dataCnf.pDataReq != NULL))
   \                     ??CrossCallReturnLabel_30:
   \   00037E   740C         MOV       A,#0xc
   \   000380   65..         XRL       A,?V7
   \   000382   6006         JZ        ??MAC_CbackEvent_24
   \   000384   7411         MOV       A,#0x11
   \   000386   65..         XRL       A,?V7
   \   000388   700B         JNZ       ??MAC_CbackEvent_0
   \                     ??MAC_CbackEvent_24:
   \   00038A   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00038D   6006         JZ        ??MAC_CbackEvent_0
    339          #else
    340            if ((event == MAC_MCPS_DATA_CNF ) && (pData->dataCnf.pDataReq != NULL))
    341          #endif
    342            {
    343              // If the application needs 'pDataReq' then we cannot free it here.
    344              // The application must free it after using it. Note that 'pDataReq'
    345              // is of macMcpsDataReq_t (and not ZMacDataReq_t) type.
    346          
    347              mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
   \   00038F                ; Setup parameters for call to function mac_msg_deallocate
   \   00038F   12....       LCALL     ?Subroutine9 & 0xFFFF
    348            }
   \                     ??CrossCallReturnLabel_13:
   \   000392   12....       LCALL     `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    349          #endif
    350          }
   \                     ??MAC_CbackEvent_0:
   \   000395   7404         MOV       A,#0x4
   \   000397   12....       LCALL     ?DEALLOC_XSTACK8
   \   00039A   7F0A         MOV       R7,#0xa
   \   00039C   02....       LJMP      ?BANKED_LEAVE_XDATA
   \                     ??MAC_CbackEvent_23:
   \   00039F   7411         MOV       A,#0x11
   \   0003A1   65..         XRL       A,?V7
   \   0003A3   70CF         JNZ       ??MAC_CbackEvent_21
   \   0003A5   8E82         MOV       DPL,R6
   \   0003A7   8F83         MOV       DPH,R7
   \   0003A9   E4           CLR       A
   \   0003AA   F0           MOVX      @DPTR,A
   \   0003AB                ; Setup parameters for call to function osal_msg_send
   \   0003AB   EE           MOV       A,R6
   \   0003AC   FA           MOV       R2,A
   \   0003AD   EF           MOV       A,R7
   \   0003AE   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0003B1   80D7         SJMP      ??MAC_CbackEvent_24
   \   0003B3                REQUIRE _A_IEN0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000003   EE           MOV       A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   EE           MOV       A,R6
   \   000001   240B         ADD       A,#0xb
   \   000003   F5..         MOV       ?V0,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F5..         MOV       ?V1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   AA..         MOV       R2,?V0
   \   000002   AB..         MOV       R3,?V1
   \   000004                REQUIRE ??Subroutine17_0
   \   000004                ; // Fall through to label ??Subroutine17_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine17_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   74..         MOV       A,#zmacCBSizeTable & 0xff
   \   000002   28           ADD       A,R0
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   34..         ADDC      A,#(zmacCBSizeTable >> 8) & 0xff
   \   000008   F583         MOV       DPH,A
   \   00000A   E4           CLR       A
   \   00000B   93           MOVC      A,@A+DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   FB           MOV       R3,A
   \   000001   90....       MOV       DPTR,#gp_TaskID
   \   000004                REQUIRE ??Subroutine18_0
   \   000004                ; // Fall through to label ??Subroutine18_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine18_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   2403         ADD       A,#0x3
   \   000009   FA           MOV       R2,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   3400         ADDC      A,#0x0
   \   00000E   FB           MOV       R3,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E0           MOVX      A,@DPTR
   \   000007                REQUIRE ??Subroutine19_0
   \   000007                ; // Fall through to label ??Subroutine19_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine19_0:
   \   000000   F8           MOV       R0,A
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine20_0
   \   000002                ; // Fall through to label ??Subroutine20_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine20_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F583         MOV       DPH,A
   \   000003   8882         MOV       DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   C8           XCH       A,R0
   \   000003   2408         ADD       A,#0x8
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F8           MOV       R0,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000003                REQUIRE ??Subroutine21_0
   \   000003                ; // Fall through to label ??Subroutine21_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine21_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine22_0
   \   000003                ; // Fall through to label ??Subroutine22_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine22_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   49           ORL       A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F8           MOV       R0,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F583         MOV       DPH,A
   \   00000C   8882         MOV       DPL,R0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_msg_send
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E5..         MOV       A,?V0
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   E5..         MOV       A,?V1
   \   000006   F0           MOVX      @DPTR,A
   \   000007                ; Setup parameters for call to function osal_memcpy
   \   000007                ; Setup parameters for call to function osal_memcpy
   \   000007   88..         MOV       ?V4,R0
   \   000009   89..         MOV       ?V5,R1
   \   00000B   75..00       MOV       ?V6,#0x0
   \   00000E   78..         MOV       R0,#?V4
   \   000010   22           RET
    351          #else  // ifdef MT_MAC_CB_FUNC
    352          {
    353            /* Check if MT has subscribed for this callback If so, pass it as an event to MonitorTest */
    354            switch (pData->hdr.event)
    355            {
    356              case MAC_MLME_ASSOCIATE_IND:
    357                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_IND )
    358                  nwk_MTCallbackSubNwkAssociateInd ( (ZMacAssociateInd_t *)pData );
    359                break;
    360          
    361              case MAC_MLME_ASSOCIATE_CNF:
    362                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_CNF )
    363                {
    364                  nwk_MTCallbackSubNwkAssociateCnf ( (ZMacAssociateCnf_t *)pData );
    365          #ifdef FEATURE_DUAL_MAC
    366                  DMMGR_ResetActivityFlag( ASSOC_ACTIVITY );
    367          #endif /* FEATURE_DUAL_MAC */
    368                }
    369                break;
    370          
    371              case MAC_MLME_DISASSOCIATE_IND:
    372                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_IND )
    373                  nwk_MTCallbackSubNwkDisassociateInd ( (ZMacDisassociateInd_t *)pData );
    374                break;
    375          
    376              case MAC_MLME_DISASSOCIATE_CNF:
    377                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_CNF )
    378                {
    379                  nwk_MTCallbackSubNwkDisassociateCnf ( (ZMacDisassociateCnf_t *)pData );
    380          #ifdef FEATURE_DUAL_MAC
    381                  DMMGR_ResetActivityFlag( DISASSOC_ACTIVITY );
    382          #endif /* FEATURE_DUAL_MAC */
    383                }
    384                break;
    385          
    386              case MAC_MLME_BEACON_NOTIFY_IND:
    387                if ( _macCallbackSub & CB_ID_NWK_BEACON_NOTIFY_IND )
    388                  nwk_MTCallbackSubNwkBeaconNotifyInd( (ZMacBeaconNotifyInd_t *)pData );
    389                break;
    390          
    391              case MAC_MLME_ORPHAN_IND:
    392                if ( _macCallbackSub & CB_ID_NWK_ORPHAN_IND )
    393                  nwk_MTCallbackSubNwkOrphanInd( (ZMacOrphanInd_t *) pData );
    394                break;
    395          
    396              case MAC_MLME_SCAN_CNF:
    397                if ( _macCallbackSub & CB_ID_NWK_SCAN_CNF )
    398                {
    399                  pData->scanCnf.result.pEnergyDetect = ZMac_ScanBuf;
    400                  nwk_MTCallbackSubNwkScanCnf ( (ZMacScanCnf_t *) pData );
    401          #ifdef FEATURE_DUAL_MAC
    402                  DMMGR_ResetActivityFlag( SCAN_ACTIVITY );
    403          #endif /* FEATURE_DUAL_MAC */
    404                }
    405          
    406                if (ZMac_ScanBuf != NULL)
    407                {
    408                  void *pTmp = ZMac_ScanBuf;
    409                  ZMac_ScanBuf = NULL;
    410                  osal_mem_free(pTmp);
    411                }
    412                break;
    413          
    414              case MAC_MLME_START_CNF:
    415                if ( _macCallbackSub & CB_ID_NWK_START_CNF )
    416                {
    417                  nwk_MTCallbackSubNwkStartCnf ( pData->hdr.status );
    418          #ifdef FEATURE_DUAL_MAC
    419                  DMMGR_ResetActivityFlag( START_ACTIVITY );
    420          #endif /* FEATURE_DUAL_MAC */
    421                }
    422                break;
    423          
    424              case MAC_MLME_SYNC_LOSS_IND:
    425                if ( _macCallbackSub & CB_ID_NWK_SYNC_LOSS_IND )
    426                 nwk_MTCallbackSubNwkSyncLossInd( (ZMacSyncLossInd_t *) pData );
    427                break;
    428          
    429              case MAC_MLME_POLL_CNF:
    430                if ( _macCallbackSub & CB_ID_NWK_POLL_CNF )
    431                {
    432                  nwk_MTCallbackSubNwkPollCnf( pData->hdr.status );
    433          #ifdef FEATURE_DUAL_MAC
    434                  DMMGR_ResetActivityFlag( DATA_POLL_ACTIVITY );
    435          #endif /* FEATURE_DUAL_MAC */
    436                }
    437                break;
    438          
    439              case MAC_MLME_COMM_STATUS_IND:
    440                if ( _macCallbackSub & CB_ID_NWK_COMM_STATUS_IND )
    441                {
    442                  nwk_MTCallbackSubCommStatusInd ( (ZMacCommStatusInd_t *) pData );
    443          #ifdef FEATURE_DUAL_MAC
    444                  /**
    445                   * Reset the activity flags if we receive the comm status 
    446                   * indication. The association response and orphan response msg 
    447                   * receives the comm-status indication message as a response. 
    448                   */
    449                  switch ( ((ZMacCommStatusInd_t *) pData)->hdr.Status )
    450                  {
    451                    case ZMAC_SUCCESS:
    452                    case ZMAC_TRANSACTION_OVERFLOW:
    453                    case ZMAC_TRANSACTION_EXPIRED:
    454                    case ZMAC_CHANNEL_ACCESS_FAILURE:
    455                    case ZMAC_NO_RESOURCES:          
    456                    case ZMAC_NO_ACK:
    457                    case ZMAC_COUNTER_ERROR:    
    458                    case ZMAC_INVALID_PARAMETER:
    459                      DMMGR_ResetActivityFlag( ALL_ACTIVITY );
    460                      break;
    461                    default:
    462                      /**
    463                       * If the activity flag is not reset, we need to re-evaluate the
    464                       * and add more case statement above. Note, MAC security is not
    465                       * used by zstack and not supported by dual mac.
    466                       */
    467                      break;
    468                  }
    469          #endif /* FEATURE_DUAL_MAC */
    470                }
    471                break;
    472          
    473              case MAC_MCPS_DATA_CNF:
    474              {
    475          #ifdef FEATURE_DUAL_MAC
    476                if ( pData->dataCnf.pDataReq != NULL )
    477                {
    478                  if ( DMMGR_IsDefaultMac() )
    479                  {
    480                    DMMGR_ProcessMacDataCnf((macMcpsDataCnf_t *)pData);
    481                  }
    482                  
    483                  mac_msg_deallocate((uint8 **)&pData->dataCnf.pDataReq); 
    484                }
    485                
    486                if ( _macCallbackSub & CB_ID_NWK_DATA_CNF )
    487                {
    488                  nwk_MTCallbackSubNwkDataCnf( (ZMacDataCnf_t *) pData );
    489                }
    490          
    491                DMMGR_ResetActivityFlag( DATA_ACTIVITY );
    492          #else
    493                if (pData->dataCnf.pDataReq != NULL)
    494                {
    495                  mac_msg_deallocate((uint8**)&pData->dataCnf.pDataReq);
    496                }
    497          
    498                if ( _macCallbackSub & CB_ID_NWK_DATA_CNF )
    499                {
    500                  nwk_MTCallbackSubNwkDataCnf( (ZMacDataCnf_t *) pData );
    501                }
    502          
    503          #endif /* FEATURE_DUAL_MAC */
    504              }
    505              break;
    506          
    507              case MAC_MCPS_DATA_IND:
    508                {
    509                  /*
    510                     Data Ind is unconventional: to save an alloc/copy, reuse the MAC
    511                     buffer and re-organize the contents into ZMAC format.
    512                  */
    513                  ZMacDataInd_t *pDataInd = (ZMacDataInd_t *) pData;
    514                  uint8 event, status, len, *msdu;
    515          
    516                  /* Store parameters */
    517                  event = pData->hdr.event;
    518                  status = pData->hdr.status;
    519                  len = pData->dataInd.msdu.len;
    520                  msdu = pData->dataInd.msdu.p;
    521          
    522                  /* Copy security fields */
    523                  osal_memcpy(&pDataInd->Sec, &pData->dataInd.sec, sizeof(ZMacSec_t));
    524          
    525                  /* Copy mac fields one by one since the two buffers overlap. */
    526                  osal_memcpy(&pDataInd->SrcAddr, &pData->dataInd.mac.srcAddr, sizeof(zAddrType_t));
    527                  osal_memcpy(&pDataInd->DstAddr, &pData->dataInd.mac.dstAddr, sizeof(zAddrType_t));
    528                  pDataInd->Timestamp = pData->dataInd.mac.timestamp;
    529                  pDataInd->Timestamp2 = pData->dataInd.mac.timestamp2;
    530                  pDataInd->SrcPANId = pData->dataInd.mac.srcPanId;
    531                  pDataInd->DstPANId = pData->dataInd.mac.dstPanId;
    532                  pDataInd->mpduLinkQuality = pData->dataInd.mac.mpduLinkQuality;
    533                  pDataInd->Correlation = pData->dataInd.mac.correlation;
    534                  pDataInd->Rssi = pData->dataInd.mac.rssi;
    535                  pDataInd->Dsn = pData->dataInd.mac.dsn;
    536          
    537                  /* Restore parameters */
    538                  pDataInd->hdr.Status = status;
    539                  pDataInd->hdr.Event = event;
    540                  pDataInd->msduLength = len;
    541          
    542                  if (len)
    543                    pDataInd->msdu = msdu;
    544                  else
    545                    pDataInd->msdu = NULL;
    546          
    547                  if ( _macCallbackSub & CB_ID_NWK_DATA_IND )
    548                    nwk_MTCallbackSubNwkDataInd ( pDataInd );
    549                }
    550          
    551                /* free buffer */
    552                mac_msg_deallocate( (uint8 **)&pData );
    553                break;
    554          
    555              case MAC_MCPS_PURGE_CNF:
    556                if ( _macCallbackSub & CB_ID_NWK_PURGE_CNF )
    557                {
    558                  nwk_MTCallbackSubNwkPurgeCnf( (ZMacPurgeCnf_t *) pData);
    559          #ifdef FEATURE_DUAL_MAC
    560                  DMMGR_ResetActivityFlag( DATA_PURGE_ACTIVITY );
    561          #endif /* FEATURE_DUAL_MAC */
    562          
    563                }
    564                break;
    565          
    566              case MAC_MLME_POLL_IND:
    567                  if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_IND )
    568                  {
    569                    nwk_MTCallbackSubNwkPollInd( (ZMacPollInd_t *)pData );
    570                  }
    571                break;
    572          
    573              default:
    574                break;
    575            }
    576          }
    577          #endif
    578          
    579          /********************************************************************************************************
    580           * @fn      MAC_CbackCheckPending
    581           *
    582           * @brief   Return number of pending indirect msg
    583           *
    584           * @param   None
    585           *
    586           * @return  Number of indirect msg holding
    587           ********************************************************************************************************/
    588          #ifdef FEATURE_DUAL_MAC
    589          uint8 ZMacCbackCheckPending(void)
    590          #else

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    591          uint8 MAC_CbackCheckPending(void)
   \                     MAC_CbackCheckPending:
    592          #endif 
    593          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    594          #if !defined (NONWK)
    595            if ( ZSTACK_ROUTER_BUILD )
   \   000004   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6004         JZ        ??MAC_CbackCheckPending_0
   \   00000A   6401         XRL       A,#0x1
   \   00000C   7005         JNZ       ??MAC_CbackCheckPending_1
    596            {
    597              return (nwkDB_ReturnIndirectHoldingCnt());
   \                     ??MAC_CbackCheckPending_0:
   \   00000E                ; Setup parameters for call to function nwkDB_ReturnIndirectHoldingCnt
   \   00000E   12....       LCALL     `??nwkDB_ReturnIndirectHoldingCnt::?relay`; Banked call to: nwkDB_ReturnIndirectHoldingCnt
   \   000011   8002         SJMP      ??MAC_CbackCheckPending_2
    598            }
    599            else
    600            {
    601              return (0);
   \                     ??MAC_CbackCheckPending_1:
   \   000013   7900         MOV       R1,#0x0
    602            }
   \                     ??MAC_CbackCheckPending_2:
   \   000015                REQUIRE ?Subroutine0
   \   000015                ; // Fall through to label ?Subroutine0
    603          #else
    604            return (0);
    605          #endif
    606          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    607          
    608          /**************************************************************************************************
    609           * @fn          MAC_CbackQueryRetransmit
    610           *
    611           * @brief       This function callback function returns whether or not to continue MAC
    612           *              retransmission.
    613           *              A return value '0x00' will indicate no continuation of retry and a return value
    614           *              '0x01' will indicate to continue retransmission. This callback function shall be
    615           *              used to stop continuing retransmission for RF4CE.
    616           *              MAC shall call this callback function whenever it finishes transmitting a packet
    617           *              for macMaxFrameRetries times.
    618           *
    619           * input parameters
    620           *
    621           * None.
    622           *
    623           * output parameters
    624           *
    625           * None.
    626           *
    627           * @return      0x00 to stop retransmission, 0x01 to continue retransmission.
    628           **************************************************************************************************
    629          */
    630          #ifdef FEATURE_DUAL_MAC
    631          uint8 ZMacCbackQueryRetransmit(void)
    632          #else

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    633          uint8 MAC_CbackQueryRetransmit(void)
   \                     MAC_CbackQueryRetransmit:
    634          #endif /* FEATURE_DUAL_MAC */
    635          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    636            return(0);
   \   000000   7900         MOV       R1,#0x0
   \   000002   02....       LJMP      ?BRET
    637          }
    638          
    639          /********************************************************************************************************
    640           * @fn      ZMacLqiAdjustMode
    641           *
    642           * @brief   Sets/return LQI adjust mode
    643           *
    644           * @param   mode - LQI_ADJ_GET = return current mode only
    645           *                 LQI_ADJ_OFF = disable LQI adjusts
    646           *                 LQI_ADJ_MODEx = set to LQI adjust MODEx
    647           *
    648           * @return  current LQI adjust mode
    649           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    650          ZMacLqiAdjust_t ZMacLqiAdjustMode( ZMacLqiAdjust_t mode )
   \                     ZMacLqiAdjustMode:
    651          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   F8           MOV       R0,A
    652            if ( mode != LQI_ADJ_GET )
   \   000006   74FF         MOV       A,#-0x1
   \   000008   68           XRL       A,R0
   \   000009   6005         JZ        ??ZMacLqiAdjustMode_0
    653            {
    654              lqiAdjMode = mode;
   \   00000B   E9           MOV       A,R1
   \   00000C   90....       MOV       DPTR,#lqiAdjMode
   \   00000F   F0           MOVX      @DPTR,A
    655            }
    656            return ( lqiAdjMode );
   \                     ??ZMacLqiAdjustMode_0:
   \   000010   90....       MOV       DPTR,#lqiAdjMode
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F9           MOV       R1,A
   \   000015   80..         SJMP      ?Subroutine0
    657          }
    658          
    659          #if !defined NONWK
    660          /********************************************************************************************************
    661           * @fn      ZMacLqiAdjust
    662           *
    663           * @brief   Adjust LQI according to correlation value
    664           *
    665           * @notes - the IEEE 802.15.4 specification provides some general statements on
    666           *          the subject of LQI. Section 6.7.8: "The minimum and maximum LQI values
    667           *          (0x00 and 0xFF) should be associated with the lowest and highest IEEE
    668           *          802.15.4 signals detectable by the receiver, and LQ values should be
    669           *          uniformly distributed between these two limits." Section E.2.3: "The
    670           *          LQI (see 6.7.8) measures the received energy and/or SNR for each
    671           *          received packet. When energy level and SNR information are combined,
    672           *          they can indicate whether a corrupt packet resulted from low signal
    673           *          strength or from high signal strength plus interference."
    674           *        - LQI Adjustment Mode1 provided below is a simple algorithm to use the
    675           *          packet correlation value (related to SNR) to scale incoming LQI value
    676           *          (related to signal strength) to 'derate' noisy packets.
    677           *        - LQI Adjustment Mode2 provided below is a location for a developer to
    678           *          implement their own proprietary LQI adjustment algorithm.
    679           *
    680           * @param   corr - packet correlation value
    681           * @param   lqi  - ptr to link quality (scaled rssi)
    682           *
    683           * @return  *lqi - adjusted link quality
    684           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    685          static void ZMacLqiAdjust( uint8 corr, uint8 *lqi )
   \                     ZMacLqiAdjust:
    686          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FC           MOV       R4,A
   \   000009   EB           MOV       A,R3
   \   00000A   FD           MOV       R5,A
    687            if ( lqiAdjMode != LQI_ADJ_OFF )
   \   00000B   90....       MOV       DPTR,#lqiAdjMode
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   6051         JZ        ??ZMacLqiAdjust_0
    688            {
    689              uint16 adjLqi = *lqi;
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F8           MOV       R0,A
   \   000017   7900         MOV       R1,#0x0
    690          
    691              // Keep correlation within theoretical limits
    692              if ( corr < LQI_CORR_MIN )
   \   000019   EE           MOV       A,R6
   \   00001A   C3           CLR       C
   \   00001B   9432         SUBB      A,#0x32
   \   00001D   5004         JNC       ??ZMacLqiAdjust_1
    693              {
    694                 corr = LQI_CORR_MIN;
   \   00001F   7E32         MOV       R6,#0x32
   \   000021   8008         SJMP      ??ZMacLqiAdjust_2
    695              }
    696              else if ( corr > LQI_CORR_MAX )
   \                     ??ZMacLqiAdjust_1:
   \   000023   EE           MOV       A,R6
   \   000024   C3           CLR       C
   \   000025   946F         SUBB      A,#0x6f
   \   000027   4002         JC        ??ZMacLqiAdjust_2
    697              {
    698                 corr = LQI_CORR_MAX;
   \   000029   7E6E         MOV       R6,#0x6e
    699              }
    700          
    701              if ( lqiAdjMode == LQI_ADJ_MODE1 )
   \                     ??ZMacLqiAdjust_2:
   \   00002B   90....       MOV       DPTR,#lqiAdjMode
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   6401         XRL       A,#0x1
   \   000031   701F         JNZ       ??ZMacLqiAdjust_3
    702              {
    703                /* MODE1 - linear scaling of incoming LQI with a "correlation percentage"
    704                           which is computed from the incoming correlation value between
    705                           theorectical minimum/maximum values. This is a very simple way
    706                           of 'derating' the incoming LQI as correlation value drops. */
    707                adjLqi = (adjLqi * (corr - LQI_CORR_MIN)) / (LQI_CORR_MAX - LQI_CORR_MIN);
   \   000033   EE           MOV       A,R6
   \   000034   24CE         ADD       A,#-0x32
   \   000036   F5..         MOV       ?V0,A
   \   000038   E4           CLR       A
   \   000039   34FF         ADDC      A,#-0x1
   \   00003B   F5..         MOV       ?V1,A
   \   00003D   E8           MOV       A,R0
   \   00003E   85....       MOV       ?B,?V0
   \   000041   A4           MUL       AB
   \   000042   C8           XCH       A,R0
   \   000043   AA..         MOV       R2,?B
   \   000045   85....       MOV       ?B,?V1
   \   000048   A4           MUL       AB
   \   000049   2A           ADD       A,R2
   \   00004A   F9           MOV       R1,A
   \   00004B   7A3C         MOV       R2,#0x3c
   \   00004D   7B00         MOV       R3,#0x0
   \   00004F   12....       LCALL     ?US_DIV_MOD
    708              }
    709              else if ( lqiAdjMode == LQI_ADJ_MODE2 )
    710              {
    711                /* MODE2 - location for developer to implement a proprietary algorithm */
    712              }
    713          
    714              // Replace incoming LQI with scaled value
    715              *lqi = (adjLqi > 255) ? 255 : (uint8)adjLqi;
   \                     ??ZMacLqiAdjust_3:
   \   000052   C3           CLR       C
   \   000053   E9           MOV       A,R1
   \   000054   9401         SUBB      A,#0x1
   \   000056   4004         JC        ??ZMacLqiAdjust_4
   \   000058   74FF         MOV       A,#-0x1
   \   00005A   8001         SJMP      ??ZMacLqiAdjust_5
   \                     ??ZMacLqiAdjust_4:
   \   00005C   E8           MOV       A,R0
   \                     ??ZMacLqiAdjust_5:
   \   00005D   8C82         MOV       DPL,R4
   \   00005F   8D83         MOV       DPH,R5
   \   000061   F0           MOVX      @DPTR,A
    716            }
    717          }
   \                     ??ZMacLqiAdjust_0:
   \   000062   7F02         MOV       R7,#0x2
   \   000064   02....       LJMP      ?BANKED_LEAVE_XDATA
    718          #endif

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   MAC_CbackCheckPending
        2      0   -> nwkDB_ReturnIndirectHoldingCnt
      0     25   MAC_CbackEvent
        0     22   -> MAC_MlmeGetReq
        0     22   -> ZMacLqiAdjust
        0     22   -> mac_msg_deallocate
        0     22   -> nwk_broadcastSend
        0     22   -> osal_mem_free
        0     25   -> osal_memcpy
        0     22   -> osal_msg_allocate
        0     22   -> osal_msg_send
      0      0   MAC_CbackQueryRetransmit
      1     32   ZMacLqiAdjust
      2      0   ZMacLqiAdjustMode


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??Subroutine17_0
       6  ??Subroutine18_0
       2  ??Subroutine19_0
       6  ??Subroutine20_0
       3  ??Subroutine21_0
       8  ??Subroutine22_0
       7  ?Subroutine0
      17  ?Subroutine1
       4  ?Subroutine10
      13  ?Subroutine11
       4  ?Subroutine12
       5  ?Subroutine13
       6  ?Subroutine14
      10  ?Subroutine15
      15  ?Subroutine16
       9  ?Subroutine2
       3  ?Subroutine3
       8  ?Subroutine4
      13  ?Subroutine5
       4  ?Subroutine6
       7  ?Subroutine7
       9  ?Subroutine8
      16  ?Subroutine9
      21  MAC_CbackCheckPending
     947  MAC_CbackEvent
       5  MAC_CbackQueryRetransmit
     103  ZMacLqiAdjust
      23  ZMacLqiAdjustMode
       1  _A_IEN0
       1  lqiAdjMode
       2  pZMac_AppCallback
      18  zmacCBSizeTable
      30  -- Other

 
 1 280 bytes in segment BANKED_CODE
    30 bytes in segment BANK_RELAYS
    18 bytes in segment CODE_C
     1 byte  in segment SFR_AN
     3 bytes in segment XDATA_Z
 
    48 bytes of CODE     memory
     0 bytes of DATA     memory (+ 1 byte shared)
 1 280 bytes of HUGECODE memory
     3 bytes of XDATA    memory

Errors: none
Warnings: none
