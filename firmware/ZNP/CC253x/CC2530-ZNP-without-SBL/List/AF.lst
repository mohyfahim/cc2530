###############################################################################
#
# IAR C/C++ Compiler V10.40.1.7397 for 8051               01/May/2021  14:31:14
# Copyright 2004-2021 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\Texas Instruments\Z-Stack 3.0.2\Components\stack\af\AF.c
#    Command line       =  
#        -f C:\Users\asus\AppData\Local\Temp\EW1D94.tmp ("E:\Texas
#        Instruments\Z-Stack 3.0.2\Components\stack\af\AF.c" -D
#        BDB_FINDING_BINDING_CAPABILITY_ENABLED=0 -D TC_LINKKEY_JOIN -D
#        HAL_UART_DMA_RX_MAX=128 -D MAXMEMHEAP=2765 -D NWK_MAX_DEVICE_LIST=10
#        -D ZDSECMGR_TC_DEVICE_MAX=30 -D DISABLE_GREENPOWER_BASIC_PROXY -D
#        POWER_SAVING -D FEATURE_SYSTEM_STATS -D MT_GP_CB_FUNC -D ASSERT_RESET
#        -D MAKE_CRC_SHDW -lC "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\List" -lA
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\List"
#        --diag_suppress Pe001,Pa010 -o "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\Obj" -e
#        --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_GP_CB_FUNC -DMT_APP_FUNC -DMT_APP_CNF_FUNC)
#        -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg" -I
#        "E:\Texas Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\Source\" -I "E:\Texas
#        Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\..\Source\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Utilities\BootLoad\Source\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\gp\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\bdb\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  English_USA.1252
#    List file          =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\List\AF.lst
#    Object file        =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\Obj\AF.r51
#
###############################################################################

E:\Texas Instruments\Z-Stack 3.0.2\Components\stack\af\AF.c
      1          /**************************************************************************************************
      2            Filename:       AF.c
      3            Revised:        $Date: 2014-11-04 10:53:36 -0800 (Tue, 04 Nov 2014) $
      4            Revision:       $Revision: 40974 $
      5          
      6            Description:    Application Framework - Device Description helper functions
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "nwk_globals.h"
     47          #include "nwk_util.h"
     48          #include "aps_groups.h"
     49          #include "ZDProfile.h"
     50          #include "aps_frag.h"
     51          #include "rtg.h"
     52          
     53          #if defined ( MT_AF_CB_FUNC )
     54            #include "MT_AF.h"
     55          #endif
     56          
     57          #if defined ( INTER_PAN )
     58            #include "stub_aps.h"
     59          #endif
     60          
     61          #include "bdb.h" 
     62          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED==1)
     63            #include "bdb_tlCommissioning.h"
     64          #endif
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          /*********************************************************************
     71           * @fn      afSend
     72           *
     73           * @brief   Helper macro for V1 API to invoke V2 API.
     74           *
     75           * input parameters
     76           *
     77           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
     78           * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
     79           * @param   cID - A valid cluster ID as specified by the Profile.
     80           * @param   len - Number of bytes of data pointed to by next param.
     81           * @param  *buf - A pointer to the data bytes to send.
     82           * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
     83           * @param  *transID - A pointer to a byte which can be modified and which will
     84           *                    be used as the transaction sequence number of the msg.
     85           *
     86           * output parameters
     87           *
     88           * @param  *transID - Incremented by one if the return value is success.
     89           *
     90           * @return  afStatus_t - See previous definition of afStatus_... types.
     91           */
     92          #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \
     93                  AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \
     94                                    (cID), (len), (buf), (transID), (options), (radius) )
     95          
     96          /*********************************************************************
     97           * GLOBAL VARIABLES
     98           */
     99          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    100          epList_t *epList;
   \                     epList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    101          
    102          /*********************************************************************
    103           * LOCAL FUNCTIONS
    104           */
    105          
    106          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
    107                          zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    108                          uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius );
    109          
    110          static epList_t *afFindEndPointDescList( uint8 EndPoint );
    111          
    112          static pDescCB afGetDescCB( endPointDesc_t *epDesc );
    113          
    114          /*********************************************************************
    115           * PUBLIC FUNCTIONS
    116           */
    117          
    118          /*********************************************************************
    119           * @fn      afInit
    120           *
    121           * @brief   Initialization function for the AF.
    122           *
    123           * @param   none
    124           *
    125           * @return  none
    126          void afInit( void )
    127          {
    128          }
    129           */
    130          
    131          /*********************************************************************
    132           * @fn      afRegisterExtended
    133           *
    134           * @brief   Register an Application's EndPoint description.
    135           *
    136           * @param   epDesc - pointer to the Application's endpoint descriptor.
    137           * @param   descFn - pointer to descriptor callback function
    138           * @param   applFn - pointer to the Application callback function
    139           *
    140           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    141           *
    142           * @return  Pointer to epList_t on success, NULL otherwise.
    143           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    144          epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn, pApplCB applFn )
   \                     afRegisterExtended:
    145          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
    146            epList_t *ep = osal_mem_alloc(sizeof(epList_t));
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A0B         MOV       R2,#0xb
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
    147          
    148            if (ep != NULL)
   \   000014   EA           MOV       A,R2
   \   000015   4B           ORL       A,R3
   \   000016   603D         JZ        ??CrossCallReturnLabel_70
    149            {
    150              ep->nextDesc = epList;
   \   000018   90....       MOV       DPTR,#epList
   \   00001B   12....       LCALL     ?Subroutine6 & 0xFFFF
    151              epList = ep;
   \                     ??CrossCallReturnLabel_3:
   \   00001E   90....       MOV       DPTR,#epList
   \   000021   EA           MOV       A,R2
   \   000022   F0           MOVX      @DPTR,A
   \   000023   A3           INC       DPTR
   \   000024   EB           MOV       A,R3
   \   000025   12....       LCALL     ?Subroutine26 & 0xFFFF
    152              ep->epDesc = epDesc;
   \                     ??CrossCallReturnLabel_41:
   \   000028   EE           MOV       A,R6
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   EF           MOV       A,R7
   \   00002C   12....       LCALL     ?Subroutine25 & 0xFFFF
    153              ep->pfnDescCB = descFn;
   \                     ??CrossCallReturnLabel_39:
   \   00002F   E5..         MOV       A,?V0
   \   000031   F0           MOVX      @DPTR,A
   \   000032   A3           INC       DPTR
   \   000033   E5..         MOV       A,?V1
   \   000035   12....       LCALL     ?Subroutine24 & 0xFFFF
    154              ep->apsfCfg.frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \                     ??CrossCallReturnLabel_37:
   \   000038   A3           INC       DPTR
   \   000039   7432         MOV       A,#0x32
   \   00003B   12....       LCALL     ?Subroutine20 & 0xFFFF
    155              ep->apsfCfg.windowSize = APSF_DEFAULT_WINDOW_SIZE;
   \                     ??CrossCallReturnLabel_30:
   \   00003E   7401         MOV       A,#0x1
   \   000040   12....       LCALL     ?Subroutine20 & 0xFFFF
    156              ep->flags = eEP_AllowMatch;  // Default to allow Match Descriptor.
   \                     ??CrossCallReturnLabel_31:
   \   000043   A3           INC       DPTR
   \   000044   F0           MOVX      @DPTR,A
    157              ep->pfnApplCB = applFn;
   \   000045   740C         MOV       A,#0xc
   \   000047   12....       LCALL     ?XSTACK_DISP0_8
   \   00004A   12....       LCALL     ?Subroutine8 & 0xFFFF
    158              
    159            #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
    160              //Make sure we add at least one application endpoint
    161              if ((epDesc->endPoint != 0)  || (epDesc->endPoint < BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
    162              {
    163                bdb_HeadEpDescriptorList = epList;
    164                ep->epDesc->epType = bdb_zclFindingBindingEpType(ep->epDesc);
    165              }
    166          
    167            #endif
    168          #if defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET )
    169              // find the first empty entry in the device info table
    170              for ( uint8 i = 0; i < 5; i++ )
    171              {
    172                if ( touchLinkSubDevicesTbl[i] == NULL )
    173                {
    174                  touchLinkSubDevicesTbl[i] = osal_mem_alloc(sizeof(bdbTLDeviceInfo_t));
    175                  if ( touchLinkSubDevicesTbl[i] != NULL )
    176                  {
    177                    touchLinkSubDevicesTbl[i]->deviceID = epDesc->simpleDesc->AppDeviceId;
    178                    touchLinkSubDevicesTbl[i]->endpoint = epDesc->simpleDesc->EndPoint;
    179                    touchLinkSubDevicesTbl[i]->profileID = epDesc->simpleDesc->AppProfId;
    180                    touchLinkSubDevicesTbl[i]->version = epDesc->simpleDesc->AppDevVer;
    181                    break;
    182                  }
    183                }
    184              }
    185          #endif  // BDB_TL_INITIATOR || BDB_TL_TARGET
    186            }
   \                     ??CrossCallReturnLabel_7:
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   12....       LCALL     ??Subroutine39_0 & 0xFFFF
    187           
    188            return ep;
   \                     ??CrossCallReturnLabel_70:
   \   000055   02....       LJMP      ?Subroutine0 & 0xFFFF
    189          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine42_0
   \   000003                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   8A82         MOV       DPL,R2
   \   000004   8B83         MOV       DPH,R3
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000003   E8           MOV       A,R0
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   E9           MOV       A,R1
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    190          
    191          /*********************************************************************
    192           * @fn      afRegister
    193           *
    194           * @brief   Register an Application's EndPoint description.
    195           *
    196           * @param   epDesc - pointer to the Application's endpoint descriptor.
    197           *
    198           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    199           *
    200           * @return  afStatus_SUCCESS - Registered
    201           *          afStatus_MEM_FAIL - not enough memory to add descriptor
    202           *          afStatus_INVALID_PARAMETER - duplicate endpoint
    203           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    204          afStatus_t afRegister( endPointDesc_t *epDesc )
   \                     afRegister:
    205          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    206            if (afFindEndPointDescList(epDesc->endPoint))  // Look for duplicate endpoint.
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000010   EA           MOV       A,R2
   \   000011   4B           ORL       A,R3
   \   000012   6004         JZ        ??afRegister_0
    207            {
    208              return afStatus_INVALID_PARAMETER;
   \   000014   7902         MOV       R1,#0x2
   \   000016   8024         SJMP      ??afRegister_1
    209            }
    210          
    211            return ((NULL == afRegisterExtended(epDesc, NULL, NULL)) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
   \                     ??afRegister_0:
   \   000018                ; Setup parameters for call to function afRegisterExtended
   \   000018   E4           CLR       A
   \   000019   F5..         MOV       ?V0,A
   \   00001B   F5..         MOV       ?V1,A
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000022   7C00         MOV       R4,#0x0
   \   000024   7D00         MOV       R5,#0x0
   \   000026   EE           MOV       A,R6
   \   000027   FA           MOV       R2,A
   \   000028   EF           MOV       A,R7
   \   000029   FB           MOV       R3,A
   \   00002A   12....       LCALL     `??afRegisterExtended::?relay`; Banked call to: afRegisterExtended
   \   00002D   7402         MOV       A,#0x2
   \   00002F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000032   EA           MOV       A,R2
   \   000033   4B           ORL       A,R3
   \   000034   7004         JNZ       ??afRegister_2
   \   000036   7910         MOV       R1,#0x10
   \   000038   8002         SJMP      ??afRegister_1
   \                     ??afRegister_2:
   \   00003A   7900         MOV       R1,#0x0
   \                     ??afRegister_1:
   \   00003C   02....       LJMP      ?Subroutine1 & 0xFFFF
    212          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    213          
    214          /*********************************************************************
    215           * @fn      afDelete
    216           *
    217           * @brief   Delete an Application's EndPoint descriptor and frees the memory
    218           *
    219           * @param   EndPoint - Application Endpoint to delete
    220           *
    221           * @return  afStatus_SUCCESS - endpoint deleted
    222           *          afStatus_INVALID_PARAMETER - endpoint not found
    223           *          afStatus_FAILED - endpoint list empty
    224           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    225          afStatus_t afDelete( uint8 EndPoint )
   \                     afDelete:
    226          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    227            epList_t *epCurrent;
    228            epList_t *epPrevious;
    229          
    230            if ( epList != NULL )
   \   000007   90....       MOV       DPTR,#epList
   \   00000A   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   00000D   6050         JZ        ??afDelete_0
    231            {
    232              epPrevious = epCurrent = epList;
   \   00000F   90....       MOV       DPTR,#epList
   \   000012   12....       LCALL     ??Subroutine46_0 & 0xFFFF
    233          
    234              // first element of the list matches
    235              if ( epCurrent->epDesc->endPoint == EndPoint )
   \                     ??CrossCallReturnLabel_100:
   \   000015   8882         MOV       DPL,R0
   \   000017   F583         MOV       DPH,A
   \   000019   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00001C   8882         MOV       DPL,R0
   \   00001E   8983         MOV       DPH,R1
   \   000020   7014         JNZ       ??afDelete_1
    236              {
    237                epList = epCurrent->nextDesc;
   \   000022   12....       LCALL     ??Subroutine41_0 & 0xFFFF
    238                osal_mem_free( epCurrent );
    239          
    240                return ( afStatus_SUCCESS );
    241              }
   \                     ??CrossCallReturnLabel_79:
   \   000025   90....       MOV       DPTR,#epList
   \   000028   E8           MOV       A,R0
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   E9           MOV       A,R1
   \   00002C   8025         SJMP      ??afDelete_2
    242              else
    243              {
    244                // search the list
    245                for ( epCurrent = epPrevious->nextDesc;
    246                      epCurrent != NULL;
    247                      epCurrent = epCurrent->nextDesc )
    248                {
    249                  if ( epCurrent->epDesc->endPoint == EndPoint )
    250                  {
    251                    epPrevious->nextDesc = epCurrent->nextDesc;
    252                    osal_mem_free( epCurrent );
    253          
    254                    // delete the entry and free the memory
    255                    return ( afStatus_SUCCESS );
    256                  }
    257                  epPrevious = epCurrent;
   \                     ??afDelete_3:
   \   00002E   EA           MOV       A,R2
   \   00002F   F8           MOV       R0,A
   \   000030   EB           MOV       A,R3
   \   000031   F9           MOV       R1,A
   \   000032   8A82         MOV       DPL,R2
   \   000034   8B83         MOV       DPH,R3
   \                     ??afDelete_1:
   \   000036   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000039   6020         JZ        ??afDelete_4
   \   00003B   8A82         MOV       DPL,R2
   \   00003D   8B83         MOV       DPH,R3
   \   00003F   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000042   70EA         JNZ       ??afDelete_3
   \   000044   8A82         MOV       DPL,R2
   \   000046   8B83         MOV       DPH,R3
   \   000048   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00004B   8882         MOV       DPL,R0
   \   00004D   8983         MOV       DPH,R1
   \   00004F   EC           MOV       A,R4
   \   000050   F0           MOVX      @DPTR,A
   \   000051   A3           INC       DPTR
   \   000052   ED           MOV       A,R5
   \                     ??afDelete_2:
   \   000053   F0           MOVX      @DPTR,A
   \   000054                ; Setup parameters for call to function osal_mem_free
   \   000054   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000057   7900         MOV       R1,#0x0
   \   000059   8006         SJMP      ??afDelete_5
    258                }
    259              }
    260          
    261              // no endpoint found
    262              return ( afStatus_INVALID_PARAMETER );
   \                     ??afDelete_4:
   \   00005B   7902         MOV       R1,#0x2
   \   00005D   8002         SJMP      ??afDelete_5
    263            }
    264            else
    265            {
    266              // epList is empty
    267              return ( afStatus_FAILED );
   \                     ??afDelete_0:
   \   00005F   7901         MOV       R1,#0x1
    268            }
   \                     ??afDelete_5:
   \   000061                REQUIRE ?Subroutine2
   \   000061                ; // Fall through to label ?Subroutine2
    269          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   FC           MOV       R4,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F583         MOV       DPH,A
   \   000008   8C82         MOV       DPL,R4
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   6E           XRL       A,R6
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   49           ORL       A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   EA           MOV       A,R2
   \   000006   4B           ORL       A,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    270          
    271          /*********************************************************************
    272           * @fn          afDataConfirm
    273           *
    274           * @brief       This function will generate the Data Confirm back to
    275           *              the application.
    276           *
    277           * @param       endPoint - confirm end point
    278           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    279           * @param       status - status of APSDE_DATA_REQUEST
    280           *
    281           * @return      none
    282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    283          void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afDataConfirm:
    284          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V1,R2
   \   000009   8B..         MOV       ?V2,R3
    285            endPointDesc_t *epDesc;
    286            afDataConfirm_t *msgPtr;
    287          
    288            // Find the endpoint description
    289            epDesc = afFindEndPointDesc( endPoint );
   \   00000B                ; Setup parameters for call to function afFindEndPointDesc
   \   00000B   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00000E   8A..         MOV       ?V4,R2
   \   000010   8B..         MOV       ?V5,R3
   \   000012   AE..         MOV       R6,?V4
   \   000014   AF..         MOV       R7,?V5
    290            if ( epDesc == NULL )
   \   000016   EA           MOV       A,R2
   \   000017   4F           ORL       A,R7
   \   000018   6028         JZ        ??CrossCallReturnLabel_0
    291              return;
    292          
    293            // Determine the incoming command type
    294            msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
   \   00001A                ; Setup parameters for call to function osal_msg_allocate
   \   00001A   7A04         MOV       R2,#0x4
   \   00001C   7B00         MOV       R3,#0x0
   \   00001E   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    295            if ( msgPtr )
   \   000021   EA           MOV       A,R2
   \   000022   4B           ORL       A,R3
   \   000023   601D         JZ        ??CrossCallReturnLabel_0
    296            {
    297              // Build the Data Confirm message
    298              msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
   \   000025   8A82         MOV       DPL,R2
   \   000027   8B83         MOV       DPH,R3
   \   000029   74FD         MOV       A,#-0x3
   \   00002B   F0           MOVX      @DPTR,A
    299              msgPtr->hdr.status = status;
   \   00002C   A3           INC       DPTR
   \   00002D   E5..         MOV       A,?V2
   \   00002F   12....       LCALL     ?Subroutine26 & 0xFFFF
    300              msgPtr->endpoint = endPoint;
   \                     ??CrossCallReturnLabel_42:
   \   000032   E5..         MOV       A,?V0
   \   000034   12....       LCALL     ?Subroutine26 & 0xFFFF
    301              msgPtr->transID = transID;
   \                     ??CrossCallReturnLabel_43:
   \   000037   A3           INC       DPTR
   \   000038   E5..         MOV       A,?V1
   \   00003A   F0           MOVX      @DPTR,A
    302          
    303          #if defined ( MT_AF_CB_FUNC )
    304              /* If MT has subscribed for this callback, don't send as a message. */
    305              if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
    306              {
    307                /* Send callback if it's subscribed */
    308                MT_AfDataConfirm ((void *)msgPtr);
    309                /* Release the memory. */
    310                osal_msg_deallocate( (void *)msgPtr );
    311              }
    312              else
    313          #endif
    314              {
    315                /* send message through task message */
    316                osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
   \   00003B                ; Setup parameters for call to function osal_msg_send
   \   00003B   8E82         MOV       DPL,R6
   \   00003D   8F83         MOV       DPH,R7
   \   00003F   12....       LCALL     ?Subroutine5 & 0xFFFF
    317              }
    318            }
    319          }
   \                     ??CrossCallReturnLabel_0:
   \   000042   7F06         MOV       R7,#0x6
   \   000044   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine50_0
   \   000002                ; // Fall through to label ??Subroutine50_0
    320          
    321          /*********************************************************************
    322           * @fn          afReflectError
    323           *
    324           * @brief       This function will generate the Reflect Error message to
    325           *              the application.
    326           *
    327           * @param       srcEP - Source Endpoint
    328           * @param       dstAddrMode - mode of dstAdd - 0 - normal short addr, 1 - group Address
    329           * @param       dstAddr - intended destination
    330           * @param       dstEP - Destination Endpoint
    331           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    332           * @param       status - status of APSDE_DATA_REQUEST
    333           *
    334           * @return      none
    335           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    336          void afReflectError( uint8 srcEP, uint8 dstAddrMode, uint16 dstAddr, uint8 dstEP,
   \                     afReflectError:
    337                               uint8 transID, ZStatus_t status )
    338          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V3,R2
   \   000007   EC           MOV       A,R4
   \   000008   FE           MOV       R6,A
   \   000009   ED           MOV       A,R5
   \   00000A   FF           MOV       R7,A
   \   00000B   8B..         MOV       ?V4,R3
    339            endPointDesc_t *epDesc;
    340            afReflectError_t *msgPtr;
    341          
    342            // Find the endpoint description
    343            epDesc = afFindEndPointDesc( srcEP );
   \   00000D                ; Setup parameters for call to function afFindEndPointDesc
   \   00000D   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000010   8A..         MOV       ?V0,R2
   \   000012   8B..         MOV       ?V1,R3
    344            if ( epDesc == NULL )
   \   000014   EA           MOV       A,R2
   \   000015   4B           ORL       A,R3
   \   000016   603D         JZ        ??CrossCallReturnLabel_1
    345              return;
    346          
    347            // Determine the incoming command type
    348            msgPtr = (afReflectError_t *)osal_msg_allocate( sizeof(afReflectError_t) );
   \   000018                ; Setup parameters for call to function osal_msg_allocate
   \   000018   7A07         MOV       R2,#0x7
   \   00001A   7B00         MOV       R3,#0x0
   \   00001C   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    349            if ( msgPtr )
   \   00001F   EA           MOV       A,R2
   \   000020   4B           ORL       A,R3
   \   000021   6032         JZ        ??CrossCallReturnLabel_1
    350            {
    351              // Build the Data Confirm message
    352              msgPtr->hdr.event = AF_REFLECT_ERROR_CMD;
   \   000023   8A82         MOV       DPL,R2
   \   000025   8B83         MOV       DPH,R3
   \   000027   74FE         MOV       A,#-0x2
   \   000029   F0           MOVX      @DPTR,A
    353              msgPtr->hdr.status = status;
   \   00002A   7411         MOV       A,#0x11
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   8A82         MOV       DPL,R2
   \   000032   8B83         MOV       DPH,R3
   \   000034   A3           INC       DPTR
   \   000035   12....       LCALL     ?Subroutine26 & 0xFFFF
    354              msgPtr->endpoint = dstEP;
   \                     ??CrossCallReturnLabel_44:
   \   000038   E5..         MOV       A,?V4
   \   00003A   F0           MOVX      @DPTR,A
    355              msgPtr->transID = transID;
   \   00003B   7410         MOV       A,#0x10
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   12....       LCALL     ?Subroutine17 & 0xFFFF
    356              msgPtr->dstAddrMode = dstAddrMode;
    357              msgPtr->dstAddr = dstAddr;
    358          
    359          #if defined ( MT_AF_CB_FUNC )
    360              /* If MT has subscribed for this callback, don't send as a message. */
    361              if ( AFCB_CHECK( CB_ID_AF_REFLECT_ERROR, *(epDesc->task_id) ) )
    362              {
    363                /* Send callback if it's subscribed */
    364                MT_AfReflectError( (void *)msgPtr );
    365                /* Release the memory. */
    366                osal_msg_deallocate( (void *)msgPtr );
    367              }
    368              else
    369          #endif
    370              {
    371                /* send message through task message */
    372                osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
    373              }
    374            }
   \                     ??CrossCallReturnLabel_24:
   \   000043   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000046   E5..         MOV       A,?V3
   \   000048   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00004B   EE           MOV       A,R6
   \   00004C   F0           MOVX      @DPTR,A
   \   00004D   A3           INC       DPTR
   \   00004E   EF           MOV       A,R7
   \   00004F   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000052   12....       LCALL     ?Subroutine5 & 0xFFFF
    375          }
   \                     ??CrossCallReturnLabel_1:
   \   000055   7F08         MOV       R7,#0x8
   \   000057   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_msg_send
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET
    376          
    377          /*********************************************************************
    378           * @fn          afIncomingData
    379           *
    380           * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
    381           *
    382           * @param       aff  - pointer to APS frame format
    383           * @param       SrcAddress  - Source address
    384           * @param       SrcPanId  - Source PAN ID
    385           * @param       sig - incoming message's link quality
    386           * @param       nwkSeqNum - incoming network sequence number (from nwk header frame)
    387           * @param       SecurityUse - Security enable/disable
    388           * @param       timestamp - the MAC Timer2 timestamp at Rx.
    389           * @param       radius - incoming messages received radius
    390           *
    391           * @return      none
    392           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    393          void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
   \                     afIncomingData:
    394                               NLDE_Signal_t *sig, uint8 nwkSeqNum, uint8 SecurityUse,
    395                               uint32 timestamp, uint8 radius )
    396          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EC           MOV       A,R4
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   ED           MOV       A,R5
   \   000013   F0           MOVX      @DPTR,A
   \   000014   7401         MOV       A,#0x1
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   E9           MOV       A,R1
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   8A..         MOV       ?V2,R2
   \   00001D   8B..         MOV       ?V3,R3
    397            endPointDesc_t *epDesc = NULL;
    398            epList_t *pList = epList;
   \   00001F   90....       MOV       DPTR,#epList
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F5..         MOV       ?V0,A
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F5..         MOV       ?V1,A
    399          #if !defined ( APS_NO_GROUPS )
    400            uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
   \   000029   75..FE       MOV       ?V8,#-0x2
    401          #endif
    402          
    403            if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   E0           MOVX      A,@DPTR
   \   000031   540C         ANL       A,#0xc
   \   000033   640C         XRL       A,#0xc
   \   000035   7012         JNZ       ??afIncomingData_0
    404            {
    405          #if !defined ( APS_NO_GROUPS )
    406              // Find the first endpoint for this group
    407              grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
   \   000037                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   000037   79FE         MOV       R1,#-0x2
   \   000039   12....       LCALL     ?Subroutine7 & 0xFFFF
    408              if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \                     ??CrossCallReturnLabel_5:
   \   00003C   7003         JNZ       $+5
   \   00003E   02....       LJMP      ??afIncomingData_1 & 0xFFFF
    409                return;   // No endpoint found
    410          
    411              epDesc = afFindEndPointDesc( grpEp );
   \   000041                ; Setup parameters for call to function afFindEndPointDesc
   \   000041   12....       LCALL     ?Subroutine29 & 0xFFFF
    412              if ( epDesc == NULL )
   \                     ??CrossCallReturnLabel_51:
   \   000044   704E         JNZ       ??afIncomingData_2
    413                return;   // Endpoint descriptor not found
   \   000046   02....       LJMP      ??afIncomingData_1 & 0xFFFF
    414          
    415              pList = afFindEndPointDescList( epDesc->endPoint );
    416          #else
    417              return; // Not supported
    418          #endif
    419            }
    420            else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_0:
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   F4           CPL       A
   \   00004D   702E         JNZ       ??afIncomingData_3
    421            {
    422              // Set the list
    423              if ( pList != NULL )
   \   00004F   E5..         MOV       A,?V0
   \   000051   45..         ORL       A,?V1
   \   000053   7003         JNZ       $+5
   \   000055   02....       LJMP      ??afIncomingData_1 & 0xFFFF
    424              {
    425                epDesc = pList->epDesc;
   \   000058   85..82       MOV       DPL,?V0
   \   00005B   85..83       MOV       DPH,?V1
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   E0           MOVX      A,@DPTR
   \   000061   FE           MOV       R6,A
   \   000062   A3           INC       DPTR
   \   000063   E0           MOVX      A,@DPTR
   \   000064   FF           MOV       R7,A
   \                     ??afIncomingData_4:
   \   000065   741C         MOV       A,#0x1c
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   F5..         MOV       ?V14,A
   \   00006D   A3           INC       DPTR
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   F5..         MOV       ?V15,A
   \   000071   7421         MOV       A,#0x21
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   78..         MOV       R0,#?V4
   \   000078   12....       LCALL     ?L_MOV_X
   \   00007B   802D         SJMP      ??afIncomingData_5
    426              }
    427            }
    428            else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
   \                     ??afIncomingData_3:
   \   00007D                ; Setup parameters for call to function afFindEndPointDesc
   \   00007D   8A82         MOV       DPL,R2
   \   00007F   8B83         MOV       DPH,R3
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   E0           MOVX      A,@DPTR
   \   000084   F9           MOV       R1,A
   \   000085   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000088   8B..         MOV       ?V5,R3
   \   00008A   A9..         MOV       R1,?V5
   \   00008C   EA           MOV       A,R2
   \   00008D   FE           MOV       R6,A
   \   00008E   EB           MOV       A,R3
   \   00008F   FF           MOV       R7,A
   \   000090   EA           MOV       A,R2
   \   000091   49           ORL       A,R1
   \   000092   60D1         JZ        ??afIncomingData_4
    429            {
    430              pList = afFindEndPointDescList( epDesc->endPoint );
   \                     ??afIncomingData_2:
   \   000094                ; Setup parameters for call to function afFindEndPointDescList
   \   000094   8E82         MOV       DPL,R6
   \   000096   8F83         MOV       DPH,R7
   \   000098   12....       LCALL     ?Subroutine14 & 0xFFFF
    431            }
   \                     ??CrossCallReturnLabel_19:
   \   00009B   80C8         SJMP      ??afIncomingData_4
    432          
    433            while ( epDesc )
    434            {
    435              uint16 epProfileID = 0xFFFE;  // Invalid Profile ID
    436          
    437              if ( pList->pfnDescCB )
    438              {
    439                uint16 *pID = (uint16 *)(pList->pfnDescCB(
    440                                           AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
    441                if ( pID )
    442                {
    443                  epProfileID = *pID;
    444                  osal_mem_free( pID );
    445                }
    446              }
    447              else if ( epDesc->simpleDesc )
    448              {
    449                epProfileID = epDesc->simpleDesc->AppProfId;
    450              }
    451          
    452              // First part of verification is to make sure that:
    453              // the local Endpoint ProfileID matches the received ProfileID OR
    454              // the message is specifically send to ZDO (this excludes the broadcast endpoint) OR
    455              // if the Wildcard ProfileID is received the message should not be sent to ZDO endpoint
    456              if ( (aff->ProfileID == epProfileID) ||
    457                   ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) ||
    458                   ((epDesc->endPoint != ZDO_EP) && ( aff->ProfileID == ZDO_WILDCARD_PROFILE_ID )) )
    459              {
    460                // Save original endpoint
    461                uint8 endpoint = aff->DstEndPoint;
    462          
    463                // overwrite with descriptor's endpoint
    464                aff->DstEndPoint = epDesc->endPoint;
    465          
    466                afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig,
    467                                   nwkSeqNum, SecurityUse, timestamp, radius );
    468          
    469                // Restore with original endpoint
    470                aff->DstEndPoint = endpoint;
    471              }
    472          
    473              if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
    474              {
    475          #if !defined ( APS_NO_GROUPS )
    476                // Find the next endpoint for this group
    477                grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
    478                if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
    479                  return;   // No endpoint found
    480          
    481                epDesc = afFindEndPointDesc( grpEp );
    482                if ( epDesc == NULL )
    483                  return;   // Endpoint descriptor not found
    484          
    485                pList = afFindEndPointDescList( epDesc->endPoint );
    486          #else
    487                return;
    488          #endif
    489              }
    490              else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
    491              {
    492                pList = pList->nextDesc;
    493                if ( pList )
    494                  epDesc = pList->epDesc;
   \                     ??afIncomingData_6:
   \   00009D   85..82       MOV       DPL,?V0
   \   0000A0   85..83       MOV       DPH,?V1
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   FE           MOV       R6,A
   \   0000A7   A3           INC       DPTR
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   FF           MOV       R7,A
   \                     ??afIncomingData_5:
   \   0000AA   EE           MOV       A,R6
   \   0000AB   4F           ORL       A,R7
   \   0000AC   7003         JNZ       $+5
   \   0000AE   02....       LJMP      ??afIncomingData_1 & 0xFFFF
   \   0000B1   8007         SJMP      ??CrossCallReturnLabel_20
   \                     ??afIncomingData_7:
   \   0000B3                ; Setup parameters for call to function afFindEndPointDescList
   \   0000B3   8A82         MOV       DPL,R2
   \   0000B5   8B83         MOV       DPH,R3
   \   0000B7   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000BA   75..FE       MOV       ?V10,#-0x2
   \   0000BD   75..FF       MOV       ?V11,#-0x1
   \   0000C0   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   0000C3   8E82         MOV       DPL,R6
   \   0000C5   8F83         MOV       DPH,R7
   \   0000C7   601E         JZ        ??afIncomingData_8
   \   0000C9                ; Setup parameters for indirect call
   \   0000C9   E0           MOVX      A,@DPTR
   \   0000CA   FA           MOV       R2,A
   \   0000CB   7902         MOV       R1,#0x2
   \   0000CD   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   0000D0   12....       LCALL     ?CALL_IND
   \   0000D3   EA           MOV       A,R2
   \   0000D4   4B           ORL       A,R3
   \   0000D5   6024         JZ        ??afIncomingData_9
   \   0000D7   8A82         MOV       DPL,R2
   \   0000D9   8B83         MOV       DPH,R3
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   F5..         MOV       ?V10,A
   \   0000DE   A3           INC       DPTR
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   F5..         MOV       ?V11,A
   \   0000E2                ; Setup parameters for call to function osal_mem_free
   \   0000E2   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000E5   8014         SJMP      ??afIncomingData_9
   \                     ??afIncomingData_8:
   \   0000E7   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0000EA   600F         JZ        ??afIncomingData_9
   \   0000EC   8E82         MOV       DPL,R6
   \   0000EE   8F83         MOV       DPH,R7
   \   0000F0   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   0000F3   A3           INC       DPTR
   \   0000F4   E0           MOVX      A,@DPTR
   \   0000F5   F5..         MOV       ?V10,A
   \   0000F7   A3           INC       DPTR
   \   0000F8   E0           MOVX      A,@DPTR
   \   0000F9   F5..         MOV       ?V11,A
   \                     ??afIncomingData_9:
   \   0000FB   85..82       MOV       DPL,?V2
   \   0000FE   85..83       MOV       DPH,?V3
   \   000101   A3           INC       DPTR
   \   000102   A3           INC       DPTR
   \   000103   A3           INC       DPTR
   \   000104   A3           INC       DPTR
   \   000105   A3           INC       DPTR
   \   000106   A3           INC       DPTR
   \   000107   A3           INC       DPTR
   \   000108   A3           INC       DPTR
   \   000109   E0           MOVX      A,@DPTR
   \   00010A   65..         XRL       A,?V10
   \   00010C   7004         JNZ       ??afIncomingData_10
   \   00010E   A3           INC       DPTR
   \   00010F   E0           MOVX      A,@DPTR
   \   000110   65..         XRL       A,?V11
   \                     ??afIncomingData_10:
   \   000112   6025         JZ        ??afIncomingData_11
   \   000114   8E82         MOV       DPL,R6
   \   000116   8F83         MOV       DPH,R7
   \   000118   E0           MOVX      A,@DPTR
   \   000119   85..82       MOV       DPL,?V2
   \   00011C   85..83       MOV       DPH,?V3
   \   00011F   A3           INC       DPTR
   \   000120   A3           INC       DPTR
   \   000121   A3           INC       DPTR
   \   000122   A3           INC       DPTR
   \   000123   A3           INC       DPTR
   \   000124   A3           INC       DPTR
   \   000125   A3           INC       DPTR
   \   000126   A3           INC       DPTR
   \   000127   7007         JNZ       ??afIncomingData_12
   \   000129   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   00012C   707E         JNZ       ??CrossCallReturnLabel_27
   \   00012E   8009         SJMP      ??afIncomingData_11
   \                     ??afIncomingData_12:
   \   000130   E0           MOVX      A,@DPTR
   \   000131   F4           CPL       A
   \   000132   7003         JNZ       ??afIncomingData_13
   \   000134   A3           INC       DPTR
   \   000135   E0           MOVX      A,@DPTR
   \   000136   F4           CPL       A
   \                     ??afIncomingData_13:
   \   000137   7073         JNZ       ??CrossCallReturnLabel_27
   \                     ??afIncomingData_11:
   \   000139   E5..         MOV       A,?V2
   \   00013B   2402         ADD       A,#0x2
   \   00013D   F5..         MOV       ?V10,A
   \   00013F   E4           CLR       A
   \   000140   35..         ADDC      A,?V3
   \   000142   F5..         MOV       ?V11,A
   \   000144   85..82       MOV       DPL,?V10
   \   000147   F583         MOV       DPH,A
   \   000149   E0           MOVX      A,@DPTR
   \   00014A   85..82       MOV       DPL,?XSP + 0
   \   00014D   85..83       MOV       DPH,?XSP + 1
   \   000150   F0           MOVX      @DPTR,A
   \   000151   8E82         MOV       DPL,R6
   \   000153   8F83         MOV       DPH,R7
   \   000155   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000158                ; Setup parameters for call to function afBuildMSGIncoming
   \   000158   7425         MOV       A,#0x25
   \   00015A   12....       LCALL     ?XSTACK_DISP0_8
   \   00015D   E0           MOVX      A,@DPTR
   \   00015E   F5..         MOV       ?V9,A
   \   000160   78..         MOV       R0,#?V9
   \   000162   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000165   78..         MOV       R0,#?V4
   \   000167   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00016A   7425         MOV       A,#0x25
   \   00016C   12....       LCALL     ?XSTACK_DISP0_8
   \   00016F   E0           MOVX      A,@DPTR
   \   000170   F5..         MOV       ?V9,A
   \   000172   78..         MOV       R0,#?V9
   \   000174   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000177   7424         MOV       A,#0x24
   \   000179   12....       LCALL     ?XSTACK_DISP0_8
   \   00017C   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00017F   78..         MOV       R0,#?V14
   \   000181   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000184   740C         MOV       A,#0xc
   \   000186   12....       LCALL     ?XSTACK_DISP0_8
   \   000189   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00018C   740D         MOV       A,#0xd
   \   00018E   12....       LCALL     ?XSTACK_DISP0_8
   \   000191   E0           MOVX      A,@DPTR
   \   000192   F9           MOV       R1,A
   \   000193   EE           MOV       A,R6
   \   000194   FC           MOV       R4,A
   \   000195   EF           MOV       A,R7
   \   000196   FD           MOV       R5,A
   \   000197   AA..         MOV       R2,?V2
   \   000199   AB..         MOV       R3,?V3
   \   00019B   12....       LCALL     `??afBuildMSGIncoming::?relay`; Banked call to: afBuildMSGIncoming
   \   00019E   740C         MOV       A,#0xc
   \   0001A0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001A3   85..82       MOV       DPL,?XSP + 0
   \   0001A6   85..83       MOV       DPH,?XSP + 1
   \   0001A9   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0001AC   85..82       MOV       DPL,?V2
   \   0001AF   85..83       MOV       DPH,?V3
   \   0001B2   E0           MOVX      A,@DPTR
   \   0001B3   540C         ANL       A,#0xc
   \   0001B5   640C         XRL       A,#0xc
   \   0001B7   7011         JNZ       ??afIncomingData_14
   \   0001B9                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   0001B9   A9..         MOV       R1,?V8
   \   0001BB   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0001BE   6026         JZ        ??afIncomingData_1
   \   0001C0                ; Setup parameters for call to function afFindEndPointDesc
   \   0001C0   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   0001C3   6003         JZ        $+5
   \   0001C5   02....       LJMP      ??afIncomingData_7 & 0xFFFF
   \   0001C8   801C         SJMP      ??afIncomingData_1
   \                     ??afIncomingData_14:
   \   0001CA   A3           INC       DPTR
   \   0001CB   A3           INC       DPTR
   \   0001CC   E0           MOVX      A,@DPTR
   \   0001CD   F4           CPL       A
   \   0001CE   7016         JNZ       ??afIncomingData_1
   \   0001D0   85..82       MOV       DPL,?V0
   \   0001D3   85..83       MOV       DPH,?V1
   \   0001D6   E0           MOVX      A,@DPTR
   \   0001D7   F5..         MOV       ?V0,A
   \   0001D9   A3           INC       DPTR
   \   0001DA   E0           MOVX      A,@DPTR
   \   0001DB   F5..         MOV       ?V1,A
   \   0001DD   E5..         MOV       A,?V0
   \   0001DF   45..         ORL       A,?V1
   \   0001E1   6003         JZ        $+5
   \   0001E3   02....       LJMP      ??afIncomingData_6 & 0xFFFF
    495                else
    496                  epDesc = NULL;
    497              }
    498              else
    499                epDesc = NULL;
    500            }
    501          }
   \                     ??afIncomingData_1:
   \   0001E6   7404         MOV       A,#0x4
   \   0001E8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001EB   7F10         MOV       R7,#0x10
   \   0001ED   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000003   8A..         MOV       ?V0,R2
   \   000005   8B..         MOV       ?V1,R3
   \   000007   AE..         MOV       R6,?V0
   \   000009   AF..         MOV       R7,?V1
   \   00000B   EA           MOV       A,R2
   \   00000C   4F           ORL       A,R7
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V10
   \   000004   85..83       MOV       DPH,?V11
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000003   8A..         MOV       ?V0,R2
   \   000005   8B..         MOV       ?V1,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   FA           MOV       R2,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   FB           MOV       R3,A
   \   000009   12....       LCALL     `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   00000C   E9           MOV       A,R1
   \   00000D   F5..         MOV       ?V8,A
   \   00000F   74FE         MOV       A,#-0x2
   \   000011   69           XRL       A,R1
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine43_0
   \   000006                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004                REQUIRE ??Subroutine44_0
   \   000004                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine47_0
   \   000006                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004                REQUIRE ??Subroutine48_0
   \   000004                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine49_0
   \   000001                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F583         MOV       DPH,A
   \   000003   8882         MOV       DPL,R0
   \   000005   22           RET
    502          
    503          /*********************************************************************
    504           * @fn          afBuildMSGIncoming
    505           *
    506           * @brief       Build the message for the app
    507           *
    508           * @param
    509           *
    510           * @return      pointer to next in data buffer
    511           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    512          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
   \                     afBuildMSGIncoming:
    513                           zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    514                           uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius )
    515          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   \   00000D   89..         MOV       ?V6,R1
    516            afIncomingMSGPacket_t *MSGpkt;
    517            const uint8 len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
    518            uint8 *asdu = aff->asdu;
   \   00000F   EA           MOV       A,R2
   \   000010   240E         ADD       A,#0xe
   \   000012   F582         MOV       DPL,A
   \   000014   E4           CLR       A
   \   000015   35..         ADDC      A,?V1
   \   000017   F583         MOV       DPH,A
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V4,A
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F5..         MOV       ?V5,A
    519            MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
   \   000020                ; Setup parameters for call to function osal_msg_allocate
   \   000020   EA           MOV       A,R2
   \   000021   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000024   2427         ADD       A,#0x27
   \   000026   FA           MOV       R2,A
   \   000027   7B00         MOV       R3,#0x0
   \   000029   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00002C   8A..         MOV       ?V8,R2
   \   00002E   8B..         MOV       ?V9,R3
   \   000030   AE..         MOV       R6,?V8
   \   000032   AF..         MOV       R7,?V9
    520          
    521            if ( MSGpkt == NULL )
   \   000034   EA           MOV       A,R2
   \   000035   4F           ORL       A,R7
   \   000036   7003         JNZ       $+5
   \   000038   02....       LJMP      ??CrossCallReturnLabel_2 & 0xFFFF
    522            {
    523              return;
    524            }
    525          
    526            MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
   \   00003B   8A82         MOV       DPL,R2
   \   00003D   8B83         MOV       DPH,R3
   \   00003F   741A         MOV       A,#0x1a
   \   000041   12....       LCALL     ?Subroutine23 & 0xFFFF
    527            MSGpkt->groupId = aff->GroupID;
   \                     ??CrossCallReturnLabel_35:
   \   000044   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000047   8A82         MOV       DPL,R2
   \   000049   8B83         MOV       DPH,R3
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   12....       LCALL     ?Subroutine19 & 0xFFFF
    528            MSGpkt->clusterId = aff->ClusterID;
   \                     ??CrossCallReturnLabel_28:
   \   000050   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000053   12....       LCALL     ??Subroutine39_0 & 0xFFFF
    529            afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
   \                     ??CrossCallReturnLabel_71:
   \   000056                ; Setup parameters for call to function afCopyAddress
   \   000056   7413         MOV       A,#0x13
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00005E   EA           MOV       A,R2
   \   00005F   2406         ADD       A,#0x6
   \   000061   FA           MOV       R2,A
   \   000062   E4           CLR       A
   \   000063   3F           ADDC      A,R7
   \   000064   FB           MOV       R3,A
   \   000065   12....       LCALL     `??afCopyAddress::?relay`; Banked call to: afCopyAddress
    530            MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
   \   000068   85..82       MOV       DPL,?V0
   \   00006B   85..83       MOV       DPH,?V1
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   C0E0         PUSH      A
   \   000074   EE           MOV       A,R6
   \   000075   240F         ADD       A,#0xf
   \   000077   F582         MOV       DPL,A
   \   000079   E4           CLR       A
   \   00007A   3F           ADDC      A,R7
   \   00007B   F583         MOV       DPH,A
   \   00007D   D0E0         POP       A
   \   00007F   F0           MOVX      @DPTR,A
    531            MSGpkt->endPoint = epDesc->endPoint;
   \   000080   85..82       MOV       DPL,?V2
   \   000083   85..83       MOV       DPH,?V3
   \   000086   E0           MOVX      A,@DPTR
   \   000087   C0E0         PUSH      A
   \   000089   EE           MOV       A,R6
   \   00008A   2414         ADD       A,#0x14
   \   00008C   F582         MOV       DPL,A
   \   00008E   E4           CLR       A
   \   00008F   3F           ADDC      A,R7
   \   000090   F583         MOV       DPH,A
   \   000092   D0E0         POP       A
   \   000094   F0           MOVX      @DPTR,A
    532            MSGpkt->wasBroadcast = aff->wasBroadcast;
   \   000095   E5..         MOV       A,?V0
   \   000097   240C         ADD       A,#0xc
   \   000099   F582         MOV       DPL,A
   \   00009B   E4           CLR       A
   \   00009C   35..         ADDC      A,?V1
   \   00009E   F583         MOV       DPH,A
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   C0E0         PUSH      A
   \   0000A3   EE           MOV       A,R6
   \   0000A4   2415         ADD       A,#0x15
   \   0000A6   F582         MOV       DPL,A
   \   0000A8   E4           CLR       A
   \   0000A9   3F           ADDC      A,R7
   \   0000AA   F583         MOV       DPH,A
   \   0000AC   D0E0         POP       A
   \   0000AE   F0           MOVX      @DPTR,A
   \   0000AF   7417         MOV       A,#0x17
   \   0000B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B4   12....       LCALL     ??Subroutine41_0 & 0xFFFF
    533            MSGpkt->LinkQuality = sig->LinkQuality;
   \                     ??CrossCallReturnLabel_80:
   \   0000B7   8882         MOV       DPL,R0
   \   0000B9   F583         MOV       DPH,A
   \   0000BB   E0           MOVX      A,@DPTR
   \   0000BC   C0E0         PUSH      A
   \   0000BE   EE           MOV       A,R6
   \   0000BF   2416         ADD       A,#0x16
   \   0000C1   F582         MOV       DPL,A
   \   0000C3   E4           CLR       A
   \   0000C4   3F           ADDC      A,R7
   \   0000C5   F583         MOV       DPH,A
   \   0000C7   D0E0         POP       A
   \   0000C9   12....       LCALL     ?Subroutine34 & 0xFFFF
    534            MSGpkt->correlation = sig->correlation;
   \                     ??CrossCallReturnLabel_61:
   \   0000CC   A3           INC       DPTR
   \   0000CD   E0           MOVX      A,@DPTR
   \   0000CE   C0E0         PUSH      A
   \   0000D0   EE           MOV       A,R6
   \   0000D1   2417         ADD       A,#0x17
   \   0000D3   F582         MOV       DPL,A
   \   0000D5   E4           CLR       A
   \   0000D6   3F           ADDC      A,R7
   \   0000D7   F583         MOV       DPH,A
   \   0000D9   D0E0         POP       A
   \   0000DB   12....       LCALL     ?Subroutine34 & 0xFFFF
    535            MSGpkt->rssi = sig->rssi;
   \                     ??CrossCallReturnLabel_62:
   \   0000DE   A3           INC       DPTR
   \   0000DF   A3           INC       DPTR
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   C0E0         PUSH      A
   \   0000E3   EE           MOV       A,R6
   \   0000E4   2418         ADD       A,#0x18
   \   0000E6   F582         MOV       DPL,A
   \   0000E8   E4           CLR       A
   \   0000E9   3F           ADDC      A,R7
   \   0000EA   F583         MOV       DPH,A
   \   0000EC   D0E0         POP       A
   \   0000EE   F0           MOVX      @DPTR,A
    536            MSGpkt->SecurityUse = SecurityUse;
   \   0000EF   7419         MOV       A,#0x19
   \   0000F1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F4   E0           MOVX      A,@DPTR
   \   0000F5   C0E0         PUSH      A
   \   0000F7   EE           MOV       A,R6
   \   0000F8   2419         ADD       A,#0x19
   \   0000FA   F582         MOV       DPL,A
   \   0000FC   E4           CLR       A
   \   0000FD   3F           ADDC      A,R7
   \   0000FE   F583         MOV       DPH,A
   \   000100   D0E0         POP       A
   \   000102   F0           MOVX      @DPTR,A
    537            MSGpkt->timestamp = timestamp;
   \   000103   741A         MOV       A,#0x1a
   \   000105   12....       LCALL     ?XSTACK_DISP0_8
   \   000108   12....       LCALL     ?XLOAD_R0123
   \   00010B   EE           MOV       A,R6
   \   00010C   241A         ADD       A,#0x1a
   \   00010E   F582         MOV       DPL,A
   \   000110   E4           CLR       A
   \   000111   3F           ADDC      A,R7
   \   000112   F583         MOV       DPH,A
   \   000114   12....       LCALL     ?XSTORE_R0123
    538            MSGpkt->nwkSeqNum = nwkSeqNum;
   \   000117   EE           MOV       A,R6
   \   000118   241E         ADD       A,#0x1e
   \   00011A   F582         MOV       DPL,A
   \   00011C   E4           CLR       A
   \   00011D   3F           ADDC      A,R7
   \   00011E   F583         MOV       DPH,A
   \   000120   E5..         MOV       A,?V6
   \   000122   F0           MOVX      @DPTR,A
    539            MSGpkt->macSrcAddr = aff->macSrcAddr;
   \   000123   E5..         MOV       A,?V0
   \   000125   2415         ADD       A,#0x15
   \   000127   F582         MOV       DPL,A
   \   000129   E4           CLR       A
   \   00012A   35..         ADDC      A,?V1
   \   00012C   F583         MOV       DPH,A
   \   00012E   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000131   2424         ADD       A,#0x24
   \   000133   F582         MOV       DPL,A
   \   000135   E4           CLR       A
   \   000136   3F           ADDC      A,R7
   \   000137   F583         MOV       DPH,A
   \   000139   12....       LCALL     ?Subroutine19 & 0xFFFF
    540            MSGpkt->macDestAddr = aff->macDestAddr;
   \                     ??CrossCallReturnLabel_29:
   \   00013C   A3           INC       DPTR
   \   00013D   A3           INC       DPTR
   \   00013E   A3           INC       DPTR
   \   00013F   A3           INC       DPTR
   \   000140   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000143   2412         ADD       A,#0x12
   \   000145   12....       LCALL     ?Subroutine21 & 0xFFFF
    541            MSGpkt->srcAddr.panId = SrcPanId;
   \                     ??CrossCallReturnLabel_77:
   \   000148   7415         MOV       A,#0x15
   \   00014A   12....       LCALL     ?XSTACK_DISP0_8
   \   00014D   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000150   2410         ADD       A,#0x10
   \   000152   12....       LCALL     ?Subroutine21 & 0xFFFF
    542            MSGpkt->cmd.TransSeqNumber = 0;
   \                     ??CrossCallReturnLabel_78:
   \   000155   EE           MOV       A,R6
   \   000156   241F         ADD       A,#0x1f
   \   000158   F582         MOV       DPL,A
   \   00015A   E4           CLR       A
   \   00015B   3F           ADDC      A,R7
   \   00015C   F583         MOV       DPH,A
   \   00015E   E4           CLR       A
   \   00015F   F0           MOVX      @DPTR,A
    543            MSGpkt->cmd.DataLength = aff->asduLength;
   \   000160   EE           MOV       A,R6
   \   000161   2420         ADD       A,#0x20
   \   000163   F8           MOV       R0,A
   \   000164   E4           CLR       A
   \   000165   3F           ADDC      A,R7
   \   000166   F9           MOV       R1,A
   \   000167   E5..         MOV       A,?V0
   \   000169   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00016C   8882         MOV       DPL,R0
   \   00016E   8983         MOV       DPH,R1
   \   000170   F0           MOVX      @DPTR,A
   \   000171   A3           INC       DPTR
   \   000172   E4           CLR       A
   \   000173   F0           MOVX      @DPTR,A
    544            MSGpkt->radius = radius;
   \   000174   741E         MOV       A,#0x1e
   \   000176   12....       LCALL     ?XSTACK_DISP0_8
   \   000179   E0           MOVX      A,@DPTR
   \   00017A   C0E0         PUSH      A
   \   00017C   EE           MOV       A,R6
   \   00017D   2426         ADD       A,#0x26
   \   00017F   F582         MOV       DPL,A
   \   000181   E4           CLR       A
   \   000182   3F           ADDC      A,R7
   \   000183   F583         MOV       DPH,A
   \   000185   D0E0         POP       A
   \   000187   12....       LCALL     ?Subroutine34 & 0xFFFF
    545          
    546            if ( MSGpkt->cmd.DataLength )
   \                     ??CrossCallReturnLabel_63:
   \   00018A   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00018D   6033         JZ        ??afBuildMSGIncoming_0
    547            {
    548              MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   \   00018F   EE           MOV       A,R6
   \   000190   2427         ADD       A,#0x27
   \   000192   FA           MOV       R2,A
   \   000193   E4           CLR       A
   \   000194   3F           ADDC      A,R7
   \   000195   FB           MOV       R3,A
   \   000196   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000199   EA           MOV       A,R2
   \   00019A   F0           MOVX      @DPTR,A
   \   00019B   A3           INC       DPTR
   \   00019C   EB           MOV       A,R3
   \   00019D   F0           MOVX      @DPTR,A
    549              osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
   \   00019E                ; Setup parameters for call to function osal_memcpy
   \   00019E   85....       MOV       ?V8,?V4
   \   0001A1   85....       MOV       ?V9,?V5
   \   0001A4   75..00       MOV       ?V10,#0x0
   \   0001A7   78..         MOV       R0,#?V8
   \   0001A9   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001AC   EE           MOV       A,R6
   \   0001AD   2420         ADD       A,#0x20
   \   0001AF   F582         MOV       DPL,A
   \   0001B1   E4           CLR       A
   \   0001B2   3F           ADDC      A,R7
   \   0001B3   F583         MOV       DPH,A
   \   0001B5   12....       LCALL     ?Subroutine12 & 0xFFFF
    550            }
   \                     ??CrossCallReturnLabel_14:
   \   0001B8   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001BB   7403         MOV       A,#0x3
   \   0001BD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001C0   8007         SJMP      ??afBuildMSGIncoming_1
    551            else
    552            {
    553              MSGpkt->cmd.Data = NULL;
   \                     ??afBuildMSGIncoming_0:
   \   0001C2   12....       LCALL     ?Subroutine31 & 0xFFFF
    554            }
   \                     ??CrossCallReturnLabel_56:
   \   0001C5   E4           CLR       A
   \   0001C6   F0           MOVX      @DPTR,A
   \   0001C7   A3           INC       DPTR
   \   0001C8   F0           MOVX      @DPTR,A
    555          
    556          #if defined ( MT_AF_CB_FUNC )
    557            // If ZDO or SAPI have registered for this endpoint, dont intercept it here
    558            if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
    559            {
    560              MT_AfIncomingMsg( (void *)MSGpkt );
    561              // Release the memory.
    562              osal_msg_deallocate( (void *)MSGpkt );
    563            }
    564            else
    565          #endif
    566            {
    567              // Send message through task message.
    568              osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
   \                     ??afBuildMSGIncoming_1:
   \   0001C9                ; Setup parameters for call to function osal_msg_send
   \   0001C9   EE           MOV       A,R6
   \   0001CA   FA           MOV       R2,A
   \   0001CB   EF           MOV       A,R7
   \   0001CC   FB           MOV       R3,A
   \   0001CD   85..82       MOV       DPL,?V2
   \   0001D0   85..83       MOV       DPH,?V3
   \   0001D3   12....       LCALL     ?Subroutine5 & 0xFFFF
    569            }
    570          }
   \                     ??CrossCallReturnLabel_2:
   \   0001D6   7F0B         MOV       R7,#0xb
   \   0001D8   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   EE           MOV       A,R6
   \   000001   2422         ADD       A,#0x22
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   2410         ADD       A,#0x10
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   35..         ADDC      A,?V1
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine39_0
   \   000006                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   85..82       MOV       DPL,?V0
   \   000008   85..83       MOV       DPH,?V1
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine40_0
   \   000003                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine41_0
   \   000001                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000003   F9           MOV       R1,A
   \   000004   EE           MOV       A,R6
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET
    571          
    572          /*********************************************************************
    573           * @fn      AF_DataRequest
    574           *
    575           * @brief   Common functionality for invoking APSDE_DataReq() for both
    576           *          SendMulti and MSG-Send.
    577           *
    578           * input parameters
    579           *
    580           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    581           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    582           * @param   cID - A valid cluster ID as specified by the Profile.
    583           * @param   len - Number of bytes of data pointed to by next param.
    584           * @param  *buf - A pointer to the data bytes to send.
    585           * @param  *transID - A pointer to a byte which can be modified and which will
    586           *                    be used as the transaction sequence number of the msg.
    587           * @param   options - Valid bit mask of Tx options.
    588           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    589           *
    590           * output parameters
    591           *
    592           * @param  *transID - Incremented by one if the return value is success.
    593           *
    594           * @return  afStatus_t - See previous definition of afStatus_... types.
    595           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    596          uint8 AF_DataRequestDiscoverRoute = DISC_ROUTE_NETWORK;
   \                     AF_DataRequestDiscoverRoute:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    597          afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequest:
    598                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    599                                     uint8 options, uint8 radius )
    600          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 33
   \   000005   74DF         MOV       A,#-0x21
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
   \   000012   89..         MOV       ?V2,R1
    601            pDescCB pfnDescCB;
    602            ZStatus_t stat;
    603            APSDE_DataReq_t req;
    604            afDataReqMTU_t mtu;
    605            epList_t *pList;
    606          
    607            // Verify source end point
    608            if ( srcEP == NULL )
   \   000014   EC           MOV       A,R4
   \   000015   4D           ORL       A,R5
   \   000016   7003         JNZ       $+5
   \   000018   02....       LJMP      ??AF_DataRequest_0 & 0xFFFF
    609            {
    610              return afStatus_INVALID_PARAMETER;
    611            }
    612          
    613          #if !defined( REFLECTOR )
    614            if ( dstAddr->addrMode == afAddrNotPresent )
    615            {
    616              return afStatus_INVALID_PARAMETER;
    617            }
    618          #endif
    619            
    620            // copy the addressing mode, to get the length of the packet
    621            mtu.aps.addressingMode = dstAddr->addrMode; 
   \   00001B   8A82         MOV       DPL,R2
   \   00001D   8B83         MOV       DPH,R3
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   C0E0         PUSH      A
   \   00002A   7402         MOV       A,#0x2
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   D0E0         POP       A
   \   000031   F0           MOVX      @DPTR,A
    622          
    623            // Check if route is available before sending data
    624            if ( options & AF_LIMIT_CONCENTRATOR  )
   \   000032   E9           MOV       A,R1
   \   000033   A2E3         MOV       C,0xE0 /* A   */.3
   \   000035   503A         JNC       ??AF_DataRequest_1
    625            {
    626              if ( dstAddr->addrMode != afAddr16Bit )
   \   000037   8A82         MOV       DPL,R2
   \   000039   8B83         MOV       DPH,R3
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   E0           MOVX      A,@DPTR
   \   000044   6402         XRL       A,#0x2
   \   000046   6003         JZ        $+5
   \   000048   02....       LJMP      ??AF_DataRequest_0 & 0xFFFF
    627              {
    628                return ( afStatus_INVALID_PARAMETER );
    629              }
    630          
    631              // First, make sure the destination is not its self, then check for an existing route.
    632              if ( (dstAddr->addr.shortAddr != NLME_GetShortAddr())
    633                  && (RTG_CheckRtStatus( dstAddr->addr.shortAddr, RT_ACTIVE, (MTO_ROUTE | NO_ROUTE_CACHE) ) != RTG_SUCCESS) )
   \   00004B                ; Setup parameters for call to function NLME_GetShortAddr
   \   00004B   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00004E   8E82         MOV       DPL,R6
   \   000050   8F83         MOV       DPH,R7
   \   000052   E0           MOVX      A,@DPTR
   \   000053   68           XRL       A,R0
   \   000054   7003         JNZ       ??AF_DataRequest_2
   \   000056   A3           INC       DPTR
   \   000057   E0           MOVX      A,@DPTR
   \   000058   69           XRL       A,R1
   \                     ??AF_DataRequest_2:
   \   000059   6016         JZ        ??AF_DataRequest_1
   \   00005B                ; Setup parameters for call to function RTG_CheckRtStatus
   \   00005B   7C03         MOV       R4,#0x3
   \   00005D   7901         MOV       R1,#0x1
   \   00005F   8E82         MOV       DPL,R6
   \   000061   8F83         MOV       DPH,R7
   \   000063   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000066   12....       LCALL     `??RTG_CheckRtStatus::?relay`; Banked call to: RTG_CheckRtStatus
   \   000069   E9           MOV       A,R1
   \   00006A   6005         JZ        ??AF_DataRequest_1
    634              {
    635                // A valid route to a concentrator wasn't found
    636                return ( afStatus_NO_ROUTE );
   \   00006C   79CD         MOV       R1,#-0x33
   \   00006E   02....       LJMP      ??AF_DataRequest_3 & 0xFFFF
    637              }
    638            }
    639          
    640            // Validate broadcasting
    641            if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
    642                 ( dstAddr->addrMode == afAddrBroadcast )    )
   \                     ??AF_DataRequest_1:
   \   000071   8E82         MOV       DPL,R6
   \   000073   8F83         MOV       DPH,R7
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   A3           INC       DPTR
   \   00007A   A3           INC       DPTR
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   6402         XRL       A,#0x2
   \   000080   6011         JZ        ??AF_DataRequest_4
   \   000082   8E82         MOV       DPL,R6
   \   000084   8F83         MOV       DPH,R7
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   A3           INC       DPTR
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   640F         XRL       A,#0xf
   \   000091   704B         JNZ       ??AF_DataRequest_5
    643            {
    644              // Check for valid broadcast values
    645              if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
   \                     ??AF_DataRequest_4:
   \   000093                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000093   8E82         MOV       DPL,R6
   \   000095   8F83         MOV       DPH,R7
   \   000097   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00009A   12....       LCALL     `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   00009D   E9           MOV       A,R1
   \   00009E   8E82         MOV       DPL,R6
   \   0000A0   8F83         MOV       DPH,R7
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   602B         JZ        ??AF_DataRequest_6
    646              {
    647                // Force mode to broadcast
    648                dstAddr->addrMode = afAddrBroadcast;
   \   0000AC   740F         MOV       A,#0xf
   \   0000AE   F0           MOVX      @DPTR,A
    649              }
    650              else
    651              {
    652                // Address is not a valid broadcast type
    653                if ( dstAddr->addrMode == afAddrBroadcast )
    654                {
    655                  return afStatus_INVALID_PARAMETER;
    656                }
    657              }
    658            }
    659            else if ( dstAddr->addrMode != afAddr64Bit &&
    660                      dstAddr->addrMode != afAddrGroup &&
    661                      dstAddr->addrMode != afAddrNotPresent )
    662            {
    663              return afStatus_INVALID_PARAMETER;
    664            }
    665          
    666            // Set destination address
    667            req.dstAddr.addrMode = dstAddr->addrMode;
   \                     ??AF_DataRequest_7:
   \   0000AF   EE           MOV       A,R6
   \   0000B0   2408         ADD       A,#0x8
   \   0000B2   F8           MOV       R0,A
   \   0000B3   E4           CLR       A
   \   0000B4   3F           ADDC      A,R7
   \   0000B5   F9           MOV       R1,A
   \   0000B6   8882         MOV       DPL,R0
   \   0000B8   F583         MOV       DPH,A
   \   0000BA   E0           MOVX      A,@DPTR
   \   0000BB   C0E0         PUSH      A
   \   0000BD   740B         MOV       A,#0xb
   \   0000BF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C2   D0E0         POP       A
   \   0000C4   12....       LCALL     ?Subroutine27 & 0xFFFF
    668            if ( dstAddr->addrMode == afAddr64Bit )
   \                     ??CrossCallReturnLabel_45:
   \   0000C7   704B         JNZ       ??AF_DataRequest_8
    669            {
    670              osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
   \   0000C9                ; Setup parameters for call to function sAddrExtCpy
   \   0000C9   EE           MOV       A,R6
   \   0000CA   FC           MOV       R4,A
   \   0000CB   EF           MOV       A,R7
   \   0000CC   FD           MOV       R5,A
   \   0000CD   7403         MOV       A,#0x3
   \   0000CF   12....       LCALL     ?XSTACK_DISP101_8
   \   0000D2   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000D5   804C         SJMP      ??CrossCallReturnLabel_72
    671            }
   \                     ??AF_DataRequest_6:
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   640F         XRL       A,#0xf
   \   0000DA   70D3         JNZ       ??AF_DataRequest_7
   \   0000DC   8031         SJMP      ??AF_DataRequest_0
   \                     ??AF_DataRequest_5:
   \   0000DE   8E82         MOV       DPL,R6
   \   0000E0   8F83         MOV       DPH,R7
   \   0000E2   A3           INC       DPTR
   \   0000E3   A3           INC       DPTR
   \   0000E4   A3           INC       DPTR
   \   0000E5   A3           INC       DPTR
   \   0000E6   A3           INC       DPTR
   \   0000E7   A3           INC       DPTR
   \   0000E8   A3           INC       DPTR
   \   0000E9   A3           INC       DPTR
   \   0000EA   E0           MOVX      A,@DPTR
   \   0000EB   6403         XRL       A,#0x3
   \   0000ED   60C0         JZ        ??AF_DataRequest_7
   \   0000EF   8E82         MOV       DPL,R6
   \   0000F1   8F83         MOV       DPH,R7
   \   0000F3   A3           INC       DPTR
   \   0000F4   A3           INC       DPTR
   \   0000F5   A3           INC       DPTR
   \   0000F6   A3           INC       DPTR
   \   0000F7   A3           INC       DPTR
   \   0000F8   A3           INC       DPTR
   \   0000F9   A3           INC       DPTR
   \   0000FA   A3           INC       DPTR
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   6401         XRL       A,#0x1
   \   0000FE   60AF         JZ        ??AF_DataRequest_7
   \   000100   8E82         MOV       DPL,R6
   \   000102   8F83         MOV       DPH,R7
   \   000104   A3           INC       DPTR
   \   000105   A3           INC       DPTR
   \   000106   A3           INC       DPTR
   \   000107   A3           INC       DPTR
   \   000108   A3           INC       DPTR
   \   000109   A3           INC       DPTR
   \   00010A   A3           INC       DPTR
   \   00010B   A3           INC       DPTR
   \   00010C   E0           MOVX      A,@DPTR
   \   00010D   60A0         JZ        ??AF_DataRequest_7
   \                     ??AF_DataRequest_0:
   \   00010F   7902         MOV       R1,#0x2
   \   000111   02....       LJMP      ??AF_DataRequest_3 & 0xFFFF
    672            else
    673            {
    674              req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
   \                     ??AF_DataRequest_8:
   \   000114   8E82         MOV       DPL,R6
   \   000116   8F83         MOV       DPH,R7
   \   000118   12....       LCALL     ??Subroutine41_0 & 0xFFFF
    675            }
   \                     ??CrossCallReturnLabel_81:
   \   00011B   7403         MOV       A,#0x3
   \   00011D   12....       LCALL     ?XSTACK_DISP0_8
   \   000120   12....       LCALL     ??Subroutine39_0 & 0xFFFF
    676          
    677            // This option is to use Wildcard ProfileID in outgoing packets
    678            if ( options & AF_WILDCARD_PROFILEID )
   \                     ??CrossCallReturnLabel_72:
   \   000123   E5..         MOV       A,?V2
   \   000125   A2E1         MOV       C,0xE0 /* A   */.1
   \   000127   7412         MOV       A,#0x12
   \   000129   5009         JNC       ??AF_DataRequest_9
    679            {
    680              req.profileID = ZDO_WILDCARD_PROFILE_ID;
   \   00012B   12....       LCALL     ?XSTACK_DISP0_8
   \   00012E   74FF         MOV       A,#-0x1
   \   000130   F0           MOVX      @DPTR,A
   \   000131   A3           INC       DPTR
   \   000132   806B         SJMP      ??AF_DataRequest_10
    681            }
    682            else
    683            {
    684              req.profileID = ZDO_PROFILE_ID;
   \                     ??AF_DataRequest_9:
   \   000134   12....       LCALL     ?XSTACK_DISP0_8
   \   000137   E4           CLR       A
   \   000138   F0           MOVX      @DPTR,A
   \   000139   A3           INC       DPTR
   \   00013A   F0           MOVX      @DPTR,A
    685          
    686              if ( (pfnDescCB = afGetDescCB( srcEP )) )
   \   00013B   90....       MOV       DPTR,#epList
   \                     ??AF_DataRequest_11:
   \   00013E   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000141   6048         JZ        ??AF_DataRequest_12
   \   000143   8882         MOV       DPL,R0
   \   000145   8983         MOV       DPH,R1
   \   000147   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00014A   E5..         MOV       A,?V0
   \   00014C   6A           XRL       A,R2
   \   00014D   7003         JNZ       ??AF_DataRequest_13
   \   00014F   E5..         MOV       A,?V1
   \   000151   6B           XRL       A,R3
   \                     ??AF_DataRequest_13:
   \   000152   8882         MOV       DPL,R0
   \   000154   8983         MOV       DPH,R1
   \   000156   70E6         JNZ       ??AF_DataRequest_11
   \   000158   A3           INC       DPTR
   \   000159   A3           INC       DPTR
   \   00015A   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   00015D   FD           MOV       R5,A
   \   00015E   E8           MOV       A,R0
   \   00015F   4D           ORL       A,R5
   \   000160   6029         JZ        ??AF_DataRequest_12
    687              {
    688                uint16 *pID = (uint16 *)(pfnDescCB(
    689                                             AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
   \   000162                ; Setup parameters for indirect call
   \   000162   85..82       MOV       DPL,?V0
   \   000165   85..83       MOV       DPH,?V1
   \   000168   E0           MOVX      A,@DPTR
   \   000169   FA           MOV       R2,A
   \   00016A   7902         MOV       R1,#0x2
   \   00016C   8882         MOV       DPL,R0
   \   00016E   8D83         MOV       DPH,R5
   \   000170   12....       LCALL     ?CALL_IND
    690                if ( pID )
   \   000173   EA           MOV       A,R2
   \   000174   4B           ORL       A,R3
   \   000175   6029         JZ        ??AF_DataRequest_14
    691                {
    692                  req.profileID = *pID;
   \   000177   8A82         MOV       DPL,R2
   \   000179   8B83         MOV       DPH,R3
   \   00017B   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00017E   7412         MOV       A,#0x12
   \   000180   12....       LCALL     ?XSTACK_DISP0_8
   \   000183   12....       LCALL     ??Subroutine39_0 & 0xFFFF
    693                  osal_mem_free( pID );
   \                     ??CrossCallReturnLabel_73:
   \   000186                ; Setup parameters for call to function osal_mem_free
   \   000186   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000189   8015         SJMP      ??AF_DataRequest_14
    694                }
    695              }
    696              else if ( srcEP->simpleDesc )
   \                     ??AF_DataRequest_12:
   \   00018B   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   00018E   6010         JZ        ??AF_DataRequest_14
    697              {
    698                req.profileID = srcEP->simpleDesc->AppProfId;
   \   000190   12....       LCALL     ?Subroutine11 & 0xFFFF
    699              }
    700            }
   \                     ??CrossCallReturnLabel_116:
   \   000193   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000196   7412         MOV       A,#0x12
   \   000198   12....       LCALL     ?XSTACK_DISP0_8
   \   00019B   E8           MOV       A,R0
   \   00019C   F0           MOVX      @DPTR,A
   \   00019D   A3           INC       DPTR
   \   00019E   E9           MOV       A,R1
   \                     ??AF_DataRequest_10:
   \   00019F   F0           MOVX      @DPTR,A
    701          
    702            req.txOptions = 0;
   \                     ??AF_DataRequest_14:
   \   0001A0   7418         MOV       A,#0x18
   \   0001A2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A5   E4           CLR       A
   \   0001A6   F0           MOVX      @DPTR,A
   \   0001A7   A3           INC       DPTR
   \   0001A8   F0           MOVX      @DPTR,A
    703          
    704            if ( ( options & AF_ACK_REQUEST              ) &&
    705                 ( req.dstAddr.addrMode != AddrBroadcast ) &&
    706                 ( req.dstAddr.addrMode != AddrGroup     )    )
   \   0001A9   E5..         MOV       A,?V2
   \   0001AB   A2E4         MOV       C,0xE0 /* A   */.4
   \   0001AD   501A         JNC       ??AF_DataRequest_15
   \   0001AF   740B         MOV       A,#0xb
   \   0001B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B4   E0           MOVX      A,@DPTR
   \   0001B5   640F         XRL       A,#0xf
   \   0001B7   6010         JZ        ??AF_DataRequest_15
   \   0001B9   E0           MOVX      A,@DPTR
   \   0001BA   6401         XRL       A,#0x1
   \   0001BC   600B         JZ        ??AF_DataRequest_15
    707            {
    708              req.txOptions |=  APS_TX_OPTIONS_ACK;
   \   0001BE   7418         MOV       A,#0x18
   \   0001C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C3   7404         MOV       A,#0x4
   \   0001C5   F0           MOVX      @DPTR,A
   \   0001C6   A3           INC       DPTR
   \   0001C7   E4           CLR       A
   \   0001C8   F0           MOVX      @DPTR,A
    709            }
    710          
    711            if ( options & AF_SKIP_ROUTING )
   \                     ??AF_DataRequest_15:
   \   0001C9   E5..         MOV       A,?V2
   \   0001CB   A2E7         MOV       C,0xE0 /* A   */.7
   \   0001CD   5009         JNC       ??AF_DataRequest_16
    712            {
    713              req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
   \   0001CF   7418         MOV       A,#0x18
   \   0001D1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D4   E0           MOVX      A,@DPTR
   \   0001D5   4410         ORL       A,#0x10
   \   0001D7   F0           MOVX      @DPTR,A
    714            }
    715          
    716            if ( options & AF_EN_SECURITY )
   \                     ??AF_DataRequest_16:
   \   0001D8   E5..         MOV       A,?V2
   \   0001DA   A2E6         MOV       C,0xE0 /* A   */.6
   \   0001DC   5012         JNC       ??AF_DataRequest_17
    717            {
    718              req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
   \   0001DE   7418         MOV       A,#0x18
   \   0001E0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E3   E0           MOVX      A,@DPTR
   \   0001E4   4401         ORL       A,#0x1
   \   0001E6   F0           MOVX      @DPTR,A
    719              mtu.aps.secure = TRUE;
   \   0001E7   7401         MOV       A,#0x1
   \   0001E9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EC   7401         MOV       A,#0x1
   \   0001EE   8006         SJMP      ??AF_DataRequest_18
    720            }
    721            else
    722            {
    723              mtu.aps.secure = FALSE;
   \                     ??AF_DataRequest_17:
   \   0001F0   7401         MOV       A,#0x1
   \   0001F2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F5   E4           CLR       A
   \                     ??AF_DataRequest_18:
   \   0001F6   F0           MOVX      @DPTR,A
    724            }
    725          
    726            if ( options & AF_PREPROCESS )
   \   0001F7   E5..         MOV       A,?V2
   \   0001F9   A2E2         MOV       C,0xE0 /* A   */.2
   \   0001FB   5009         JNC       ??AF_DataRequest_19
    727            {
    728              req.txOptions |=  APS_TX_OPTIONS_PREPROCESS;
   \   0001FD   7418         MOV       A,#0x18
   \   0001FF   12....       LCALL     ?XSTACK_DISP0_8
   \   000202   E0           MOVX      A,@DPTR
   \   000203   4440         ORL       A,#0x40
   \   000205   F0           MOVX      @DPTR,A
    729            }
    730          
    731            mtu.kvp = FALSE;
   \                     ??AF_DataRequest_19:
   \   000206   85..82       MOV       DPL,?XSP + 0
   \   000209   85..83       MOV       DPH,?XSP + 1
   \   00020C   E4           CLR       A
   \   00020D   F0           MOVX      @DPTR,A
    732          
    733            if ( options & AF_SUPRESS_ROUTE_DISC_NETWORK )
   \   00020E   E5..         MOV       A,?V2
   \   000210   A2E5         MOV       C,0xE0 /* A   */.5
   \   000212   5009         JNC       ??AF_DataRequest_20
    734            {
    735              req.discoverRoute = DISC_ROUTE_INITIATE;
   \   000214   741B         MOV       A,#0x1b
   \   000216   12....       LCALL     ?XSTACK_DISP0_8
   \   000219   7404         MOV       A,#0x4
   \   00021B   800D         SJMP      ??AF_DataRequest_21
    736            }
    737            else
    738            {
    739              req.discoverRoute = AF_DataRequestDiscoverRoute;
   \                     ??AF_DataRequest_20:
   \   00021D   90....       MOV       DPTR,#AF_DataRequestDiscoverRoute
   \   000220   E0           MOVX      A,@DPTR
   \   000221   C0E0         PUSH      A
   \   000223   741B         MOV       A,#0x1b
   \   000225   12....       LCALL     ?XSTACK_DISP0_8
   \   000228   D0E0         POP       A
   \                     ??AF_DataRequest_21:
   \   00022A   F0           MOVX      @DPTR,A
   \   00022B   7439         MOV       A,#0x39
   \   00022D   12....       LCALL     ?XSTACK_DISP0_8
   \   000230   E0           MOVX      A,@DPTR
   \   000231   F5..         MOV       ?V6,A
   \   000233   A3           INC       DPTR
   \   000234   E0           MOVX      A,@DPTR
   \   000235   F5..         MOV       ?V7,A
    740            }
    741          
    742            req.transID       = *transID;
   \   000237   85..82       MOV       DPL,?V6
   \   00023A   F583         MOV       DPH,A
   \   00023C   E0           MOVX      A,@DPTR
   \   00023D   C0E0         PUSH      A
   \   00023F   741A         MOV       A,#0x1a
   \   000241   12....       LCALL     ?XSTACK_DISP0_8
   \   000244   D0E0         POP       A
   \   000246   12....       LCALL     ?Subroutine23 & 0xFFFF
    743            req.srcEP         = srcEP->endPoint;
   \                     ??CrossCallReturnLabel_36:
   \   000249   E0           MOVX      A,@DPTR
   \   00024A   C0E0         PUSH      A
   \   00024C   740C         MOV       A,#0xc
   \   00024E   12....       LCALL     ?XSTACK_DISP0_8
   \   000251   D0E0         POP       A
   \   000253   12....       LCALL     ?Subroutine22 & 0xFFFF
    744            req.dstEP         = dstAddr->endPoint;
   \                     ??CrossCallReturnLabel_32:
   \   000256   A3           INC       DPTR
   \   000257   A3           INC       DPTR
   \   000258   A3           INC       DPTR
   \   000259   E0           MOVX      A,@DPTR
   \   00025A   C0E0         PUSH      A
   \   00025C   740D         MOV       A,#0xd
   \   00025E   12....       LCALL     ?XSTACK_DISP0_8
   \   000261   D0E0         POP       A
   \   000263   F0           MOVX      @DPTR,A
    745            req.clusterID     = cID;
   \   000264   7433         MOV       A,#0x33
   \   000266   12....       LCALL     ?XSTACK_DISP0_8
   \   000269   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00026C   7410         MOV       A,#0x10
   \   00026E   12....       LCALL     ?XSTACK_DISP0_8
   \   000271   12....       LCALL     ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000274   7435         MOV       A,#0x35
   \   000276   12....       LCALL     ?XSTACK_DISP0_8
   \   000279   E0           MOVX      A,@DPTR
   \   00027A   F5..         MOV       ?V4,A
   \   00027C   A3           INC       DPTR
   \   00027D   E0           MOVX      A,@DPTR
   \   00027E   F5..         MOV       ?V5,A
    746            req.asduLen       = len;
   \   000280   7414         MOV       A,#0x14
   \   000282   12....       LCALL     ?XSTACK_DISP0_8
   \   000285   E5..         MOV       A,?V4
   \   000287   F0           MOVX      @DPTR,A
   \   000288   A3           INC       DPTR
   \   000289   E5..         MOV       A,?V5
   \   00028B   F0           MOVX      @DPTR,A
    747            req.asdu          = buf;
   \   00028C   7437         MOV       A,#0x37
   \   00028E   12....       LCALL     ?XSTACK_DISP0_8
   \   000291   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000294   7416         MOV       A,#0x16
   \   000296   12....       LCALL     ?XSTACK_DISP0_8
   \   000299   12....       LCALL     ??Subroutine39_0 & 0xFFFF
    748            req.radiusCounter = radius;
   \                     ??CrossCallReturnLabel_75:
   \   00029C   743B         MOV       A,#0x3b
   \   00029E   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A1   E0           MOVX      A,@DPTR
   \   0002A2   C0E0         PUSH      A
   \   0002A4   741C         MOV       A,#0x1c
   \   0002A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A9   D0E0         POP       A
   \   0002AB   12....       LCALL     ?Subroutine22 & 0xFFFF
    749          #if defined ( INTER_PAN )
    750            req.dstPanId      = dstAddr->panId;
   \                     ??CrossCallReturnLabel_33:
   \   0002AE   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0002B1   740E         MOV       A,#0xe
   \   0002B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0002B6   12....       LCALL     ??Subroutine39_0 & 0xFFFF
    751          #endif // INTER_PAN
    752          
    753            // Look if there is a Callback function registered for this endpoint
    754            // The callback is used to control the AF Transaction ID used when sending messages
    755            pList = afFindEndPointDescList( srcEP->endPoint );
   \                     ??CrossCallReturnLabel_76:
   \   0002B9                ; Setup parameters for call to function afFindEndPointDescList
   \   0002B9   85..82       MOV       DPL,?V0
   \   0002BC   85..83       MOV       DPH,?V1
   \   0002BF   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0002C2   8A..         MOV       ?V8,R2
   \   0002C4   8B..         MOV       ?V9,R3
   \   0002C6   AC..         MOV       R4,?V8
   \   0002C8   AD..         MOV       R5,?V9
    756          
    757            if ( ( pList != NULL ) && ( pList->pfnApplCB != NULL ) )
   \   0002CA   EA           MOV       A,R2
   \   0002CB   4D           ORL       A,R5
   \   0002CC   6022         JZ        ??AF_DataRequest_22
   \   0002CE   8A82         MOV       DPL,R2
   \   0002D0   8B83         MOV       DPH,R3
   \   0002D2   A3           INC       DPTR
   \   0002D3   A3           INC       DPTR
   \   0002D4   A3           INC       DPTR
   \   0002D5   A3           INC       DPTR
   \   0002D6   A3           INC       DPTR
   \   0002D7   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   0002DA   6014         JZ        ??AF_DataRequest_22
    758            {
    759              pList->pfnApplCB( &req );
   \   0002DC                ; Setup parameters for indirect call
   \   0002DC   7403         MOV       A,#0x3
   \   0002DE   12....       LCALL     ?XSTACK_DISP101_8
   \   0002E1   8C82         MOV       DPL,R4
   \   0002E3   8D83         MOV       DPH,R5
   \   0002E5   A3           INC       DPTR
   \   0002E6   A3           INC       DPTR
   \   0002E7   A3           INC       DPTR
   \   0002E8   A3           INC       DPTR
   \   0002E9   A3           INC       DPTR
   \   0002EA   12....       LCALL     ??Subroutine47_0 & 0xFFFF
    760            }
   \                     ??CrossCallReturnLabel_114:
   \   0002ED   12....       LCALL     ?CALL_IND
    761          
    762          #if defined ( INTER_PAN )
    763            if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
   \                     ??AF_DataRequest_22:
   \   0002F0                ; Setup parameters for call to function StubAPS_InterPan
   \   0002F0   8E82         MOV       DPL,R6
   \   0002F2   8F83         MOV       DPH,R7
   \   0002F4   A3           INC       DPTR
   \   0002F5   A3           INC       DPTR
   \   0002F6   A3           INC       DPTR
   \   0002F7   A3           INC       DPTR
   \   0002F8   A3           INC       DPTR
   \   0002F9   A3           INC       DPTR
   \   0002FA   A3           INC       DPTR
   \   0002FB   A3           INC       DPTR
   \   0002FC   A3           INC       DPTR
   \   0002FD   E0           MOVX      A,@DPTR
   \   0002FE   F9           MOV       R1,A
   \   0002FF   8E82         MOV       DPL,R6
   \   000301   8F83         MOV       DPH,R7
   \   000303   A3           INC       DPTR
   \   000304   A3           INC       DPTR
   \   000305   A3           INC       DPTR
   \   000306   A3           INC       DPTR
   \   000307   A3           INC       DPTR
   \   000308   A3           INC       DPTR
   \   000309   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00030C   12....       LCALL     `??StubAPS_InterPan::?relay`; Banked call to: StubAPS_InterPan
   \   00030F   E9           MOV       A,R1
   \   000310   6016         JZ        ??AF_DataRequest_23
    764            {
    765              if ( len > INTERP_DataReqMTU() )
   \   000312                ; Setup parameters for call to function INTERP_DataReqMTU
   \   000312   12....       LCALL     `??INTERP_DataReqMTU::?relay`; Banked call to: INTERP_DataReqMTU
   \   000315   E9           MOV       A,R1
   \   000316   C3           CLR       C
   \   000317   95..         SUBB      A,?V4
   \   000319   E4           CLR       A
   \   00031A   95..         SUBB      A,?V5
   \   00031C   402F         JC        ??AF_DataRequest_24
    766              {
    767                stat = afStatus_INVALID_PARAMETER;
    768              }
    769              else
    770              {
    771                stat = INTERP_DataReq( &req );
   \   00031E                ; Setup parameters for call to function INTERP_DataReq
   \   00031E   7403         MOV       A,#0x3
   \   000320   12....       LCALL     ?XSTACK_DISP101_8
   \   000323   12....       LCALL     `??INTERP_DataReq::?relay`; Banked call to: INTERP_DataReq
   \   000326   8031         SJMP      ??AF_DataRequest_25
    772              }
    773            }
    774            else
    775          #endif // INTER_PAN
    776            {
    777              if (len > afDataReqMTU( &mtu ) )
   \                     ??AF_DataRequest_23:
   \   000328                ; Setup parameters for call to function afDataReqMTU
   \   000328   AA..         MOV       R2,?XSP + 0
   \   00032A   AB..         MOV       R3,?XSP + 1
   \   00032C   12....       LCALL     `??afDataReqMTU::?relay`; Banked call to: afDataReqMTU
   \   00032F   E9           MOV       A,R1
   \   000330   C3           CLR       C
   \   000331   95..         SUBB      A,?V4
   \   000333   E4           CLR       A
   \   000334   95..         SUBB      A,?V5
   \   000336   5019         JNC       ??AF_DataRequest_26
    778              {
    779                if (apsfSendFragmented)
   \   000338   90....       MOV       DPTR,#apsfSendFragmented
   \   00033B   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00033E   600D         JZ        ??AF_DataRequest_24
    780                {
    781                  stat = (*apsfSendFragmented)( &req );
   \   000340                ; Setup parameters for indirect call
   \   000340   7403         MOV       A,#0x3
   \   000342   12....       LCALL     ?XSTACK_DISP101_8
   \   000345   12....       LCALL     ??Subroutine49_0 & 0xFFFF
    782                }
   \                     ??CrossCallReturnLabel_108:
   \   000348   12....       LCALL     ?CALL_IND
   \   00034B   800C         SJMP      ??AF_DataRequest_25
    783                else
    784                {
    785                  stat = afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_24:
   \   00034D   7E02         MOV       R6,#0x2
   \   00034F   800A         SJMP      ??AF_DataRequest_27
    786                }
    787              }
    788              else
    789              {
    790                stat = APSDE_DataReq( &req );
   \                     ??AF_DataRequest_26:
   \   000351                ; Setup parameters for call to function APSDE_DataReq
   \   000351   7403         MOV       A,#0x3
   \   000353   12....       LCALL     ?XSTACK_DISP101_8
   \   000356   12....       LCALL     `??APSDE_DataReq::?relay`; Banked call to: APSDE_DataReq
   \                     ??AF_DataRequest_25:
   \   000359   E9           MOV       A,R1
   \   00035A   FE           MOV       R6,A
    791              }
    792            }
    793          
    794            /*
    795             * If this is an EndPoint-to-EndPoint message on the same device, it will not
    796             * get added to the NWK databufs. So it will not go OTA and it will not get
    797             * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
    798             * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
    799             * message with the first in line TransSeqNumber, even on a multi message.
    800             * Also note that a reflected msg will not have its confirmation generated
    801             * here.
    802             */
    803            if ( (req.dstAddr.addrMode == Addr16Bit) &&
    804                 (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
   \                     ??AF_DataRequest_27:
   \   00035B   740B         MOV       A,#0xb
   \   00035D   12....       LCALL     ?XSTACK_DISP0_8
   \   000360   E0           MOVX      A,@DPTR
   \   000361   6402         XRL       A,#0x2
   \   000363   7026         JNZ       ??AF_DataRequest_28
   \   000365                ; Setup parameters for call to function NLME_GetShortAddr
   \   000365   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000368   7403         MOV       A,#0x3
   \   00036A   12....       LCALL     ?XSTACK_DISP0_8
   \   00036D   E0           MOVX      A,@DPTR
   \   00036E   68           XRL       A,R0
   \   00036F   7003         JNZ       ??AF_DataRequest_29
   \   000371   A3           INC       DPTR
   \   000372   E0           MOVX      A,@DPTR
   \   000373   69           XRL       A,R1
   \                     ??AF_DataRequest_29:
   \   000374   7015         JNZ       ??AF_DataRequest_28
    805            {
    806              afDataConfirm( srcEP->endPoint, *transID, stat );
   \   000376                ; Setup parameters for call to function afDataConfirm
   \   000376   EE           MOV       A,R6
   \   000377   FB           MOV       R3,A
   \   000378   85..82       MOV       DPL,?V6
   \   00037B   85..83       MOV       DPH,?V7
   \   00037E   E0           MOVX      A,@DPTR
   \   00037F   FA           MOV       R2,A
   \   000380   85..82       MOV       DPL,?V0
   \   000383   85..83       MOV       DPH,?V1
   \   000386   E0           MOVX      A,@DPTR
   \   000387   F9           MOV       R1,A
   \   000388   12....       LCALL     `??afDataConfirm::?relay`; Banked call to: afDataConfirm
    807            }
    808          
    809            if ( stat == afStatus_SUCCESS )
   \                     ??AF_DataRequest_28:
   \   00038B   EE           MOV       A,R6
   \   00038C   7009         JNZ       ??AF_DataRequest_30
    810            {
    811              (*transID)++;
   \   00038E   85..82       MOV       DPL,?V6
   \   000391   85..83       MOV       DPH,?V7
   \   000394   E0           MOVX      A,@DPTR
   \   000395   04           INC       A
   \   000396   F0           MOVX      @DPTR,A
    812            }
    813          
    814            return (afStatus_t)stat;
   \                     ??AF_DataRequest_30:
   \   000397   EE           MOV       A,R6
   \   000398   F9           MOV       R1,A
   \                     ??AF_DataRequest_3:
   \   000399   7421         MOV       A,#0x21
   \   00039B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00039E   7F0A         MOV       R7,#0xa
   \   0003A0   02....       LJMP      ?BANKED_LEAVE_XDATA
    815          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000003   8A..         MOV       ?V4,R2
   \   000005   8B..         MOV       ?V5,R3
   \   000007   A8..         MOV       R0,?V4
   \   000009   A9..         MOV       R1,?V5
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine45_0
   \   000002                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine46_0
   \   000002                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   6403         XRL       A,#0x3
   \   000006   22           RET
    816          
    817          #if defined ( ZIGBEEPRO )
    818          /*********************************************************************
    819           * @fn      AF_DataRequestSrcRtg
    820           *
    821           * @brief   Common functionality for invoking APSDE_DataReq() for both
    822           *          SendMulti and MSG-Send.
    823           *
    824           * input parameters
    825           *
    826           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    827           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    828           * @param   cID - A valid cluster ID as specified by the Profile.
    829           * @param   len - Number of bytes of data pointed to by next param.
    830           * @param  *buf - A pointer to the data bytes to send.
    831           * @param  *transID - A pointer to a byte which can be modified and which will
    832           *                    be used as the transaction sequence number of the msg.
    833           * @param   options - Valid bit mask of Tx options.
    834           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    835           * @param   relayCnt - Number of devices in the relay list
    836           * @param   pRelayList - Pointer to the relay list
    837           *
    838           * output parameters
    839           *
    840           * @param  *transID - Incremented by one if the return value is success.
    841           *
    842           * @return  afStatus_t - See previous definition of afStatus_... types.
    843           */
    844          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    845          afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequestSrcRtg:
    846                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    847                                     uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
    848          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   \   00000D   89..         MOV       ?V2,R1
    849            uint8 status;
    850          
    851            /* Add the source route to the source routing table */
    852            status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt,
    853                                                   pRelayList );
   \   00000F                ; Setup parameters for call to function RTG_AddSrcRtgEntry_Guaranteed
   \   00000F   7416         MOV       A,#0x16
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000017   7415         MOV       A,#0x15
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00001F   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000022   12....       LCALL     `??RTG_AddSrcRtgEntry_Guaranteed::?relay`; Banked call to: RTG_AddSrcRtgEntry_Guaranteed
   \   000025   E9           MOV       A,R1
   \   000026   F9           MOV       R1,A
    854          
    855            if( status == RTG_SUCCESS)
   \   000027   7043         JNZ       ??AF_DataRequestSrcRtg_0
    856            {
    857              /* Call AF_DataRequest to send the data */
    858              status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   7414         MOV       A,#0x14
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F5..         MOV       ?V3,A
   \   000031   78..         MOV       R0,#?V3
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000036   7413         MOV       A,#0x13
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00003E   7413         MOV       A,#0x13
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000046   7413         MOV       A,#0x13
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00004E   7413         MOV       A,#0x13
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000056   A9..         MOV       R1,?V2
   \   000058   AC..         MOV       R4,?V0
   \   00005A   AD..         MOV       R5,?V1
   \   00005C   EE           MOV       A,R6
   \   00005D   FA           MOV       R2,A
   \   00005E   EF           MOV       A,R7
   \   00005F   FB           MOV       R3,A
   \   000060   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000063   7409         MOV       A,#0x9
   \   000065   12....       LCALL     ?DEALLOC_XSTACK8
   \   000068   E9           MOV       A,R1
   \   000069   F9           MOV       R1,A
   \   00006A   800B         SJMP      ??AF_DataRequestSrcRtg_1
    859            }
    860            else if( status == RTG_INVALID_PATH )
   \                     ??AF_DataRequestSrcRtg_0:
   \   00006C   7405         MOV       A,#0x5
   \   00006E   69           XRL       A,R1
   \   00006F   7004         JNZ       ??AF_DataRequestSrcRtg_2
    861            {
    862              /* The source route relay count is exceeding the network limit */
    863              status = afStatus_INVALID_PARAMETER;
   \   000071   7902         MOV       R1,#0x2
   \   000073   8002         SJMP      ??AF_DataRequestSrcRtg_1
    864            }
    865            else
    866            {
    867              /* The guaranteed adding entry fails due to memory failure */
    868              status = afStatus_MEM_FAIL;
   \                     ??AF_DataRequestSrcRtg_2:
   \   000075   7910         MOV       R1,#0x10
    869            }
    870            return status;
   \                     ??AF_DataRequestSrcRtg_1:
   \   000077   02....       LJMP      ?Subroutine0 & 0xFFFF
    871          }
    872          
    873          #endif // ZIGBEEPRO
    874          
    875          /*********************************************************************
    876           * @fn      afFindEndPointDescList
    877           *
    878           * @brief   Find the endpoint description entry from the endpoint
    879           *          number.
    880           *
    881           * @param   EndPoint - Application Endpoint to look for
    882           *
    883           * @return  the address to the endpoint/interface description entry
    884           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    885          static epList_t *afFindEndPointDescList( uint8 EndPoint )
   \                     afFindEndPointDescList:
    886          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    887            epList_t *epSearch;
    888          
    889            for (epSearch = epList; epSearch != NULL; epSearch = epSearch->nextDesc)
   \   000004   90....       MOV       DPTR,#epList
   \   000007   8004         SJMP      ??afFindEndPointDescList_0
   \                     ??afFindEndPointDescList_1:
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \                     ??afFindEndPointDescList_0:
   \   00000D   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000010   600F         JZ        ??afFindEndPointDescList_2
    890            {
    891              if (epSearch->epDesc->endPoint == EndPoint)
   \   000012   8A82         MOV       DPL,R2
   \   000014   8B83         MOV       DPH,R3
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F8           MOV       R0,A
   \   00001A   12....       LCALL     ??Subroutine48_0 & 0xFFFF
    892              {
    893                break;
    894              }
    895            }
   \                     ??CrossCallReturnLabel_109:
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   69           XRL       A,R1
   \   00001F   70E8         JNZ       ??afFindEndPointDescList_1
    896          
    897            return epSearch;
   \                     ??afFindEndPointDescList_2:
   \   000021                REQUIRE ?Subroutine3
   \   000021                ; // Fall through to label ?Subroutine3
    898          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    899          
    900          /*********************************************************************
    901           * @fn      afFindEndPointDesc
    902           *
    903           * @brief   Find the endpoint description entry from the endpoint
    904           *          number.
    905           *
    906           * @param   EndPoint - Application Endpoint to look for
    907           *
    908           * @return  the address to the endpoint/interface description entry
    909           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    910          endPointDesc_t *afFindEndPointDesc( uint8 EndPoint )
   \                     afFindEndPointDesc:
    911          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    912            epList_t *epSearch;
    913          
    914            // Look for the endpoint
    915            epSearch = afFindEndPointDescList( EndPoint );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL     ?Subroutine28 & 0xFFFF
    916          
    917            if ( epSearch )
   \                     ??CrossCallReturnLabel_47:
   \   000008   6005         JZ        ??afFindEndPointDesc_0
    918              return ( epSearch->epDesc );
   \   00000A   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   00000D   8004         SJMP      ??afFindEndPointDesc_1
    919            else
    920              return ( (endPointDesc_t *)NULL );
   \                     ??afFindEndPointDesc_0:
   \   00000F   7A00         MOV       R2,#0x0
   \   000011   7B00         MOV       R3,#0x0
   \                     ??afFindEndPointDesc_1:
   \   000013   02....       LJMP      ?Subroutine1 & 0xFFFF
    921          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   E582         MOV       A,DPL
   \   000009   4583         ORL       A,DPH
   \   00000B   22           RET
    922          
    923          /*********************************************************************
    924           * @fn      afFindSimpleDesc
    925           *
    926           * @brief   Find the Simple Descriptor from the endpoint number.
    927           *
    928           * @param   EP - Application Endpoint to look for.
    929           *
    930           * @return  Non-zero to indicate that the descriptor memory must be freed.
    931           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    932          uint8 afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, uint8 EP )
   \                     afFindSimpleDesc:
    933          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V0,R1
    934            epList_t *epItem = afFindEndPointDescList( EP );
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000E   8A..         MOV       ?V2,R2
   \   000010   8B..         MOV       ?V3,R3
   \   000012   AC..         MOV       R4,?V2
   \   000014   AD..         MOV       R5,?V3
    935            uint8 rtrn = FALSE;
   \   000016   7900         MOV       R1,#0x0
    936          
    937            if ( epItem )
   \   000018   EA           MOV       A,R2
   \   000019   4D           ORL       A,R5
   \   00001A   6045         JZ        ??afFindSimpleDesc_0
    938            {
    939              if ( epItem->pfnDescCB )
   \   00001C   8A82         MOV       DPL,R2
   \   00001E   8B83         MOV       DPH,R3
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000027   6020         JZ        ??afFindSimpleDesc_1
    940              {
    941                *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
   \   000029                ; Setup parameters for indirect call
   \   000029   AA..         MOV       R2,?V0
   \   00002B   09           INC       R1
   \   00002C   8C82         MOV       DPL,R4
   \   00002E   8D83         MOV       DPH,R5
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F8           MOV       R0,A
   \   000036   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000039   12....       LCALL     ?CALL_IND
   \   00003C   8E82         MOV       DPL,R6
   \   00003E   8F83         MOV       DPH,R7
   \   000040   EA           MOV       A,R2
   \   000041   F0           MOVX      @DPTR,A
   \   000042   A3           INC       DPTR
   \   000043   EB           MOV       A,R3
   \   000044   F0           MOVX      @DPTR,A
    942                rtrn = TRUE;
   \   000045   7901         MOV       R1,#0x1
   \   000047   8020         SJMP      ??afFindSimpleDesc_2
    943              }
    944              else
    945              {
    946                *ppDesc = epItem->epDesc->simpleDesc;
   \                     ??afFindSimpleDesc_1:
   \   000049   8C82         MOV       DPL,R4
   \   00004B   8D83         MOV       DPH,R5
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   F8           MOV       R0,A
   \   000051   12....       LCALL     ??Subroutine48_0 & 0xFFFF
    947              }
    948            }
   \                     ??CrossCallReturnLabel_111:
   \   000054   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000057   8E82         MOV       DPL,R6
   \   000059   8F83         MOV       DPH,R7
   \   00005B   EA           MOV       A,R2
   \   00005C   F0           MOVX      @DPTR,A
   \   00005D   A3           INC       DPTR
   \   00005E   EB           MOV       A,R3
   \   00005F   8007         SJMP      ??afFindSimpleDesc_3
    949            else
    950            {
    951              *ppDesc = NULL;
   \                     ??afFindSimpleDesc_0:
   \   000061   8E82         MOV       DPL,R6
   \   000063   8F83         MOV       DPH,R7
   \   000065   E4           CLR       A
   \   000066   F0           MOVX      @DPTR,A
   \   000067   A3           INC       DPTR
   \                     ??afFindSimpleDesc_3:
   \   000068   F0           MOVX      @DPTR,A
    952            }
    953          
    954            return rtrn;
   \                     ??afFindSimpleDesc_2:
   \   000069   02....       LJMP      ?Subroutine0 & 0xFFFF
    955          }
    956          
    957          /*********************************************************************
    958           * @fn      afGetDescCB
    959           *
    960           * @brief   Get the Descriptor callback function.
    961           *
    962           * @param   epDesc - pointer to the endpoint descriptor
    963           *
    964           * @return  function pointer or NULL
    965           */
    966          static pDescCB afGetDescCB( endPointDesc_t *epDesc )
    967          {
    968            epList_t *epSearch;
    969          
    970            // Start at the beginning
    971            epSearch = epList;
    972          
    973            // Look through the list until the end
    974            while ( epSearch )
    975            {
    976              // Is there a match?
    977              if ( epSearch->epDesc == epDesc )
    978              {
    979                return ( epSearch->pfnDescCB );
    980              }
    981              else
    982                epSearch = epSearch->nextDesc;  // Next entry
    983            }
    984          
    985            return ( (pDescCB)NULL );
    986          }
    987          
    988          /*********************************************************************
    989           * @fn      afDataReqMTU
    990           *
    991           * @brief   Get the Data Request MTU(Max Transport Unit).
    992           *
    993           * @param   fields - afDataReqMTU_t
    994           *
    995           * @return  uint8(MTU)
    996           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    997          uint8 afDataReqMTU( afDataReqMTU_t* fields )
   \                     afDataReqMTU:
    998          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    999            uint8 len;
   1000            uint8 hdr;
   1001          
   1002            if ( fields->kvp == TRUE )
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   6401         XRL       A,#0x1
   \   00000C   7004         JNZ       ??afDataReqMTU_0
   1003            {
   1004              hdr = AF_HDR_KVP_MAX_LEN;
   \   00000E   7E08         MOV       R6,#0x8
   \   000010   8002         SJMP      ??afDataReqMTU_1
   1005            }
   1006            else
   1007            {
   1008              hdr = AF_HDR_V1_1_MAX_LEN;
   \                     ??afDataReqMTU_0:
   \   000012   7E00         MOV       R6,#0x0
   1009            }
   1010          
   1011            len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
   1012          
   1013            return len;
   \                     ??afDataReqMTU_1:
   \   000014                ; Setup parameters for call to function APSDE_DataReqMTU
   \   000014   A3           INC       DPTR
   \   000015   AA82         MOV       R2,DPL
   \   000017   AB83         MOV       R3,DPH
   \   000019   12....       LCALL     `??APSDE_DataReqMTU::?relay`; Banked call to: APSDE_DataReqMTU
   \   00001C   E9           MOV       A,R1
   \   00001D   C3           CLR       C
   \   00001E   9E           SUBB      A,R6
   \   00001F   F9           MOV       R1,A
   \   000020   02....       LJMP      ?Subroutine2 & 0xFFFF
   1014          }
   1015          
   1016          /*********************************************************************
   1017           * @fn      afGetMatch
   1018           *
   1019           * @brief   Set the allow response flag.
   1020           *
   1021           * @param   ep - Application Endpoint to look for
   1022           * @param   action - true - allow response, false - no response
   1023           *
   1024           * @return  TRUE allow responses, FALSE no response
   1025           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1026          uint8 afGetMatch( uint8 ep )
   \                     afGetMatch:
   1027          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1028            epList_t *epSearch;
   1029          
   1030            // Look for the endpoint
   1031            epSearch = afFindEndPointDescList( ep );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL     ?Subroutine28 & 0xFFFF
   1032          
   1033            if ( epSearch )
   \                     ??CrossCallReturnLabel_48:
   \   000008   6011         JZ        ??afGetMatch_0
   1034            {
   1035              if ( epSearch->flags & eEP_AllowMatch )
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   A2E0         MOV       C,0xE0 /* A   */.0
   \   000015   5004         JNC       ??afGetMatch_0
   1036                return ( TRUE );
   \   000017   7901         MOV       R1,#0x1
   \   000019   8002         SJMP      ??afGetMatch_1
   1037              else
   1038                return ( FALSE );
   1039            }
   1040            else
   1041              return ( FALSE );
   \                     ??afGetMatch_0:
   \   00001B   7900         MOV       R1,#0x0
   \                     ??afGetMatch_1:
   \   00001D                REQUIRE ?Subroutine1
   \   00001D                ; // Fall through to label ?Subroutine1
   1042          }
   1043          
   1044          /*********************************************************************
   1045           * @fn      afSetMatch
   1046           *
   1047           * @brief   Set the allow response flag.
   1048           *
   1049           * @param   ep - Application Endpoint to look for
   1050           * @param   action - true - allow response, false - no response
   1051           *
   1052           * @return  TRUE if success, FALSE if endpoint not found
   1053           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1054          uint8 afSetMatch( uint8 ep, uint8 action )
   \                     afSetMatch:
   1055          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FF           MOV       R7,A
   1056            epList_t *epSearch;
   1057          
   1058            // Look for the endpoint
   1059            epSearch = afFindEndPointDescList( ep );
   \   000007                ; Setup parameters for call to function afFindEndPointDescList
   \   000007   12....       LCALL     ?Subroutine28 & 0xFFFF
   1060          
   1061            if ( epSearch )
   \                     ??CrossCallReturnLabel_49:
   \   00000A   6018         JZ        ??afSetMatch_0
   1062            {
   1063              if ( action )
   \   00000C   EF           MOV       A,R7
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   6005         JZ        ??afSetMatch_1
   1064              {
   1065                epSearch->flags |= eEP_AllowMatch;
   \   000017   E0           MOVX      A,@DPTR
   \   000018   D2E0         SETB      0xE0 /* A   */.0
   \   00001A   8003         SJMP      ??afSetMatch_2
   1066              }
   1067              else
   1068              {
   1069                epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
   \                     ??afSetMatch_1:
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   C2E0         CLR       0xE0 /* A   */.0
   \                     ??afSetMatch_2:
   \   00001F   F0           MOVX      @DPTR,A
   1070              }
   1071              return ( TRUE );
   \   000020   7901         MOV       R1,#0x1
   \   000022   8002         SJMP      ??afSetMatch_3
   1072            }
   1073            else
   1074              return ( FALSE );
   \                     ??afSetMatch_0:
   \   000024   7900         MOV       R1,#0x0
   \                     ??afSetMatch_3:
   \   000026   80..         SJMP      ?Subroutine1
   1075          }
   1076          
   1077          /*********************************************************************
   1078           * @fn      afNumEndPoints
   1079           *
   1080           * @brief   Returns the number of endpoints defined (including 0)
   1081           *
   1082           * @param   none
   1083           *
   1084           * @return  number of endpoints
   1085           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1086          uint8 afNumEndPoints( void )
   \                     afNumEndPoints:
   1087          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1088            epList_t *epSearch;
   1089            uint8 endpoints;
   1090          
   1091            // Start at the beginning
   1092            epSearch = epList;
   \   000004   90....       MOV       DPTR,#epList
   \   000007   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   00000A   8882         MOV       DPL,R0
   \   00000C   F583         MOV       DPH,A
   1093            endpoints = 0;
   \   00000E   7900         MOV       R1,#0x0
   \   000010   8009         SJMP      ??afNumEndPoints_0
   1094          
   1095            while ( epSearch )
   1096            {
   1097              endpoints++;
   \                     ??afNumEndPoints_1:
   \   000012   09           INC       R1
   1098              epSearch = epSearch->nextDesc;
   \   000013   E0           MOVX      A,@DPTR
   \   000014   FA           MOV       R2,A
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   8A82         MOV       DPL,R2
   \   000019   F583         MOV       DPH,A
   1099            }
   \                     ??afNumEndPoints_0:
   \   00001B   E582         MOV       A,DPL
   \   00001D   4583         ORL       A,DPH
   \   00001F   70F1         JNZ       ??afNumEndPoints_1
   1100          
   1101            return ( endpoints );
   \   000021   02....       LJMP      ?Subroutine3 & 0xFFFF
   1102          }
   1103          
   1104          /*********************************************************************
   1105           * @fn      afEndPoints
   1106           *
   1107           * @brief   Fills in the passed in buffer with the endpoint (numbers).
   1108           *          Use afNumEndPoints to find out how big a buffer to supply.
   1109           *
   1110           * @param   epBuf - pointer to mem used
   1111           *
   1112           * @return  void
   1113           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1114          void afEndPoints( uint8 *epBuf, uint8 skipZDO )
   \                     afEndPoints:
   1115          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1116            epList_t *epSearch;
   1117            uint8 endPoint;
   1118          
   1119            // Start at the beginning
   1120            epSearch = epList;
   \   000004   90....       MOV       DPTR,#epList
   \   000007   8022         SJMP      ??afEndPoints_0
   1121          
   1122            while ( epSearch )
   1123            {
   1124              endPoint = epSearch->epDesc->endPoint;
   \                     ??afEndPoints_1:
   \   000009   8C82         MOV       DPL,R4
   \   00000B   8D83         MOV       DPH,R5
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F8           MOV       R0,A
   \   000011   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F8           MOV       R0,A
   1125          
   1126              if ( !skipZDO || endPoint != 0 )
   \   000016   E9           MOV       A,R1
   \   000017   6003         JZ        ??afEndPoints_2
   \   000019   E8           MOV       A,R0
   \   00001A   600B         JZ        ??afEndPoints_3
   1127                *epBuf++ = endPoint;
   \                     ??afEndPoints_2:
   \   00001C   E8           MOV       A,R0
   \   00001D   8A82         MOV       DPL,R2
   \   00001F   8B83         MOV       DPH,R3
   \   000021   F0           MOVX      @DPTR,A
   \   000022   A3           INC       DPTR
   \   000023   AA82         MOV       R2,DPL
   \   000025   AB83         MOV       R3,DPH
   1128          
   1129              epSearch = epSearch->nextDesc;
   \                     ??afEndPoints_3:
   \   000027   8C82         MOV       DPL,R4
   \   000029   8D83         MOV       DPH,R5
   1130            }
   \                     ??afEndPoints_0:
   \   00002B   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00002E   EC           MOV       A,R4
   \   00002F   4D           ORL       A,R5
   \   000030   70D7         JNZ       ??afEndPoints_1
   1131          }
   \   000032   02....       LJMP      ?Subroutine3 & 0xFFFF
   1132          
   1133          /*********************************************************************
   1134           * @fn      afCopyAddress
   1135           *
   1136           * @brief   Fills in the passed in afAddrType_t parameter with the corresponding information
   1137           *          from the zAddrType_t parameter.
   1138           *
   1139           * @param   epBuf - pointer to mem used
   1140           *
   1141           * @return  void
   1142           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1143          void afCopyAddress( afAddrType_t *afAddr, zAddrType_t *zAddr )
   \                     afCopyAddress:
   1144          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1145            afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
   \   000009   EC           MOV       A,R4
   \   00000A   2408         ADD       A,#0x8
   \   00000C   F8           MOV       R0,A
   \   00000D   E4           CLR       A
   \   00000E   3D           ADDC      A,R5
   \   00000F   F9           MOV       R1,A
   \   000010   8882         MOV       DPL,R0
   \   000012   F583         MOV       DPH,A
   \   000014   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   12....       LCALL     ?Subroutine27 & 0xFFFF
   1146            if ( zAddr->addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_46:
   \   00001F   7005         JNZ       ??afCopyAddress_0
   1147            {
   1148              (void)osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
   \   000021                ; Setup parameters for call to function sAddrExtCpy
   \   000021   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000024   8007         SJMP      ??CrossCallReturnLabel_4
   1149            }
   1150            else
   1151            {
   1152              afAddr->addr.shortAddr = zAddr->addr.shortAddr;
   \                     ??afCopyAddress_0:
   \   000026   8C82         MOV       DPL,R4
   \   000028   8D83         MOV       DPH,R5
   \   00002A   12....       LCALL     ?Subroutine6 & 0xFFFF
   1153            }
   1154          
   1155            // Since zAddrType_t has no INTER-PAN information, set the panId member to zero.
   1156            afAddr->panId = 0;
   \                     ??CrossCallReturnLabel_4:
   \   00002D   8E82         MOV       DPL,R6
   \   00002F   8F83         MOV       DPH,R7
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   E4           CLR       A
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   A3           INC       DPTR
   \   00003E   F0           MOVX      @DPTR,A
   1157          }
   \   00003F   02....       LJMP      ?Subroutine2 & 0xFFFF
   1158          
   1159          /**************************************************************************************************
   1160           * @fn          afAPSF_ConfigGet
   1161           *
   1162           * @brief       This function ascertains the fragmentation configuration that corresponds to
   1163           *              the specified EndPoint.
   1164           *
   1165           * input parameters
   1166           *
   1167           * @param       endPoint - The source EP of a Tx or destination EP of a Rx fragmented message.
   1168           *
   1169           * output parameters
   1170           *
   1171           * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
   1172           *
   1173           * @return      None.
   1174           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1175          void afAPSF_ConfigGet(uint8 endPoint, afAPSF_Config_t *pCfg)
   \                     afAPSF_ConfigGet:
   1176          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1177            epList_t *pList = afFindEndPointDescList(endPoint);
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   A9..         MOV       R1,?V1
   1178          
   1179            if (pList == NULL)
   \   000010   EA           MOV       A,R2
   \   000011   49           ORL       A,R1
   \   000012   700D         JNZ       ??afAPSF_ConfigGet_0
   1180            {
   1181              pCfg->frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \   000014   8E82         MOV       DPL,R6
   \   000016   8F83         MOV       DPH,R7
   \   000018   7432         MOV       A,#0x32
   \   00001A   F0           MOVX      @DPTR,A
   1182              pCfg->windowSize = APSF_DEFAULT_WINDOW_SIZE;
   \   00001B   A3           INC       DPTR
   \   00001C   7401         MOV       A,#0x1
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   8021         SJMP      ??afAPSF_ConfigGet_1
   1183            }
   1184            else
   1185            {
   1186              (void)osal_memcpy(pCfg, &pList->apsfCfg, sizeof(afAPSF_Config_t));
   \                     ??afAPSF_ConfigGet_0:
   \   000021                ; Setup parameters for call to function osal_memcpy
   \   000021   EA           MOV       A,R2
   \   000022   2406         ADD       A,#0x6
   \   000024   F5..         MOV       ?V0,A
   \   000026   E4           CLR       A
   \   000027   39           ADDC      A,R1
   \   000028   F5..         MOV       ?V1,A
   \   00002A   75..00       MOV       ?V2,#0x0
   \   00002D   78..         MOV       R0,#?V0
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000032   7C02         MOV       R4,#0x2
   \   000034   7D00         MOV       R5,#0x0
   \   000036   EE           MOV       A,R6
   \   000037   FA           MOV       R2,A
   \   000038   EF           MOV       A,R7
   \   000039   FB           MOV       R3,A
   \   00003A   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00003D   7403         MOV       A,#0x3
   \   00003F   12....       LCALL     ?DEALLOC_XSTACK8
   1187            }
   1188          }
   \                     ??afAPSF_ConfigGet_1:
   \   000042                REQUIRE ?Subroutine0
   \   000042                ; // Fall through to label ?Subroutine0
   1189          
   1190          /**************************************************************************************************
   1191           * @fn          afAPSF_ConfigSet
   1192           *
   1193           * @brief       This function attempts to set the fragmentation configuration that corresponds to
   1194           *              the specified EndPoint.
   1195           *
   1196           * input parameters
   1197           *
   1198           * @param       endPoint - The specific EndPoint for which to set the fragmentation configuration.
   1199           * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
   1200           *
   1201           * output parameters
   1202           *
   1203           * None.
   1204           *
   1205           * @return      afStatus_SUCCESS for success.
   1206           *              afStatus_INVALID_PARAMETER if the specified EndPoint is not registered.
   1207           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1208          afStatus_t afAPSF_ConfigSet(uint8 endPoint, afAPSF_Config_t *pCfg)
   \                     afAPSF_ConfigSet:
   1209          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1210            epList_t *pList = afFindEndPointDescList(endPoint);
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   1211          
   1212            if (pList == NULL)
   \   00000C   EA           MOV       A,R2
   \   00000D   4B           ORL       A,R3
   \   00000E   7004         JNZ       ??afAPSF_ConfigSet_0
   1213            {
   1214              return afStatus_INVALID_PARAMETER;
   \   000010   7902         MOV       R1,#0x2
   \   000012   8021         SJMP      ??afAPSF_ConfigSet_1
   1215            }
   1216          
   1217            (void)osal_memcpy(&pList->apsfCfg, pCfg, sizeof(afAPSF_Config_t));
   \                     ??afAPSF_ConfigSet_0:
   \   000014                ; Setup parameters for call to function osal_memcpy
   \   000014   8E..         MOV       ?V0,R6
   \   000016   8F..         MOV       ?V1,R7
   \   000018   75..00       MOV       ?V2,#0x0
   \   00001B   78..         MOV       R0,#?V0
   \   00001D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000020   7C02         MOV       R4,#0x2
   \   000022   7D00         MOV       R5,#0x0
   \   000024   EA           MOV       A,R2
   \   000025   2406         ADD       A,#0x6
   \   000027   FA           MOV       R2,A
   \   000028   5001         JNC       ??afAPSF_ConfigSet_2
   \   00002A   0B           INC       R3
   \                     ??afAPSF_ConfigSet_2:
   \   00002B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00002E   7403         MOV       A,#0x3
   \   000030   12....       LCALL     ?DEALLOC_XSTACK8
   1218            return afStatus_SUCCESS;
   \   000033   7900         MOV       R1,#0x0
   \                     ??afAPSF_ConfigSet_1:
   \   000035   80..         SJMP      ?Subroutine0
   1219          }
   1220          
   1221          /**************************************************************************************************
   1222           * @fn          afSetApplCB
   1223           *
   1224           * @brief       Sets the pointer to the Application Callback function for a
   1225           *              specific EndPoint.
   1226           *
   1227           * input parameters
   1228           *
   1229           * @param       endPoint - The specific EndPoint for which to set Application Callback.
   1230           * @param       pApplFn - A pointer to the Application Callback function.
   1231           *
   1232           * output parameters
   1233           *
   1234           * None.
   1235           *
   1236           * @return      TRUE if success, FALSE if endpoint not found
   1237           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1238          uint8 afSetApplCB( uint8 endPoint, pApplCB pApplFn )
   \                     afSetApplCB:
   1239          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1240            if ( pApplFn != NULL )
   \   000009   EA           MOV       A,R2
   \   00000A   4F           ORL       A,R7
   \   00000B   6017         JZ        ??afSetApplCB_0
   1241            {
   1242              epList_t *epSearch;
   1243          
   1244              // Look for the endpoint
   1245              epSearch = afFindEndPointDescList( endPoint );
   \   00000D                ; Setup parameters for call to function afFindEndPointDescList
   \   00000D   12....       LCALL     ?Subroutine28 & 0xFFFF
   1246          
   1247              if ( epSearch )
   \                     ??CrossCallReturnLabel_50:
   \   000010   6012         JZ        ??afSetApplCB_0
   1248              {
   1249                epSearch->pfnApplCB = pApplFn;
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   EE           MOV       A,R6
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   A3           INC       DPTR
   \   00001E   EF           MOV       A,R7
   \   00001F   F0           MOVX      @DPTR,A
   1250          
   1251                return ( TRUE );
   \   000020   7901         MOV       R1,#0x1
   \   000022   8002         SJMP      ??afSetApplCB_1
   1252              }
   1253            }
   1254          
   1255            return ( FALSE );
   \                     ??afSetApplCB_0:
   \   000024   7900         MOV       R1,#0x0
   \                     ??afSetApplCB_1:
   \   000026   80..         SJMP      ?Subroutine0
   1256          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AF_DataRequestDiscoverRoute>`:
   \   000000   01           DB 1
   1257          
   1258          /**************************************************************************************************
   1259          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     72   AF_DataRequest
        0     51   -> APSDE_DataReq
        0     51   -> INTERP_DataReq
        0     51   -> INTERP_DataReqMTU
        0     51   -> NLME_GetShortAddr
        0     51   -> NLME_IsAddressBroadcast
        0     51   -> RTG_CheckRtStatus
        0     51   -> StubAPS_InterPan
        0     51   -> afDataConfirm
        0     51   -> afDataReqMTU
        0     51   -> afFindEndPointDescList
        0     51   -> osal_mem_free
        0     51   -> sAddrExtCpy
      0     33   AF_DataRequestSrcRtg
        0     21   -> AF_DataRequest
        0     12   -> RTG_AddSrcRtgEntry_Guaranteed
      0     15   afAPSF_ConfigGet
        0     12   -> afFindEndPointDescList
        0     15   -> osal_memcpy
      0     15   afAPSF_ConfigSet
        0     12   -> afFindEndPointDescList
        0     15   -> osal_memcpy
      1     62   afBuildMSGIncoming
        0     19   -> afCopyAddress
        0     22   -> osal_memcpy
        0     19   -> osal_msg_allocate
        0     19   -> osal_msg_send
      1     28   afCopyAddress
        0      9   -> sAddrExtCpy
      1     65   afDataConfirm
        0     14   -> afFindEndPointDesc
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
      0     60   afDataReqMTU
        0      9   -> APSDE_DataReqMTU
      0      9   afDelete
        0      9   -> osal_mem_free
      3      0   afEndPoints
      0     38   afFindEndPointDesc
        0     10   -> afFindEndPointDescList
      2     51   afFindEndPointDescList
      0     12   afFindSimpleDesc
        0     12   -> afFindEndPointDescList
      0     10   afGetMatch
        0     10   -> afFindEndPointDescList
      1     50   afIncomingData
        0     40   -> afBuildMSGIncoming
        0     28   -> afFindEndPointDesc
        0     28   -> afFindEndPointDescList
        0     28   -> aps_FindGroupForEndpoint
        0     28   -> osal_mem_free
      2      0   afNumEndPoints
      1     18   afReflectError
        0     16   -> afFindEndPointDesc
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      0     12   afRegister
        0     10   -> afFindEndPointDescList
        0     12   -> afRegisterExtended
      0     24   afRegisterExtended
        0     12   -> osal_mem_alloc
      0     12   afSetApplCB
        0     12   -> afFindEndPointDescList
      0     10   afSetMatch
        0     10   -> afFindEndPointDescList


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for AF_DataRequestDiscoverRoute>
       6  ??Subroutine39_0
       1  ??Subroutine40_0
       5  ??Subroutine41_0
       7  ??Subroutine42_0
       4  ??Subroutine43_0
       7  ??Subroutine44_0
       2  ??Subroutine45_0
       6  ??Subroutine46_0
       4  ??Subroutine47_0
       1  ??Subroutine48_0
       6  ??Subroutine49_0
       5  ??Subroutine50_0
       5  ?Subroutine0
       5  ?Subroutine1
       2  ?Subroutine10
       6  ?Subroutine11
       6  ?Subroutine12
      13  ?Subroutine13
       8  ?Subroutine14
       6  ?Subroutine15
       3  ?Subroutine16
       9  ?Subroutine17
       9  ?Subroutine18
      18  ?Subroutine19
       5  ?Subroutine2
       6  ?Subroutine20
       6  ?Subroutine21
      12  ?Subroutine22
       8  ?Subroutine23
       4  ?Subroutine24
       4  ?Subroutine25
       8  ?Subroutine26
       7  ?Subroutine27
      12  ?Subroutine28
      14  ?Subroutine29
       7  ?Subroutine3
      11  ?Subroutine30
      10  ?Subroutine31
      12  ?Subroutine32
       5  ?Subroutine33
       6  ?Subroutine34
       3  ?Subroutine35
       6  ?Subroutine36
       2  ?Subroutine37
      10  ?Subroutine38
       6  ?Subroutine4
      13  ?Subroutine5
       9  ?Subroutine6
      19  ?Subroutine7
       8  ?Subroutine8
       8  ?Subroutine9
     931  AF_DataRequest
       1  AF_DataRequestDiscoverRoute
     122  AF_DataRequestSrcRtg
      66  afAPSF_ConfigGet
      55  afAPSF_ConfigSet
     475  afBuildMSGIncoming
      66  afCopyAddress
      71  afDataConfirm
      35  afDataReqMTU
      97  afDelete
      53  afEndPoints
      22  afFindEndPointDesc
      33  afFindEndPointDescList
     108  afFindSimpleDesc
      29  afGetMatch
     496  afIncomingData
      36  afNumEndPoints
      90  afReflectError
      63  afRegister
      88  afRegisterExtended
      40  afSetApplCB
      40  afSetMatch
       2  epList
     126  -- Other

 
 3 381 bytes in segment BANKED_CODE
   126 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     2 bytes in segment XDATA_Z
 
   127 bytes of CODE     memory
 3 381 bytes of HUGECODE memory
     3 bytes of XDATA    memory

Errors: none
Warnings: none
