###############################################################################
#
# IAR C/C++ Compiler V10.40.1.7397 for 8051               01/May/2021  14:31:31
# Copyright 2004-2021 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\Texas Instruments\Z-Stack 3.0.2\Components\osal\common\OSAL_Clock.c
#    Command line       =  
#        -f C:\Users\asus\AppData\Local\Temp\EW5FB6.tmp ("E:\Texas
#        Instruments\Z-Stack 3.0.2\Components\osal\common\OSAL_Clock.c" -D
#        BDB_FINDING_BINDING_CAPABILITY_ENABLED=0 -D TC_LINKKEY_JOIN -D
#        HAL_UART_DMA_RX_MAX=128 -D MAXMEMHEAP=2765 -D NWK_MAX_DEVICE_LIST=10
#        -D ZDSECMGR_TC_DEVICE_MAX=30 -D DISABLE_GREENPOWER_BASIC_PROXY -D
#        POWER_SAVING -D FEATURE_SYSTEM_STATS -D MT_GP_CB_FUNC -D ASSERT_RESET
#        -D MAKE_CRC_SHDW -lC "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\List" -lA
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\List"
#        --diag_suppress Pe001,Pa010 -o "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\Obj" -e
#        --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_GP_CB_FUNC -DMT_APP_FUNC -DMT_APP_CNF_FUNC)
#        -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg" -I
#        "E:\Texas Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\Source\" -I "E:\Texas
#        Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\..\Source\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Utilities\BootLoad\Source\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\gp\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\bdb\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  English_USA.1252
#    List file          =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\List\OSAL_Clock.lst
#    Object file        =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\Obj\OSAL_Clock.r51
#
###############################################################################

E:\Texas Instruments\Z-Stack 3.0.2\Components\osal\common\OSAL_Clock.c
      1          /******************************************************************************
      2            Filename:       OSAL_Clock.c
      3            Revised:        $Date: 2014-06-30 16:38:56 -0700 (Mon, 30 Jun 2014) $
      4            Revision:       $Revision: 39297 $
      5          
      6            Description:    OSAL Clock definition and manipulation functions.
      7          
      8            Copyright 2008-2014 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License"). You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product. Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          ******************************************************************************/
     38          
     39          /*********************************************************************
     40           * INCLUDES
     41           */
     42          
     43          #include "comdef.h"
     44          #include "hal_board.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     45          #include "OnBoard.h"
     46          #include "OSAL.h"
     47          #include "OSAL_Clock.h"
     48          
     49          /*********************************************************************
     50           * MACROS
     51           */
     52          
     53          #define	YearLength(yr)	((uint16)(IsLeapYear(yr) ? 366 : 365))
     54          
     55          /*********************************************************************
     56           * CONSTANTS
     57           */
     58          
     59          #define	BEGYEAR  2000     //  UTC started at 00:00:00 January 1, 2000
     60          
     61          #define	DAY      86400UL  // 24 hours * 60 minutes * 60 seconds
     62          
     63          /* Check Below for an explanation */
     64          #define COUNTER_TICK320US 204775UL 
     65          
     66          /* converted COUNTER_TICK320US from 320us ticks to ms */
     67          #define COUNTER_ELAPSEDMS 65528UL   
     68          
     69          /* 
     70           * Each tick is 320us so a value greater than 3 implies 
     71           * that atleast one millisecond has elapsed 320us*4 > 1 ms 
     72           */
     73          #define TIMER_CLOCK_UPDATE 4 
     74                                            
     75          /*********************************************************************
     76           * TYPEDEFS
     77           */
     78          
     79          /*********************************************************************
     80           * GLOBAL VARIABLES
     81           */
     82          
     83          /*********************************************************************
     84           * EXTERNAL VARIABLES
     85           */
     86          
     87          /*********************************************************************
     88           * EXTERNAL FUNCTIONS
     89           */
     90          extern uint32 macMcuPrecisionCount(void);
     91          
     92          #if (defined HAL_MCU_CC2430) || (defined HAL_MCU_CC2530) || (defined HAL_MCU_CC2533)
     93          
     94            /*  This function is used to divide a 31 bit dividend by a 16 bit
     95             *  divisor and return a packed 16 bit quotient and 16 bit
     96             *  remainder.
     97             *
     98             *  Note: This routine takes ~25.6us @32MHz. With C overhead, the
     99             *        time is ~32us.
    100             *
    101             *  dividend - 31 bit dividend.
    102             *  divisor - 16 bit divisor.
    103             *
    104             *  return - MSW divisor; LSW quotient
    105             */
    106            extern __near_func uint32 osalMcuDivide31By16To16( uint32 dividend, uint16 divisor );
    107          
    108            #define CONVERT_320US_TO_MS_ELAPSED_REMAINDER( x, y, z ) st( \
    109                                                                         \
    110              /* The 16 bit quotient is in MSW and */                    \
    111              /* the 16 bit remainder is in LSW. */                      \
    112              x = osalMcuDivide31By16To16( x, 25 );                      \
    113                                                                         \
    114              /* Add quotient to y */                                    \
    115              y += (x >> 16);                                            \
    116                                                                         \
    117              /* Copy remainder to z */                                  \
    118              z = (uint16)(x & 0x0FFFF);                                 \
    119            )
    120            
    121            #define CONVERT_MS_TO_S_ELAPSED_REMAINDER( x, y, z ) st(     \
    122                                                                         \
    123              /* The 16 bit quotient is in MSW and */                    \
    124              /* the 16 bit remainder is in LSW. */                      \
    125              x = osalMcuDivide31By16To16( x, 1000 );                    \
    126                                                                         \
    127              /* Add quotient to y */                                    \
    128              y += (x >> 16);                                            \
    129                                                                         \
    130              /* Copy remainder to z */                                  \
    131              z = (uint16)(x & 0x0FFFF);                                 \
    132            )
    133          
    134          #else /* (defined HAL_MCU_CC2430) || (defined HAL_MCU_CC2530) || (defined HAL_MCU_CC2533) */
    135          
    136            #define CONVERT_320US_TO_MS_ELAPSED_REMAINDER( x, y, z ) st( \
    137              y += x / 25;                                               \
    138              z = x % 25;                                                \
    139            )
    140            
    141            #define CONVERT_MS_TO_S_ELAPSED_REMAINDER( x, y, z ) st(     \
    142              y += x / 1000;                                             \
    143              z = x % 1000;                                              \
    144            )
    145          #endif /* (defined HAL_MCU_CC2430) || (defined HAL_MCU_CC2530) || (defined HAL_MCU_CC2533) */
    146          
    147          /*********************************************************************
    148           * LOCAL VARIABLES
    149           */
    150          #ifndef USE_ICALL

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151            static uint32 previousMacTimerTick = 0;
   \                     previousMacTimerTick:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152            static uint16 remUsTicks = 0;
   \                     remUsTicks:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    153          #endif /* !USE_ICALL */
    154            

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          static uint32 timeMSec = 0;
   \                     timeMSec:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    156          
    157          // number of seconds since 0 hrs, 0 minutes, 0 seconds, on the
    158          // 1st of January 2000 UTC

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          UTCTime OSAL_timeSeconds = 0;
   \                     OSAL_timeSeconds:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    160          
    161          /*********************************************************************
    162           * LOCAL FUNCTION PROTOTYPES
    163           */
    164          static uint8 monthLength( uint8 lpyr, uint8 mon );
    165          
    166          static void osalClockUpdate( uint32 elapsedMSec );
    167          
    168          /*********************************************************************
    169           * FUNCTIONS
    170           *********************************************************************/
    171          
    172          /*********************************************************************
    173           * @fn      osalTimeUpdate
    174           *
    175           * @brief   Uses the free running rollover count of the MAC backoff timer;
    176           *          this timer runs freely with a constant 320 usec interval.  The
    177           *          count of 320-usec ticks is converted to msecs and used to update
    178           *          the OSAL clock and Timers by invoking osalClockUpdate() and
    179           *          osalTimerUpdate().  This function is intended to be invoked
    180           *          from the background, not interrupt level.
    181           *
    182           * @param   None.
    183           *
    184           * @return  None.
    185           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    186          void osalTimeUpdate( void )
   \                     osalTimeUpdate:
    187          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
    188          #ifndef USE_ICALL
    189            /* Note that when ICall is in use the OSAL tick is not updated
    190             * in this fashion but rather through real OS timer tick. */
    191            halIntState_t intState;
    192            uint32 tmp;
    193            uint32 ticks320us;
    194            uint32 elapsedMSec = 0;
   \   000005   75..00       MOV       ?V4,#0x0
   \   000008   75..00       MOV       ?V5,#0x0
   \   00000B   75..00       MOV       ?V6,#0x0
   \   00000E   75..00       MOV       ?V7,#0x0
    195          
    196            HAL_ENTER_CRITICAL_SECTION(intState);
   \   000011   AEA8         MOV       R6,0xa8+0x0
   \   000013   C2AF         CLR       0xa8.7
    197            // Get the free-running count of 320us timer ticks
    198            tmp = macMcuPrecisionCount();
   \   000015                ; Setup parameters for call to function macMcuPrecisionCount
   \   000015   12....       LCALL     `??macMcuPrecisionCount::?relay`; Banked call to: macMcuPrecisionCount
   \   000018   8A..         MOV       ?V0,R2
   \   00001A   8B..         MOV       ?V1,R3
   \   00001C   8C..         MOV       ?V2,R4
   \   00001E   8D..         MOV       ?V3,R5
    199            HAL_EXIT_CRITICAL_SECTION(intState);
   \   000020   EE           MOV       A,R6
   \   000021   A2E7         MOV       C,0xE0 /* A   */.7
   \   000023   92AF         MOV       0xa8.7,C
    200            
    201            if ( tmp != previousMacTimerTick )
   \   000025   90....       MOV       DPTR,#previousMacTimerTick
   \   000028   78..         MOV       R0,#?V0
   \   00002A   12....       LCALL     ?L_EQ_X
   \   00002D   7003         JNZ       $+5
   \   00002F   02....       LJMP      ??osalTimeUpdate_0 & 0xFFFF
    202            {
    203              // Calculate the elapsed ticks of the free-running timer.
    204              ticks320us = (tmp - previousMacTimerTick) & 0xffffffffu;
   \   000032   8A..         MOV       ?V8,R2
   \   000034   8B..         MOV       ?V9,R3
   \   000036   8C..         MOV       ?V10,R4
   \   000038   8D..         MOV       ?V11,R5
   \   00003A   90....       MOV       DPTR,#previousMacTimerTick
   \   00003D   78..         MOV       R0,#?V8
   \   00003F   12....       LCALL     ?L_SUB_X
    205          
    206              if (ticks320us >= TIMER_CLOCK_UPDATE )
   \   000042   90....       MOV       DPTR,#__Constant_4
   \   000045   78..         MOV       R0,#?V8
   \   000047   12....       LCALL     ?UL_GE_X
   \   00004A   4003         JC        $+5
   \   00004C   02....       LJMP      ??osalTimeUpdate_0 & 0xFFFF
    207              {
    208                // Store the MAC Timer tick count for the next time through this function.
    209                previousMacTimerTick = tmp;
   \   00004F   90....       MOV       DPTR,#previousMacTimerTick
   \   000052   78..         MOV       R0,#?V0
   \   000054   12....       LCALL     ?L_MOV_TO_X
   \   000057   8010         SJMP      ??osalTimeUpdate_1
    210                
    211                /*
    212                 * remUsTicks can have a maximum value of 24 (Since remusTicks got by mod 
    213                 * of 25). The value of COUNTER_TICK320US is a multiple of 25 and the 
    214                 * quotient of  CONVERT_320US_TO_MS_ELAPSED_REMAINDER() does not exceed 
    215                 * 0xFFFF or 16 bit.
    216                 */
    217                while(ticks320us >= COUNTER_TICK320US)
    218                {
    219                  ticks320us  -= COUNTER_TICK320US;
   \                     ??osalTimeUpdate_2:
   \   000059   90....       MOV       DPTR,#__Constant_fffce019
   \   00005C   78..         MOV       R0,#?V8
   \   00005E   12....       LCALL     ?L_ADD_X
    220                  elapsedMSec += COUNTER_ELAPSEDMS;
   \   000061   90....       MOV       DPTR,#__Constant_fff8
   \   000064   78..         MOV       R0,#?V4
   \   000066   12....       LCALL     ?L_ADD_X
    221                }
   \                     ??osalTimeUpdate_1:
   \   000069   90....       MOV       DPTR,#__Constant_31fe7
   \   00006C   78..         MOV       R0,#?V8
   \   00006E   12....       LCALL     ?UL_GE_X
   \   000071   40E6         JC        ??osalTimeUpdate_2
    222              
    223                // update converted number with remaining ticks from loop and the
    224                // accumulated remainder from loop
    225                tmp = (ticks320us * 8) + remUsTicks;
    226          
    227                // Convert the 320 us ticks into milliseconds and a remainder
    228                CONVERT_320US_TO_MS_ELAPSED_REMAINDER( tmp, elapsedMSec, remUsTicks );
   \   000073                ; Setup parameters for call to function osalMcuDivide31By16To16
   \   000073   75..19       MOV       ?V0,#0x19
   \   000076   75..00       MOV       ?V1,#0x0
   \   000079   78..         MOV       R0,#?V0
   \   00007B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007E   7403         MOV       A,#0x3
   \   000080   78..         MOV       R0,#?V8
   \   000082   12....       LCALL     ?L_SHL
   \   000085   90....       MOV       DPTR,#remUsTicks
   \   000088   E0           MOVX      A,@DPTR
   \   000089   F5..         MOV       ?V0,A
   \   00008B   A3           INC       DPTR
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   F5..         MOV       ?V1,A
   \   00008F   E4           CLR       A
   \   000090   F5..         MOV       ?V2,A
   \   000092   F5..         MOV       ?V3,A
   \   000094   78..         MOV       R0,#?V8
   \   000096   79..         MOV       R1,#?V0
   \   000098   12....       LCALL     ?L_ADD
   \   00009B   AA..         MOV       R2,?V8
   \   00009D   AB..         MOV       R3,?V9
   \   00009F   AC..         MOV       R4,?V10
   \   0000A1   AD..         MOV       R5,?V11
   \   0000A3   12....       LCALL     osalMcuDivide31By16To16 & 0xFFFF
   \   0000A6   7402         MOV       A,#0x2
   \   0000A8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AB   8A..         MOV       ?V8,R2
   \   0000AD   8B..         MOV       ?V9,R3
   \   0000AF   8C..         MOV       ?V10,R4
   \   0000B1   8D..         MOV       ?V11,R5
   \   0000B3   7410         MOV       A,#0x10
   \   0000B5   78..         MOV       R0,#?V8
   \   0000B7   12....       LCALL     ?UL_SHR
   \   0000BA   78..         MOV       R0,#?V4
   \   0000BC   79..         MOV       R1,#?V8
   \   0000BE   12....       LCALL     ?L_ADD
   \   0000C1   90....       MOV       DPTR,#remUsTicks
   \   0000C4   EA           MOV       A,R2
   \   0000C5   F0           MOVX      @DPTR,A
   \   0000C6   A3           INC       DPTR
   \   0000C7   EB           MOV       A,R3
   \   0000C8   F0           MOVX      @DPTR,A
    229                
    230                // Update OSAL Clock and Timers
    231                osalClockUpdate( elapsedMSec );
   \   0000C9   A2AF         MOV       C,0xa8.7
   \   0000CB   E4           CLR       A
   \   0000CC   33           RLC       A
   \   0000CD   FE           MOV       R6,A
   \   0000CE   C2AF         CLR       0xa8.7
   \   0000D0   90....       MOV       DPTR,#timeMSec
   \   0000D3   78..         MOV       R0,#?V4
   \   0000D5   12....       LCALL     ?L_ADD_TO_X
   \   0000D8   90....       MOV       DPTR,#__Constant_3e8
   \   0000DB   78..         MOV       R0,#?V0
   \   0000DD   12....       LCALL     ?L_MOV_X
   \   0000E0   90....       MOV       DPTR,#timeMSec
   \   0000E3   78..         MOV       R0,#?V0
   \   0000E5   12....       LCALL     ?UL_GT_X
   \   0000E8   4041         JC        ??osalTimeUpdate_3
   \   0000EA                ; Setup parameters for call to function osalMcuDivide31By16To16
   \   0000EA   75..E8       MOV       ?V0,#-0x18
   \   0000ED   75..03       MOV       ?V1,#0x3
   \   0000F0   78..         MOV       R0,#?V0
   \   0000F2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F5   90....       MOV       DPTR,#timeMSec
   \   0000F8   12....       LCALL     ?XLOAD_R2345
   \   0000FB   12....       LCALL     osalMcuDivide31By16To16 & 0xFFFF
   \   0000FE   7402         MOV       A,#0x2
   \   000100   12....       LCALL     ?DEALLOC_XSTACK8
   \   000103   8A..         MOV       ?V8,R2
   \   000105   8B..         MOV       ?V9,R3
   \   000107   8A..         MOV       ?V0,R2
   \   000109   8B..         MOV       ?V1,R3
   \   00010B   8C..         MOV       ?V2,R4
   \   00010D   8D..         MOV       ?V3,R5
   \   00010F   7410         MOV       A,#0x10
   \   000111   78..         MOV       R0,#?V0
   \   000113   12....       LCALL     ?UL_SHR
   \   000116   90....       MOV       DPTR,#OSAL_timeSeconds
   \   000119   78..         MOV       R0,#?V0
   \   00011B   12....       LCALL     ?L_ADD_TO_X
   \   00011E   A8..         MOV       R0,?V8
   \   000120   A9..         MOV       R1,?V9
   \   000122   E4           CLR       A
   \   000123   FA           MOV       R2,A
   \   000124   FB           MOV       R3,A
   \   000125   90....       MOV       DPTR,#timeMSec
   \   000128   12....       LCALL     ?XSTORE_R0123
   \                     ??osalTimeUpdate_3:
   \   00012B   EE           MOV       A,R6
   \   00012C   A2E0         MOV       C,0xE0 /* A   */.0
   \   00012E   92AF         MOV       0xa8.7,C
    232                osalTimerUpdate( elapsedMSec );
   \   000130                ; Setup parameters for call to function osalTimerUpdate
   \   000130   AA..         MOV       R2,?V4
   \   000132   AB..         MOV       R3,?V5
   \   000134   AC..         MOV       R4,?V6
   \   000136   AD..         MOV       R5,?V7
   \   000138   12....       LCALL     `??osalTimerUpdate::?relay`; Banked call to: osalTimerUpdate
    233              }
    234            }
    235          #endif /* USE_ICALL */
    236          }
   \                     ??osalTimeUpdate_0:
   \   00013B                REQUIRE ?Subroutine0
   \   00013B                REQUIRE _A_IEN0
   \   00013B                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F0C         MOV       R7,#0xc
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    237          
    238          /*********************************************************************
    239           * @fn      osalClockUpdate
    240           *
    241           * @brief   Updates the OSAL Clock time with elapsed milliseconds.
    242           *
    243           * @param   elapsedMSec - elapsed milliseconds
    244           *
    245           * @return  none
    246           */
    247          static void osalClockUpdate( uint32 elapsedMSec )
    248          {
    249            uint32 tmp;
    250            halIntState_t intState;
    251            
    252            HAL_ENTER_CRITICAL_SECTION(intState);
    253            // Add elapsed milliseconds to the saved millisecond portion of time
    254            timeMSec += elapsedMSec;
    255          
    256            // Roll up milliseconds to the number of seconds
    257            if ( timeMSec >= 1000 )
    258            {
    259              tmp = timeMSec;
    260              CONVERT_MS_TO_S_ELAPSED_REMAINDER(tmp, OSAL_timeSeconds, timeMSec);
    261            }
    262            HAL_EXIT_CRITICAL_SECTION(intState);
    263          }
    264          
    265          #if defined HAL_BOARD_CC2538 || defined USE_ICALL
    266          /*********************************************************************
    267           * @fn      osalAdjustTimer
    268           *
    269           * @brief   Updates the OSAL Clock and Timer with elapsed milliseconds.
    270           *
    271           * @param   MSec - elapsed milliseconds
    272           *
    273           * @return  none
    274           */
    275          void osalAdjustTimer(uint32 Msec )
    276          {
    277            /* Disable SysTick interrupts */ 
    278            SysTickIntDisable(); 
    279            
    280            osalClockUpdate(Msec);
    281            osalTimerUpdate(Msec);
    282            
    283            /* Enable SysTick interrupts */ 
    284            SysTickIntEnable(); 
    285          }
    286          #endif /* HAL_BOARD_CC2538 || USE_ICALL */
    287          
    288          /*********************************************************************
    289           * @fn      osal_setClock
    290           *
    291           * @brief   Set the new time.  This will only set the seconds portion
    292           *          of time and doesn't change the factional second counter.
    293           *
    294           * @param   newTime - number of seconds since 0 hrs, 0 minutes,
    295           *                    0 seconds, on the 1st of January 2000 UTC
    296           *
    297           * @return  none
    298           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    299          void osal_setClock( UTCTime newTime )
   \                     osal_setClock:
    300          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
    301            HAL_CRITICAL_STATEMENT(OSAL_timeSeconds = newTime);
   \   00000D   A9A8         MOV       R1,0xa8+0x0
   \   00000F   C2AF         CLR       0xa8.7
   \   000011   90....       MOV       DPTR,#OSAL_timeSeconds
   \   000014   78..         MOV       R0,#?V0
   \   000016   12....       LCALL     ?L_MOV_TO_X
   \   000019   E9           MOV       A,R1
   \   00001A   A2E7         MOV       C,0xE0 /* A   */.7
   \   00001C   92AF         MOV       0xa8.7,C
    302          }
   \   00001E   7F04         MOV       R7,#0x4
   \   000020   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000023                REQUIRE _A_IEN0
    303          
    304          /*********************************************************************
    305           * @fn      osal_getClock
    306           *
    307           * @brief   Gets the current time.  This will only return the seconds
    308           *          portion of time and doesn't include the factional second
    309           *          counter.
    310           *
    311           * @param   none
    312           *
    313           * @return  number of seconds since 0 hrs, 0 minutes, 0 seconds,
    314           *          on the 1st of January 2000 UTC
    315           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    316          UTCTime osal_getClock( void )
   \                     osal_getClock:
    317          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    318            return ( OSAL_timeSeconds );
   \   000004   90....       MOV       DPTR,#OSAL_timeSeconds
   \   000007   12....       LCALL     ?XLOAD_R2345
   \   00000A   D083         POP       DPH
   \   00000C   D082         POP       DPL
   \   00000E   02....       LJMP      ?BRET
    319          }
    320          
    321          /*********************************************************************
    322           * @fn      osal_ConvertUTCTime
    323           *
    324           * @brief   Converts UTCTime to UTCTimeStruct
    325           *
    326           * @param   tm - pointer to breakdown struct
    327           *
    328           * @param   secTime - number of seconds since 0 hrs, 0 minutes,
    329           *          0 seconds, on the 1st of January 2000 UTC
    330           *
    331           * @return  none
    332           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    333          void osal_ConvertUTCTime( UTCTimeStruct *tm, UTCTime secTime )
   \                     osal_ConvertUTCTime:
    334          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   7418         MOV       A,#0x18
   \   00000B   12....       LCALL     ?XSTACK_DISP0_8
   \   00000E   78..         MOV       R0,#?V4
   \   000010   12....       LCALL     ?L_MOV_X
    335            // calculate the time less than a day - hours, minutes, seconds
    336            {
    337              uint32 day = secTime % DAY;
   \   000013   85....       MOV       ?V0,?V4
   \   000016   85....       MOV       ?V1,?V5
   \   000019   85....       MOV       ?V2,?V6
   \   00001C   85....       MOV       ?V3,?V7
   \   00001F   90....       MOV       DPTR,#__Constant_15180
   \   000022   78..         MOV       R0,#?V8
   \   000024   12....       LCALL     ?L_MOV_X
   \   000027   78..         MOV       R0,#?V0
   \   000029   79..         MOV       R1,#?V8
   \   00002B   12....       LCALL     ?UL_DIV_MOD
    338              tm->seconds = day % 60UL;
   \   00002E   85....       MOV       ?V0,?V8
   \   000031   85....       MOV       ?V1,?V9
   \   000034   85....       MOV       ?V2,?V10
   \   000037   85....       MOV       ?V3,?V11
   \   00003A   90....       MOV       DPTR,#__Constant_3c
   \   00003D   78..         MOV       R0,#?V12
   \   00003F   12....       LCALL     ?L_MOV_X
   \   000042   78..         MOV       R0,#?V0
   \   000044   79..         MOV       R1,#?V12
   \   000046   12....       LCALL     ?UL_DIV_MOD
   \   000049   8A82         MOV       DPL,R2
   \   00004B   8B83         MOV       DPH,R3
   \   00004D   E5..         MOV       A,?V12
   \   00004F   F0           MOVX      @DPTR,A
    339              tm->minutes = (day % 3600UL) / 60UL;
   \   000050   85....       MOV       ?V12,?V8
   \   000053   85....       MOV       ?V13,?V9
   \   000056   85....       MOV       ?V14,?V10
   \   000059   85....       MOV       ?V15,?V11
   \   00005C   90....       MOV       DPTR,#__Constant_e10
   \   00005F   78..         MOV       R0,#?V0
   \   000061   12....       LCALL     ?L_MOV_X
   \   000064   78..         MOV       R0,#?V12
   \   000066   79..         MOV       R1,#?V0
   \   000068   12....       LCALL     ?UL_DIV_MOD
   \   00006B   90....       MOV       DPTR,#__Constant_3c
   \   00006E   78..         MOV       R0,#?V12
   \   000070   12....       LCALL     ?L_MOV_X
   \   000073   78..         MOV       R0,#?V0
   \   000075   79..         MOV       R1,#?V12
   \   000077   12....       LCALL     ?UL_DIV_MOD
   \   00007A   8A82         MOV       DPL,R2
   \   00007C   8B83         MOV       DPH,R3
   \   00007E   A3           INC       DPTR
   \   00007F   E5..         MOV       A,?V0
   \   000081   F0           MOVX      @DPTR,A
    340              tm->hour = day / 3600UL;
   \   000082   90....       MOV       DPTR,#__Constant_e10
   \   000085   78..         MOV       R0,#?V0
   \   000087   12....       LCALL     ?L_MOV_X
   \   00008A   78..         MOV       R0,#?V8
   \   00008C   79..         MOV       R1,#?V0
   \   00008E   12....       LCALL     ?UL_DIV_MOD
   \   000091   8A82         MOV       DPL,R2
   \   000093   8B83         MOV       DPH,R3
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   E5..         MOV       A,?V8
   \   000099   F0           MOVX      @DPTR,A
    341            }
    342          
    343            // Fill in the calendar - day, month, year
    344            {
    345              uint16 numDays = secTime / DAY;
   \   00009A   90....       MOV       DPTR,#__Constant_15180
   \   00009D   78..         MOV       R0,#?V0
   \   00009F   12....       LCALL     ?L_MOV_X
   \   0000A2   78..         MOV       R0,#?V4
   \   0000A4   79..         MOV       R1,#?V0
   \   0000A6   12....       LCALL     ?UL_DIV_MOD
   \   0000A9   85....       MOV       ?V2,?V4
   \   0000AC   85....       MOV       ?V3,?V5
    346              tm->year = BEGYEAR;
   \   0000AF   8A82         MOV       DPL,R2
   \   0000B1   8B83         MOV       DPH,R3
   \   0000B3   A3           INC       DPTR
   \   0000B4   A3           INC       DPTR
   \   0000B5   A3           INC       DPTR
   \   0000B6   A3           INC       DPTR
   \   0000B7   A3           INC       DPTR
   \   0000B8   74D0         MOV       A,#-0x30
   \   0000BA   F0           MOVX      @DPTR,A
   \   0000BB   A3           INC       DPTR
   \   0000BC   7407         MOV       A,#0x7
   \   0000BE   801E         SJMP      ??osal_ConvertUTCTime_0
    347              while ( numDays >= YearLength( tm->year ) )
    348              {
    349                numDays -= YearLength( tm->year );
   \                     ??osal_ConvertUTCTime_1:
   \   0000C0   786D         MOV       R0,#0x6d
   \                     ??osal_ConvertUTCTime_2:
   \   0000C2   E5..         MOV       A,?V2
   \   0000C4   98           SUBB      A,R0
   \   0000C5   F5..         MOV       ?V2,A
   \   0000C7   E5..         MOV       A,?V3
   \   0000C9   9401         SUBB      A,#0x1
   \   0000CB   F5..         MOV       ?V3,A
    350                tm->year++;
   \   0000CD   8E82         MOV       DPL,R6
   \   0000CF   8F83         MOV       DPH,R7
   \   0000D1   A3           INC       DPTR
   \   0000D2   A3           INC       DPTR
   \   0000D3   A3           INC       DPTR
   \   0000D4   A3           INC       DPTR
   \   0000D5   A3           INC       DPTR
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   2401         ADD       A,#0x1
   \   0000D9   F0           MOVX      @DPTR,A
   \   0000DA   A3           INC       DPTR
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   3400         ADDC      A,#0x0
   \                     ??osal_ConvertUTCTime_0:
   \   0000DE   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000E1   12....       LCALL     ?US_DIV_MOD
   \   0000E4   EA           MOV       A,R2
   \   0000E5   4B           ORL       A,R3
   \   0000E6   6018         JZ        ??osal_ConvertUTCTime_3
   \   0000E8   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000EB   12....       LCALL     ?US_DIV_MOD
   \   0000EE   EA           MOV       A,R2
   \   0000EF   4B           ORL       A,R3
   \   0000F0   6012         JZ        ??osal_ConvertUTCTime_4
   \   0000F2   8E82         MOV       DPL,R6
   \   0000F4   8F83         MOV       DPH,R7
   \   0000F6   A3           INC       DPTR
   \   0000F7   A3           INC       DPTR
   \   0000F8   A3           INC       DPTR
   \   0000F9   A3           INC       DPTR
   \   0000FA   A3           INC       DPTR
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   5403         ANL       A,#0x3
   \   0000FE   7004         JNZ       ??osal_ConvertUTCTime_4
   \                     ??osal_ConvertUTCTime_3:
   \   000100   786E         MOV       R0,#0x6e
   \   000102   8002         SJMP      ??osal_ConvertUTCTime_5
   \                     ??osal_ConvertUTCTime_4:
   \   000104   786D         MOV       R0,#0x6d
   \                     ??osal_ConvertUTCTime_5:
   \   000106   E5..         MOV       A,?V2
   \   000108   98           SUBB      A,R0
   \   000109   E5..         MOV       A,?V3
   \   00010B   9401         SUBB      A,#0x1
   \   00010D   8E82         MOV       DPL,R6
   \   00010F   8F83         MOV       DPH,R7
   \   000111   A3           INC       DPTR
   \   000112   A3           INC       DPTR
   \   000113   A3           INC       DPTR
   \   000114   A3           INC       DPTR
   \   000115   4026         JC        ??osal_ConvertUTCTime_6
   \   000117   12....       LCALL     ??Subroutine6_0 & 0xFFFF
    351              }
   \                     ??CrossCallReturnLabel_11:
   \   00011A   12....       LCALL     ?US_DIV_MOD
   \   00011D   EA           MOV       A,R2
   \   00011E   4B           ORL       A,R3
   \   00011F   6018         JZ        ??osal_ConvertUTCTime_7
   \   000121   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000124   12....       LCALL     ?US_DIV_MOD
   \   000127   EA           MOV       A,R2
   \   000128   4B           ORL       A,R3
   \   000129   6095         JZ        ??osal_ConvertUTCTime_1
   \   00012B   8E82         MOV       DPL,R6
   \   00012D   8F83         MOV       DPH,R7
   \   00012F   A3           INC       DPTR
   \   000130   A3           INC       DPTR
   \   000131   A3           INC       DPTR
   \   000132   A3           INC       DPTR
   \   000133   A3           INC       DPTR
   \   000134   E0           MOVX      A,@DPTR
   \   000135   5403         ANL       A,#0x3
   \   000137   7087         JNZ       ??osal_ConvertUTCTime_1
   \                     ??osal_ConvertUTCTime_7:
   \   000139   786E         MOV       R0,#0x6e
   \   00013B   8085         SJMP      ??osal_ConvertUTCTime_2
    352          
    353              tm->month = 0;
   \                     ??osal_ConvertUTCTime_6:
   \   00013D   E4           CLR       A
   \   00013E   8023         SJMP      ??osal_ConvertUTCTime_8
    354              while ( numDays >= monthLength( IsLeapYear( tm->year ), tm->month ) )
    355              {
    356                numDays -= monthLength( IsLeapYear( tm->year ), tm->month );
   \                     ??osal_ConvertUTCTime_9:
   \   000140   7900         MOV       R1,#0x0
   \                     ??osal_ConvertUTCTime_10:
   \   000142   EE           MOV       A,R6
   \   000143   2404         ADD       A,#0x4
   \   000145   F5..         MOV       ?V0,A
   \   000147   E4           CLR       A
   \   000148   3F           ADDC      A,R7
   \   000149   F5..         MOV       ?V1,A
   \   00014B                ; Setup parameters for call to function monthLength
   \   00014B   85..82       MOV       DPL,?V0
   \   00014E   F583         MOV       DPH,A
   \   000150   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000153   F5..         MOV       ?V2,A
   \   000155   E5..         MOV       A,?V3
   \   000157   9400         SUBB      A,#0x0
   \   000159   F5..         MOV       ?V3,A
    357                tm->month++;
   \   00015B   85..82       MOV       DPL,?V0
   \   00015E   85..83       MOV       DPH,?V1
   \   000161   E0           MOVX      A,@DPTR
   \   000162   04           INC       A
   \                     ??osal_ConvertUTCTime_8:
   \   000163   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000166   12....       LCALL     ?US_DIV_MOD
   \   000169   EA           MOV       A,R2
   \   00016A   4B           ORL       A,R3
   \   00016B   6018         JZ        ??osal_ConvertUTCTime_11
   \   00016D   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000170   12....       LCALL     ?US_DIV_MOD
   \   000173   EA           MOV       A,R2
   \   000174   4B           ORL       A,R3
   \   000175   6012         JZ        ??osal_ConvertUTCTime_12
   \   000177   8E82         MOV       DPL,R6
   \   000179   8F83         MOV       DPH,R7
   \   00017B   A3           INC       DPTR
   \   00017C   A3           INC       DPTR
   \   00017D   A3           INC       DPTR
   \   00017E   A3           INC       DPTR
   \   00017F   A3           INC       DPTR
   \   000180   E0           MOVX      A,@DPTR
   \   000181   5403         ANL       A,#0x3
   \   000183   7004         JNZ       ??osal_ConvertUTCTime_12
   \                     ??osal_ConvertUTCTime_11:
   \   000185   7901         MOV       R1,#0x1
   \   000187   8002         SJMP      ??osal_ConvertUTCTime_13
   \                     ??osal_ConvertUTCTime_12:
   \   000189   7900         MOV       R1,#0x0
   \                     ??osal_ConvertUTCTime_13:
   \   00018B                ; Setup parameters for call to function monthLength
   \   00018B   8E82         MOV       DPL,R6
   \   00018D   8F83         MOV       DPH,R7
   \   00018F   A3           INC       DPTR
   \   000190   A3           INC       DPTR
   \   000191   A3           INC       DPTR
   \   000192   A3           INC       DPTR
   \   000193   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000196   E5..         MOV       A,?V3
   \   000198   9400         SUBB      A,#0x0
   \   00019A   8E82         MOV       DPL,R6
   \   00019C   8F83         MOV       DPH,R7
   \   00019E   A3           INC       DPTR
   \   00019F   A3           INC       DPTR
   \   0001A0   A3           INC       DPTR
   \   0001A1   402A         JC        ??osal_ConvertUTCTime_14
   \   0001A3   12....       LCALL     ??Subroutine5_0 & 0xFFFF
    358              }
   \                     ??CrossCallReturnLabel_12:
   \   0001A6   12....       LCALL     ?US_DIV_MOD
   \   0001A9   EA           MOV       A,R2
   \   0001AA   4B           ORL       A,R3
   \   0001AB   601B         JZ        ??osal_ConvertUTCTime_15
   \   0001AD   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0001B0   12....       LCALL     ?US_DIV_MOD
   \   0001B3   EA           MOV       A,R2
   \   0001B4   4B           ORL       A,R3
   \   0001B5   6089         JZ        ??osal_ConvertUTCTime_9
   \   0001B7   8E82         MOV       DPL,R6
   \   0001B9   8F83         MOV       DPH,R7
   \   0001BB   A3           INC       DPTR
   \   0001BC   A3           INC       DPTR
   \   0001BD   A3           INC       DPTR
   \   0001BE   A3           INC       DPTR
   \   0001BF   A3           INC       DPTR
   \   0001C0   E0           MOVX      A,@DPTR
   \   0001C1   5403         ANL       A,#0x3
   \   0001C3   6003         JZ        $+5
   \   0001C5   02....       LJMP      ??osal_ConvertUTCTime_9 & 0xFFFF
   \                     ??osal_ConvertUTCTime_15:
   \   0001C8   7901         MOV       R1,#0x1
   \   0001CA   02....       LJMP      ??osal_ConvertUTCTime_10 & 0xFFFF
    359          
    360              tm->day = numDays;
   \                     ??osal_ConvertUTCTime_14:
   \   0001CD   E5..         MOV       A,?V2
   \   0001CF   F0           MOVX      @DPTR,A
    361            }
    362          }
   \   0001D0   7F10         MOV       R7,#0x10
   \   0001D2   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   12....       LCALL     `??monthLength::?relay`; Banked call to: monthLength
   \   000005   E9           MOV       A,R1
   \   000006   F8           MOV       R0,A
   \   000007   C3           CLR       C
   \   000008   E5..         MOV       A,?V2
   \   00000A   98           SUBB      A,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008                REQUIRE ??Subroutine5_0
   \   000008                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine6_0
   \   000001                ; // Fall through to label ??Subroutine6_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F8           MOV       R0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F9           MOV       R1,A
   \   000006   7A90         MOV       R2,#-0x70
   \   000008   7B01         MOV       R3,#0x1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F8           MOV       R0,A
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F9           MOV       R1,A
   \   00000E   7A64         MOV       R2,#0x64
   \   000010   7B00         MOV       R3,#0x0
   \   000012   22           RET
    363          
    364          /*********************************************************************
    365           * @fn      monthLength
    366           *
    367           * @param   lpyr - 1 for leap year, 0 if not
    368           *
    369           * @param   mon - 0 - 11 (jan - dec)
    370           *
    371           * @return  number of days in specified month
    372           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    373          static uint8 monthLength( uint8 lpyr, uint8 mon )
   \                     monthLength:
    374          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   \   000001   F8           MOV       R0,A
    375            uint8 days = 31;
   \   000002   791F         MOV       R1,#0x1f
    376          
    377          	if ( mon == 1 ) // feb
   \   000004   7401         MOV       A,#0x1
   \   000006   6A           XRL       A,R2
   \   000007   7006         JNZ       ??monthLength_0
    378            {
    379          		days = ( 28 + lpyr );
   \   000009   741C         MOV       A,#0x1c
   \   00000B   28           ADD       A,R0
   \   00000C   F9           MOV       R1,A
   \   00000D   800E         SJMP      ??monthLength_1
    380            }
    381            else
    382            {
    383              if ( mon > 6 ) // aug-dec
   \                     ??monthLength_0:
   \   00000F   EA           MOV       A,R2
   \   000010   C3           CLR       C
   \   000011   9407         SUBB      A,#0x7
   \   000013   4001         JC        ??monthLength_2
    384              {
    385                mon--;
   \   000015   1A           DEC       R2
    386              }
    387          
    388              if ( mon & 1 )
   \                     ??monthLength_2:
   \   000016   EA           MOV       A,R2
   \   000017   A2E0         MOV       C,0xE0 /* A   */.0
   \   000019   5002         JNC       ??monthLength_1
    389              {
    390                days = 30;
   \   00001B   791E         MOV       R1,#0x1e
    391              }
    392            }
    393          
    394          	return ( days );
   \                     ??monthLength_1:
   \   00001D   02....       LJMP      ?BRET
    395          }
    396          
    397          /*********************************************************************
    398           * @fn      osal_ConvertUTCSecs
    399           *
    400           * @brief   Converts a UTCTimeStruct to UTCTime
    401           *
    402           * @param   tm - pointer to provided struct
    403           *
    404           * @return  number of seconds since 00:00:00 on 01/01/2000 (UTC)
    405           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    406          UTCTime osal_ConvertUTCSecs( UTCTimeStruct *tm )
   \                     osal_ConvertUTCSecs:
    407          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    408            uint32 seconds;
    409          
    410            /* Seconds for the partial day */
    411            seconds = (((tm->hour * 60UL) + tm->minutes) * 60UL) + tm->seconds;
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F5..         MOV       ?V4,A
   \   000012   E4           CLR       A
   \   000013   F5..         MOV       ?V5,A
   \   000015   F5..         MOV       ?V6,A
   \   000017   F5..         MOV       ?V7,A
   \   000019   90....       MOV       DPTR,#__Constant_3c
   \   00001C   78..         MOV       R0,#?V0
   \   00001E   12....       LCALL     ?L_MOV_X
   \   000021   78..         MOV       R0,#?V4
   \   000023   79..         MOV       R1,#?V0
   \   000025   12....       LCALL     ?L_MUL
   \   000028   8A82         MOV       DPL,R2
   \   00002A   8B83         MOV       DPH,R3
   \   00002C   A3           INC       DPTR
   \   00002D   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000030   12....       LCALL     ?L_ADD
   \   000033   90....       MOV       DPTR,#__Constant_3c
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?L_MOV_X
   \   00003B   78..         MOV       R0,#?V4
   \   00003D   79..         MOV       R1,#?V0
   \   00003F   12....       LCALL     ?L_MUL
   \   000042   8A82         MOV       DPL,R2
   \   000044   8B83         MOV       DPH,R3
   \   000046   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000049   12....       LCALL     ?L_ADD
    412          
    413            /* Account for previous complete days */
    414            {
    415              /* Start with complete days in current month */
    416              uint16 days = tm->day;
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   F5..         MOV       ?V0,A
    417          
    418              /* Next, complete months in current year */
    419              {
    420                int8 month = tm->month;
   \   000052   8A82         MOV       DPL,R2
   \   000054   8B83         MOV       DPH,R3
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   F5..         MOV       ?V2,A
   \   00005D   8011         SJMP      ??osal_ConvertUTCSecs_0
    421                while ( --month >= 0 )
    422                {
    423                  days += monthLength( IsLeapYear( tm->year ), month );
   \                     ??osal_ConvertUTCSecs_1:
   \   00005F   7900         MOV       R1,#0x0
   \                     ??osal_ConvertUTCSecs_2:
   \   000061                ; Setup parameters for call to function monthLength
   \   000061   AA..         MOV       R2,?V2
   \   000063   12....       LCALL     `??monthLength::?relay`; Banked call to: monthLength
   \   000066   E5..         MOV       A,?V0
   \   000068   29           ADD       A,R1
   \   000069   F5..         MOV       ?V0,A
   \   00006B   E4           CLR       A
   \   00006C   35..         ADDC      A,?V1
   \   00006E   F5..         MOV       ?V1,A
   \                     ??osal_ConvertUTCSecs_0:
   \   000070   74FF         MOV       A,#-0x1
   \   000072   25..         ADD       A,?V2
   \   000074   F5..         MOV       ?V2,A
   \   000076   C3           CLR       C
   \   000077   9400         SUBB      A,#0x0
   \   000079   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00007B   65D0         XRL       A,PSW
   \   00007D   33           RLC       A
   \   00007E   8E82         MOV       DPL,R6
   \   000080   8F83         MOV       DPH,R7
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   E0           MOVX      A,@DPTR
   \   000088   402B         JC        ??osal_ConvertUTCSecs_3
   \   00008A   F8           MOV       R0,A
   \   00008B   A3           INC       DPTR
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   F9           MOV       R1,A
   \   00008E   7A90         MOV       R2,#-0x70
   \   000090   7B01         MOV       R3,#0x1
   \   000092   12....       LCALL     ?US_DIV_MOD
   \   000095   EA           MOV       A,R2
   \   000096   4B           ORL       A,R3
   \   000097   6018         JZ        ??osal_ConvertUTCSecs_4
   \   000099   12....       LCALL     ?Subroutine1 & 0xFFFF
    424                }
    425              }
   \                     ??CrossCallReturnLabel_4:
   \   00009C   12....       LCALL     ?US_DIV_MOD
   \   00009F   EA           MOV       A,R2
   \   0000A0   4B           ORL       A,R3
   \   0000A1   60BC         JZ        ??osal_ConvertUTCSecs_1
   \   0000A3   8E82         MOV       DPL,R6
   \   0000A5   8F83         MOV       DPH,R7
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   A3           INC       DPTR
   \   0000AB   A3           INC       DPTR
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   5403         ANL       A,#0x3
   \   0000AF   70AE         JNZ       ??osal_ConvertUTCSecs_1
   \                     ??osal_ConvertUTCSecs_4:
   \   0000B1   7901         MOV       R1,#0x1
   \   0000B3   80AC         SJMP      ??osal_ConvertUTCSecs_2
    426          
    427              /* Next, complete years before current year */
    428              {
    429                uint16 year = tm->year;
   \                     ??osal_ConvertUTCSecs_3:
   \   0000B5   FC           MOV       R4,A
   \   0000B6   A3           INC       DPTR
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   FD           MOV       R5,A
   \   0000B9   800D         SJMP      ??osal_ConvertUTCSecs_5
    430                while ( --year >= BEGYEAR )
    431                {
    432                  days += YearLength( year );
   \                     ??osal_ConvertUTCSecs_6:
   \   0000BB   786D         MOV       R0,#0x6d
   \                     ??osal_ConvertUTCSecs_7:
   \   0000BD   E5..         MOV       A,?V0
   \   0000BF   28           ADD       A,R0
   \   0000C0   F5..         MOV       ?V0,A
   \   0000C2   E5..         MOV       A,?V1
   \   0000C4   3401         ADDC      A,#0x1
   \   0000C6   F5..         MOV       ?V1,A
   \                     ??osal_ConvertUTCSecs_5:
   \   0000C8   EC           MOV       A,R4
   \   0000C9   24FF         ADD       A,#-0x1
   \   0000CB   1C           DEC       R4
   \   0000CC   ED           MOV       A,R5
   \   0000CD   34FF         ADDC      A,#-0x1
   \   0000CF   FD           MOV       R5,A
   \   0000D0   C3           CLR       C
   \   0000D1   EC           MOV       A,R4
   \   0000D2   94D0         SUBB      A,#-0x30
   \   0000D4   ED           MOV       A,R5
   \   0000D5   9407         SUBB      A,#0x7
   \   0000D7   4027         JC        ??osal_ConvertUTCSecs_8
   \   0000D9   EC           MOV       A,R4
   \   0000DA   F8           MOV       R0,A
   \   0000DB   ED           MOV       A,R5
   \   0000DC   F9           MOV       R1,A
   \   0000DD   7A90         MOV       R2,#-0x70
   \   0000DF   7B01         MOV       R3,#0x1
   \   0000E1   12....       LCALL     ?US_DIV_MOD
   \   0000E4   EA           MOV       A,R2
   \   0000E5   4B           ORL       A,R3
   \   0000E6   6014         JZ        ??osal_ConvertUTCSecs_9
   \   0000E8   EC           MOV       A,R4
   \   0000E9   F8           MOV       R0,A
   \   0000EA   ED           MOV       A,R5
   \   0000EB   F9           MOV       R1,A
   \   0000EC   7A64         MOV       R2,#0x64
   \   0000EE   7B00         MOV       R3,#0x0
   \   0000F0   12....       LCALL     ?US_DIV_MOD
   \   0000F3   EA           MOV       A,R2
   \   0000F4   4B           ORL       A,R3
   \   0000F5   60C4         JZ        ??osal_ConvertUTCSecs_6
   \   0000F7   EC           MOV       A,R4
   \   0000F8   5403         ANL       A,#0x3
   \   0000FA   70BF         JNZ       ??osal_ConvertUTCSecs_6
   \                     ??osal_ConvertUTCSecs_9:
   \   0000FC   786E         MOV       R0,#0x6e
   \   0000FE   80BD         SJMP      ??osal_ConvertUTCSecs_7
    433                }
    434              }
    435          
    436              /* Add total seconds before partial day */
    437              seconds += (days * DAY);
    438            }
    439          
    440            return ( seconds );
   \                     ??osal_ConvertUTCSecs_8:
   \   000100   E4           CLR       A
   \   000101   F5..         MOV       ?V2,A
   \   000103   90....       MOV       DPTR,#__Constant_15180
   \   000106   78..         MOV       R0,#?V8
   \   000108   12....       LCALL     ?L_MOV_X
   \   00010B   78..         MOV       R0,#?V0
   \   00010D   79..         MOV       R1,#?V8
   \   00010F   12....       LCALL     ?L_MUL
   \   000112   78..         MOV       R0,#?V4
   \   000114   79..         MOV       R1,#?V0
   \   000116   12....       LCALL     ?L_ADD
   \   000119   AA..         MOV       R2,?V4
   \   00011B   AB..         MOV       R3,?V5
   \   00011D   AC..         MOV       R4,?V6
   \   00011F   AD..         MOV       R5,?V7
   \   000121   02....       LJMP      ?Subroutine0 & 0xFFFF
    441          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   E4           CLR       A
   \   000004   F5..         MOV       ?V1,A
   \   000006   F5..         MOV       ?V2,A
   \   000008   F5..         MOV       ?V3,A
   \   00000A   78..         MOV       R0,#?V4
   \   00000C   79..         MOV       R1,#?V0
   \   00000E   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4:
   \   000000   04000000     DD 4

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_fffce019:
   \   000000   19E0FCFF     DD 4294762521

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_fff8:
   \   000000   F8FF0000     DD 65528

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_31fe7:
   \   000000   E71F0300     DD 204775

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_15180:
   \   000000   80510100     DD 86400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3c:
   \   000000   3C000000     DD 60

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_e10:
   \   000000   100E0000     DD 3600

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     24   monthLength
      0     22   osalTimeUpdate
        0     20   -> macMcuPrecisionCount
        0     22   -> osalMcuDivide31By16To16
        0     20   -> osalTimerUpdate
      0     20   osal_ConvertUTCSecs
        0     20   -> monthLength
      1     28   osal_ConvertUTCTime
        0     24   -> monthLength
      2      0   osal_getClock
      0     12   osal_setClock


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ??Subroutine5_0
      11  ??Subroutine6_0
       5  ?Subroutine0
      19  ?Subroutine1
       8  ?Subroutine2
      15  ?Subroutine3
      12  ?Subroutine4
       4  OSAL_timeSeconds
       1  _A_IEN0
       4  __Constant_15180
       4  __Constant_31fe7
       4  __Constant_3c
       4  __Constant_3e8
       4  __Constant_4
       4  __Constant_e10
       4  __Constant_fff8
       4  __Constant_fffce019
      32  monthLength
     315  osalTimeUpdate
     292  osal_ConvertUTCSecs
     469  osal_ConvertUTCTime
      17  osal_getClock
      35  osal_setClock
       4  previousMacTimerTick
       2  remUsTicks
       4  timeMSec
      36  -- Other

 
 1 231 bytes in segment BANKED_CODE
    36 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
    32 bytes in segment XDATA_ROM_C
    14 bytes in segment XDATA_Z
 
    36 bytes of CODE     memory
     0 bytes of CONST    memory (+ 32 bytes shared)
     0 bytes of DATA     memory (+  1 byte  shared)
 1 231 bytes of HUGECODE memory
    14 bytes of XDATA    memory

Errors: none
Warnings: none
