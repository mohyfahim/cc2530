###############################################################################
#
# IAR C/C++ Compiler V10.40.1.7397 for 8051               01/May/2021  14:31:39
# Copyright 2004-2021 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\Texas Instruments\Z-Stack 3.0.2\Components\stack\zdo\ZDSecMgr.c
#    Command line       =  
#        -f C:\Users\asus\AppData\Local\Temp\EW7A73.tmp ("E:\Texas
#        Instruments\Z-Stack 3.0.2\Components\stack\zdo\ZDSecMgr.c" -D
#        BDB_FINDING_BINDING_CAPABILITY_ENABLED=0 -D TC_LINKKEY_JOIN -D
#        HAL_UART_DMA_RX_MAX=128 -D MAXMEMHEAP=2765 -D NWK_MAX_DEVICE_LIST=10
#        -D ZDSECMGR_TC_DEVICE_MAX=30 -D DISABLE_GREENPOWER_BASIC_PROXY -D
#        POWER_SAVING -D FEATURE_SYSTEM_STATS -D MT_GP_CB_FUNC -D ASSERT_RESET
#        -D MAKE_CRC_SHDW -lC "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\List" -lA
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\List"
#        --diag_suppress Pe001,Pa010 -o "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\Obj" -e
#        --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_GP_CB_FUNC -DMT_APP_FUNC -DMT_APP_CNF_FUNC)
#        -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg" -I
#        "E:\Texas Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\Source\" -I "E:\Texas
#        Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\..\Source\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Utilities\BootLoad\Source\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\gp\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\bdb\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  English_USA.1252
#    List file          =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\List\ZDSecMgr.lst
#    Object file        =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\Obj\ZDSecMgr.r51
#
###############################################################################

E:\Texas Instruments\Z-Stack 3.0.2\Components\stack\zdo\ZDSecMgr.c
      1          /******************************************************************************
      2            Filename:       ZDSecMgr.c
      3            Revised:        $Date: 2014-06-05 11:25:00 -0700 (Thu, 05 Jun 2014) $
      4            Revision:       $Revision: 38833 $
      5          
      6            Description:    The ZigBee Device Security Manager.
      7          
      8          
      9            Copyright 2005-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          #ifdef __cplusplus
     41          extern "C"
     42          {
     43          #endif
     44          
     45          /******************************************************************************
     46           * INCLUDES
     47           */
     48          #include "ZComDef.h"
     49          #include "OSAL.h"
     50          #include "OSAL_Nv.h"
     51          #include "ZGlobals.h"
     52          #include "ssp.h"
     53          #include "nwk_globals.h"
     54          #include "nwk.h"
     55          #include "NLMEDE.h"
     56          #include "AddrMgr.h"
     57          #include "AssocList.h"
     58          #include "APSMEDE.h"
     59          #include "ZDConfig.h"
     60          #include "ZDSecMgr.h"
     61            
     62          #include "bdb.h"
     63          #include "bdb_interface.h"
     64          
     65          /******************************************************************************
     66           * CONSTANTS
     67           */
     68          // maximum number of devices managed by this Security Manager
     69          #if !defined ( ZDSECMGR_DEVICE_MAX )
     70            #define ZDSECMGR_DEVICE_MAX 3
     71          #endif
     72          
     73          // maximum number of LINK keys this device may store
     74          #define ZDSECMGR_ENTRY_MAX ZDSECMGR_DEVICE_MAX
     75          
     76          // total number of stored devices
     77          #if !defined ( ZDSECMGR_STORED_DEVICES )
     78            #define ZDSECMGR_STORED_DEVICES 3
     79          #endif
     80          
     81          // Joining Device Policies: r21 spec 4.9.1
     82          // This boolean indicates whether the device will request a new Trust Center Link key after joining.
     83          // TC link key cannot be requested if join is performed on distributed nwk

   \                                 In  segment XDATA_I, align 1, keep-with-next
     84          bool  requestNewTrustCenterLinkKey = TRUE;  
   \                     requestNewTrustCenterLinkKey:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for requestNewTrustCenterLinkKey`
   \   000001                REQUIRE __INIT_XDATA_I
     85          //This integer indicates the maximum time in seconds that a device will wait for a response to a 
     86          //request for a Trust Center link key.

   \                                 In  segment XDATA_I, align 1, keep-with-next
     87          uint32  requestLinkKeyTimeout = BDBC_TC_LINK_KEY_EXANGE_TIMEOUT;
   \                     requestLinkKeyTimeout:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for requestLinkKeyTimeout>`
   \   000004                REQUIRE __INIT_XDATA_I
     88           //bool acceptNewUnsolicitedApplicationLinkKey;   
     89          
     90          // APSME Stub Implementations
     91          #define ZDSecMgrLinkKeySet       APSME_LinkKeySet
     92          #define ZDSecMgrLinkKeyNVIdGet   APSME_LinkKeyNVIdGet
     93          #define ZDSecMgrKeyFwdToChild    APSME_KeyFwdToChild
     94          #define ZDSecMgrIsLinkKeyValid   APSME_IsLinkKeyValid
     95          
     96          
     97          
     98          /******************************************************************************
     99           * TYPEDEFS
    100           */
    101          typedef struct
    102          {
    103            uint16            ami;
    104            uint16            keyNvId;   // index to the Link Key table in NV
    105            ZDSecMgr_Authentication_Option authenticateOption;
    106          } ZDSecMgrEntry_t;
    107          
    108          typedef struct
    109          {
    110            uint16          nwkAddr;
    111            uint8*          extAddr;
    112            uint16          parentAddr;
    113            uint8           secure;
    114            uint8           devStatus;
    115          } ZDSecMgrDevice_t;
    116          
    117          /******************************************************************************
    118           * EXTERNAL VARIABLES
    119           */
    120          extern CONST uint8 gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES;
    121          extern pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
    122          
    123          
    124          /******************************************************************************
    125           * EXTERNAL FUNCTIONS
    126           */
    127          extern void   ZDApp_ResetTimerCancel( void );
    128          /******************************************************************************
    129           * LOCAL VARIABLES
    130           */
    131          #if 0 // Taken out because the following functionality is only used for test
    132                // purpose. A more efficient (above) way is used. It can be put
    133                // back in if customers request for a white/black list feature.
    134          uint8 ZDSecMgrStoredDeviceList[ZDSECMGR_STORED_DEVICES][Z_EXTADDR_LEN] =
    135          {
    136            { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    137            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 },
    138            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    139          };
    140          #endif
    141          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          uint8 ZDSecMgrTCExtAddr[Z_EXTADDR_LEN]=
   \                     ZDSecMgrTCExtAddr:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    143            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    144          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          uint8 ZDSecMgrTCAuthenticated = FALSE;
   \                     ZDSecMgrTCAuthenticated:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    146          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          ZDSecMgrEntry_t* ZDSecMgrEntries  = NULL;
   \                     ZDSecMgrEntries:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    148          
    149          void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
    150          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          uint8 ZDSecMgrPermitJoiningEnabled;
   \                     ZDSecMgrPermitJoiningEnabled:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint8 ZDSecMgrPermitJoiningTimed;
   \                     ZDSecMgrPermitJoiningTimed:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    153          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          APSME_TCLKDevEntry_t TrustCenterLinkKey;
   \                     TrustCenterLinkKey:
   \   000000                DS 19
   \   000013                REQUIRE __INIT_XDATA_Z
    155          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    156          APSME_ApsLinkKeyFrmCntr_t ApsLinkKeyFrmCntr[ZDSECMGR_ENTRY_MAX];
   \                     ApsLinkKeyFrmCntr:
   \   000000                DS 27
   \   00001B                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          APSME_TCLinkKeyFrmCntr_t TCLinkKeyFrmCntr[ZDSECMGR_TC_DEVICE_MAX];
   \                     TCLinkKeyFrmCntr:
   \   000000                DS 270
   \   00010E                REQUIRE __INIT_XDATA_Z
    158          

   \                                 In  segment CODE_C, align 1
    159           CONST uint16 gZDSECMGR_TC_DEVICE_MAX = ZDSECMGR_TC_DEVICE_MAX;
   \                     gZDSECMGR_TC_DEVICE_MAX:
   \   000000   1E00         DW 30

   \                                 In  segment CODE_C, align 1
    160           CONST uint16 gZDSECMGR_TC_DEVICE_IC_MAX = ZDSECMGR_TC_DEVICE_IC_MAX;
   \                     gZDSECMGR_TC_DEVICE_IC_MAX:
   \   000000   0C00         DW 12

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161           uint8  gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = ZDSECMGR_TC_ATTEMPT_DEFAULT_KEY;
   \                     gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    162          /******************************************************************************
    163           * PRIVATE FUNCTIONS
    164           *
    165           *   ZDSecMgrAddrStore
    166           *   ZDSecMgrExtAddrStore
    167           *   ZDSecMgrExtAddrLookup
    168           *   ZDSecMgrEntryInit
    169           *   ZDSecMgrEntryLookup
    170           *   ZDSecMgrEntryLookupAMI
    171           *   ZDSecMgrEntryLookupExt
    172           *   ZDSecMgrEntryLookupExtGetIndex
    173           *   ZDSecMgrEntryFree
    174           *   ZDSecMgrEntryNew
    175           *   ZDSecMgrAppKeyGet
    176           *   ZDSecMgrAppKeyReq
    177           *   ZDSecMgrTclkReq
    178           *   ZDSecMgrAppConfKeyReq 
    179           *   ZDSecMgrSendNwkKey
    180           *   ZDSecMgrDeviceRemove
    181           *   ZDSecMgrDeviceValidateRM
    182           *   ZDSecMgrDeviceValidate
    183           *   ZDSecMgrDeviceJoin
    184           *   ZDSecMgrDeviceJoinDirect
    185           *   ZDSecMgrDeviceJoinFwd
    186           *   ZDSecMgrDeviceNew
    187           *   ZDSecMgrAssocDeviceAuth
    188           *   ZDSecMgrAuthNwkKey
    189           *   APSME_TCLinkKeyInit
    190           *   APSME_IsDefaultTCLK
    191           */
    192          
    193          //-----------------------------------------------------------------------------
    194          // address management
    195          //-----------------------------------------------------------------------------
    196          ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
    197          ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
    198          ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami );
    199          
    200          //-----------------------------------------------------------------------------
    201          // Trust Center management
    202          //-----------------------------------------------------------------------------
    203          uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr );
    204          void ZDSecMgrTCDataLoad( uint8* extAddr );
    205          
    206          //-----------------------------------------------------------------------------
    207          // entry data
    208          //-----------------------------------------------------------------------------
    209          void ZDSecMgrEntryInit(uint8 state);
    210          ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry );
    211          ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry );
    212          ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
    213          ZStatus_t ZDSecMgrEntryLookupExtGetIndex( uint8* extAddr, ZDSecMgrEntry_t** entry, uint16* entryIndex );
    214          ZStatus_t ZDSecMgrEntryLookupAMIGetIndex( uint16 ami, uint16* entryIndex );
    215          void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry );
    216          ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry );
    217          ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option );
    218          void ZDSecMgrApsLinkKeyInit(uint8 setDefault);
    219          #if defined ( NV_RESTORE )
    220          static void ZDSecMgrWriteNV(void);
    221          static void ZDSecMgrRestoreFromNV(void);
    222          static void ZDSecMgrUpdateNV( uint16 index );
    223          #endif
    224          
    225          //-----------------------------------------------------------------------------
    226          // key support
    227          //-----------------------------------------------------------------------------
    228          ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
    229                                       uint8*  initExtAddr,
    230                                       uint16  partNwkAddr,
    231                                       uint8*  partExtAddr,
    232                                       uint8** key,
    233                                       uint8*  keyType );
    234          void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind );
    235          void ZDSecMgrTclkReq( ZDO_RequestKeyInd_t* ind );
    236          void ZDSecMgrAppConfKeyReq( ZDO_VerifyKeyInd_t* ind );
    237          ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device );
    238          void ZDSecMgrNwkKeyInit(uint8 setDefault);
    239          
    240          //-----------------------------------------------------------------------------
    241          // device management
    242          //-----------------------------------------------------------------------------
    243          void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device );
    244          ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device );
    245          ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device );
    246          ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device );
    247          ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device );
    248          ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device );
    249          ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* device );
    250          
    251          //-----------------------------------------------------------------------------
    252          // association management
    253          //-----------------------------------------------------------------------------
    254          void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc );
    255          
    256          //-----------------------------------------------------------------------------
    257          // authentication management
    258          //-----------------------------------------------------------------------------
    259          void ZDSecMgrAuthNwkKey( void );
    260          
    261          //-----------------------------------------------------------------------------
    262          // APSME function
    263          //-----------------------------------------------------------------------------
    264          void APSME_TCLinkKeyInit( uint8 setDefault );
    265          uint8 APSME_IsDefaultTCLK( uint8 *extAddr );
    266          void ZDSecMgrGenerateSeed(uint8 setDefault );
    267          void ZDSecMgrGenerateKeyFromSeed(uint8 *extAddr, uint8 shift, uint8 *key);
    268          /******************************************************************************
    269           * @fn          ZDSecMgrAddrStore
    270           *
    271           * @brief       Store device addresses.
    272           *
    273           * @param       nwkAddr - [in] NWK address
    274           * @param       extAddr - [in] EXT address
    275           * @param       ami     - [out] Address Manager index
    276           *
    277           * @return      ZStatus_t
    278           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    279          ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
   \                     ZDSecMgrAddrStore:
    280          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    281            ZStatus_t      status;
    282            AddrMgrEntry_t entry;
    283          
    284          
    285            // add entry
    286            entry.user    = ADDRMGR_USER_SECURITY;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   7402         MOV       A,#0x2
   \   000012   F0           MOVX      @DPTR,A
    287            entry.nwkAddr = nwkAddr;
   \   000013   14           DEC       A
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine16 & 0xFFFF
    288            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_10:
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   AA82         MOV       R2,DPL
   \   00001F   AB83         MOV       R3,DPH
   \   000021   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   \   000024   7416         MOV       A,#0x16
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   12....       LCALL     ?Subroutine31 & 0xFFFF
    289          
    290            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   \                     ??CrossCallReturnLabel_36:
   \   00002C   700A         JNZ       ??ZDSecMgrAddrStore_0
    291            {
    292              // return successful results
    293              *ami   = entry.index;
   \   00002E   740B         MOV       A,#0xb
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   12....       LCALL     ?Subroutine11 & 0xFFFF
    294              status = ZSuccess;
    295            }
   \                     ??CrossCallReturnLabel_145:
   \   000036   8008         SJMP      ??CrossCallReturnLabel_21
    296            else
    297            {
    298              // return failed results
    299              *ami   = entry.index;
   \                     ??ZDSecMgrAddrStore_0:
   \   000038   740B         MOV       A,#0xb
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   12....       LCALL     ?Subroutine22 & 0xFFFF
    300              status = ZNwkUnknownDevice;
    301            }
    302          
    303            return status;
   \                     ??CrossCallReturnLabel_21:
   \   000040   02....       LJMP      ?Subroutine0 & 0xFFFF
    304          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000003   FE           MOV       R6,A
   \   000004   E9           MOV       A,R1
   \   000005   FF           MOV       R7,A
   \   000006                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000006                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000006   AA..         MOV       R2,?XSP + 0
   \   000008   AB..         MOV       R3,?XSP + 1
   \   00000A   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00000D   E9           MOV       A,R1
   \   00000E   6401         XRL       A,#0x1
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000003   8E82         MOV       DPL,R6
   \   000005   8F83         MOV       DPH,R7
   \   000007   E8           MOV       A,R0
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   E9           MOV       A,R1
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   79C8         MOV       R1,#-0x38
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004                REQUIRE ??Subroutine98_0
   \   000004                ; // Fall through to label ??Subroutine98_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine98_0:
   \   000000   F9           MOV       R1,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005                REQUIRE ??Subroutine99_0
   \   000005                ; // Fall through to label ??Subroutine99_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine99_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   7900         MOV       R1,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000003   E8           MOV       A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000005                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000005                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000005   7403         MOV       A,#0x3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   740D         MOV       A,#0xd
   \   000002                REQUIRE ??Subroutine114_0
   \   000002                ; // Fall through to label ??Subroutine114_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine114_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine115_0
   \   000003                ; // Fall through to label ??Subroutine115_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine115_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    305          
    306          /******************************************************************************
    307           * @fn          ZDSecMgrExtAddrStore
    308           *
    309           * @brief       Store EXT address.
    310           *
    311           * @param       extAddr - [in] EXT address
    312           * @param       ami     - [out] Address Manager index
    313           *
    314           * @return      ZStatus_t
    315           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    316          ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
   \                     ZDSecMgrExtAddrStore:
    317          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    318            ZStatus_t      status;
    319            AddrMgrEntry_t entry;
    320          
    321          
    322            // add entry
    323            entry.user    = ADDRMGR_USER_SECURITY;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   7402         MOV       A,#0x2
   \   000012   F0           MOVX      @DPTR,A
    324            entry.nwkAddr = nwkAddr;
   \   000013   14           DEC       A
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine16 & 0xFFFF
    325            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_11:
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   AA82         MOV       R2,DPL
   \   00001F   AB83         MOV       R3,DPH
   \   000021   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   \   000024   7416         MOV       A,#0x16
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   12....       LCALL     ?Subroutine31 & 0xFFFF
    326          
    327            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   \                     ??CrossCallReturnLabel_37:
   \   00002C   700A         JNZ       ??ZDSecMgrExtAddrStore_0
    328            {
    329              // return successful results
    330              *ami   = entry.index;
   \   00002E   740B         MOV       A,#0xb
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   12....       LCALL     ?Subroutine11 & 0xFFFF
    331              status = ZSuccess;
    332            }
   \                     ??CrossCallReturnLabel_146:
   \   000036   8008         SJMP      ??CrossCallReturnLabel_22
    333            else
    334            {
    335              // return failed results
    336              *ami   = entry.index;
   \                     ??ZDSecMgrExtAddrStore_0:
   \   000038   740B         MOV       A,#0xb
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   12....       LCALL     ?Subroutine22 & 0xFFFF
    337              status = ZNwkUnknownDevice;
    338            }
    339          
    340            return status;
   \                     ??CrossCallReturnLabel_22:
   \   000040   02....       LJMP      ?Subroutine0 & 0xFFFF
    341          }
    342          
    343          /******************************************************************************
    344           * @fn          ZDSecMgrExtAddrLookup
    345           *
    346           * @brief       Lookup index for specified EXT address.
    347           *
    348           * @param       extAddr - [in] EXT address
    349           * @param       ami     - [out] Address Manager index
    350           *
    351           * @return      ZStatus_t
    352           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    353          ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami )
   \                     ZDSecMgrExtAddrLookup:
    354          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
    355            ZStatus_t      status;
    356            AddrMgrEntry_t entry;
    357          
    358          
    359            // lookup entry
    360            entry.user = ADDRMGR_USER_SECURITY;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   7402         MOV       A,#0x2
   \   000016   F0           MOVX      @DPTR,A
    361            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   \   000017                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000017   EA           MOV       A,R2
   \   000018   FC           MOV       R4,A
   \   000019   EB           MOV       A,R3
   \   00001A   FD           MOV       R5,A
   \   00001B   7403         MOV       A,#0x3
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   AA82         MOV       R2,DPL
   \   000022   AB83         MOV       R3,DPH
   \   000024   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
    362          
    363            if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
   \   000027                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000027   AA..         MOV       R2,?XSP + 0
   \   000029   AB..         MOV       R3,?XSP + 1
   \   00002B   12....       LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   00002E   E9           MOV       A,R1
   \   00002F   6401         XRL       A,#0x1
   \   000031   700A         JNZ       ??ZDSecMgrExtAddrLookup_0
    364            {
    365              // return successful results
    366              *ami   = entry.index;
   \   000033   740B         MOV       A,#0xb
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   12....       LCALL     ?Subroutine11 & 0xFFFF
    367              status = ZSuccess;
    368            }
   \                     ??CrossCallReturnLabel_147:
   \   00003B   8008         SJMP      ??CrossCallReturnLabel_23
    369            else
    370            {
    371              // return failed results
    372              *ami   = entry.index;
   \                     ??ZDSecMgrExtAddrLookup_0:
   \   00003D   740B         MOV       A,#0xb
   \   00003F   12....       LCALL     ?XSTACK_DISP0_8
   \   000042   12....       LCALL     ?Subroutine22 & 0xFFFF
    373              status = ZNwkUnknownDevice;
    374            }
    375          
    376            return status;
   \                     ??CrossCallReturnLabel_23:
   \   000045   02....       LJMP      ?Subroutine0 & 0xFFFF
    377          }
    378          
    379          /******************************************************************************
    380           * @fn          ZDSecMgrAddrClear
    381           *
    382           * @brief       Clear security bit from Address Manager for specific device.
    383           *
    384           * @param       extAddr - [in] EXT address
    385           *
    386           * @return      ZStatus_t
    387           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    388          ZStatus_t ZDSecMgrAddrClear( uint8* extAddr )
   \                     ZDSecMgrAddrClear:
    389          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV       A,#-0xf
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    390            ZStatus_t status;
    391            uint16 entryAmi;
    392          
    393            // get Address Manager Index
    394            status = ZDSecMgrExtAddrLookup( extAddr, &entryAmi );
   \   00000A                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   00000A   AC..         MOV       R4,?XSP + 0
   \   00000C   AD..         MOV       R5,?XSP + 1
   \   00000E   12....       LCALL     `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   000011   E9           MOV       A,R1
   \   000012   FE           MOV       R6,A
    395          
    396            if ( status == ZSuccess )
   \   000013   7028         JNZ       ??ZDSecMgrAddrClear_0
    397            {
    398              AddrMgrEntry_t addrEntry;
    399          
    400              // Clear SECURITY User bit from the address manager
    401              addrEntry.user = ADDRMGR_USER_SECURITY;
   \   000015   7402         MOV       A,#0x2
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   7402         MOV       A,#0x2
   \   00001C   F0           MOVX      @DPTR,A
    402              addrEntry.index = entryAmi;
   \   00001D   85..82       MOV       DPL,?XSP + 0
   \   000020   85..83       MOV       DPH,?XSP + 1
   \   000023   12....       LCALL     ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000026   740D         MOV       A,#0xd
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   12....       LCALL     ??Subroutine113_0 & 0xFFFF
    403          
    404              if ( AddrMgrEntryRelease( &addrEntry ) != TRUE )
   \                     ??CrossCallReturnLabel_231:
   \   00002E                ; Setup parameters for call to function AddrMgrEntryRelease
   \   00002E   7402         MOV       A,#0x2
   \   000030   12....       LCALL     ?XSTACK_DISP101_8
   \   000033   12....       LCALL     `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   \   000036   E9           MOV       A,R1
   \   000037   6401         XRL       A,#0x1
   \   000039   6002         JZ        ??ZDSecMgrAddrClear_0
    405              {
    406                // return failure results
    407                status = ZFailure;
   \   00003B   7E01         MOV       R6,#0x1
    408              }
    409            }
    410          
    411            return status;
   \                     ??ZDSecMgrAddrClear_0:
   \   00003D   EE           MOV       A,R6
   \   00003E   F9           MOV       R1,A
   \   00003F   740F         MOV       A,#0xf
   \   000041   02....       LJMP      ??Subroutine114_0 & 0xFFFF
    412          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine108_0:
   \   000000   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine113_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
    413          
    414          /******************************************************************************
    415           * @fn          ZDSecMgrEntryInit
    416           *
    417           * @brief       Initialize entry sub module
    418           *
    419           * @param       state - device initialization state
    420           *
    421           * @return      none
    422           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    423          void ZDSecMgrEntryInit(uint8 state)
   \                     ZDSecMgrEntryInit:
    424          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    425            if (ZDSecMgrEntries == NULL)
   \   000007   90....       MOV       DPTR,#ZDSecMgrEntries
   \   00000A   12....       LCALL     ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   00000D   7033         JNZ       ??ZDSecMgrEntryInit_0
    426            {
    427              uint16 index;
    428          
    429              if ((ZDSecMgrEntries = osal_mem_alloc(sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)) == NULL)
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   7A0F         MOV       R2,#0xf
   \   000011   7B00         MOV       R3,#0x0
   \   000013   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000016   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000019   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   00001C   F9           MOV       R1,A
   \   00001D   EA           MOV       A,R2
   \   00001E   49           ORL       A,R1
   \   00001F   6027         JZ        ??ZDSecMgrEntryInit_1
    430              {
    431                return;
    432              }
    433          
    434              for (index = 0; index < ZDSECMGR_ENTRY_MAX; index++)
   \   000021   7800         MOV       R0,#0x0
   \   000023   7900         MOV       R1,#0x0
    435              {
    436                ZDSecMgrEntries[index].ami = INVALID_NODE_ADDR;
   \                     ??ZDSecMgrEntryInit_2:
   \   000025   12....       LCALL     ?Subroutine51 & 0xFFFF
    437          
    438                ZDSecMgrEntries[index].keyNvId = SEC_NO_KEY_NV_ID;
    439              }
   \                     ??CrossCallReturnLabel_74:
   \   000028   8A82         MOV       DPL,R2
   \   00002A   F583         MOV       DPH,A
   \   00002C   74FE         MOV       A,#-0x2
   \   00002E   F0           MOVX      @DPTR,A
   \   00002F   A3           INC       DPTR
   \   000030   04           INC       A
   \   000031   12....       LCALL     ??Subroutine104_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000034   E4           CLR       A
   \   000035   F0           MOVX      @DPTR,A
   \   000036   A3           INC       DPTR
   \   000037   F0           MOVX      @DPTR,A
   \   000038   08           INC       R0
   \   000039   E8           MOV       A,R0
   \   00003A   7001         JNZ       ??ZDSecMgrEntryInit_3
   \   00003C   09           INC       R1
   \                     ??ZDSecMgrEntryInit_3:
   \   00003D   12....       LCALL     ?Subroutine53 & 0xFFFF
    440            }
   \                     ??CrossCallReturnLabel_153:
   \   000040   40E3         JC        ??ZDSecMgrEntryInit_2
    441          
    442          #if defined NV_RESTORE
    443            if (state == ZDO_INITDEV_RESTORED_NETWORK_STATE)
   \                     ??ZDSecMgrEntryInit_0:
   \   000042   EE           MOV       A,R6
   \   000043   7003         JNZ       ??ZDSecMgrEntryInit_1
    444            {
    445              ZDSecMgrRestoreFromNV();
   \   000045                ; Setup parameters for call to function ZDSecMgrRestoreFromNV
   \   000045   12....       LCALL     `??ZDSecMgrRestoreFromNV::?relay`; Banked call to: ZDSecMgrRestoreFromNV
    446            }
    447          #else
    448            (void)state;
    449          #endif
    450          }
   \                     ??ZDSecMgrEntryInit_1:
   \   000048   02....       LJMP      ??Subroutine115_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   C3           CLR       C
   \   000001                REQUIRE ??Subroutine100_0
   \   000001                ; // Fall through to label ??Subroutine100_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine100_0:
   \   000000   9403         SUBB      A,#0x3
   \   000002   E9           MOV       A,R1
   \   000003   9400         SUBB      A,#0x0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   E8           MOV       A,R0
   \   000001   FA           MOV       R2,A
   \   000002   E9           MOV       A,R1
   \   000003   FB           MOV       R3,A
   \   000004   EA           MOV       A,R2
   \   000005   75..05       MOV       ?B,#0x5
   \   000008   A4           MUL       AB
   \   000009   FA           MOV       R2,A
   \   00000A   AC..         MOV       R4,?B
   \   00000C   75..05       MOV       ?B,#0x5
   \   00000F   EB           MOV       A,R3
   \   000010   A4           MUL       AB
   \   000011   2C           ADD       A,R4
   \   000012   FB           MOV       R3,A
   \   000013   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000016   E0           MOVX      A,@DPTR
   \   000017   2A           ADD       A,R2
   \   000018   FA           MOV       R2,A
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   3B           ADDC      A,R3
   \   00001C   FB           MOV       R3,A
   \   00001D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine104_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine109_0:
   \   000000   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000003   49           ORL       A,R1
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine118_0:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
    451          
    452          /******************************************************************************
    453           * @fn          ZDSecMgrEntryLookup
    454           *
    455           * @brief       Lookup entry index using specified NWK address.
    456           *
    457           * @param       nwkAddr - [in] NWK address
    458           * @param       entry   - [out] valid entry
    459           *
    460           * @return      ZStatus_t
    461           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    462          ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryLookup:
    463          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
    464            uint16         index;
    465            AddrMgrEntry_t addrMgrEntry;
    466          
    467            // initialize results
    468            *entry = NULL;
   \   00000E   8C82         MOV       DPL,R4
   \   000010   F583         MOV       DPH,A
   \   000012   12....       LCALL     ?Subroutine10 & 0xFFFF
    469          
    470            // verify data is available
    471            if ( ZDSecMgrEntries != NULL )
   \                     ??CrossCallReturnLabel_0:
   \   000015   606B         JZ        ??ZDSecMgrEntryLookup_0
    472            {
    473              addrMgrEntry.user    = ADDRMGR_USER_SECURITY;
   \   000017   85..82       MOV       DPL,?XSP + 0
   \   00001A   85..83       MOV       DPH,?XSP + 1
   \   00001D   7402         MOV       A,#0x2
   \   00001F   F0           MOVX      @DPTR,A
    474              addrMgrEntry.nwkAddr = nwkAddr;
   \   000020   14           DEC       A
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   12....       LCALL     ?Subroutine19 & 0xFFFF
    475          
    476              if ( AddrMgrEntryLookupNwk( &addrMgrEntry ) == TRUE )
   \                     ??CrossCallReturnLabel_264:
   \   000027   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00002A   7056         JNZ       ??ZDSecMgrEntryLookup_0
    477              {
    478                for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   00002C   7800         MOV       R0,#0x0
   \   00002E   7900         MOV       R1,#0x0
    479                {
    480                  if ( addrMgrEntry.index == ZDSecMgrEntries[index].ami )
   \                     ??ZDSecMgrEntryLookup_1:
   \   000030   740B         MOV       A,#0xb
   \   000032   12....       LCALL     ?XSTACK_DISP0_8
   \   000035   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   000038   E8           MOV       A,R0
   \   000039   FA           MOV       R2,A
   \   00003A   E9           MOV       A,R1
   \   00003B   FB           MOV       R3,A
   \   00003C   EA           MOV       A,R2
   \   00003D   75..05       MOV       ?B,#0x5
   \   000040   A4           MUL       AB
   \   000041   FA           MOV       R2,A
   \   000042   85....       MOV       ?V0,?B
   \   000045   75..05       MOV       ?B,#0x5
   \   000048   EB           MOV       A,R3
   \   000049   A4           MUL       AB
   \   00004A   25..         ADD       A,?V0
   \   00004C   FB           MOV       R3,A
   \   00004D   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000050   E0           MOVX      A,@DPTR
   \   000051   2A           ADD       A,R2
   \   000052   F5..         MOV       ?V0,A
   \   000054   A3           INC       DPTR
   \   000055   E0           MOVX      A,@DPTR
   \   000056   3B           ADDC      A,R3
   \   000057   85..82       MOV       DPL,?V0
   \   00005A   F583         MOV       DPH,A
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   6C           XRL       A,R4
   \   00005E   7003         JNZ       ??ZDSecMgrEntryLookup_2
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   6D           XRL       A,R5
   \                     ??ZDSecMgrEntryLookup_2:
   \   000063   7013         JNZ       ??ZDSecMgrEntryLookup_3
    481                  {
    482                    // return successful results
    483                    *entry = &ZDSecMgrEntries[index];
   \   000065   E8           MOV       A,R0
   \   000066   75..05       MOV       ?B,#0x5
   \   000069   A4           MUL       AB
   \   00006A   F8           MOV       R0,A
   \   00006B   12....       LCALL     ?Subroutine56 & 0xFFFF
    484          
    485                    // break from loop
    486                    return ZSuccess;
    487                  }
    488                }
   \                     ??CrossCallReturnLabel_143:
   \   00006E   28           ADD       A,R0
   \   00006F   F8           MOV       R0,A
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   39           ADDC      A,R1
   \   000073   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000076   800C         SJMP      ??ZDSecMgrEntryLookup_4
   \                     ??ZDSecMgrEntryLookup_3:
   \   000078   08           INC       R0
   \   000079   E8           MOV       A,R0
   \   00007A   7001         JNZ       ??ZDSecMgrEntryLookup_5
   \   00007C   09           INC       R1
   \                     ??ZDSecMgrEntryLookup_5:
   \   00007D   12....       LCALL     ?Subroutine53 & 0xFFFF
    489              }
    490            }
   \                     ??CrossCallReturnLabel_154:
   \   000080   40AE         JC        ??ZDSecMgrEntryLookup_1
    491          
    492            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookup_0:
   \   000082   79C8         MOV       R1,#-0x38
   \                     ??ZDSecMgrEntryLookup_4:
   \   000084   02....       LJMP      ?Subroutine0 & 0xFFFF
    493          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   AA..         MOV       R2,?B
   \   000002   75..05       MOV       ?B,#0x5
   \   000005   E9           MOV       A,R1
   \   000006                REQUIRE ??Subroutine97_0
   \   000006                ; // Fall through to label ??Subroutine97_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine97_0:
   \   000000   A4           MUL       AB
   \   000001   2A           ADD       A,R2
   \   000002   F9           MOV       R1,A
   \   000003   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000006   E0           MOVX      A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E4           CLR       A
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   F0           MOVX      @DPTR,A
   \   000004   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000007   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   00000A   49           ORL       A,R1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   000003   E9           MOV       A,R1
   \   000004   6401         XRL       A,#0x1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004                REQUIRE ??Subroutine119_0
   \   000004                ; // Fall through to label ??Subroutine119_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine119_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000001                ; Setup parameters for call to function APSME_RequestKeyReq
   \   000001                ; Setup parameters for call to function APSME_ConfirmKeyReq
   \   000001                ; Setup parameters for call to function ZDSecMgrDeviceNew
   \   000001                ; Setup parameters for call to function APSME_TransportKeyReq
   \   000001                ; Setup parameters for call to function APSME_SwitchKeyReq
   \   000001   AA..         MOV       R2,?XSP + 0
   \   000003   AB..         MOV       R3,?XSP + 1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine124_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET
    494          
    495          /******************************************************************************
    496           * @fn          ZDSecMgrEntryLookupAMI
    497           *
    498           * @brief       Lookup entry using specified address index
    499           *
    500           * @param       ami   - [in] Address Manager index
    501           * @param       entry - [out] valid entry
    502           *
    503           * @return      ZStatus_t
    504           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    505          ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryLookupAMI:
    506          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    507            uint16 index;
    508          
    509            // initialize results
    510            *entry = NULL;
   \   000005   8C82         MOV       DPL,R4
   \   000007   8D83         MOV       DPH,R5
   \   000009   12....       LCALL     ?Subroutine10 & 0xFFFF
    511          
    512            // verify data is available
    513            if ( ZDSecMgrEntries != NULL )
   \                     ??CrossCallReturnLabel_1:
   \   00000C   602F         JZ        ??ZDSecMgrEntryLookupAMI_0
    514            {
    515              for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   00000E   7800         MOV       R0,#0x0
   \   000010   7900         MOV       R1,#0x0
    516              {
    517                if ( ZDSecMgrEntries[index].ami == ami )
   \                     ??ZDSecMgrEntryLookupAMI_1:
   \   000012   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000015   7003         JNZ       ??ZDSecMgrEntryLookupAMI_2
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   6B           XRL       A,R3
   \                     ??ZDSecMgrEntryLookupAMI_2:
   \   00001A   7017         JNZ       ??ZDSecMgrEntryLookupAMI_3
    518                {
    519                  // return successful results
    520                  *entry = &ZDSecMgrEntries[index];
   \   00001C   E8           MOV       A,R0
   \   00001D   75..05       MOV       ?B,#0x5
   \   000020   A4           MUL       AB
   \   000021   12....       LCALL     ?Subroutine56 & 0xFFFF
    521          
    522                  // break from loop
    523                  return ZSuccess;
    524                }
    525              }
   \                     ??CrossCallReturnLabel_144:
   \   000024   2E           ADD       A,R6
   \   000025   F8           MOV       R0,A
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   39           ADDC      A,R1
   \   000029   F9           MOV       R1,A
   \   00002A   8C82         MOV       DPL,R4
   \   00002C   8D83         MOV       DPH,R5
   \   00002E   12....       LCALL     ??Subroutine99_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000031   800C         SJMP      ??ZDSecMgrEntryLookupAMI_4
   \                     ??ZDSecMgrEntryLookupAMI_3:
   \   000033   08           INC       R0
   \   000034   E8           MOV       A,R0
   \   000035   7001         JNZ       ??ZDSecMgrEntryLookupAMI_5
   \   000037   09           INC       R1
   \                     ??ZDSecMgrEntryLookupAMI_5:
   \   000038   12....       LCALL     ?Subroutine53 & 0xFFFF
    526            }
   \                     ??CrossCallReturnLabel_155:
   \   00003B   40D5         JC        ??ZDSecMgrEntryLookupAMI_1
    527          
    528            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookupAMI_0:
   \   00003D   79C8         MOV       R1,#-0x38
   \                     ??ZDSecMgrEntryLookupAMI_4:
   \   00003F   02....       LJMP      ??Subroutine115_0 & 0xFFFF
    529          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E8           MOV       A,R0
   \   000001   FE           MOV       R6,A
   \   000002   E9           MOV       A,R1
   \   000003   FF           MOV       R7,A
   \   000004   EE           MOV       A,R6
   \   000005   75..05       MOV       ?B,#0x5
   \   000008   A4           MUL       AB
   \   000009   FE           MOV       R6,A
   \   00000A   85....       MOV       ?V0,?B
   \   00000D   75..05       MOV       ?B,#0x5
   \   000010   EF           MOV       A,R7
   \   000011   A4           MUL       AB
   \   000012   25..         ADD       A,?V0
   \   000014   FF           MOV       R7,A
   \   000015   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000018   E0           MOVX      A,@DPTR
   \   000019   2E           ADD       A,R6
   \   00001A   F5..         MOV       ?V0,A
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   3F           ADDC      A,R7
   \   00001F   85..82       MOV       DPL,?V0
   \   000022   F583         MOV       DPH,A
   \   000024   E0           MOVX      A,@DPTR
   \   000025   6A           XRL       A,R2
   \   000026   22           RET
    530          
    531          /******************************************************************************
    532           * @fn          ZDSecMgrEntryLookupExt
    533           *
    534           * @brief       Lookup entry index using specified EXT address.
    535           *
    536           * @param       extAddr - [in] EXT address
    537           * @param       entry   - [out] valid entry
    538           *
    539           * @return      ZStatus_t
    540           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    541          ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryLookupExt:
    542          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
    543            ZStatus_t status;
    544            uint16    ami;
    545          
    546            // initialize results
    547            *entry = NULL;
   \   00000E   8C82         MOV       DPL,R4
   \   000010   F583         MOV       DPH,A
   \   000012   E4           CLR       A
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   F0           MOVX      @DPTR,A
    548            status = ZNwkUnknownDevice;
   \   000016   75..C8       MOV       ?V0,#-0x38
    549          
    550            // lookup address index
    551            if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
   \   000019                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   000019   AC..         MOV       R4,?XSP + 0
   \   00001B   AD..         MOV       R5,?XSP + 1
   \   00001D   12....       LCALL     `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   000020   E9           MOV       A,R1
   \   000021   7010         JNZ       ??ZDSecMgrEntryLookupExt_0
    552            {
    553              status = ZDSecMgrEntryLookupAMI( ami, entry );
   \   000023                ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
   \   000023   EE           MOV       A,R6
   \   000024   FC           MOV       R4,A
   \   000025   EF           MOV       A,R7
   \   000026   FD           MOV       R5,A
   \   000027   85..82       MOV       DPL,?XSP + 0
   \   00002A   85..83       MOV       DPH,?XSP + 1
   \   00002D   12....       LCALL     ?Subroutine36 & 0xFFFF
    554            }
   \                     ??CrossCallReturnLabel_47:
   \   000030   E9           MOV       A,R1
   \   000031   F5..         MOV       ?V0,A
    555          
    556            return status;
   \                     ??ZDSecMgrEntryLookupExt_0:
   \   000033   A9..         MOV       R1,?V0
   \   000035   02....       LJMP      ?Subroutine7 & 0xFFFF
    557          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7402         MOV       A,#0x2
   \   000002   02....       LJMP      ??Subroutine114_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL     ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000003   12....       LCALL     `??ZDSecMgrEntryLookupAMI::?relay`; Banked call to: ZDSecMgrEntryLookupAMI
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine121_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET
    558          
    559          /******************************************************************************
    560           * @fn          ZDSecMgrEntryLookupExtGetIndex
    561           *
    562           * @brief       Lookup entry index using specified EXT address.
    563           *
    564           * @param       extAddr - [in] EXT address
    565           * @param       entryIndex - [out] valid index to the entry table
    566           *
    567           * @return      ZStatus_t
    568           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    569          ZStatus_t ZDSecMgrEntryLookupExtGetIndex( uint8* extAddr, ZDSecMgrEntry_t** entry, uint16* entryIndex )
   \                     ZDSecMgrEntryLookupExtGetIndex:
    570          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
    571            uint16 ami;
    572            uint16 index;
    573          
    574            // lookup address index
    575            if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
   \   00000E                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   00000E   AC..         MOV       R4,?XSP + 0
   \   000010   AD..         MOV       R5,?XSP + 1
   \   000012   12....       LCALL     `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   000015   E9           MOV       A,R1
   \   000016   705F         JNZ       ??ZDSecMgrEntryLookupExtGetIndex_0
    576            {
    577              // verify data is available
    578              if ( ZDSecMgrEntries != NULL )
   \   000018   90....       MOV       DPTR,#ZDSecMgrEntries
   \   00001B   12....       LCALL     ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   00001E   6057         JZ        ??ZDSecMgrEntryLookupExtGetIndex_0
    579              {
    580                for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   000020   7800         MOV       R0,#0x0
   \   000022   7900         MOV       R1,#0x0
    581                {
    582                  if ( ZDSecMgrEntries[index].ami == ami )
   \                     ??ZDSecMgrEntryLookupExtGetIndex_1:
   \   000024   E8           MOV       A,R0
   \   000025   FA           MOV       R2,A
   \   000026   E9           MOV       A,R1
   \   000027   FB           MOV       R3,A
   \   000028   EA           MOV       A,R2
   \   000029   75..05       MOV       ?B,#0x5
   \   00002C   A4           MUL       AB
   \   00002D   FA           MOV       R2,A
   \   00002E   AC..         MOV       R4,?B
   \   000030   75..05       MOV       ?B,#0x5
   \   000033   EB           MOV       A,R3
   \   000034   A4           MUL       AB
   \   000035   2C           ADD       A,R4
   \   000036   FB           MOV       R3,A
   \   000037   90....       MOV       DPTR,#ZDSecMgrEntries
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   2A           ADD       A,R2
   \   00003C   FC           MOV       R4,A
   \   00003D   A3           INC       DPTR
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   3B           ADDC      A,R3
   \   000040   8C82         MOV       DPL,R4
   \   000042   F583         MOV       DPH,A
   \   000044   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000047   85..82       MOV       DPL,?XSP + 0
   \   00004A   85..83       MOV       DPH,?XSP + 1
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   6A           XRL       A,R2
   \   00004F   7003         JNZ       ??ZDSecMgrEntryLookupExtGetIndex_2
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   6B           XRL       A,R3
   \                     ??ZDSecMgrEntryLookupExtGetIndex_2:
   \   000054   7017         JNZ       ??ZDSecMgrEntryLookupExtGetIndex_3
    583                  {
    584                    // return successful results
    585                    *entry = &ZDSecMgrEntries[index];
   \   000056   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000059   8E82         MOV       DPL,R6
   \   00005B   8F83         MOV       DPH,R7
   \   00005D   12....       LCALL     ??Subroutine118_0 & 0xFFFF
    586                    *entryIndex = index;
   \                     ??CrossCallReturnLabel_256:
   \   000060   740B         MOV       A,#0xb
   \   000062   12....       LCALL     ?XSTACK_DISP0_8
   \   000065   12....       LCALL     ?Subroutine34 & 0xFFFF
    587          
    588                    // break from loop
    589                    return ZSuccess;
    590                  }
    591                }
   \                     ??CrossCallReturnLabel_41:
   \   000068   12....       LCALL     ??Subroutine99_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   00006B   800C         SJMP      ??ZDSecMgrEntryLookupExtGetIndex_4
   \                     ??ZDSecMgrEntryLookupExtGetIndex_3:
   \   00006D   08           INC       R0
   \   00006E   E8           MOV       A,R0
   \   00006F   7001         JNZ       ??ZDSecMgrEntryLookupExtGetIndex_5
   \   000071   09           INC       R1
   \                     ??ZDSecMgrEntryLookupExtGetIndex_5:
   \   000072   12....       LCALL     ?Subroutine53 & 0xFFFF
    592              }
    593            }
   \                     ??CrossCallReturnLabel_156:
   \   000075   40AD         JC        ??ZDSecMgrEntryLookupExtGetIndex_1
    594          
    595            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookupExtGetIndex_0:
   \   000077   79C8         MOV       R1,#-0x38
   \                     ??ZDSecMgrEntryLookupExtGetIndex_4:
   \   000079   02....       LJMP      ?Subroutine7 & 0xFFFF
    596          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine103_0:
   \   000000   12....       LCALL     ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8A82         MOV       DPL,R2
   \   000008   22           RET
    597          
    598          /******************************************************************************
    599           * @fn          ZDSecMgrEntryLookupAMIGetIndex
    600           *
    601           * @brief       Lookup entry using specified address index
    602           *
    603           * @param       ami   - [in] Address Manager index
    604           * @param       entryIndex - [out] valid index to the entry table
    605           *
    606           * @return      ZStatus_t
    607           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    608          ZStatus_t ZDSecMgrEntryLookupAMIGetIndex( uint16 ami, uint16* entryIndex )
   \                     ZDSecMgrEntryLookupAMIGetIndex:
    609          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    610            uint16 index;
    611          
    612            // verify data is available
    613            if ( ZDSecMgrEntries != NULL )
   \   000005   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000008   12....       LCALL     ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   00000B   6021         JZ        ??ZDSecMgrEntryLookupAMIGetIndex_0
    614            {
    615              for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   00000D   7800         MOV       R0,#0x0
   \   00000F   7900         MOV       R1,#0x0
    616              {
    617                if ( ZDSecMgrEntries[index].ami == ami )
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_1:
   \   000011   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000014   7003         JNZ       ??ZDSecMgrEntryLookupAMIGetIndex_2
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   6B           XRL       A,R3
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_2:
   \   000019   7009         JNZ       ??ZDSecMgrEntryLookupAMIGetIndex_3
    618                {
    619                  // return successful results
    620                  *entryIndex = index;
   \   00001B   8C82         MOV       DPL,R4
   \   00001D   8D83         MOV       DPH,R5
   \   00001F   12....       LCALL     ??Subroutine99_0 & 0xFFFF
    621          
    622                  // break from loop
    623                  return ZSuccess;
    624                }
    625              }
   \                     ??CrossCallReturnLabel_151:
   \   000022   800C         SJMP      ??ZDSecMgrEntryLookupAMIGetIndex_4
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_3:
   \   000024   08           INC       R0
   \   000025   E8           MOV       A,R0
   \   000026   7001         JNZ       ??ZDSecMgrEntryLookupAMIGetIndex_5
   \   000028   09           INC       R1
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_5:
   \   000029   12....       LCALL     ?Subroutine53 & 0xFFFF
    626            }
   \                     ??CrossCallReturnLabel_157:
   \   00002C   40E3         JC        ??ZDSecMgrEntryLookupAMIGetIndex_1
    627          
    628            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_0:
   \   00002E   79C8         MOV       R1,#-0x38
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_4:
   \   000030   02....       LJMP      ??Subroutine115_0 & 0xFFFF
    629          }
    630          
    631          /******************************************************************************
    632           * @fn          ZDSecMgrEntryFree
    633           *
    634           * @brief       Free entry.
    635           *
    636           * @param       entry - [in] valid entry
    637           *
    638           * @return      ZStatus_t
    639           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    640          void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry )
   \                     ZDSecMgrEntryFree:
    641          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    642            APSME_LinkKeyData_t   *pApsLinkKey = NULL;
    643          
    644          #if defined ( NV_RESTORE )
    645            ZStatus_t status;
    646            uint16 entryIndex;
    647          
    648            status = ZDSecMgrEntryLookupAMIGetIndex( entry->ami, &entryIndex );
   \   00000E                ; Setup parameters for call to function ZDSecMgrEntryLookupAMIGetIndex
   \   00000E   7402         MOV       A,#0x2
   \   000010   12....       LCALL     ?XSTACK_DISP102_8
   \   000013   8A82         MOV       DPL,R2
   \   000015   8B83         MOV       DPH,R3
   \   000017   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   00001A   12....       LCALL     `??ZDSecMgrEntryLookupAMIGetIndex::?relay`; Banked call to: ZDSecMgrEntryLookupAMIGetIndex
   \   00001D   E9           MOV       A,R1
   \   00001E   F5..         MOV       ?V2,A
    649          #endif
    650          
    651            pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   000020                ; Setup parameters for call to function osal_mem_alloc
   \   000020   7A18         MOV       R2,#0x18
   \   000022   7B00         MOV       R3,#0x0
   \   000024   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000027   8A..         MOV       ?V4,R2
   \   000029   8B..         MOV       ?V5,R3
    652          
    653            if (pApsLinkKey != NULL)
   \   00002B   EA           MOV       A,R2
   \   00002C   4B           ORL       A,R3
   \   00002D   6047         JZ        ??ZDSecMgrEntryFree_0
    654            {
    655              osal_memset( pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   00002F                ; Setup parameters for call to function osal_memset
   \   00002F   7C18         MOV       R4,#0x18
   \   000031   7D00         MOV       R5,#0x0
   \   000033   7900         MOV       R1,#0x0
   \   000035   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    656          
    657              // Clear the APS Link key in NV
    658              osal_nv_write( entry->keyNvId, 0,
    659                                  sizeof(APSME_LinkKeyData_t), pApsLinkKey);
   \   000038   EE           MOV       A,R6
   \   000039   2402         ADD       A,#0x2
   \   00003B   F8           MOV       R0,A
   \   00003C   E4           CLR       A
   \   00003D   3F           ADDC      A,R7
   \   00003E   88..         MOV       ?V0,R0
   \   000040   F5..         MOV       ?V1,A
   \   000042                ; Setup parameters for call to function osal_nv_write
   \   000042   78..         MOV       R0,#?V4
   \   000044   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000047   75..18       MOV       ?V6,#0x18
   \   00004A   75..00       MOV       ?V7,#0x0
   \   00004D   78..         MOV       R0,#?V6
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000052   7C00         MOV       R4,#0x0
   \   000054   7D00         MOV       R5,#0x0
   \   000056   85..82       MOV       DPL,?V0
   \   000059   85..83       MOV       DPH,?V1
   \   00005C   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   00005F   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   000062   12....       LCALL     ?DEALLOC_XSTACK8
    660          
    661              // set entry to invalid Key
    662              entry->keyNvId = SEC_NO_KEY_NV_ID;
   \   000065   85..82       MOV       DPL,?V0
   \   000068   85..83       MOV       DPH,?V1
   \   00006B   E4           CLR       A
   \   00006C   F0           MOVX      @DPTR,A
   \   00006D   A3           INC       DPTR
   \   00006E   F0           MOVX      @DPTR,A
    663          
    664              osal_mem_free(pApsLinkKey);
   \   00006F                ; Setup parameters for call to function osal_mem_free
   \   00006F   AA..         MOV       R2,?V4
   \   000071   AB..         MOV       R3,?V5
   \   000073   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    665            }
    666          
    667            // marking the entry as INVALID_NODE_ADDR
    668            entry->ami = INVALID_NODE_ADDR;
   \                     ??ZDSecMgrEntryFree_0:
   \   000076   8E82         MOV       DPL,R6
   \   000078   8F83         MOV       DPH,R7
   \   00007A   74FE         MOV       A,#-0x2
   \   00007C   F0           MOVX      @DPTR,A
   \   00007D   A3           INC       DPTR
   \   00007E   04           INC       A
   \   00007F   12....       LCALL     ?Subroutine21 & 0xFFFF
    669          
    670            // set to default value
    671            entry->authenticateOption = ZDSecMgr_Not_Authenticated;
   \                     ??CrossCallReturnLabel_18:
   \   000082   E4           CLR       A
   \   000083   F0           MOVX      @DPTR,A
    672          
    673          #if defined ( NV_RESTORE )
    674            if ( status == ZSuccess )
   \   000084   E5..         MOV       A,?V2
   \   000086   6003         JZ        $+5
   \   000088   02....       LJMP      ??ZDSecMgrEntryFree_1 & 0xFFFF
    675            {
    676              ZDSecMgrUpdateNV(entryIndex);
   \   00008B   7402         MOV       A,#0x2
   \   00008D   12....       LCALL     ?XSTACK_DISP0_8
   \   000090   E0           MOVX      A,@DPTR
   \   000091   FE           MOV       R6,A
   \   000092   A3           INC       DPTR
   \   000093   E0           MOVX      A,@DPTR
   \   000094   FF           MOV       R7,A
   \   000095   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000098   12....       LCALL     ??Subroutine109_0 & 0xFFFF
    677            }
   \                     ??CrossCallReturnLabel_200:
   \   00009B   6031         JZ        ??ZDSecMgrEntryFree_2
   \   00009D                ; Setup parameters for call to function osal_nv_write
   \   00009D   EE           MOV       A,R6
   \   00009E   75..05       MOV       ?B,#0x5
   \   0000A1   A4           MUL       AB
   \   0000A2   F8           MOV       R0,A
   \   0000A3   AA..         MOV       R2,?B
   \   0000A5   75..05       MOV       ?B,#0x5
   \   0000A8   EF           MOV       A,R7
   \   0000A9   12....       LCALL     ??Subroutine97_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   0000AC   28           ADD       A,R0
   \   0000AD   F5..         MOV       ?V0,A
   \   0000AF   A3           INC       DPTR
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   39           ADDC      A,R1
   \   0000B2   F5..         MOV       ?V1,A
   \   0000B4   78..         MOV       R0,#?V0
   \   0000B6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B9   75..05       MOV       ?V0,#0x5
   \   0000BC   75..00       MOV       ?V1,#0x0
   \   0000BF   78..         MOV       R0,#?V0
   \   0000C1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C4   EE           MOV       A,R6
   \   0000C5   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   0000C8   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   0000CB   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDSecMgrEntryFree_2:
   \   0000CE                ; Setup parameters for call to function osal_nv_read
   \   0000CE   A8..         MOV       R0,?XSP + 0
   \   0000D0   A9..         MOV       R1,?XSP + 1
   \   0000D2   88..         MOV       ?V0,R0
   \   0000D4   89..         MOV       ?V1,R1
   \   0000D6   78..         MOV       R0,#?V0
   \   0000D8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DB   75..02       MOV       ?V0,#0x2
   \   0000DE   75..00       MOV       ?V1,#0x0
   \   0000E1   78..         MOV       R0,#?V0
   \   0000E3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E6   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   0000E9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000EC   E9           MOV       A,R1
   \   0000ED   7059         JNZ       ??ZDSecMgrEntryFree_1
   \   0000EF   EE           MOV       A,R6
   \   0000F0   75..05       MOV       ?B,#0x5
   \   0000F3   A4           MUL       AB
   \   0000F4   FE           MOV       R6,A
   \   0000F5   A8..         MOV       R0,?B
   \   0000F7   75..05       MOV       ?B,#0x5
   \   0000FA   EF           MOV       A,R7
   \   0000FB   A4           MUL       AB
   \   0000FC   28           ADD       A,R0
   \   0000FD   FF           MOV       R7,A
   \   0000FE   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000101   E0           MOVX      A,@DPTR
   \   000102   64FE         XRL       A,#0xfe
   \   000104   7003         JNZ       ??ZDSecMgrEntryFree_3
   \   000106   A3           INC       DPTR
   \   000107   E0           MOVX      A,@DPTR
   \   000108   F4           CPL       A
   \                     ??ZDSecMgrEntryFree_3:
   \   000109   85..82       MOV       DPL,?XSP + 0
   \   00010C   85..83       MOV       DPH,?XSP + 1
   \   00010F   7015         JNZ       ??ZDSecMgrEntryFree_4
   \   000111   12....       LCALL     ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000114   6014         JZ        ??ZDSecMgrEntryFree_5
   \   000116   85..82       MOV       DPL,?XSP + 0
   \   000119   85..83       MOV       DPH,?XSP + 1
   \   00011C   E0           MOVX      A,@DPTR
   \   00011D   24FF         ADD       A,#-0x1
   \   00011F   F0           MOVX      @DPTR,A
   \   000120   A3           INC       DPTR
   \   000121   E0           MOVX      A,@DPTR
   \   000122   34FF         ADDC      A,#-0x1
   \   000124   8003         SJMP      ??CrossCallReturnLabel_70
   \                     ??ZDSecMgrEntryFree_4:
   \   000126   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000129   F0           MOVX      @DPTR,A
   \                     ??ZDSecMgrEntryFree_5:
   \   00012A                ; Setup parameters for call to function osal_nv_write
   \   00012A   A8..         MOV       R0,?XSP + 0
   \   00012C   A9..         MOV       R1,?XSP + 1
   \   00012E   88..         MOV       ?V0,R0
   \   000130   89..         MOV       ?V1,R1
   \   000132   78..         MOV       R0,#?V0
   \   000134   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000137   75..02       MOV       ?V0,#0x2
   \   00013A   75..00       MOV       ?V1,#0x0
   \   00013D   78..         MOV       R0,#?V0
   \   00013F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000142   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   000145   12....       LCALL     ?DEALLOC_XSTACK8
    678          #endif
    679          }
   \                     ??ZDSecMgrEntryFree_1:
   \   000148   7404         MOV       A,#0x4
   \   00014A   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2401         ADD       A,#0x1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   75..05       MOV       ?B,#0x5
   \   000003   A4           MUL       AB
   \   000004   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   2402         ADD       A,#0x2
   \   000002   FC           MOV       R4,A
   \   000003   E4           CLR       A
   \   000004   39           ADDC      A,R1
   \   000005   FD           MOV       R5,A
   \   000006   7A4C         MOV       R2,#0x4c
   \   000008   7B00         MOV       R3,#0x0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000003   E0           MOVX      A,@DPTR
   \   000004   2E           ADD       A,R6
   \   000005   F8           MOV       R0,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   3F           ADDC      A,R7
   \   000009   8882         MOV       DPL,R0
   \   00000B   F583         MOV       DPH,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F08         MOV       R7,#0x8
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   7C00         MOV       R4,#0x0
   \   000002   7D00         MOV       R5,#0x0
   \   000004   7A4C         MOV       R2,#0x4c
   \   000006                REQUIRE ??Subroutine129_0
   \   000006                ; // Fall through to label ??Subroutine129_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine129_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine130_0
   \   000002                ; // Fall through to label ??Subroutine130_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine130_0:
   \   000000   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   7C00         MOV       R4,#0x0
   \   000002   7D00         MOV       R5,#0x0
   \   000004   7A4C         MOV       R2,#0x4c
   \   000006                REQUIRE ??Subroutine131_0
   \   000006                ; // Fall through to label ??Subroutine131_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine131_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine132_0
   \   000002                ; // Fall through to label ??Subroutine132_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine132_0:
   \   000000   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET
    680          
    681          /******************************************************************************
    682           * @fn          ZDSecMgrEntryNew
    683           *
    684           * @brief       Get a new entry.
    685           *
    686           * @param       entry - [out] valid entry
    687           *
    688           * @return      ZStatus_t
    689           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    690          ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryNew:
    691          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    692            uint16 index;
    693          
    694            // initialize results
    695            *entry = NULL;
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   12....       LCALL     ?Subroutine10 & 0xFFFF
    696          
    697            // verify data is available
    698            if ( ZDSecMgrEntries != NULL )
   \                     ??CrossCallReturnLabel_2:
   \   00000C   6065         JZ        ??ZDSecMgrEntryNew_0
    699            {
    700              // find available entry
    701              for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   00000E   7800         MOV       R0,#0x0
   \   000010   7900         MOV       R1,#0x0
    702              {
    703                if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
   \                     ??ZDSecMgrEntryNew_1:
   \   000012   E8           MOV       A,R0
   \   000013   FC           MOV       R4,A
   \   000014   E9           MOV       A,R1
   \   000015   FD           MOV       R5,A
   \   000016   EC           MOV       A,R4
   \   000017   75..05       MOV       ?B,#0x5
   \   00001A   A4           MUL       AB
   \   00001B   FC           MOV       R4,A
   \   00001C   AE..         MOV       R6,?B
   \   00001E   75..05       MOV       ?B,#0x5
   \   000021   ED           MOV       A,R5
   \   000022   A4           MUL       AB
   \   000023   2E           ADD       A,R6
   \   000024   FD           MOV       R5,A
   \   000025   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000028   E0           MOVX      A,@DPTR
   \   000029   2C           ADD       A,R4
   \   00002A   FE           MOV       R6,A
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   3D           ADDC      A,R5
   \   00002E   8E82         MOV       DPL,R6
   \   000030   F583         MOV       DPH,A
   \   000032   E0           MOVX      A,@DPTR
   \   000033   64FE         XRL       A,#0xfe
   \   000035   7003         JNZ       ??ZDSecMgrEntryNew_2
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F4           CPL       A
   \                     ??ZDSecMgrEntryNew_2:
   \   00003A   702D         JNZ       ??ZDSecMgrEntryNew_3
    704                {
    705                  // return successful result
    706                  *entry = &ZDSecMgrEntries[index];
   \   00003C   E8           MOV       A,R0
   \   00003D   75..05       MOV       ?B,#0x5
   \   000040   A4           MUL       AB
   \   000041   F8           MOV       R0,A
   \   000042   AC..         MOV       R4,?B
   \   000044   75..05       MOV       ?B,#0x5
   \   000047   E9           MOV       A,R1
   \   000048   A4           MUL       AB
   \   000049   2C           ADD       A,R4
   \   00004A   F9           MOV       R1,A
   \   00004B   90....       MOV       DPTR,#ZDSecMgrEntries
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   28           ADD       A,R0
   \   000050   A3           INC       DPTR
   \   000051   E0           MOVX      A,@DPTR
   \   000052   39           ADDC      A,R1
   \   000053   FD           MOV       R5,A
   \   000054   8A82         MOV       DPL,R2
   \   000056   8B83         MOV       DPH,R3
   \   000058   EE           MOV       A,R6
   \   000059   F0           MOVX      @DPTR,A
   \   00005A   A3           INC       DPTR
   \   00005B   ED           MOV       A,R5
   \   00005C   F0           MOVX      @DPTR,A
    707          
    708                  // Set the authentication option to default
    709                  ZDSecMgrEntries[index].authenticateOption = ZDSecMgr_Not_Authenticated;
   \   00005D   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   E4           CLR       A
   \   000065   F0           MOVX      @DPTR,A
    710          
    711                  // break from loop
    712                  return ZSuccess;
   \   000066   F9           MOV       R1,A
   \   000067   800C         SJMP      ??ZDSecMgrEntryNew_4
    713                }
    714              }
   \                     ??ZDSecMgrEntryNew_3:
   \   000069   08           INC       R0
   \   00006A   E8           MOV       A,R0
   \   00006B   7001         JNZ       ??ZDSecMgrEntryNew_5
   \   00006D   09           INC       R1
   \                     ??ZDSecMgrEntryNew_5:
   \   00006E   12....       LCALL     ?Subroutine53 & 0xFFFF
    715            }
   \                     ??CrossCallReturnLabel_158:
   \   000071   409F         JC        ??ZDSecMgrEntryNew_1
    716          
    717            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryNew_0:
   \   000073   79C8         MOV       R1,#-0x38
   \                     ??ZDSecMgrEntryNew_4:
   \   000075   02....       LJMP      ??Subroutine115_0 & 0xFFFF
    718          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000003   E0           MOVX      A,@DPTR
   \   000004   28           ADD       A,R0
   \   000005   FA           MOV       R2,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   39           ADDC      A,R1
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   22           RET
    719          
    720          /******************************************************************************
    721           * @fn          ZDSecMgrAppKeyGet
    722           *
    723           * @brief       get an APP key - option APP(MASTER or LINK) key
    724           *
    725           * @param       initNwkAddr - [in] NWK address of initiator device
    726           * @param       initExtAddr - [in] EXT address of initiator device
    727           * @param       partNwkAddr - [in] NWK address of partner device
    728           * @param       partExtAddr - [in] EXT address of partner device
    729           * @param       key         - [out] APP(MASTER or LINK) key
    730           * @param       keyType     - [out] APP(MASTER or LINK) key type
    731           *
    732           * @return      ZStatus_t
    733           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    734          uint8 ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;    // Set the default key type
   \                     ZDSecMgrAppKeyType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for ZDSecMgrAppKeyType>`
   \   000001                REQUIRE __INIT_XDATA_I
    735                                                           // to KEY_TYPE_APP_LINK since
    736                                                           // only specific requirement
    737                                                           // right now comes from SE profile

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    738          ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
   \                     ZDSecMgrAppKeyGet:
    739                                       uint8*  initExtAddr,
    740                                       uint16  partNwkAddr,
    741                                       uint8*  partExtAddr,
    742                                       uint8** key,
    743                                       uint8*  keyType )
    744          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    745            // Intentionally unreferenced parameters
    746            (void)initNwkAddr;
    747            (void)initExtAddr;
    748            (void)partNwkAddr;
    749            (void)partExtAddr;
    750          
    751            //---------------------------------------------------------------------------
    752            // note:
    753            // should use a robust mechanism to generate keys, for example
    754            // combine EXT addresses and call a hash function
    755            //---------------------------------------------------------------------------
    756            SSP_GetTrueRand( SEC_KEY_LEN, *key );
   \   000004                ; Setup parameters for call to function SSP_GetTrueRand
   \   000004   7404         MOV       A,#0x4
   \   000006   12....       LCALL     ?XSTACK_DISP0_8
   \   000009   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00000C   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   00000F   7910         MOV       R1,#0x10
   \   000011   12....       LCALL     `??SSP_GetTrueRand::?relay`; Banked call to: SSP_GetTrueRand
    757          
    758            *keyType = ZDSecMgrAppKeyType;
   \   000014   90....       MOV       DPTR,#ZDSecMgrAppKeyType
   \   000017   E0           MOVX      A,@DPTR
   \   000018   C0E0         PUSH      A
   \   00001A   7406         MOV       A,#0x6
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000022   D0E0         POP       A
   \   000024   02....       LJMP      ?Subroutine2 & 0xFFFF
    759          
    760            return ZSuccess;
    761          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   7900         MOV       R1,#0x0
   \   000003                REQUIRE ??Subroutine105_0
   \   000003                ; // Fall through to label ??Subroutine105_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    762          
    763          
    764          
    765          
    766          /******************************************************************************
    767           * @fn          ZDSecMgrAppKeyReq
    768           *
    769           * @brief       Process request for APP key between two devices.
    770           *
    771           * @param       device - [in] ZDO_RequestKeyInd_t, request info
    772           *
    773           * @return      none
    774           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    775          void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind )
   \                     ZDSecMgrAppKeyReq:
    776          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 39
   \   000005   74D9         MOV       A,#-0x27
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    777            APSME_TransportKeyReq_t req;
    778            uint8                   initExtAddr[Z_EXTADDR_LEN];
    779            uint16                  partNwkAddr;
    780            uint8                   key[SEC_KEY_LEN];
    781          
    782          
    783            // validate initiator and partner
    784            if ( ( APSME_LookupNwkAddr( ind->partExtAddr, &partNwkAddr ) == TRUE ) &&
    785                 ( APSME_LookupExtAddr( ind->srcAddr, initExtAddr ) == TRUE      )   )
   \   00000E                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   00000E   AC..         MOV       R4,?XSP + 0
   \   000010   AD..         MOV       R5,?XSP + 1
   \   000012   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000015   6003         JZ        $+5
   \   000017   02....       LJMP      ??ZDSecMgrAppKeyReq_0 & 0xFFFF
   \   00001A                ; Setup parameters for call to function APSME_LookupExtAddr
   \   00001A   740F         MOV       A,#0xf
   \   00001C   12....       LCALL     ?XSTACK_DISP102_8
   \   00001F   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000022   6003         JZ        $+5
   \   000024   02....       LJMP      ??ZDSecMgrAppKeyReq_0 & 0xFFFF
    786            {
    787              // point the key to some memory
    788              req.key = key;
   \   000027   7417         MOV       A,#0x17
   \   000029   12....       LCALL     ?XSTACK_DISP100_8
   \   00002C   7406         MOV       A,#0x6
   \   00002E   12....       LCALL     ?XSTACK_DISP0_8
   \   000031   12....       LCALL     ??Subroutine113_0 & 0xFFFF
    789          
    790              // get an APP key - option APP (MASTER or LINK) key
    791              if ( ZDSecMgrAppKeyGet( ind->srcAddr,
    792                                      initExtAddr,
    793                                      partNwkAddr,
    794                                      ind->partExtAddr,
    795                                      &req.key,
    796                                      &req.keyType ) == ZSuccess )
   \                     ??CrossCallReturnLabel_232:
   \   000034                ; Setup parameters for call to function ZDSecMgrAppKeyGet
   \   000034   7404         MOV       A,#0x4
   \   000036   12....       LCALL     ?XSTACK_DISP0_8
   \   000039   8582..       MOV       ?V0,DPL
   \   00003C   8583..       MOV       ?V1,DPH
   \   00003F   78..         MOV       R0,#?V0
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000044   7408         MOV       A,#0x8
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   8582..       MOV       ?V0,DPL
   \   00004C   8583..       MOV       ?V1,DPH
   \   00004F   78..         MOV       R0,#?V0
   \   000051   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000054   EE           MOV       A,R6
   \   000055   2405         ADD       A,#0x5
   \   000057   F5..         MOV       ?V0,A
   \   000059   E4           CLR       A
   \   00005A   3F           ADDC      A,R7
   \   00005B   F5..         MOV       ?V1,A
   \   00005D   78..         MOV       R0,#?V0
   \   00005F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000062   7406         MOV       A,#0x6
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00006A   7417         MOV       A,#0x17
   \   00006C   12....       LCALL     ?XSTACK_DISP102_8
   \   00006F   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000072   12....       LCALL     `??ZDSecMgrAppKeyGet::?relay`; Banked call to: ZDSecMgrAppKeyGet
   \   000075   7408         MOV       A,#0x8
   \   000077   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007A   E9           MOV       A,R1
   \   00007B   7073         JNZ       ??ZDSecMgrAppKeyReq_0
    797              {
    798                // always secure
    799                req.nwkSecure = TRUE;
   \   00007D   740C         MOV       A,#0xc
   \   00007F   12....       LCALL     ?XSTACK_DISP0_8
   \   000082   7401         MOV       A,#0x1
   \   000084   F0           MOVX      @DPTR,A
    800                req.apsSecure = TRUE;
   \   000085   740B         MOV       A,#0xb
   \   000087   12....       LCALL     ?XSTACK_DISP0_8
   \   00008A   7401         MOV       A,#0x1
   \   00008C   F0           MOVX      @DPTR,A
    801                req.tunnel    = NULL;
   \   00008D   740D         MOV       A,#0xd
   \   00008F   12....       LCALL     ?XSTACK_DISP0_8
   \   000092   12....       LCALL     ?Subroutine14 & 0xFFFF
    802          
    803                // send key to initiator device
    804                req.dstAddr   = ind->srcAddr;
   \                     ??CrossCallReturnLabel_162:
   \   000095   7402         MOV       A,#0x2
   \   000097   12....       LCALL     ?XSTACK_DISP0_8
   \   00009A   12....       LCALL     ??Subroutine113_0 & 0xFFFF
    805                req.extAddr   = ind->partExtAddr;
   \                     ??CrossCallReturnLabel_233:
   \   00009D   EE           MOV       A,R6
   \   00009E   2405         ADD       A,#0x5
   \   0000A0   F8           MOV       R0,A
   \   0000A1   E4           CLR       A
   \   0000A2   3F           ADDC      A,R7
   \   0000A3   F9           MOV       R1,A
   \   0000A4   7408         MOV       A,#0x8
   \   0000A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A9   12....       LCALL     ??Subroutine113_0 & 0xFFFF
    806                req.initiator = TRUE;
   \                     ??CrossCallReturnLabel_234:
   \   0000AC   740A         MOV       A,#0xa
   \   0000AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B1   7401         MOV       A,#0x1
   \   0000B3   F0           MOVX      @DPTR,A
    807                APSME_TransportKeyReq( &req );
   \   0000B4                ; Setup parameters for call to function APSME_TransportKeyReq
   \   0000B4   04           INC       A
   \   0000B5   12....       LCALL     ?XSTACK_DISP101_8
   \   0000B8   12....       LCALL     `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
    808          
    809                // send key to partner device
    810                req.dstAddr   = partNwkAddr;
   \   0000BB   85..82       MOV       DPL,?XSP + 0
   \   0000BE   85..83       MOV       DPH,?XSP + 1
   \   0000C1   12....       LCALL     ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   0000C4   7402         MOV       A,#0x2
   \   0000C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C9   12....       LCALL     ??Subroutine113_0 & 0xFFFF
    811                req.extAddr   = initExtAddr;
   \                     ??CrossCallReturnLabel_235:
   \   0000CC   740F         MOV       A,#0xf
   \   0000CE   12....       LCALL     ?XSTACK_DISP100_8
   \   0000D1   7408         MOV       A,#0x8
   \   0000D3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D6   12....       LCALL     ??Subroutine113_0 & 0xFFFF
    812                req.initiator = FALSE;
   \                     ??CrossCallReturnLabel_236:
   \   0000D9   740A         MOV       A,#0xa
   \   0000DB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DE   E4           CLR       A
   \   0000DF   F0           MOVX      @DPTR,A
    813          
    814                APSME_TransportKeyReq( &req );
   \   0000E0                ; Setup parameters for call to function APSME_TransportKeyReq
   \   0000E0   7402         MOV       A,#0x2
   \   0000E2   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E5   12....       LCALL     ?Subroutine68 & 0xFFFF
    815          
    816                // clear copy of key in RAM
    817                osal_memset( key, 0x00, SEC_KEY_LEN);
    818          
    819              }
    820            }
   \                     ??CrossCallReturnLabel_102:
   \   0000E8   7417         MOV       A,#0x17
   \   0000EA   12....       LCALL     ?XSTACK_DISP101_8
   \   0000ED   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    821          }
   \                     ??ZDSecMgrAppKeyReq_0:
   \   0000F0   7427         MOV       A,#0x27
   \   0000F2   02....       LJMP      ??Subroutine116_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   EA           MOV       A,R2
   \   000001   2405         ADD       A,#0x5
   \   000003                REQUIRE ??Subroutine101_0
   \   000003                ; // Fall through to label ??Subroutine101_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine101_0:
   \   000000   FA           MOV       R2,A
   \   000001   E4           CLR       A
   \   000002   3F           ADDC      A,R7
   \   000003   FB           MOV       R3,A
   \   000004   12....       LCALL     `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   000007   E9           MOV       A,R1
   \   000008   6401         XRL       A,#0x1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E4           CLR       A
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine102_0
   \   000003                ; // Fall through to label ??Subroutine102_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine102_0:
   \   000000   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL     `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
   \   000003                ; Setup parameters for call to function osal_memset
   \   000003                ; Setup parameters for call to function osal_memset
   \   000003   7C10         MOV       R4,#0x10
   \   000005   7D00         MOV       R5,#0x0
   \   000007   7900         MOV       R1,#0x0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000007   12....       LCALL     `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
   \   00000A   E9           MOV       A,R1
   \   00000B   6401         XRL       A,#0x1
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006                REQUIRE ??Subroutine103_0
   \   000006                ; // Fall through to label ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine116_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine117_0
   \   000003                ; // Fall through to label ??Subroutine117_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine117_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine121_0
   \   000002                ; // Fall through to label ??Subroutine121_0
    822          
    823          /******************************************************************************
    824           * @fn          ZDSecMgrTclkReq
    825           *
    826           * @brief       Process request for TCLK.
    827           *
    828           * @param       device - [in] ZDO_RequestKeyInd_t, request info
    829           *
    830           * @return      none
    831           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    832          void ZDSecMgrTclkReq( ZDO_RequestKeyInd_t* ind )
   \                     ZDSecMgrTclkReq:
    833          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 59
   \   000005   74C5         MOV       A,#-0x3b
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    834            APSME_TransportKeyReq_t req;
    835            uint8                   initExtAddr[Z_EXTADDR_LEN];
    836            uint16                  partNwkAddr;
    837            uint8                   key[SEC_KEY_LEN];
    838            APSME_TCLKDevEntry_t    TCLKDevEntry;
    839            uint8                   found;
    840              
    841            // validate initiator and partner
    842            if ( ( ( APSME_LookupNwkAddr( ind->partExtAddr, &partNwkAddr ) == TRUE ) || ( ind->keyType != KEY_TYPE_APP_MASTER ) ) &&
    843                 (   APSME_LookupExtAddr( ind->srcAddr, initExtAddr )      == TRUE ) )
   \   00000E                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   00000E   7401         MOV       A,#0x1
   \   000010   12....       LCALL     ?XSTACK_DISP102_8
   \   000013   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000016   6010         JZ        ??ZDSecMgrTclkReq_0
   \   000018   8E82         MOV       DPL,R6
   \   00001A   8F83         MOV       DPH,R7
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   6402         XRL       A,#0x2
   \   000023   7003         JNZ       $+5
   \   000025   02....       LJMP      ??ZDSecMgrTclkReq_1 & 0xFFFF
   \                     ??ZDSecMgrTclkReq_0:
   \   000028                ; Setup parameters for call to function APSME_LookupExtAddr
   \   000028   7410         MOV       A,#0x10
   \   00002A   12....       LCALL     ?XSTACK_DISP102_8
   \   00002D   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000030   6003         JZ        $+5
   \   000032   02....       LJMP      ??ZDSecMgrTclkReq_1 & 0xFFFF
    844            {
    845              // point the key to some memory
    846              req.key = key;
   \   000035   742B         MOV       A,#0x2b
   \   000037   12....       LCALL     ?XSTACK_DISP100_8
   \   00003A   7407         MOV       A,#0x7
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   12....       LCALL     ??Subroutine113_0 & 0xFFFF
    847          
    848              //Search for the entry
    849              APSME_SearchTCLinkKeyEntry(initExtAddr,&found, &TCLKDevEntry);
   \                     ??CrossCallReturnLabel_237:
   \   000042                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   000042   7418         MOV       A,#0x18
   \   000044   12....       LCALL     ?XSTACK_DISP100_8
   \   000047   88..         MOV       ?V0,R0
   \   000049   89..         MOV       ?V1,R1
   \   00004B   78..         MOV       R0,#?V0
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000050   7402         MOV       A,#0x2
   \   000052   12....       LCALL     ?XSTACK_DISP102_8
   \   000055   7412         MOV       A,#0x12
   \   000057   12....       LCALL     ?XSTACK_DISP101_8
   \   00005A   12....       LCALL     ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   00005D   12....       LCALL     ?DEALLOC_XSTACK8
    850          
    851              //If found, generate the key accordingly to the key attribute
    852              if(found)
   \   000060   85..82       MOV       DPL,?XSP + 0
   \   000063   85..83       MOV       DPH,?XSP + 1
   \   000066   E0           MOVX      A,@DPTR
   \   000067   6065         JZ        ??ZDSecMgrTclkReq_1
    853              {
    854                //Generate key from the seed, which would be the unique key
    855                ZDSecMgrGenerateKeyFromSeed(TCLKDevEntry.extAddr,TCLKDevEntry.SeedShift_IcIndex,req.key);
   \   000069                ; Setup parameters for call to function ZDSecMgrGenerateKeyFromSeed
   \   000069   7407         MOV       A,#0x7
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000071   742A         MOV       A,#0x2a
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   E0           MOVX      A,@DPTR
   \   000077   F9           MOV       R1,A
   \   000078   7420         MOV       A,#0x20
   \   00007A   12....       LCALL     ?XSTACK_DISP0_8
   \   00007D   AA82         MOV       R2,DPL
   \   00007F   AB83         MOV       R3,DPH
   \   000081   12....       LCALL     `??ZDSecMgrGenerateKeyFromSeed::?relay`; Banked call to: ZDSecMgrGenerateKeyFromSeed
    856              
    857                // always secure
    858                req.nwkSecure = TRUE;
   \   000084   740D         MOV       A,#0xd
   \   000086   12....       LCALL     ?XSTACK_DISP0_8
   \   000089   7401         MOV       A,#0x1
   \   00008B   F0           MOVX      @DPTR,A
    859                req.apsSecure = TRUE;
   \   00008C   740C         MOV       A,#0xc
   \   00008E   12....       LCALL     ?XSTACK_DISP0_8
   \   000091   7401         MOV       A,#0x1
   \   000093   F0           MOVX      @DPTR,A
    860                req.tunnel    = NULL;
   \   000094   740E         MOV       A,#0xe
   \   000096   12....       LCALL     ?XSTACK_DISP0_8
   \   000099   12....       LCALL     ?Subroutine14 & 0xFFFF
    861          
    862                // send key to initiator device
    863                req.dstAddr   = ind->srcAddr;
   \                     ??CrossCallReturnLabel_163:
   \   00009C   7403         MOV       A,#0x3
   \   00009E   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A1   12....       LCALL     ??Subroutine113_0 & 0xFFFF
    864                req.extAddr   = initExtAddr;
   \                     ??CrossCallReturnLabel_238:
   \   0000A4   7410         MOV       A,#0x10
   \   0000A6   12....       LCALL     ?XSTACK_DISP100_8
   \   0000A9   7409         MOV       A,#0x9
   \   0000AB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AE   12....       LCALL     ?Subroutine23 & 0xFFFF
    865                req.initiator = TRUE;
   \                     ??CrossCallReturnLabel_24:
   \   0000B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B4   7401         MOV       A,#0x1
   \   0000B6   F0           MOVX      @DPTR,A
    866                req.keyType   = KEY_TYPE_TC_LINK;
   \   0000B7   7405         MOV       A,#0x5
   \   0000B9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BC   7404         MOV       A,#0x4
   \   0000BE   F0           MOVX      @DPTR,A
    867                  
    868                APSME_TransportKeyReq( &req );
   \   0000BF                ; Setup parameters for call to function APSME_TransportKeyReq
   \   0000BF   14           DEC       A
   \   0000C0   12....       LCALL     ?XSTACK_DISP101_8
   \   0000C3   12....       LCALL     ?Subroutine68 & 0xFFFF
    869                  
    870                // clear copy of key in RAM
    871                osal_memset( key, 0x00, SEC_KEY_LEN);
    872              
    873              }
    874            }
   \                     ??CrossCallReturnLabel_103:
   \   0000C6   742B         MOV       A,#0x2b
   \   0000C8   12....       LCALL     ?XSTACK_DISP101_8
   \   0000CB   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    875          }
   \                     ??ZDSecMgrTclkReq_1:
   \   0000CE   743B         MOV       A,#0x3b
   \   0000D0   02....       LJMP      ??Subroutine116_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function APSME_GetRequest
   \   000005   740B         MOV       A,#0xb
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine126_0:
   \   000000   12....       LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET
    876          
    877          /******************************************************************************
    878           * @fn          ZDSecMgrAppConfKeyReq
    879           *
    880           * @brief       Process request for APP key between two devices.
    881           *
    882           * @param       device - [in] ZDO_VerifyKeyInd_t, request info
    883           *
    884           * @return      none
    885           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    886          void ZDSecMgrAppConfKeyReq( ZDO_VerifyKeyInd_t* ind )
   \                     ZDSecMgrAppConfKeyReq:
    887          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 6
   \   000004   74FA         MOV       A,#-0x6
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    888            APSME_ConfirmKeyReq_t   req;
    889          
    890            // send key to initiator device
    891            req.dstAddr      = ind->srcAddr;
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   12....       LCALL     ?Subroutine24 & 0xFFFF
    892            req.status       = ind->verifyKeyStatus;
   \                     ??CrossCallReturnLabel_253:
   \   000012   EA           MOV       A,R2
   \   000013   241D         ADD       A,#0x1d
   \   000015   F582         MOV       DPL,A
   \   000017   E4           CLR       A
   \   000018   3B           ADDC      A,R3
   \   000019   F583         MOV       DPH,A
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   C0E0         PUSH      A
   \   00001E   7402         MOV       A,#0x2
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   D0E0         POP       A
   \   000025   F0           MOVX      @DPTR,A
    893            req.dstExtAddr   = ind->extAddr;
   \   000026   EA           MOV       A,R2
   \   000027   2405         ADD       A,#0x5
   \   000029   F8           MOV       R0,A
   \   00002A   E4           CLR       A
   \   00002B   3B           ADDC      A,R3
   \   00002C   F9           MOV       R1,A
   \   00002D   7403         MOV       A,#0x3
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   12....       LCALL     ?Subroutine17 & 0xFFFF
    894            req.keyType      = ind->keyType;
   \                     ??CrossCallReturnLabel_14:
   \   000035   E0           MOVX      A,@DPTR
   \   000036   C0E0         PUSH      A
   \   000038   7405         MOV       A,#0x5
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   D0E0         POP       A
   \   00003F   12....       LCALL     ??Subroutine119_0 & 0xFFFF
    895          
    896            if ( ( ZSTACK_DEVICE_BUILD & DEVICE_BUILD_COORDINATOR ) != 0 )
    897            {
    898              APSME_ConfirmKeyReq( &req );
   \                     ??CrossCallReturnLabel_266:
   \   000042   12....       LCALL     `??APSME_ConfirmKeyReq::?relay`; Banked call to: APSME_ConfirmKeyReq
    899            }
    900            
    901          }
   \   000045   7406         MOV       A,#0x6
   \   000047                REQUIRE ?Subroutine9
   \   000047                ; // Fall through to label ?Subroutine9

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   02....       LJMP      ??Subroutine105_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004                REQUIRE ??Subroutine104_0
   \   000004                ; // Fall through to label ??Subroutine104_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000003                REQUIRE ??Subroutine113_0
   \   000003                ; // Fall through to label ??Subroutine113_0
    902          
    903          
    904          /******************************************************************************
    905           * @fn          ZDSecMgrSendNwkKey
    906           *
    907           * @brief       Send NWK key to device joining network.
    908           *
    909           * @param       device - [in] ZDSecMgrDevice_t, device info
    910           *
    911           * @return      ZStatus_t
    912           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    913          ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrSendNwkKey:
    914          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 34
   \   000005   74DE         MOV       A,#-0x22
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    915            ZStatus_t status;
    916            APSME_TransportKeyReq_t req;
    917            APSDE_FrameTunnel_t tunnel;
    918            nwkKeyDesc tmpKey;
    919          
    920            req.dstAddr   = device->nwkAddr;
   \   00000E   8A82         MOV       DPL,R2
   \   000010   F583         MOV       DPH,A
   \   000012   12....       LCALL     ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000015   7404         MOV       A,#0x4
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   12....       LCALL     ??Subroutine113_0 & 0xFFFF
    921            req.extAddr   = device->extAddr;
   \                     ??CrossCallReturnLabel_239:
   \   00001D   8A82         MOV       DPL,R2
   \   00001F   8B83         MOV       DPH,R3
   \   000021   12....       LCALL     ??Subroutine107_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000024   740A         MOV       A,#0xa
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   12....       LCALL     ??Subroutine113_0 & 0xFFFF
    922          
    923            req.keyType   = KEY_TYPE_NWK;
   \                     ??CrossCallReturnLabel_240:
   \   00002C   7406         MOV       A,#0x6
   \   00002E   12....       LCALL     ?XSTACK_DISP0_8
   \   000031   7401         MOV       A,#0x1
   \   000033   F0           MOVX      @DPTR,A
    924          
    925            // get the Active Key into a local variable
    926            if ( NLME_ReadNwkKeyInfo( 0, sizeof(tmpKey), &tmpKey,
    927                                     ZCD_NV_NWK_ACTIVE_KEY_INFO ) != SUCCESS )
   \   000034                ; Setup parameters for call to function NLME_ReadNwkKeyInfo
   \   000034   75..3A       MOV       ?V0,#0x3a
   \   000037   75..00       MOV       ?V1,#0x0
   \   00003A   78..         MOV       R0,#?V0
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003F   7413         MOV       A,#0x13
   \   000041   12....       LCALL     ?XSTACK_DISP100_8
   \   000044   88..         MOV       ?V0,R0
   \   000046   89..         MOV       ?V1,R1
   \   000048   78..         MOV       R0,#?V0
   \   00004A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004D   7C11         MOV       R4,#0x11
   \   00004F   7D00         MOV       R5,#0x0
   \   000051   7A00         MOV       R2,#0x0
   \   000053   7B00         MOV       R3,#0x0
   \   000055   12....       LCALL     `??NLME_ReadNwkKeyInfo::?relay`; Banked call to: NLME_ReadNwkKeyInfo
   \   000058   7404         MOV       A,#0x4
   \   00005A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005D   E9           MOV       A,R1
   \   00005E   600D         JZ        ??ZDSecMgrSendNwkKey_0
    928            {
    929              // set key data to all 0s if NV read fails
    930              osal_memset(&tmpKey, 0x00, sizeof(tmpKey));
   \   000060                ; Setup parameters for call to function osal_memset
   \   000060   7C11         MOV       R4,#0x11
   \   000062   7D00         MOV       R5,#0x0
   \   000064   7900         MOV       R1,#0x0
   \   000066   EC           MOV       A,R4
   \   000067   12....       LCALL     ?XSTACK_DISP101_8
   \   00006A   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    931            }
    932          
    933            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
    934            {
    935              // set values
    936              req.keySeqNum = tmpKey.keySeqNum;
   \                     ??ZDSecMgrSendNwkKey_0:
   \   00006D   7411         MOV       A,#0x11
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   E0           MOVX      A,@DPTR
   \   000073   C0E0         PUSH      A
   \   000075   7407         MOV       A,#0x7
   \   000077   12....       LCALL     ?XSTACK_DISP0_8
   \   00007A   D0E0         POP       A
   \   00007C   F0           MOVX      @DPTR,A
    937              req.key       = tmpKey.key;
   \   00007D   7412         MOV       A,#0x12
   \   00007F   12....       LCALL     ?XSTACK_DISP0_8
   \   000082   A882         MOV       R0,DPL
   \   000084   A983         MOV       R1,DPH
   \   000086   7408         MOV       A,#0x8
   \   000088   12....       LCALL     ?XSTACK_DISP0_8
   \   00008B   12....       LCALL     ??Subroutine113_0 & 0xFFFF
    938          
    939              //devtag.pro.security.todo - make sure that if there is no link key the NWK
    940              //key isn't used to secure the frame at the APS layer -- since the receiving
    941              //device may not have a NWK key yet
    942              req.apsSecure = TRUE;
   \                     ??CrossCallReturnLabel_241:
   \   00008E   740D         MOV       A,#0xd
   \   000090   12....       LCALL     ?XSTACK_DISP0_8
   \   000093   7401         MOV       A,#0x1
   \   000095   F0           MOVX      @DPTR,A
    943          
    944              // check if using secure hop to parent
    945              if ( device->parentAddr == NLME_GetShortAddr() )
   \   000096                ; Setup parameters for call to function NLME_GetShortAddr
   \   000096   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000099   7003         JNZ       ??ZDSecMgrSendNwkKey_1
   \   00009B   A3           INC       DPTR
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   69           XRL       A,R1
   \                     ??ZDSecMgrSendNwkKey_1:
   \   00009E   7011         JNZ       ??ZDSecMgrSendNwkKey_2
    946              {
    947                req.nwkSecure = FALSE;
   \   0000A0   740E         MOV       A,#0xe
   \   0000A2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A5   E4           CLR       A
   \   0000A6   F0           MOVX      @DPTR,A
    948                req.tunnel    = NULL;
   \   0000A7   740F         MOV       A,#0xf
   \   0000A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AC   E4           CLR       A
   \   0000AD   F0           MOVX      @DPTR,A
   \   0000AE   A3           INC       DPTR
   \   0000AF   8025         SJMP      ??ZDSecMgrSendNwkKey_3
    949              }
    950              else
    951              {
    952                req.nwkSecure   = TRUE;
   \                     ??ZDSecMgrSendNwkKey_2:
   \   0000B1   740E         MOV       A,#0xe
   \   0000B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B6   7401         MOV       A,#0x1
   \   0000B8   F0           MOVX      @DPTR,A
    953                req.tunnel      = &tunnel;
   \   0000B9   740F         MOV       A,#0xf
   \   0000BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BE   E5..         MOV       A,?XSP + 0
   \   0000C0   F0           MOVX      @DPTR,A
   \   0000C1   A3           INC       DPTR
   \   0000C2   E5..         MOV       A,?XSP + 1
   \   0000C4   12....       LCALL     ?Subroutine21 & 0xFFFF
    954                req.tunnel->tna = device->parentAddr;
    955                req.tunnel->dea = device->extAddr;
    956              }
    957            }
   \                     ??CrossCallReturnLabel_19:
   \   0000C7   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000CA   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000CD   7402         MOV       A,#0x2
   \   0000CF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D2   E8           MOV       A,R0
   \   0000D3   F0           MOVX      @DPTR,A
   \   0000D4   A3           INC       DPTR
   \   0000D5   E9           MOV       A,R1
   \                     ??ZDSecMgrSendNwkKey_3:
   \   0000D6   F0           MOVX      @DPTR,A
    958            else
    959            {
    960              // default values
    961              //devtag.0604.verify
    962              req.nwkSecure = TRUE;
    963              req.apsSecure = FALSE;
    964              req.tunnel    = NULL;
    965          
    966              if ( device->parentAddr != NLME_GetShortAddr() )
    967              {
    968                req.dstAddr = device->parentAddr;
    969              }
    970          
    971              // send the real key
    972              if ( zgPreConfigKeys == FALSE )
    973              {
    974                req.keySeqNum = tmpKey.keySeqNum;
    975                req.key       = tmpKey.key;
    976          
    977                // check if using secure hop to to parent
    978                if ( device->parentAddr == NLME_GetShortAddr() )
    979                {
    980                  req.nwkSecure = FALSE;
    981                }
    982              }
    983              else
    984              {
    985                // this is to send the all zero key when the NWK key has been preconfigured
    986                req.key       = NULL;
    987                req.keySeqNum = 0;
    988              }
    989            }
    990          
    991            status = APSME_TransportKeyReq( &req );
   \   0000D7                ; Setup parameters for call to function APSME_TransportKeyReq
   \   0000D7   7404         MOV       A,#0x4
   \   0000D9   12....       LCALL     ?XSTACK_DISP101_8
   \   0000DC   12....       LCALL     `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
   \   0000DF   E9           MOV       A,R1
   \   0000E0   FE           MOV       R6,A
    992          
    993            // clear copy of key in RAM before return
    994            osal_memset( &tmpKey, 0x00, sizeof(nwkKeyDesc) );
   \   0000E1                ; Setup parameters for call to function osal_memset
   \   0000E1   7C11         MOV       R4,#0x11
   \   0000E3   7D00         MOV       R5,#0x0
   \   0000E5   7900         MOV       R1,#0x0
   \   0000E7   EC           MOV       A,R4
   \   0000E8   12....       LCALL     ?XSTACK_DISP101_8
   \   0000EB   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    995          
    996            return status;
   \   0000EE   EE           MOV       A,R6
   \   0000EF   F9           MOV       R1,A
   \   0000F0   7422         MOV       A,#0x22
   \   0000F2   02....       LJMP      ??Subroutine116_0 & 0xFFFF
    997          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   68           XRL       A,R0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000003   8A..         MOV       ?V0,R2
   \   000005   8B..         MOV       ?V1,R3
   \   000007   A8..         MOV       R0,?V0
   \   000009   A9..         MOV       R1,?V1
   \   00000B   8E82         MOV       DPL,R6
   \   00000D   8F83         MOV       DPH,R7
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine108_0
   \   000002                ; // Fall through to label ??Subroutine108_0
    998          
    999          /******************************************************************************
   1000           * @fn          ZDSecMgrDeviceRemoveByExtAddr
   1001           *
   1002           * @brief       Remove device entry by its ext address.
   1003           *
   1004           * @param       pAddr - pointer to the extended address
   1005           *
   1006           * @return      ZStatus_t
   1007           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1008          ZStatus_t ZDSecMgrDeviceRemoveByExtAddr( uint8 *pAddr )
   \                     ZDSecMgrDeviceRemoveByExtAddr:
   1009          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1010            ZDSecMgrEntry_t *pEntry;
   1011            uint8           retValue;
   1012          
   1013            retValue = (uint8)ZDSecMgrEntryLookupExt( pAddr, &pEntry );
   \   00000A                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   00000A   AC..         MOV       R4,?XSP + 0
   \   00000C   AD..         MOV       R5,?XSP + 1
   \   00000E   12....       LCALL     `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   000011   E9           MOV       A,R1
   \   000012   FE           MOV       R6,A
   1014          
   1015            if( retValue == ZSuccess )
   \   000013   700C         JNZ       ??ZDSecMgrDeviceRemoveByExtAddr_0
   1016            {
   1017              // remove device from entry data
   1018              ZDSecMgrEntryFree( pEntry );
   \   000015                ; Setup parameters for call to function ZDSecMgrEntryFree
   \   000015   85..82       MOV       DPL,?XSP + 0
   \   000018   85..83       MOV       DPH,?XSP + 1
   \   00001B   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   1019            }
   \                     ??CrossCallReturnLabel_171:
   \   00001E   12....       LCALL     `??ZDSecMgrEntryFree::?relay`; Banked call to: ZDSecMgrEntryFree
   1020          
   1021            return retValue;
   \                     ??ZDSecMgrDeviceRemoveByExtAddr_0:
   \   000021   EE           MOV       A,R6
   \   000022   F9           MOV       R1,A
   \   000023                REQUIRE ?Subroutine7
   \   000023                ; // Fall through to label ?Subroutine7
   1022          }
   1023          
   1024          /******************************************************************************
   1025           * @fn          ZDSecMgrDeviceRemove
   1026           *
   1027           * @brief       Remove device from network.
   1028           *
   1029           * @param       device - [in] ZDSecMgrDevice_t, device info
   1030           *
   1031           * @return      none
   1032           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1033          void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceRemove:
   1034          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV       A,#-0x13
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1035            APSME_RemoveDeviceReq_t remDevReq;
   1036            NLME_LeaveReq_t         leaveReq;
   1037            associated_devices_t*   assoc;
   1038            uint8 TC_ExtAddr[Z_EXTADDR_LEN];
   1039          
   1040            // check if parent, remove the device
   1041            if ( device->parentAddr == NLME_GetShortAddr() )
   \   00000E                ; Setup parameters for call to function NLME_GetShortAddr
   \   00000E   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000011   7003         JNZ       ??ZDSecMgrDeviceRemove_0
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   69           XRL       A,R1
   \                     ??ZDSecMgrDeviceRemove_0:
   \   000016   6003         JZ        $+5
   \   000018   02....       LJMP      ??ZDSecMgrDeviceRemove_1 & 0xFFFF
   1042            {
   1043              // this is the parent of the device
   1044              leaveReq.extAddr        = device->extAddr;
   \   00001B   EE           MOV       A,R6
   \   00001C   2402         ADD       A,#0x2
   \   00001E   F8           MOV       R0,A
   \   00001F   E4           CLR       A
   \   000020   3F           ADDC      A,R7
   \   000021   F9           MOV       R1,A
   \   000022   8882         MOV       DPL,R0
   \   000024   F583         MOV       DPH,A
   \   000026   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000029   7401         MOV       A,#0x1
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   12....       LCALL     ?Subroutine16 & 0xFFFF
   1045              leaveReq.removeChildren = FALSE;
   \                     ??CrossCallReturnLabel_12:
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   E4           CLR       A
   \   000035   F0           MOVX      @DPTR,A
   1046              leaveReq.rejoin         = FALSE;
   \   000036   7404         MOV       A,#0x4
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   E4           CLR       A
   \   00003C   F0           MOVX      @DPTR,A
   1047          
   1048              // find child association
   1049              assoc = AssocGetWithExt( device->extAddr );
   \   00003D                ; Setup parameters for call to function AssocGetWithExt
   \   00003D   8882         MOV       DPL,R0
   \   00003F   8983         MOV       DPH,R1
   \   000041   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000044   8B..         MOV       ?V1,R3
   \   000046   A9..         MOV       R1,?V1
   1050          
   1051              if ( ( assoc != NULL                            ) &&
   1052                   ( assoc->nodeRelation >= CHILD_RFD         ) &&
   1053                   ( assoc->nodeRelation <= CHILD_FFD_RX_IDLE )    )
   \   000048   EA           MOV       A,R2
   \   000049   49           ORL       A,R1
   \   00004A   6030         JZ        ??ZDSecMgrDeviceRemove_2
   \   00004C   8A82         MOV       DPL,R2
   \   00004E   8B83         MOV       DPH,R3
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   6025         JZ        ??ZDSecMgrDeviceRemove_2
   \   000057   C3           CLR       C
   \   000058   9405         SUBB      A,#0x5
   \   00005A   5020         JNC       ??ZDSecMgrDeviceRemove_2
   1054              {
   1055                // check if associated device is authenticated
   1056                if ( assoc->devStatus & DEV_SEC_AUTH_STATUS )
   \   00005C   8A82         MOV       DPL,R2
   \   00005E   8B83         MOV       DPH,R3
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   E0           MOVX      A,@DPTR
   \   000066   A2E3         MOV       C,0xE0 /* A   */.3
   \   000068   7405         MOV       A,#0x5
   \   00006A   5006         JNC       ??ZDSecMgrDeviceRemove_3
   1057                {
   1058                  leaveReq.silent = FALSE;
   \   00006C   12....       LCALL     ?XSTACK_DISP0_8
   \   00006F   E4           CLR       A
   \   000070   8005         SJMP      ??ZDSecMgrDeviceRemove_4
   1059                }
   1060                else
   1061                {
   1062                  leaveReq.silent = TRUE;
   \                     ??ZDSecMgrDeviceRemove_3:
   \   000072   12....       LCALL     ?XSTACK_DISP0_8
   \   000075   7401         MOV       A,#0x1
   \                     ??ZDSecMgrDeviceRemove_4:
   \   000077   F0           MOVX      @DPTR,A
   1063                }
   1064          
   1065                NLME_LeaveReq( &leaveReq );
   \   000078                ; Setup parameters for call to function NLME_LeaveReq
   \   000078   7401         MOV       A,#0x1
   \   00007A   801D         SJMP      ??ZDSecMgrDeviceRemove_5
   1066              }
   1067              else if ( device->nwkAddr == NLME_GetShortAddr() )
   \                     ??ZDSecMgrDeviceRemove_2:
   \   00007C                ; Setup parameters for call to function NLME_GetShortAddr
   \   00007C   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   68           XRL       A,R0
   \   000081   7003         JNZ       ??ZDSecMgrDeviceRemove_6
   \   000083   A3           INC       DPTR
   \   000084   E0           MOVX      A,@DPTR
   \   000085   69           XRL       A,R1
   \                     ??ZDSecMgrDeviceRemove_6:
   \   000086   7075         JNZ       ??ZDSecMgrDeviceRemove_7
   1068              {
   1069                // this is when ZC wants that ZR removes itself from the network
   1070                leaveReq.extAddr = NULL;
   \   000088   7401         MOV       A,#0x1
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   E4           CLR       A
   \   00008E   F0           MOVX      @DPTR,A
   \   00008F   A3           INC       DPTR
   \   000090   F0           MOVX      @DPTR,A
   1071                leaveReq.silent = FALSE;
   \   000091   7405         MOV       A,#0x5
   \   000093   12....       LCALL     ?XSTACK_DISP0_8
   \   000096   E4           CLR       A
   \   000097   F0           MOVX      @DPTR,A
   1072          
   1073                NLME_LeaveReq( &leaveReq );
   \   000098                ; Setup parameters for call to function NLME_LeaveReq
   \   000098   04           INC       A
   \                     ??ZDSecMgrDeviceRemove_5:
   \   000099   12....       LCALL     ?XSTACK_DISP101_8
   \   00009C   12....       LCALL     `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   00009F   805C         SJMP      ??ZDSecMgrDeviceRemove_7
   1074              }
   1075            }
   1076            else
   1077            {
   1078              // this is not the parent of the device
   1079              remDevReq.parentAddr   = device->parentAddr;
   \                     ??ZDSecMgrDeviceRemove_1:
   \   0000A1   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   0000A4   7406         MOV       A,#0x6
   \   0000A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A9   12....       LCALL     ?Subroutine13 & 0xFFFF
   1080              remDevReq.childExtAddr = device->extAddr;
   \                     ??CrossCallReturnLabel_7:
   \   0000AC   7408         MOV       A,#0x8
   \   0000AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B1   12....       LCALL     ?Subroutine23 & 0xFFFF
   1081          
   1082              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1083              {
   1084                uint8 found;
   1085                APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
   \                     ??CrossCallReturnLabel_25:
   \   0000B4   12....       LCALL     ?XSTACK_DISP102_8
   \   0000B7   12....       LCALL     ?Subroutine74 & 0xFFFF
   1086                
   1087                APSME_SearchTCLinkKeyEntry(TC_ExtAddr,&found,NULL);
   \                     ??CrossCallReturnLabel_110:
   \   0000BA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BD   7402         MOV       A,#0x2
   \   0000BF   12....       LCALL     ?XSTACK_DISP102_8
   \   0000C2   740D         MOV       A,#0xd
   \   0000C4   12....       LCALL     ?XSTACK_DISP101_8
   \   0000C7   12....       LCALL     ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   0000CA   12....       LCALL     ?DEALLOC_XSTACK8
   1088                
   1089                // For ZG_GLOBAL_LINK_KEY the message has to be sent twice, one
   1090                // APS un-encrypted and one APS encrypted, to make sure that it can interoperate
   1091                // with legacy Coordinator devices which can only handle one or the other.
   1092          #if defined ( APP_TP2_TEST_MODE )
   1093                if ( ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY ) && ( guTxApsSecON != TRUE ) )
   1094          #else
   1095                if ( ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY ) && ( found == FALSE ) )
   \   0000CD   90....       MOV       DPTR,#zgApsLinkKeyType
   \   0000D0   E0           MOVX      A,@DPTR
   \   0000D1   6401         XRL       A,#0x1
   \   0000D3   7018         JNZ       ??ZDSecMgrDeviceRemove_8
   \   0000D5   85..82       MOV       DPL,?XSP + 0
   \   0000D8   85..83       MOV       DPH,?XSP + 1
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   700F         JNZ       ??ZDSecMgrDeviceRemove_8
   1096          #endif
   1097                {
   1098                  remDevReq.apsSecure = FALSE;
   \   0000DE   740A         MOV       A,#0xa
   \   0000E0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E3   E4           CLR       A
   \   0000E4   F0           MOVX      @DPTR,A
   1099          
   1100                  APSME_RemoveDeviceReq( &remDevReq );
   \   0000E5                ; Setup parameters for call to function APSME_RemoveDeviceReq
   \   0000E5   7406         MOV       A,#0x6
   \   0000E7   12....       LCALL     ?XSTACK_DISP101_8
   \   0000EA   12....       LCALL     `??APSME_RemoveDeviceReq::?relay`; Banked call to: APSME_RemoveDeviceReq
   1101                }
   1102          
   1103          #if defined ( APP_TP2_TEST_MODE )
   1104                if ( guTxApsSecON != FALSE )
   1105                {
   1106                  remDevReq.apsSecure = TRUE;
   1107          
   1108                  APSME_RemoveDeviceReq( &remDevReq );
   1109                }
   1110          #else
   1111                remDevReq.apsSecure = TRUE;
   \                     ??ZDSecMgrDeviceRemove_8:
   \   0000ED   740A         MOV       A,#0xa
   \   0000EF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F2   7401         MOV       A,#0x1
   \   0000F4   F0           MOVX      @DPTR,A
   1112          
   1113                APSME_RemoveDeviceReq( &remDevReq );
   \   0000F5                ; Setup parameters for call to function APSME_RemoveDeviceReq
   \   0000F5   7406         MOV       A,#0x6
   \   0000F7   12....       LCALL     ?XSTACK_DISP101_8
   \   0000FA   12....       LCALL     `??APSME_RemoveDeviceReq::?relay`; Banked call to: APSME_RemoveDeviceReq
   1114          #endif
   1115              }
   1116              else
   1117              {
   1118                remDevReq.apsSecure = FALSE;
   1119          
   1120                APSME_RemoveDeviceReq( &remDevReq );
   1121              }
   1122            }
   1123          }
   \                     ??ZDSecMgrDeviceRemove_7:
   \   0000FD   7413         MOV       A,#0x13
   \   0000FF   02....       LJMP      ??Subroutine116_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   7A00         MOV       R2,#0x0
   \   000002   7B00         MOV       R3,#0x0
   \   000004   79AB         MOV       R1,#-0x55
   \   000006   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   \   000009                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   000009                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   000009   E4           CLR       A
   \   00000A   F5..         MOV       ?V0,A
   \   00000C   F5..         MOV       ?V1,A
   \   00000E   78..         MOV       R0,#?V0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006                REQUIRE ??Subroutine107_0
   \   000006                ; // Fall through to label ??Subroutine107_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL     ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000003   12....       LCALL     `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   000006   22           RET
   1124          
   1125          /******************************************************************************
   1126           * @fn          ZDSecMgrDeviceValidateRM (RESIDENTIAL MODE)
   1127           *
   1128           * @brief       Decide whether device is allowed.
   1129           *
   1130           * @param       device - [in] ZDSecMgrDevice_t, device info
   1131           *
   1132           * @return      ZStatus_t
   1133           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1134          ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceValidateRM:
   1135          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1136            ZStatus_t status;
   1137          
   1138            status = ZSuccess;
   \   000004   7900         MOV       R1,#0x0
   1139          
   1140            (void)device;  // Intentionally unreferenced parameter
   1141          
   1142            // For test purpose, turning off the zgSecurePermitJoin flag will force
   1143            // the trust center to reject any newly joining devices by sending
   1144            // Remove-device to the parents.
   1145            if ( zgSecurePermitJoin == FALSE )
   \   000006   90....       MOV       DPTR,#zgSecurePermitJoin
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   7002         JNZ       ??ZDSecMgrDeviceValidateRM_0
   1146            {
   1147              status = ZNwkUnknownDevice;
   \   00000C   79C8         MOV       R1,#-0x38
   1148            }
   1149          
   1150          
   1151          
   1152          #if 0  // Taken out because the following functionality is only used for test
   1153                 // purpose. A more efficient (above) way is used. It can be put
   1154                 // back in if customers request for a white/black list feature.
   1155                 // ZDSecMgrStoredDeviceList[] is defined in ZDSecMgr.c
   1156          
   1157            // The following code processes the device black list (stored device list)
   1158            // If the joining device is not part of the forbidden device list
   1159            // Return ZSuccess. Otherwise, return ZNwkUnknownDevice. The trust center
   1160            // will send Remove-device and ban the device from joining.
   1161          
   1162            uint8     index;
   1163            uint8*    restricted;
   1164          
   1165            // Look through the stored device list - used for restricted devices
   1166            for ( index = 0; index < ZDSECMGR_STORED_DEVICES; index++ )
   1167            {
   1168              restricted = ZDSecMgrStoredDeviceList[index];
   1169          
   1170              if ( AddrMgrExtAddrEqual( restricted, device->extAddr )  == TRUE )
   1171              {
   1172                // return as unknown device in regards to validation
   1173                status = ZNwkUnknownDevice;
   1174          
   1175                // break from loop
   1176                index = ZDSECMGR_STORED_DEVICES;
   1177              }
   1178            }
   1179          
   1180          #endif
   1181          
   1182            return status;
   \                     ??ZDSecMgrDeviceValidateRM_0:
   \   00000E   02....       LJMP      ??Subroutine105_0 & 0xFFFF
   1183          }
   1184          
   1185          /******************************************************************************
   1186           * @fn          ZDSecMgrDeviceValidate
   1187           *
   1188           * @brief       Decide whether device is allowed.
   1189           *
   1190           * @param       device - [in] ZDSecMgrDevice_t, device info
   1191           *
   1192           * @return      ZStatus_t
   1193           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1194          ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceValidate:
   1195          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1196            ZStatus_t status;
   1197          
   1198            if ( ZDSecMgrPermitJoiningEnabled == TRUE )
   \   000004   90....       MOV       DPTR,#ZDSecMgrPermitJoiningEnabled
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   7007         JNZ       ??ZDSecMgrDeviceValidate_0
   1199            {
   1200              status = ZDSecMgrDeviceValidateRM( device );
   \   00000C                ; Setup parameters for call to function ZDSecMgrDeviceValidateRM
   \   00000C   12....       LCALL     `??ZDSecMgrDeviceValidateRM::?relay`; Banked call to: ZDSecMgrDeviceValidateRM
   \   00000F   E9           MOV       A,R1
   \   000010   F9           MOV       R1,A
   \   000011   8002         SJMP      ??ZDSecMgrDeviceValidate_1
   1201            }
   1202            else
   1203            {
   1204              status = ZNwkUnknownDevice;
   \                     ??ZDSecMgrDeviceValidate_0:
   \   000013   79C8         MOV       R1,#-0x38
   1205            }
   1206          
   1207            return status;
   \                     ??ZDSecMgrDeviceValidate_1:
   \   000015   02....       LJMP      ??Subroutine105_0 & 0xFFFF
   1208          }
   1209          
   1210          /******************************************************************************
   1211           * @fn          ZDSecMgrDeviceJoin
   1212           *
   1213           * @brief       Try to join this device.
   1214           *
   1215           * @param       device - [in] ZDSecMgrDevice_t, device info
   1216           *
   1217           * @return      ZStatus_t
   1218           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1219          ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceJoin:
   1220          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1221            ZStatus_t status = ZSuccess;
   \   00000E   75..00       MOV       ?V0,#0x0
   1222            uint16    ami;
   1223          
   1224            // attempt to validate device that joined/rejoined without security
   1225            if ( device->secure == FALSE )
   \   000011   8A82         MOV       DPL,R2
   \   000013   F583         MOV       DPH,A
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   7008         JNZ       ??ZDSecMgrDeviceJoin_0
   1226            {
   1227              status = ZDSecMgrDeviceValidate( device );
   \   00001E                ; Setup parameters for call to function ZDSecMgrDeviceValidate
   \   00001E   12....       LCALL     `??ZDSecMgrDeviceValidate::?relay`; Banked call to: ZDSecMgrDeviceValidate
   \   000021   E9           MOV       A,R1
   \   000022   F5..         MOV       ?V0,A
   1228            }
   1229          
   1230            if ( status == ZSuccess )
   \   000024   704E         JNZ       ??ZDSecMgrDeviceJoin_1
   1231            {
   1232              // Add the device to the address manager
   1233              ZDSecMgrAddrStore( device->nwkAddr, device->extAddr, &ami );
   \                     ??ZDSecMgrDeviceJoin_0:
   \   000026                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   000026   A8..         MOV       R0,?XSP + 0
   \   000028   A9..         MOV       R1,?XSP + 1
   \   00002A   88..         MOV       ?V2,R0
   \   00002C   89..         MOV       ?V3,R1
   \   00002E   78..         MOV       R0,#?V2
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000036   8E82         MOV       DPL,R6
   \   000038   8F83         MOV       DPH,R7
   \   00003A   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   00003D   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000040   12....       LCALL     ?DEALLOC_XSTACK8
   1234          
   1235              // Only send the key to devices that have not been authenticated
   1236              if ( ( device->devStatus & DEV_SEC_INIT_STATUS ) &&
   1237                   ( device->secure == FALSE ) )
   \   000043   8E82         MOV       DPL,R6
   \   000045   8F83         MOV       DPH,R7
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   A2E2         MOV       C,0xE0 /* A   */.2
   \   000051   5021         JNC       ??ZDSecMgrDeviceJoin_1
   \   000053   8E82         MOV       DPL,R6
   \   000055   8F83         MOV       DPH,R7
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   7014         JNZ       ??ZDSecMgrDeviceJoin_1
   1238              {
   1239                //send the nwk key data to the joining device
   1240                status = ZDSecMgrSendNwkKey( device );
   \   000060                ; Setup parameters for call to function ZDSecMgrSendNwkKey
   \   000060   EE           MOV       A,R6
   \   000061   FA           MOV       R2,A
   \   000062   EF           MOV       A,R7
   \   000063   FB           MOV       R3,A
   \   000064   12....       LCALL     `??ZDSecMgrSendNwkKey::?relay`; Banked call to: ZDSecMgrSendNwkKey
   \   000067   E9           MOV       A,R1
   \   000068   F5..         MOV       ?V0,A
   1241              }
   1242          
   1243              if ( status != ZSuccess )
   \   00006A   6015         JZ        ??ZDSecMgrDeviceJoin_2
   1244              {
   1245                ZDSecMgrAddrClear( device->extAddr );
   \   00006C                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   00006C   12....       LCALL     ?Subroutine47 & 0xFFFF
   1246              }
   1247            }
   \                     ??CrossCallReturnLabel_176:
   \   00006F   12....       LCALL     `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   \   000072   8004         SJMP      ??ZDSecMgrDeviceJoin_3
   1248          
   1249            if ( status != ZSuccess )
   \                     ??ZDSecMgrDeviceJoin_1:
   \   000074   E5..         MOV       A,?V0
   \   000076   6009         JZ        ??ZDSecMgrDeviceJoin_2
   1250            {
   1251              // not allowed or transport key failed, remove the device
   1252              ZDSecMgrDeviceRemove( device );
   \                     ??ZDSecMgrDeviceJoin_3:
   \   000078                ; Setup parameters for call to function ZDSecMgrDeviceRemove
   \   000078   EE           MOV       A,R6
   \   000079   FA           MOV       R2,A
   \   00007A   EF           MOV       A,R7
   \   00007B   FB           MOV       R3,A
   \   00007C   12....       LCALL     `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
   \   00007F   8054         SJMP      ??ZDSecMgrDeviceJoin_4
   1253            }
   1254            else
   1255            {
   1256              // Pass the Trust Center Device Indication to higher layer if callback registered
   1257              if (zdoCBFunc[ZDO_TC_DEVICE_CBID] != NULL )
   \                     ??ZDSecMgrDeviceJoin_2:
   \   000081   90....       MOV       DPTR,#zdoCBFunc + 16
   \   000084   12....       LCALL     ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000087   604C         JZ        ??ZDSecMgrDeviceJoin_4
   1258              {
   1259                ZDO_TC_Device_t dev;
   1260          
   1261                dev.nwkAddr = device->nwkAddr;
   \   000089   8E82         MOV       DPL,R6
   \   00008B   8F83         MOV       DPH,R7
   \   00008D   12....       LCALL     ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000090   7402         MOV       A,#0x2
   \   000092   12....       LCALL     ?XSTACK_DISP0_8
   \   000095   12....       LCALL     ??Subroutine113_0 & 0xFFFF
   1262                osal_memcpy( dev.extAddr, device->extAddr, Z_EXTADDR_LEN );
   \                     ??CrossCallReturnLabel_242:
   \   000098                ; Setup parameters for call to function osal_memcpy
   \   000098   8E82         MOV       DPL,R6
   \   00009A   8F83         MOV       DPH,R7
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   F5..         MOV       ?V4,A
   \   0000A1   A3           INC       DPTR
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   F5..         MOV       ?V5,A
   \   0000A5   75..00       MOV       ?V6,#0x0
   \   0000A8   78..         MOV       R0,#?V4
   \   0000AA   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000AD   7C08         MOV       R4,#0x8
   \   0000AF   7D00         MOV       R5,#0x0
   \   0000B1   7407         MOV       A,#0x7
   \   0000B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B6   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   0000B9   12....       LCALL     ?DEALLOC_XSTACK8
   1263                dev.parentAddr = device->parentAddr;
   \   0000BC   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   0000BF   740C         MOV       A,#0xc
   \   0000C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C4   12....       LCALL     ??Subroutine113_0 & 0xFFFF
   1264          
   1265                zdoCBFunc[ZDO_TC_DEVICE_CBID]( (void*)&dev );
   \                     ??CrossCallReturnLabel_243:
   \   0000C7                ; Setup parameters for indirect call
   \   0000C7   7402         MOV       A,#0x2
   \   0000C9   12....       LCALL     ?XSTACK_DISP101_8
   \   0000CC   90....       MOV       DPTR,#zdoCBFunc + 16
   \   0000CF   12....       LCALL     ?Subroutine40 & 0xFFFF
   1266              }
   1267            }
   \                     ??CrossCallReturnLabel_56:
   \   0000D2   12....       LCALL     ?CALL_IND
   1268                
   1269                
   1270          
   1271            return status;
   \                     ??ZDSecMgrDeviceJoin_4:
   \   0000D5   A9..         MOV       R1,?V0
   \   0000D7   740E         MOV       A,#0xe
   \   0000D9   02....       LJMP      ?Subroutine4 & 0xFFFF
   1272          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   12....       LCALL     `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine122_0
   \   000003                ; // Fall through to label ??Subroutine122_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine122_0:
   \   000000   7F07         MOV       R7,#0x7
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006                REQUIRE ??Subroutine124_0
   \   000006                ; // Fall through to label ??Subroutine124_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004                REQUIRE ??Subroutine128_0
   \   000004                ; // Fall through to label ??Subroutine128_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine128_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET
   1273          
   1274          /******************************************************************************
   1275           * @fn          ZDSecMgrDeviceJoinDirect
   1276           *
   1277           * @brief       Try to join this device as a direct child.
   1278           *
   1279           * @param       device - [in] ZDSecMgrDevice_t, device info
   1280           *
   1281           * @return      ZStatus_t
   1282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1283          ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceJoinDirect:
   1284          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1285            ZStatus_t status;
   1286            
   1287            if(device->secure == FALSE)
   \   00000E   8A82         MOV       DPL,R2
   \   000010   F583         MOV       DPH,A
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   6003         JZ        $+5
   \   00001B   02....       LJMP      ??ZDSecMgrDeviceJoinDirect_0 & 0xFFFF
   1288            {  
   1289              uint8  found;
   1290              uint16 keyNvIndex;
   1291              APSME_TCLKDevEntry_t TCLKDevEntry;
   1292              
   1293              keyNvIndex = APSME_SearchTCLinkKeyEntry(device->extAddr,&found, &TCLKDevEntry);
   \   00001E                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   00001E   7401         MOV       A,#0x1
   \   000020   12....       LCALL     ?XSTACK_DISP100_8
   \   000023   88..         MOV       ?V0,R0
   \   000025   89..         MOV       ?V1,R1
   \   000027   78..         MOV       R0,#?V0
   \   000029   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002C   7402         MOV       A,#0x2
   \   00002E   12....       LCALL     ?XSTACK_DISP102_8
   \   000031   8A82         MOV       DPL,R2
   \   000033   8B83         MOV       DPH,R3
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00003A   12....       LCALL     ?DEALLOC_XSTACK8
   1294              
   1295              //If found and it was verified, then allow it to join in a fresh state by erasing the key entry
   1296              if((found == TRUE) && (TCLKDevEntry.keyAttributes == ZG_VERIFIED_KEY))
   \   00003D   85..82       MOV       DPL,?XSP + 0
   \   000040   85..83       MOV       DPH,?XSP + 1
   \   000043   E0           MOVX      A,@DPTR
   \   000044   6401         XRL       A,#0x1
   \   000046   706E         JNZ       ??ZDSecMgrDeviceJoinDirect_0
   \   000048   7411         MOV       A,#0x11
   \   00004A   12....       LCALL     ?XSTACK_DISP0_8
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   6402         XRL       A,#0x2
   \   000050   7064         JNZ       ??ZDSecMgrDeviceJoinDirect_0
   1297              {
   1298                uint16 index;
   1299                TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
   \   000052   74FF         MOV       A,#-0x1
   \   000054   F0           MOVX      @DPTR,A
   1300                //Increase the shift by one. Validate the maximum shift of the seed which is 15
   1301                TCLKDevEntry.SeedShift_IcIndex++;
   1302                TCLKDevEntry.SeedShift_IcIndex &= 0x0F;
   \   000055   7413         MOV       A,#0x13
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   04           INC       A
   \   00005C   540F         ANL       A,#0xf
   \   00005E   F0           MOVX      @DPTR,A
   1303                
   1304                TCLKDevEntry.rxFrmCntr = 0;
   \   00005F   7405         MOV       A,#0x5
   \   000061   12....       LCALL     ?XSTACK_DISP0_8
   \   000064   12....       LCALL     ?Subroutine27 & 0xFFFF
   1305                TCLKDevEntry.txFrmCntr = 0;
   \                     ??CrossCallReturnLabel_31:
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   12....       LCALL     ??Subroutine111_0 & 0xFFFF
   1306                
   1307                index = keyNvIndex - ZCD_NV_TCLK_TABLE_START;
   \                     ??CrossCallReturnLabel_218:
   \   00006D   EA           MOV       A,R2
   \   00006E   24EF         ADD       A,#-0x11
   \   000070   F8           MOV       R0,A
   \   000071   EB           MOV       A,R3
   \   000072   34FE         ADDC      A,#-0x2
   \   000074   F9           MOV       R1,A
   1308                
   1309                TCLinkKeyFrmCntr[index].rxFrmCntr = 0;
   \   000075   E8           MOV       A,R0
   \   000076   75..09       MOV       ?B,#0x9
   \   000079   A4           MUL       AB
   \   00007A   F8           MOV       R0,A
   \   00007B   AC..         MOV       R4,?B
   \   00007D   75..09       MOV       ?B,#0x9
   \   000080   E9           MOV       A,R1
   \   000081   A4           MUL       AB
   \   000082   2C           ADD       A,R4
   \   000083   F9           MOV       R1,A
   \   000084   74..         MOV       A,#TCLinkKeyFrmCntr & 0xff
   \   000086   28           ADD       A,R0
   \   000087   F8           MOV       R0,A
   \   000088   74..         MOV       A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   00008A   39           ADDC      A,R1
   \   00008B   F9           MOV       R1,A
   \   00008C   8882         MOV       DPL,R0
   \   00008E   F583         MOV       DPH,A
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   12....       LCALL     ??Subroutine111_0 & 0xFFFF
   1310                TCLinkKeyFrmCntr[index].txFrmCntr = 0;
   \                     ??CrossCallReturnLabel_219:
   \   000097   8882         MOV       DPL,R0
   \   000099   8983         MOV       DPH,R1
   \   00009B   12....       LCALL     ?Subroutine25 & 0xFFFF
   1311                
   1312                //Update the entry
   1313                osal_nv_write(keyNvIndex,0,sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
   1314              }
   1315              
   1316            }
   \                     ??CrossCallReturnLabel_27:
   \   00009E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A1   75..13       MOV       ?V0,#0x13
   \   0000A4   75..00       MOV       ?V1,#0x0
   \   0000A7   78..         MOV       R0,#?V0
   \   0000A9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AC   7C00         MOV       R4,#0x0
   \   0000AE   7D00         MOV       R5,#0x0
   \   0000B0   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   0000B3   12....       LCALL     ?DEALLOC_XSTACK8
   1317          
   1318            status = ZDSecMgrDeviceJoin( device );
   \                     ??ZDSecMgrDeviceJoinDirect_0:
   \   0000B6                ; Setup parameters for call to function ZDSecMgrDeviceJoin
   \   0000B6   EE           MOV       A,R6
   \   0000B7   FA           MOV       R2,A
   \   0000B8   EF           MOV       A,R7
   \   0000B9   FB           MOV       R3,A
   \   0000BA   12....       LCALL     `??ZDSecMgrDeviceJoin::?relay`; Banked call to: ZDSecMgrDeviceJoin
   \   0000BD   E9           MOV       A,R1
   \   0000BE   F5..         MOV       ?V0,A
   1319          
   1320            if ( status == ZSuccess )
   \   0000C0   701D         JNZ       ??ZDSecMgrDeviceJoinDirect_1
   1321            {
   1322              // set association status to authenticated
   1323              ZDSecMgrAssocDeviceAuth( AssocGetWithShort( device->nwkAddr ) );
   \   0000C2                ; Setup parameters for call to function AssocGetWithShort
   \   0000C2   8E82         MOV       DPL,R6
   \   0000C4   8F83         MOV       DPH,R7
   \   0000C6   12....       LCALL     ?Subroutine38 & 0xFFFF
   1324              
   1325            #if (ZG_BUILD_COORDINATOR_TYPE)    
   1326              //Add the device as joining device, if it did join unsecured
   1327              if(device->secure == FALSE)
   \                     ??CrossCallReturnLabel_50:
   \   0000C9   8E82         MOV       DPL,R6
   \   0000CB   8F83         MOV       DPH,R7
   \   0000CD   A3           INC       DPTR
   \   0000CE   A3           INC       DPTR
   \   0000CF   A3           INC       DPTR
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   A3           INC       DPTR
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   7009         JNZ       ??ZDSecMgrDeviceJoinDirect_1
   1328              {
   1329                bdb_TCAddJoiningDevice(NLME_GetShortAddr(),device->extAddr);
   \   0000D6                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000D6   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000D9                ; Setup parameters for call to function bdb_TCAddJoiningDevice
   \   0000D9   12....       LCALL     ?Subroutine37 & 0xFFFF
   1330              }
   1331            #endif
   1332            }
   \                     ??CrossCallReturnLabel_287:
   \   0000DC   12....       LCALL     `??bdb_TCAddJoiningDevice::?relay`; Banked call to: bdb_TCAddJoiningDevice
   1333          
   1334            return status;
   \                     ??ZDSecMgrDeviceJoinDirect_1:
   \   0000DF   A9..         MOV       R1,?V0
   \   0000E1   7414         MOV       A,#0x14
   \   0000E3   02....       LJMP      ?Subroutine5 & 0xFFFF
   1335          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL     ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000003   12....       LCALL     `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   000006                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   000006                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   000006   12....       LCALL     `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL     ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000003   12....       LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
   \   000006   7402         MOV       A,#0x2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine111_0:
   \   000000   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   E4           CLR       A
   \   000001                REQUIRE ??Subroutine112_0
   \   000001                ; // Fall through to label ??Subroutine112_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine112_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   F0           MOVX      @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000003                ; Setup parameters for call to function osal_nv_write
   \   000003                ; Setup parameters for call to function osal_nv_write
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine120_0
   \   000003                ; // Fall through to label ??Subroutine120_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine120_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000003                ; Setup parameters for call to function osal_nv_write
   \   000003   04           INC       A
   \   000004   22           RET
   1336          
   1337          /******************************************************************************
   1338           * @fn          ZDSecMgrDeviceJoinFwd
   1339           *
   1340           * @brief       Forward join to Trust Center.
   1341           *
   1342           * @param       device - [in] ZDSecMgrDevice_t, device info
   1343           *
   1344           * @return      ZStatus_t
   1345           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1346          ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceJoinFwd:
   1347          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1348            ZStatus_t               status;
   1349            APSME_UpdateDeviceReq_t req;
   1350            uint8 TC_ExtAddr[Z_EXTADDR_LEN];
   1351          
   1352            // forward any joining device to the Trust Center -- the Trust Center will
   1353            // decide if the device is allowed to join
   1354            status = ZSuccess;
   1355          
   1356            // forward authorization to the Trust Center
   1357            req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   F0           MOVX      @DPTR,A
   1358            req.devAddr    = device->nwkAddr;
   \   000013   8A82         MOV       DPL,R2
   \   000015   8B83         MOV       DPH,R3
   \   000017   12....       LCALL     ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   00001A   7403         MOV       A,#0x3
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   12....       LCALL     ?Subroutine12 & 0xFFFF
   1359            req.devExtAddr = device->extAddr;
   \                     ??CrossCallReturnLabel_4:
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   12....       LCALL     ?Subroutine17 & 0xFFFF
   1360          
   1361            // set security status, option for router to reject if policy set
   1362            if ( (device->devStatus & DEV_HIGH_SEC_STATUS) )
   \                     ??CrossCallReturnLabel_15:
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   A2E7         MOV       C,0xE0 /* A   */.7
   \   00002E   502E         JNC       ??ZDSecMgrDeviceJoinFwd_0
   1363            {
   1364              if ( device->devStatus & DEV_REJOIN_STATUS )
   \   000030   A2E6         MOV       C,0xE0 /* A   */.6
   \   000032   5021         JNC       ??ZDSecMgrDeviceJoinFwd_1
   1365              {
   1366                if ( device->secure == TRUE )
   \   000034   8A82         MOV       DPL,R2
   \   000036   8B83         MOV       DPH,R3
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   6401         XRL       A,#0x1
   \   000041   7009         JNZ       ??ZDSecMgrDeviceJoinFwd_2
   1367                {
   1368                  req.status = APSME_UD_HIGH_SECURED_REJOIN;
   \   000043   7407         MOV       A,#0x7
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   7404         MOV       A,#0x4
   \   00004A   803D         SJMP      ??ZDSecMgrDeviceJoinFwd_3
   1369                }
   1370                else
   1371                {
   1372                  req.status = APSME_UD_HIGH_UNSECURED_REJOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_2:
   \   00004C   7407         MOV       A,#0x7
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   7407         MOV       A,#0x7
   \   000053   8034         SJMP      ??ZDSecMgrDeviceJoinFwd_3
   1373                }
   1374              }
   1375              else
   1376              {
   1377                req.status = APSME_UD_HIGH_UNSECURED_JOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_1:
   \   000055   7407         MOV       A,#0x7
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   7405         MOV       A,#0x5
   \   00005C   802B         SJMP      ??ZDSecMgrDeviceJoinFwd_3
   1378              }
   1379            }
   1380            else
   1381            {
   1382              if ( device->devStatus & DEV_REJOIN_STATUS )
   \                     ??ZDSecMgrDeviceJoinFwd_0:
   \   00005E   A2E6         MOV       C,0xE0 /* A   */.6
   \   000060   5020         JNC       ??ZDSecMgrDeviceJoinFwd_4
   1383              {
   1384                if ( device->secure == TRUE )
   \   000062   8A82         MOV       DPL,R2
   \   000064   8B83         MOV       DPH,R3
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   6401         XRL       A,#0x1
   \   00006F   7008         JNZ       ??ZDSecMgrDeviceJoinFwd_5
   1385                {
   1386                  req.status = APSME_UD_STANDARD_SECURED_REJOIN;
   \   000071   7407         MOV       A,#0x7
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   E4           CLR       A
   \   000077   8010         SJMP      ??ZDSecMgrDeviceJoinFwd_3
   1387                }
   1388                else
   1389                {
   1390                  req.status = APSME_UD_STANDARD_TRUST_CENTER_REJOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_5:
   \   000079   7407         MOV       A,#0x7
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   7403         MOV       A,#0x3
   \   000080   8007         SJMP      ??ZDSecMgrDeviceJoinFwd_3
   1391                }
   1392              }
   1393              else
   1394              {
   1395                req.status = APSME_UD_STANDARD_UNSECURED_JOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_4:
   \   000082   7407         MOV       A,#0x7
   \   000084   12....       LCALL     ?XSTACK_DISP0_8
   \   000087   7401         MOV       A,#0x1
   \                     ??ZDSecMgrDeviceJoinFwd_3:
   \   000089   F0           MOVX      @DPTR,A
   1396              }
   1397            }
   1398          
   1399            // set association status to authenticated
   1400            ZDSecMgrAssocDeviceAuth( AssocGetWithShort( device->nwkAddr ) );
   \   00008A                ; Setup parameters for call to function AssocGetWithShort
   \   00008A   8A82         MOV       DPL,R2
   \   00008C   8B83         MOV       DPH,R3
   \   00008E   12....       LCALL     ?Subroutine38 & 0xFFFF
   1401          
   1402            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1403            {
   1404              uint8 found;
   1405              APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
   \                     ??CrossCallReturnLabel_51:
   \   000091                ; Setup parameters for call to function APSME_GetRequest
   \   000091   7409         MOV       A,#0x9
   \   000093   12....       LCALL     ?XSTACK_DISP102_8
   \   000096   12....       LCALL     ?Subroutine74 & 0xFFFF
   1406              
   1407              APSME_SearchTCLinkKeyEntry(TC_ExtAddr,&found,NULL);
   \                     ??CrossCallReturnLabel_111:
   \   000099   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009C   7402         MOV       A,#0x2
   \   00009E   12....       LCALL     ?XSTACK_DISP102_8
   \   0000A1   740B         MOV       A,#0xb
   \   0000A3   12....       LCALL     ?XSTACK_DISP101_8
   \   0000A6   12....       LCALL     ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   0000A9   12....       LCALL     ?DEALLOC_XSTACK8
   1408              
   1409              // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
   1410              // un-encrypted and one APS encrypted, to make sure that it can interoperate
   1411              // with legacy Coordinator devices which can only handle one or the other.
   1412          #if defined ( APP_TP2_TEST_MODE )
   1413              if ( ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY ) && ( guTxApsSecON != TRUE ) )
   1414          #else
   1415              if ( ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY ) && ( found == FALSE ) )
   \   0000AC   90....       MOV       DPTR,#zgApsLinkKeyType
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   6401         XRL       A,#0x1
   \   0000B2   7017         JNZ       ??ZDSecMgrDeviceJoinFwd_6
   \   0000B4   85..82       MOV       DPL,?XSP + 0
   \   0000B7   85..83       MOV       DPH,?XSP + 1
   \   0000BA   E0           MOVX      A,@DPTR
   \   0000BB   700E         JNZ       ??ZDSecMgrDeviceJoinFwd_6
   1416          #endif
   1417              {
   1418                req.apsSecure = FALSE;
   \   0000BD   7408         MOV       A,#0x8
   \   0000BF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C2   E4           CLR       A
   \   0000C3   F0           MOVX      @DPTR,A
   1419          
   1420                // send and APSME_UPDATE_DEVICE request to the trust center
   1421                status = APSME_UpdateDeviceReq( &req );
   \   0000C4                ; Setup parameters for call to function APSME_UpdateDeviceReq
   \   0000C4   04           INC       A
   \   0000C5   12....       LCALL     ?XSTACK_DISP101_8
   \   0000C8   12....       LCALL     `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
   1422              }
   1423          
   1424          #if defined ( APP_TP2_TEST_MODE )
   1425              if ( guTxApsSecON != FALSE )
   1426              {
   1427                // send the message APS encrypted
   1428                req.apsSecure = TRUE;
   1429          
   1430                // send and APSME_UPDATE_DEVICE request to the trust center
   1431                status = APSME_UpdateDeviceReq( &req );
   1432              }
   1433          #else
   1434              // send the message APS encrypted
   1435              req.apsSecure = TRUE;
   \                     ??ZDSecMgrDeviceJoinFwd_6:
   \   0000CB   7408         MOV       A,#0x8
   \   0000CD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D0   7401         MOV       A,#0x1
   \   0000D2   F0           MOVX      @DPTR,A
   1436          
   1437              // send and APSME_UPDATE_DEVICE request to the trust center
   1438              status = APSME_UpdateDeviceReq( &req );
   1439          #endif
   1440            }
   1441            else
   1442            {
   1443              req.apsSecure = FALSE;
   1444          
   1445              // send and APSME_UPDATE_DEVICE request to the trust center
   1446              status = APSME_UpdateDeviceReq( &req );
   1447            }
   1448          
   1449            return status;
   \   0000D3                ; Setup parameters for call to function APSME_UpdateDeviceReq
   \   0000D3   12....       LCALL     ?XSTACK_DISP101_8
   \   0000D6   12....       LCALL     `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
   \   0000D9   02....       LJMP      ?Subroutine3 & 0xFFFF
   1450          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000003   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000006   7405         MOV       A,#0x5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7411         MOV       A,#0x11
   \   000002                REQUIRE ??Subroutine116_0
   \   000002                ; // Fall through to label ??Subroutine116_0
   1451          
   1452          /******************************************************************************
   1453           * @fn          ZDSecMgrDeviceNew
   1454           *
   1455           * @brief       Process a new device.
   1456           *
   1457           * @param       device - [in] ZDSecMgrDevice_t, device info
   1458           *
   1459           * @return      ZStatus_t
   1460           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1461          ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* joiner )
   \                     ZDSecMgrDeviceNew:
   1462          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1463            ZStatus_t status;
   1464          
   1465            if ( ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1466                || ( ( ZG_BUILD_RTR_TYPE ) && APSME_IsDistributedSecurity() ) )
   \   000009   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6006         JZ        ??ZDSecMgrDeviceNew_0
   \   00000F                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   00000F   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   000012   E9           MOV       A,R1
   \   000013   6009         JZ        ??ZDSecMgrDeviceNew_1
   1467            {
   1468              // try to join this device
   1469              status = ZDSecMgrDeviceJoinDirect( joiner );
   \                     ??ZDSecMgrDeviceNew_0:
   \   000015                ; Setup parameters for call to function ZDSecMgrDeviceJoinDirect
   \   000015   EE           MOV       A,R6
   \   000016   FA           MOV       R2,A
   \   000017   EF           MOV       A,R7
   \   000018   FB           MOV       R3,A
   \   000019   12....       LCALL     `??ZDSecMgrDeviceJoinDirect::?relay`; Banked call to: ZDSecMgrDeviceJoinDirect
   \   00001C   8007         SJMP      ??ZDSecMgrDeviceNew_2
   1470            }
   1471            else
   1472            {
   1473              status = ZDSecMgrDeviceJoinFwd( joiner );
   \                     ??ZDSecMgrDeviceNew_1:
   \   00001E                ; Setup parameters for call to function ZDSecMgrDeviceJoinFwd
   \   00001E   EE           MOV       A,R6
   \   00001F   FA           MOV       R2,A
   \   000020   EF           MOV       A,R7
   \   000021   FB           MOV       R3,A
   \   000022   12....       LCALL     `??ZDSecMgrDeviceJoinFwd::?relay`; Banked call to: ZDSecMgrDeviceJoinFwd
   \                     ??ZDSecMgrDeviceNew_2:
   \   000025   E9           MOV       A,R1
   \   000026   F9           MOV       R1,A
   1474            }
   1475          
   1476            return status;
   \   000027   02....       LJMP      ??Subroutine115_0 & 0xFFFF
   1477          }
   1478          
   1479          /******************************************************************************
   1480           * @fn          ZDSecMgrAssocDeviceAuth
   1481           *
   1482           * @brief       Set associated device status to authenticated
   1483           *
   1484           * @param       assoc - [in, out] associated_devices_t
   1485           *
   1486           * @return      none
   1487           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1488          void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc )
   \                     ZDSecMgrAssocDeviceAuth:
   1489          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1490            if ( assoc != NULL )
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   600D         JZ        ??ZDSecMgrAssocDeviceAuth_0
   1491            {
   1492              assoc->devStatus |= DEV_SEC_AUTH_STATUS;
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   D2E3         SETB      0xE0 /* A   */.3
   \   000014   F0           MOVX      @DPTR,A
   1493            }
   1494          }
   \                     ??ZDSecMgrAssocDeviceAuth_0:
   \   000015   02....       LJMP      ??Subroutine105_0 & 0xFFFF
   1495          
   1496          /******************************************************************************
   1497           * @fn          ZDSecMgrAuthNwkKey
   1498           *
   1499           * @brief       Handle next step in authentication process
   1500           *
   1501           * @param       none
   1502           *
   1503           * @return      none
   1504           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1505          void ZDSecMgrAuthNwkKey()
   \                     ZDSecMgrAuthNwkKey:
   1506          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1507            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6405         XRL       A,#0x5
   \   00000A   700C         JNZ       ??ZDSecMgrAuthNwkKey_0
   1508            {
   1509              // inform ZDO that device has been authenticated
   1510              osal_set_event ( ZDAppTaskID, ZDO_DEVICE_AUTH );
   \   00000C                ; Setup parameters for call to function osal_set_event
   \   00000C   7A80         MOV       R2,#-0x80
   \   00000E   7B00         MOV       R3,#0x0
   \   000010   90....       MOV       DPTR,#ZDAppTaskID
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F9           MOV       R1,A
   \   000015   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   1511            }
   1512          }
   \                     ??ZDSecMgrAuthNwkKey_0:
   \   000018   80..         SJMP      ??Subroutine105_0
   1513          
   1514          /******************************************************************************
   1515           * PUBLIC FUNCTIONS
   1516           */
   1517          /******************************************************************************
   1518           * @fn          ZDSecMgrInit
   1519           *
   1520           * @brief       Initialize ZigBee Device Security Manager.
   1521           *
   1522           * @param       state - device initialization state
   1523           *
   1524           * @return      none
   1525           */
   1526          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
   1527          void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
   1528          void ZDSecMgrAddrMgrCB( uint8           update,
   1529                                  AddrMgrEntry_t* newEntry,
   1530                                  AddrMgrEntry_t* oldEntry )
   1531          {
   1532            (void)update;
   1533            (void)newEntry;
   1534            (void)oldEntry;
   1535          }
   1536          #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
   1537          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1538          void ZDSecMgrInit(uint8 state)
   \                     ZDSecMgrInit:
   1539          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1540            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1541            {
   1542              // initialize sub modules
   1543              ZDSecMgrEntryInit(state);
   \   000005                ; Setup parameters for call to function ZDSecMgrEntryInit
   \   000005   12....       LCALL     `??ZDSecMgrEntryInit::?relay`; Banked call to: ZDSecMgrEntryInit
   1544          
   1545              if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   \   000008   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   700C         JNZ       ??ZDSecMgrInit_0
   1546              {
   1547                APSME_SetRequest( apsTrustCenterAddress, 0, NLME_GetExtAddr() );
   \   00000E                ; Setup parameters for call to function NLME_GetExtAddr
   \   00000E   12....       LCALL     ?Subroutine73 & 0xFFFF
   1548              }
   1549          
   1550              // register with Address Manager
   1551          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
   1552              AddrMgrRegister( ADDRMGR_REG_SECURITY, ZDSecMgrAddrMgrCB );
   1553          #endif
   1554            }
   \                     ??CrossCallReturnLabel_108:
   \   000011                ; Setup parameters for call to function APSME_SetRequest
   \   000011   7A00         MOV       R2,#0x0
   \   000013   7B00         MOV       R3,#0x0
   \   000015   79AB         MOV       R1,#-0x55
   \   000017   12....       LCALL     `??APSME_SetRequest::?relay`; Banked call to: APSME_SetRequest
   1555          
   1556            if ( ZG_SECURE_ENABLED )
   1557            {
   1558              if ( ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1559                   || ( ( ZG_BUILD_RTR_TYPE ) && APSME_IsDistributedSecurity() ) )
   \                     ??ZDSecMgrInit_0:
   \   00001A   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   6006         JZ        ??ZDSecMgrInit_1
   \   000020                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   000020   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   000023   E9           MOV       A,R1
   \   000024   600B         JZ        ??ZDSecMgrInit_2
   1560              {
   1561                // setup joining permissions
   1562                ZDSecMgrPermitJoiningEnabled = TRUE;  
   \                     ??ZDSecMgrInit_1:
   \   000026   90....       MOV       DPTR,#ZDSecMgrPermitJoiningEnabled
   \   000029   7401         MOV       A,#0x1
   \   00002B   F0           MOVX      @DPTR,A
   1563                ZDSecMgrPermitJoiningTimed   = FALSE;
   \   00002C   90....       MOV       DPTR,#ZDSecMgrPermitJoiningTimed
   \   00002F   E4           CLR       A
   \   000030   F0           MOVX      @DPTR,A
   1564              }
   1565            }
   1566          
   1567            // configure security based on security mode and type of device
   1568            ZDSecMgrConfig();
   \                     ??ZDSecMgrInit_2:
   \   000031                ; Setup parameters for call to function ZDSecMgrConfig
   \   000031   12....       LCALL     `??ZDSecMgrConfig::?relay`; Banked call to: ZDSecMgrConfig
   1569          }
   \   000034   02....       LJMP      ??Subroutine117_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000003   8A..         MOV       ?V0,R2
   \   000005   8B..         MOV       ?V1,R3
   \   000007   AC..         MOV       R4,?V0
   \   000009   AD..         MOV       R5,?V1
   \   00000B   22           RET
   1570          
   1571          /******************************************************************************
   1572           * @fn          ZDSecMgrConfig
   1573           *
   1574           * @brief       Configure ZigBee Device Security Manager.
   1575           *
   1576           * @param       none
   1577           *
   1578           * @return      none
   1579           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1580          void ZDSecMgrConfig( void )
   \                     ZDSecMgrConfig:
   1581          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1582            if ( ZG_SECURE_ENABLED )
   1583            {
   1584              SSP_Init();
   \   000004                ; Setup parameters for call to function SSP_Init
   \   000004   12....       LCALL     `??SSP_Init::?relay`; Banked call to: SSP_Init
   1585          
   1586              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1587              {
   1588                if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   \   000007   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   7005         JNZ       ??ZDSecMgrConfig_0
   1589                {
   1590                  // COMMERCIAL MODE - COORDINATOR DEVICE
   1591                  APSME_SecurityCM_CD();
   \   00000D                ; Setup parameters for call to function APSME_SecurityCM_CD
   \   00000D   12....       LCALL     `??APSME_SecurityCM_CD::?relay`; Banked call to: APSME_SecurityCM_CD
   \   000010   800C         SJMP      ??ZDSecMgrConfig_1
   1592                }
   1593                else if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDSecMgrConfig_0:
   \   000012   6401         XRL       A,#0x1
   \   000014   7005         JNZ       ??ZDSecMgrConfig_2
   1594                {
   1595                  // COMMERCIAL MODE - ROUTER DEVICE
   1596                  APSME_SecurityCM_RD();
   \   000016                ; Setup parameters for call to function APSME_SecurityCM_RD
   \   000016   12....       LCALL     `??APSME_SecurityCM_RD::?relay`; Banked call to: APSME_SecurityCM_RD
   \   000019   8003         SJMP      ??ZDSecMgrConfig_1
   1597                }
   1598                else
   1599                {
   1600                  // COMMERCIAL MODE - END DEVICE
   1601                  APSME_SecurityCM_ED();
   \                     ??ZDSecMgrConfig_2:
   \   00001B                ; Setup parameters for call to function APSME_SecurityCM_ED
   \   00001B   12....       LCALL     `??APSME_SecurityCM_ED::?relay`; Banked call to: APSME_SecurityCM_ED
   1602                }
   1603              }
   1604              else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   1605              {
   1606                if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1607                {
   1608                  // RESIDENTIAL MODE - COORDINATOR DEVICE
   1609                  APSME_SecurityRM_CD();
   1610                }
   1611                else if ( ZSTACK_ROUTER_BUILD )
   1612                {
   1613                  // RESIDENTIAL MODE - ROUTER DEVICE
   1614                  APSME_SecurityRM_RD();
   1615                }
   1616                else
   1617                {
   1618                  // RESIDENTIAL MODE - END DEVICE
   1619                  APSME_SecurityRM_ED();
   1620                }
   1621              }
   1622            }
   1623            else
   1624            {
   1625              // NO SECURITY
   1626              APSME_SecurityNM();
   1627            }
   1628          }
   \                     ??ZDSecMgrConfig_1:
   \   00001E   80..         SJMP      ??Subroutine105_0
   1629          
   1630          /******************************************************************************
   1631           * @fn          ZDSecMgrPermitJoining
   1632           *
   1633           * @brief       Process request to change joining permissions.
   1634           *
   1635           * @param       duration - [in] timed duration for join in seconds
   1636           *                         - 0x00 not allowed
   1637           *                         - 0xFF allowed without timeout
   1638           *
   1639           * @return      uint8 - success(TRUE:FALSE)
   1640           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1641          uint8 ZDSecMgrPermitJoining( uint8 duration )
   \                     ZDSecMgrPermitJoining:
   1642          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1643            uint8 accept;
   1644          
   1645            ZDSecMgrPermitJoiningTimed = FALSE;
   \   000004   90....       MOV       DPTR,#ZDSecMgrPermitJoiningTimed
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
   1646          
   1647            if ( duration > 0 )
   \   000009   E9           MOV       A,R1
   \   00000A   90....       MOV       DPTR,#ZDSecMgrPermitJoiningEnabled
   \   00000D   6008         JZ        ??ZDSecMgrPermitJoining_0
   1648            {
   1649              ZDSecMgrPermitJoiningEnabled = TRUE;
   \   00000F   7401         MOV       A,#0x1
   \   000011   F0           MOVX      @DPTR,A
   1650          
   1651              ZDSecMgrPermitJoiningTimed = TRUE;
   \   000012   90....       MOV       DPTR,#ZDSecMgrPermitJoiningTimed
   \   000015   8001         SJMP      ??ZDSecMgrPermitJoining_1
   1652            }
   1653            else
   1654            {
   1655              ZDSecMgrPermitJoiningEnabled = FALSE;
   \                     ??ZDSecMgrPermitJoining_0:
   \   000017   E4           CLR       A
   \                     ??ZDSecMgrPermitJoining_1:
   \   000018   F0           MOVX      @DPTR,A
   1656            }
   1657          
   1658            accept = TRUE;
   1659          
   1660            return accept;
   \   000019   7901         MOV       R1,#0x1
   \   00001B   80..         SJMP      ??Subroutine105_0
   1661          }
   1662          
   1663          /******************************************************************************
   1664           * @fn          ZDSecMgrPermitJoiningTimeout
   1665           *
   1666           * @brief       Process permit joining timeout
   1667           *
   1668           * @param       none
   1669           *
   1670           * @return      none
   1671           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1672          void ZDSecMgrPermitJoiningTimeout( void )
   \                     ZDSecMgrPermitJoiningTimeout:
   1673          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1674            if ( ZDSecMgrPermitJoiningTimed == TRUE )
   \   000004   90....       MOV       DPTR,#ZDSecMgrPermitJoiningTimed
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   7009         JNZ       ??ZDSecMgrPermitJoiningTimeout_0
   1675            {
   1676              ZDSecMgrPermitJoiningEnabled = FALSE;
   \   00000C   90....       MOV       DPTR,#ZDSecMgrPermitJoiningEnabled
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
   1677              ZDSecMgrPermitJoiningTimed   = FALSE;
   \   000011   90....       MOV       DPTR,#ZDSecMgrPermitJoiningTimed
   \   000014   F0           MOVX      @DPTR,A
   1678            }
   1679          }
   \                     ??ZDSecMgrPermitJoiningTimeout_0:
   \   000015   80..         SJMP      ??Subroutine105_0
   1680          
   1681          /******************************************************************************
   1682           * @fn          ZDSecMgrNewDeviceEvent
   1683           *
   1684           * @brief       Process a the new device event, if found reset new device
   1685           *              event/timer.
   1686           *
   1687           * @param       ShortAddr - of New Device to process
   1688           *
   1689           * @return      uint8 - found(TRUE:FALSE)
   1690           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1691          uint8 ZDSecMgrNewDeviceEvent( uint16 ShortAddr )
   \                     ZDSecMgrNewDeviceEvent:
   1692          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1693            uint8                 found;
   1694            ZDSecMgrDevice_t      device;
   1695            AddrMgrEntry_t        addrEntry;
   1696            associated_devices_t* assoc;
   1697            ZStatus_t             status;
   1698          
   1699            // initialize return results
   1700            found = FALSE;
   \   00000A   75..00       MOV       ?V0,#0x0
   1701          
   1702            assoc = AssocGetWithShort( ShortAddr );
   \   00000D                ; Setup parameters for call to function AssocGetWithShort
   \   00000D   12....       LCALL     `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   000010   8A..         MOV       ?V2,R2
   \   000012   8B..         MOV       ?V3,R3
   \   000014   AE..         MOV       R6,?V2
   \   000016   AF..         MOV       R7,?V3
   1703          
   1704            if ( assoc != NULL )
   \   000018   EA           MOV       A,R2
   \   000019   4F           ORL       A,R7
   \   00001A   7003         JNZ       $+5
   \   00001C   02....       LJMP      ??ZDSecMgrNewDeviceEvent_0 & 0xFFFF
   1705            {
   1706              // device found
   1707              found = TRUE;
   \   00001F   75..01       MOV       ?V0,#0x1
   1708          
   1709              // check for preconfigured security
   1710              if ( zgPreConfigKeys == TRUE )
   \   000022   90....       MOV       DPTR,#zgPreConfigKeys
   \   000025   E0           MOVX      A,@DPTR
   \   000026   6401         XRL       A,#0x1
   \   000028   7003         JNZ       ??ZDSecMgrNewDeviceEvent_1
   1711              {
   1712                // set association status to authenticated
   1713                ZDSecMgrAssocDeviceAuth( assoc );
   \   00002A                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   00002A   12....       LCALL     `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   1714              }
   1715          
   1716              // set up device info
   1717              addrEntry.user  = ADDRMGR_USER_DEFAULT;
   \                     ??ZDSecMgrNewDeviceEvent_1:
   \   00002D   7408         MOV       A,#0x8
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   E4           CLR       A
   \   000033   12....       LCALL     ??Subroutine102_0 & 0xFFFF
   1718              addrEntry.index = assoc->addrIdx;
   \                     ??CrossCallReturnLabel_164:
   \   000036   7413         MOV       A,#0x13
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   12....       LCALL     ??Subroutine113_0 & 0xFFFF
   1719              AddrMgrEntryGet( &addrEntry );
   \                     ??CrossCallReturnLabel_244:
   \   00003E                ; Setup parameters for call to function AddrMgrEntryGet
   \   00003E   7408         MOV       A,#0x8
   \   000040   12....       LCALL     ?XSTACK_DISP101_8
   \   000043   12....       LCALL     `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   1720          
   1721              device.nwkAddr    = assoc->shortAddr;
   \   000046   8E82         MOV       DPL,R6
   \   000048   8F83         MOV       DPH,R7
   \   00004A   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00004D   12....       LCALL     ?Subroutine23 & 0xFFFF
   1722              device.extAddr    = addrEntry.extAddr;
   \                     ??CrossCallReturnLabel_26:
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   A882         MOV       R0,DPL
   \   000055   A983         MOV       R1,DPH
   \   000057   7402         MOV       A,#0x2
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   12....       LCALL     ??Subroutine113_0 & 0xFFFF
   1723              device.parentAddr = NLME_GetShortAddr();
   \                     ??CrossCallReturnLabel_245:
   \   00005F                ; Setup parameters for call to function NLME_GetShortAddr
   \   00005F   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000062   7404         MOV       A,#0x4
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   1724          
   1725              // the new device performed Secured Rejoin
   1726              if ( ( assoc->devStatus & DEV_SECURED_JOIN ) &&
   1727                   ( assoc->devStatus & DEV_REJOIN_STATUS ) )
   \                     ??CrossCallReturnLabel_257:
   \   00006A   8E82         MOV       DPL,R6
   \   00006C   8F83         MOV       DPH,R7
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   E0           MOVX      A,@DPTR
   \   000074   5460         ANL       A,#0x60
   \   000076   6460         XRL       A,#0x60
   \   000078   7009         JNZ       ??ZDSecMgrNewDeviceEvent_2
   1728              {
   1729                device.secure     = TRUE;
   \   00007A   7406         MOV       A,#0x6
   \   00007C   12....       LCALL     ?XSTACK_DISP0_8
   \   00007F   7401         MOV       A,#0x1
   \   000081   8006         SJMP      ??ZDSecMgrNewDeviceEvent_3
   1730              }
   1731              else
   1732              {
   1733                device.secure     = FALSE;
   \                     ??ZDSecMgrNewDeviceEvent_2:
   \   000083   7406         MOV       A,#0x6
   \   000085   12....       LCALL     ?XSTACK_DISP0_8
   \   000088   E4           CLR       A
   1734              }
   \                     ??ZDSecMgrNewDeviceEvent_3:
   \   000089   12....       LCALL     ?Subroutine21 & 0xFFFF
   1735              device.devStatus  = assoc->devStatus;
   \                     ??CrossCallReturnLabel_20:
   \   00008C   A3           INC       DPTR
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   C0E0         PUSH      A
   \   000090   7407         MOV       A,#0x7
   \   000092   12....       LCALL     ?XSTACK_DISP0_8
   \   000095   D0E0         POP       A
   \   000097   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   1736          
   1737              // process new device
   1738              status = ZDSecMgrDeviceNew( &device );
   1739          
   1740              if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_267:
   \   00009A   12....       LCALL     `??ZDSecMgrDeviceNew::?relay`; Banked call to: ZDSecMgrDeviceNew
   \   00009D   E9           MOV       A,R1
   \   00009E   700F         JNZ       ??ZDSecMgrNewDeviceEvent_4
   1741              {
   1742                assoc->devStatus &= ~DEV_SEC_INIT_STATUS;
   \   0000A0   8E82         MOV       DPL,R6
   \   0000A2   8F83         MOV       DPH,R7
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   C2E2         CLR       0xE0 /* A   */.2
   \   0000AC   F0           MOVX      @DPTR,A
   \   0000AD   8018         SJMP      ??ZDSecMgrNewDeviceEvent_0
   1743              }
   1744              else
   1745              {
   1746                // Clear SECURITY bit from Address Manager
   1747                ZDSecMgrAddrClear( addrEntry.extAddr );
   \                     ??ZDSecMgrNewDeviceEvent_4:
   \   0000AF                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   0000AF   740B         MOV       A,#0xb
   \   0000B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B4   AA82         MOV       R2,DPL
   \   0000B6   AB83         MOV       R3,DPH
   \   0000B8   12....       LCALL     `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   1748          
   1749                // Remove the Association completely
   1750                AssocRemove( addrEntry.extAddr );
   \   0000BB                ; Setup parameters for call to function AssocRemove
   \   0000BB   740B         MOV       A,#0xb
   \   0000BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C0   AA82         MOV       R2,DPL
   \   0000C2   AB83         MOV       R3,DPH
   \   0000C4   12....       LCALL     `??AssocRemove::?relay`; Banked call to: AssocRemove
   1751              }
   1752            }
   1753          
   1754            return found;
   \                     ??ZDSecMgrNewDeviceEvent_0:
   \   0000C7   A9..         MOV       R1,?V0
   \   0000C9   7415         MOV       A,#0x15
   \   0000CB   02....       LJMP      ?Subroutine5 & 0xFFFF
   1755          }
   1756          
   1757          /******************************************************************************
   1758           * @fn          ZDSecMgrTCExtAddrCheck
   1759           *
   1760           * @brief       Verifies if received ext. address matches TC ext. address.
   1761           *
   1762           * @param       extAddr - Extended address to be verified.
   1763           *
   1764           * @return      TRUE - extended address matches
   1765           *              FALSE - otherwise
   1766           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1767          uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr )
   \                     ZDSecMgrTCExtAddrCheck:
   1768          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1769            uint8  lookup[Z_EXTADDR_LEN];
   1770            APSME_GetRequest( apsTrustCenterAddress, 0, lookup );
   \   00000E                ; Setup parameters for call to function APSME_GetRequest
   \   00000E   AC..         MOV       R4,?XSP + 0
   \   000010   AD..         MOV       R5,?XSP + 1
   \   000012   7A00         MOV       R2,#0x0
   \   000014   7B00         MOV       R3,#0x0
   \   000016   79AB         MOV       R1,#-0x55
   \   000018   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   1771            return osal_ExtAddrEqual( extAddr, lookup );
   \   00001B                ; Setup parameters for call to function sAddrExtCmp
   \   00001B   AC..         MOV       R4,?XSP + 0
   \   00001D   AD..         MOV       R5,?XSP + 1
   \   00001F   EE           MOV       A,R6
   \   000020   FA           MOV       R2,A
   \   000021   EF           MOV       A,R7
   \   000022   FB           MOV       R3,A
   \   000023   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000026                REQUIRE ?Subroutine8
   \   000026                ; // Fall through to label ?Subroutine8
   1772          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7408         MOV       A,#0x8
   \   000002   02....       LJMP      ??Subroutine114_0 & 0xFFFF
   1773          
   1774          /******************************************************************************
   1775           * @fn          ZDSecMgrTCDataLoad
   1776           *
   1777           * @brief       Stores the address of TC into address manager.
   1778           *
   1779           * @param       extAddr - Extended address to be verified.
   1780           *
   1781           * @return      none
   1782           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1783          void ZDSecMgrTCDataLoad( uint8* extAddr )
   \                     ZDSecMgrTCDataLoad:
   1784          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV       A,#-0xf
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1785            uint16 ami;
   1786            AddrMgrEntry_t entry;
   1787          
   1788            // lookup using TC short address
   1789            entry.user    = ADDRMGR_USER_DEFAULT;
   \   00000E   7402         MOV       A,#0x2
   \   000010   12....       LCALL     ?XSTACK_DISP0_8
   \   000013   E4           CLR       A
   \   000014   F0           MOVX      @DPTR,A
   1790            osal_cpyExtAddr( entry.extAddr, extAddr );
   \   000015                ; Setup parameters for call to function sAddrExtCpy
   \   000015   EA           MOV       A,R2
   \   000016   FC           MOV       R4,A
   \   000017   EB           MOV       A,R3
   \   000018   FD           MOV       R5,A
   \   000019   7405         MOV       A,#0x5
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   AA82         MOV       R2,DPL
   \   000020   AB83         MOV       R3,DPH
   \   000022   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1791          
   1792            // Verify if TC address has been added to Address Manager
   1793            if ( !APSME_IsDistributedSecurity() && ( AddrMgrEntryLookupExt( &entry ) != TRUE ) )
   \   000025                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   000025   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   000028   E9           MOV       A,R1
   \   000029   7028         JNZ       ??ZDSecMgrTCDataLoad_0
   \   00002B                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP101_8
   \   000030   12....       LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000033   E9           MOV       A,R1
   \   000034   6401         XRL       A,#0x1
   \   000036   601B         JZ        ??ZDSecMgrTCDataLoad_0
   1794            {
   1795              ZDSecMgrAddrStore( APSME_TRUSTCENTER_NWKADDR, extAddr, &ami );
   \   000038                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   000038   A8..         MOV       R0,?XSP + 0
   \   00003A   A9..         MOV       R1,?XSP + 1
   \   00003C   88..         MOV       ?V0,R0
   \   00003E   89..         MOV       ?V1,R1
   \   000040   78..         MOV       R0,#?V0
   \   000042   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000045   EE           MOV       A,R6
   \   000046   FC           MOV       R4,A
   \   000047   EF           MOV       A,R7
   \   000048   FD           MOV       R5,A
   \   000049   7A00         MOV       R2,#0x0
   \   00004B   7B00         MOV       R3,#0x0
   \   00004D   12....       LCALL     ?Subroutine75 & 0xFFFF
   1796            }
   \                     ??CrossCallReturnLabel_113:
   \   000050   12....       LCALL     ?DEALLOC_XSTACK8
   1797          }
   \                     ??ZDSecMgrTCDataLoad_0:
   \   000053   740F         MOV       A,#0xf
   \   000055   02....       LJMP      ??Subroutine116_0 & 0xFFFF
   1798          
   1799          /******************************************************************************
   1800           * @fn          ZDSecMgrTransportKeyInd
   1801           *
   1802           * @brief       Process the ZDO_TransportKeyInd_t message.
   1803           *
   1804           * @param       ind - [in] ZDO_TransportKeyInd_t indication
   1805           *
   1806           * @return      none
   1807           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1808          void ZDSecMgrTransportKeyInd( ZDO_TransportKeyInd_t* ind )
   \                     ZDSecMgrTransportKeyInd:
   1809          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 40
   \   000005   74D8         MOV       A,#-0x28
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1810            uint8 index;
   1811            uint8 zgPreConfigKey[SEC_KEY_LEN];
   1812          
   1813            ZDSecMgrUpdateTCAddress( ind->srcExtAddr );
   \   00000E                ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
   \   00000E   EA           MOV       A,R2
   \   00000F   12....       LCALL     ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000012   12....       LCALL     `??ZDSecMgrUpdateTCAddress::?relay`; Banked call to: ZDSecMgrUpdateTCAddress
   1814            
   1815          #if ZG_BUILD_JOINING_TYPE
   1816            if(ZG_DEVICE_JOINING_TYPE)
   \   000015   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000018   E0           MOVX      A,@DPTR
   \   000019   6401         XRL       A,#0x1
   \   00001B   6005         JZ        ??ZDSecMgrTransportKeyInd_0
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   6402         XRL       A,#0x2
   \   000020   7021         JNZ       ??ZDSecMgrTransportKeyInd_1
   1817            {
   1818              //Update the TC address in the entry
   1819              osal_nv_write(ZCD_NV_TCLK_TABLE_START, osal_offsetof(APSME_TCLKDevEntry_t,extAddr), Z_EXTADDR_LEN, ind->srcExtAddr);
   \                     ??ZDSecMgrTransportKeyInd_0:
   \   000022                ; Setup parameters for call to function osal_nv_write
   \   000022   12....       LCALL     ?Subroutine79 & 0xFFFF
   1820            }
   \                     ??CrossCallReturnLabel_118:
   \   000025   78..         MOV       R0,#?V0
   \   000027   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002A   75..08       MOV       ?V0,#0x8
   \   00002D   75..00       MOV       ?V1,#0x0
   \   000030   78..         MOV       R0,#?V0
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   7C08         MOV       R4,#0x8
   \   000037   7D00         MOV       R5,#0x0
   \   000039   7A11         MOV       R2,#0x11
   \   00003B   7B01         MOV       R3,#0x1
   \   00003D   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   000040   12....       LCALL     ?DEALLOC_XSTACK8
   1821          #endif
   1822            
   1823            // check for distributed security
   1824            if ( ( ZG_BUILD_RTR_TYPE ) && osal_isbufset( ind->srcExtAddr, 0xFF, Z_EXTADDR_LEN ) )
   \                     ??ZDSecMgrTransportKeyInd_1:
   \   000043                ; Setup parameters for call to function osal_isbufset
   \   000043   7C08         MOV       R4,#0x8
   \   000045   79FF         MOV       R1,#-0x1
   \   000047   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   00004A   12....       LCALL     `??osal_isbufset::?relay`; Banked call to: osal_isbufset
   \   00004D   E9           MOV       A,R1
   \   00004E   6006         JZ        ??ZDSecMgrTransportKeyInd_2
   1825            {
   1826              ZDSecMgrPermitJoiningEnabled = TRUE;  
   \   000050   90....       MOV       DPTR,#ZDSecMgrPermitJoiningEnabled
   \   000053   7401         MOV       A,#0x1
   \   000055   F0           MOVX      @DPTR,A
   1827            }
   1828            
   1829            // load Trust Center data if needed
   1830            ZDSecMgrTCDataLoad( ind->srcExtAddr );
   \                     ??ZDSecMgrTransportKeyInd_2:
   \   000056                ; Setup parameters for call to function ZDSecMgrTCDataLoad
   \   000056   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000059   12....       LCALL     `??ZDSecMgrTCDataLoad::?relay`; Banked call to: ZDSecMgrTCDataLoad
   1831            
   1832            if ( ( ind->keyType == KEY_TYPE_NWK ) ||
   1833                 ( ind->keyType == 6            ) )
   \   00005C   8E82         MOV       DPL,R6
   \   00005E   8F83         MOV       DPH,R7
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   6401         XRL       A,#0x1
   \   000067   6010         JZ        ??ZDSecMgrTransportKeyInd_3
   \   000069   8E82         MOV       DPL,R6
   \   00006B   8F83         MOV       DPH,R7
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   6406         XRL       A,#0x6
   \   000074   6003         JZ        $+5
   \   000076   02....       LJMP      ??ZDSecMgrTransportKeyInd_4 & 0xFFFF
   1834            {
   1835              // check for dummy NWK key (all zeros)
   1836              for ( index = 0;
   \                     ??ZDSecMgrTransportKeyInd_3:
   \   000079   7800         MOV       R0,#0x0
   \                     ??ZDSecMgrTransportKeyInd_5:
   \   00007B   E8           MOV       A,R0
   \   00007C   FA           MOV       R2,A
   \   00007D   EE           MOV       A,R6
   \   00007E   2A           ADD       A,R2
   \   00007F   F582         MOV       DPL,A
   \   000081   E4           CLR       A
   \   000082   3F           ADDC      A,R7
   \   000083   F583         MOV       DPH,A
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   7007         JNZ       ??ZDSecMgrTransportKeyInd_6
   1837                    ( (index < SEC_KEY_LEN) && (ind->key[index] == 0) );
   1838                    index++ );
   \   00008E   08           INC       R0
   \   00008F   E8           MOV       A,R0
   \   000090   C3           CLR       C
   \   000091   9410         SUBB      A,#0x10
   \   000093   40E6         JC        ??ZDSecMgrTransportKeyInd_5
   1839          
   1840              if ( index == SEC_KEY_LEN )
   \                     ??ZDSecMgrTransportKeyInd_6:
   \   000095   7410         MOV       A,#0x10
   \   000097   68           XRL       A,R0
   \   000098   7031         JNZ       ??ZDSecMgrTransportKeyInd_7
   1841              {
   1842                // load preconfigured key - once!!
   1843                if ( !_NIB.nwkKeyLoaded )
   \   00009A   90....       MOV       DPTR,#_NIB + 61
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   7054         JNZ       ??ZDSecMgrTransportKeyInd_8
   1844                {
   1845                  ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
   \   0000A0                ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
   \   0000A0   7418         MOV       A,#0x18
   \   0000A2   12....       LCALL     ?XSTACK_DISP102_8
   \   0000A5   7A62         MOV       R2,#0x62
   \   0000A7   7B00         MOV       R3,#0x0
   \   0000A9   12....       LCALL     `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
   1846                  SSP_UpdateNwkKey( zgPreConfigKey, 0 );
   \   0000AC                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   0000AC   7900         MOV       R1,#0x0
   \   0000AE   7418         MOV       A,#0x18
   \   0000B0   12....       LCALL     ?XSTACK_DISP101_8
   \   0000B3   12....       LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
   1847                  SSP_SwitchNwkKey( 0 );
   \   0000B6                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   0000B6   7900         MOV       R1,#0x0
   \   0000B8   12....       LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   1848          
   1849                  // clear local copy of key
   1850                  osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
   \   0000BB                ; Setup parameters for call to function osal_memset
   \   0000BB   7C10         MOV       R4,#0x10
   \   0000BD   7D00         MOV       R5,#0x0
   \   0000BF   7900         MOV       R1,#0x0
   \   0000C1   7418         MOV       A,#0x18
   \   0000C3   12....       LCALL     ?XSTACK_DISP101_8
   \   0000C6   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000C9   8029         SJMP      ??ZDSecMgrTransportKeyInd_8
   1851                }
   1852              }
   1853              else
   1854              {
   1855                SSP_UpdateNwkKey( ind->key, ind->keySeqNum );
   \                     ??ZDSecMgrTransportKeyInd_7:
   \   0000CB                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   0000CB   8E82         MOV       DPL,R6
   \   0000CD   8F83         MOV       DPH,R7
   \   0000CF   A3           INC       DPTR
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   A3           INC       DPTR
   \   0000D3   A3           INC       DPTR
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   F9           MOV       R1,A
   \   0000D6   EE           MOV       A,R6
   \   0000D7   2406         ADD       A,#0x6
   \   0000D9   FA           MOV       R2,A
   \   0000DA   E4           CLR       A
   \   0000DB   3F           ADDC      A,R7
   \   0000DC   FB           MOV       R3,A
   \   0000DD   12....       LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
   1856                if ( !_NIB.nwkKeyLoaded )
   \   0000E0   90....       MOV       DPTR,#_NIB + 61
   \   0000E3   E0           MOVX      A,@DPTR
   \   0000E4   700E         JNZ       ??ZDSecMgrTransportKeyInd_8
   1857                {
   1858                  SSP_SwitchNwkKey( ind->keySeqNum );
   \   0000E6                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   0000E6   8E82         MOV       DPL,R6
   \   0000E8   8F83         MOV       DPH,R7
   \   0000EA   A3           INC       DPTR
   \   0000EB   A3           INC       DPTR
   \   0000EC   A3           INC       DPTR
   \   0000ED   A3           INC       DPTR
   \   0000EE   A3           INC       DPTR
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   F9           MOV       R1,A
   \   0000F1   12....       LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   1859                }
   1860              }
   1861          
   1862              // handle next step in authentication process
   1863              ZDSecMgrAuthNwkKey();
   \                     ??ZDSecMgrTransportKeyInd_8:
   \   0000F4                ; Setup parameters for call to function ZDSecMgrAuthNwkKey
   \   0000F4   12....       LCALL     `??ZDSecMgrAuthNwkKey::?relay`; Banked call to: ZDSecMgrAuthNwkKey
   \   0000F7   02....       LJMP      ??ZDSecMgrTransportKeyInd_9 & 0xFFFF
   1864            }
   1865            else if ( ind->keyType == KEY_TYPE_TC_LINK )
   \                     ??ZDSecMgrTransportKeyInd_4:
   \   0000FA   8E82         MOV       DPL,R6
   \   0000FC   8F83         MOV       DPH,R7
   \   0000FE   A3           INC       DPTR
   \   0000FF   A3           INC       DPTR
   \   000100   A3           INC       DPTR
   \   000101   A3           INC       DPTR
   \   000102   E0           MOVX      A,@DPTR
   \   000103   6404         XRL       A,#0x4
   \   000105   6003         JZ        $+5
   \   000107   02....       LJMP      ??ZDSecMgrTransportKeyInd_10 & 0xFFFF
   1866            {
   1867              uint16 entryIndex;
   1868              uint8 found;
   1869              APSME_TCLKDevEntry_t TCLKDevEntry;
   1870              
   1871              //Search the entry, which should exist at this point
   1872              entryIndex = APSME_SearchTCLinkKeyEntry(ind->srcExtAddr, &found, &TCLKDevEntry);
   \   00010A                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   00010A   7405         MOV       A,#0x5
   \   00010C   12....       LCALL     ?XSTACK_DISP100_8
   \   00010F   88..         MOV       ?V0,R0
   \   000111   89..         MOV       ?V1,R1
   \   000113   78..         MOV       R0,#?V0
   \   000115   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000118   7402         MOV       A,#0x2
   \   00011A   12....       LCALL     ?XSTACK_DISP102_8
   \   00011D   EE           MOV       A,R6
   \   00011E   2416         ADD       A,#0x16
   \   000120   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000123   12....       LCALL     ?DEALLOC_XSTACK8
   \   000126   8A..         MOV       ?V0,R2
   \   000128   8B..         MOV       ?V1,R3
   1873              
   1874              if(found)
   \   00012A   85..82       MOV       DPL,?XSP + 0
   \   00012D   85..83       MOV       DPH,?XSP + 1
   \   000130   E0           MOVX      A,@DPTR
   \   000131   7003         JNZ       $+5
   \   000133   02....       LJMP      ??ZDSecMgrTransportKeyInd_9 & 0xFFFF
   1875              {
   1876                //If the key was an IC, then erase the entry since that will not longer be used.
   1877                if(TCLKDevEntry.keyAttributes == ZG_PROVISIONAL_KEY)
   \   000136   7415         MOV       A,#0x15
   \   000138   12....       LCALL     ?XSTACK_DISP0_8
   \   00013B   E0           MOVX      A,@DPTR
   \   00013C   700C         JNZ       ??ZDSecMgrTransportKeyInd_11
   1878                {
   1879                  APSME_EraseICEntry(&TCLKDevEntry.SeedShift_IcIndex);
   \   00013E                ; Setup parameters for call to function APSME_EraseICEntry
   \   00013E   7417         MOV       A,#0x17
   \   000140   12....       LCALL     ?XSTACK_DISP0_8
   \   000143   AA82         MOV       R2,DPL
   \   000145   AB83         MOV       R3,DPH
   \   000147   12....       LCALL     `??APSME_EraseICEntry::?relay`; Banked call to: APSME_EraseICEntry
   1880                }
   1881                
   1882                TCLKDevEntry.keyAttributes = ZG_UNVERIFIED_KEY;
   \                     ??ZDSecMgrTransportKeyInd_11:
   \   00014A   7415         MOV       A,#0x15
   \   00014C   12....       LCALL     ?XSTACK_DISP0_8
   \   00014F   7401         MOV       A,#0x1
   \   000151   F0           MOVX      @DPTR,A
   1883                TCLKDevEntry.keyType = ZG_UNIQUE_LINK_KEY;
   \   000152   7416         MOV       A,#0x16
   \   000154   12....       LCALL     ?XSTACK_DISP0_8
   \   000157   E4           CLR       A
   \   000158   F0           MOVX      @DPTR,A
   1884                TCLKDevEntry.rxFrmCntr = 0;
   \   000159   7409         MOV       A,#0x9
   \   00015B   12....       LCALL     ?XSTACK_DISP0_8
   \   00015E   12....       LCALL     ?Subroutine26 & 0xFFFF
   1885                TCLKDevEntry.txFrmCntr = 0;
   \                     ??CrossCallReturnLabel_29:
   \   000161   12....       LCALL     ?XSTACK_DISP0_8
   \   000164   12....       LCALL     ??Subroutine111_0 & 0xFFFF
   1886                TCLKDevEntry.SeedShift_IcIndex = 0;
   \                     ??CrossCallReturnLabel_220:
   \   000167   7417         MOV       A,#0x17
   \   000169   12....       LCALL     ?XSTACK_DISP0_8
   \   00016C   E4           CLR       A
   \   00016D   F0           MOVX      @DPTR,A
   1887                
   1888                //Update the entry
   1889                osal_nv_write(entryIndex,0,sizeof(APSME_TCLKDevEntry_t),&TCLKDevEntry);
   \   00016E                ; Setup parameters for call to function osal_nv_write
   \   00016E   7405         MOV       A,#0x5
   \   000170   12....       LCALL     ?XSTACK_DISP100_8
   \   000173   88..         MOV       ?V2,R0
   \   000175   89..         MOV       ?V3,R1
   \   000177   78..         MOV       R0,#?V2
   \   000179   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00017C   75..13       MOV       ?V2,#0x13
   \   00017F   75..00       MOV       ?V3,#0x0
   \   000182   78..         MOV       R0,#?V2
   \   000184   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000187   7C00         MOV       R4,#0x0
   \   000189   7D00         MOV       R5,#0x0
   \   00018B   AA..         MOV       R2,?V0
   \   00018D   AB..         MOV       R3,?V1
   \   00018F   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   000192   12....       LCALL     ?DEALLOC_XSTACK8
   1890          
   1891                //Create the entry for the key
   1892                if(ZSUCCESS == osal_nv_item_init(ZCD_NV_TCLK_JOIN_DEV,SEC_KEY_LEN,ind->key) )
   \   000195                ; Setup parameters for call to function osal_nv_item_init
   \   000195   EE           MOV       A,R6
   \   000196   2406         ADD       A,#0x6
   \   000198   F5..         MOV       ?V0,A
   \   00019A   E4           CLR       A
   \   00019B   3F           ADDC      A,R7
   \   00019C   F5..         MOV       ?V1,A
   \   00019E   78..         MOV       R0,#?V0
   \   0001A0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A3   7C10         MOV       R4,#0x10
   \   0001A5   7D00         MOV       R5,#0x0
   \   0001A7   7A02         MOV       R2,#0x2
   \   0001A9   7B01         MOV       R3,#0x1
   \   0001AB   12....       LCALL     ??Subroutine133_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   0001AE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001B1   E9           MOV       A,R1
   \   0001B2   701E         JNZ       ??ZDSecMgrTransportKeyInd_12
   1893                {
   1894                  //Or replace it if already existed
   1895                  osal_nv_write(ZCD_NV_TCLK_JOIN_DEV,0,SEC_KEY_LEN,ind->key);
   \   0001B4                ; Setup parameters for call to function osal_nv_write
   \   0001B4   78..         MOV       R0,#?V0
   \   0001B6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B9   75..10       MOV       ?V0,#0x10
   \   0001BC   75..00       MOV       ?V1,#0x0
   \   0001BF   78..         MOV       R0,#?V0
   \   0001C1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001C4   7C00         MOV       R4,#0x0
   \   0001C6   7D00         MOV       R5,#0x0
   \   0001C8   7A02         MOV       R2,#0x2
   \   0001CA   7B01         MOV       R3,#0x1
   \   0001CC   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   1896                }
   \                     ??CrossCallReturnLabel_320:
   \   0001CF   12....       LCALL     ?DEALLOC_XSTACK8
   1897                
   1898                bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_VERIFY_TC_LINK_KEY);
   \                     ??ZDSecMgrTransportKeyInd_12:
   \   0001D2                ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
   \   0001D2   7A03         MOV       R2,#0x3
   \   0001D4   7901         MOV       R1,#0x1
   \   0001D6   12....       LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
   \   0001D9   02....       LJMP      ??ZDSecMgrTransportKeyInd_9 & 0xFFFF
   1899              }
   1900            }
   1901            else if ( ind->keyType == KEY_TYPE_APP_LINK )
   \                     ??ZDSecMgrTransportKeyInd_10:
   \   0001DC   8E82         MOV       DPL,R6
   \   0001DE   8F83         MOV       DPH,R7
   \   0001E0   A3           INC       DPTR
   \   0001E1   A3           INC       DPTR
   \   0001E2   A3           INC       DPTR
   \   0001E3   A3           INC       DPTR
   \   0001E4   E0           MOVX      A,@DPTR
   \   0001E5   6403         XRL       A,#0x3
   \   0001E7   707F         JNZ       ??ZDSecMgrTransportKeyInd_9
   1902            {
   1903              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1904              {
   1905                uint16           ami;
   1906                ZDSecMgrEntry_t* entry;
   1907          
   1908                // get the address index
   1909                if ( ZDSecMgrExtAddrLookup( ind->srcExtAddr, &ami ) != ZSuccess )
   \   0001E9                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   0001E9   7403         MOV       A,#0x3
   \   0001EB   12....       LCALL     ?XSTACK_DISP102_8
   \   0001EE   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   0001F1   12....       LCALL     `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   0001F4   E9           MOV       A,R1
   \   0001F5   602C         JZ        ??ZDSecMgrTransportKeyInd_13
   1910                {
   1911                  // store new EXT address
   1912                  ZDSecMgrAddrStore( INVALID_NODE_ADDR, ind->srcExtAddr, &ami );
   \   0001F7   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   0001FA                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   0001FA   7403         MOV       A,#0x3
   \   0001FC   12....       LCALL     ?XSTACK_DISP100_8
   \   0001FF   88..         MOV       ?V2,R0
   \   000201   89..         MOV       ?V3,R1
   \   000203   78..         MOV       R0,#?V2
   \   000205   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000208   AC..         MOV       R4,?V0
   \   00020A   AD..         MOV       R5,?V1
   \   00020C   7AFE         MOV       R2,#-0x2
   \   00020E   7BFF         MOV       R3,#-0x1
   \   000210   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000213   12....       LCALL     ?DEALLOC_XSTACK8
   1913                  ZDP_NwkAddrReq( ind->srcExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   000216                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000216   7D00         MOV       R5,#0x0
   \   000218   7C00         MOV       R4,#0x0
   \   00021A   7900         MOV       R1,#0x0
   \   00021C   AA..         MOV       R2,?V0
   \   00021E   AB..         MOV       R3,?V1
   \   000220   12....       LCALL     `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   1914                }
   1915          
   1916                ZDSecMgrEntryLookupAMI( ami, &entry );
   \                     ??ZDSecMgrTransportKeyInd_13:
   \   000223                ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
   \   000223   7401         MOV       A,#0x1
   \   000225   12....       LCALL     ?XSTACK_DISP102_8
   \   000228   7403         MOV       A,#0x3
   \   00022A   12....       LCALL     ?XSTACK_DISP0_8
   \   00022D   12....       LCALL     ?Subroutine36 & 0xFFFF
   1917          
   1918                if ( entry == NULL )
   \                     ??CrossCallReturnLabel_48:
   \   000230   7401         MOV       A,#0x1
   \   000232   12....       LCALL     ?XSTACK_DISP0_8
   \   000235   12....       LCALL     ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000238   701E         JNZ       ??CrossCallReturnLabel_246
   1919                {
   1920                  // get new entry
   1921                  if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
   \   00023A                ; Setup parameters for call to function ZDSecMgrEntryNew
   \   00023A   7401         MOV       A,#0x1
   \   00023C   12....       LCALL     ?XSTACK_DISP101_8
   \   00023F   12....       LCALL     `??ZDSecMgrEntryNew::?relay`; Banked call to: ZDSecMgrEntryNew
   \   000242   E9           MOV       A,R1
   \   000243   7013         JNZ       ??CrossCallReturnLabel_246
   1922                  {
   1923                    // finish setting up entry
   1924                    entry->ami = ami;
   \   000245   7403         MOV       A,#0x3
   \   000247   12....       LCALL     ?XSTACK_DISP0_8
   \   00024A   12....       LCALL     ??Subroutine108_0 & 0xFFFF
   1925                  }
   1926                }
   \                     ??CrossCallReturnLabel_190:
   \   00024D   7401         MOV       A,#0x1
   \   00024F   12....       LCALL     ?XSTACK_DISP0_8
   \   000252   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000255   12....       LCALL     ??Subroutine113_0 & 0xFFFF
   1927          
   1928                ZDSecMgrLinkKeySet( ind->srcExtAddr, ind->key );
   \                     ??CrossCallReturnLabel_246:
   \   000258                ; Setup parameters for call to function APSME_LinkKeySet
   \   000258   EE           MOV       A,R6
   \   000259   2406         ADD       A,#0x6
   \   00025B   FC           MOV       R4,A
   \   00025C   E4           CLR       A
   \   00025D   3F           ADDC      A,R7
   \   00025E   FD           MOV       R5,A
   \   00025F   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   000262   12....       LCALL     `??APSME_LinkKeySet::?relay`; Banked call to: APSME_LinkKeySet
   1929          
   1930          #if defined NV_RESTORE
   1931                ZDSecMgrWriteNV();  // Write the control record for the new established link key to NV.
   \   000265                ; Setup parameters for call to function ZDSecMgrWriteNV
   \   000265   12....       LCALL     `??ZDSecMgrWriteNV::?relay`; Banked call to: ZDSecMgrWriteNV
   1932          #endif
   1933              }
   1934            }
   1935          }
   \                     ??ZDSecMgrTransportKeyInd_9:
   \   000268   7428         MOV       A,#0x28
   \   00026A   02....       LJMP      ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   EE           MOV       A,R6
   \   000001   2416         ADD       A,#0x16
   \   000003   F5..         MOV       ?V0,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F5..         MOV       ?V1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   EE           MOV       A,R6
   \   000001                REQUIRE ??Subroutine106_0
   \   000001                ; // Fall through to label ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   2416         ADD       A,#0x16
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   3F           ADDC      A,R7
   \   000005   FB           MOV       R3,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   FA           MOV       R2,A
   \   000001   E4           CLR       A
   \   000002   3F           ADDC      A,R7
   \   000003                REQUIRE ??Subroutine125_0
   \   000003                ; // Fall through to label ??Subroutine125_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine125_0:
   \   000000   FB           MOV       R3,A
   \   000001                REQUIRE ??Subroutine126_0
   \   000001                ; // Fall through to label ??Subroutine126_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000003   7405         MOV       A,#0x5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine133_0:
   \   000000   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET
   1936          
   1937          /******************************************************************************
   1938           * @fn          ZDSecMgrUpdateDeviceInd
   1939           *
   1940           * @brief       Process the ZDO_UpdateDeviceInd_t message.
   1941           *
   1942           * @param       ind - [in] ZDO_UpdateDeviceInd_t indication
   1943           *
   1944           * @return      none
   1945           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1946          void ZDSecMgrUpdateDeviceInd( ZDO_UpdateDeviceInd_t* ind )
   \                     ZDSecMgrUpdateDeviceInd:
   1947          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 28
   \   000005   74E4         MOV       A,#-0x1c
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1948            ZDSecMgrDevice_t device;
   1949          
   1950            device.nwkAddr    = ind->devAddr;
   \   00000A   EA           MOV       A,R2
   \   00000B   240C         ADD       A,#0xc
   \   00000D   F582         MOV       DPL,A
   \   00000F   E4           CLR       A
   \   000010   3B           ADDC      A,R3
   \   000011   F583         MOV       DPH,A
   \   000013   12....       LCALL     ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000016   7401         MOV       A,#0x1
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ??Subroutine113_0 & 0xFFFF
   1951            device.extAddr    = ind->devExtAddr;
   \                     ??CrossCallReturnLabel_247:
   \   00001E   EA           MOV       A,R2
   \   00001F   2404         ADD       A,#0x4
   \   000021   F8           MOV       R0,A
   \   000022   E4           CLR       A
   \   000023   3B           ADDC      A,R3
   \   000024   F9           MOV       R1,A
   \   000025   7403         MOV       A,#0x3
   \   000027   12....       LCALL     ?XSTACK_DISP0_8
   \   00002A   12....       LCALL     ?Subroutine12 & 0xFFFF
   1952            device.parentAddr = ind->srcAddr;
   \                     ??CrossCallReturnLabel_5:
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   12....       LCALL     ??Subroutine113_0 & 0xFFFF
   1953            device.devStatus  = DEV_SEC_INIT_STATUS;
   \                     ??CrossCallReturnLabel_248:
   \   000033   7408         MOV       A,#0x8
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   7404         MOV       A,#0x4
   \   00003A   F0           MOVX      @DPTR,A
   1954            device.secure     = FALSE;
   \   00003B   7407         MOV       A,#0x7
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   E4           CLR       A
   \   000041   F0           MOVX      @DPTR,A
   1955          
   1956            // Trust Center should identify the type of JOIN/REJOIN and
   1957            // Transport the NWK key accordingly, it will only be transported for:
   1958            //              APSME_UD_STANDARD_UNSECURED_JOIN
   1959            //   OR         APSME_UD_STANDARD_TRUST_CENTER_REJOIN
   1960            if ( ind->status != APSME_UD_DEVICE_LEFT )
   \   000042   EA           MOV       A,R2
   \   000043   240E         ADD       A,#0xe
   \   000045   F582         MOV       DPL,A
   \   000047   E4           CLR       A
   \   000048   3B           ADDC      A,R3
   \   000049   F583         MOV       DPH,A
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   6402         XRL       A,#0x2
   \   00004E   7003         JNZ       $+5
   \   000050   02....       LJMP      ??ZDSecMgrUpdateDeviceInd_0 & 0xFFFF
   1961            {
   1962              if ( ind->status == APSME_UD_STANDARD_SECURED_REJOIN )
   \   000053   E0           MOVX      A,@DPTR
   \   000054   7011         JNZ       ??ZDSecMgrUpdateDeviceInd_1
   1963              {
   1964                device.devStatus &= ~DEV_SEC_INIT_STATUS;
   1965                device.devStatus |=  DEV_SEC_AUTH_STATUS;
   \   000056   7408         MOV       A,#0x8
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   7408         MOV       A,#0x8
   \   00005D   F0           MOVX      @DPTR,A
   1966                device.secure = TRUE;
   \   00005E   14           DEC       A
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   7401         MOV       A,#0x1
   \   000064   F0           MOVX      @DPTR,A
   \   000065   807C         SJMP      ??ZDSecMgrUpdateDeviceInd_2
   1967              }
   1968              else
   1969              {
   1970          #if (ZG_BUILD_COORDINATOR_TYPE)
   1971                uint8  found;
   1972                uint16 keyNvIndex;
   1973                APSME_TCLKDevEntry_t TCLKDevEntry;
   1974                
   1975                keyNvIndex = APSME_SearchTCLinkKeyEntry(device.extAddr,&found, &TCLKDevEntry);
   \                     ??ZDSecMgrUpdateDeviceInd_1:
   \   000067                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   000067   7409         MOV       A,#0x9
   \   000069   12....       LCALL     ?XSTACK_DISP100_8
   \   00006C   88..         MOV       ?V0,R0
   \   00006E   89..         MOV       ?V1,R1
   \   000070   78..         MOV       R0,#?V0
   \   000072   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000075   7402         MOV       A,#0x2
   \   000077   12....       LCALL     ?XSTACK_DISP102_8
   \   00007A   7405         MOV       A,#0x5
   \   00007C   12....       LCALL     ?XSTACK_DISP0_8
   \   00007F   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000082   12....       LCALL     ?DEALLOC_XSTACK8
   1976                
   1977                //If found and it was verified, then allow it to join in a fresh state by erasing the key entry
   1978                if((found == TRUE) && (TCLKDevEntry.keyAttributes == ZG_VERIFIED_KEY))
   \   000085   85..82       MOV       DPL,?XSP + 0
   \   000088   85..83       MOV       DPH,?XSP + 1
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   6401         XRL       A,#0x1
   \   00008E   7040         JNZ       ??ZDSecMgrUpdateDeviceInd_3
   \   000090   7419         MOV       A,#0x19
   \   000092   12....       LCALL     ?XSTACK_DISP0_8
   \   000095   E0           MOVX      A,@DPTR
   \   000096   6402         XRL       A,#0x2
   \   000098   7036         JNZ       ??ZDSecMgrUpdateDeviceInd_3
   1979                {
   1980                  TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
   \   00009A   74FF         MOV       A,#-0x1
   \   00009C   F0           MOVX      @DPTR,A
   1981                  //Increase the shift by one. Validate the maximum shift of the seed which is 15
   1982                  TCLKDevEntry.SeedShift_IcIndex++;
   1983                  TCLKDevEntry.SeedShift_IcIndex &= 0x0F;
   \   00009D   741B         MOV       A,#0x1b
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   04           INC       A
   \   0000A4   540F         ANL       A,#0xf
   \   0000A6   F0           MOVX      @DPTR,A
   1984                  
   1985                  TCLKDevEntry.rxFrmCntr = 0;
   \   0000A7   740D         MOV       A,#0xd
   \   0000A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AC   12....       LCALL     ??Subroutine111_0 & 0xFFFF
   1986                  TCLKDevEntry.txFrmCntr = 0;  
   \                     ??CrossCallReturnLabel_221:
   \   0000AF   7409         MOV       A,#0x9
   \   0000B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B4   E4           CLR       A
   \   0000B5   12....       LCALL     ?Subroutine25 & 0xFFFF
   1987                  
   1988                  //Update the entry
   1989                  osal_nv_write(keyNvIndex,0,sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
   1990                }
   \                     ??CrossCallReturnLabel_28:
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BB   75..13       MOV       ?V0,#0x13
   \   0000BE   75..00       MOV       ?V1,#0x0
   \   0000C1   78..         MOV       R0,#?V0
   \   0000C3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C6   7C00         MOV       R4,#0x0
   \   0000C8   7D00         MOV       R5,#0x0
   \   0000CA   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   0000CD   12....       LCALL     ?DEALLOC_XSTACK8
   1991                
   1992                bdb_TCAddJoiningDevice(device.parentAddr,device.extAddr);
   \                     ??ZDSecMgrUpdateDeviceInd_3:
   \   0000D0                ; Setup parameters for call to function bdb_TCAddJoiningDevice
   \   0000D0   7403         MOV       A,#0x3
   \   0000D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D5   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   1993          #endif
   1994              
   1995              }
   \                     ??CrossCallReturnLabel_284:
   \   0000D8   7405         MOV       A,#0x5
   \   0000DA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DD   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   0000E0   12....       LCALL     `??bdb_TCAddJoiningDevice::?relay`; Banked call to: bdb_TCAddJoiningDevice
   1996          
   1997              ZDSecMgrDeviceJoin( &device );
   \                     ??ZDSecMgrUpdateDeviceInd_2:
   \   0000E3                ; Setup parameters for call to function ZDSecMgrDeviceJoin
   \   0000E3   7401         MOV       A,#0x1
   \   0000E5   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E8   12....       LCALL     `??ZDSecMgrDeviceJoin::?relay`; Banked call to: ZDSecMgrDeviceJoin
   1998            }
   1999          }
   \                     ??ZDSecMgrUpdateDeviceInd_0:
   \   0000EB   741C         MOV       A,#0x1c
   \   0000ED   02....       LJMP      ??Subroutine116_0 & 0xFFFF
   2000          
   2001          /******************************************************************************
   2002           * @fn          ZDSecMgrRemoveDeviceInd
   2003           *
   2004           * @brief       Process the ZDO_RemoveDeviceInd_t message.
   2005           *
   2006           * @param       ind - [in] ZDO_RemoveDeviceInd_t indication
   2007           *
   2008           * @return      none
   2009           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2010          void ZDSecMgrRemoveDeviceInd( ZDO_RemoveDeviceInd_t* ind )
   \                     ZDSecMgrRemoveDeviceInd:
   2011          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2012            ZDSecMgrDevice_t device;
   2013          
   2014            // only accept from Trust Center
   2015            if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
   \   00000E   8A82         MOV       DPL,R2
   \   000010   F583         MOV       DPH,A
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   12....       LCALL     ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000017   7026         JNZ       ??CrossCallReturnLabel_16
   2016            {
   2017              // look up NWK address
   2018              if ( APSME_LookupNwkAddr( ind->childExtAddr, &device.nwkAddr ) == TRUE )
   \   000019                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   000019   AC..         MOV       R4,?XSP + 0
   \   00001B   AD..         MOV       R5,?XSP + 1
   \   00001D   EA           MOV       A,R2
   \   00001E   2404         ADD       A,#0x4
   \   000020   12....       LCALL     ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000023   701A         JNZ       ??CrossCallReturnLabel_16
   2019              {
   2020                device.parentAddr = NLME_GetShortAddr();
   \   000025                ; Setup parameters for call to function NLME_GetShortAddr
   \   000025   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000028   7404         MOV       A,#0x4
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   2021                device.extAddr    = ind->childExtAddr;
   \                     ??CrossCallReturnLabel_258:
   \   000030   EE           MOV       A,R6
   \   000031   2404         ADD       A,#0x4
   \   000033   F8           MOV       R0,A
   \   000034   E4           CLR       A
   \   000035   3F           ADDC      A,R7
   \   000036   F9           MOV       R1,A
   \   000037   7402         MOV       A,#0x2
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   12....       LCALL     ?Subroutine18 & 0xFFFF
   2022          
   2023                // remove device
   2024                ZDSecMgrDeviceRemove( &device );
   2025              }
   2026            }
   2027          }
   \                     ??CrossCallReturnLabel_16:
   \   00003F   02....       LJMP      ?Subroutine8 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function ZDSecMgrDeviceRemove
   \   000005                ; Setup parameters for call to function ZDSecMgrDeviceRemove
   \   000005   AA..         MOV       R2,?XSP + 0
   \   000007   AB..         MOV       R3,?XSP + 1
   \   000009   12....       LCALL     `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
   \   00000C   22           RET
   2028          
   2029          /******************************************************************************
   2030           * @fn          ZDSecMgrRequestKeyInd
   2031           *
   2032           * @brief       Process the ZDO_RequestKeyInd_t message.
   2033           *
   2034           * @param       ind - [in] ZDO_RequestKeyInd_t indication
   2035           *
   2036           * @return      none
   2037           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2038          void ZDSecMgrRequestKeyInd( ZDO_RequestKeyInd_t* ind )
   \                     ZDSecMgrRequestKeyInd:
   2039          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2040            if ( ind->keyType == KEY_TYPE_NWK )
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6401         XRL       A,#0x1
   \   00000F   6022         JZ        ??ZDSecMgrRequestKeyInd_0
   2041            {
   2042            }
   2043            else if ( ind->keyType == KEY_TYPE_APP_MASTER )
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   6402         XRL       A,#0x2
   \   00001C   7005         JNZ       ??ZDSecMgrRequestKeyInd_1
   2044            {
   2045              ZDSecMgrAppKeyReq( ind );
   \   00001E                ; Setup parameters for call to function ZDSecMgrAppKeyReq
   \   00001E   12....       LCALL     `??ZDSecMgrAppKeyReq::?relay`; Banked call to: ZDSecMgrAppKeyReq
   \   000021   8010         SJMP      ??ZDSecMgrRequestKeyInd_0
   2046            }
   2047            else if ( ind->keyType == KEY_TYPE_TC_LINK )
   \                     ??ZDSecMgrRequestKeyInd_1:
   \   000023   8A82         MOV       DPL,R2
   \   000025   8B83         MOV       DPH,R3
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   6404         XRL       A,#0x4
   \   00002E   7003         JNZ       ??ZDSecMgrRequestKeyInd_0
   2048            {
   2049              ZDSecMgrTclkReq( ind );
   \   000030                ; Setup parameters for call to function ZDSecMgrTclkReq
   \   000030   12....       LCALL     `??ZDSecMgrTclkReq::?relay`; Banked call to: ZDSecMgrTclkReq
   2050            }
   2051            //else ignore
   2052          }
   \                     ??ZDSecMgrRequestKeyInd_0:
   \   000033   02....       LJMP      ??Subroutine105_0 & 0xFFFF
   2053          
   2054          
   2055          /******************************************************************************
   2056           * @fn          ZDSecMgrVerifyKeyInd
   2057           *
   2058           * @brief       Process the ZDO_VerifyKeyInd_t message.
   2059           *
   2060           * @param       ind - [in] ZDO_VerifyKeyInd_t indication
   2061           *
   2062           * @return      none
   2063           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2064          void ZDSecMgrVerifyKeyInd( ZDO_VerifyKeyInd_t* ind )
   \                     ZDSecMgrVerifyKeyInd:
   2065          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2066            ZDSecMgrAppConfKeyReq( ind );
   \   000004                ; Setup parameters for call to function ZDSecMgrAppConfKeyReq
   \   000004   12....       LCALL     `??ZDSecMgrAppConfKeyReq::?relay`; Banked call to: ZDSecMgrAppConfKeyReq
   2067          }
   \   000007   02....       LJMP      ??Subroutine105_0 & 0xFFFF
   2068          
   2069          
   2070          /******************************************************************************
   2071           * @fn          ZDSecMgrSwitchKeyInd
   2072           *
   2073           * @brief       Process the ZDO_SwitchKeyInd_t message.
   2074           *
   2075           * @param       ind - [in] ZDO_SwitchKeyInd_t indication
   2076           *
   2077           * @return      none
   2078           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2079          void ZDSecMgrSwitchKeyInd( ZDO_SwitchKeyInd_t* ind )
   \                     ZDSecMgrSwitchKeyInd:
   2080          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2081            SSP_SwitchNwkKey( ind->keySeqNum );
   \   000004                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F9           MOV       R1,A
   \   00000E   12....       LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   2082          
   2083            // Save if nv
   2084            ZDApp_NVUpdate();
   \   000011                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000011   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   2085          }
   \   000014   02....       LJMP      ??Subroutine105_0 & 0xFFFF
   2086            
   2087          /******************************************************************************
   2088           * @fn          ZDSecMgrGenerateSeed
   2089           *
   2090           * @brief       Generate the seed for TC link keys and store it in Nv
   2091           *
   2092           * @param       SetDefault, force to use new seed
   2093           *
   2094           * @return      none
   2095           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2096          void ZDSecMgrGenerateSeed(uint8 SetDefault)
   \                     ZDSecMgrGenerateSeed:
   2097          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   2098            uint8 SeedKey[SEC_KEY_LEN];  
   2099            
   2100            ZDSecMgrGenerateRndKey(SeedKey);
   \   00000C                ; Setup parameters for call to function ZDSecMgrGenerateRndKey
   \   00000C   AA..         MOV       R2,?XSP + 0
   \   00000E   AB..         MOV       R3,?XSP + 1
   \   000010   12....       LCALL     `??ZDSecMgrGenerateRndKey::?relay`; Banked call to: ZDSecMgrGenerateRndKey
   2101            
   2102            if((SUCCESS == osal_nv_item_init(ZCD_NV_TCLK_SEED,SEC_KEY_LEN,SeedKey)) && SetDefault)
   \   000013                ; Setup parameters for call to function osal_nv_item_init
   \   000013   A8..         MOV       R0,?XSP + 0
   \   000015   A9..         MOV       R1,?XSP + 1
   \   000017   88..         MOV       ?V0,R0
   \   000019   89..         MOV       ?V1,R1
   \   00001B   78..         MOV       R0,#?V0
   \   00001D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000020   7C10         MOV       R4,#0x10
   \   000022   7D00         MOV       R5,#0x0
   \   000024   7A01         MOV       R2,#0x1
   \   000026   7B01         MOV       R3,#0x1
   \   000028   12....       LCALL     ??Subroutine133_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   00002B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002E   E9           MOV       A,R1
   \   00002F   7021         JNZ       ??ZDSecMgrGenerateSeed_0
   \   000031   EE           MOV       A,R6
   \   000032   601E         JZ        ??ZDSecMgrGenerateSeed_0
   2103            {
   2104              //Force to use a new seed
   2105              osal_nv_write(ZCD_NV_TCLK_SEED,0,SEC_KEY_LEN,SeedKey);
   \   000034                ; Setup parameters for call to function osal_nv_write
   \   000034   78..         MOV       R0,#?V0
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000039   75..10       MOV       ?V0,#0x10
   \   00003C   75..00       MOV       ?V1,#0x0
   \   00003F   78..         MOV       R0,#?V0
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000044   7C00         MOV       R4,#0x0
   \   000046   7D00         MOV       R5,#0x0
   \   000048   7A01         MOV       R2,#0x1
   \   00004A   7B01         MOV       R3,#0x1
   \   00004C   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   2106            }
   \                     ??CrossCallReturnLabel_322:
   \   00004F   12....       LCALL     ?DEALLOC_XSTACK8
   2107          
   2108            osal_memset(SeedKey,0,SEC_KEY_LEN);
   \                     ??ZDSecMgrGenerateSeed_0:
   \   000052                ; Setup parameters for call to function osal_memset
   \   000052   7C10         MOV       R4,#0x10
   \   000054   7D00         MOV       R5,#0x0
   \   000056   7900         MOV       R1,#0x0
   \   000058   AA..         MOV       R2,?XSP + 0
   \   00005A   AB..         MOV       R3,?XSP + 1
   \   00005C   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2109          }
   \   00005F   7410         MOV       A,#0x10
   \   000061   80..         SJMP      ??Subroutine116_0
   2110          
   2111          
   2112          /******************************************************************************
   2113           * @fn          ZDSecMgrGenerateKeyFromSeed
   2114           *
   2115           * @brief       Generate the TC link key for an specific device usign seed and ExtAddr
   2116           *
   2117           * @param       [in]  extAddr  
   2118           * @param       [in]  shift    number of byte shifts that the seed will do to 
   2119           *                             generate a new key for the same device. 
   2120           *                             This value must be less than SEC_KEY_LEN
   2121           * @param       [out] key      buffer in which the key will be copied
   2122           *
   2123           * @return      none
   2124           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2125          void ZDSecMgrGenerateKeyFromSeed(uint8 *extAddr, uint8 shift, uint8 *key)
   \                     ZDSecMgrGenerateKeyFromSeed:
   2126          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V8,R2
   \   00000C   8B..         MOV       ?V9,R3
   \   00000E   89..         MOV       ?V2,R1
   \   000010   EC           MOV       A,R4
   \   000011   FE           MOV       R6,A
   \   000012   ED           MOV       A,R5
   \   000013   FF           MOV       R7,A
   2127            uint8 i;
   2128            uint8 tempKey[SEC_KEY_LEN];
   2129            
   2130            if((key != NULL) && (extAddr != NULL))
   \   000014   EC           MOV       A,R4
   \   000015   4F           ORL       A,R7
   \   000016   7003         JNZ       $+5
   \   000018   02....       LJMP      ??ZDSecMgrGenerateKeyFromSeed_0 & 0xFFFF
   \   00001B   EA           MOV       A,R2
   \   00001C   4B           ORL       A,R3
   \   00001D   7003         JNZ       $+5
   \   00001F   02....       LJMP      ??ZDSecMgrGenerateKeyFromSeed_0 & 0xFFFF
   2131            {
   2132              //Read the key
   2133              osal_nv_read(ZCD_NV_TCLK_SEED,0,SEC_KEY_LEN,tempKey);
   \   000022                ; Setup parameters for call to function osal_nv_read
   \   000022   A8..         MOV       R0,?XSP + 0
   \   000024   A9..         MOV       R1,?XSP + 1
   \   000026   88..         MOV       ?V0,R0
   \   000028   89..         MOV       ?V1,R1
   \   00002A   78..         MOV       R0,#?V0
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002F   75..10       MOV       ?V0,#0x10
   \   000032   75..00       MOV       ?V1,#0x0
   \   000035   78..         MOV       R0,#?V0
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   7C00         MOV       R4,#0x0
   \   00003C   7D00         MOV       R5,#0x0
   \   00003E   7A01         MOV       R2,#0x1
   \   000040   7B01         MOV       R3,#0x1
   \   000042   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   000045   12....       LCALL     ?DEALLOC_XSTACK8
   2134          
   2135              //shift the seed
   2136              osal_memcpy(key, &tempKey[shift], SEC_KEY_LEN - shift);
   \   000048   E5..         MOV       A,?V2
   \   00004A   F5..         MOV       ?V0,A
   \   00004C                ; Setup parameters for call to function osal_memcpy
   \   00004C   85..82       MOV       DPL,?XSP + 0
   \   00004F   85..83       MOV       DPH,?XSP + 1
   \   000052   E582         MOV       A,DPL
   \   000054   25..         ADD       A,?V0
   \   000056   F5..         MOV       ?V4,A
   \   000058   E4           CLR       A
   \   000059   3583         ADDC      A,DPH
   \   00005B   F5..         MOV       ?V5,A
   \   00005D   75..00       MOV       ?V6,#0x0
   \   000060   78..         MOV       R0,#?V4
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000065   7410         MOV       A,#0x10
   \   000067   C3           CLR       C
   \   000068   95..         SUBB      A,?V0
   \   00006A   FC           MOV       R4,A
   \   00006B   95E0         SUBB      A,0xE0 /* A   */
   \   00006D   FD           MOV       R5,A
   \   00006E   EE           MOV       A,R6
   \   00006F   FA           MOV       R2,A
   \   000070   EF           MOV       A,R7
   \   000071   FB           MOV       R3,A
   \   000072   12....       LCALL     ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   000075   12....       LCALL     ?DEALLOC_XSTACK8
   2137              osal_memcpy(&key[SEC_KEY_LEN - shift], tempKey, shift);
   \   000078                ; Setup parameters for call to function osal_memcpy
   \   000078   A8..         MOV       R0,?XSP + 0
   \   00007A   A9..         MOV       R1,?XSP + 1
   \   00007C   88..         MOV       ?V4,R0
   \   00007E   89..         MOV       ?V5,R1
   \   000080   78..         MOV       R0,#?V4
   \   000082   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000085   AC..         MOV       R4,?V2
   \   000087   7D00         MOV       R5,#0x0
   \   000089   C3           CLR       C
   \   00008A   E4           CLR       A
   \   00008B   95..         SUBB      A,?V0
   \   00008D   F8           MOV       R0,A
   \   00008E   95E0         SUBB      A,0xE0 /* A   */
   \   000090   F9           MOV       R1,A
   \   000091   EE           MOV       A,R6
   \   000092   28           ADD       A,R0
   \   000093   F8           MOV       R0,A
   \   000094   EF           MOV       A,R7
   \   000095   39           ADDC      A,R1
   \   000096   F9           MOV       R1,A
   \   000097   E8           MOV       A,R0
   \   000098   2410         ADD       A,#0x10
   \   00009A   FA           MOV       R2,A
   \   00009B   E4           CLR       A
   \   00009C   39           ADDC      A,R1
   \   00009D   FB           MOV       R3,A
   \   00009E   12....       LCALL     ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   0000A1   12....       LCALL     ?DEALLOC_XSTACK8
   2138             
   2139              //Create the key from the seed
   2140              for(i = 0; i < Z_EXTADDR_LEN; i++)
   \   0000A4   7C00         MOV       R4,#0x0
   2141              {
   2142                key[i] ^= extAddr[i];
   \                     ??ZDSecMgrGenerateKeyFromSeed_1:
   \   0000A6   EC           MOV       A,R4
   \   0000A7   FA           MOV       R2,A
   \   0000A8   E5..         MOV       A,?V8
   \   0000AA   2A           ADD       A,R2
   \   0000AB   F8           MOV       R0,A
   \   0000AC   E4           CLR       A
   \   0000AD   35..         ADDC      A,?V9
   \   0000AF   F9           MOV       R1,A
   \   0000B0   EE           MOV       A,R6
   \   0000B1   2A           ADD       A,R2
   \   0000B2   FA           MOV       R2,A
   \   0000B3   E4           CLR       A
   \   0000B4   3F           ADDC      A,R7
   \   0000B5   FB           MOV       R3,A
   \   0000B6   8882         MOV       DPL,R0
   \   0000B8   8983         MOV       DPH,R1
   \   0000BA   E0           MOVX      A,@DPTR
   \   0000BB   FD           MOV       R5,A
   \   0000BC   8A82         MOV       DPL,R2
   \   0000BE   8B83         MOV       DPH,R3
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   6D           XRL       A,R5
   \   0000C2   F0           MOVX      @DPTR,A
   2143                key[i+Z_EXTADDR_LEN] ^= extAddr[i];
   \   0000C3   8882         MOV       DPL,R0
   \   0000C5   8983         MOV       DPH,R1
   \   0000C7   E0           MOVX      A,@DPTR
   \   0000C8   F8           MOV       R0,A
   \   0000C9   8A82         MOV       DPL,R2
   \   0000CB   8B83         MOV       DPH,R3
   \   0000CD   A3           INC       DPTR
   \   0000CE   A3           INC       DPTR
   \   0000CF   A3           INC       DPTR
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   A3           INC       DPTR
   \   0000D3   A3           INC       DPTR
   \   0000D4   A3           INC       DPTR
   \   0000D5   E0           MOVX      A,@DPTR
   \   0000D6   68           XRL       A,R0
   \   0000D7   F0           MOVX      @DPTR,A
   2144              }
   \   0000D8   0C           INC       R4
   \   0000D9   EC           MOV       A,R4
   \   0000DA   C3           CLR       C
   \   0000DB   9408         SUBB      A,#0x8
   \   0000DD   40C7         JC        ??ZDSecMgrGenerateKeyFromSeed_1
   2145            }
   2146          }
   \                     ??ZDSecMgrGenerateKeyFromSeed_0:
   \   0000DF   7410         MOV       A,#0x10
   \   0000E1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E4   7F0A         MOV       R7,#0xa
   \   0000E6   02....       LJMP      ?BANKED_LEAVE_XDATA
   2147          
   2148          
   2149          /******************************************************************************
   2150           * @fn          ZDSecMgrGenerateRndKey
   2151           *
   2152          * @brief       Generate a random key. NOTE: Random key is generated by osal_rand, refer to osal_rand to see the random properties of the key generated by this mean.
   2153           *
   2154           * @param       pKey - [out] Buffer pointer in which the key will be passed.
   2155           *
   2156           * @return      none
   2157           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2158          void ZDSecMgrGenerateRndKey(uint8* pKey)
   \                     ZDSecMgrGenerateRndKey:
   2159          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2160            uint16  temp;
   2161            uint8   index = 0;
   \   000009   75..00       MOV       ?V0,#0x0
   2162            
   2163            while(index < (SEC_KEY_LEN/2))
   2164            {
   2165              temp = osal_rand();
   \                     ??ZDSecMgrGenerateRndKey_0:
   \   00000C                ; Setup parameters for call to function osal_rand
   \   00000C   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   00000F   8A..         MOV       ?V2,R2
   \   000011   8B..         MOV       ?V3,R3
   2166              pKey[index*2]   = (uint8) (temp & 0x00FF);
   \   000013   AA..         MOV       R2,?V0
   \   000015   EA           MOV       A,R2
   \   000016   2A           ADD       A,R2
   \   000017   FA           MOV       R2,A
   \   000018   E4           CLR       A
   \   000019   33           RLC       A
   \   00001A   FB           MOV       R3,A
   \   00001B   EE           MOV       A,R6
   \   00001C   2A           ADD       A,R2
   \   00001D   F582         MOV       DPL,A
   \   00001F   EF           MOV       A,R7
   \   000020   3B           ADDC      A,R3
   \   000021   F583         MOV       DPH,A
   \   000023   E5..         MOV       A,?V2
   \   000025   F0           MOVX      @DPTR,A
   2167              pKey[index*2+1] = (uint8) ((temp >> 8) & 0x00FF);
   \   000026   A3           INC       DPTR
   \   000027   E5..         MOV       A,?V3
   \   000029   F0           MOVX      @DPTR,A
   2168              index++;
   \   00002A   05..         INC       ?V0
   2169            }
   \   00002C   E5..         MOV       A,?V0
   \   00002E   C3           CLR       C
   \   00002F   9408         SUBB      A,#0x8
   \   000031   40D9         JC        ??ZDSecMgrGenerateRndKey_0
   2170          }
   \   000033   02....       LJMP      ??Subroutine120_0 & 0xFFFF
   2171          
   2172          
   2173          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2174          /******************************************************************************
   2175           * @fn          ZDSecMgrUpdateNwkKey
   2176           *
   2177           * @brief       Load a new NWK key and trigger a network update to the dstAddr.
   2178           *
   2179           * @param       key       - [in] new NWK key
   2180           * @param       keySeqNum - [in] new NWK key sequence number
   2181           *
   2182           * @return      ZStatus_t
   2183           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2184          ZStatus_t ZDSecMgrUpdateNwkKey( uint8* key, uint8 keySeqNum, uint16 dstAddr )
   \                     ZDSecMgrUpdateNwkKey:
   2185          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 26
   \   000005   74E6         MOV       A,#-0x1a
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   89..         MOV       ?V1,R1
   2186            ZStatus_t               status;
   2187            APSME_TransportKeyReq_t req;
   2188          
   2189            // initialize common elements of local variables
   2190            req.keyType   = KEY_TYPE_NWK;
   \   000010   7402         MOV       A,#0x2
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   7401         MOV       A,#0x1
   \   000017   F0           MOVX      @DPTR,A
   2191          
   2192            req.dstAddr   = dstAddr;
   \   000018   85..82       MOV       DPL,?XSP + 0
   \   00001B   85..83       MOV       DPH,?XSP + 1
   \   00001E   EC           MOV       A,R4
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   A3           INC       DPTR
   \   000021   ED           MOV       A,R5
   \   000022   F0           MOVX      @DPTR,A
   2193            req.keySeqNum = keySeqNum;
   \   000023   7403         MOV       A,#0x3
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   E9           MOV       A,R1
   \   000029   F0           MOVX      @DPTR,A
   2194            req.key       = key;
   \   00002A   7404         MOV       A,#0x4
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   2195            req.extAddr   = NULL;
   \                     ??CrossCallReturnLabel_259:
   \   000032   7406         MOV       A,#0x6
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   E4           CLR       A
   \   000038   F0           MOVX      @DPTR,A
   \   000039   A3           INC       DPTR
   \   00003A   F0           MOVX      @DPTR,A
   2196            req.nwkSecure = TRUE;
   \   00003B   740A         MOV       A,#0xa
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   7401         MOV       A,#0x1
   \   000042   F0           MOVX      @DPTR,A
   2197            req.tunnel    = NULL;
   \   000043   740B         MOV       A,#0xb
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   E4           CLR       A
   \   000049   F0           MOVX      @DPTR,A
   \   00004A   A3           INC       DPTR
   \   00004B   F0           MOVX      @DPTR,A
   2198          
   2199            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   2200            {
   2201              // Broadcast transport NWK key
   2202              if (( dstAddr == NWK_BROADCAST_SHORTADDR_DEVALL ) ||
   2203                  ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR) ||
   2204                  ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVRXON))
   \   00004C   74FF         MOV       A,#-0x1
   \   00004E   6C           XRL       A,R4
   \   00004F   7003         JNZ       ??ZDSecMgrUpdateNwkKey_0
   \   000051   74FF         MOV       A,#-0x1
   \   000053   6D           XRL       A,R5
   \                     ??ZDSecMgrUpdateNwkKey_0:
   \   000054   6014         JZ        ??ZDSecMgrUpdateNwkKey_1
   \   000056   74FC         MOV       A,#-0x4
   \   000058   6C           XRL       A,R4
   \   000059   7003         JNZ       ??ZDSecMgrUpdateNwkKey_2
   \   00005B   74FF         MOV       A,#-0x1
   \   00005D   6D           XRL       A,R5
   \                     ??ZDSecMgrUpdateNwkKey_2:
   \   00005E   600A         JZ        ??ZDSecMgrUpdateNwkKey_1
   \   000060   74FD         MOV       A,#-0x3
   \   000062   6C           XRL       A,R4
   \   000063   7003         JNZ       ??ZDSecMgrUpdateNwkKey_3
   \   000065   74FF         MOV       A,#-0x1
   \   000067   6D           XRL       A,R5
   \                     ??ZDSecMgrUpdateNwkKey_3:
   \   000068   7008         JNZ       ??ZDSecMgrUpdateNwkKey_4
   2205              {
   2206                req.apsSecure = FALSE;
   \                     ??ZDSecMgrUpdateNwkKey_1:
   \   00006A   7409         MOV       A,#0x9
   \   00006C   12....       LCALL     ?XSTACK_DISP0_8
   \   00006F   E4           CLR       A
   \   000070   8037         SJMP      ??ZDSecMgrUpdateNwkKey_5
   2207                status = APSME_TransportKeyReq( &req );
   2208              }
   2209              else
   2210              {
   2211                AddrMgrEntry_t          addrEntry;
   2212          
   2213                addrEntry.user = ADDRMGR_USER_SECURITY;
   \                     ??ZDSecMgrUpdateNwkKey_4:
   \   000072   740D         MOV       A,#0xd
   \   000074   12....       LCALL     ?XSTACK_DISP0_8
   \   000077   7402         MOV       A,#0x2
   \   000079   F0           MOVX      @DPTR,A
   2214                addrEntry.nwkAddr = dstAddr;
   \   00007A   740E         MOV       A,#0xe
   \   00007C   12....       LCALL     ?XSTACK_DISP0_8
   \   00007F   EC           MOV       A,R4
   \   000080   F0           MOVX      @DPTR,A
   \   000081   A3           INC       DPTR
   \   000082   ED           MOV       A,R5
   \   000083   F0           MOVX      @DPTR,A
   2215          
   2216                status = ZFailure;
   \   000084   75..01       MOV       ?V0,#0x1
   2217          
   2218                if ( AddrMgrEntryLookupNwk( &addrEntry ) == TRUE )
   \   000087                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000087   740D         MOV       A,#0xd
   \   000089   12....       LCALL     ?XSTACK_DISP101_8
   \   00008C   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   00008F   7021         JNZ       ??ZDSecMgrUpdateNwkKey_6
   2219                {
   2220                  req.extAddr = addrEntry.extAddr;
   \   000091   7410         MOV       A,#0x10
   \   000093   12....       LCALL     ?XSTACK_DISP0_8
   \   000096   A882         MOV       R0,DPL
   \   000098   A983         MOV       R1,DPH
   \   00009A   7406         MOV       A,#0x6
   \   00009C   12....       LCALL     ?XSTACK_DISP0_8
   \   00009F   12....       LCALL     ??Subroutine113_0 & 0xFFFF
   2221                  req.apsSecure = TRUE;
   \                     ??CrossCallReturnLabel_249:
   \   0000A2   7409         MOV       A,#0x9
   \   0000A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A7   7401         MOV       A,#0x1
   2222                  status = APSME_TransportKeyReq( &req );
   2223                }
   2224              }
   2225            }
   \                     ??ZDSecMgrUpdateNwkKey_5:
   \   0000A9   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   0000AC   12....       LCALL     `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
   \   0000AF   E9           MOV       A,R1
   \   0000B0   F5..         MOV       ?V0,A
   2226            else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   2227            {
   2228              req.apsSecure = FALSE;
   2229              status = APSME_TransportKeyReq( &req );
   2230            }
   2231          
   2232            SSP_UpdateNwkKey( key, keySeqNum );
   \                     ??ZDSecMgrUpdateNwkKey_6:
   \   0000B2                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   0000B2   A9..         MOV       R1,?V1
   \   0000B4   EE           MOV       A,R6
   \   0000B5   FA           MOV       R2,A
   \   0000B6   EF           MOV       A,R7
   \   0000B7   FB           MOV       R3,A
   \   0000B8   12....       LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
   2233          
   2234            // Save if nv
   2235            ZDApp_NVUpdate();
   \   0000BB                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0000BB   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   2236          
   2237            return status;
   \   0000BE   A9..         MOV       R1,?V0
   \   0000C0   741A         MOV       A,#0x1a
   \   0000C2   02....       LJMP      ??Subroutine116_0 & 0xFFFF
   2238          }
   2239          #endif // ( ZG_BUILD_COORDINATOR_TYPE )
   2240          
   2241          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2242          /******************************************************************************
   2243           * @fn          ZDSecMgrSwitchNwkKey
   2244           *
   2245           * @brief       Causes the NWK key to switch via a network command to the dstAddr.
   2246           *
   2247           * @param       keySeqNum - [in] new NWK key sequence number
   2248           *
   2249           * @return      ZStatus_t
   2250           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine118_0
   \   000006                ; // Fall through to label ??Subroutine118_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2251          ZStatus_t ZDSecMgrSwitchNwkKey( uint8 keySeqNum, uint16 dstAddr )
   \                     ZDSecMgrSwitchNwkKey:
   2252          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FF           MOV       R7,A
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   2253            ZStatus_t            status;
   2254            APSME_SwitchKeyReq_t req;
   2255          
   2256            // initialize common elements of local variables
   2257            req.dstAddr = dstAddr;
   \   000010   12....       LCALL     ?Subroutine20 & 0xFFFF
   2258            req.keySeqNum = keySeqNum;
   \                     ??CrossCallReturnLabel_262:
   \   000013   7402         MOV       A,#0x2
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   E9           MOV       A,R1
   \   000019   F0           MOVX      @DPTR,A
   2259          
   2260            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   2261            {
   2262              // Broadcast switch NWK key
   2263              if (( dstAddr == NWK_BROADCAST_SHORTADDR_DEVALL ) ||
   2264                  ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR) ||
   2265                  ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVRXON))
   \   00001A   74FF         MOV       A,#-0x1
   \   00001C   6A           XRL       A,R2
   \   00001D   7003         JNZ       ??ZDSecMgrSwitchNwkKey_0
   \   00001F   74FF         MOV       A,#-0x1
   \   000021   6B           XRL       A,R3
   \                     ??ZDSecMgrSwitchNwkKey_0:
   \   000022   6014         JZ        ??ZDSecMgrSwitchNwkKey_1
   \   000024   74FC         MOV       A,#-0x4
   \   000026   6A           XRL       A,R2
   \   000027   7003         JNZ       ??ZDSecMgrSwitchNwkKey_2
   \   000029   74FF         MOV       A,#-0x1
   \   00002B   6B           XRL       A,R3
   \                     ??ZDSecMgrSwitchNwkKey_2:
   \   00002C   600A         JZ        ??ZDSecMgrSwitchNwkKey_1
   \   00002E   74FD         MOV       A,#-0x3
   \   000030   6A           XRL       A,R2
   \   000031   7003         JNZ       ??ZDSecMgrSwitchNwkKey_3
   \   000033   74FF         MOV       A,#-0x1
   \   000035   6B           XRL       A,R3
   \                     ??ZDSecMgrSwitchNwkKey_3:
   \   000036   7008         JNZ       ??ZDSecMgrSwitchNwkKey_4
   2266              {
   2267                req.apsSecure = FALSE;
   \                     ??ZDSecMgrSwitchNwkKey_1:
   \   000038   7403         MOV       A,#0x3
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   E4           CLR       A
   \   00003E   802A         SJMP      ??ZDSecMgrSwitchNwkKey_5
   2268                status = APSME_SwitchKeyReq( &req );
   2269              }
   2270              else
   2271              {
   2272                AddrMgrEntry_t          addrEntry;
   2273          
   2274                addrEntry.user = ADDRMGR_USER_SECURITY;
   \                     ??ZDSecMgrSwitchNwkKey_4:
   \   000040   7404         MOV       A,#0x4
   \   000042   12....       LCALL     ?XSTACK_DISP0_8
   \   000045   7402         MOV       A,#0x2
   \   000047   F0           MOVX      @DPTR,A
   2275                addrEntry.nwkAddr = dstAddr;
   \   000048   7405         MOV       A,#0x5
   \   00004A   12....       LCALL     ?XSTACK_DISP0_8
   \   00004D   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   2276          
   2277                status = ZFailure;
   \                     ??CrossCallReturnLabel_260:
   \   000050   7E01         MOV       R6,#0x1
   2278          
   2279                if ( AddrMgrEntryLookupNwk( &addrEntry ) == TRUE )
   \   000052                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000052   7404         MOV       A,#0x4
   \   000054   12....       LCALL     ?XSTACK_DISP101_8
   \   000057   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00005A   7016         JNZ       ??ZDSecMgrSwitchNwkKey_6
   2280                {
   2281                  req.dstAddr = addrEntry.nwkAddr;
   \   00005C   7405         MOV       A,#0x5
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   12....       LCALL     ?Subroutine24 & 0xFFFF
   2282                  req.apsSecure = TRUE;
   \                     ??CrossCallReturnLabel_254:
   \   000064   7403         MOV       A,#0x3
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   EE           MOV       A,R6
   2283                  status = APSME_SwitchKeyReq( &req );
   2284                }
   2285              }
   2286            }
   \                     ??ZDSecMgrSwitchNwkKey_5:
   \   00006A   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   00006D   12....       LCALL     `??APSME_SwitchKeyReq::?relay`; Banked call to: APSME_SwitchKeyReq
   \   000070   E9           MOV       A,R1
   \   000071   FE           MOV       R6,A
   2287            else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   2288            {
   2289              req.apsSecure = FALSE;
   2290              status = APSME_SwitchKeyReq( &req );
   2291            }
   2292          
   2293            if ( dstAddr >= NWK_BROADCAST_SHORTADDR_DEVZCZR)
   \                     ??ZDSecMgrSwitchNwkKey_6:
   \   000072   C3           CLR       C
   \   000073   E5..         MOV       A,?V0
   \   000075   94FC         SUBB      A,#-0x4
   \   000077   E5..         MOV       A,?V1
   \   000079   94FF         SUBB      A,#-0x1
   \   00007B   400B         JC        ??ZDSecMgrSwitchNwkKey_7
   2294            {
   2295              zgSwitchCoordKey = TRUE;
   \   00007D   90....       MOV       DPTR,#zgSwitchCoordKey
   \   000080   7401         MOV       A,#0x1
   \   000082   F0           MOVX      @DPTR,A
   2296              zgSwitchCoordKeyIndex = keySeqNum;
   \   000083   EF           MOV       A,R7
   \   000084   90....       MOV       DPTR,#zgSwitchCoordKeyIndex
   \   000087   F0           MOVX      @DPTR,A
   2297            }
   2298            // Save if nv
   2299            ZDApp_NVUpdate();
   \                     ??ZDSecMgrSwitchNwkKey_7:
   \   000088                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000088   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   2300          
   2301            return status;
   \   00008B   EE           MOV       A,R6
   \   00008C   F9           MOV       R1,A
   \   00008D   02....       LJMP      ?Subroutine3 & 0xFFFF
   2302          }
   2303          #endif // ( ZG_BUILD_COORDINATOR_TYPE )
   2304          
   2305          /******************************************************************************
   2306           * @fn          ZDSecMgrRequestAppKey
   2307           *
   2308           * @brief       Request an application key with partner.
   2309           *
   2310           * @param       partExtAddr - [in] partner extended address
   2311           *
   2312           * @return      ZStatus_t
   2313           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2314          ZStatus_t ZDSecMgrRequestAppKey( uint8 *partExtAddr )
   \                     ZDSecMgrRequestAppKey:
   2315          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 4
   \   000004   74FC         MOV       A,#-0x4
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   2316            ZStatus_t status;
   2317            APSME_RequestKeyReq_t req;
   2318          
   2319            req.dstAddr = 0;
   \   000009   85..82       MOV       DPL,?XSP + 0
   \   00000C   85..83       MOV       DPH,?XSP + 1
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
   2320            req.keyType = KEY_TYPE_APP_MASTER;
   \   000011   04           INC       A
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   7402         MOV       A,#0x2
   \   000017   F0           MOVX      @DPTR,A
   2321          
   2322            req.partExtAddr = partExtAddr;
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine19 & 0xFFFF
   2323            status = APSME_RequestKeyReq( &req );
   2324          
   2325            return status;
   \                     ??CrossCallReturnLabel_265:
   \   00001E   12....       LCALL     `??APSME_RequestKeyReq::?relay`; Banked call to: APSME_RequestKeyReq
   \   000021   7404         MOV       A,#0x4
   \   000023   02....       LJMP      ?Subroutine9 & 0xFFFF
   2326          }
   2327          
   2328          #if ( ZG_BUILD_JOINING_TYPE )
   2329          /******************************************************************************
   2330           * @fn          ZDSecMgrSetupPartner
   2331           *
   2332           * @brief       Setup for application key partner.
   2333           *
   2334           * @param       partNwkAddr - [in] partner network address
   2335           *
   2336           * @return      ZStatus_t
   2337           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2338          ZStatus_t ZDSecMgrSetupPartner( uint16 partNwkAddr, uint8* partExtAddr )
   \                     ZDSecMgrSetupPartner:
   2339          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   2340            AddrMgrEntry_t entry;
   2341            ZStatus_t      status;
   2342          
   2343            status = ZFailure;
   \   000012   75..01       MOV       ?V0,#0x1
   2344          
   2345            // update the address manager
   2346            entry.user    = ADDRMGR_USER_SECURITY;
   \   000015   85..82       MOV       DPL,?XSP + 0
   \   000018   85..83       MOV       DPH,?XSP + 1
   \   00001B   7402         MOV       A,#0x2
   \   00001D   F0           MOVX      @DPTR,A
   2347            entry.nwkAddr = partNwkAddr;
   \   00001E   14           DEC       A
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   12....       LCALL     ?Subroutine16 & 0xFFFF
   2348            AddrMgrExtAddrSet( entry.extAddr, partExtAddr );
   \                     ??CrossCallReturnLabel_13:
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   AA82         MOV       R2,DPL
   \   00002A   AB83         MOV       R3,DPH
   \   00002C   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   2349          
   2350            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   \   00002F                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   00002F   AA..         MOV       R2,?XSP + 0
   \   000031   AB..         MOV       R3,?XSP + 1
   \   000033   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   000036   E9           MOV       A,R1
   \   000037   6401         XRL       A,#0x1
   \   000039   7038         JNZ       ??ZDSecMgrSetupPartner_0
   2351            {
   2352              status = ZSuccess;
   \   00003B   75..00       MOV       ?V0,#0x0
   2353          
   2354              // check for address discovery
   2355              if ( partNwkAddr == INVALID_NODE_ADDR )
   \   00003E   74FE         MOV       A,#-0x2
   \   000040   65..         XRL       A,?V2
   \   000042   7004         JNZ       ??ZDSecMgrSetupPartner_1
   \   000044   74FF         MOV       A,#-0x1
   \   000046   65..         XRL       A,?V3
   \                     ??ZDSecMgrSetupPartner_1:
   \   000048   700F         JNZ       ??ZDSecMgrSetupPartner_2
   2356              {
   2357                status = ZDP_NwkAddrReq( partExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   00004A                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   00004A   7D00         MOV       R5,#0x0
   \   00004C   7C00         MOV       R4,#0x0
   \   00004E   7900         MOV       R1,#0x0
   \   000050   EE           MOV       A,R6
   \   000051   FA           MOV       R2,A
   \   000052   EF           MOV       A,R7
   \   000053   FB           MOV       R3,A
   \   000054   12....       LCALL     `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   000057   8017         SJMP      ??ZDSecMgrSetupPartner_3
   2358              }
   2359              else if ( !AddrMgrExtAddrValid( partExtAddr ) )
   \                     ??ZDSecMgrSetupPartner_2:
   \   000059                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000059   EE           MOV       A,R6
   \   00005A   FA           MOV       R2,A
   \   00005B   EF           MOV       A,R7
   \   00005C   FB           MOV       R3,A
   \   00005D   12....       LCALL     `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   000060   E9           MOV       A,R1
   \   000061   7010         JNZ       ??ZDSecMgrSetupPartner_0
   2360              {
   2361                status = ZDP_IEEEAddrReq( partNwkAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   000063                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   000063   7D00         MOV       R5,#0x0
   \   000065   7C00         MOV       R4,#0x0
   \   000067   7900         MOV       R1,#0x0
   \   000069   AA..         MOV       R2,?V2
   \   00006B   AB..         MOV       R3,?V3
   \   00006D   12....       LCALL     `??ZDP_IEEEAddrReq::?relay`; Banked call to: ZDP_IEEEAddrReq
   \                     ??ZDSecMgrSetupPartner_3:
   \   000070   E9           MOV       A,R1
   \   000071   F5..         MOV       ?V0,A
   2362              }
   2363            }
   2364          
   2365            return status;
   \                     ??ZDSecMgrSetupPartner_0:
   \   000073   A9..         MOV       R1,?V0
   \   000075   740D         MOV       A,#0xd
   \   000077                REQUIRE ?Subroutine5
   \   000077                ; // Fall through to label ?Subroutine5
   2366          }
   2367          #endif // ( ZG_BUILD_JOINING_TYPE )
   2368          
   2369          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2370          /******************************************************************************
   2371           * @fn          ZDSecMgrAppKeyTypeSet
   2372           *
   2373           * @brief       Set application key type.
   2374           *
   2375           * @param       keyType - [in] application key type (KEY_TYPE_APP_MASTER@2 or
   2376           *                                                   KEY_TYPE_APP_LINK@3
   2377           *
   2378           * @return      ZStatus_t
   2379           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2380          ZStatus_t ZDSecMgrAppKeyTypeSet( uint8 keyType )
   \                     ZDSecMgrAppKeyTypeSet:
   2381          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   F8           MOV       R0,A
   2382            if ( keyType == KEY_TYPE_APP_LINK )
   \   000006   7403         MOV       A,#0x3
   \   000008   68           XRL       A,R0
   \   000009   90....       MOV       DPTR,#ZDSecMgrAppKeyType
   \   00000C   7004         JNZ       ??ZDSecMgrAppKeyTypeSet_0
   2383            {
   2384              ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;
   \   00000E   7403         MOV       A,#0x3
   \   000010   8002         SJMP      ??ZDSecMgrAppKeyTypeSet_1
   2385            }
   2386            else
   2387            {
   2388              ZDSecMgrAppKeyType = KEY_TYPE_APP_MASTER;
   \                     ??ZDSecMgrAppKeyTypeSet_0:
   \   000012   7402         MOV       A,#0x2
   2389            }
   \                     ??ZDSecMgrAppKeyTypeSet_1:
   \   000014   02....       LJMP      ?Subroutine2 & 0xFFFF
   2390          
   2391            return ZSuccess;
   2392          }
   2393          #endif
   2394          
   2395          /******************************************************************************
   2396           * ZigBee Device Security Manager - Stub Implementations
   2397           */
   2398          
   2399          
   2400          /******************************************************************************
   2401           * @fn          ZDSecMgrLinkKeySet (stubs APSME_LinkKeySet)
   2402           *
   2403           * @brief       Set <APSME_LinkKeyData_t> for specified NWK address.
   2404           *
   2405           * @param       extAddr - [in] EXT address
   2406           * @param       data    - [in] APSME_LinkKeyData_t
   2407           *
   2408           * @return      ZStatus_t
   2409           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V3
   \   000005                REQUIRE ??Subroutine110_0
   \   000005                ; // Fall through to label ??Subroutine110_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine110_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine111_0
   \   000002                ; // Fall through to label ??Subroutine111_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2410          ZStatus_t ZDSecMgrLinkKeySet( uint8* extAddr, uint8* key )
   \                     APSME_LinkKeySet:
   2411          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
   2412            ZStatus_t status;
   2413            ZDSecMgrEntry_t* entry;
   2414            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   2415            uint16 Index;
   2416          
   2417            // lookup entry index for specified EXT address
   2418            status = ZDSecMgrEntryLookupExtGetIndex( extAddr, &entry, &Index );
   \   00000E                ; Setup parameters for call to function ZDSecMgrEntryLookupExtGetIndex
   \   00000E   7402         MOV       A,#0x2
   \   000010   12....       LCALL     ?XSTACK_DISP100_8
   \   000013   88..         MOV       ?V0,R0
   \   000015   89..         MOV       ?V1,R1
   \   000017   78..         MOV       R0,#?V0
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001C   7402         MOV       A,#0x2
   \   00001E   12....       LCALL     ?XSTACK_DISP102_8
   \   000021   12....       LCALL     `??ZDSecMgrEntryLookupExtGetIndex::?relay`; Banked call to: ZDSecMgrEntryLookupExtGetIndex
   \   000024   7402         MOV       A,#0x2
   \   000026   12....       LCALL     ?DEALLOC_XSTACK8
   \   000029   E9           MOV       A,R1
   \   00002A   F5..         MOV       ?V0,A
   2419          
   2420            if ( status == ZSuccess )
   \   00002C   6003         JZ        $+5
   \   00002E   02....       LJMP      ??CrossCallReturnLabel_223 & 0xFFFF
   2421            {
   2422              // point to NV item
   2423              entry->keyNvId = ZCD_NV_APS_LINK_KEY_DATA_START + Index;
   \   000031   7402         MOV       A,#0x2
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   E0           MOVX      A,@DPTR
   \   000037   2401         ADD       A,#0x1
   \   000039   F8           MOV       R0,A
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   3402         ADDC      A,#0x2
   \   00003E   F9           MOV       R1,A
   \   00003F   85..82       MOV       DPL,?XSP + 0
   \   000042   85..83       MOV       DPH,?XSP + 1
   \   000045   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   12....       LCALL     ??Subroutine113_0 & 0xFFFF
   2424          
   2425              pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \                     ??CrossCallReturnLabel_250:
   \   00004D                ; Setup parameters for call to function osal_mem_alloc
   \   00004D   12....       LCALL     ?Subroutine50 & 0xFFFF
   2426          
   2427              if (pApsLinkKey != NULL)
   \                     ??CrossCallReturnLabel_278:
   \   000050   7003         JNZ       $+5
   \   000052   02....       LJMP      ??CrossCallReturnLabel_223 & 0xFFFF
   2428              {
   2429                // read the key form NV, keyNvId must be ZCD_NV_APS_LINK_KEY_DATA_START based
   2430                osal_nv_read( entry->keyNvId, 0,
   2431                             sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   \   000055                ; Setup parameters for call to function osal_nv_read
   \   000055   78..         MOV       R0,#?V2
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005A   75..18       MOV       ?V4,#0x18
   \   00005D   75..00       MOV       ?V5,#0x0
   \   000060   78..         MOV       R0,#?V4
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000065   7C00         MOV       R4,#0x0
   \   000067   7D00         MOV       R5,#0x0
   \   000069   7404         MOV       A,#0x4
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000071   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   000074   12....       LCALL     ?DEALLOC_XSTACK8
   2432          
   2433                // set new values of the key
   2434                osal_memcpy( pApsLinkKey->key, key, SEC_KEY_LEN );
   \   000077                ; Setup parameters for call to function osal_memcpy
   \   000077   8E..         MOV       ?V4,R6
   \   000079   8F..         MOV       ?V5,R7
   \   00007B   75..00       MOV       ?V6,#0x0
   \   00007E   78..         MOV       R0,#?V4
   \   000080   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000083   7C10         MOV       R4,#0x10
   \   000085   7D00         MOV       R5,#0x0
   \   000087   AA..         MOV       R2,?V2
   \   000089   AB..         MOV       R3,?V3
   \   00008B   12....       LCALL     ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   00008E   12....       LCALL     ?DEALLOC_XSTACK8
   2435                pApsLinkKey->rxFrmCntr = 0;
   \   000091   E5..         MOV       A,?V2
   \   000093   2414         ADD       A,#0x14
   \   000095   12....       LCALL     ?Subroutine28 & 0xFFFF
   2436                pApsLinkKey->txFrmCntr = 0;
   \                     ??CrossCallReturnLabel_225:
   \   000098   E5..         MOV       A,?V2
   \   00009A   2410         ADD       A,#0x10
   \   00009C   12....       LCALL     ?Subroutine28 & 0xFFFF
   2437          
   2438                osal_nv_write( entry->keyNvId, 0,
   2439                              sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   \                     ??CrossCallReturnLabel_226:
   \   00009F                ; Setup parameters for call to function osal_nv_write
   \   00009F   78..         MOV       R0,#?V2
   \   0000A1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A4   75..18       MOV       ?V4,#0x18
   \   0000A7   75..00       MOV       ?V5,#0x0
   \   0000AA   78..         MOV       R0,#?V4
   \   0000AC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AF   7C00         MOV       R4,#0x0
   \   0000B1   7D00         MOV       R5,#0x0
   \   0000B3   7404         MOV       A,#0x4
   \   0000B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B8   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000BB   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   0000BE   12....       LCALL     ?DEALLOC_XSTACK8
   2440          
   2441                // clear copy of key in RAM
   2442                osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   \   0000C1                ; Setup parameters for call to function osal_memset
   \   0000C1   12....       LCALL     ?Subroutine62 & 0xFFFF
   2443          
   2444                osal_mem_free(pApsLinkKey);
   \                     ??CrossCallReturnLabel_92:
   \   0000C4   85..82       MOV       DPL,?XSP + 0
   \   0000C7   85..83       MOV       DPH,?XSP + 1
   \   0000CA   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   0000CD   12....       LCALL     ??Subroutine107_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   0000D0   E8           MOV       A,R0
   \   0000D1   75..09       MOV       ?B,#0x9
   \   0000D4   A4           MUL       AB
   \   0000D5   F8           MOV       R0,A
   \   0000D6   AA..         MOV       R2,?B
   \   0000D8   75..09       MOV       ?B,#0x9
   \   0000DB   E9           MOV       A,R1
   \   0000DC   A4           MUL       AB
   \   0000DD   2A           ADD       A,R2
   \   0000DE   F9           MOV       R1,A
   \   0000DF   74..         MOV       A,#ApsLinkKeyFrmCntr & 0xff
   \   0000E1   28           ADD       A,R0
   \   0000E2   F8           MOV       R0,A
   \   0000E3   74..         MOV       A,#(ApsLinkKeyFrmCntr >> 8) & 0xff
   \   0000E5   39           ADDC      A,R1
   \   0000E6   F9           MOV       R1,A
   \   0000E7   E8           MOV       A,R0
   \   0000E8   24F7         ADD       A,#-0x9
   \   0000EA   F582         MOV       DPL,A
   \   0000EC   E9           MOV       A,R1
   \   0000ED   34ED         ADDC      A,#-0x13
   \   0000EF   12....       LCALL     ??Subroutine110_0 & 0xFFFF
   2445          
   2446                // set initial values for counters in RAM
   2447                ApsLinkKeyFrmCntr[entry->keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr = 0;
   2448                ApsLinkKeyFrmCntr[entry->keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr = 0;
   \                     ??CrossCallReturnLabel_222:
   \   0000F2   E8           MOV       A,R0
   \   0000F3   24FB         ADD       A,#-0x5
   \   0000F5   F582         MOV       DPL,A
   \   0000F7   E9           MOV       A,R1
   \   0000F8   34ED         ADDC      A,#-0x13
   \   0000FA   12....       LCALL     ??Subroutine110_0 & 0xFFFF
   2449              }
   2450            }
   2451          
   2452            return status;
   \                     ??CrossCallReturnLabel_223:
   \   0000FD   A9..         MOV       R1,?V0
   \   0000FF   7404         MOV       A,#0x4
   \   000101   02....       LJMP      ?Subroutine4 & 0xFFFF
   2453          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000003   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   7C18         MOV       R4,#0x18
   \   000002   7D00         MOV       R5,#0x0
   \   000004   7900         MOV       R1,#0x0
   \   000006   AA..         MOV       R2,?V2
   \   000008   AB..         MOV       R3,?V3
   \   00000A   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   00000D                ; Setup parameters for call to function osal_mem_free
   \   00000D                ; Setup parameters for call to function osal_mem_free
   \   00000D                ; Setup parameters for call to function osal_mem_free
   \   00000D   AA..         MOV       R2,?V2
   \   00000F   AB..         MOV       R3,?V3
   \   000011   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   7A18         MOV       R2,#0x18
   \   000002                REQUIRE ??Subroutine123_0
   \   000002                ; // Fall through to label ??Subroutine123_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine123_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   \   000009   EA           MOV       A,R2
   \   00000A   4B           ORL       A,R3
   \   00000B   22           RET
   2454          
   2455          /******************************************************************************
   2456           * @fn          ZDSecMgrAuthenticationSet
   2457           *
   2458           * @brief       Mark the specific device as authenticated or not
   2459           *
   2460           * @param       extAddr - [in] EXT address
   2461           * @param       option  - [in] authenticated or not
   2462           *
   2463           * @return      ZStatus_t
   2464           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2465          ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option )
   \                     ZDSecMgrAuthenticationSet:
   2466          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   2467            ZStatus_t        status;
   2468            ZDSecMgrEntry_t* entry;
   2469          
   2470          
   2471            // lookup entry index for specified EXT address
   2472            status = ZDSecMgrEntryLookupExt( extAddr, &entry );
   \   00000C                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   00000C   AC..         MOV       R4,?XSP + 0
   \   00000E   AD..         MOV       R5,?XSP + 1
   \   000010   12....       LCALL     `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   000013   E9           MOV       A,R1
   \   000014   F9           MOV       R1,A
   2473          
   2474            if ( status == ZSuccess )
   \   000015   7005         JNZ       ??ZDSecMgrAuthenticationSet_0
   2475            {
   2476              entry->authenticateOption = option;
   \   000017   12....       LCALL     ?Subroutine39 & 0xFFFF
   2477            }
   \                     ??CrossCallReturnLabel_52:
   \   00001A   EE           MOV       A,R6
   \   00001B   F0           MOVX      @DPTR,A
   2478          
   2479            return status;
   \                     ??ZDSecMgrAuthenticationSet_0:
   \   00001C   02....       LJMP      ?Subroutine7 & 0xFFFF
   2480          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   22           RET
   2481          
   2482          /******************************************************************************
   2483           * @fn          ZDSecMgrAuthenticationCheck
   2484           *
   2485           * @brief       Check if the specific device has been authenticated or not
   2486           *              For non-trust center device, always return TRUE
   2487           *
   2488           * @param       shortAddr - [in] short address
   2489           *
   2490           * @return      TRUE @ authenticated with CBKE
   2491           *              FALSE @ not authenticated
   2492           */
   2493          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2494          uint8 ZDSecMgrAuthenticationCheck( uint16 shortAddr )
   \                     ZDSecMgrAuthenticationCheck:
   2495          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2496          #if defined (TC_LINKKEY_JOIN)
   2497          
   2498            ZDSecMgrEntry_t* entry;
   2499            uint8 extAddr[Z_EXTADDR_LEN];
   2500          
   2501            // If the local device is not the trust center, always return TRUE
   2502            APSME_GetRequest( apsTrustCenterAddress, 0, extAddr );
   \   00000E                ; Setup parameters for call to function APSME_GetRequest
   \   00000E   7404         MOV       A,#0x4
   \   000010   12....       LCALL     ?XSTACK_DISP102_8
   \   000013   7A00         MOV       R2,#0x0
   \   000015   7B00         MOV       R3,#0x0
   \   000017   79AB         MOV       R1,#-0x55
   \   000019   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   2503            if ( ! osal_ExtAddrEqual( extAddr , NLME_GetExtAddr() ) )
   \   00001C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001C   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   00001F                ; Setup parameters for call to function sAddrExtCmp
   \   00001F   7404         MOV       A,#0x4
   \   000021   12....       LCALL     ?XSTACK_DISP101_8
   \   000024   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000027   E9           MOV       A,R1
   \   000028   603B         JZ        ??ZDSecMgrAuthenticationCheck_0
   2504            {
   2505              return TRUE;
   2506            }
   2507            // Otherwise, check the authentication option
   2508            else if ( AddrMgrExtAddrLookup( shortAddr, extAddr ) )
   \   00002A                ; Setup parameters for call to function AddrMgrExtAddrLookup
   \   00002A   7404         MOV       A,#0x4
   \   00002C   12....       LCALL     ?XSTACK_DISP102_8
   \   00002F   EE           MOV       A,R6
   \   000030   FA           MOV       R2,A
   \   000031   EF           MOV       A,R7
   \   000032   FB           MOV       R3,A
   \   000033   12....       LCALL     `??AddrMgrExtAddrLookup::?relay`; Banked call to: AddrMgrExtAddrLookup
   \   000036   E9           MOV       A,R1
   \   000037   6015         JZ        ??ZDSecMgrAuthenticationCheck_1
   2509            {
   2510              // lookup entry index for specified EXT address
   2511              if ( ZDSecMgrEntryLookupExt( extAddr, &entry ) == ZSuccess )
   \   000039                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   000039   AC..         MOV       R4,?XSP + 0
   \   00003B   AD..         MOV       R5,?XSP + 1
   \   00003D   7404         MOV       A,#0x4
   \   00003F   12....       LCALL     ?XSTACK_DISP101_8
   \   000042   12....       LCALL     `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   000045   E9           MOV       A,R1
   \   000046   700D         JNZ       ??ZDSecMgrAuthenticationCheck_2
   2512              {
   2513                if ( entry->authenticateOption != ZDSecMgr_Not_Authenticated )
   \   000048   12....       LCALL     ?Subroutine39 & 0xFFFF
   2514                {
   2515                  return TRUE;
   2516                }
   2517                else
   2518                {
   2519                  return FALSE;
   2520                }
   2521              }
   \                     ??CrossCallReturnLabel_53:
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   7017         JNZ       ??ZDSecMgrAuthenticationCheck_0
   2522              else
   2523              {
   2524                // it may have been secured with TCLK only
   2525                uint16    ami;
   2526          
   2527                // lookup address index in address manager
   2528                if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
   2529                {
   2530                  return TRUE;
   2531                }
   2532              }
   2533            }
   2534            return FALSE;
   \                     ??ZDSecMgrAuthenticationCheck_1:
   \   00004E   7900         MOV       R1,#0x0
   \                     ??ZDSecMgrAuthenticationCheck_3:
   \   000050   740C         MOV       A,#0xc
   \   000052   02....       LJMP      ??Subroutine116_0 & 0xFFFF
   \                     ??ZDSecMgrAuthenticationCheck_2:
   \   000055                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   000055   7402         MOV       A,#0x2
   \   000057   12....       LCALL     ?XSTACK_DISP102_8
   \   00005A   7404         MOV       A,#0x4
   \   00005C   12....       LCALL     ?XSTACK_DISP101_8
   \   00005F   12....       LCALL     `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   000062   E9           MOV       A,R1
   \   000063   70E9         JNZ       ??ZDSecMgrAuthenticationCheck_1
   \                     ??ZDSecMgrAuthenticationCheck_0:
   \   000065   7901         MOV       R1,#0x1
   \   000067   80E7         SJMP      ??ZDSecMgrAuthenticationCheck_3
   2535          
   2536          #else
   2537            (void)shortAddr;  // Intentionally unreferenced parameter
   2538          
   2539            // For non AMI/SE Profile, perform no check and always return TRUE.
   2540            return TRUE;
   2541          
   2542          #endif // TC_LINKKEY_JOIN
   2543          }
   2544          
   2545          
   2546          /******************************************************************************
   2547           * @fn          ZDSecMgrLinkKeyNVIdGet (stubs APSME_LinkKeyNVIdGet)
   2548           *
   2549           * @brief       Get Key NV ID for specified NWK address.
   2550           *
   2551           * @param       extAddr - [in] EXT address
   2552           * @param       keyNvId - [out] NV ID
   2553           *
   2554           * @return      ZStatus_t
   2555           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2556          ZStatus_t ZDSecMgrLinkKeyNVIdGet(uint8* extAddr, uint16 *pKeyNvId)
   \                     APSME_LinkKeyNVIdGet:
   2557          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
   2558            ZStatus_t status;
   2559            ZDSecMgrEntry_t* entry;
   2560          
   2561            // lookup entry index for specified NWK address
   2562            status = ZDSecMgrEntryLookupExt( extAddr, &entry );
   \   00000E                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   00000E   AC..         MOV       R4,?XSP + 0
   \   000010   AD..         MOV       R5,?XSP + 1
   \   000012   12....       LCALL     `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   000015   E9           MOV       A,R1
   \   000016   F9           MOV       R1,A
   2563          
   2564            if ( status == ZSuccess )
   \   000017   7013         JNZ       ??APSME_LinkKeyNVIdGet_0
   2565            {
   2566              // return the index to the NV table
   2567              *pKeyNvId = entry->keyNvId;
   \   000019   85..82       MOV       DPL,?XSP + 0
   \   00001C   85..83       MOV       DPH,?XSP + 1
   \   00001F   12....       LCALL     ?Subroutine30 & 0xFFFF
   2568            }
   \                     ??CrossCallReturnLabel_35:
   \   000022   8E82         MOV       DPL,R6
   \   000024   8F83         MOV       DPH,R7
   \   000026   EA           MOV       A,R2
   \   000027   F0           MOVX      @DPTR,A
   \   000028   A3           INC       DPTR
   \   000029   EB           MOV       A,R3
   \   00002A   8007         SJMP      ??APSME_LinkKeyNVIdGet_1
   2569            else
   2570            {
   2571              *pKeyNvId = SEC_NO_KEY_NV_ID;
   \                     ??APSME_LinkKeyNVIdGet_0:
   \   00002C   8E82         MOV       DPL,R6
   \   00002E   8F83         MOV       DPH,R7
   \   000030   E4           CLR       A
   \   000031   F0           MOVX      @DPTR,A
   \   000032   A3           INC       DPTR
   \                     ??APSME_LinkKeyNVIdGet_1:
   \   000033   F0           MOVX      @DPTR,A
   2572            }
   2573          
   2574            return status;
   \   000034   02....       LJMP      ?Subroutine7 & 0xFFFF
   2575          }
   2576          
   2577          /******************************************************************************
   2578           * @fn          ZDSecMgrIsLinkKeyValid (stubs APSME_IsLinkKeyValid)
   2579           *
   2580           * @brief       Verifies if Link Key in NV has been set.
   2581           *
   2582           * @param       extAddr - [in] EXT address
   2583           *
   2584           * @return      TRUE - Link Key has been established
   2585           *              FALSE - Link Key in NV has default value.
   2586           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine109_0
   \   000006                ; // Fall through to label ??Subroutine109_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2587          uint8 ZDSecMgrIsLinkKeyValid(uint8* extAddr)
   \                     APSME_IsLinkKeyValid:
   2588          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV       A,#-0x12
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2589            APSME_LinkKeyData_t *pKeyData;
   2590            uint16 apsLinkKeyNvId;
   2591            uint8 nullKey[SEC_KEY_LEN];
   2592            uint8 status = FALSE;
   \   00000E   75..00       MOV       ?V0,#0x0
   2593          
   2594            // initialize default vealue to compare to
   2595            osal_memset(nullKey, 0x00, SEC_KEY_LEN);
   \   000011                ; Setup parameters for call to function osal_memset
   \   000011   7C10         MOV       R4,#0x10
   \   000013   7D00         MOV       R5,#0x0
   \   000015   7900         MOV       R1,#0x0
   \   000017   7402         MOV       A,#0x2
   \   000019   12....       LCALL     ?XSTACK_DISP101_8
   \   00001C   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2596          
   2597            // check for APS link NV ID
   2598            APSME_LinkKeyNVIdGet( extAddr, &apsLinkKeyNvId );
   \   00001F                ; Setup parameters for call to function APSME_LinkKeyNVIdGet
   \   00001F   AC..         MOV       R4,?XSP + 0
   \   000021   AD..         MOV       R5,?XSP + 1
   \   000023   EE           MOV       A,R6
   \   000024   FA           MOV       R2,A
   \   000025   EF           MOV       A,R7
   \   000026   FB           MOV       R3,A
   \   000027   12....       LCALL     `??APSME_LinkKeyNVIdGet::?relay`; Banked call to: APSME_LinkKeyNVIdGet
   2599          
   2600            if (apsLinkKeyNvId != SEC_NO_KEY_NV_ID )
   \   00002A   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   00002D   6059         JZ        ??CrossCallReturnLabel_93
   2601            {
   2602              pKeyData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   00002F                ; Setup parameters for call to function osal_mem_alloc
   \   00002F   12....       LCALL     ?Subroutine50 & 0xFFFF
   2603          
   2604              if (pKeyData != NULL)
   \                     ??CrossCallReturnLabel_279:
   \   000032   6054         JZ        ??CrossCallReturnLabel_93
   2605              {
   2606                // retrieve key from NV
   2607                if ( osal_nv_read( apsLinkKeyNvId, 0,
   2608                                  sizeof(APSME_LinkKeyData_t), pKeyData) == ZSUCCESS)
   \   000034                ; Setup parameters for call to function osal_nv_read
   \   000034   78..         MOV       R0,#?V2
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000039   75..18       MOV       ?V4,#0x18
   \   00003C   75..00       MOV       ?V5,#0x0
   \   00003F   78..         MOV       R0,#?V4
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000044   7C00         MOV       R4,#0x0
   \   000046   7D00         MOV       R5,#0x0
   \   000048   7404         MOV       A,#0x4
   \   00004A   12....       LCALL     ?XSTACK_DISP0_8
   \   00004D   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000050   12....       LCALL     ?DEALLOC_XSTACK8
   \   000053   E9           MOV       A,R1
   \   000054   702F         JNZ       ??APSME_IsLinkKeyValid_0
   2609                {
   2610                  // if stored key is different than default value, then a key has been established
   2611                  if (!osal_memcmp(pKeyData, nullKey, SEC_KEY_LEN))
   \   000056                ; Setup parameters for call to function osal_memcmp
   \   000056   7402         MOV       A,#0x2
   \   000058   12....       LCALL     ?XSTACK_DISP100_8
   \   00005B   88..         MOV       ?V4,R0
   \   00005D   89..         MOV       ?V5,R1
   \   00005F   75..00       MOV       ?V6,#0x0
   \   000062   78..         MOV       R0,#?V4
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000067   7C10         MOV       R4,#0x10
   \   000069   7D00         MOV       R5,#0x0
   \   00006B   85..82       MOV       DPL,?V2
   \   00006E   85..83       MOV       DPH,?V3
   \   000071   A982         MOV       R1,DPL
   \   000073   AA83         MOV       R2,DPH
   \   000075   7B00         MOV       R3,#0x0
   \   000077   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00007A   7403         MOV       A,#0x3
   \   00007C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007F   E9           MOV       A,R1
   \   000080   7003         JNZ       ??APSME_IsLinkKeyValid_0
   2612                  {
   2613                    status = TRUE;
   \   000082   75..01       MOV       ?V0,#0x1
   2614                  }
   2615                }
   2616          
   2617                // clear copy of key in RAM
   2618                osal_memset(pKeyData, 0x00, sizeof(APSME_LinkKeyData_t));
   \                     ??APSME_IsLinkKeyValid_0:
   \   000085                ; Setup parameters for call to function osal_memset
   \   000085   12....       LCALL     ?Subroutine62 & 0xFFFF
   2619          
   2620                osal_mem_free(pKeyData);
   2621              }
   2622            }
   2623          
   2624            return status;
   \                     ??CrossCallReturnLabel_93:
   \   000088   A9..         MOV       R1,?V0
   \   00008A   7412         MOV       A,#0x12
   \   00008C                REQUIRE ?Subroutine4
   \   00008C                ; // Fall through to label ?Subroutine4
   2625          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL     ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000003   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000006   7404         MOV       A,#0x4
   \   000008   22           RET
   2626          
   2627          /******************************************************************************
   2628           * @fn          ZDSecMgrKeyFwdToChild (stubs APSME_KeyFwdToChild)
   2629           *
   2630           * @brief       Verify and process key transportation to child.
   2631           *
   2632           * @param       ind - [in] APSME_TransportKeyInd_t
   2633           *
   2634           * @return      uint8 - success(TRUE:FALSE)
   2635           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2636          uint8 ZDSecMgrKeyFwdToChild( APSME_TransportKeyInd_t* ind )
   \                     APSME_KeyFwdToChild:
   2637          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2638            // verify from Trust Center
   2639            if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   12....       LCALL     ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   00000C   702A         JNZ       ??APSME_KeyFwdToChild_0
   2640            {
   2641              // check for initial NWK key
   2642              if ( ( ind->keyType == KEY_TYPE_NWK ) ||
   2643                   ( ind->keyType == 6            ) )
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   6401         XRL       A,#0x1
   \   000017   600B         JZ        ??APSME_KeyFwdToChild_1
   \   000019   8A82         MOV       DPL,R2
   \   00001B   8B83         MOV       DPH,R3
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6406         XRL       A,#0x6
   \   000022   7010         JNZ       ??APSME_KeyFwdToChild_2
   2644              {
   2645                // set association status to authenticated
   2646                ZDSecMgrAssocDeviceAuth( AssocGetWithExt( ind->dstExtAddr ) );
   \                     ??APSME_KeyFwdToChild_1:
   \   000024                ; Setup parameters for call to function AssocGetWithExt
   \   000024   8A82         MOV       DPL,R2
   \   000026   8B83         MOV       DPH,R3
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   12....       LCALL     ?Subroutine46 & 0xFFFF
   2647              }
   \                     ??CrossCallReturnLabel_69:
   \   000031                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   000031   12....       LCALL     `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   2648          
   2649              return TRUE;
   \                     ??APSME_KeyFwdToChild_2:
   \   000034   7901         MOV       R1,#0x1
   \   000036   8002         SJMP      ??APSME_KeyFwdToChild_3
   2650            }
   2651          
   2652            return FALSE;
   \                     ??APSME_KeyFwdToChild_0:
   \   000038   7900         MOV       R1,#0x0
   \                     ??APSME_KeyFwdToChild_3:
   \   00003A   02....       LJMP      ??Subroutine117_0 & 0xFFFF
   2653          }
   2654          
   2655          /******************************************************************************
   2656           * @fn          ZDSecMgrAddLinkKey
   2657           *
   2658           * @brief       Add the application link key to ZDSecMgr. Also mark the device
   2659           *              as authenticated in the authenticateOption. Note that this function
   2660           *              is hardwared to CBKE right now.
   2661           *
   2662           * @param       shortAddr - short address of the partner device
   2663           * @param       extAddr - extended address of the partner device
   2664           * @param       key - link key
   2665           *
   2666           * @return      ZStatus_t
   2667           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2668          ZStatus_t ZDSecMgrAddLinkKey( uint16 shortAddr, uint8 *extAddr, uint8 *key)
   \                     ZDSecMgrAddLinkKey:
   2669          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
   2670            uint16           ami;
   2671            ZDSecMgrEntry_t* entry;
   2672          
   2673            /* Store the device address in the addr manager */
   2674            if( ZDSecMgrAddrStore( shortAddr, extAddr, &ami ) != ZSuccess )
   \   00000E                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   00000E   7402         MOV       A,#0x2
   \   000010   12....       LCALL     ?XSTACK_DISP100_8
   \   000013   88..         MOV       ?V0,R0
   \   000015   89..         MOV       ?V1,R1
   \   000017   78..         MOV       R0,#?V0
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001C   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   00001F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000022   E9           MOV       A,R1
   \   000023   6004         JZ        ??ZDSecMgrAddLinkKey_0
   2675            {
   2676              /* Adding to Addr Manager fails */
   2677              return ZFailure;
   \   000025   7901         MOV       R1,#0x1
   \   000027   8046         SJMP      ??ZDSecMgrAddLinkKey_1
   2678            }
   2679          
   2680            /* Lookup entry using specified address index */
   2681            ZDSecMgrEntryLookupAMI( ami, &entry );
   \                     ??ZDSecMgrAddLinkKey_0:
   \   000029                ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
   \   000029   AC..         MOV       R4,?XSP + 0
   \   00002B   AD..         MOV       R5,?XSP + 1
   \   00002D   7402         MOV       A,#0x2
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   12....       LCALL     ?Subroutine36 & 0xFFFF
   2682          
   2683            // If no existing entry, create one
   2684            if ( entry == NULL )
   \                     ??CrossCallReturnLabel_49:
   \   000035   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000038   7018         JNZ       ??CrossCallReturnLabel_251
   2685            {
   2686              if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
   \   00003A                ; Setup parameters for call to function ZDSecMgrEntryNew
   \   00003A   AA..         MOV       R2,?XSP + 0
   \   00003C   AB..         MOV       R3,?XSP + 1
   \   00003E   12....       LCALL     `??ZDSecMgrEntryNew::?relay`; Banked call to: ZDSecMgrEntryNew
   \   000041   E9           MOV       A,R1
   \   000042   7030         JNZ       ??ZDSecMgrAddLinkKey_2
   2687              {
   2688                entry->ami = ami;
   \   000044   7402         MOV       A,#0x2
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   12....       LCALL     ?Subroutine32 & 0xFFFF
   2689              }
   \                     ??CrossCallReturnLabel_40:
   \   00004C   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00004F   12....       LCALL     ??Subroutine113_0 & 0xFFFF
   2690              else
   2691              {
   2692                /* Security Manager full */
   2693                return ZBufferFull;
   2694              }
   2695            }
   2696            // Write the link key
   2697            APSME_LinkKeySet( extAddr, key );
   \                     ??CrossCallReturnLabel_251:
   \   000052                ; Setup parameters for call to function APSME_LinkKeySet
   \   000052   740E         MOV       A,#0xe
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   00005A   EE           MOV       A,R6
   \   00005B   FA           MOV       R2,A
   \   00005C   EF           MOV       A,R7
   \   00005D   FB           MOV       R3,A
   \   00005E   12....       LCALL     `??APSME_LinkKeySet::?relay`; Banked call to: APSME_LinkKeySet
   2698          
   2699          #if defined (TC_LINKKEY_JOIN)
   2700            // Mark the device as authenticated.
   2701            ZDSecMgrAuthenticationSet( extAddr, ZDSecMgr_Authenticated_CBCK );
   \   000061                ; Setup parameters for call to function ZDSecMgrAuthenticationSet
   \   000061   7901         MOV       R1,#0x1
   \   000063   EE           MOV       A,R6
   \   000064   FA           MOV       R2,A
   \   000065   EF           MOV       A,R7
   \   000066   FB           MOV       R3,A
   \   000067   12....       LCALL     `??ZDSecMgrAuthenticationSet::?relay`; Banked call to: ZDSecMgrAuthenticationSet
   2702          #endif
   2703          
   2704          #if defined NV_RESTORE
   2705            ZDSecMgrWriteNV();  // Write the new established link key to NV.
   \   00006A                ; Setup parameters for call to function ZDSecMgrWriteNV
   \   00006A   12....       LCALL     `??ZDSecMgrWriteNV::?relay`; Banked call to: ZDSecMgrWriteNV
   2706          #endif
   2707          
   2708            return ZSuccess;
   \   00006D   7900         MOV       R1,#0x0
   \                     ??ZDSecMgrAddLinkKey_1:
   \   00006F   7404         MOV       A,#0x4
   \   000071   02....       LJMP      ??Subroutine116_0 & 0xFFFF
   \                     ??ZDSecMgrAddLinkKey_2:
   \   000074   7911         MOV       R1,#0x11
   \   000076   80F7         SJMP      ??ZDSecMgrAddLinkKey_1
   2709          }
   2710          
   2711          /******************************************************************************
   2712           * @fn          ZDSecMgrInitNV
   2713           *
   2714           * @brief       Initialize the SecMgr entry data in NV with all values set to 0
   2715           *
   2716           * @param       none
   2717           *
   2718           * @return      uint8 - <osal_nv_item_init> return codes
   2719           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2720          uint8 ZDSecMgrInitNV(void)
   \                     ZDSecMgrInitNV:
   2721          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2722          
   2723            uint8 rtrn = osal_nv_item_init(ZCD_NV_APS_LINK_KEY_TABLE,
   2724                          (sizeof(nvDeviceListHdr_t) + (sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)), NULL);
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   E4           CLR       A
   \   00000B   F5..         MOV       ?V0,A
   \   00000D   F5..         MOV       ?V1,A
   \   00000F   78..         MOV       R0,#?V0
   \   000011   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000014   7C11         MOV       R4,#0x11
   \   000016   7D00         MOV       R5,#0x0
   \   000018   7A4C         MOV       R2,#0x4c
   \   00001A   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_346:
   \   00001D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000020   E9           MOV       A,R1
   \   000021   FE           MOV       R6,A
   2725          
   2726            // If the item does not already exist, set all values to 0
   2727            if (rtrn == NV_ITEM_UNINIT)
   \   000022   7409         MOV       A,#0x9
   \   000024   6E           XRL       A,R6
   \   000025   7017         JNZ       ??ZDSecMgrInitNV_0
   2728            {
   2729              nvDeviceListHdr_t hdr;
   2730              hdr.numRecs = 0;
   \   000027   12....       LCALL     ?Subroutine15 & 0xFFFF
   2731              osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
   2732            }
   \                     ??CrossCallReturnLabel_8:
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   75..02       MOV       ?V0,#0x2
   \   000030   75..00       MOV       ?V1,#0x0
   \   000033   78..         MOV       R0,#?V0
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   00003B   12....       LCALL     ?DEALLOC_XSTACK8
   2733          
   2734            rtrn |= osal_nv_item_init( ZCD_NV_TRUSTCENTER_ADDR, Z_EXTADDR_LEN,
   2735                                       zgApsTrustCenterAddr );
   2736          
   2737            return rtrn;
   \                     ??ZDSecMgrInitNV_0:
   \   00003E                ; Setup parameters for call to function osal_nv_item_init
   \   00003E   75....       MOV       ?V0,#zgApsTrustCenterAddr & 0xff
   \   000041   75....       MOV       ?V1,#(zgApsTrustCenterAddr >> 8) & 0xff
   \   000044   78..         MOV       R0,#?V0
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000049   7C08         MOV       R4,#0x8
   \   00004B   7D00         MOV       R5,#0x0
   \   00004D   7A71         MOV       R2,#0x71
   \   00004F   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   000052   12....       LCALL     ?DEALLOC_XSTACK8
   \   000055   E9           MOV       A,R1
   \   000056   4E           ORL       A,R6
   \   000057   F9           MOV       R1,A
   \   000058   7402         MOV       A,#0x2
   \   00005A   02....       LJMP      ??Subroutine116_0 & 0xFFFF
   2738          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E4           CLR       A
   \   000007   F0           MOVX      @DPTR,A
   \   000008   A3           INC       DPTR
   \   000009   F0           MOVX      @DPTR,A
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A   A8..         MOV       R0,?XSP + 0
   \   00000C   A9..         MOV       R1,?XSP + 1
   \   00000E   88..         MOV       ?V0,R0
   \   000010   89..         MOV       ?V1,R1
   \   000012   78..         MOV       R0,#?V0
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine133_0
   \   000002                ; // Fall through to label ??Subroutine133_0
   2739          
   2740          #if defined ( NV_RESTORE )
   2741          /*********************************************************************
   2742           * @fn      ZDSecMgrWriteNV()
   2743           *
   2744           * @brief   Save off the APS link key list to NV
   2745           *
   2746           * @param   none
   2747           *
   2748           * @return  none
   2749           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2750          static void ZDSecMgrWriteNV( void )
   \                     ZDSecMgrWriteNV:
   2751          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2752            uint16 i;
   2753            nvDeviceListHdr_t hdr;
   2754          
   2755            hdr.numRecs = 0;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   12....       LCALL     ?Subroutine10 & 0xFFFF
   2756          
   2757            if (ZDSecMgrEntries != NULL)
   \                     ??CrossCallReturnLabel_3:
   \   000013   606C         JZ        ??ZDSecMgrWriteNV_0
   2758            {
   2759              for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   000015   7E00         MOV       R6,#0x0
   \   000017   7F00         MOV       R7,#0x0
   2760              {
   2761                // Save off the record
   2762                osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
   2763                              (uint16)((sizeof(nvDeviceListHdr_t)) + (i * sizeof(ZDSecMgrEntry_t))),
   2764                              sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[i] );
   \                     ??ZDSecMgrWriteNV_1:
   \   000019   8E..         MOV       ?V0,R6
   \   00001B   8F..         MOV       ?V1,R7
   \   00001D   E5..         MOV       A,?V0
   \   00001F   75..05       MOV       ?B,#0x5
   \   000022   A4           MUL       AB
   \   000023   F5..         MOV       ?V0,A
   \   000025   A8..         MOV       R0,?B
   \   000027   75..05       MOV       ?B,#0x5
   \   00002A   E5..         MOV       A,?V1
   \   00002C   A4           MUL       AB
   \   00002D   28           ADD       A,R0
   \   00002E   F5..         MOV       ?V1,A
   \   000030                ; Setup parameters for call to function osal_nv_write
   \   000030   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000033   E0           MOVX      A,@DPTR
   \   000034   25..         ADD       A,?V0
   \   000036   F5..         MOV       ?V2,A
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   35..         ADDC      A,?V1
   \   00003C   F5..         MOV       ?V3,A
   \   00003E   78..         MOV       R0,#?V2
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000043   75..05       MOV       ?V2,#0x5
   \   000046   75..00       MOV       ?V3,#0x0
   \   000049   78..         MOV       R0,#?V2
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000051   12....       LCALL     ?DEALLOC_XSTACK8
   2765          
   2766                if ( ZDSecMgrEntries[i].ami != INVALID_NODE_ADDR )
   \   000054   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000057   E0           MOVX      A,@DPTR
   \   000058   25..         ADD       A,?V0
   \   00005A   F8           MOV       R0,A
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   35..         ADDC      A,?V1
   \   00005F   8882         MOV       DPL,R0
   \   000061   F583         MOV       DPH,A
   \   000063   E0           MOVX      A,@DPTR
   \   000064   64FE         XRL       A,#0xfe
   \   000066   7003         JNZ       ??ZDSecMgrWriteNV_2
   \   000068   A3           INC       DPTR
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   F4           CPL       A
   \                     ??ZDSecMgrWriteNV_2:
   \   00006B   600A         JZ        ??ZDSecMgrWriteNV_3
   2767                {
   2768                  hdr.numRecs++;
   \   00006D   85..82       MOV       DPL,?XSP + 0
   \   000070   85..83       MOV       DPH,?XSP + 1
   \   000073   12....       LCALL     ?Subroutine48 & 0xFFFF
   2769                }
   2770              }
   \                     ??CrossCallReturnLabel_71:
   \   000076   F0           MOVX      @DPTR,A
   \                     ??ZDSecMgrWriteNV_3:
   \   000077   0E           INC       R6
   \   000078   EE           MOV       A,R6
   \   000079   7001         JNZ       ??ZDSecMgrWriteNV_4
   \   00007B   0F           INC       R7
   \                     ??ZDSecMgrWriteNV_4:
   \   00007C   12....       LCALL     ?Subroutine57 & 0xFFFF
   2771            }
   \                     ??CrossCallReturnLabel_84:
   \   00007F   4098         JC        ??ZDSecMgrWriteNV_1
   2772          
   2773            // Save off the header
   2774            osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
   \                     ??ZDSecMgrWriteNV_0:
   \   000081                ; Setup parameters for call to function osal_nv_write
   \   000081   A8..         MOV       R0,?XSP + 0
   \   000083   A9..         MOV       R1,?XSP + 1
   \   000085   88..         MOV       ?V0,R0
   \   000087   89..         MOV       ?V1,R1
   \   000089   78..         MOV       R0,#?V0
   \   00008B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008E   75..02       MOV       ?V0,#0x2
   \   000091   75..00       MOV       ?V1,#0x0
   \   000094   78..         MOV       R0,#?V0
   \   000096   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000099   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   00009C   12....       LCALL     ?DEALLOC_XSTACK8
   2775          }
   \   00009F   7402         MOV       A,#0x2
   \   0000A1   02....       LJMP      ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   C3           CLR       C
   \   000001   9403         SUBB      A,#0x3
   \   000003   EF           MOV       A,R7
   \   000004   9400         SUBB      A,#0x0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   EE           MOV       A,R6
   \   000001   F8           MOV       R0,A
   \   000002   EF           MOV       A,R7
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   75..05       MOV       ?B,#0x5
   \   000008   A4           MUL       AB
   \   000009   F8           MOV       R0,A
   \   00000A   AA..         MOV       R2,?B
   \   00000C   75..05       MOV       ?B,#0x5
   \   00000F   E9           MOV       A,R1
   \   000010   A4           MUL       AB
   \   000011   2A           ADD       A,R2
   \   000012   F9           MOV       R1,A
   \   000013   E8           MOV       A,R0
   \   000014   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000017   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00001A   7404         MOV       A,#0x4
   \   00001C   22           RET
   2776          #endif // NV_RESTORE
   2777          
   2778          #if defined ( NV_RESTORE )
   2779          /******************************************************************************
   2780           * @fn          ZDSecMgrRestoreFromNV
   2781           *
   2782           * @brief       Restore the APS Link Key entry data from NV. It does not restore
   2783           *              the key data itself as they remain in NV until they are used.
   2784           *              Only list data is restored.
   2785           *              Restore zgTrustCenterAdress from NV.
   2786           *
   2787           * @param       none
   2788           *
   2789           * @return      None.
   2790           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2791          static void ZDSecMgrRestoreFromNV( void )
   \                     ZDSecMgrRestoreFromNV:
   2792          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2793            nvDeviceListHdr_t hdr;
   2794            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   2795          
   2796            if ((osal_nv_read(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr) == ZSUCCESS) &&
   2797                ((hdr.numRecs > 0) && (hdr.numRecs <= ZDSECMGR_ENTRY_MAX)))
   \   00000A                ; Setup parameters for call to function osal_nv_read
   \   00000A   A8..         MOV       R0,?XSP + 0
   \   00000C   A9..         MOV       R1,?XSP + 1
   \   00000E   88..         MOV       ?V0,R0
   \   000010   89..         MOV       ?V1,R1
   \   000012   78..         MOV       R0,#?V0
   \   000014   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000017   75..02       MOV       ?V0,#0x2
   \   00001A   75..00       MOV       ?V1,#0x0
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000022   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_336:
   \   000025   12....       LCALL     ?DEALLOC_XSTACK8
   \   000028   E9           MOV       A,R1
   \   000029   6003         JZ        $+5
   \   00002B   02....       LJMP      ??ZDSecMgrRestoreFromNV_0 & 0xFFFF
   \   00002E   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000031   7003         JNZ       $+5
   \   000033   02....       LJMP      ??ZDSecMgrRestoreFromNV_0 & 0xFFFF
   \   000036   85..82       MOV       DPL,?XSP + 0
   \   000039   85..83       MOV       DPH,?XSP + 1
   \   00003C   C3           CLR       C
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   9404         SUBB      A,#0x4
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   9400         SUBB      A,#0x0
   \   000044   4003         JC        $+5
   \   000046   02....       LJMP      ??ZDSecMgrRestoreFromNV_0 & 0xFFFF
   2798            {
   2799              uint8 x;
   2800          
   2801              pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   000049                ; Setup parameters for call to function osal_mem_alloc
   \   000049   7A18         MOV       R2,#0x18
   \   00004B   7B00         MOV       R3,#0x0
   \   00004D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000050   8A..         MOV       ?V2,R2
   \   000052   8B..         MOV       ?V3,R3
   2802          
   2803              for (x = 0; x < ZDSECMGR_ENTRY_MAX; x++)
   \   000054   75..00       MOV       ?V0,#0x0
   2804              {
   2805                if ( osal_nv_read( ZCD_NV_APS_LINK_KEY_TABLE,
   2806                                  (uint16)(sizeof(nvDeviceListHdr_t) + (x * sizeof(ZDSecMgrEntry_t))),
   2807                                  sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[x] ) == SUCCESS )
   \                     ??ZDSecMgrRestoreFromNV_1:
   \   000057                ; Setup parameters for call to function osal_nv_read
   \   000057   E5..         MOV       A,?V0
   \   000059   75..05       MOV       ?B,#0x5
   \   00005C   A4           MUL       AB
   \   00005D   F8           MOV       R0,A
   \   00005E   A9..         MOV       R1,?B
   \   000060   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000063   E0           MOVX      A,@DPTR
   \   000064   28           ADD       A,R0
   \   000065   F5..         MOV       ?V4,A
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   39           ADDC      A,R1
   \   00006A   F5..         MOV       ?V5,A
   \   00006C   78..         MOV       R0,#?V4
   \   00006E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000071   75..05       MOV       ?V4,#0x5
   \   000074   75..00       MOV       ?V5,#0x0
   \   000077   78..         MOV       R0,#?V4
   \   000079   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007C   E5..         MOV       A,?V0
   \   00007E   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000081   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_340:
   \   000084   12....       LCALL     ?DEALLOC_XSTACK8
   \   000087   E9           MOV       A,R1
   \   000088   6003         JZ        $+5
   \   00008A   02....       LJMP      ??ZDSecMgrRestoreFromNV_2 & 0xFFFF
   2808                {
   2809                  // update data only for valid entries
   2810                  if ( ZDSecMgrEntries[x].ami != INVALID_NODE_ADDR )
   \   00008D   E5..         MOV       A,?V0
   \   00008F   75..05       MOV       ?B,#0x5
   \   000092   A4           MUL       AB
   \   000093   F8           MOV       R0,A
   \   000094   A9..         MOV       R1,?B
   \   000096   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   64FE         XRL       A,#0xfe
   \   00009C   7003         JNZ       ??ZDSecMgrRestoreFromNV_3
   \   00009E   A3           INC       DPTR
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   F4           CPL       A
   \                     ??ZDSecMgrRestoreFromNV_3:
   \   0000A1   7003         JNZ       $+5
   \   0000A3   02....       LJMP      ??ZDSecMgrRestoreFromNV_2 & 0xFFFF
   2811                  {
   2812                    if (pApsLinkKey != NULL)
   \   0000A6   E5..         MOV       A,?V2
   \   0000A8   45..         ORL       A,?V3
   \   0000AA   7003         JNZ       $+5
   \   0000AC   02....       LJMP      ??ZDSecMgrRestoreFromNV_2 & 0xFFFF
   2813                    {
   2814                      // read the key form NV, keyNvId must be ZCD_NV_APS_LINK_KEY_DATA_START based
   2815                      osal_nv_read( ZDSecMgrEntries[x].keyNvId, 0,
   2816                                   sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   \   0000AF   E5..         MOV       A,?V0
   \   0000B1   75..05       MOV       ?B,#0x5
   \   0000B4   A4           MUL       AB
   \   0000B5   FE           MOV       R6,A
   \   0000B6   E9           MOV       A,R1
   \   0000B7   FF           MOV       R7,A
   \   0000B8                ; Setup parameters for call to function osal_nv_read
   \   0000B8   78..         MOV       R0,#?V2
   \   0000BA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BD   75..18       MOV       ?V4,#0x18
   \   0000C0   78..         MOV       R0,#?V4
   \   0000C2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C5   7C00         MOV       R4,#0x0
   \   0000C7   7D00         MOV       R5,#0x0
   \   0000C9   90....       MOV       DPTR,#ZDSecMgrEntries
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   2E           ADD       A,R6
   \   0000CE   A3           INC       DPTR
   \   0000CF   E0           MOVX      A,@DPTR
   \   0000D0   3F           ADDC      A,R7
   \   0000D1   8A82         MOV       DPL,R2
   \   0000D3   F583         MOV       DPH,A
   \   0000D5   A3           INC       DPTR
   \   0000D6   A3           INC       DPTR
   \   0000D7   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0000DA   12....       LCALL     ?DEALLOC_XSTACK8
   2817          
   2818                      // set new values for the counter
   2819                      pApsLinkKey->txFrmCntr += ( MAX_APS_FRAMECOUNTER_CHANGES + 1 );
   \   0000DD   E5..         MOV       A,?V2
   \   0000DF   2410         ADD       A,#0x10
   \   0000E1   F8           MOV       R0,A
   \   0000E2   E4           CLR       A
   \   0000E3   35..         ADDC      A,?V3
   \   0000E5   F9           MOV       R1,A
   \   0000E6   E8           MOV       A,R0
   \   0000E7   FA           MOV       R2,A
   \   0000E8   E9           MOV       A,R1
   \   0000E9   FB           MOV       R3,A
   \   0000EA   90....       MOV       DPTR,#__Constant_3e9
   \   0000ED   78..         MOV       R0,#?V4
   \   0000EF   12....       LCALL     ?L_MOV_X
   \   0000F2   8A82         MOV       DPL,R2
   \   0000F4   8983         MOV       DPH,R1
   \   0000F6   78..         MOV       R0,#?V4
   \   0000F8   12....       LCALL     ?L_ADD_TO_X
   \   0000FB   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000FE   A3           INC       DPTR
   \   0000FF   A3           INC       DPTR
   \   000100   E0           MOVX      A,@DPTR
   \   000101   FE           MOV       R6,A
   \   000102   A3           INC       DPTR
   \   000103   E0           MOVX      A,@DPTR
   \   000104   FF           MOV       R7,A
   \   000105   EE           MOV       A,R6
   \   000106   75..09       MOV       ?B,#0x9
   \   000109   A4           MUL       AB
   \   00010A   F8           MOV       R0,A
   \   00010B   AC..         MOV       R4,?B
   \   00010D   75..09       MOV       ?B,#0x9
   \   000110   EF           MOV       A,R7
   \   000111   A4           MUL       AB
   \   000112   2C           ADD       A,R4
   \   000113   F9           MOV       R1,A
   \   000114   74..         MOV       A,#ApsLinkKeyFrmCntr & 0xff
   \   000116   28           ADD       A,R0
   \   000117   FC           MOV       R4,A
   \   000118   74..         MOV       A,#(ApsLinkKeyFrmCntr >> 8) & 0xff
   \   00011A   39           ADDC      A,R1
   \   00011B   FD           MOV       R5,A
   \   00011C   8A82         MOV       DPL,R2
   \   00011E   8B83         MOV       DPH,R3
   \   000120   12....       LCALL     ?XLOAD_R0123
   \   000123   EC           MOV       A,R4
   \   000124   24F7         ADD       A,#-0x9
   \   000126   F582         MOV       DPL,A
   \   000128   ED           MOV       A,R5
   \   000129   34ED         ADDC      A,#-0x13
   \   00012B   F583         MOV       DPH,A
   \   00012D   12....       LCALL     ?XSTORE_R0123
   2820          
   2821                      // restore values for counters in RAM
   2822                      ApsLinkKeyFrmCntr[ZDSecMgrEntries[x].keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr =
   2823                                                      pApsLinkKey->txFrmCntr;
   2824          
   2825                      ApsLinkKeyFrmCntr[ZDSecMgrEntries[x].keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr =
   2826                                                      pApsLinkKey->rxFrmCntr;
   \   000130   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000133   12....       LCALL     ?XLOAD_R0123
   \   000136   EC           MOV       A,R4
   \   000137   24FB         ADD       A,#-0x5
   \   000139   F582         MOV       DPL,A
   \   00013B   ED           MOV       A,R5
   \   00013C   34ED         ADDC      A,#-0x13
   \   00013E   F583         MOV       DPH,A
   \   000140   12....       LCALL     ?XSTORE_R0123
   2827          
   2828                      osal_nv_write( ZDSecMgrEntries[x].keyNvId, 0,
   2829                                    sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   \   000143                ; Setup parameters for call to function osal_nv_write
   \   000143   78..         MOV       R0,#?V2
   \   000145   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000148   75..18       MOV       ?V4,#0x18
   \   00014B   75..00       MOV       ?V5,#0x0
   \   00014E   78..         MOV       R0,#?V4
   \   000150   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000153   7C00         MOV       R4,#0x0
   \   000155   7D00         MOV       R5,#0x0
   \   000157   EE           MOV       A,R6
   \   000158   FA           MOV       R2,A
   \   000159   EF           MOV       A,R7
   \   00015A   FB           MOV       R3,A
   \   00015B   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   00015E   12....       LCALL     ?DEALLOC_XSTACK8
   2830          
   2831                      // clear copy of key in RAM
   2832                      osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   \   000161                ; Setup parameters for call to function osal_memset
   \   000161   7C18         MOV       R4,#0x18
   \   000163   7D00         MOV       R5,#0x0
   \   000165   7900         MOV       R1,#0x0
   \   000167   AA..         MOV       R2,?V2
   \   000169   AB..         MOV       R3,?V3
   \   00016B   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2833                    }
   2834                  }
   2835                }
   2836              }
   \                     ??ZDSecMgrRestoreFromNV_2:
   \   00016E   05..         INC       ?V0
   \   000170   E5..         MOV       A,?V0
   \   000172   C3           CLR       C
   \   000173   9403         SUBB      A,#0x3
   \   000175   5003         JNC       $+5
   \   000177   02....       LJMP      ??ZDSecMgrRestoreFromNV_1 & 0xFFFF
   2837          
   2838              if (pApsLinkKey != NULL)
   \   00017A   E5..         MOV       A,?V2
   \   00017C   45..         ORL       A,?V3
   \   00017E   6007         JZ        ??ZDSecMgrRestoreFromNV_0
   2839              {
   2840                osal_mem_free(pApsLinkKey);
   \   000180                ; Setup parameters for call to function osal_mem_free
   \   000180   AA..         MOV       R2,?V2
   \   000182   AB..         MOV       R3,?V3
   \   000184   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2841              }
   2842            }
   2843          
   2844            osal_nv_read( ZCD_NV_TRUSTCENTER_ADDR, 0, Z_EXTADDR_LEN, zgApsTrustCenterAddr );
   \                     ??ZDSecMgrRestoreFromNV_0:
   \   000187                ; Setup parameters for call to function osal_nv_read
   \   000187   75....       MOV       ?V0,#zgApsTrustCenterAddr & 0xff
   \   00018A   75....       MOV       ?V1,#(zgApsTrustCenterAddr >> 8) & 0xff
   \   00018D   78..         MOV       R0,#?V0
   \   00018F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000192   75..08       MOV       ?V0,#0x8
   \   000195   75..00       MOV       ?V1,#0x0
   \   000198   78..         MOV       R0,#?V0
   \   00019A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00019D   7C00         MOV       R4,#0x0
   \   00019F   7D00         MOV       R5,#0x0
   \   0001A1   7A71         MOV       R2,#0x71
   \   0001A3   12....       LCALL     ??Subroutine131_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   0001A6   12....       LCALL     ?DEALLOC_XSTACK8
   2845          }
   \   0001A9   7402         MOV       A,#0x2
   \   0001AB   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   E5..         MOV       A,?V2
   \   000002   2414         ADD       A,#0x14
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V3
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET
   2846          #endif // NV_RESTORE
   2847          
   2848          /*********************************************************************
   2849           * @fn          ZDSecMgrSetDefaultNV
   2850           *
   2851           * @brief       Write the defaults to NV for Entry table and for APS key data table
   2852           *
   2853           * @param       none
   2854           *
   2855           * @return      none
   2856           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2857          void ZDSecMgrSetDefaultNV( void )
   \                     ZDSecMgrSetDefaultNV:
   2858          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV       A,#-0x7
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2859            uint16 i;
   2860            nvDeviceListHdr_t hdr;
   2861            ZDSecMgrEntry_t secMgrEntry;
   2862            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   2863          
   2864            // Initialize the header
   2865            hdr.numRecs = 0;
   \   00000A   12....       LCALL     ?Subroutine15 & 0xFFFF
   2866          
   2867            // clear the header
   2868            osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
   \                     ??CrossCallReturnLabel_9:
   \   00000D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000010   75..02       MOV       ?V0,#0x2
   \   000013   75..00       MOV       ?V1,#0x0
   \   000016   78..         MOV       R0,#?V0
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001B   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   00001E   12....       LCALL     ?DEALLOC_XSTACK8
   2869          
   2870            osal_memset( &secMgrEntry, 0x00, sizeof(ZDSecMgrEntry_t) );
   \   000021                ; Setup parameters for call to function osal_memset
   \   000021   7C05         MOV       R4,#0x5
   \   000023   7D00         MOV       R5,#0x0
   \   000025   7900         MOV       R1,#0x0
   \   000027   7402         MOV       A,#0x2
   \   000029   12....       LCALL     ?XSTACK_DISP101_8
   \   00002C   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2871          
   2872            for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   00002F   7E00         MOV       R6,#0x0
   \   000031   7F00         MOV       R7,#0x0
   2873            {
   2874              // Clear the record
   2875              osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
   2876                          (uint16)((sizeof(nvDeviceListHdr_t)) + (i * sizeof(ZDSecMgrEntry_t))),
   2877                                  sizeof(ZDSecMgrEntry_t), &secMgrEntry );
   \                     ??ZDSecMgrSetDefaultNV_0:
   \   000033                ; Setup parameters for call to function osal_nv_write
   \   000033   7402         MOV       A,#0x2
   \   000035   12....       LCALL     ?XSTACK_DISP100_8
   \   000038   88..         MOV       ?V0,R0
   \   00003A   89..         MOV       ?V1,R1
   \   00003C   78..         MOV       R0,#?V0
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000041   75..05       MOV       ?V0,#0x5
   \   000044   75..00       MOV       ?V1,#0x0
   \   000047   78..         MOV       R0,#?V0
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004C   12....       LCALL     ?Subroutine52 & 0xFFFF
   2878            }
   \                     ??CrossCallReturnLabel_77:
   \   00004F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000052   0E           INC       R6
   \   000053   EE           MOV       A,R6
   \   000054   7001         JNZ       ??ZDSecMgrSetDefaultNV_1
   \   000056   0F           INC       R7
   \                     ??ZDSecMgrSetDefaultNV_1:
   \   000057   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   00005A   40D7         JC        ??ZDSecMgrSetDefaultNV_0
   2879          
   2880            pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   00005C                ; Setup parameters for call to function osal_mem_alloc
   \   00005C   7A18         MOV       R2,#0x18
   \   00005E   7B00         MOV       R3,#0x0
   \   000060   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000063   8A..         MOV       ?V0,R2
   \   000065   8B..         MOV       ?V1,R3
   2881          
   2882            if (pApsLinkKey != NULL)
   \   000067   EA           MOV       A,R2
   \   000068   4B           ORL       A,R3
   \   000069   6037         JZ        ??ZDSecMgrSetDefaultNV_2
   2883            {
   2884              osal_memset( pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   00006B                ; Setup parameters for call to function osal_memset
   \   00006B   7C18         MOV       R4,#0x18
   \   00006D   7D00         MOV       R5,#0x0
   \   00006F   7900         MOV       R1,#0x0
   \   000071   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2885          
   2886              for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   000074   7E00         MOV       R6,#0x0
   \   000076   7F00         MOV       R7,#0x0
   2887              {
   2888                // Clear the record
   2889                osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
   2890                              sizeof(APSME_LinkKeyData_t), pApsLinkKey);
   \                     ??ZDSecMgrSetDefaultNV_3:
   \   000078                ; Setup parameters for call to function osal_nv_write
   \   000078   78..         MOV       R0,#?V0
   \   00007A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007D   75..18       MOV       ?V2,#0x18
   \   000080   75..00       MOV       ?V3,#0x0
   \   000083   78..         MOV       R0,#?V2
   \   000085   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000088   12....       LCALL     ?Subroutine67 & 0xFFFF
   2891              }
   \                     ??CrossCallReturnLabel_99:
   \   00008B   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   00008E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000091   0E           INC       R6
   \   000092   EE           MOV       A,R6
   \   000093   7001         JNZ       ??ZDSecMgrSetDefaultNV_4
   \   000095   0F           INC       R7
   \                     ??ZDSecMgrSetDefaultNV_4:
   \   000096   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000099   40DD         JC        ??ZDSecMgrSetDefaultNV_3
   2892          
   2893              osal_mem_free(pApsLinkKey);
   \   00009B                ; Setup parameters for call to function osal_mem_free
   \   00009B   AA..         MOV       R2,?V0
   \   00009D   AB..         MOV       R3,?V1
   \   00009F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2894            }
   2895          }
   \                     ??ZDSecMgrSetDefaultNV_2:
   \   0000A2   7407         MOV       A,#0x7
   \   0000A4   02....       LJMP      ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   7C00         MOV       R4,#0x0
   \   000002   7D00         MOV       R5,#0x0
   \   000004   EE           MOV       A,R6
   \   000005   2401         ADD       A,#0x1
   \   000007   FA           MOV       R2,A
   \   000008   EF           MOV       A,R7
   \   000009   3402         ADDC      A,#0x2
   \   00000B   FB           MOV       R3,A
   \   00000C   22           RET
   2896          
   2897          #if defined ( NV_RESTORE )
   2898          /*********************************************************************
   2899           * @fn      ZDSecMgrUpdateNV()
   2900           *
   2901           * @brief   Updates one entry of the APS link key table to NV
   2902           *
   2903           * @param   index - to the entry in security manager table
   2904           *
   2905           * @return  none
   2906           */
   2907          static void ZDSecMgrUpdateNV( uint16 index )
   2908          {
   2909            nvDeviceListHdr_t hdr;
   2910          
   2911            if (ZDSecMgrEntries != NULL)
   2912            {
   2913              // Save off the record
   2914              osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
   2915                             (uint16)((sizeof(nvDeviceListHdr_t)) + (index * sizeof(ZDSecMgrEntry_t))),
   2916                             sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[index] );
   2917            }
   2918          
   2919            if (osal_nv_read(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr) == ZSUCCESS)
   2920            {
   2921              if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
   2922              {
   2923                if (hdr.numRecs > 0)
   2924                {
   2925                  hdr.numRecs--;
   2926                }
   2927              }
   2928              else
   2929              {
   2930                hdr.numRecs++;
   2931              }
   2932          
   2933              // Save off the header
   2934              osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
   2935            }
   2936          }
   2937          #endif // NV_RESTORE
   2938          
   2939          /******************************************************************************
   2940           * @fn          ZDSecMgrAPSRemove
   2941           *
   2942           * @brief       Remove device from network.
   2943           *
   2944           * @param       nwkAddr - device's NWK address
   2945           * @param       extAddr - device's Extended address
   2946           * @param       parentAddr - parent's NWK address
   2947           *
   2948           * @return      ZStatus_t
   2949           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2950          ZStatus_t ZDSecMgrAPSRemove( uint16 nwkAddr, uint8 *extAddr, uint16 parentAddr )
   \                     ZDSecMgrAPSRemove:
   2951          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 8
   \   000004   74F8         MOV       A,#-0x8
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   2952            ZDSecMgrDevice_t device;
   2953          
   2954            if ( ( nwkAddr == INVALID_NODE_ADDR ) ||
   2955                 ( extAddr == NULL )              ||
   2956                 ( parentAddr == INVALID_NODE_ADDR ) )
   \   000009   74FE         MOV       A,#-0x2
   \   00000B   6A           XRL       A,R2
   \   00000C   7003         JNZ       ??ZDSecMgrAPSRemove_0
   \   00000E   74FF         MOV       A,#-0x1
   \   000010   6B           XRL       A,R3
   \                     ??ZDSecMgrAPSRemove_0:
   \   000011   6016         JZ        ??ZDSecMgrAPSRemove_1
   \   000013   EC           MOV       A,R4
   \   000014   4D           ORL       A,R5
   \   000015   6012         JZ        ??ZDSecMgrAPSRemove_1
   \   000017   7408         MOV       A,#0x8
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   00001F   74FE         MOV       A,#-0x2
   \   000021   68           XRL       A,R0
   \   000022   7003         JNZ       ??ZDSecMgrAPSRemove_2
   \   000024   74FF         MOV       A,#-0x1
   \   000026   69           XRL       A,R1
   \                     ??ZDSecMgrAPSRemove_2:
   \   000027   7004         JNZ       ??ZDSecMgrAPSRemove_3
   2957            {
   2958              return ( ZFailure );
   \                     ??ZDSecMgrAPSRemove_1:
   \   000029   7901         MOV       R1,#0x1
   \   00002B   8017         SJMP      ??ZDSecMgrAPSRemove_4
   2959            }
   2960          
   2961            device.nwkAddr = nwkAddr;
   \                     ??ZDSecMgrAPSRemove_3:
   \   00002D   12....       LCALL     ?Subroutine20 & 0xFFFF
   2962            device.extAddr = extAddr;
   \                     ??CrossCallReturnLabel_263:
   \   000030   7402         MOV       A,#0x2
   \   000032   12....       LCALL     ?XSTACK_DISP0_8
   \   000035   EC           MOV       A,R4
   \   000036   F0           MOVX      @DPTR,A
   \   000037   A3           INC       DPTR
   \   000038   ED           MOV       A,R5
   \   000039   F0           MOVX      @DPTR,A
   2963            device.parentAddr = parentAddr;
   \   00003A   7404         MOV       A,#0x4
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   12....       LCALL     ?Subroutine18 & 0xFFFF
   2964          
   2965            // remove device
   2966            ZDSecMgrDeviceRemove( &device );
   2967          
   2968            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_17:
   \   000042   7900         MOV       R1,#0x0
   \                     ??ZDSecMgrAPSRemove_4:
   \   000044   7408         MOV       A,#0x8
   \   000046   02....       LJMP      ?Subroutine9 & 0xFFFF
   2969          }
   2970          
   2971          /******************************************************************************
   2972           * @fn          APSME_TCLinkKeyInit
   2973           *
   2974           * @brief       Initialize the NV table for preconfigured TC link key
   2975           *
   2976           *              When zgUseDefaultTCL is set to TRUE, the default preconfig
   2977           *              Trust Center Link Key is written to NV. A single tclk is used
   2978           *              by all devices joining the network.
   2979           *
   2980           * @param       setDefault - TRUE to set default values
   2981           *
   2982           * @return      none
   2983           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2984          void APSME_TCLinkKeyInit(uint8 setDefault)
   \                     APSME_TCLinkKeyInit:
   2985          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV       A,#-0x13
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   2986            APSME_TCLKDevEntry_t TCLKDevEntry;
   2987            uint8                rtrn;
   2988            uint16               i;
   2989            
   2990            // Clear the data for the keys
   2991            osal_memset( &TCLKDevEntry, 0x00, sizeof(APSME_TCLKDevEntry_t) );
   \   00000C                ; Setup parameters for call to function osal_memset
   \   00000C   7C13         MOV       R4,#0x13
   \   00000E   7D00         MOV       R5,#0x0
   \   000010   7900         MOV       R1,#0x0
   \   000012   AA..         MOV       R2,?XSP + 0
   \   000014   AB..         MOV       R3,?XSP + 1
   \   000016   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2992            TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
   \   000019   7410         MOV       A,#0x10
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   74FF         MOV       A,#-0x1
   \   000020   F0           MOVX      @DPTR,A
   2993            
   2994            // Initialize all NV items
   2995            for( i = 0; i < gZDSECMGR_TC_DEVICE_MAX; i++ )
   \   000021   7E00         MOV       R6,#0x0
   \   000023   7F00         MOV       R7,#0x0
   2996            {
   2997              // If the item doesn't exist in NV memory, create and initialize
   2998              // it with the default value passed in, either defaultTCLK or 0
   2999              rtrn = osal_nv_item_init( (ZCD_NV_TCLK_TABLE_START + i),
   3000                                         sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry);
   3001          
   3002              if (rtrn == SUCCESS)
   \                     ??APSME_TCLinkKeyInit_0:
   \   000025                ; Setup parameters for call to function osal_nv_item_init
   \   000025   A8..         MOV       R0,?XSP + 0
   \   000027   A9..         MOV       R1,?XSP + 1
   \   000029   88..         MOV       ?V2,R0
   \   00002B   89..         MOV       ?V3,R1
   \   00002D   78..         MOV       R0,#?V2
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000032   7C13         MOV       R4,#0x13
   \   000034   12....       LCALL     ??Subroutine134_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   000037   12....       LCALL     ??Subroutine133_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   00003A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003D   E9           MOV       A,R1
   \   00003E   6003         JZ        $+5
   \   000040   02....       LJMP      ??APSME_TCLinkKeyInit_1 & 0xFFFF
   3003              {
   3004                if(setDefault)
   \   000043   E5..         MOV       A,?V0
   \   000045   6032         JZ        ??APSME_TCLinkKeyInit_2
   3005                {
   3006                  //Force to initialize the entry
   3007                  osal_nv_write(ZCD_NV_TCLK_TABLE_START + i, 0, sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry);
   \   000047                ; Setup parameters for call to function osal_nv_write
   \   000047   78..         MOV       R0,#?V2
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004C   75..13       MOV       ?V2,#0x13
   \   00004F   75..00       MOV       ?V3,#0x0
   \   000052   78..         MOV       R0,#?V2
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000057   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_356:
   \   00005A   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_326:
   \   00005D   12....       LCALL     ?DEALLOC_XSTACK8
   3008                  TCLinkKeyFrmCntr[i].txFrmCntr = 0;
   \   000060   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000063   8C82         MOV       DPL,R4
   \   000065   12....       LCALL     ??Subroutine110_0 & 0xFFFF
   3009                  TCLinkKeyFrmCntr[i].rxFrmCntr = 0;
   \                     ??CrossCallReturnLabel_224:
   \   000068   8C82         MOV       DPL,R4
   \   00006A   8D83         MOV       DPH,R5
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   F0           MOVX      @DPTR,A
   \   000071   A3           INC       DPTR
   \   000072   F0           MOVX      @DPTR,A
   \   000073   A3           INC       DPTR
   \   000074   F0           MOVX      @DPTR,A
   \   000075   A3           INC       DPTR
   \   000076   02....       LJMP      ??APSME_TCLinkKeyInit_3 & 0xFFFF
   3010                }
   3011                else
   3012                {
   3013                  // set the Frame counters to 0 to existing keys in NV
   3014                  osal_nv_read( ( ZCD_NV_TCLK_TABLE_START + i), 0,
   3015                                 sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
   \                     ??APSME_TCLinkKeyInit_2:
   \   000079   EE           MOV       A,R6
   \   00007A   2411         ADD       A,#0x11
   \   00007C   F5..         MOV       ?V2,A
   \   00007E   EF           MOV       A,R7
   \   00007F   3401         ADDC      A,#0x1
   \   000081   F5..         MOV       ?V3,A
   \   000083                ; Setup parameters for call to function osal_nv_read
   \   000083   A8..         MOV       R0,?XSP + 0
   \   000085   A9..         MOV       R1,?XSP + 1
   \   000087   88..         MOV       ?V4,R0
   \   000089   89..         MOV       ?V5,R1
   \   00008B   78..         MOV       R0,#?V4
   \   00008D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000090   75..13       MOV       ?V4,#0x13
   \   000093   75..00       MOV       ?V5,#0x0
   \   000096   78..         MOV       R0,#?V4
   \   000098   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009B   7C00         MOV       R4,#0x0
   \   00009D   7D00         MOV       R5,#0x0
   \   00009F   AA..         MOV       R2,?V2
   \   0000A1   AB..         MOV       R3,?V3
   \   0000A3   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   0000A6   12....       LCALL     ?DEALLOC_XSTACK8
   3016          
   3017                  // increase the value stored in NV
   3018                  TCLKDevEntry.txFrmCntr += ( MAX_TCLK_FRAMECOUNTER_CHANGES + 1 );
   \   0000A9   90....       MOV       DPTR,#__Constant_b
   \   0000AC   78..         MOV       R0,#?V4
   \   0000AE   12....       LCALL     ?L_MOV_X
   \   0000B1   85..82       MOV       DPL,?XSP + 0
   \   0000B4   85..83       MOV       DPH,?XSP + 1
   \   0000B7   78..         MOV       R0,#?V4
   \   0000B9   12....       LCALL     ?L_ADD_TO_X
   3019          
   3020                  osal_nv_write( ( ZCD_NV_TCLK_TABLE_START + i), 0,
   3021                                  sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
   \   0000BC                ; Setup parameters for call to function osal_nv_write
   \   0000BC   A8..         MOV       R0,?XSP + 0
   \   0000BE   A9..         MOV       R1,?XSP + 1
   \   0000C0   88..         MOV       ?V4,R0
   \   0000C2   89..         MOV       ?V5,R1
   \   0000C4   78..         MOV       R0,#?V4
   \   0000C6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C9   75..13       MOV       ?V4,#0x13
   \   0000CC   75..00       MOV       ?V5,#0x0
   \   0000CF   78..         MOV       R0,#?V4
   \   0000D1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D4   7C00         MOV       R4,#0x0
   \   0000D6   7D00         MOV       R5,#0x0
   \   0000D8   AA..         MOV       R2,?V2
   \   0000DA   AB..         MOV       R3,?V3
   \   0000DC   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_327:
   \   0000DF   12....       LCALL     ?DEALLOC_XSTACK8
   3022          
   3023                  // set initial values for counters in RAM
   3024                  TCLinkKeyFrmCntr[i].txFrmCntr = TCLKDevEntry.txFrmCntr;
   \   0000E2   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0000E5   85..82       MOV       DPL,?XSP + 0
   \   0000E8   85..83       MOV       DPH,?XSP + 1
   \   0000EB   12....       LCALL     ?XLOAD_R0123
   \   0000EE   8C82         MOV       DPL,R4
   \   0000F0   8D83         MOV       DPH,R5
   \   0000F2   12....       LCALL     ?XSTORE_R0123
   3025                  TCLinkKeyFrmCntr[i].rxFrmCntr = TCLKDevEntry.rxFrmCntr;
   \   0000F5   7404         MOV       A,#0x4
   \   0000F7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FA   12....       LCALL     ?XLOAD_R0123
   \   0000FD   8C82         MOV       DPL,R4
   \   0000FF   8D83         MOV       DPH,R5
   \   000101   A3           INC       DPTR
   \   000102   A3           INC       DPTR
   \   000103   A3           INC       DPTR
   \   000104   A3           INC       DPTR
   \   000105   12....       LCALL     ?XSTORE_R0123
   3026                  
   3027                  // Making sure data is cleared and set to default for every key all the time
   3028                  osal_memset( &TCLKDevEntry, 0x00, sizeof(APSME_TCLKDevEntry_t) );
   \   000108                ; Setup parameters for call to function osal_memset
   \   000108   7C13         MOV       R4,#0x13
   \   00010A   7D00         MOV       R5,#0x0
   \   00010C   7900         MOV       R1,#0x0
   \   00010E   AA..         MOV       R2,?XSP + 0
   \   000110   AB..         MOV       R3,?XSP + 1
   \   000112   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3029                  TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
   \   000115   7410         MOV       A,#0x10
   \   000117   12....       LCALL     ?XSTACK_DISP0_8
   \   00011A   74FF         MOV       A,#-0x1
   \                     ??APSME_TCLinkKeyInit_3:
   \   00011C   F0           MOVX      @DPTR,A
   3030                }
   3031              }
   3032            }
   \                     ??APSME_TCLinkKeyInit_1:
   \   00011D   0E           INC       R6
   \   00011E   EE           MOV       A,R6
   \   00011F   7001         JNZ       ??APSME_TCLinkKeyInit_4
   \   000121   0F           INC       R7
   \                     ??APSME_TCLinkKeyInit_4:
   \   000122   C3           CLR       C
   \   000123   941E         SUBB      A,#0x1e
   \   000125   EF           MOV       A,R7
   \   000126   9400         SUBB      A,#0x0
   \   000128   5003         JNC       $+5
   \   00012A   02....       LJMP      ??APSME_TCLinkKeyInit_0 & 0xFFFF
   3033          
   3034            if(setDefault)
   \   00012D   E5..         MOV       A,?V0
   \   00012F   6007         JZ        ??APSME_TCLinkKeyInit_5
   3035            {
   3036              //Force to erase all IC
   3037              APSME_EraseICEntry(NULL);
   \   000131                ; Setup parameters for call to function APSME_EraseICEntry
   \   000131   7A00         MOV       R2,#0x0
   \   000133   7B00         MOV       R3,#0x0
   \   000135   12....       LCALL     `??APSME_EraseICEntry::?relay`; Banked call to: APSME_EraseICEntry
   3038            }
   3039          }
   \                     ??APSME_TCLinkKeyInit_5:
   \   000138   7413         MOV       A,#0x13
   \   00013A                REQUIRE ?Subroutine1
   \   00013A                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   EE           MOV       A,R6
   \   000001   F8           MOV       R0,A
   \   000002   EF           MOV       A,R7
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   75..09       MOV       ?B,#0x9
   \   000008   A4           MUL       AB
   \   000009   F8           MOV       R0,A
   \   00000A   AA..         MOV       R2,?B
   \   00000C   75..09       MOV       ?B,#0x9
   \   00000F   E9           MOV       A,R1
   \   000010   A4           MUL       AB
   \   000011   2A           ADD       A,R2
   \   000012   F9           MOV       R1,A
   \   000013   74..         MOV       A,#TCLinkKeyFrmCntr & 0xff
   \   000015   28           ADD       A,R0
   \   000016   FC           MOV       R4,A
   \   000017   74..         MOV       A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   000019   39           ADDC      A,R1
   \   00001A   FD           MOV       R5,A
   \   00001B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   7C00         MOV       R4,#0x0
   \   000002                REQUIRE ??Subroutine134_0
   \   000002                ; // Fall through to label ??Subroutine134_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine134_0:
   \   000000   7D00         MOV       R5,#0x0
   \   000002   EE           MOV       A,R6
   \   000003   2411         ADD       A,#0x11
   \   000005   FA           MOV       R2,A
   \   000006   EF           MOV       A,R7
   \   000007   3401         ADDC      A,#0x1
   \   000009   FB           MOV       R3,A
   \   00000A   22           RET
   3040          
   3041          
   3042          /******************************************************************************
   3043           * @fn          APSME_TCLinkKeySync
   3044           *
   3045           * @brief       Sync Trust Center LINK key data.
   3046           *
   3047           * @param       srcAddr - [in] srcAddr
   3048           * @param       si      - [in, out] SSP_Info_t
   3049           *
   3050           * @return      ZStatus_t
   3051           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3052          ZStatus_t APSME_TCLinkKeySync( uint16 srcAddr, SSP_Info_t* si )
   \                     APSME_TCLinkKeySync:
   3053          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 28
   \   000005   74E4         MOV       A,#-0x1c
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   3054            APSME_TCLKDevEntry_t  TCLKDevEntry;
   3055            ZStatus_t             status = ZSecNoKey;
   \   000012   75..A1       MOV       ?V0,#-0x5f
   3056            uint32                *tclkRxFrmCntr;
   3057            uint16                entryIndex = 0xFFFF;
   3058            uint16                selectedId = gZDSECMGR_TC_DEVICE_MAX;
   3059            uint8                 entryFound = FALSE;
   \   000015   85..82       MOV       DPL,?XSP + 0
   \   000018   85..83       MOV       DPH,?XSP + 1
   \   00001B   E4           CLR       A
   \   00001C   F0           MOVX      @DPTR,A
   3060            
   3061          #if ZG_BUILD_JOINING_TYPE
   3062            uint8   defaultEntry[Z_EXTADDR_LEN];
   3063          #endif
   3064           
   3065            // Look up the IEEE address of the trust center if it's available
   3066            if ( AddrMgrExtAddrValid( si->extAddr ) == FALSE )
   \   00001D                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   00001D   EC           MOV       A,R4
   \   00001E   2406         ADD       A,#0x6
   \   000020   FA           MOV       R2,A
   \   000021   E4           CLR       A
   \   000022   3F           ADDC      A,R7
   \   000023   FB           MOV       R3,A
   \   000024   12....       LCALL     `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   000027   E9           MOV       A,R1
   \   000028   700E         JNZ       ??APSME_TCLinkKeySync_0
   3067            {
   3068              APSME_LookupExtAddr( srcAddr, si->extAddr );
   \   00002A                ; Setup parameters for call to function APSME_LookupExtAddr
   \   00002A   EE           MOV       A,R6
   \   00002B   2406         ADD       A,#0x6
   \   00002D   FC           MOV       R4,A
   \   00002E   E4           CLR       A
   \   00002F   3F           ADDC      A,R7
   \   000030   FD           MOV       R5,A
   \   000031   AA..         MOV       R2,?V2
   \   000033   AB..         MOV       R3,?V3
   \   000035   12....       LCALL     `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
   3069            }
   3070          
   3071            entryIndex = APSME_SearchTCLinkKeyEntry(si->extAddr,&entryFound,&TCLKDevEntry);
   \                     ??APSME_TCLinkKeySync_0:
   \   000038                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   000038   7409         MOV       A,#0x9
   \   00003A   12....       LCALL     ?XSTACK_DISP100_8
   \   00003D   88..         MOV       ?V2,R0
   \   00003F   89..         MOV       ?V3,R1
   \   000041   78..         MOV       R0,#?V2
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000046   7402         MOV       A,#0x2
   \   000048   12....       LCALL     ?XSTACK_DISP102_8
   \   00004B   EE           MOV       A,R6
   \   00004C   2406         ADD       A,#0x6
   \   00004E   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   000051   12....       LCALL     ?DEALLOC_XSTACK8
   \   000054   8A..         MOV       ?V2,R2
   \   000056   8B..         MOV       ?V3,R3
   \   000058   A8..         MOV       R0,?V2
   \   00005A   A9..         MOV       R1,?V3
   3072            
   3073          #if ZG_BUILD_JOINING_TYPE
   3074            if(ZG_DEVICE_JOINING_TYPE && !entryFound)
   \   00005C   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   6401         XRL       A,#0x1
   \   000062   6005         JZ        ??APSME_TCLinkKeySync_1
   \   000064   E0           MOVX      A,@DPTR
   \   000065   6402         XRL       A,#0x2
   \   000067   703D         JNZ       ??APSME_TCLinkKeySync_2
   \                     ??APSME_TCLinkKeySync_1:
   \   000069   85..82       MOV       DPL,?XSP + 0
   \   00006C   85..83       MOV       DPH,?XSP + 1
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   7034         JNZ       ??APSME_TCLinkKeySync_2
   3075            {
   3076              osal_memset(defaultEntry, 0, Z_EXTADDR_LEN);
   \   000072                ; Setup parameters for call to function osal_memset
   \   000072   7C08         MOV       R4,#0x8
   \   000074   7D00         MOV       R5,#0x0
   \   000076   7900         MOV       R1,#0x0
   \   000078   7401         MOV       A,#0x1
   \   00007A   12....       LCALL     ?XSTACK_DISP101_8
   \   00007D   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3077              entryIndex = APSME_SearchTCLinkKeyEntry(defaultEntry,&entryFound,&TCLKDevEntry);
   \   000080                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   000080   7409         MOV       A,#0x9
   \   000082   12....       LCALL     ?XSTACK_DISP100_8
   \   000085   88..         MOV       ?V2,R0
   \   000087   89..         MOV       ?V3,R1
   \   000089   78..         MOV       R0,#?V2
   \   00008B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008E   7402         MOV       A,#0x2
   \   000090   12....       LCALL     ?XSTACK_DISP102_8
   \   000093   7403         MOV       A,#0x3
   \   000095   12....       LCALL     ?XSTACK_DISP101_8
   \   000098   12....       LCALL     ??Subroutine126_0 & 0xFFFF
   3078            }
   \                     ??CrossCallReturnLabel_294:
   \   00009B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009E   8A..         MOV       ?V2,R2
   \   0000A0   8B..         MOV       ?V3,R3
   \   0000A2   A8..         MOV       R0,?V2
   \   0000A4   A9..         MOV       R1,?V3
   3079          #endif
   3080            
   3081            if(entryFound)
   \                     ??APSME_TCLinkKeySync_2:
   \   0000A6   85..82       MOV       DPL,?XSP + 0
   \   0000A9   85..83       MOV       DPH,?XSP + 1
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   7003         JNZ       $+5
   \   0000AF   02....       LJMP      ??APSME_TCLinkKeySync_3 & 0xFFFF
   3082            {
   3083              status = ZSuccess;
   \   0000B2   75..00       MOV       ?V0,#0x0
   3084              
   3085              selectedId = entryIndex - ZCD_NV_TCLK_TABLE_START;
   3086          
   3087              switch(TCLKDevEntry.keyAttributes)
   \   0000B5   7419         MOV       A,#0x19
   \   0000B7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BA   E0           MOVX      A,@DPTR
   \   0000BB   603D         JZ        ??APSME_TCLinkKeySync_4
   \   0000BD   14           DEC       A
   \   0000BE   600E         JZ        ??APSME_TCLinkKeySync_5
   \   0000C0   14           DEC       A
   \   0000C1   606A         JZ        ??APSME_TCLinkKeySync_6
   \   0000C3   2405         ADD       A,#0x5
   \   0000C5   6066         JZ        ??APSME_TCLinkKeySync_6
   \   0000C7   24FE         ADD       A,#-0x2
   \   0000C9   6016         JZ        ??APSME_TCLinkKeySync_7
   \   0000CB   02....       LJMP      ??APSME_TCLinkKeySync_8 & 0xFFFF
   3088              {
   3089                case ZG_UNVERIFIED_KEY:
   3090                  #if ZG_BUILD_JOINING_TYPE
   3091                  if(ZG_DEVICE_JOINING_TYPE)
   \                     ??APSME_TCLinkKeySync_5:
   \   0000CE   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   6401         XRL       A,#0x1
   \   0000D4   7003         JNZ       $+5
   \   0000D6   02....       LJMP      ??APSME_TCLinkKeySync_9 & 0xFFFF
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   6402         XRL       A,#0x2
   \   0000DC   700B         JNZ       ??APSME_TCLinkKeySync_10
   \   0000DE   02....       LJMP      ??APSME_TCLinkKeySync_9 & 0xFFFF
   3092                  {   
   3093                    si->keyNvId = ZCD_NV_TCLK_JOIN_DEV;
   3094                    break;
   3095                  }
   3096                  #endif
   3097                case ZG_DEFAULT_KEY:
   3098                  if(ZG_DEVICE_JOINING_TYPE)
   \                     ??APSME_TCLinkKeySync_7:
   \   0000E1   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   6401         XRL       A,#0x1
   \   0000E7   6005         JZ        ??APSME_TCLinkKeySync_11
   \                     ??APSME_TCLinkKeySync_10:
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   6402         XRL       A,#0x2
   \   0000EC   7006         JNZ       ??CrossCallReturnLabel_296
   3099                  { 
   3100                    //If default was found, then it is joining as FN, then try distributed key as well
   3101                    si->distributedKeyTry = TRUE;
   \                     ??APSME_TCLinkKeySync_11:
   \   0000EE   EE           MOV       A,R6
   \   0000EF   2420         ADD       A,#0x20
   \   0000F1   12....       LCALL     ?Subroutine59 & 0xFFFF
   3102                  }
   3103                  si->keyNvId = ZCD_NV_TCLK_DEFAULT;
   \                     ??CrossCallReturnLabel_296:
   \   0000F4   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   0000F7   02....       LJMP      ??APSME_TCLinkKeySync_12 & 0xFFFF
   3104                break;
   3105                case ZG_PROVISIONAL_KEY:
   3106                  si->keyNvId = ZCD_NV_TCLK_IC_TABLE_START + TCLKDevEntry.SeedShift_IcIndex;
   \                     ??APSME_TCLinkKeySync_4:
   \   0000FA   741B         MOV       A,#0x1b
   \   0000FC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FF   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000102   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000105   12....       LCALL     ??Subroutine113_0 & 0xFFFF
   3107                  //Attempt to use default keys (centralized and distributed) if IC fails?
   3108                  si->distributedKeyTry = gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY;
   \                     ??CrossCallReturnLabel_252:
   \   000108   90....       MOV       DPTR,#gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY
   \   00010B   E0           MOVX      A,@DPTR
   \   00010C   C0E0         PUSH      A
   \   00010E   EE           MOV       A,R6
   \   00010F   2420         ADD       A,#0x20
   \   000111   F582         MOV       DPL,A
   \   000113   E4           CLR       A
   \   000114   3F           ADDC      A,R7
   \   000115   F583         MOV       DPH,A
   \   000117   D0E0         POP       A
   \   000119   F0           MOVX      @DPTR,A
   3109                  si->defaultKeyTry = gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY;
   \   00011A   90....       MOV       DPTR,#gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY
   \   00011D   E0           MOVX      A,@DPTR
   \   00011E   C0E0         PUSH      A
   \   000120   EE           MOV       A,R6
   \   000121   2421         ADD       A,#0x21
   \   000123   F582         MOV       DPL,A
   \   000125   E4           CLR       A
   \   000126   3F           ADDC      A,R7
   \   000127   F583         MOV       DPH,A
   \   000129   D0E0         POP       A
   \   00012B   8057         SJMP      ??APSME_TCLinkKeySync_12
   3110                break;
   3111                case ZG_VERIFIED_KEY:
   3112                case ZG_NON_R21_NWK_JOINED:
   3113                  //Only verify the frame counter for Verified keys, or keys used with non R21 TC
   3114                  tclkRxFrmCntr = &TCLinkKeyFrmCntr[selectedId].rxFrmCntr;
   \                     ??APSME_TCLinkKeySync_6:
   \   00012D   E8           MOV       A,R0
   \   00012E   75..09       MOV       ?B,#0x9
   \   000131   A4           MUL       AB
   \   000132   F8           MOV       R0,A
   \   000133   AA..         MOV       R2,?B
   \   000135   75..09       MOV       ?B,#0x9
   \   000138   E9           MOV       A,R1
   \   000139   A4           MUL       AB
   \   00013A   2A           ADD       A,R2
   \   00013B   F9           MOV       R1,A
   \   00013C   74..         MOV       A,#(TCLinkKeyFrmCntr + 107) & 0xff
   \   00013E   28           ADD       A,R0
   \   00013F   F8           MOV       R0,A
   \   000140   74..         MOV       A,#((TCLinkKeyFrmCntr - 2453) >> 8) & 0xff
   \   000142   39           ADDC      A,R1
   \   000143   F9           MOV       R1,A
   \   000144   E8           MOV       A,R0
   \   000145   FA           MOV       R2,A
   \   000146   E9           MOV       A,R1
   3115          
   3116                  if ( si->frmCntr >= *tclkRxFrmCntr )
   \   000147   8882         MOV       DPL,R0
   \   000149   F583         MOV       DPH,A
   \   00014B   78..         MOV       R0,#?V4
   \   00014D   12....       LCALL     ?L_MOV_X
   \   000150   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000153   12....       LCALL     ?UL_GT_X
   \   000156   4076         JC        ??APSME_TCLinkKeySync_13
   3117                  {
   3118                    // update the rx frame counter
   3119                    *tclkRxFrmCntr = si->frmCntr + 1;
   \   000158   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   00015B   12....       LCALL     ?L_MOV_X
   \   00015E   90....       MOV       DPTR,#__Constant_1
   \   000161   78..         MOV       R0,#?V4
   \   000163   12....       LCALL     ?L_ADD_X
   \   000166   8A82         MOV       DPL,R2
   \   000168   8983         MOV       DPH,R1
   \   00016A   78..         MOV       R0,#?V4
   \   00016C   12....       LCALL     ?L_MOV_TO_X
   3120                    status = ZSuccess;
   3121                    
   3122                    #if ZG_BUILD_JOINING_TYPE
   3123                    if(ZG_DEVICE_JOINING_TYPE)
   \   00016F   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000172   E0           MOVX      A,@DPTR
   \   000173   6401         XRL       A,#0x1
   \   000175   6005         JZ        ??APSME_TCLinkKeySync_9
   \   000177   E0           MOVX      A,@DPTR
   \   000178   6402         XRL       A,#0x2
   \   00017A   700B         JNZ       ??APSME_TCLinkKeySync_14
   3124                    {   
   3125                      si->keyNvId = ZCD_NV_TCLK_JOIN_DEV;
   \                     ??APSME_TCLinkKeySync_9:
   \   00017C   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   00017F   7402         MOV       A,#0x2
   \   000181   F0           MOVX      @DPTR,A
   \   000182   A3           INC       DPTR
   \   000183   14           DEC       A
   \                     ??APSME_TCLinkKeySync_12:
   \   000184   F0           MOVX      @DPTR,A
   3126                      break;
   \   000185   805F         SJMP      ??APSME_TCLinkKeySync_8
   3127                    }
   3128                    #endif
   3129                    #if ZG_BUILD_COORDINATOR_TYPE
   3130                    if(ZG_DEVICE_COORDINATOR_TYPE)
   \                     ??APSME_TCLinkKeySync_14:
   \   000187   E0           MOVX      A,@DPTR
   \   000188   701C         JNZ       ??APSME_TCLinkKeySync_15
   3131                    {
   3132                      si->keyNvId = ZCD_NV_TCLK_SEED;
   \   00018A   EE           MOV       A,R6
   \   00018B   240F         ADD       A,#0xf
   \   00018D   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   000190   A3           INC       DPTR
   \   000191   F0           MOVX      @DPTR,A
   3133                      si->seedShift = TCLKDevEntry.SeedShift_IcIndex;
   \   000192   741B         MOV       A,#0x1b
   \   000194   12....       LCALL     ?XSTACK_DISP0_8
   \   000197   E0           MOVX      A,@DPTR
   \   000198   C0E0         PUSH      A
   \   00019A   EE           MOV       A,R6
   \   00019B   2422         ADD       A,#0x22
   \   00019D   F582         MOV       DPL,A
   \   00019F   E4           CLR       A
   \   0001A0   3F           ADDC      A,R7
   \   0001A1   F583         MOV       DPH,A
   \   0001A3   D0E0         POP       A
   \   0001A5   F0           MOVX      @DPTR,A
   3134                    }
   3135                    #endif
   3136                    osal_memcpy(si->dstExtAddr, TCLKDevEntry.extAddr,Z_EXTADDR_LEN);
   \                     ??APSME_TCLinkKeySync_15:
   \   0001A6                ; Setup parameters for call to function osal_memcpy
   \   0001A6   7411         MOV       A,#0x11
   \   0001A8   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AB   A982         MOV       R1,DPL
   \   0001AD   AA83         MOV       R2,DPH
   \   0001AF   89..         MOV       ?V4,R1
   \   0001B1   8A..         MOV       ?V5,R2
   \   0001B3   75..00       MOV       ?V6,#0x0
   \   0001B6   78..         MOV       R0,#?V4
   \   0001B8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001BB   7C08         MOV       R4,#0x8
   \   0001BD   7D00         MOV       R5,#0x0
   \   0001BF   EE           MOV       A,R6
   \   0001C0   2418         ADD       A,#0x18
   \   0001C2   FA           MOV       R2,A
   \   0001C3   E4           CLR       A
   \   0001C4   3F           ADDC      A,R7
   \   0001C5   FB           MOV       R3,A
   \   0001C6   12....       LCALL     ??Subroutine128_0 & 0xFFFF
   3137                  }
   \                     ??CrossCallReturnLabel_303:
   \   0001C9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001CC   8018         SJMP      ??APSME_TCLinkKeySync_8
   3138                  else
   3139                  {
   3140                    status = ZSecOldFrmCount;
   \                     ??APSME_TCLinkKeySync_13:
   \   0001CE   75..A2       MOV       ?V0,#-0x5e
   \   0001D1   8013         SJMP      ??APSME_TCLinkKeySync_8
   3141                  }
   3142                break;
   3143                default:
   3144                  //This should not happen
   3145                break;
   3146              }
   3147            }
   3148            else
   3149            {
   3150              if (ZG_DEVICE_COORDINATOR_TYPE) 
   \                     ??APSME_TCLinkKeySync_3:
   \   0001D3   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0001D6   E0           MOVX      A,@DPTR
   \   0001D7   700D         JNZ       ??APSME_TCLinkKeySync_8
   3151              {    
   3152                if(bdb_doTrustCenterRequireKeyExchange() == FALSE)
   \   0001D9                ; Setup parameters for call to function bdb_doTrustCenterRequireKeyExchange
   \   0001D9   12....       LCALL     `??bdb_doTrustCenterRequireKeyExchange::?relay`; Banked call to: bdb_doTrustCenterRequireKeyExchange
   \   0001DC   E9           MOV       A,R1
   \   0001DD   7007         JNZ       ??APSME_TCLinkKeySync_8
   3153                {
   3154                  //If the TCLK exchange is not mandated, and the key cannot be found for this device, 
   3155                  //is because we have erased the entry. Try with default key.
   3156                  si->keyNvId = ZCD_NV_TCLK_DEFAULT;
   \   0001DF   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   0001E2   F0           MOVX      @DPTR,A
   3157                  status = ZSuccess;
   \   0001E3   75..00       MOV       ?V0,#0x0
   3158                }
   3159              }
   3160            }
   3161            
   3162            
   3163            return status;
   \                     ??APSME_TCLinkKeySync_8:
   \   0001E6   A9..         MOV       R1,?V0
   \   0001E8   741C         MOV       A,#0x1c
   \   0001EA   02....       LJMP      ?Subroutine1 & 0xFFFF
   3164          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   EE           MOV       A,R6
   \   000001   240F         ADD       A,#0xf
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   EE           MOV       A,R6
   \   000001   2412         ADD       A,#0x12
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   78..         MOV       R0,#?V4
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000003   7403         MOV       A,#0x3
   \   000005   F0           MOVX      @DPTR,A
   \   000006   A3           INC       DPTR
   \   000007   7401         MOV       A,#0x1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003                REQUIRE ??Subroutine127_0
   \   000003                ; // Fall through to label ??Subroutine127_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine127_0:
   \   000000   3F           ADDC      A,R7
   \   000001   F583         MOV       DPH,A
   \   000003   7401         MOV       A,#0x1
   \   000005   F0           MOVX      @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2404         ADD       A,#0x4
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   3401         ADDC      A,#0x1
   \   000007   F9           MOV       R1,A
   \   000008   22           RET
   3165          
   3166          /******************************************************************************
   3167           * @fn          APSME_TCLinkKeyLoad
   3168           *
   3169           * @brief       Load Trust Center LINK key data.
   3170           *
   3171           * @param       dstAddr - [in] dstAddr
   3172           * @param       si      - [in, out] SSP_Info_t
   3173           *
   3174           * @return      ZStatus_t
   3175           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3176          ZStatus_t APSME_TCLinkKeyLoad( uint16 dstAddr, SSP_Info_t* si )
   \                     APSME_TCLinkKeyLoad:
   3177          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 33
   \   000005   74DF         MOV       A,#-0x21
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8C..         MOV       ?V0,R4
   \   00000C   8D..         MOV       ?V1,R5
   3178            APSME_TCLKDevEntry_t TCLKDevEntry;
   3179            AddrMgrEntry_t       addrEntry;
   3180            ZStatus_t            status = ZSecNoKey;
   \   00000E   7EA1         MOV       R6,#-0x5f
   3181            uint16               entryIndex;
   3182            uint8                extAddrFound;
   3183            uint8                found;
   3184          
   3185            
   3186            // Look up the ami of the srcAddr if available
   3187            addrEntry.user    = ADDRMGR_USER_DEFAULT;
   \   000010   7414         MOV       A,#0x14
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   E4           CLR       A
   \   000016   F0           MOVX      @DPTR,A
   3188            addrEntry.nwkAddr = dstAddr;
   \   000017   7415         MOV       A,#0x15
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   3189          
   3190            extAddrFound = AddrMgrExtAddrValid( si->extAddr );
   3191            
   3192            if(extAddrFound)
   \                     ??CrossCallReturnLabel_261:
   \   00001F                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   00001F   EC           MOV       A,R4
   \   000020   2406         ADD       A,#0x6
   \   000022   FA           MOV       R2,A
   \   000023   E4           CLR       A
   \   000024   35..         ADDC      A,?V1
   \   000026   FB           MOV       R3,A
   \   000027   12....       LCALL     `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   00002A   E9           MOV       A,R1
   \   00002B   7003         JNZ       $+5
   \   00002D   02....       LJMP      ??APSME_TCLinkKeyLoad_0 & 0xFFFF
   3193            {
   3194              entryIndex = APSME_SearchTCLinkKeyEntry(si->extAddr,&found,&TCLKDevEntry);
   \   000030                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   000030   7401         MOV       A,#0x1
   \   000032   12....       LCALL     ?XSTACK_DISP100_8
   \   000035   88..         MOV       ?V2,R0
   \   000037   89..         MOV       ?V3,R1
   \   000039   78..         MOV       R0,#?V2
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003E   7402         MOV       A,#0x2
   \   000040   12....       LCALL     ?XSTACK_DISP102_8
   \   000043   E5..         MOV       A,?V0
   \   000045   2406         ADD       A,#0x6
   \   000047   FA           MOV       R2,A
   \   000048   E4           CLR       A
   \   000049   35..         ADDC      A,?V1
   \   00004B   12....       LCALL     ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   00004E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000051   8A..         MOV       ?V2,R2
   \   000053   8B..         MOV       ?V3,R3
   3195              if(entryIndex != 0xFFFF)
   \   000055   74FF         MOV       A,#-0x1
   \   000057   6A           XRL       A,R2
   \   000058   7003         JNZ       ??APSME_TCLinkKeyLoad_1
   \   00005A   74FF         MOV       A,#-0x1
   \   00005C   6B           XRL       A,R3
   \                     ??APSME_TCLinkKeyLoad_1:
   \   00005D   7003         JNZ       $+5
   \   00005F   02....       LJMP      ??APSME_TCLinkKeyLoad_2 & 0xFFFF
   3196              {
   3197                uint16 i = entryIndex - ZCD_NV_TCLK_TABLE_START;
   \   000062   EA           MOV       A,R2
   \   000063   24EF         ADD       A,#-0x11
   \   000065   FE           MOV       R6,A
   \   000066   EB           MOV       A,R3
   \   000067   34FE         ADDC      A,#-0x2
   \   000069   FF           MOV       R7,A
   3198                
   3199                if(found)
   \   00006A   85..82       MOV       DPL,?XSP + 0
   \   00006D   85..83       MOV       DPH,?XSP + 1
   \   000070   E0           MOVX      A,@DPTR
   \   000071   7003         JNZ       $+5
   \   000073   02....       LJMP      ??APSME_TCLinkKeyLoad_3 & 0xFFFF
   3200                {
   3201                  switch(TCLKDevEntry.keyAttributes)
   \   000076   7411         MOV       A,#0x11
   \   000078   12....       LCALL     ?XSTACK_DISP0_8
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   6021         JZ        ??APSME_TCLinkKeyLoad_4
   \   00007E   14           DEC       A
   \   00007F   600E         JZ        ??APSME_TCLinkKeyLoad_5
   \   000081   14           DEC       A
   \   000082   602D         JZ        ??APSME_TCLinkKeyLoad_6
   \   000084   2405         ADD       A,#0x5
   \   000086   6014         JZ        ??APSME_TCLinkKeyLoad_7
   \   000088   24FE         ADD       A,#-0x2
   \   00008A   6010         JZ        ??APSME_TCLinkKeyLoad_7
   \   00008C   02....       LJMP      ??APSME_TCLinkKeyLoad_8 & 0xFFFF
   3202                  {
   3203                    case ZG_UNVERIFIED_KEY:
   3204                      #if ZG_BUILD_JOINING_TYPE
   3205                      if(ZG_DEVICE_JOINING_TYPE)
   \                     ??APSME_TCLinkKeyLoad_5:
   \   00008F   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000092   E0           MOVX      A,@DPTR
   \   000093   6401         XRL       A,#0x1
   \   000095   6027         JZ        ??APSME_TCLinkKeyLoad_9
   \   000097   E0           MOVX      A,@DPTR
   \   000098   6402         XRL       A,#0x2
   \   00009A   6022         JZ        ??APSME_TCLinkKeyLoad_9
   3206                      {   
   3207                        si->keyNvId = ZCD_NV_TCLK_JOIN_DEV;
   3208                        break;
   3209                      }
   3210                      #endif
   3211                    case ZG_DEFAULT_KEY:
   3212                    case ZG_NON_R21_NWK_JOINED:
   3213                      si->keyNvId = ZCD_NV_TCLK_DEFAULT;
   \                     ??APSME_TCLinkKeyLoad_7:
   \   00009C   02....       LJMP      ??APSME_TCLinkKeyLoad_10 & 0xFFFF
   3214                    break;
   3215                    case ZG_PROVISIONAL_KEY:
   3216                      si->keyNvId = ZCD_NV_TCLK_IC_TABLE_START + TCLKDevEntry.SeedShift_IcIndex;
   \                     ??APSME_TCLinkKeyLoad_4:
   \   00009F   7413         MOV       A,#0x13
   \   0000A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A4   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0000A7   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   0000AA   E8           MOV       A,R0
   \   0000AB   F0           MOVX      @DPTR,A
   \   0000AC   A3           INC       DPTR
   \   0000AD   E9           MOV       A,R1
   \   0000AE   02....       LJMP      ??CrossCallReturnLabel_120 & 0xFFFF
   3217                    break;
   3218                    case ZG_VERIFIED_KEY:
   3219                      #if ZG_BUILD_JOINING_TYPE
   3220                      if(ZG_DEVICE_JOINING_TYPE)
   \                     ??APSME_TCLinkKeyLoad_6:
   \   0000B1   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   6401         XRL       A,#0x1
   \   0000B7   6005         JZ        ??APSME_TCLinkKeyLoad_9
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   6402         XRL       A,#0x2
   \   0000BC   700B         JNZ       ??APSME_TCLinkKeyLoad_11
   3221                      {   
   3222                        si->keyNvId = ZCD_NV_TCLK_JOIN_DEV;
   \                     ??APSME_TCLinkKeyLoad_9:
   \   0000BE   12....       LCALL     ?Subroutine82 & 0xFFFF
   3223                        break;
   3224                      }
   \                     ??CrossCallReturnLabel_123:
   \   0000C1   7402         MOV       A,#0x2
   \   0000C3   F0           MOVX      @DPTR,A
   \   0000C4   A3           INC       DPTR
   \   0000C5   14           DEC       A
   \   0000C6   02....       LJMP      ??CrossCallReturnLabel_120 & 0xFFFF
   3225                      #endif
   3226                      #if ZG_BUILD_COORDINATOR_TYPE
   3227                      if(ZG_DEVICE_COORDINATOR_TYPE)
   \                     ??APSME_TCLinkKeyLoad_11:
   \   0000C9   E0           MOVX      A,@DPTR
   \   0000CA   701E         JNZ       ??APSME_TCLinkKeyLoad_12
   3228                      {
   3229                        si->keyNvId = ZCD_NV_TCLK_SEED;
   \   0000CC   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   0000CF   7401         MOV       A,#0x1
   \   0000D1   F0           MOVX      @DPTR,A
   \   0000D2   A3           INC       DPTR
   \   0000D3   F0           MOVX      @DPTR,A
   3230                        si->seedShift = TCLKDevEntry.SeedShift_IcIndex;
   \   0000D4   7413         MOV       A,#0x13
   \   0000D6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   C0E0         PUSH      A
   \   0000DC   E5..         MOV       A,?V0
   \   0000DE   2422         ADD       A,#0x22
   \   0000E0   F582         MOV       DPL,A
   \   0000E2   E4           CLR       A
   \   0000E3   35..         ADDC      A,?V1
   \   0000E5   F583         MOV       DPH,A
   \   0000E7   D0E0         POP       A
   \   0000E9   F0           MOVX      @DPTR,A
   3231                      }
   3232                      #endif
   3233                      osal_memcpy(si->dstExtAddr, TCLKDevEntry.extAddr,Z_EXTADDR_LEN);
   \                     ??APSME_TCLinkKeyLoad_12:
   \   0000EA                ; Setup parameters for call to function osal_memcpy
   \   0000EA   7409         MOV       A,#0x9
   \   0000EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EF   A982         MOV       R1,DPL
   \   0000F1   AA83         MOV       R2,DPH
   \   0000F3   89..         MOV       ?V4,R1
   \   0000F5   8A..         MOV       ?V5,R2
   \   0000F7   75..00       MOV       ?V6,#0x0
   \   0000FA   78..         MOV       R0,#?V4
   \   0000FC   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000FF   7C08         MOV       R4,#0x8
   \   000101   7D00         MOV       R5,#0x0
   \   000103   E5..         MOV       A,?V0
   \   000105   2418         ADD       A,#0x18
   \   000107   FA           MOV       R2,A
   \   000108   E4           CLR       A
   \   000109   35..         ADDC      A,?V1
   \   00010B   FB           MOV       R3,A
   \   00010C   12....       LCALL     ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   00010F   12....       LCALL     ?DEALLOC_XSTACK8
   3234                    break;
   \   000112   02....       LJMP      ??APSME_TCLinkKeyLoad_8 & 0xFFFF
   3235                    default:
   3236                      //This should not happen
   3237                    break;
   3238                  }
   3239                }
   3240                //Not found, then create an entry for it. Adding the device to the TCLKDev Entries for first time
   3241                else
   3242                {
   3243                  //Initialize the entry
   3244                  osal_memcpy(TCLKDevEntry.extAddr, si->extAddr, Z_EXTADDR_LEN);
   \                     ??APSME_TCLinkKeyLoad_3:
   \   000115                ; Setup parameters for call to function osal_memcpy
   \   000115   E5..         MOV       A,?V0
   \   000117   2406         ADD       A,#0x6
   \   000119   F5..         MOV       ?V4,A
   \   00011B   E4           CLR       A
   \   00011C   35..         ADDC      A,?V1
   \   00011E   F5..         MOV       ?V5,A
   \   000120   75..00       MOV       ?V6,#0x0
   \   000123   78..         MOV       R0,#?V4
   \   000125   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000128   7C08         MOV       R4,#0x8
   \   00012A   7D00         MOV       R5,#0x0
   \   00012C   740C         MOV       A,#0xc
   \   00012E   12....       LCALL     ?XSTACK_DISP0_8
   \   000131   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   000134   12....       LCALL     ?DEALLOC_XSTACK8
   3245                  TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
   \   000137   7411         MOV       A,#0x11
   \   000139   12....       LCALL     ?XSTACK_DISP0_8
   \   00013C   74FF         MOV       A,#-0x1
   \   00013E   F0           MOVX      @DPTR,A
   3246                  TCLKDevEntry.keyType = ZG_GLOBAL_LINK_KEY;
   \   00013F   7412         MOV       A,#0x12
   \   000141   12....       LCALL     ?XSTACK_DISP0_8
   \   000144   7401         MOV       A,#0x1
   \   000146   F0           MOVX      @DPTR,A
   3247                  //Create the entry with a random shift of the seed. Validate the maximum shift of the seed which is 15
   3248                  TCLKDevEntry.SeedShift_IcIndex = osal_rand() & 0x000F;
   \   000147                ; Setup parameters for call to function osal_rand
   \   000147   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   00014A   EA           MOV       A,R2
   \   00014B   540F         ANL       A,#0xf
   \   00014D   C0E0         PUSH      A
   \   00014F   7413         MOV       A,#0x13
   \   000151   12....       LCALL     ?XSTACK_DISP0_8
   \   000154   D0E0         POP       A
   \   000156   F0           MOVX      @DPTR,A
   3249                  TCLKDevEntry.txFrmCntr = 0;
   \   000157   7401         MOV       A,#0x1
   \   000159   12....       LCALL     ?XSTACK_DISP0_8
   \   00015C   12....       LCALL     ?Subroutine26 & 0xFFFF
   3250                  TCLKDevEntry.rxFrmCntr = 0;
   \                     ??CrossCallReturnLabel_30:
   \   00015F   12....       LCALL     ?XSTACK_DISP0_8
   \   000162   12....       LCALL     ?Subroutine27 & 0xFFFF
   3251                  //save entry in nv
   3252                  osal_nv_write(entryIndex,0,sizeof(APSME_TCLKDevEntry_t),&TCLKDevEntry);
   \                     ??CrossCallReturnLabel_32:
   \   000165   12....       LCALL     ?XSTACK_DISP100_8
   \   000168   88..         MOV       ?V4,R0
   \   00016A   89..         MOV       ?V5,R1
   \   00016C   78..         MOV       R0,#?V4
   \   00016E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000171   75..13       MOV       ?V4,#0x13
   \   000174   75..00       MOV       ?V5,#0x0
   \   000177   78..         MOV       R0,#?V4
   \   000179   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00017C   7C00         MOV       R4,#0x0
   \   00017E   7D00         MOV       R5,#0x0
   \   000180   AA..         MOV       R2,?V2
   \   000182   AB..         MOV       R3,?V3
   \   000184   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   000187   12....       LCALL     ?DEALLOC_XSTACK8
   3253                  //Initialize framecounter
   3254                  osal_memset(&TCLinkKeyFrmCntr[i],0,sizeof(APSME_TCLinkKeyFrmCntr_t));
   \   00018A                ; Setup parameters for call to function osal_memset
   \   00018A   7C09         MOV       R4,#0x9
   \   00018C   7D00         MOV       R5,#0x0
   \   00018E   7900         MOV       R1,#0x0
   \   000190   EE           MOV       A,R6
   \   000191   8C..         MOV       ?B,R4
   \   000193   A4           MUL       AB
   \   000194   FA           MOV       R2,A
   \   000195   A8..         MOV       R0,?B
   \   000197   8C..         MOV       ?B,R4
   \   000199   EF           MOV       A,R7
   \   00019A   A4           MUL       AB
   \   00019B   28           ADD       A,R0
   \   00019C   FB           MOV       R3,A
   \   00019D   74..         MOV       A,#TCLinkKeyFrmCntr & 0xff
   \   00019F   2A           ADD       A,R2
   \   0001A0   FA           MOV       R2,A
   \   0001A1   74..         MOV       A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   0001A3   3B           ADDC      A,R3
   \   0001A4   FB           MOV       R3,A
   \   0001A5   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3255                  // set the keyNvId to use
   3256                  si->keyNvId = ZCD_NV_TCLK_DEFAULT;
   3257                }
   \                     ??APSME_TCLinkKeyLoad_10:
   \   0001A8   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   0001AB   F0           MOVX      @DPTR,A
   3258          
   3259                // update link key related fields
   3260                si->keyID   = SEC_KEYID_LINK;
   \                     ??APSME_TCLinkKeyLoad_8:
   \   0001AC   E5..         MOV       A,?V0
   \   0001AE   240E         ADD       A,#0xe
   \   0001B0   F582         MOV       DPL,A
   \   0001B2   E4           CLR       A
   \   0001B3   35..         ADDC      A,?V1
   \   0001B5   F583         MOV       DPH,A
   \   0001B7   E4           CLR       A
   \   0001B8   F0           MOVX      @DPTR,A
   3261                si->frmCntr = TCLinkKeyFrmCntr[i].txFrmCntr;
   \   0001B9   EE           MOV       A,R6
   \   0001BA   75..09       MOV       ?B,#0x9
   \   0001BD   A4           MUL       AB
   \   0001BE   F8           MOV       R0,A
   \   0001BF   AA..         MOV       R2,?B
   \   0001C1   75..09       MOV       ?B,#0x9
   \   0001C4   EF           MOV       A,R7
   \   0001C5   A4           MUL       AB
   \   0001C6   2A           ADD       A,R2
   \   0001C7   F9           MOV       R1,A
   \   0001C8   74..         MOV       A,#TCLinkKeyFrmCntr & 0xff
   \   0001CA   28           ADD       A,R0
   \   0001CB   F8           MOV       R0,A
   \   0001CC   74..         MOV       A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   0001CE   39           ADDC      A,R1
   \   0001CF   F9           MOV       R1,A
   \   0001D0   E8           MOV       A,R0
   \   0001D1   FC           MOV       R4,A
   \   0001D2   E9           MOV       A,R1
   \   0001D3   FD           MOV       R5,A
   \   0001D4   8882         MOV       DPL,R0
   \   0001D6   F583         MOV       DPH,A
   \   0001D8   12....       LCALL     ?XLOAD_R0123
   \   0001DB   E5..         MOV       A,?V0
   \   0001DD   2412         ADD       A,#0x12
   \   0001DF   F582         MOV       DPL,A
   \   0001E1   E4           CLR       A
   \   0001E2   35..         ADDC      A,?V1
   \   0001E4   F583         MOV       DPH,A
   \   0001E6   12....       LCALL     ?XSTORE_R0123
   3262          
   3263                // update outgoing frame counter
   3264                TCLinkKeyFrmCntr[i].txFrmCntr++;
   \   0001E9   90....       MOV       DPTR,#__Constant_1
   \   0001EC   78..         MOV       R0,#?V0
   \   0001EE   12....       LCALL     ?L_MOV_X
   \   0001F1   8C82         MOV       DPL,R4
   \   0001F3   8D83         MOV       DPH,R5
   \   0001F5   78..         MOV       R0,#?V0
   \   0001F7   12....       LCALL     ?L_ADD_TO_X
   3265          
   3266            #if defined ( NV_RESTORE )
   3267                // write periodically to NV
   3268                if ( !(TCLinkKeyFrmCntr[i].txFrmCntr % MAX_TCLK_FRAMECOUNTER_CHANGES) )
   \   0001FA   8C82         MOV       DPL,R4
   \   0001FC   8D83         MOV       DPH,R5
   \   0001FE   78..         MOV       R0,#?V0
   \   000200   12....       LCALL     ?L_MOV_X
   \   000203   90....       MOV       DPTR,#__Constant_a
   \   000206   78..         MOV       R0,#?V4
   \   000208   12....       LCALL     ?L_MOV_X
   \   00020B   78..         MOV       R0,#?V0
   \   00020D   79..         MOV       R1,#?V4
   \   00020F   12....       LCALL     ?UL_DIV_MOD
   \   000212   E5..         MOV       A,?V4
   \   000214   45..         ORL       A,?V5
   \   000216   45..         ORL       A,?V6
   \   000218   45..         ORL       A,?V7
   \   00021A   702B         JNZ       ??APSME_TCLinkKeyLoad_13
   3269                {
   3270                  // set the flag to write key to NV
   3271                  TCLinkKeyFrmCntr[i].pendingFlag = TRUE;
   \   00021C   EE           MOV       A,R6
   \   00021D   75..09       MOV       ?B,#0x9
   \   000220   A4           MUL       AB
   \   000221   FE           MOV       R6,A
   \   000222   A8..         MOV       R0,?B
   \   000224   75..09       MOV       ?B,#0x9
   \   000227   EF           MOV       A,R7
   \   000228   A4           MUL       AB
   \   000229   28           ADD       A,R0
   \   00022A   FF           MOV       R7,A
   \   00022B   74..         MOV       A,#(TCLinkKeyFrmCntr + 8) & 0xff
   \   00022D   2E           ADD       A,R6
   \   00022E   F582         MOV       DPL,A
   \   000230   74..         MOV       A,#((TCLinkKeyFrmCntr + 8) >> 8) & 0xff
   \   000232   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   3272          
   3273                  // Notify the ZDApp that the frame counter has changed.
   3274                  osal_set_event( ZDAppTaskID, ZDO_TCLK_FRAMECOUNTER_CHANGE );
   \                     ??CrossCallReturnLabel_295:
   \   000235                ; Setup parameters for call to function osal_set_event
   \   000235   7A00         MOV       R2,#0x0
   \   000237   7B04         MOV       R3,#0x4
   \   000239   90....       MOV       DPTR,#ZDAppTaskID
   \   00023C   E0           MOVX      A,@DPTR
   \   00023D   F9           MOV       R1,A
   \   00023E   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000241   8004         SJMP      ??APSME_TCLinkKeyLoad_13
   3275                }
   3276            #endif
   3277              }  
   3278              else
   3279              {
   3280                //If no more TCLK entries, try global so we can try to add legacy devices
   3281                si->keyNvId = ZCD_NV_TCLK_DEFAULT;
   \                     ??APSME_TCLinkKeyLoad_2:
   \   000243   12....       LCALL     ?Subroutine81 & 0xFFFF
   3282              }
   \                     ??CrossCallReturnLabel_121:
   \   000246   F0           MOVX      @DPTR,A
   3283              status = ZSuccess;
   \                     ??APSME_TCLinkKeyLoad_13:
   \   000247   7E00         MOV       R6,#0x0
   \   000249   8012         SJMP      ??APSME_TCLinkKeyLoad_14
   \                     ??APSME_TCLinkKeyLoad_0:
   \   00024B                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   3284            }
   \   00024B   7414         MOV       A,#0x14
   \   00024D   12....       LCALL     ?XSTACK_DISP101_8
   \   000250   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000253   7008         JNZ       ??APSME_TCLinkKeyLoad_14
   3285            
   3286            // If no TC link key found, remove the device from the address manager
   3287            if ( (status != ZSuccess) && (AddrMgrEntryLookupNwk(&addrEntry) == TRUE) )
   3288            {
   3289              AddrMgrEntryRelease( &addrEntry );
   \   000255                ; Setup parameters for call to function AddrMgrEntryRelease
   \   000255   7414         MOV       A,#0x14
   \   000257   12....       LCALL     ?XSTACK_DISP101_8
   \   00025A   12....       LCALL     `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   3290            }
   3291          
   3292            return status;
   \                     ??APSME_TCLinkKeyLoad_14:
   \   00025D   EE           MOV       A,R6
   \   00025E   F9           MOV       R1,A
   \   00025F   7421         MOV       A,#0x21
   \   000261   02....       LJMP      ?Subroutine1 & 0xFFFF
   3293          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   E5..         MOV       A,?V0
   \   000002   240F         ADD       A,#0xf
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V1
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000003   7403         MOV       A,#0x3
   \   000005   F0           MOVX      @DPTR,A
   \   000006   A3           INC       DPTR
   \   000007   7401         MOV       A,#0x1
   \   000009   22           RET
   3294          
   3295          /******************************************************************************
   3296           * @fn          APSME_IsDefaultTCLK
   3297           *
   3298           * @brief       Return TRUE or FALSE based on the extended address.  If the
   3299           *              input ext address is all FFs, it means the trust center link
   3300           *              assoiciated with the address is the default trust center link key
   3301           *
   3302           * @param       extAddr - [in] extended address
   3303           *
   3304           * @return      uint8 TRUE/FALSE
   3305           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3306          uint8 APSME_IsDefaultTCLK( uint8 *extAddr )
   \                     APSME_IsDefaultTCLK:
   3307          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3308            return osal_isbufset( extAddr, 0xFF, Z_EXTADDR_LEN );
   \   000004                ; Setup parameters for call to function osal_isbufset
   \   000004   7C08         MOV       R4,#0x8
   \   000006   79FF         MOV       R1,#-0x1
   \   000008   12....       LCALL     `??osal_isbufset::?relay`; Banked call to: osal_isbufset
   \   00000B   02....       LJMP      ??Subroutine105_0 & 0xFFFF
   3309          }
   3310          
   3311          /******************************************************************************
   3312           * @fn          ZDSecMgrNwkKeyInit
   3313           *
   3314           * @brief       Initialize the NV items for
   3315           *                  ZCD_NV_NWKKEY,
   3316           *                  ZCD_NV_NWK_ACTIVE_KEY_INFO and
   3317           *                  ZCD_NV_NWK_ALTERN_KEY_INFO
   3318           *
   3319           * @param       setDefault
   3320           *
   3321           * @return      none
   3322           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3323          void ZDSecMgrNwkKeyInit(uint8 setDefault)
   \                     ZDSecMgrNwkKeyInit:
   3324          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 50
   \   000005   74CE         MOV       A,#-0x32
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FF           MOV       R7,A
   3325            uint8 status;
   3326            nwkKeyDesc nwkKey;
   3327            // Initialize NV items for NWK key, this structure contains the frame counter
   3328            // and is only used when NV_RESTORE is enabled
   3329            nwkActiveKeyItems keyItems;
   3330            
   3331          
   3332            uint8 i,nwkFrameCounterReset = FALSE;
   \   00000C   C2..         CLR       ?VB.0
   3333            nwkSecMaterialDesc_t nwkSecMaterialDesc;
   3334            
   3335            //NwkSecMaterial entry is empty if set to 0s
   3336            osal_memset(&nwkSecMaterialDesc,0,sizeof(nwkSecMaterialDesc_t));
   \   00000E                ; Setup parameters for call to function osal_memset
   \   00000E   7C0C         MOV       R4,#0xc
   \   000010   7D00         MOV       R5,#0x0
   \   000012   7900         MOV       R1,#0x0
   \   000014   AA..         MOV       R2,?XSP + 0
   \   000016   AB..         MOV       R3,?XSP + 1
   \   000018   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3337          #ifdef NV_RESTORE  
   3338            // Has been set to reset the nwk security material?
   3339            if ( zgReadStartupOptions() & ZCD_STARTOPT_CLEAR_NWK_FRAME_COUNTER )
   \   00001B                ; Setup parameters for call to function zgReadStartupOptions
   \   00001B   12....       LCALL     `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
   \   00001E   E9           MOV       A,R1
   \   00001F   F8           MOV       R0,A
   \   000020   A2E7         MOV       C,0xE0 /* A   */.7
   \   000022   5002         JNC       ??ZDSecMgrNwkKeyInit_0
   3340            {
   3341              nwkFrameCounterReset = TRUE;
   \   000024   D2..         SETB      ?VB.0
   3342            }
   3343          #else
   3344            nwkFrameCounterReset = TRUE;
   3345          #endif
   3346            
   3347            //Initialize the nwk security material
   3348            for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
   \                     ??ZDSecMgrNwkKeyInit_0:
   \   000026   7E00         MOV       R6,#0x0
   \   000028   8044         SJMP      ??ZDSecMgrNwkKeyInit_1
   3349            {
   3350              if((osal_nv_item_init(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc) == SUCCESS) && (nwkFrameCounterReset))
   \                     ??ZDSecMgrNwkKeyInit_2:
   \   00002A                ; Setup parameters for call to function osal_nv_item_init
   \   00002A   A8..         MOV       R0,?XSP + 0
   \   00002C   A9..         MOV       R1,?XSP + 1
   \   00002E   88..         MOV       ?V0,R0
   \   000030   89..         MOV       ?V1,R1
   \   000032   78..         MOV       R0,#?V0
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   7C0C         MOV       R4,#0xc
   \   000039   7D00         MOV       R5,#0x0
   \   00003B   EE           MOV       A,R6
   \   00003C   2475         ADD       A,#0x75
   \   00003E   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000041   12....       LCALL     ?DEALLOC_XSTACK8
   \   000044   E9           MOV       A,R1
   \   000045   7026         JNZ       ??ZDSecMgrNwkKeyInit_3
   \   000047   A2..         MOV       C,?VB.0
   \   000049   5022         JNC       ??ZDSecMgrNwkKeyInit_3
   3351              {
   3352                osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   00004B                ; Setup parameters for call to function osal_nv_write
   \   00004B   78..         MOV       R0,#?V0
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000050   75..0C       MOV       ?V0,#0xc
   \   000053   75..00       MOV       ?V1,#0x0
   \   000056   78..         MOV       R0,#?V0
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005B   7C00         MOV       R4,#0x0
   \   00005D   7D00         MOV       R5,#0x0
   \   00005F   EE           MOV       A,R6
   \   000060   2475         ADD       A,#0x75
   \   000062   FA           MOV       R2,A
   \   000063   E4           CLR       A
   \   000064   3400         ADDC      A,#0x0
   \   000066   FB           MOV       R3,A
   \   000067   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   3353              }
   3354            }
   \                     ??CrossCallReturnLabel_329:
   \   00006A   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDSecMgrNwkKeyInit_3:
   \   00006D   0E           INC       R6
   \                     ??ZDSecMgrNwkKeyInit_1:
   \   00006E   90....       MOV       DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
   \   000071   E4           CLR       A
   \   000072   93           MOVC      A,@A+DPTR
   \   000073   F8           MOV       R0,A
   \   000074   EE           MOV       A,R6
   \   000075   C3           CLR       C
   \   000076   98           SUBB      A,R0
   \   000077   40B1         JC        ??ZDSecMgrNwkKeyInit_2
   3355            //Set the last item to the generic nwk security material by setting extPanId to 0xFFs
   3356            osal_memset(nwkSecMaterialDesc.extendedPanID,0xFF,Z_EXTADDR_LEN);
   \   000079                ; Setup parameters for call to function osal_memset
   \   000079   7C08         MOV       R4,#0x8
   \   00007B   7D00         MOV       R5,#0x0
   \   00007D   79FF         MOV       R1,#-0x1
   \   00007F   7404         MOV       A,#0x4
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   AA82         MOV       R2,DPL
   \   000086   AB83         MOV       R3,DPH
   \   000088   12....       LCALL     ?Subroutine63 & 0xFFFF
   3357            
   3358            if((osal_nv_item_init(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i - 1,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc) == SUCCESS) && (nwkFrameCounterReset))
   \                     ??CrossCallReturnLabel_95:
   \   00008B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008E   7C0C         MOV       R4,#0xc
   \   000090   7D00         MOV       R5,#0x0
   \   000092   EE           MOV       A,R6
   \   000093   2474         ADD       A,#0x74
   \   000095   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000098   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009B   E9           MOV       A,R1
   \   00009C   7026         JNZ       ??ZDSecMgrNwkKeyInit_4
   \   00009E   A2..         MOV       C,?VB.0
   \   0000A0   5022         JNC       ??ZDSecMgrNwkKeyInit_4
   3359            {
   3360              osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i - 1,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   0000A2                ; Setup parameters for call to function osal_nv_write
   \   0000A2   78..         MOV       R0,#?V0
   \   0000A4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A7   75..0C       MOV       ?V0,#0xc
   \   0000AA   75..00       MOV       ?V1,#0x0
   \   0000AD   78..         MOV       R0,#?V0
   \   0000AF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B2   7C00         MOV       R4,#0x0
   \   0000B4   7D00         MOV       R5,#0x0
   \   0000B6   EE           MOV       A,R6
   \   0000B7   2474         ADD       A,#0x74
   \   0000B9   FA           MOV       R2,A
   \   0000BA   E4           CLR       A
   \   0000BB   3400         ADDC      A,#0x0
   \   0000BD   FB           MOV       R3,A
   \   0000BE   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   3361            }
   \                     ??CrossCallReturnLabel_330:
   \   0000C1   12....       LCALL     ?DEALLOC_XSTACK8
   3362          
   3363          
   3364            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \                     ??ZDSecMgrNwkKeyInit_4:
   \   0000C4                ; Setup parameters for call to function osal_memset
   \   0000C4   7C15         MOV       R4,#0x15
   \   0000C6   7D00         MOV       R5,#0x0
   \   0000C8   7900         MOV       R1,#0x0
   \   0000CA   741D         MOV       A,#0x1d
   \   0000CC   12....       LCALL     ?XSTACK_DISP101_8
   \   0000CF   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3365          
   3366            status = osal_nv_item_init( ZCD_NV_NWKKEY, sizeof(nwkActiveKeyItems), (void *)&keyItems );
   3367          
   3368          #if defined ( NV_RESTORE )
   3369            // reset the values of NV items if NV_RESTORE is not enabled
   3370            if ((status == SUCCESS) && (setDefault == TRUE))
   \   0000D2                ; Setup parameters for call to function osal_nv_item_init
   \   0000D2   741D         MOV       A,#0x1d
   \   0000D4   12....       LCALL     ?XSTACK_DISP100_8
   \   0000D7   88..         MOV       ?V0,R0
   \   0000D9   89..         MOV       ?V1,R1
   \   0000DB   78..         MOV       R0,#?V0
   \   0000DD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E0   7C15         MOV       R4,#0x15
   \   0000E2   7D00         MOV       R5,#0x0
   \   0000E4   7A82         MOV       R2,#-0x7e
   \   0000E6   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   0000E9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000EC   E9           MOV       A,R1
   \   0000ED   7021         JNZ       ??ZDSecMgrNwkKeyInit_5
   \   0000EF   7401         MOV       A,#0x1
   \   0000F1   6F           XRL       A,R7
   \   0000F2   701C         JNZ       ??ZDSecMgrNwkKeyInit_5
   3371            {
   3372              // clear NV data to default values
   3373              osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems );
   \   0000F4                ; Setup parameters for call to function osal_nv_write
   \   0000F4   78..         MOV       R0,#?V0
   \   0000F6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F9   75..15       MOV       ?V0,#0x15
   \   0000FC   75..00       MOV       ?V1,#0x0
   \   0000FF   78..         MOV       R0,#?V0
   \   000101   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000104   7C00         MOV       R4,#0x0
   \   000106   7D00         MOV       R5,#0x0
   \   000108   7A82         MOV       R2,#-0x7e
   \   00010A   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   3374            }
   \                     ??CrossCallReturnLabel_309:
   \   00010D   12....       LCALL     ?DEALLOC_XSTACK8
   3375          #else
   3376            (void)setDefault;   // to eliminate compiler warning
   3377          
   3378            // reset the values of NV items if NV_RESTORE is not enabled
   3379            if (status == SUCCESS)
   3380            {
   3381              osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems );
   3382            }
   3383          #endif // defined (NV_RESTORE)
   3384          
   3385            // Initialize NV items for NWK Active and Alternate keys. These items are used
   3386            // all the time, independently of NV_RESTORE being set or not
   3387            osal_memset( &nwkKey, 0x00, sizeof(nwkKey) );
   \                     ??ZDSecMgrNwkKeyInit_5:
   \   000110                ; Setup parameters for call to function osal_memset
   \   000110   7C11         MOV       R4,#0x11
   \   000112   7D00         MOV       R5,#0x0
   \   000114   7900         MOV       R1,#0x0
   \   000116   740C         MOV       A,#0xc
   \   000118   12....       LCALL     ?XSTACK_DISP101_8
   \   00011B   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3388          
   3389            status = osal_nv_item_init( ZCD_NV_NWK_ACTIVE_KEY_INFO, sizeof(nwkKey), &nwkKey);
   3390          
   3391          #if defined ( NV_RESTORE )
   3392            // reset the values of NV items if NV_RESTORE is not enabled
   3393            if ((status == SUCCESS) && (setDefault == TRUE))
   \   00011E                ; Setup parameters for call to function osal_nv_item_init
   \   00011E   740C         MOV       A,#0xc
   \   000120   12....       LCALL     ?XSTACK_DISP100_8
   \   000123   88..         MOV       ?V0,R0
   \   000125   89..         MOV       ?V1,R1
   \   000127   78..         MOV       R0,#?V0
   \   000129   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012C   7C11         MOV       R4,#0x11
   \   00012E   7D00         MOV       R5,#0x0
   \   000130   7A3A         MOV       R2,#0x3a
   \   000132   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   000135   12....       LCALL     ?DEALLOC_XSTACK8
   \   000138   E9           MOV       A,R1
   \   000139   7021         JNZ       ??ZDSecMgrNwkKeyInit_6
   \   00013B   7401         MOV       A,#0x1
   \   00013D   6F           XRL       A,R7
   \   00013E   701C         JNZ       ??ZDSecMgrNwkKeyInit_6
   3394            {
   3395              // clear NV data to default values
   3396              osal_nv_write( ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   \   000140                ; Setup parameters for call to function osal_nv_write
   \   000140   78..         MOV       R0,#?V0
   \   000142   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000145   75..11       MOV       ?V0,#0x11
   \   000148   75..00       MOV       ?V1,#0x0
   \   00014B   78..         MOV       R0,#?V0
   \   00014D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000150   7C00         MOV       R4,#0x0
   \   000152   7D00         MOV       R5,#0x0
   \   000154   7A3A         MOV       R2,#0x3a
   \   000156   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   3397            }
   \                     ??CrossCallReturnLabel_310:
   \   000159   12....       LCALL     ?DEALLOC_XSTACK8
   3398          #else
   3399            // reset the values of NV items if NV_RESTORE is not enabled
   3400            if (status == SUCCESS)
   3401            {
   3402              osal_nv_write( ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   3403            }
   3404          #endif // defined (NV_RESTORE)
   3405          
   3406            status = osal_nv_item_init( ZCD_NV_NWK_ALTERN_KEY_INFO, sizeof(nwkKey), &nwkKey );
   3407          
   3408          #if defined ( NV_RESTORE )
   3409            // reset the values of NV items if NV_RESTORE is not enabled
   3410            if ((status == SUCCESS) && (setDefault == TRUE))
   \                     ??ZDSecMgrNwkKeyInit_6:
   \   00015C                ; Setup parameters for call to function osal_nv_item_init
   \   00015C   740C         MOV       A,#0xc
   \   00015E   12....       LCALL     ?XSTACK_DISP100_8
   \   000161   88..         MOV       ?V0,R0
   \   000163   89..         MOV       ?V1,R1
   \   000165   78..         MOV       R0,#?V0
   \   000167   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00016A   7C11         MOV       R4,#0x11
   \   00016C   7D00         MOV       R5,#0x0
   \   00016E   7A3B         MOV       R2,#0x3b
   \   000170   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   000173   12....       LCALL     ?DEALLOC_XSTACK8
   \   000176   E9           MOV       A,R1
   \   000177   7021         JNZ       ??ZDSecMgrNwkKeyInit_7
   \   000179   7401         MOV       A,#0x1
   \   00017B   6F           XRL       A,R7
   \   00017C   701C         JNZ       ??ZDSecMgrNwkKeyInit_7
   3411            {
   3412              // clear NV data to default values
   3413              osal_nv_write( ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   \   00017E                ; Setup parameters for call to function osal_nv_write
   \   00017E   78..         MOV       R0,#?V0
   \   000180   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000183   75..11       MOV       ?V0,#0x11
   \   000186   75..00       MOV       ?V1,#0x0
   \   000189   78..         MOV       R0,#?V0
   \   00018B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00018E   7C00         MOV       R4,#0x0
   \   000190   7D00         MOV       R5,#0x0
   \   000192   7A3B         MOV       R2,#0x3b
   \   000194   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   3414            }
   \                     ??CrossCallReturnLabel_311:
   \   000197   12....       LCALL     ?DEALLOC_XSTACK8
   3415          #else
   3416            // reset the values of NV items if NV_RESTORE is not enabled
   3417            if (status == SUCCESS)
   3418            {
   3419              osal_nv_write( ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   3420            }
   3421          #endif // defined (NV_RESTORE)
   3422          
   3423          }
   \                     ??ZDSecMgrNwkKeyInit_7:
   \   00019A   7432         MOV       A,#0x32
   \   00019C   02....       LJMP      ??Subroutine116_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   FA           MOV       R2,A
   \   000001   E4           CLR       A
   \   000002   3400         ADDC      A,#0x0
   \   000004   FB           MOV       R3,A
   \   000005   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000008   7402         MOV       A,#0x2
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   000003                ; Setup parameters for call to function osal_nv_item_init
   \   000003                ; Setup parameters for call to function osal_nv_write
   \   000003   A8..         MOV       R0,?XSP + 0
   \   000005   A9..         MOV       R1,?XSP + 1
   \   000007   88..         MOV       ?V0,R0
   \   000009   89..         MOV       ?V1,R1
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   22           RET
   3424          
   3425          
   3426          
   3427          /*********************************************************************
   3428           * @fn          ZDSecMgrReadKeyFromNv
   3429           *
   3430           * @brief       Looks for a specific key in NV based on Index value
   3431           *
   3432           * @param   keyNvId - Index of key to look in NV
   3433           *                    valid values are:
   3434           *                    ZCD_NV_NWK_ACTIVE_KEY_INFO
   3435           *                    ZCD_NV_NWK_ALTERN_KEY_INFO
   3436           *                    ZCD_NV_TCLK_TABLE_START + <offset_in_table>
   3437           *                    ZCD_NV_APS_LINK_KEY_DATA_START + <offset_in_table>
   3438           *                    ZCD_NV_PRECFGKEY
   3439           *
   3440           * @param  *keyinfo - Data is read into this buffer.
   3441           *
   3442           * @return  SUCCESS if NV data was copied to the keyinfo parameter .
   3443           *          Otherwise, NV_OPER_FAILED for failure.
   3444           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3445          ZStatus_t ZDSecMgrReadKeyFromNv(uint16 keyNvId, void *keyinfo)
   \                     ZDSecMgrReadKeyFromNv:
   3446          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV       ?V0,R4
   \   000007   8D..         MOV       ?V1,R5
   3447            if ((keyNvId == ZCD_NV_NWK_ACTIVE_KEY_INFO) ||
   3448                (keyNvId == ZCD_NV_NWK_ALTERN_KEY_INFO))
   \   000009   743A         MOV       A,#0x3a
   \   00000B   6A           XRL       A,R2
   \   00000C   7001         JNZ       ??ZDSecMgrReadKeyFromNv_0
   \   00000E   EB           MOV       A,R3
   \                     ??ZDSecMgrReadKeyFromNv_0:
   \   00000F   6006         JZ        ??ZDSecMgrReadKeyFromNv_1
   \   000011   743B         MOV       A,#0x3b
   \   000013   6A           XRL       A,R2
   \   000014   4B           ORL       A,R3
   \   000015   7015         JNZ       ??ZDSecMgrReadKeyFromNv_2
   3449            {
   3450              // get NWK active or alternate key from NV
   3451              return (osal_nv_read(keyNvId,
   3452                                   osal_offsetof(nwkKeyDesc, key),
   3453                                   SEC_KEY_LEN,
   3454                                   keyinfo));
   \                     ??ZDSecMgrReadKeyFromNv_1:
   \   000017                ; Setup parameters for call to function osal_nv_read
   \   000017   78..         MOV       R0,#?V0
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001C   75..10       MOV       ?V0,#0x10
   \   00001F   75..00       MOV       ?V1,#0x0
   \   000022   78..         MOV       R0,#?V0
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000027   7C01         MOV       R4,#0x1
   \   000029   02....       LJMP      ??ZDSecMgrReadKeyFromNv_3 & 0xFFFF
   3455            }
   3456            
   3457            else if(keyNvId == ZCD_NV_TCLK_DEFAULT)
   \                     ??ZDSecMgrReadKeyFromNv_2:
   \   00002C   7403         MOV       A,#0x3
   \   00002E   6A           XRL       A,R2
   \   00002F   7003         JNZ       ??ZDSecMgrReadKeyFromNv_4
   \   000031   7401         MOV       A,#0x1
   \   000033   6B           XRL       A,R3
   \                     ??ZDSecMgrReadKeyFromNv_4:
   \   000034   7008         JNZ       ??ZDSecMgrReadKeyFromNv_5
   3458            {
   3459              osal_memcpy(keyinfo,defaultTCLinkKey,SEC_KEY_LEN);
   \   000036                ; Setup parameters for call to function osal_memcpy
   \   000036   75....       MOV       ?V4,#defaultTCLinkKey & 0xff
   \   000039   75....       MOV       ?V5,#(defaultTCLinkKey >> 8) & 0xff
   \   00003C   8019         SJMP      ??ZDSecMgrReadKeyFromNv_6
   3460              return ZSuccess;
   3461            }
   3462            
   3463          #if (ZG_BUILD_JOINING_TYPE) 
   3464            else if(keyNvId == ZCD_NV_DISTRIBUTED_KEY)
   \                     ??ZDSecMgrReadKeyFromNv_5:
   \   00003E   7468         MOV       A,#0x68
   \   000040   6A           XRL       A,R2
   \   000041   4B           ORL       A,R3
   \   000042   702D         JNZ       ??ZDSecMgrReadKeyFromNv_7
   3465            {
   3466              if(ZG_DEVICE_JOINING_TYPE)
   \   000044   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000047   E0           MOVX      A,@DPTR
   \   000048   6401         XRL       A,#0x1
   \   00004A   6005         JZ        ??ZDSecMgrReadKeyFromNv_8
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   6402         XRL       A,#0x2
   \   00004F   706C         JNZ       ??ZDSecMgrReadKeyFromNv_9
   3467              {
   3468                osal_memcpy(keyinfo,distributedDefaultKey,SEC_KEY_LEN);
   \                     ??ZDSecMgrReadKeyFromNv_8:
   \   000051                ; Setup parameters for call to function osal_memcpy
   \   000051   75....       MOV       ?V4,#distributedDefaultKey & 0xff
   \   000054   75....       MOV       ?V5,#(distributedDefaultKey >> 8) & 0xff
   \                     ??ZDSecMgrReadKeyFromNv_6:
   \   000057   75..80       MOV       ?V6,#-0x80
   \   00005A   78..         MOV       R0,#?V4
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00005F   7C10         MOV       R4,#0x10
   \   000061   7D00         MOV       R5,#0x0
   \   000063   AA..         MOV       R2,?V0
   \   000065   AB..         MOV       R3,?V1
   \   000067   12....       LCALL     ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   00006A   12....       LCALL     ?DEALLOC_XSTACK8
   3469                return ZSuccess;
   \   00006D   7900         MOV       R1,#0x0
   \   00006F   804E         SJMP      ??ZDSecMgrReadKeyFromNv_10
   3470              }
   3471            }
   3472          #endif
   3473            
   3474            else if((keyNvId == ZCD_NV_TCLK_JOIN_DEV) || (keyNvId == ZCD_NV_PRECFGKEY)) 
   \                     ??ZDSecMgrReadKeyFromNv_7:
   \   000071   7402         MOV       A,#0x2
   \   000073   6A           XRL       A,R2
   \   000074   7003         JNZ       ??ZDSecMgrReadKeyFromNv_11
   \   000076   7401         MOV       A,#0x1
   \   000078   6B           XRL       A,R3
   \                     ??ZDSecMgrReadKeyFromNv_11:
   \   000079   6026         JZ        ??ZDSecMgrReadKeyFromNv_12
   \   00007B   7462         MOV       A,#0x62
   \   00007D   6A           XRL       A,R2
   \   00007E   4B           ORL       A,R3
   \   00007F   6020         JZ        ??ZDSecMgrReadKeyFromNv_12
   3475            {
   3476              // Read entry keyNvId of the TC link key table from NV. keyNvId should be
   3477              // ZCD_NV_TCLK_TABLE_START + <offset_in_table>
   3478              return (osal_nv_read(keyNvId,
   3479                                   0,
   3480                                   SEC_KEY_LEN,
   3481                                   keyinfo));
   \   000081                ; Setup parameters for call to function osal_nv_read
   3482            }
   3483              else if (keyNvId == ZCD_NV_PRECFGKEY)
   3484            {
   3485              // Read entry keyNvId of the Preconfig key from NV.
   3486              return (osal_nv_read(keyNvId,
   3487                                   0,
   3488                                   SEC_KEY_LEN,
   3489                                   keyinfo));
   3490            }
   3491          
   3492            else if((keyNvId >= ZCD_NV_TCLK_IC_TABLE_START) &&
   3493                     (keyNvId < (ZCD_NV_TCLK_IC_TABLE_START + gZDSECMGR_TC_DEVICE_IC_MAX)))
   \   000081   EA           MOV       A,R2
   \   000082   24FC         ADD       A,#-0x4
   \   000084   F8           MOV       R0,A
   \   000085   EB           MOV       A,R3
   \   000086   34FE         ADDC      A,#-0x2
   \   000088   F9           MOV       R1,A
   \   000089   C3           CLR       C
   \   00008A   E8           MOV       A,R0
   \   00008B   940C         SUBB      A,#0xc
   \   00008D   E9           MOV       A,R1
   \   00008E   9400         SUBB      A,#0x0
   \   000090   400F         JC        ??ZDSecMgrReadKeyFromNv_12
   3494            {
   3495              //Read the key derived from the IC
   3496              return (osal_nv_read(keyNvId,
   3497                                   0,
   3498                                   SEC_KEY_LEN,
   3499                                   keyinfo));
   \   000092                ; Setup parameters for call to function osal_nv_read
   3500            
   3501            }
   3502            else if ((keyNvId >= ZCD_NV_APS_LINK_KEY_DATA_START) &&
   3503                     (keyNvId < (ZCD_NV_APS_LINK_KEY_DATA_START + ZDSECMGR_ENTRY_MAX)))
   \   000092   EA           MOV       A,R2
   \   000093   24FF         ADD       A,#-0x1
   \   000095   F8           MOV       R0,A
   \   000096   EB           MOV       A,R3
   \   000097   34FD         ADDC      A,#-0x3
   \   000099   F9           MOV       R1,A
   \   00009A   C3           CLR       C
   \   00009B   E8           MOV       A,R0
   \   00009C   12....       LCALL     ??Subroutine100_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   00009F   501C         JNC       ??ZDSecMgrReadKeyFromNv_9
   3504            {
   3505              // Read entry keyNvId of the APS link key table from NV. keyNvId should be
   3506              // ZCD_NV_APS_LINK_KEY_DATA_START + <offset_in_table>
   3507              return (osal_nv_read(keyNvId,
   3508                                   osal_offsetof(APSME_LinkKeyData_t, key),
   3509                                   SEC_KEY_LEN,
   3510                                   keyinfo));
   \   0000A1                ; Setup parameters for call to function osal_nv_read
   \                     ??ZDSecMgrReadKeyFromNv_12:
   \   0000A1   78..         MOV       R0,#?V0
   \   0000A3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A6   75..10       MOV       ?V0,#0x10
   \   0000A9   75..00       MOV       ?V1,#0x0
   \   0000AC   78..         MOV       R0,#?V0
   \   0000AE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B1   7C00         MOV       R4,#0x0
   \                     ??ZDSecMgrReadKeyFromNv_3:
   \   0000B3   7D00         MOV       R5,#0x0
   3511            }
   \   0000B5   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   0000B8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BB   8002         SJMP      ??ZDSecMgrReadKeyFromNv_10
   3512          
   3513            return NV_OPER_FAILED;
   \                     ??ZDSecMgrReadKeyFromNv_9:
   \   0000BD   790A         MOV       R1,#0xa
   \                     ??ZDSecMgrReadKeyFromNv_10:
   \   0000BF   02....       LJMP      ??Subroutine122_0 & 0xFFFF
   3514          }
   3515          
   3516          /******************************************************************************
   3517           * @fn          ZDSecMgrApsLinkKeyInit
   3518           *
   3519           * @brief       Initialize the NV table for Application link keys
   3520           *
   3521           * @param       setDefault - TRUE to set default values
   3522           *
   3523           * @return      none
   3524           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3525          void ZDSecMgrApsLinkKeyInit(uint8 setDefault)
   \                     ZDSecMgrApsLinkKeyInit:
   3526          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV       A,#-0x18
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FF           MOV       R7,A
   3527            APSME_LinkKeyData_t pApsLinkKey;
   3528            uint8 i;
   3529            uint8 status;
   3530          
   3531            // Initialize all NV items for APS link key, if not exist already.
   3532            osal_memset( &pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   00000C                ; Setup parameters for call to function osal_memset
   \   00000C   7C18         MOV       R4,#0x18
   \   00000E   7D00         MOV       R5,#0x0
   \   000010   7900         MOV       R1,#0x0
   \   000012   AA..         MOV       R2,?XSP + 0
   \   000014   AB..         MOV       R3,?XSP + 1
   \   000016   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3533          
   3534            for( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   000019   7E00         MOV       R6,#0x0
   3535            {
   3536              status = osal_nv_item_init( (ZCD_NV_APS_LINK_KEY_DATA_START + i),
   3537                                         sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
   3538          
   3539          #if defined ( NV_RESTORE )
   3540            // If the set default is requested, the APS Link key needs to be erased, regardless of the NV_RESTORE enabled
   3541                if ((status == SUCCESS) && (setDefault == TRUE ))
   \                     ??ZDSecMgrApsLinkKeyInit_0:
   \   00001B                ; Setup parameters for call to function osal_nv_item_init
   \   00001B   A8..         MOV       R0,?XSP + 0
   \   00001D   A9..         MOV       R1,?XSP + 1
   \   00001F   88..         MOV       ?V0,R0
   \   000021   89..         MOV       ?V1,R1
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   7C18         MOV       R4,#0x18
   \   00002A   7D00         MOV       R5,#0x0
   \   00002C   EE           MOV       A,R6
   \   00002D   2401         ADD       A,#0x1
   \   00002F   FA           MOV       R2,A
   \   000030   E4           CLR       A
   \   000031   3402         ADDC      A,#0x2
   \   000033   FB           MOV       R3,A
   \   000034   12....       LCALL     ??Subroutine133_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   000037   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003A   E9           MOV       A,R1
   \   00003B   7027         JNZ       ??ZDSecMgrApsLinkKeyInit_1
   \   00003D   7401         MOV       A,#0x1
   \   00003F   6F           XRL       A,R7
   \   000040   7022         JNZ       ??ZDSecMgrApsLinkKeyInit_1
   3542                {
   3543                  osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
   3544                                sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
   \   000042                ; Setup parameters for call to function osal_nv_write
   \   000042   78..         MOV       R0,#?V0
   \   000044   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000047   75..18       MOV       ?V0,#0x18
   \   00004A   75..00       MOV       ?V1,#0x0
   \   00004D   78..         MOV       R0,#?V0
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000052   7C00         MOV       R4,#0x0
   \   000054   7D00         MOV       R5,#0x0
   \   000056   EE           MOV       A,R6
   \   000057   2401         ADD       A,#0x1
   \   000059   FA           MOV       R2,A
   \   00005A   E4           CLR       A
   \   00005B   3402         ADDC      A,#0x2
   \   00005D   FB           MOV       R3,A
   \   00005E   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   3545          
   3546                }
   3547          #else
   3548              // reset the values of NV items if NV_RESTORE is not enabled
   3549              if (status == SUCCESS)
   3550              {
   3551                osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
   3552                              sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
   3553          
   3554              }
   3555          #endif // defined (NV_RESTORE)
   3556            }
   \                     ??CrossCallReturnLabel_331:
   \   000061   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDSecMgrApsLinkKeyInit_1:
   \   000064   0E           INC       R6
   \   000065   EE           MOV       A,R6
   \   000066   C3           CLR       C
   \   000067   9403         SUBB      A,#0x3
   \   000069   40B0         JC        ??ZDSecMgrApsLinkKeyInit_0
   3557          }
   \   00006B   7418         MOV       A,#0x18
   \   00006D   02....       LJMP      ??Subroutine116_0 & 0xFFFF
   3558          
   3559          
   3560          /******************************************************************************
   3561           * @fn          ZDSecMgrInitNVKeyTables
   3562           *
   3563           * @brief       Initialize the NV table for All keys: NWK, Master, TCLK and APS
   3564           *
   3565           * @param       setDefault - TRUE to set default values
   3566           *
   3567           * @return      none
   3568           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3569          void ZDSecMgrInitNVKeyTables(uint8 setDefault)
   \                     ZDSecMgrInitNVKeyTables:
   3570          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3571            ZDSecMgrNwkKeyInit(setDefault);
   \   000007                ; Setup parameters for call to function ZDSecMgrNwkKeyInit
   \   000007   12....       LCALL     `??ZDSecMgrNwkKeyInit::?relay`; Banked call to: ZDSecMgrNwkKeyInit
   3572            ZDSecMgrApsLinkKeyInit(setDefault); 
   \   00000A                ; Setup parameters for call to function ZDSecMgrApsLinkKeyInit
   \   00000A   EE           MOV       A,R6
   \   00000B   F9           MOV       R1,A
   \   00000C   12....       LCALL     `??ZDSecMgrApsLinkKeyInit::?relay`; Banked call to: ZDSecMgrApsLinkKeyInit
   3573            APSME_TCLinkKeyInit(setDefault);
   \   00000F                ; Setup parameters for call to function APSME_TCLinkKeyInit
   \   00000F   EE           MOV       A,R6
   \   000010   F9           MOV       R1,A
   \   000011   12....       LCALL     `??APSME_TCLinkKeyInit::?relay`; Banked call to: APSME_TCLinkKeyInit
   3574            
   3575          #if ZG_BUILD_COORDINATOR_TYPE
   3576            if(ZG_DEVICE_COORDINATOR_TYPE)
   \   000014   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000017   E0           MOVX      A,@DPTR
   \   000018   7005         JNZ       ??ZDSecMgrInitNVKeyTables_0
   3577            {
   3578              ZDSecMgrGenerateSeed(setDefault);
   \   00001A                ; Setup parameters for call to function ZDSecMgrGenerateSeed
   \   00001A   EE           MOV       A,R6
   \   00001B   F9           MOV       R1,A
   \   00001C   12....       LCALL     `??ZDSecMgrGenerateSeed::?relay`; Banked call to: ZDSecMgrGenerateSeed
   3579              
   3580            }
   3581          #endif
   3582          }
   \                     ??ZDSecMgrInitNVKeyTables_0:
   \   00001F   02....       LJMP      ??Subroutine115_0 & 0xFFFF
   3583          
   3584          
   3585          /******************************************************************************
   3586           * @fn          ZDSecMgrSaveApsLinkKey
   3587           *
   3588           * @brief       Save APS Link Key to NV. It will loop through all the keys
   3589           *              to see which one to save.
   3590           *
   3591           * @param       none
   3592           *
   3593           * @return      none
   3594           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3595          void ZDSecMgrSaveApsLinkKey(void)
   \                     ZDSecMgrSaveApsLinkKey:
   3596          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   3597            APSME_LinkKeyData_t *pKeyData = NULL;
   3598            int i;
   3599          
   3600            pKeyData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005   12....       LCALL     ?Subroutine50 & 0xFFFF
   3601          
   3602            if (pKeyData != NULL)
   \                     ??CrossCallReturnLabel_280:
   \   000008   7003         JNZ       $+5
   \   00000A   02....       LJMP      ??CrossCallReturnLabel_94 & 0xFFFF
   3603            {
   3604              // checks all pending flags to know which one to save
   3605              for (i = 0; i < ZDSECMGR_ENTRY_MAX; i++)
   \   00000D   7E00         MOV       R6,#0x0
   \   00000F   7F00         MOV       R7,#0x0
   3606              {
   3607                if (ApsLinkKeyFrmCntr[i].pendingFlag == TRUE)
   \                     ??ZDSecMgrSaveApsLinkKey_0:
   \   000011   EE           MOV       A,R6
   \   000012   F8           MOV       R0,A
   \   000013   EF           MOV       A,R7
   \   000014   F9           MOV       R1,A
   \   000015   E8           MOV       A,R0
   \   000016   75..09       MOV       ?B,#0x9
   \   000019   A4           MUL       AB
   \   00001A   F8           MOV       R0,A
   \   00001B   AA..         MOV       R2,?B
   \   00001D   75..09       MOV       ?B,#0x9
   \   000020   E9           MOV       A,R1
   \   000021   A4           MUL       AB
   \   000022   2A           ADD       A,R2
   \   000023   F9           MOV       R1,A
   \   000024   74..         MOV       A,#(ApsLinkKeyFrmCntr + 8) & 0xff
   \   000026   28           ADD       A,R0
   \   000027   F582         MOV       DPL,A
   \   000029   74..         MOV       A,#((ApsLinkKeyFrmCntr + 8) >> 8) & 0xff
   \   00002B   39           ADDC      A,R1
   \   00002C   F583         MOV       DPH,A
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   6401         XRL       A,#0x1
   \   000031   6003         JZ        $+5
   \   000033   02....       LJMP      ??ZDSecMgrSaveApsLinkKey_1 & 0xFFFF
   3608                {
   3609                  // retrieve key from NV
   3610                  if (osal_nv_read(ZCD_NV_APS_LINK_KEY_DATA_START + i, 0,
   3611                                   sizeof(APSME_LinkKeyData_t), pKeyData) == SUCCESS)
   \   000036                ; Setup parameters for call to function osal_nv_read
   \   000036   78..         MOV       R0,#?V2
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   75..18       MOV       ?V0,#0x18
   \   00003E   75..00       MOV       ?V1,#0x0
   \   000041   78..         MOV       R0,#?V0
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000046   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000049   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   00004C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004F   E9           MOV       A,R1
   \   000050   706A         JNZ       ??ZDSecMgrSaveApsLinkKey_1
   3612                  {
   3613                    pKeyData->txFrmCntr = ApsLinkKeyFrmCntr[i].txFrmCntr;
   \   000052   EE           MOV       A,R6
   \   000053   F8           MOV       R0,A
   \   000054   EF           MOV       A,R7
   \   000055   F9           MOV       R1,A
   \   000056   E8           MOV       A,R0
   \   000057   75..09       MOV       ?B,#0x9
   \   00005A   A4           MUL       AB
   \   00005B   F8           MOV       R0,A
   \   00005C   AA..         MOV       R2,?B
   \   00005E   75..09       MOV       ?B,#0x9
   \   000061   E9           MOV       A,R1
   \   000062   A4           MUL       AB
   \   000063   2A           ADD       A,R2
   \   000064   F9           MOV       R1,A
   \   000065   74..         MOV       A,#ApsLinkKeyFrmCntr & 0xff
   \   000067   28           ADD       A,R0
   \   000068   F5..         MOV       ?V0,A
   \   00006A   74..         MOV       A,#(ApsLinkKeyFrmCntr >> 8) & 0xff
   \   00006C   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00006F   12....       LCALL     ?XLOAD_R0123
   \   000072   E5..         MOV       A,?V2
   \   000074   2410         ADD       A,#0x10
   \   000076   F582         MOV       DPL,A
   \   000078   E4           CLR       A
   \   000079   35..         ADDC      A,?V3
   \   00007B   F583         MOV       DPH,A
   \   00007D   12....       LCALL     ?XSTORE_R0123
   3614                    pKeyData->rxFrmCntr = ApsLinkKeyFrmCntr[i].rxFrmCntr;
   \   000080   85..82       MOV       DPL,?V0
   \   000083   85..83       MOV       DPH,?V1
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   12....       LCALL     ?XLOAD_R0123
   \   00008D   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000090   12....       LCALL     ?XSTORE_R0123
   3615          
   3616                    // Write the APS link key back to the NV
   3617                    osal_nv_write(ZCD_NV_APS_LINK_KEY_DATA_START + i, 0,
   3618                                  sizeof(APSME_LinkKeyData_t), pKeyData);
   \   000093                ; Setup parameters for call to function osal_nv_write
   \   000093   78..         MOV       R0,#?V2
   \   000095   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000098   75..18       MOV       ?V4,#0x18
   \   00009B   75..00       MOV       ?V5,#0x0
   \   00009E   78..         MOV       R0,#?V4
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A3   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   0000A6   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   0000A9   12....       LCALL     ?DEALLOC_XSTACK8
   3619          
   3620                    // clear the pending write flag
   3621                    ApsLinkKeyFrmCntr[i].pendingFlag = FALSE;
   \   0000AC   85..82       MOV       DPL,?V0
   \   0000AF   85..83       MOV       DPH,?V1
   \   0000B2   A3           INC       DPTR
   \   0000B3   A3           INC       DPTR
   \   0000B4   A3           INC       DPTR
   \   0000B5   A3           INC       DPTR
   \   0000B6   A3           INC       DPTR
   \   0000B7   A3           INC       DPTR
   \   0000B8   A3           INC       DPTR
   \   0000B9   A3           INC       DPTR
   \   0000BA   E4           CLR       A
   \   0000BB   F0           MOVX      @DPTR,A
   3622                  }
   3623                }
   3624              }
   \                     ??ZDSecMgrSaveApsLinkKey_1:
   \   0000BC   0E           INC       R6
   \   0000BD   EE           MOV       A,R6
   \   0000BE   7001         JNZ       ??ZDSecMgrSaveApsLinkKey_2
   \   0000C0   0F           INC       R7
   \                     ??ZDSecMgrSaveApsLinkKey_2:
   \   0000C1   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0000C4   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0000C6   65D0         XRL       A,PSW
   \   0000C8   33           RLC       A
   \   0000C9   5003         JNC       $+5
   \   0000CB   02....       LJMP      ??ZDSecMgrSaveApsLinkKey_0 & 0xFFFF
   3625          
   3626              // clear copy of key in RAM
   3627              osal_memset( pKeyData, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   0000CE                ; Setup parameters for call to function osal_memset
   \   0000CE   12....       LCALL     ?Subroutine62 & 0xFFFF
   3628          
   3629              osal_mem_free(pKeyData);
   3630            }
   3631          }
   \                     ??CrossCallReturnLabel_94:
   \   0000D1                REQUIRE ?Subroutine6
   \   0000D1                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   39           ADDC      A,R1
   \   000001   F5..         MOV       ?V1,A
   \   000003   85..82       MOV       DPL,?V0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET
   3632          
   3633          /******************************************************************************
   3634           * @fn          ZDSecMgrSaveTCLinkKey
   3635           *
   3636           * @brief       Save TC Link Key to NV. It will loop through all the keys
   3637           *              to see which one to save.
   3638           *
   3639           * @param       none
   3640           *
   3641           * @return      none
   3642           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3643          void ZDSecMgrSaveTCLinkKey(void)
   \                     ZDSecMgrSaveTCLinkKey:
   3644          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   3645            APSME_TCLKDevEntry_t *pKeyData = NULL;
   3646            uint16 i;
   3647          
   3648            pKeyData = (APSME_TCLKDevEntry_t *)osal_mem_alloc(sizeof(APSME_TCLKDevEntry_t));
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005   7A13         MOV       R2,#0x13
   \   000007   12....       LCALL     ??Subroutine123_0 & 0xFFFF
   3649          
   3650            if (pKeyData != NULL)
   \                     ??CrossCallReturnLabel_281:
   \   00000A   7003         JNZ       $+5
   \   00000C   02....       LJMP      ??ZDSecMgrSaveTCLinkKey_0 & 0xFFFF
   3651            {
   3652              for( i = 0; i < gZDSECMGR_TC_DEVICE_MAX; i++ )
   \   00000F   7E00         MOV       R6,#0x0
   \   000011   7F00         MOV       R7,#0x0
   3653              {
   3654                if (TCLinkKeyFrmCntr[i].pendingFlag == TRUE)
   \                     ??ZDSecMgrSaveTCLinkKey_1:
   \   000013   EE           MOV       A,R6
   \   000014   F8           MOV       R0,A
   \   000015   EF           MOV       A,R7
   \   000016   F9           MOV       R1,A
   \   000017   E8           MOV       A,R0
   \   000018   75..09       MOV       ?B,#0x9
   \   00001B   A4           MUL       AB
   \   00001C   F8           MOV       R0,A
   \   00001D   AA..         MOV       R2,?B
   \   00001F   75..09       MOV       ?B,#0x9
   \   000022   E9           MOV       A,R1
   \   000023   A4           MUL       AB
   \   000024   2A           ADD       A,R2
   \   000025   F9           MOV       R1,A
   \   000026   74..         MOV       A,#(TCLinkKeyFrmCntr + 8) & 0xff
   \   000028   28           ADD       A,R0
   \   000029   F582         MOV       DPL,A
   \   00002B   74..         MOV       A,#((TCLinkKeyFrmCntr + 8) >> 8) & 0xff
   \   00002D   39           ADDC      A,R1
   \   00002E   F583         MOV       DPH,A
   \   000030   E0           MOVX      A,@DPTR
   \   000031   6401         XRL       A,#0x1
   \   000033   6003         JZ        $+5
   \   000035   02....       LJMP      ??ZDSecMgrSaveTCLinkKey_2 & 0xFFFF
   3655                {
   3656                  if (osal_nv_read(ZCD_NV_TCLK_TABLE_START + i, 0,
   3657                                   sizeof(APSME_TCLKDevEntry_t), pKeyData) == SUCCESS)
   \   000038                ; Setup parameters for call to function osal_nv_read
   \   000038   78..         MOV       R0,#?V2
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   75..13       MOV       ?V0,#0x13
   \   000040   75..00       MOV       ?V1,#0x0
   \   000043   78..         MOV       R0,#?V0
   \   000045   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000048   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   00004B   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   00004E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000051   E9           MOV       A,R1
   \   000052   706C         JNZ       ??ZDSecMgrSaveTCLinkKey_2
   3658                  {
   3659                    pKeyData->txFrmCntr = TCLinkKeyFrmCntr[i].txFrmCntr;
   \   000054   EE           MOV       A,R6
   \   000055   F8           MOV       R0,A
   \   000056   EF           MOV       A,R7
   \   000057   F9           MOV       R1,A
   \   000058   E8           MOV       A,R0
   \   000059   75..09       MOV       ?B,#0x9
   \   00005C   A4           MUL       AB
   \   00005D   F8           MOV       R0,A
   \   00005E   AA..         MOV       R2,?B
   \   000060   75..09       MOV       ?B,#0x9
   \   000063   E9           MOV       A,R1
   \   000064   A4           MUL       AB
   \   000065   2A           ADD       A,R2
   \   000066   F9           MOV       R1,A
   \   000067   74..         MOV       A,#TCLinkKeyFrmCntr & 0xff
   \   000069   28           ADD       A,R0
   \   00006A   F5..         MOV       ?V0,A
   \   00006C   74..         MOV       A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   00006E   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000071   12....       LCALL     ?XLOAD_R0123
   \   000074   85..82       MOV       DPL,?V2
   \   000077   85..83       MOV       DPH,?V3
   \   00007A   12....       LCALL     ?XSTORE_R0123
   3660                    pKeyData->rxFrmCntr = TCLinkKeyFrmCntr[i].rxFrmCntr;
   \   00007D   85..82       MOV       DPL,?V0
   \   000080   85..83       MOV       DPH,?V1
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   12....       LCALL     ?XLOAD_R0123
   \   00008A   85..82       MOV       DPL,?V2
   \   00008D   85..83       MOV       DPH,?V3
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   12....       LCALL     ?XSTORE_R0123
   3661          
   3662                    // Write the TC link key back to the NV
   3663                    osal_nv_write(ZCD_NV_TCLK_TABLE_START + i, 0,
   3664                                  sizeof(APSME_TCLKDevEntry_t), pKeyData);
   \   000097                ; Setup parameters for call to function osal_nv_write
   \   000097   78..         MOV       R0,#?V2
   \   000099   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009C   75..13       MOV       ?V4,#0x13
   \   00009F   75..00       MOV       ?V5,#0x0
   \   0000A2   78..         MOV       R0,#?V4
   \   0000A4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A7   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_358:
   \   0000AA   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   0000AD   12....       LCALL     ?DEALLOC_XSTACK8
   3665          
   3666                    // clear the pending write flag
   3667                    TCLinkKeyFrmCntr[i].pendingFlag = FALSE;
   \   0000B0   85..82       MOV       DPL,?V0
   \   0000B3   85..83       MOV       DPH,?V1
   \   0000B6   A3           INC       DPTR
   \   0000B7   A3           INC       DPTR
   \   0000B8   A3           INC       DPTR
   \   0000B9   A3           INC       DPTR
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   E4           CLR       A
   \   0000BF   F0           MOVX      @DPTR,A
   3668                  }
   3669                }
   3670              }
   \                     ??ZDSecMgrSaveTCLinkKey_2:
   \   0000C0   0E           INC       R6
   \   0000C1   EE           MOV       A,R6
   \   0000C2   7001         JNZ       ??ZDSecMgrSaveTCLinkKey_3
   \   0000C4   0F           INC       R7
   \                     ??ZDSecMgrSaveTCLinkKey_3:
   \   0000C5   C3           CLR       C
   \   0000C6   941E         SUBB      A,#0x1e
   \   0000C8   EF           MOV       A,R7
   \   0000C9   9400         SUBB      A,#0x0
   \   0000CB   5003         JNC       $+5
   \   0000CD   02....       LJMP      ??ZDSecMgrSaveTCLinkKey_1 & 0xFFFF
   3671          
   3672              osal_mem_free(pKeyData);
   \   0000D0                ; Setup parameters for call to function osal_mem_free
   \   0000D0   AA..         MOV       R2,?V2
   \   0000D2   AB..         MOV       R3,?V3
   \   0000D4   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3673            }
   3674          }
   \                     ??ZDSecMgrSaveTCLinkKey_0:
   \   0000D7   02....       LJMP      ?Subroutine6 & 0xFFFF
   3675          
   3676          /******************************************************************************
   3677           * @fn          ZDSecMgrUpdateTCAddress
   3678           *
   3679           * @brief       Update Trust Center address and save to NV.
   3680           *
   3681           * @param       extAddr - [in] extended address or NULL if no TC protected
   3682           *
   3683           * @return      none
   3684           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3685          void ZDSecMgrUpdateTCAddress( uint8 *extAddr )
   \                     ZDSecMgrUpdateTCAddress:
   3686          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3687            uint8 noTCAddress[Z_EXTADDR_LEN] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
   \   00000A   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   7408         MOV       A,#0x8
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   3688            APSME_SetRequest( apsTrustCenterAddress, 0, ( extAddr != NULL) ? extAddr : noTCAddress );
   \   000016   EA           MOV       A,R2
   \   000017   4B           ORL       A,R3
   \   000018   6006         JZ        ??ZDSecMgrUpdateTCAddress_0
   \   00001A   EA           MOV       A,R2
   \   00001B   FE           MOV       R6,A
   \   00001C   EB           MOV       A,R3
   \   00001D   FF           MOV       R7,A
   \   00001E   800C         SJMP      ??ZDSecMgrUpdateTCAddress_1
   \                     ??ZDSecMgrUpdateTCAddress_0:
   \   000020   A8..         MOV       R0,?XSP + 0
   \   000022   A9..         MOV       R1,?XSP + 1
   \   000024   88..         MOV       ?V0,R0
   \   000026   89..         MOV       ?V1,R1
   \   000028   AE..         MOV       R6,?V0
   \   00002A   AF..         MOV       R7,?V1
   \                     ??ZDSecMgrUpdateTCAddress_1:
   \   00002C                ; Setup parameters for call to function APSME_SetRequest
   \   00002C   EE           MOV       A,R6
   \   00002D   FC           MOV       R4,A
   \   00002E   EF           MOV       A,R7
   \   00002F   FD           MOV       R5,A
   \   000030   7A00         MOV       R2,#0x0
   \   000032   7B00         MOV       R3,#0x0
   \   000034   79AB         MOV       R1,#-0x55
   \   000036   12....       LCALL     `??APSME_SetRequest::?relay`; Banked call to: APSME_SetRequest
   3689            osal_cpyExtAddr( zgApsTrustCenterAddr, ( extAddr != NULL) ? extAddr : noTCAddress );
   \   000039   EE           MOV       A,R6
   \   00003A   FC           MOV       R4,A
   \   00003B   EF           MOV       A,R7
   \   00003C   FD           MOV       R5,A
   \   00003D                ; Setup parameters for call to function sAddrExtCpy
   \   00003D   7A..         MOV       R2,#zgApsTrustCenterAddr & 0xff
   \   00003F   7B..         MOV       R3,#(zgApsTrustCenterAddr >> 8) & 0xff
   \   000041   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3690            
   3691          #if defined ( NV_RESTORE )
   3692            osal_nv_write( ZCD_NV_TRUSTCENTER_ADDR, 0, Z_EXTADDR_LEN, zgApsTrustCenterAddr );
   \   000044                ; Setup parameters for call to function osal_nv_write
   \   000044   75....       MOV       ?V0,#zgApsTrustCenterAddr & 0xff
   \   000047   75....       MOV       ?V1,#(zgApsTrustCenterAddr >> 8) & 0xff
   \   00004A   78..         MOV       R0,#?V0
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004F   75..08       MOV       ?V0,#0x8
   \   000052   75..00       MOV       ?V1,#0x0
   \   000055   78..         MOV       R0,#?V0
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005A   7C00         MOV       R4,#0x0
   \   00005C   7D00         MOV       R5,#0x0
   \   00005E   7A71         MOV       R2,#0x71
   \   000060   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   000063   12....       LCALL     ?DEALLOC_XSTACK8
   3693          #endif
   3694          }
   \   000066   7408         MOV       A,#0x8
   \   000068   02....       LJMP      ??Subroutine116_0 & 0xFFFF
   3695          
   3696          #if defined ( ZBA_FALLBACK_NWKKEY )
   3697          /******************************************************************************
   3698           * @fn          ZDSecMgrFallbackNwkKey
   3699           *
   3700           * @brief       Use the ZBA fallback network key.
   3701           *
   3702           * @param       none
   3703           *
   3704           * @return      none
   3705           */
   3706          void ZDSecMgrFallbackNwkKey( void )
   3707          {
   3708            if ( !_NIB.nwkKeyLoaded )
   3709            {
   3710              uint8 fallbackKey[SEC_KEY_LEN];
   3711          
   3712              ZDSecMgrReadKeyFromNv( ZCD_NV_PRECFGKEY, fallbackKey );
   3713              SSP_UpdateNwkKey( fallbackKey, 0);
   3714              SSP_SwitchNwkKey( 0 );
   3715          
   3716              // clear local copy of key
   3717              osal_memset( fallbackKey, 0x00, SEC_KEY_LEN );
   3718          
   3719              // handle next step in authentication process
   3720              ZDSecMgrAuthNwkKey();
   3721            }
   3722          }
   3723          #endif // defined ( ZBA_FALLBACK_NWKKEY )
   3724          
   3725          #if defined ( NV_RESTORE )
   3726          /******************************************************************************
   3727           * @fn          ZDSecMgrClearNVKeyValues
   3728           *
   3729           * @brief       If NV_RESTORE is enabled and the status of the network needs
   3730           *              default values this fuction clears ZCD_NV_NWKKEY,
   3731           *              ZCD_NV_NWK_ACTIVE_KEY_INFO and ZCD_NV_NWK_ALTERN_KEY_INFO link
   3732           *
   3733           * @param       none
   3734           *
   3735           * @return      none
   3736           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3737          void ZDSecMgrClearNVKeyValues(void)
   \                     ZDSecMgrClearNVKeyValues:
   3738          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 38
   \   000005   74DA         MOV       A,#-0x26
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3739            nwkActiveKeyItems keyItems;
   3740            nwkKeyDesc nwkKey;
   3741          
   3742            osal_memset(&keyItems, 0x00, sizeof(nwkActiveKeyItems));
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV       R4,#0x15
   \   00000C   7D00         MOV       R5,#0x0
   \   00000E   7900         MOV       R1,#0x0
   \   000010   7411         MOV       A,#0x11
   \   000012   12....       LCALL     ?XSTACK_DISP101_8
   \   000015   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3743          
   3744            osal_nv_write(ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems);
   \   000018                ; Setup parameters for call to function osal_nv_write
   \   000018   7411         MOV       A,#0x11
   \   00001A   12....       LCALL     ?XSTACK_DISP100_8
   \   00001D   88..         MOV       ?V0,R0
   \   00001F   89..         MOV       ?V1,R1
   \   000021   78..         MOV       R0,#?V0
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000026   75..15       MOV       ?V0,#0x15
   \   000029   75..00       MOV       ?V1,#0x0
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   7C00         MOV       R4,#0x0
   \   000033   7D00         MOV       R5,#0x0
   \   000035   7A82         MOV       R2,#-0x7e
   \   000037   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   00003A   12....       LCALL     ?DEALLOC_XSTACK8
   3745          
   3746            // Initialize NV items for NWK Active and Alternate keys.
   3747            osal_memset( &nwkKey, 0x00, sizeof(nwkKeyDesc) );
   \   00003D                ; Setup parameters for call to function osal_memset
   \   00003D   7C11         MOV       R4,#0x11
   \   00003F   7D00         MOV       R5,#0x0
   \   000041   7900         MOV       R1,#0x0
   \   000043   AA..         MOV       R2,?XSP + 0
   \   000045   AB..         MOV       R3,?XSP + 1
   \   000047   12....       LCALL     ?Subroutine63 & 0xFFFF
   3748          
   3749            osal_nv_write(ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKeyDesc), &nwkKey);
   \                     ??CrossCallReturnLabel_96:
   \   00004A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004D   75..11       MOV       ?V0,#0x11
   \   000050   75..00       MOV       ?V1,#0x0
   \   000053   78..         MOV       R0,#?V0
   \   000055   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000058   7C00         MOV       R4,#0x0
   \   00005A   7D00         MOV       R5,#0x0
   \   00005C   7A3A         MOV       R2,#0x3a
   \   00005E   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   000061   12....       LCALL     ?DEALLOC_XSTACK8
   3750          
   3751            osal_nv_write(ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKeyDesc), &nwkKey);
   \   000064                ; Setup parameters for call to function osal_nv_write
   \   000064   A8..         MOV       R0,?XSP + 0
   \   000066   A9..         MOV       R1,?XSP + 1
   \   000068   88..         MOV       ?V0,R0
   \   00006A   89..         MOV       ?V1,R1
   \   00006C   78..         MOV       R0,#?V0
   \   00006E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000071   75..11       MOV       ?V0,#0x11
   \   000074   75..00       MOV       ?V1,#0x0
   \   000077   78..         MOV       R0,#?V0
   \   000079   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007C   7C00         MOV       R4,#0x0
   \   00007E   7D00         MOV       R5,#0x0
   \   000080   7A3B         MOV       R2,#0x3b
   \   000082   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   000085   12....       LCALL     ?DEALLOC_XSTACK8
   3752          }
   \   000088   7426         MOV       A,#0x26
   \   00008A   02....       LJMP      ??Subroutine116_0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for requestNewTrustCenterLinkKey`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for requestLinkKeyTimeout>`:
   \   000000   88130000     DD 5000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDSecMgrAppKeyType>`:
   \   000000   03           DB 3

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e9:
   \   000000   E9030000     DD 1001

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_b:
   \   000000   0B000000     DD 11

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_a:
   \   000000   0A000000     DD 10
   3753          #endif // defined ( NV_RESTORE )
   3754          
   3755          /******************************************************************************
   3756          ******************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   APSME_IsDefaultTCLK
        2      0   -> osal_isbufset
      0     37   APSME_IsLinkKeyValid
        0     33   -> APSME_LinkKeyNVIdGet
        0     33   -> osal_mem_alloc
        0     33   -> osal_mem_free
        0     36   -> osal_memcmp
        0     33   -> osal_memset
        0     37   -> osal_nv_read
      0     10   APSME_KeyFwdToChild
        0     10   -> AssocGetWithExt
        0     10   -> ZDSecMgrAssocDeviceAuth
      0     44   APSME_LinkKeyNVIdGet
        0     11   -> ZDSecMgrEntryLookupExt
      0     75   APSME_LinkKeySet
        0     21   -> ZDSecMgrEntryLookupExtGetIndex
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     22   -> osal_memcpy
        0     19   -> osal_memset
        0     23   -> osal_nv_read
        0     23   -> osal_nv_write
      0     48   APSME_TCLinkKeyInit
        0     35   -> APSME_EraseICEntry
        0     35   -> osal_memset
        0     37   -> osal_nv_item_init
        0     39   -> osal_nv_read
        0     39   -> osal_nv_write
      1     53   APSME_TCLinkKeyLoad
        0     51   -> APSME_SearchTCLinkKeyEntry
        0     49   -> AddrMgrEntryLookupNwk
        0     49   -> AddrMgrEntryRelease
        0     49   -> AddrMgrExtAddrValid
        0     52   -> osal_memcpy
        0     49   -> osal_memset
        0     53   -> osal_nv_write
        0     49   -> osal_rand
        0     49   -> osal_set_event
      1     47   APSME_TCLinkKeySync
        0     44   -> APSME_LookupExtAddr
        0     46   -> APSME_SearchTCLinkKeyEntry
        0     44   -> AddrMgrExtAddrValid
        0     44   -> bdb_doTrustCenterRequireKeyExchange
        0     47   -> osal_memcpy
        0     44   -> osal_memset
      2     10   ZDSecMgrAPSRemove
        2      8   -> ZDSecMgrDeviceRemove
      0     18   ZDSecMgrAddLinkKey
        0     14   -> APSME_LinkKeySet
        0     16   -> ZDSecMgrAddrStore
        0     14   -> ZDSecMgrAuthenticationSet
        0     14   -> ZDSecMgrEntryLookupAMI
        0     14   -> ZDSecMgrEntryNew
        0     14   -> ZDSecMgrWriteNV
      0     57   ZDSecMgrAddrClear
        0     24   -> AddrMgrEntryRelease
        0     24   -> ZDSecMgrExtAddrLookup
      0     76   ZDSecMgrAddrStore
        0     22   -> AddrMgrEntryUpdate
        0     22   -> AddrMgrExtAddrSet
      3      6   ZDSecMgrAppConfKeyReq
        2      6   -> APSME_ConfirmKeyReq
      3     57   ZDSecMgrAppKeyGet
        2      0   -> SSP_GetTrueRand
      0     57   ZDSecMgrAppKeyReq
        0     49   -> APSME_LookupExtAddr
        0     49   -> APSME_LookupNwkAddr
        0     49   -> APSME_TransportKeyReq
        0     57   -> ZDSecMgrAppKeyGet
        0     49   -> osal_memset
      2      0   ZDSecMgrAppKeyTypeSet
      0     47   ZDSecMgrApsLinkKeyInit
        0     34   -> osal_memset
        0     36   -> osal_nv_item_init
        0     38   -> osal_nv_write
      2     33   ZDSecMgrAssocDeviceAuth
      2     52   ZDSecMgrAuthNwkKey
        2      0   -> osal_set_event
      0     22   ZDSecMgrAuthenticationCheck
        0     22   -> APSME_GetRequest
        0     22   -> AddrMgrExtAddrLookup
        0     22   -> NLME_GetExtAddr
        0     22   -> ZDSecMgrEntryLookupExt
        0     22   -> ZDSecMgrExtAddrLookup
        0     22   -> sAddrExtCmp
      1     25   ZDSecMgrAuthenticationSet
        0     11   -> ZDSecMgrEntryLookupExt
      0     52   ZDSecMgrClearNVKeyValues
        0     48   -> osal_memset
        0     52   -> osal_nv_write
      2     10   ZDSecMgrConfig
        2      0   -> APSME_SecurityCM_CD
        2      0   -> APSME_SecurityCM_ED
        2      0   -> APSME_SecurityCM_RD
        2      0   -> SSP_Init
      0     70   ZDSecMgrDeviceJoin
        0     29   -> ZDSecMgrAddrClear
        0     31   -> ZDSecMgrAddrStore
        0     29   -> ZDSecMgrDeviceRemove
        0     29   -> ZDSecMgrDeviceValidate
        0     29   -> ZDSecMgrSendNwkKey
        0     32   -> osal_memcpy
      1     45   ZDSecMgrDeviceJoinDirect
        0     34   -> APSME_SearchTCLinkKeyEntry
        0     32   -> AssocGetWithShort
        0     32   -> NLME_GetShortAddr
        0     32   -> ZDSecMgrAssocDeviceAuth
        0     32   -> ZDSecMgrDeviceJoin
        0     32   -> bdb_TCAddJoiningDevice
        0     36   -> osal_nv_write
      0     38   ZDSecMgrDeviceJoinFwd
        0     27   -> APSME_GetRequest
        0     29   -> APSME_SearchTCLinkKeyEntry
        0     27   -> APSME_UpdateDeviceReq
        0     27   -> AssocGetWithShort
        0     27   -> ZDSecMgrAssocDeviceAuth
      0     42   ZDSecMgrDeviceNew
        0      9   -> APSME_IsDistributedSecurity
        0      9   -> ZDSecMgrDeviceJoinDirect
        0      9   -> ZDSecMgrDeviceJoinFwd
      0     60   ZDSecMgrDeviceRemove
        0     29   -> APSME_GetRequest
        0     29   -> APSME_RemoveDeviceReq
        0     31   -> APSME_SearchTCLinkKeyEntry
        0     29   -> AssocGetWithExt
        0     29   -> NLME_GetShortAddr
        0     29   -> NLME_LeaveReq
      0     11   ZDSecMgrDeviceRemoveByExtAddr
        0     11   -> ZDSecMgrEntryFree
        0     11   -> ZDSecMgrEntryLookupExt
      2     29   ZDSecMgrDeviceValidate
        2      0   -> ZDSecMgrDeviceValidateRM
      2      0   ZDSecMgrDeviceValidateRM
      0     35   ZDSecMgrEntryFree
        0     20   -> ZDSecMgrEntryLookupAMIGetIndex
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     20   -> osal_memset
        0     24   -> osal_nv_read
        0     24   -> osal_nv_write
      0     19   ZDSecMgrEntryInit
        0      9   -> ZDSecMgrRestoreFromNV
        0      9   -> osal_mem_alloc
      0     22   ZDSecMgrEntryLookup
        0     22   -> AddrMgrEntryLookupNwk
      0     61   ZDSecMgrEntryLookupAMI
      0     29   ZDSecMgrEntryLookupAMIGetIndex
      0     33   ZDSecMgrEntryLookupExt
        0     11   -> ZDSecMgrEntryLookupAMI
        0     11   -> ZDSecMgrExtAddrLookup
      0     32   ZDSecMgrEntryLookupExtGetIndex
        0     11   -> ZDSecMgrExtAddrLookup
      0     61   ZDSecMgrEntryNew
      0     74   ZDSecMgrExtAddrLookup
        0     22   -> AddrMgrEntryLookupExt
        0     22   -> AddrMgrExtAddrSet
      0     24   ZDSecMgrExtAddrStore
        0     22   -> AddrMgrEntryUpdate
        0     22   -> AddrMgrExtAddrSet
      0    107   ZDSecMgrGenerateKeyFromSeed
        0     37   -> osal_memcpy
        0     38   -> osal_nv_read
      1     38   ZDSecMgrGenerateRndKey
        0     12   -> osal_rand
      0     39   ZDSecMgrGenerateSeed
        0     26   -> ZDSecMgrGenerateRndKey
        0     26   -> osal_memset
        0     28   -> osal_nv_item_init
        0     30   -> osal_nv_write
      0     10   ZDSecMgrInit
        0     10   -> APSME_IsDistributedSecurity
        0     10   -> APSME_SetRequest
        0     10   -> NLME_GetExtAddr
        0     10   -> ZDSecMgrConfig
        0     10   -> ZDSecMgrEntryInit
      0     16   ZDSecMgrInitNV
        0     14   -> osal_nv_item_init
        0     16   -> osal_nv_write
      0      9   ZDSecMgrInitNVKeyTables
        0      9   -> APSME_TCLinkKeyInit
        0      9   -> ZDSecMgrApsLinkKeyInit
        0      9   -> ZDSecMgrGenerateSeed
        0      9   -> ZDSecMgrNwkKeyInit
      1     33   ZDSecMgrNewDeviceEvent
        0     33   -> AddrMgrEntryGet
        0     33   -> AssocGetWithShort
        0     33   -> AssocRemove
        0     33   -> NLME_GetShortAddr
        0     33   -> ZDSecMgrAddrClear
        0     33   -> ZDSecMgrAssocDeviceAuth
        0     33   -> ZDSecMgrDeviceNew
      0     73   ZDSecMgrNwkKeyInit
        0     60   -> osal_memset
        0     62   -> osal_nv_item_init
        0     64   -> osal_nv_write
        0     60   -> zgReadStartupOptions
      2      0   ZDSecMgrPermitJoining
      2      0   ZDSecMgrPermitJoiningTimeout
      0     71   ZDSecMgrReadKeyFromNv
        0     18   -> osal_memcpy
        0     19   -> osal_nv_read
      0     17   ZDSecMgrRemoveDeviceInd
        0     17   -> APSME_LookupNwkAddr
        0     17   -> NLME_GetShortAddr
        0     17   -> ZDSecMgrDeviceRemove
      2      4   ZDSecMgrRequestAppKey
        2      4   -> APSME_RequestKeyReq
      2      0   ZDSecMgrRequestKeyInd
        2      0   -> ZDSecMgrAppKeyReq
        2      0   -> ZDSecMgrTclkReq
      0     31   ZDSecMgrRestoreFromNV
        0     18   -> osal_mem_alloc
        0     18   -> osal_mem_free
        0     18   -> osal_memset
        0     22   -> osal_nv_read
        0     22   -> osal_nv_write
      0     18   ZDSecMgrSaveApsLinkKey
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
        0     14   -> osal_memset
        0     18   -> osal_nv_read
        0     18   -> osal_nv_write
      0     18   ZDSecMgrSaveTCLinkKey
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
        0     18   -> osal_nv_read
        0     18   -> osal_nv_write
      1     77   ZDSecMgrSendNwkKey
        0     44   -> APSME_TransportKeyReq
        0     44   -> NLME_GetShortAddr
        0     48   -> NLME_ReadNwkKeyInfo
        0     44   -> osal_memset
      0     23   ZDSecMgrSetDefaultNV
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     19   -> osal_memset
        0     23   -> osal_nv_write
      0     25   ZDSecMgrSetupPartner
        0     25   -> AddrMgrEntryUpdate
        0     25   -> AddrMgrExtAddrSet
        0     25   -> AddrMgrExtAddrValid
        0     25   -> ZDP_IEEEAddrReq
        0     25   -> ZDP_NwkAddrReq
      2      0   ZDSecMgrSwitchKeyInd
        2      0   -> SSP_SwitchNwkKey
        2      0   -> ZDApp_NVUpdate
      1     27   ZDSecMgrSwitchNwkKey
        0     27   -> APSME_SwitchKeyReq
        0     27   -> AddrMgrEntryLookupNwk
        0     27   -> ZDApp_NVUpdate
      0     79   ZDSecMgrTCDataLoad
        0     25   -> APSME_IsDistributedSecurity
        0     25   -> AddrMgrEntryLookupExt
        0     27   -> ZDSecMgrAddrStore
        0     25   -> sAddrExtCpy
      0     17   ZDSecMgrTCExtAddrCheck
        0     17   -> APSME_GetRequest
        0     17   -> sAddrExtCmp
      0     71   ZDSecMgrTclkReq
        0     69   -> APSME_LookupExtAddr
        0     69   -> APSME_LookupNwkAddr
        0     71   -> APSME_SearchTCLinkKeyEntry
        0     69   -> APSME_TransportKeyReq
        0     69   -> ZDSecMgrGenerateKeyFromSeed
        0     69   -> osal_memset
      0     56   ZDSecMgrTransportKeyInd
        0     52   -> APSME_EraseICEntry
        0     52   -> APSME_LinkKeySet
        0     54   -> APSME_SearchTCLinkKeyEntry
        0     52   -> SSP_SwitchNwkKey
        0     52   -> SSP_UpdateNwkKey
        0     52   -> ZDP_NwkAddrReq
        0     54   -> ZDSecMgrAddrStore
        0     52   -> ZDSecMgrAuthNwkKey
        0     52   -> ZDSecMgrEntryLookupAMI
        0     52   -> ZDSecMgrEntryNew
        0     52   -> ZDSecMgrExtAddrLookup
        0     52   -> ZDSecMgrReadKeyFromNv
        0     52   -> ZDSecMgrTCDataLoad
        0     52   -> ZDSecMgrUpdateTCAddress
        0     52   -> ZDSecMgrWriteNV
        0     52   -> bdb_tcLinkKeyExchangeAttempt
        0     52   -> osal_isbufset
        0     52   -> osal_memset
        0     54   -> osal_nv_item_init
        0     56   -> osal_nv_write
      1     42   ZDSecMgrUpdateDeviceInd
        0     40   -> APSME_SearchTCLinkKeyEntry
        0     38   -> ZDSecMgrDeviceJoin
        0     38   -> bdb_TCAddJoiningDevice
        0     42   -> osal_nv_write
      1     36   ZDSecMgrUpdateNwkKey
        0     36   -> APSME_TransportKeyReq
        0     36   -> AddrMgrEntryLookupNwk
        0     36   -> SSP_UpdateNwkKey
        0     36   -> ZDApp_NVUpdate
      0     74   ZDSecMgrUpdateTCAddress
        0     18   -> APSME_SetRequest
        0     22   -> osal_nv_write
        0     18   -> sAddrExtCpy
      2      0   ZDSecMgrVerifyKeyInd
        2      0   -> ZDSecMgrAppConfKeyReq
      0     70   ZDSecMgrWriteNV
        0     18   -> osal_nv_write


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant {255, 255, 255, 255, 255, 255, 255,
       1  ?<Initializer for ZDSecMgrAppKeyType>
       4  ?<Initializer for requestLinkKeyTimeout>
       1  ?<Initializer for requestNewTrustCenterLinkKey
       6  ??Subroutine100_0
      11  ??Subroutine101_0
       4  ??Subroutine102_0
       4  ??Subroutine103_0
       8  ??Subroutine104_0
       7  ??Subroutine105_0
       7  ??Subroutine106_0
       2  ??Subroutine107_0
       4  ??Subroutine108_0
       5  ??Subroutine109_0
       2  ??Subroutine110_0
       4  ??Subroutine111_0
       8  ??Subroutine112_0
       6  ??Subroutine113_0
       3  ??Subroutine114_0
       5  ??Subroutine115_0
       3  ??Subroutine116_0
       5  ??Subroutine117_0
       6  ??Subroutine118_0
       6  ??Subroutine119_0
       5  ??Subroutine120_0
       6  ??Subroutine121_0
       5  ??Subroutine122_0
      12  ??Subroutine123_0
       6  ??Subroutine124_0
       1  ??Subroutine125_0
       6  ??Subroutine126_0
       7  ??Subroutine127_0
       6  ??Subroutine128_0
       2  ??Subroutine129_0
       6  ??Subroutine130_0
       2  ??Subroutine131_0
       6  ??Subroutine132_0
       6  ??Subroutine133_0
      11  ??Subroutine134_0
       8  ??Subroutine97_0
       5  ??Subroutine98_0
       8  ??Subroutine99_0
       2  ?Subroutine0
       8  ?Subroutine1
      12  ?Subroutine10
       4  ?Subroutine11
       9  ?Subroutine12
       8  ?Subroutine13
       3  ?Subroutine14
      21  ?Subroutine15
       8  ?Subroutine16
       6  ?Subroutine17
      13  ?Subroutine18
       4  ?Subroutine19
       3  ?Subroutine2
       6  ?Subroutine20
      10  ?Subroutine21
      15  ?Subroutine22
       8  ?Subroutine23
       3  ?Subroutine24
       6  ?Subroutine25
       6  ?Subroutine26
       5  ?Subroutine27
       5  ?Subroutine28
       6  ?Subroutine29
       2  ?Subroutine3
       7  ?Subroutine30
      17  ?Subroutine31
       4  ?Subroutine32
       6  ?Subroutine33
       9  ?Subroutine34
      39  ?Subroutine35
       7  ?Subroutine36
       6  ?Subroutine37
      10  ?Subroutine38
      14  ?Subroutine39
       3  ?Subroutine4
       4  ?Subroutine40
      14  ?Subroutine41
      14  ?Subroutine42
      14  ?Subroutine43
       9  ?Subroutine44
       9  ?Subroutine45
       7  ?Subroutine46
       6  ?Subroutine47
       9  ?Subroutine48
       9  ?Subroutine49
       3  ?Subroutine5
       2  ?Subroutine50
      30  ?Subroutine51
      29  ?Subroutine52
       1  ?Subroutine53
       7  ?Subroutine54
      28  ?Subroutine55
       6  ?Subroutine56
       7  ?Subroutine57
       3  ?Subroutine58
       3  ?Subroutine59
       5  ?Subroutine6
      10  ?Subroutine60
       9  ?Subroutine61
      21  ?Subroutine62
      14  ?Subroutine63
       8  ?Subroutine64
       6  ?Subroutine65
       6  ?Subroutine66
      13  ?Subroutine67
      10  ?Subroutine68
      11  ?Subroutine69
       5  ?Subroutine7
      10  ?Subroutine70
       4  ?Subroutine71
       3  ?Subroutine72
      12  ?Subroutine73
      17  ?Subroutine74
       6  ?Subroutine75
       2  ?Subroutine76
       1  ?Subroutine77
      12  ?Subroutine78
      10  ?Subroutine79
       5  ?Subroutine8
       2  ?Subroutine80
      10  ?Subroutine81
       4  ?Subroutine82
      12  ?Subroutine83
       4  ?Subroutine84
       1  ?Subroutine85
      11  ?Subroutine86
       4  ?Subroutine87
       2  ?Subroutine88
       9  ?Subroutine89
       6  ?Subroutine9
      10  ?Subroutine90
       5  ?Subroutine91
      11  ?Subroutine92
      16  ?Subroutine93
      12  ?Subroutine94
      10  ?Subroutine95
       6  ?Subroutine96
      14  APSME_IsDefaultTCLK
     140  APSME_IsLinkKeyValid
      61  APSME_KeyFwdToChild
      55  APSME_LinkKeyNVIdGet
     260  APSME_LinkKeySet
     314  APSME_TCLinkKeyInit
     612  APSME_TCLinkKeyLoad
     493  APSME_TCLinkKeySync
      27  ApsLinkKeyFrmCntr
     270  TCLinkKeyFrmCntr
      19  TrustCenterLinkKey
      73  ZDSecMgrAPSRemove
     120  ZDSecMgrAddLinkKey
      68  ZDSecMgrAddrClear
      67  ZDSecMgrAddrStore
      71  ZDSecMgrAppConfKeyReq
      39  ZDSecMgrAppKeyGet
     245  ZDSecMgrAppKeyReq
       1  ZDSecMgrAppKeyType
      23  ZDSecMgrAppKeyTypeSet
     112  ZDSecMgrApsLinkKeyInit
      24  ZDSecMgrAssocDeviceAuth
      26  ZDSecMgrAuthNwkKey
     105  ZDSecMgrAuthenticationCheck
      31  ZDSecMgrAuthenticationSet
     141  ZDSecMgrClearNVKeyValues
      32  ZDSecMgrConfig
     220  ZDSecMgrDeviceJoin
     230  ZDSecMgrDeviceJoinDirect
     220  ZDSecMgrDeviceJoinFwd
      42  ZDSecMgrDeviceNew
     258  ZDSecMgrDeviceRemove
      35  ZDSecMgrDeviceRemoveByExtAddr
      24  ZDSecMgrDeviceValidate
      17  ZDSecMgrDeviceValidateRM
       2  ZDSecMgrEntries
     333  ZDSecMgrEntryFree
      75  ZDSecMgrEntryInit
     135  ZDSecMgrEntryLookup
      66  ZDSecMgrEntryLookupAMI
      51  ZDSecMgrEntryLookupAMIGetIndex
      56  ZDSecMgrEntryLookupExt
     124  ZDSecMgrEntryLookupExtGetIndex
     120  ZDSecMgrEntryNew
      72  ZDSecMgrExtAddrLookup
      67  ZDSecMgrExtAddrStore
     233  ZDSecMgrGenerateKeyFromSeed
      54  ZDSecMgrGenerateRndKey
      99  ZDSecMgrGenerateSeed
      55  ZDSecMgrInit
      93  ZDSecMgrInitNV
      34  ZDSecMgrInitNVKeyTables
     206  ZDSecMgrNewDeviceEvent
     415  ZDSecMgrNwkKeyInit
      29  ZDSecMgrPermitJoining
       1  ZDSecMgrPermitJoiningEnabled
       1  ZDSecMgrPermitJoiningTimed
      23  ZDSecMgrPermitJoiningTimeout
     194  ZDSecMgrReadKeyFromNv
      66  ZDSecMgrRemoveDeviceInd
      38  ZDSecMgrRequestAppKey
      54  ZDSecMgrRequestKeyInd
     430  ZDSecMgrRestoreFromNV
     209  ZDSecMgrSaveApsLinkKey
     218  ZDSecMgrSaveTCLinkKey
     245  ZDSecMgrSendNwkKey
     167  ZDSecMgrSetDefaultNV
     119  ZDSecMgrSetupPartner
      23  ZDSecMgrSwitchKeyInd
     144  ZDSecMgrSwitchNwkKey
       1  ZDSecMgrTCAuthenticated
      88  ZDSecMgrTCDataLoad
       8  ZDSecMgrTCExtAddr
      38  ZDSecMgrTCExtAddrCheck
     211  ZDSecMgrTclkReq
     621  ZDSecMgrTransportKeyInd
     240  ZDSecMgrUpdateDeviceInd
     197  ZDSecMgrUpdateNwkKey
     107  ZDSecMgrUpdateTCAddress
      10  ZDSecMgrVerifyKeyInd
     164  ZDSecMgrWriteNV
       4  __Constant_1
       4  __Constant_3e9
       4  __Constant_a
       4  __Constant_b
       1  gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY
       2  gZDSECMGR_TC_DEVICE_IC_MAX
       2  gZDSECMGR_TC_DEVICE_MAX
       4  requestLinkKeyTimeout
       1  requestNewTrustCenterLinkKey
     432  -- Other

 
 11 153 bytes in segment BANKED_CODE
    432 bytes in segment BANK_RELAYS
      4 bytes in segment CODE_C
      6 bytes in segment XDATA_I
      6 bytes in segment XDATA_ID
     24 bytes in segment XDATA_ROM_C
    330 bytes in segment XDATA_Z
 
    442 bytes of CODE     memory
      8 bytes of CONST    memory (+ 16 bytes shared)
 11 153 bytes of HUGECODE memory
    336 bytes of XDATA    memory

Errors: none
Warnings: none
