###############################################################################
#
# IAR C/C++ Compiler V10.40.1.7397 for 8051               01/May/2021  14:31:35
# Copyright 2004-2021 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Components\stack\zcl\zcl_key_establish.c
#    Command line       =  
#        -f C:\Users\asus\AppData\Local\Temp\EW6A6E.tmp ("E:\Texas
#        Instruments\Z-Stack 3.0.2\Components\stack\zcl\zcl_key_establish.c" -D
#        BDB_FINDING_BINDING_CAPABILITY_ENABLED=0 -D TC_LINKKEY_JOIN -D
#        HAL_UART_DMA_RX_MAX=128 -D MAXMEMHEAP=2765 -D NWK_MAX_DEVICE_LIST=10
#        -D ZDSECMGR_TC_DEVICE_MAX=30 -D DISABLE_GREENPOWER_BASIC_PROXY -D
#        POWER_SAVING -D FEATURE_SYSTEM_STATS -D MT_GP_CB_FUNC -D ASSERT_RESET
#        -D MAKE_CRC_SHDW -lC "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\List" -lA
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\List"
#        --diag_suppress Pe001,Pa010 -o "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\Obj" -e
#        --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_GP_CB_FUNC -DMT_APP_FUNC -DMT_APP_CNF_FUNC)
#        -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg" -I
#        "E:\Texas Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\Source\" -I "E:\Texas
#        Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\..\Source\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Utilities\BootLoad\Source\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\gp\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\bdb\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  English_USA.1252
#    List file          =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\List\zcl_key_establish.lst
#    Object file        =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\Obj\zcl_key_establish.r51
#
###############################################################################

E:\Texas Instruments\Z-Stack 3.0.2\Components\stack\zcl\zcl_key_establish.c
      1          /**************************************************************************************************
      2            Filename:       zcl_key_establish.c
      3            Revised:        $Date: 2014-12-08 11:21:45 -0800 (Mon, 08 Dec 2014) $
      4            Revision:       $Revision: 41372 $
      5          
      6            Description:    Zigbee Cluster Library - SE (Smart Energy) Key Establishment
      7          
      8          
      9            Copyright 2007-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          
     41          /**************************************************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "hal_types.h"
     46          #include "ZComDef.h"
     47          #include "eccapi_163.h"
     48          #include "eccapi_283.h"
     49          #include "ssp_hash.h"
     50          #include "ZGlobals.h"
     51          #include "AddrMgr.h"
     52          #include "nwk_globals.h"
     53          #include "NLMEDE.h"
     54          #include "AF.h"
     55          #include "ZDProfile.h"
     56          #include "ZDObject.h"
     57          #include "ZDSecMgr.h"
     58          #include "stub_aps.h"
     59          #include "zcl.h"
     60          #include "zcl_se.h"
     61          #include "zcl_key_establish.h"
     62          
     63          
     64          /**************************************************************************************************
     65           * CONSTANTS
     66           */
     67          
     68          // Key Establishment End Point Configuration
     69          #define ZCL_KE_DEVICE_VERSION  0
     70          #define ZCL_KE_FLAGS           0
     71          #define ZCL_KE_CLUSTER_CNT     1
     72          
     73          // Server-to-Client Cluster Commands
     74          #define ZCL_KE_INITIATE_RSP      0x00
     75          #define ZCL_KE_EPH_DATA_RSP      0x01
     76          #define ZCL_KE_CFM_KEY_DATA_RSP  0x02
     77          #define ZCL_KE_TERMINATE_CLIENT  0x03
     78          
     79          // Client-to-Server Cluster Commands
     80          #define ZCL_KE_INITIATE_REQ      0x00
     81          #define ZCL_KE_EPH_DATA_REQ      0x01
     82          #define ZCL_KE_CFM_KEY_DATA_REQ  0x02
     83          #define ZCL_KE_TERMINATE_SERVER  0x03
     84          
     85          // Key Length
     86          #define ZCL_KE_KEY_LEN  16
     87          #define ZCL_KE_MAC_LEN  16
     88          
     89          // Timer Constants
     90          #define ZCL_KE_TIMER_EVT  0x01
     91          
     92          // ZCL_KE_STATE
     93          #define ZCL_KE_INIT      0
     94          #define ZCL_KE_READY     1
     95          #define ZCL_KE_NO_CERTS  10
     96          
     97          // ZCL_KE_MSG_TYPE
     98          #define ZCL_KE_START_MSG         1
     99          #define ZCL_KE_START_DIRECT_MSG  2
    100          #define ZCL_KE_KEY_GEN_MSG       3
    101          
    102          // Poll Rate Bits
    103          #define ZCL_KE_CLIENT_POLL_RATE_BIT  0x01
    104          #define ZCL_KE_SERVER_POLL_RATE_BIT  0x02
    105          
    106          // Time between stage 1 and stage 2 -- see ZCL_KE_KEY_GEN_STAGES_*
    107          #define ZCL_KE_KEY_GEN_TIMEOUT  500
    108          
    109          // Invalid gen time
    110          #define ZCL_KE_GEN_INVALID_TIME  0xFF
    111          
    112          // Configured poll rate for end device during key establishment
    113          #if !defined ( ZCL_KE_POLL_RATE )
    114          #define ZCL_KE_POLL_RATE  1000
    115          #endif
    116          
    117          // Configure connection timeout in ms
    118          #if !defined ( ZCL_KE_CONN_TIMEOUT )
    119          #define ZCL_KE_CONN_TIMEOUT  60000
    120          #endif
    121          
    122          // Configure timeouts for suite discovery operations(Match_Desc_req, ZCL_CMD_READ, etc. )
    123          #if !defined ( ZCL_KE_SUITE_DISCOVERY_TIMEOUT )
    124          #define ZCL_KE_SUITE_DISCOVERY_TIMEOUT  60000
    125          #endif 
    126          
    127          // Configure server times for ephemeral and key data generation
    128          #if !defined ( ZCL_KE_SERVER_EPH_DATA_GEN_TIME )
    129          #define ZCL_KE_SERVER_EPH_DATA_GEN_TIME 30
    130          #endif 
    131          
    132          #if !defined ( ZCL_KE_SERVER_CFM_KEY_GEN_TIME)
    133          #define ZCL_KE_SERVER_CFM_KEY_GEN_TIME 30
    134          #endif 
    135          
    136          // Configure client times for ephemeral and key data generation
    137          #if !defined ( ZCL_KE_CLIENT_EPH_DATA_GEN_TIME )
    138          #define ZCL_KE_CLIENT_EPH_DATA_GEN_TIME 30
    139          #endif 
    140          
    141          #if !defined ( ZCL_KE_CLIENT_CFM_KEY_GEN_TIME )
    142          #define ZCL_KE_CLIENT_CFM_KEY_GEN_TIME 30
    143          #endif 
    144          
    145          // Configure the Trust Center's max server connections -- saved in NV "ZCD_NV_KE_MAX_DEVICES"
    146          #if !defined ( ZCL_KE_MAX_SERVER_CONNECTIONS )
    147          #define ZCL_KE_MAX_SERVER_CONNECTIONS  2
    148          #endif
    149          
    150          // ZCL_KE_SERVER_CONN_STATE
    151          #define ZCL_KE_SERVER_CONN_INIT                   0
    152          #define ZCL_KE_SERVER_CONN_EPH_DATA_REQ_WAIT      1
    153          #define ZCL_KE_SERVER_CONN_KEY_GEN_WAIT           2
    154          #define ZCL_KE_SERVER_CONN_KEY_GEN_QUEUED         3
    155          #define ZCL_KE_SERVER_CONN_CFM_KEY_DATA_REQ_WAIT  4
    156          
    157          // ZCL_KE_CLIENT_CONN_STATE
    158          #define ZCL_KE_CLIENT_CONN_INIT                   0
    159          #define ZCL_KE_CLIENT_CONN_MATCH_RSP_WAIT         1
    160          #define ZCL_KE_CLIENT_CONN_READ_RSP_WAIT          2
    161          #define ZCL_KE_CLIENT_CONN_INIT_RSP_WAIT          5
    162          #define ZCL_KE_CLIENT_CONN_EPH_DATA_RSP_WAIT      6
    163          #define ZCL_KE_CLIENT_CONN_KEY_GEN_WAIT           7
    164          #define ZCL_KE_CLIENT_CONN_KEY_GEN_QUEUED         8
    165          #define ZCL_KE_CLIENT_CONN_CFM_KEY_DATA_RSP_WAIT  9
    166          
    167          // Certificate fields
    168          #define ZCL_KE_CERT_ISSUER_LEN  8
    169          #define ZCL_KE_CERT_163_EXT_ADDR_IDX   22
    170          #define ZCL_KE_CERT_163_ISSUER_IDX     30
    171          #define ZCL_KE_CERT_283_EXT_ADDR_IDX   28
    172          #define ZCL_KE_CERT_283_ISSUER_IDX     11
    173          #define ZCL_KE_CERT_283_TYPE_IDX       0
    174          #define ZCL_KE_CERT_283_CURVE_IDX      9
    175          #define ZCL_KE_CERT_283_HASH_IDX       10
    176          #define ZCL_KE_CERT_283_KEY_USAGE_IDX  36
    177          
    178          #define ZCL_KE_CERT_283_TYPE_VALUE     0x00
    179          #define ZCL_KE_CERT_283_CURVE_VALUE    0x0D
    180          #define ZCL_KE_CERT_283_HASH_VALUE     0x08
    181          #define ZCL_KE_CERT_283_KEY_USAGE_BIT  0x08
    182          
    183          // ZCL_KE_GET_FIELD_TYPES
    184          #define ZCL_KE_PUBLIC_KEY_NV_ID   0    
    185          #define ZCL_KE_PRIVATE_KEY_NV_ID  1     
    186          #define ZCL_KE_CERT_NV_ID         2
    187          #define ZCL_KE_PUBLIC_KEY_LEN     3
    188          #define ZCL_KE_PRIVATE_KEY_LEN    4
    189          #define ZCL_KE_CERT_LEN           5
    190          #define ZCL_KE_CERT_EXT_ADDR_IDX  6
    191          #define ZCL_KE_CERT_ISSUER_IDX    7
    192          #define ZCL_KE_FIELDS_MAX         8
    193          
    194          // Initiate payload fields for ZCL_KE_INITIATE_RSP and ZCL_KE_INITIATE_REQ
    195          #define ZCL_KE_INITIATE_HDR_LEN     4
    196          #define ZCL_KE_INITIATE_SUITE1_LEN  ZCL_KE_INITIATE_HDR_LEN + ECCAPI_CERT_163_LEN
    197          #define ZCL_KE_INITIATE_SUITE2_LEN  ZCL_KE_INITIATE_HDR_LEN + ECCAPI_CERT_283_LEN
    198          
    199          // Terminate payload fields for ZCL_KE_TERMINATE_CLIENT and ZCL_KE_TERMINATE_SERVER
    200          #define ZCL_KE_TERMINATE_LEN  4
    201          
    202          
    203          /**************************************************************************************************
    204           * TYPEDEFS
    205           */
    206          
    207          // ZCL_KE_START_MSG payload
    208          typedef struct
    209          {
    210            osal_event_hdr_t hdr;
    211            uint8 taskID;
    212            uint16 partnerNwkAddr;
    213            uint8 transSeqNum;
    214          } zclKE_StartMsg_t;
    215          
    216          // ZCL_KE_START_DIRECT_MSG payload
    217          typedef struct
    218          {
    219            osal_event_hdr_t hdr;
    220            uint8 taskID;
    221            afAddrType_t partnerAddr;
    222            uint8 transSeqNum;
    223            uint16 suite;
    224          } zclKE_StartDirectMsg_t;
    225          
    226          // ZCL_KE_KEY_GEN_MSG payload
    227          typedef struct
    228          {
    229            osal_event_hdr_t hdr;
    230            uint16 partnerAddr;
    231            uint8 server;
    232          } zclKE_KeyGenMsg_t;
    233          
    234          // Local zclReadCmd_t structure
    235          typedef struct
    236          {
    237            uint8  numAttr;
    238            uint16 attrID[1];
    239          } zclKE_ReadCmd_t;
    240          
    241          typedef struct 
    242          {
    243            uint16 suite;
    244            uint8 ephDataGenTime;
    245            uint8 cfmKeyGenTime;
    246            uint8 *pIdentity;
    247          } zclKE_InitiateCmd_t;
    248          
    249          typedef struct 
    250          {
    251            uint8 *pEphData;
    252          } zclKE_EphDataCmd_t;
    253          
    254          typedef struct 
    255          {
    256            uint8 *pMAC;
    257          } zclKE_CfmKeyDataCmd_t;
    258          
    259          typedef struct
    260          {
    261            uint8 status; // ZCL_KE_TERMINATE_ERROR
    262            uint8 waitTime;
    263            uint16 suites;
    264          } zclKE_TerminateCmd_t;
    265          
    266          typedef struct zclKE_ConnType zclKE_Conn_t;
    267          
    268          struct zclKE_ConnType
    269          {
    270            uint8 taskID;
    271            uint8 state; // see ZCL_KE_SERVER_CONN_STATE or ZCL_KE_CLIENT_CONN_STATE
    272            uint8 transSeqNum;
    273            uint8 rmtEphDataGenTime;
    274            uint8 rmtCfmKeyGenTime;
    275            uint16 suite;
    276            uint32 stamp;
    277            uint32 timeout;
    278            afAddrType_t partner;
    279            uint8 *pEPublicKey;
    280            uint8 *pEPrivateKey;
    281            uint8 *pRmtEPublicKey;
    282            uint8 *pRmtCert;
    283            uint8 *pKey;
    284            uint8 *pMACKey;
    285            zclKE_Conn_t *pNext;
    286          };
    287          
    288          typedef struct
    289          {
    290            uint8 error;
    291            zclIncoming_t *pInMsg;
    292            zclKE_Conn_t *pConn;
    293          } zclKE_ConnCtxt_t;
    294          
    295          
    296          /**************************************************************************************************
    297           * FUNCTION PROTOTYPES
    298           */
    299          
    300          
    301          /**************************************************************************************************
    302           * LOCAL VARIABLES
    303           */
    304          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    305          static uint8 zclKE_TaskID;
   \                     zclKE_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    306          static uint16 zclKE_SupportedSuites = 0;
   \                     zclKE_SupportedSuites:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    307          static uint8 zclKE_State = ZCL_KE_INIT; // see ZCL_KE_STATE
   \                     zclKE_State:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    308          static zclKE_Conn_t *zclKE_ServerConnList = NULL;
   \                     zclKE_ServerConnList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    309          static zclKE_Conn_t *zclKE_ClientConnList = NULL;
   \                     zclKE_ClientConnList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    310          

   \                                 In  segment CODE_C, align 1
    311          static CONST cId_t zclKE_ClusterList[ZCL_KE_CLUSTER_CNT] =
   \                     zclKE_ClusterList:
   \   000000   0008         DW 2048
    312          {
    313            ZCL_CLUSTER_ID_SE_KEY_ESTABLISHMENT,
    314          };
    315          

   \                                 In  segment CODE_C, align 1
    316          static CONST SimpleDescriptionFormat_t zclKE_SimpleDesc =
   \                     zclKE_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   0901         DW 265
   \   000003   0705         DW 1287
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   ....         DW zclKE_ClusterList
   \   000009   01           DB 1
   \   00000A   ....         DW zclKE_ClusterList
    317          {
    318            ZCL_KE_ENDPOINT,
    319            ZCL_SE_PROFILE_ID,
    320            ZCL_SE_DEVICEID_PHYSICAL,
    321            ZCL_KE_DEVICE_VERSION,
    322            ZCL_KE_FLAGS,
    323            ZCL_KE_CLUSTER_CNT,
    324            (cId_t *)zclKE_ClusterList, 
    325            ZCL_KE_CLUSTER_CNT,
    326            (cId_t *)zclKE_ClusterList 
    327          };
    328          

   \                                 In  segment CODE_C, align 1
    329          static CONST endPointDesc_t zclKE_EPDesc =
   \                     zclKE_EPDesc:
   \   000000   0A           DB 10
   \   000001   00           DB 0
   \   000002   ....         DW zcl_TaskID
   \   000004   ....         DW zclKE_SimpleDesc
   \   000006   00           DB 0
    330          {
    331            ZCL_KE_ENDPOINT,
    332            0,
    333          #ifndef ZCL_STANDALONE
    334            &zcl_TaskID,
    335          #else
    336            &zclKE_TaskID,
    337          #endif
    338            (SimpleDescriptionFormat_t *)&zclKE_SimpleDesc,
    339            (afNetworkLatencyReq_t)noLatencyReqs
    340          };
    341          

   \                                 In  segment CODE_C, align 1
    342          static CONST zclAttrRec_t zclKE_ZCL_AttrList[] =
   \                     zclKE_ZCL_AttrList:
   \   000000   0008         DW 2048
   \   000002   0000         DW 0
   \   000004   31           DB 49
   \   000005   01           DB 1
   \   000006   ....         DW zclKE_SupportedSuites
    343          {
    344            {
    345              ZCL_CLUSTER_ID_SE_KEY_ESTABLISHMENT,
    346              {  // Attribute record
    347                ATTRID_KE_SUITE,
    348                ZCL_DATATYPE_ENUM16,
    349                ACCESS_CONTROL_READ,
    350                (void *)&zclKE_SupportedSuites
    351              }
    352            },
    353          };
    354          
    355          // Note: should not be const since ZCL may temporarily change the value

   \                                 In  segment XDATA_I, align 1, keep-with-next
    356          static zclOptionRec_t zclKE_ZCL_Options[] =
   \                     zclKE_ZCL_Options:
   \   000000                DS 3
   \   000003                REQUIRE `?<Initializer for zclKE_ZCL_Options>`
   \   000003                REQUIRE __INIT_XDATA_I
    357          {
    358            {
    359              ZCL_CLUSTER_ID_SE_KEY_ESTABLISHMENT,
    360              ( AF_ACK_REQUEST ),
    361            },
    362          };
    363          
    364          #if defined( NWK_AUTO_POLL )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    365          uint32 zclKE_PollRateSaved;
   \                     zclKE_PollRateSaved:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    366          uint8  zclKE_PollRateSet = 0;
   \                     zclKE_PollRateSet:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    367          #endif
    368          
    369          #if !defined( ECCAPI_163_DISABLED )
    370          // see ZCL_KE_GET_FIELD_TYPES

   \                                 In  segment CODE_C, align 1
    371          static CONST uint16 zclKE_Suite1Fields[ZCL_KE_FIELDS_MAX] = 
   \                     zclKE_Suite1Fields:
   \   000000   6B00         DW 107
   \   000002   6A00         DW 106
   \   000004   6900         DW 105
   \   000006   1600         DW 22
   \   000008   1500         DW 21
   \   00000A   3000         DW 48
   \   00000C   1600         DW 22
   \   00000E   1E00         DW 30
    372          {
    373            ZCD_NV_CA_PUBLIC_KEY,         // ZCL_KE_PUBLIC_KEY_NV_ID 
    374            ZCD_NV_DEVICE_PRIVATE_KEY,    // ZCL_KE_PRIVATE_KEY_NV_ID
    375            ZCD_NV_IMPLICIT_CERTIFICATE,  // ZCL_KE_CERT_NV_ID       
    376            ECCAPI_PUBLIC_KEY_163_LEN,    // ZCL_KE_PUBLIC_KEY_LEN
    377            ECCAPI_PRIVATE_KEY_163_LEN,   // ZCL_KE_PRIVATE_KEY_LEN
    378            ECCAPI_CERT_163_LEN,          // ZCL_KE_CERT_LEN         
    379            ZCL_KE_CERT_163_EXT_ADDR_IDX, // ZCL_KE_CERT_EXT_ADDR_IDX
    380            ZCL_KE_CERT_163_ISSUER_IDX,   // ZCL_KE_CERT_ISSUER_IDX  
    381            // ZCL_KE_FIELDS_MAX         
    382          };
    383          #endif // ECCAPI_163_DISABLED
    384          
    385          #if !defined( ECCAPI_283_DISABLED )
    386          // see ZCL_KE_GET_FIELD_TYPES

   \                                 In  segment CODE_C, align 1
    387          static CONST uint16 zclKE_Suite2Fields[ZCL_KE_FIELDS_MAX] =
   \                     zclKE_Suite2Fields:
   \   000000   7400         DW 116
   \   000002   7300         DW 115
   \   000004   7200         DW 114
   \   000006   2500         DW 37
   \   000008   2400         DW 36
   \   00000A   4A00         DW 74
   \   00000C   1C00         DW 28
   \   00000E   0B00         DW 11
    388          {
    389            ZCD_NV_PUBLIC_KEY_283,        // ZCL_KE_PUBLIC_KEY_NV_ID 
    390            ZCD_NV_PRIVATE_KEY_283,       // ZCL_KE_PRIVATE_KEY_NV_ID
    391            ZCD_NV_CERT_283,              // ZCL_KE_CERT_NV_ID       
    392            ECCAPI_PUBLIC_KEY_283_LEN,    // ZCL_KE_PUBLIC_KEY_LEN
    393            ECCAPI_PRIVATE_KEY_283_LEN,   // ZCL_KE_PRIVATE_KEY_LEN
    394            ECCAPI_CERT_283_LEN,          // ZCL_KE_CERT_LEN         
    395            ZCL_KE_CERT_283_EXT_ADDR_IDX, // ZCL_KE_CERT_EXT_ADDR_IDX
    396            ZCL_KE_CERT_283_ISSUER_IDX,   // ZCL_KE_CERT_ISSUER_IDX  
    397            // ZCL_KE_FIELDS_MAX         
    398          };
    399          #endif // ECCAPI_283_DISABLED
    400          
    401          
    402          /**************************************************************************************************
    403           * LOCAL FUNCTIONS
    404           */
    405          
    406          #if defined( NWK_AUTO_POLL )
    407          /**************************************************************************************************
    408           * @fn      zclKE_SetPollRate
    409           *
    410           * @brief   Set the network poll rate for key establishment.
    411           *
    412           * @param   user - ZCL_KE_SERVER_POLL_RATE_BIT or ZCL_KE_CLIENT_POLL_RATE_BIT
    413           *
    414           * @return  void
    415           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    416          static void zclKE_SetPollRate( uint8 user )
   \                     zclKE_SetPollRate:
    417          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    418            if ( !zclKE_PollRateSet )
   \   000007   90....       MOV       DPTR,#zclKE_PollRateSet
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   7015         JNZ       ??zclKE_SetPollRate_0
    419            {
    420              // Save and set the current poll rate
    421              zclKE_PollRateSaved = zgPollRate;
   \   00000D   90....       MOV       DPTR,#zgPollRate
   \   000010   12....       LCALL     ?XLOAD_R0123
   \   000013   90....       MOV       DPTR,#zclKE_PollRateSaved
   \   000016   12....       LCALL     ?XSTORE_R0123
    422              NLME_SetPollRate( ZCL_KE_POLL_RATE );
   \   000019                ; Setup parameters for call to function NLME_SetPollRate
   \   000019   90....       MOV       DPTR,#__Constant_3e8
   \   00001C   12....       LCALL     ?XLOAD_R2345
   \   00001F   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
    423            }
    424          
    425            zclKE_PollRateSet |= user;
   \                     ??zclKE_SetPollRate_0:
   \   000022   90....       MOV       DPTR,#zclKE_PollRateSet
   \   000025   E0           MOVX      A,@DPTR
   \   000026   4E           ORL       A,R6
   \   000027   F0           MOVX      @DPTR,A
    426          }
   \   000028   80..         SJMP      ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    427          
    428          /**************************************************************************************************
    429           * @fn      zclKE_SetPollRate
    430           *
    431           * @brief   Set the network poll rate for key establishment.
    432           *
    433           * @param   user - ZCL_KE_SERVER_POLL_RATE_BIT or ZCL_KE_CLIENT_POLL_RATE_BIT
    434           *
    435           * @return  void
    436           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    437          static void zclKE_RestorePollRate( uint8 user )
   \                     zclKE_RestorePollRate:
    438          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    439            zclKE_PollRateSet &= ~user;
   \   000006   F4           CPL       A
   \   000007   F8           MOV       R0,A
   \   000008   90....       MOV       DPTR,#zclKE_PollRateSet
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   58           ANL       A,R0
   \   00000D   F0           MOVX      @DPTR,A
    440          
    441            if ( !zclKE_PollRateSet )
   \   00000E   7009         JNZ       ??zclKE_RestorePollRate_0
    442            {
    443              // Restore poll rate
    444              NLME_SetPollRate( zclKE_PollRateSaved );
   \   000010                ; Setup parameters for call to function NLME_SetPollRate
   \   000010   90....       MOV       DPTR,#zclKE_PollRateSaved
   \   000013   12....       LCALL     ?XLOAD_R2345
   \   000016   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
    445            }
    446          }
   \                     ??zclKE_RestorePollRate_0:
   \   000019   80..         SJMP      ?Subroutine0
    447          #endif // NWK_AUTO_POLL
    448          
    449          /**************************************************************************************************
    450           * @fn      zclKE_MemFree
    451           *
    452           * @brief   Release(and clear) allocated memory.
    453           *
    454           * @param   pv - pointer to be freed
    455           * @param   len - length of pointer memory allocated
    456           *
    457           * @return  void
    458           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    459          static void zclKE_MemFree( void *pv, uint16 len )
   \                     zclKE_MemFree:
    460          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    461            if ( pv )
   \   000009   EA           MOV       A,R2
   \   00000A   4F           ORL       A,R7
   \   00000B   600C         JZ        ??zclKE_MemFree_0
    462            {
    463              osal_memset( pv, 0, len );
   \   00000D                ; Setup parameters for call to function osal_memset
   \   00000D   7900         MOV       R1,#0x0
   \   00000F   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    464              osal_mem_free( pv );
   \   000012                ; Setup parameters for call to function osal_mem_free
   \   000012   EE           MOV       A,R6
   \   000013   FA           MOV       R2,A
   \   000014   EF           MOV       A,R7
   \   000015   FB           MOV       R3,A
   \   000016   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    465            }  
    466          }
   \                     ??zclKE_MemFree_0:
   \   000019                REQUIRE ?Subroutine0
   \   000019                ; // Fall through to label ?Subroutine0
    467          
    468          /**************************************************************************************************
    469           * @fn      zclKE_GetField
    470           *
    471           * @brief   Lookup the value of the field(ZCL_KE_GET_FIELD_TYPES) for the selected suite.
    472           *
    473           * @param   suite - selected suite
    474           * @param   field - see ZCL_KE_GET_FIELD_TYPES
    475           *
    476           * @return  uint16 - value of requested field
    477           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    478          static uint16 zclKE_GetField( uint16 suite, uint8 field )
   \                     zclKE_GetField:
    479          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    480            uint16 result;
    481           
    482            switch ( suite )
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   78..         MOV       R0,#?V0
   \   00000B   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for zclKE_GetField>_0`:
   \   00000E   0100         DW        1
   \   000010   01           DB        1
   \   000011   ....         DW        ??zclKE_GetField_0
   \   000013   ....         DW        ??zclKE_GetField_1
   \   000015   ....         DW        ??zclKE_GetField_2
    483            {
    484          #if !defined( ECCAPI_163_DISABLED )
    485              case ZCL_KE_SUITE_1:
    486                result = zclKE_Suite1Fields[field];
   \                     ??zclKE_GetField_1:
   \   000017   E9           MOV       A,R1
   \   000018   29           ADD       A,R1
   \   000019   FA           MOV       R2,A
   \   00001A   E4           CLR       A
   \   00001B   33           RLC       A
   \   00001C   FB           MOV       R3,A
   \   00001D   74..         MOV       A,#zclKE_Suite1Fields & 0xff
   \   00001F   2A           ADD       A,R2
   \   000020   F582         MOV       DPL,A
   \   000022   74..         MOV       A,#(zclKE_Suite1Fields >> 8) & 0xff
   \   000024   800D         SJMP      ??zclKE_GetField_3
    487                break;
    488          #endif
    489          
    490          #if !defined( ECCAPI_283_DISABLED )
    491              case ZCL_KE_SUITE_2:
    492                result = zclKE_Suite2Fields[field];
   \                     ??zclKE_GetField_2:
   \   000026   E9           MOV       A,R1
   \   000027   29           ADD       A,R1
   \   000028   FA           MOV       R2,A
   \   000029   E4           CLR       A
   \   00002A   33           RLC       A
   \   00002B   FB           MOV       R3,A
   \   00002C   74..         MOV       A,#zclKE_Suite2Fields & 0xff
   \   00002E   2A           ADD       A,R2
   \   00002F   F582         MOV       DPL,A
   \   000031   74..         MOV       A,#(zclKE_Suite2Fields >> 8) & 0xff
   \                     ??zclKE_GetField_3:
   \   000033   3B           ADDC      A,R3
   \   000034   F583         MOV       DPH,A
   \   000036   E4           CLR       A
   \   000037   93           MOVC      A,@A+DPTR
   \   000038   C0E0         PUSH      A
   \   00003A   7401         MOV       A,#0x1
   \   00003C   93           MOVC      A,@A+DPTR
   \   00003D   F583         MOV       DPH,A
   \   00003F   D082         POP       DPL
   \   000041   AA82         MOV       R2,DPL
   \   000043   AB83         MOV       R3,DPH
    493                break;
   \   000045   8004         SJMP      ??zclKE_GetField_4
    494          #endif
    495                
    496              default:
    497                // Should never get here
    498                result = 0;      
   \                     ??zclKE_GetField_0:
   \   000047   7A00         MOV       R2,#0x0
   \   000049   7B00         MOV       R3,#0x0
    499                break;
    500            }
    501          
    502            return result;
   \                     ??zclKE_GetField_4:
   \   00004B   02....       LJMP      ??Subroutine185_0 & 0xFFFF
    503          }  

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine185_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    504          
    505          /**************************************************************************************************
    506           * @fn      zclKE_NotifyStatus
    507           *
    508           * @brief   Notify key establishment initiator(zclKE_Start or zclKE_StartDirect) of final status.
    509           *
    510           * @param   taskID - OSAL task ID of requesting task
    511           * @param   partnerNwkAddr - partner network address  
    512           * @param   notifyStatus - see ZCL_KE_NOTIFY_STATUS
    513           * @param   pCmd - terminate command payload
    514           *
    515           * @return  void
    516           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    517          static void zclKE_NotifyStatus( uint8 taskID, uint16 partnerNwkAddr, 
   \                     zclKE_NotifyStatus:
    518                                          uint8 notifyStatus, zclKE_TerminateCmd_t *pCmd )
    519          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FF           MOV       R7,A
    520            zclKE_StatusInd_t *pInd;
    521          
    522            // Allocate the indication
    523            pInd = (zclKE_StatusInd_t *)osal_msg_allocate( sizeof( zclKE_StatusInd_t ) );
   \   00000D                ; Setup parameters for call to function osal_msg_allocate
   \   00000D   7A08         MOV       R2,#0x8
   \   00000F   12....       LCALL     ??Subroutine191_0 & 0xFFFF
    524          
    525            if ( pInd )
   \                     ??CrossCallReturnLabel_431:
   \   000012   6060         JZ        ??zclKE_NotifyStatus_0
    526            {
    527              pInd->hdr.event = ZCL_KEY_ESTABLISH_IND;
   \   000014   8A82         MOV       DPL,R2
   \   000016   8B83         MOV       DPH,R3
   \   000018   7435         MOV       A,#0x35
   \   00001A   F0           MOVX      @DPTR,A
    528              pInd->hdr.status = notifyStatus;
   \   00001B   EF           MOV       A,R7
   \   00001C   A3           INC       DPTR
   \   00001D   12....       LCALL     ??Subroutine190_0 & 0xFFFF
    529              pInd->partnerNwkAddr = partnerNwkAddr;
   \                     ??CrossCallReturnLabel_430:
   \   000020   A3           INC       DPTR
   \   000021   E5..         MOV       A,?V1
   \   000023   F0           MOVX      @DPTR,A
   \   000024   740C         MOV       A,#0xc
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   12....       LCALL     ??Subroutine169_0 & 0xFFFF
    530          
    531              if ( pCmd )
   \                     ??CrossCallReturnLabel_298:
   \   00002C   6026         JZ        ??zclKE_NotifyStatus_1
    532              {
    533                pInd->terminateError = pCmd->status ;
   \   00002E   8882         MOV       DPL,R0
   \   000030   8983         MOV       DPH,R1
   \   000032   E0           MOVX      A,@DPTR
   \   000033   8A82         MOV       DPL,R2
   \   000035   8B83         MOV       DPH,R3
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   12....       LCALL     ?Subroutine81 & 0xFFFF
    534                pInd->suites = pCmd->suites;
    535                pInd->waitTime = pCmd->waitTime;
    536              }
   \                     ??CrossCallReturnLabel_107:
   \   00003E   FC           MOV       R4,A
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   FD           MOV       R5,A
   \   000042   8A82         MOV       DPL,R2
   \   000044   8B83         MOV       DPH,R3
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   EC           MOV       A,R4
   \   00004C   F0           MOVX      @DPTR,A
   \   00004D   A3           INC       DPTR
   \   00004E   ED           MOV       A,R5
   \   00004F   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000052   800F         SJMP      ??zclKE_NotifyStatus_2
    537              else
    538              {
    539                pInd->terminateError = ZCL_KE_TERMINATE_ERROR_NONE;
   \                     ??zclKE_NotifyStatus_1:
   \   000054   8A82         MOV       DPL,R2
   \   000056   8B83         MOV       DPH,R3
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   E4           CLR       A
   \   00005D   12....       LCALL     ?Subroutine78 & 0xFFFF
    540                pInd->suites = 0;
   \                     ??CrossCallReturnLabel_99:
   \   000060   F0           MOVX      @DPTR,A
   \   000061   A3           INC       DPTR
   \   000062   F0           MOVX      @DPTR,A
    541                pInd->waitTime = 0;
   \                     ??zclKE_NotifyStatus_2:
   \   000063   8A82         MOV       DPL,R2
   \   000065   8B83         MOV       DPH,R3
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   F0           MOVX      @DPTR,A
    542              }
    543          
    544              osal_msg_send( taskID, (uint8 *)pInd );
   \   00006F                ; Setup parameters for call to function osal_msg_send
   \   00006F   EE           MOV       A,R6
   \   000070   F9           MOV       R1,A
   \   000071   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    545            }
    546          }
   \                     ??zclKE_NotifyStatus_0:
   \   000074   02....       LJMP      ??Subroutine158_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   12....       LCALL     ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine158_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL     ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine169_0:
   \   000000   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_381:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine145:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   12....       LCALL     ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine190_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   E5..         MOV       A,?V0
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine191_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000005   EA           MOV       A,R2
   \   000006   4B           ORL       A,R3
   \   000007   22           RET
    547          
    548          /**************************************************************************************************
    549           * @fn      zclKE_StartTimer
    550           *
    551           * @brief   Start the key establishment timer.
    552           *
    553           * @param   timeout - requested timeout in milliseconds
    554           *
    555           * @return  void
    556           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    557          static void zclKE_StartTimer( uint32 timeout )
   \                     zclKE_StartTimer:
    558          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
    559            if ( timeout )
   \   00000D   EA           MOV       A,R2
   \   00000E   4B           ORL       A,R3
   \   00000F   4C           ORL       A,R4
   \   000010   4D           ORL       A,R5
   \   000011   6039         JZ        ??zclKE_StartTimer_0
    560            {
    561              // Check if timer needs to be started or adjusted to a smaller timeout 
    562              uint32 next = osal_get_timeoutEx( zclKE_TaskID, ZCL_KE_TIMER_EVT );
   \   000013                ; Setup parameters for call to function osal_get_timeoutEx
   \   000013   7A01         MOV       R2,#0x1
   \   000015   7B00         MOV       R3,#0x0
   \   000017   90....       MOV       DPTR,#zclKE_TaskID
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F9           MOV       R1,A
   \   00001C   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   00001F   8A..         MOV       ?V4,R2
   \   000021   8B..         MOV       ?V5,R3
   \   000023   8C..         MOV       ?V6,R4
   \   000025   8D..         MOV       ?V7,R5
    563          
    564              if ( ( !next ) || ( timeout < next ) )
   \   000027   EA           MOV       A,R2
   \   000028   4B           ORL       A,R3
   \   000029   4C           ORL       A,R4
   \   00002A   4D           ORL       A,R5
   \   00002B   6009         JZ        ??zclKE_StartTimer_1
   \   00002D   78..         MOV       R0,#?V4
   \   00002F   79..         MOV       R1,#?V0
   \   000031   12....       LCALL     ?UL_GT
   \   000034   5016         JNC       ??zclKE_StartTimer_0
    565              {
    566                osal_start_timerEx( zclKE_TaskID, ZCL_KE_TIMER_EVT, timeout );
   \                     ??zclKE_StartTimer_1:
   \   000036                ; Setup parameters for call to function osal_start_timerEx
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00003B   7A01         MOV       R2,#0x1
   \   00003D   7B00         MOV       R3,#0x0
   \   00003F   90....       MOV       DPTR,#zclKE_TaskID
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F9           MOV       R1,A
   \   000044   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000047   7404         MOV       A,#0x4
   \   000049   12....       LCALL     ?DEALLOC_XSTACK8
    567              }
    568            }
    569          }
   \                     ??zclKE_StartTimer_0:
   \   00004C   7F08         MOV       R7,#0x8
   \   00004E   02....       LJMP      ?BANKED_LEAVE_XDATA
    570          
    571          /**************************************************************************************************
    572           * @fn      zclKE_ConnRelease
    573           *
    574           * @brief   Release connection and associated memory allocations.
    575           *
    576           * @param   pConn - server or client connection
    577           *
    578           * @return  void
    579           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    580          static void zclKE_ConnRelease( zclKE_Conn_t *pConn )
   \                     zclKE_ConnRelease:
    581          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    582            zclKE_MemFree( pConn->pEPublicKey, zclKE_GetField( pConn->suite, ZCL_KE_PUBLIC_KEY_LEN ) );
   \   000009   EA           MOV       A,R2
   \   00000A   2405         ADD       A,#0x5
   \   00000C   F8           MOV       R0,A
   \   00000D   E4           CLR       A
   \   00000E   3F           ADDC      A,R7
   \   00000F   88..         MOV       ?V0,R0
   \   000011   F5..         MOV       ?V1,A
   \   000013                ; Setup parameters for call to function zclKE_GetField
   \   000013   7903         MOV       R1,#0x3
   \   000015   8882         MOV       DPL,R0
   \   000017   F583         MOV       DPH,A
   \   000019   12....       LCALL     ??Subroutine148_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   00001C   241B         ADD       A,#0x1b
   \   00001E   12....       LCALL     ?Subroutine40 & 0xFFFF
    583            zclKE_MemFree( pConn->pEPrivateKey,zclKE_GetField( pConn->suite, ZCL_KE_PRIVATE_KEY_LEN ) );
   \                     ??CrossCallReturnLabel_195:
   \   000021                ; Setup parameters for call to function zclKE_GetField
   \   000021   7904         MOV       R1,#0x4
   \   000023   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000026   241D         ADD       A,#0x1d
   \   000028   12....       LCALL     ?Subroutine40 & 0xFFFF
    584            zclKE_MemFree( pConn->pRmtEPublicKey, zclKE_GetField( pConn->suite, ZCL_KE_PUBLIC_KEY_LEN ) );
   \                     ??CrossCallReturnLabel_196:
   \   00002B                ; Setup parameters for call to function zclKE_GetField
   \   00002B   7903         MOV       R1,#0x3
   \   00002D   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000030   241F         ADD       A,#0x1f
   \   000032   12....       LCALL     ?Subroutine40 & 0xFFFF
    585            zclKE_MemFree( pConn->pRmtCert, zclKE_GetField( pConn->suite, ZCL_KE_CERT_LEN ) );
   \                     ??CrossCallReturnLabel_197:
   \   000035                ; Setup parameters for call to function zclKE_GetField
   \   000035   7905         MOV       R1,#0x5
   \   000037   85..82       MOV       DPL,?V0
   \   00003A   85..83       MOV       DPH,?V1
   \   00003D   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000040   AC..         MOV       R4,?V0
   \   000042   AD..         MOV       R5,?V1
   \   000044                ; Setup parameters for call to function zclKE_MemFree
   \   000044   EE           MOV       A,R6
   \   000045   2421         ADD       A,#0x21
   \   000047   12....       LCALL     ?Subroutine39 & 0xFFFF
    586            zclKE_MemFree( pConn->pKey, ZCL_KE_KEY_LEN );
   \                     ??CrossCallReturnLabel_36:
   \   00004A   2423         ADD       A,#0x23
   \   00004C   12....       LCALL     ?Subroutine39 & 0xFFFF
    587            zclKE_MemFree( pConn->pMACKey, ZCL_KE_KEY_LEN );
   \                     ??CrossCallReturnLabel_37:
   \   00004F   2425         ADD       A,#0x25
   \   000051   12....       LCALL     ?Subroutine40 & 0xFFFF
    588            osal_mem_free( pConn );
   \                     ??CrossCallReturnLabel_198:
   \   000054                ; Setup parameters for call to function osal_mem_free
   \   000054   EE           MOV       A,R6
   \   000055   FA           MOV       R2,A
   \   000056   EF           MOV       A,R7
   \   000057   FB           MOV       R3,A
   \   000058   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    589          }
   \   00005B   02....       LJMP      ??Subroutine158_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004                REQUIRE ??Subroutine146_0
   \   000004                ; // Fall through to label ??Subroutine146_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine146_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine147_0
   \   000002                ; // Fall through to label ??Subroutine147_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine147_0:
   \   000000   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_405:
   \   000003   FB           MOV       R3,A
   \   000004   12....       LCALL     `??zclKE_MemFree::?relay`; Banked call to: zclKE_MemFree
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000009                ; Setup parameters for call to function zclKE_MemFree
   \   000009                ; Setup parameters for call to function zclKE_MemFree
   \   000009   7C10         MOV       R4,#0x10
   \   00000B   7D00         MOV       R5,#0x0
   \   00000D   EE           MOV       A,R6
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine148_0
   \   000006                ; // Fall through to label ??Subroutine148_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine148_0:
   \   000000   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000003   AC..         MOV       R4,?V2
   \   000005   AD..         MOV       R5,?V3
   \   000007                ; Setup parameters for call to function zclKE_MemFree
   \   000007                ; Setup parameters for call to function zclKE_MemFree
   \   000007                ; Setup parameters for call to function zclKE_MemFree
   \   000007   EE           MOV       A,R6
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   12....       LCALL     ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000003   8A..         MOV       ?V0,R2
   \   000005   8B..         MOV       ?V1,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   12....       LCALL     ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000003   8A..         MOV       ?V2,R2
   \   000005   8B..         MOV       ?V3,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine144:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    590          
    591          /**************************************************************************************************
    592           * @fn      zclKE_ConnSetTimeout
    593           *
    594           * @brief   Set connection timeout.
    595           *
    596           * @param   pConn - server or client connection
    597           * @param   timeout - requested timeout in milliseconds
    598           *
    599           * @return  void
    600           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    601          static void zclKE_ConnSetTimeout( zclKE_Conn_t *pConn, uint32 timeout )
   \                     zclKE_ConnSetTimeout:
    602          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    603            pConn->stamp  = osal_GetSystemClock();
   \   000009                ; Setup parameters for call to function osal_GetSystemClock
   \   000009   12....       LCALL     `??osal_GetSystemClock::?relay`; Banked call to: osal_GetSystemClock
   \   00000C   EA           MOV       A,R2
   \   00000D   F8           MOV       R0,A
   \   00000E   EB           MOV       A,R3
   \   00000F   F9           MOV       R1,A
   \   000010   EC           MOV       A,R4
   \   000011   FA           MOV       R2,A
   \   000012   ED           MOV       A,R5
   \   000013   FB           MOV       R3,A
   \   000014   8E82         MOV       DPL,R6
   \   000016   8F83         MOV       DPH,R7
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   12....       LCALL     ?XSTORE_R0123
   \   000022   740C         MOV       A,#0xc
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   78..         MOV       R0,#?V0
   \   000029   12....       LCALL     ?L_MOV_X
    604            pConn->timeout = timeout;
   \   00002C   12....       LCALL     ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   00002F   78..         MOV       R0,#?V0
   \   000031   12....       LCALL     ?L_MOV_TO_X
    605            zclKE_StartTimer( timeout );  
   \   000034                ; Setup parameters for call to function zclKE_StartTimer
   \   000034   AA..         MOV       R2,?V0
   \   000036   AB..         MOV       R3,?V1
   \   000038   AC..         MOV       R4,?V2
   \   00003A   AD..         MOV       R5,?V3
   \   00003C   12....       LCALL     `??zclKE_StartTimer::?relay`; Banked call to: zclKE_StartTimer
    606          }
   \   00003F   02....       LJMP      ??Subroutine158_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   EE           MOV       A,R6
   \   000001                REQUIRE ??Subroutine180_0
   \   000001                ; // Fall through to label ??Subroutine180_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine180_0:
   \   000000   240B         ADD       A,#0xb
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET
    607          
    608          /**************************************************************************************************
    609           * @fn      zclKE_GetRandom
    610           *
    611           * @brief   Callback function that generates random seeds of the specified length.  This function
    612           *          should copy "size" bytes of random data into "pBuf".
    613           *
    614           * @param   pBuf - This is an unsigned char array of size at least "size" to hold the random data.
    615           * @param   size - The number of bytes of random data to compute and store.
    616           *
    617           * @return  int - MCE_SUCCESS.
    618           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    619          static int zclKE_GetRandom(uint8 *pBuf, uint32 size)
   \                     zclKE_GetRandom:
    620          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   740C         MOV       A,#0xc
   \   00000B   12....       LCALL     ?XSTACK_DISP0_8
   \   00000E   78..         MOV       R0,#?V0
   \   000010   12....       LCALL     ?L_MOV_X
   \   000013   8014         SJMP      ??zclKE_GetRandom_0
    621            // Input to SSP_GetTrueRandAES assumes size <= SEC_KEY_LEN
    622            // Therefore, call SSP_GetTrueRandAES multiple times to
    623            // fill out the buffer.
    624            while( size > SEC_KEY_LEN )
    625            {
    626              SSP_GetTrueRandAES( SEC_KEY_LEN, pBuf );
   \                     ??zclKE_GetRandom_1:
   \   000015                ; Setup parameters for call to function SSP_GetTrueRandAES
   \   000015   7910         MOV       R1,#0x10
   \   000017   12....       LCALL     `??SSP_GetTrueRandAES::?relay`; Banked call to: SSP_GetTrueRandAES
    627              size -= SEC_KEY_LEN;
   \   00001A   90....       MOV       DPTR,#__Constant_fffffff0
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?L_ADD_X
    628              pBuf += SEC_KEY_LEN;
   \   000022   EE           MOV       A,R6
   \   000023   2410         ADD       A,#0x10
   \   000025   FE           MOV       R6,A
   \   000026   5001         JNC       ??zclKE_GetRandom_0
   \   000028   0F           INC       R7
    629            }
   \                     ??zclKE_GetRandom_0:
   \   000029   90....       MOV       DPTR,#__Constant_11
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?UL_GE_X
   \   000031   EE           MOV       A,R6
   \   000032   FA           MOV       R2,A
   \   000033   EF           MOV       A,R7
   \   000034   FB           MOV       R3,A
   \   000035   40DE         JC        ??zclKE_GetRandom_1
    630          
    631            SSP_GetTrueRandAES( (uint8)size, pBuf );
   \   000037                ; Setup parameters for call to function SSP_GetTrueRandAES
   \   000037   A9..         MOV       R1,?V0
   \   000039   12....       LCALL     `??SSP_GetTrueRandAES::?relay`; Banked call to: SSP_GetTrueRandAES
    632          
    633            return MCE_SUCCESS;
   \   00003C   02....       LJMP      ?Subroutine2 & 0xFFFF
    634          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7A00         MOV       R2,#0x0
   \   000002   7B00         MOV       R3,#0x0
   \   000004                REQUIRE ??Subroutine158_0
   \   000004                ; // Fall through to label ??Subroutine158_0
    635          
    636          /**************************************************************************************************
    637           * @fn      zclKE_HashFunc
    638           *
    639           * @brief   This function should compute the hash of the "pData" parameter of size  "dataLen", and
    640           *          store the result in the "pDigest" buffer parameter.
    641           *
    642           * @param   pDigest - output buffer(length must be 16)
    643           * @param   dataLen - length in bytes of the message to be hashed.
    644           * @param   pData - input buffer of data to be hashed
    645           *
    646           * @return  int - MCE_SUCCESS.
    647           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    648          static int zclKE_HashFunc( unsigned char *pDigest, 
   \                     zclKE_HashFunc:
    649                                     unsigned long dataLen, 
    650                                     unsigned char *pData )
    651          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    652            // Convert to bit length
    653            dataLen *= 8;
    654            sspMMOHash( NULL, 0, pData, ( uint16 )dataLen, pDigest );
   \   000005                ; Setup parameters for call to function sspMMOHash
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   78..         MOV       R0,#?V0
   \   00000B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00000E   740E         MOV       A,#0xe
   \   000010   12....       LCALL     ?XSTACK_DISP0_8
   \   000013   78..         MOV       R0,#?V0
   \   000015   12....       LCALL     ?L_MOV_X
   \   000018   7403         MOV       A,#0x3
   \   00001A   78..         MOV       R0,#?V0
   \   00001C   12....       LCALL     ?S_SHL
   \   00001F   78..         MOV       R0,#?V0
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000024   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000027   12....       LCALL     ?DEALLOC_XSTACK8
    655            return MCE_SUCCESS;
   \   00002A   02....       LJMP      ?Subroutine2 & 0xFFFF
    656          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   7900         MOV       R1,#0x0
   \   000002   7A00         MOV       R2,#0x0
   \   000004   7B00         MOV       R3,#0x0
   \   000006   12....       LCALL     `??sspMMOHash::?relay`; Banked call to: sspMMOHash
   \   000009   7404         MOV       A,#0x4
   \   00000B   22           RET
    657          
    658          /**************************************************************************************************
    659           * @fn      zclKE_KeyDeriveFunction
    660           *
    661           * @brief   Key Derive Function (ANSI X9.63).
    662           *          Note this is not a generalized KDF. It only applies to the KDF
    663           *          specified in ZigBee SE profile. Only the first two hashed keys
    664           *          are calculated and concatenated.
    665           *
    666           * @param   pZData - input shared secret
    667           * @param   zDataLen - input shared secret length(ZCL_KE_PRIVATE_KEY_LEN)
    668           * @param   pKeyData - output buffer ( 16*2 bytes)
    669           *
    670           * @return  void
    671           */
    672          static void zclKE_KeyDeriveFunction( uint8 *pZData, uint16 zDataLen, uint8 *pKeyData )
    673          {
    674            uint8 hashCounter[4] = {0x00, 0x00, 0x00, 0x01};
    675            uint8 hashedData[ECCAPI_PRIVATE_KEY_283_LEN + 4]; // Use max ZCL_KE_PRIVATE_KEY_LEN
    676            uint16 bitLen;
    677          
    678            bitLen = ( zDataLen + 4 ) * 8;
    679          
    680            // Calculate K1: Ki = Hash(Z || Counter1 )
    681            osal_memcpy( hashedData, pZData, zDataLen );
    682            osal_memcpy( &(hashedData[zDataLen]), hashCounter, 4);
    683          
    684            sspMMOHash(NULL, 0, hashedData, bitLen, pKeyData);
    685          
    686            // Indrement the counter
    687            hashedData[zDataLen + 3] = 0x02;
    688          
    689            sspMMOHash(NULL, 0, hashedData, bitLen, &(pKeyData[ZCL_KE_KEY_LEN]));
    690          }
    691          
    692          /**************************************************************************************************
    693           * @fn      zclKE_GenEphKeys
    694           *
    695           * @brief   Generate ephemeral keys.
    696           *
    697           * @param   pCtxt - connection context
    698           *
    699           * @return  uint8 - TRUE if successful, FALSE if not
    700           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    701          static uint8 zclKE_GenEphKeys( zclKE_ConnCtxt_t *pCtxt )
   \                     zclKE_GenEphKeys:
    702          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    703            uint8 result;
    704            uint16 len;
    705            zclKE_Conn_t *pConn = pCtxt->pConn;
   \   000009   EA           MOV       A,R2
   \   00000A   2403         ADD       A,#0x3
   \   00000C   F5..         MOV       ?V2,A
   \   00000E   E4           CLR       A
   \   00000F   35..         ADDC      A,?V1
   \   000011   F5..         MOV       ?V3,A
   \   000013   85..82       MOV       DPL,?V2
   \   000016   F583         MOV       DPH,A
   \   000018   12....       LCALL     ??Subroutine188_0 & 0xFFFF
    706          
    707            // Allocate ephemeral public key 
    708            len = zclKE_GetField( pConn->suite, ZCL_KE_PUBLIC_KEY_LEN );
   \                     ??CrossCallReturnLabel_420:
   \   00001B                ; Setup parameters for call to function zclKE_GetField
   \   00001B   7903         MOV       R1,#0x3
   \   00001D   8E82         MOV       DPL,R6
   \   00001F   F583         MOV       DPH,A
   \   000021   12....       LCALL     ?Subroutine44 & 0xFFFF
    709          
    710            pConn->pEPublicKey = zcl_mem_alloc( len );
   \                     ??CrossCallReturnLabel_42:
   \   000024   EE           MOV       A,R6
   \   000025   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000028   EA           MOV       A,R2
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   EB           MOV       A,R3
   \   00002C   F0           MOVX      @DPTR,A
    711          
    712            if ( !pCtxt->pConn->pEPublicKey )
   \   00002D   85..82       MOV       DPL,?V2
   \   000030   85..83       MOV       DPH,?V3
   \   000033   12....       LCALL     ??Subroutine167_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   000036   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000039   38           ADDC      A,R0
   \   00003A   F583         MOV       DPH,A
   \   00003C   12....       LCALL     ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   00003F   607C         JZ        ??zclKE_GenEphKeys_0
    713            {
    714              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
    715              return FALSE;
    716            }
    717          
    718            // Allocate ephemeral private key 
    719            len = zclKE_GetField( pConn->suite, ZCL_KE_PRIVATE_KEY_LEN );
   \   000041                ; Setup parameters for call to function zclKE_GetField
   \   000041   7904         MOV       R1,#0x4
   \   000043   8E82         MOV       DPL,R6
   \   000045   8F83         MOV       DPH,R7
   \   000047   12....       LCALL     ?Subroutine44 & 0xFFFF
    720          
    721            pConn->pEPrivateKey = zcl_mem_alloc( len );
   \                     ??CrossCallReturnLabel_43:
   \   00004A   8B..         MOV       ?V3,R3
   \   00004C   A9..         MOV       R1,?V3
   \   00004E   EE           MOV       A,R6
   \   00004F   241D         ADD       A,#0x1d
   \   000051   F582         MOV       DPL,A
   \   000053   E4           CLR       A
   \   000054   3F           ADDC      A,R7
   \   000055   12....       LCALL     ??Subroutine161_0 & 0xFFFF
    722          
    723            if ( !pConn->pEPrivateKey )
   \                     ??CrossCallReturnLabel_257:
   \   000058   6063         JZ        ??zclKE_GenEphKeys_0
    724            {
    725              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
    726              return FALSE;
    727            }
    728          
    729            // Generate the ephemeral keys
    730            switch ( pConn->suite )
   \   00005A   8E82         MOV       DPL,R6
   \   00005C   8F83         MOV       DPH,R7
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000063   78..         MOV       R0,#?V2
   \   000065   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for zclKE_GenEphKeys>_0`:
   \   000068   0100         DW        1
   \   00006A   01           DB        1
   \   00006B   ....         DW        ??zclKE_GenEphKeys_0
   \   00006D   ....         DW        ??zclKE_GenEphKeys_1
   \   00006F   ....         DW        ??zclKE_GenEphKeys_2
    731            {
    732          #if !defined( ECCAPI_163_DISABLED )
    733              case ZCL_KE_SUITE_1:
    734                result = ZSE_ECCGenerateKey( pConn->pEPrivateKey,
    735                                             pConn->pEPublicKey,
    736                                             zclKE_GetRandom,
    737                                             NULL, 0);
   \                     ??zclKE_GenEphKeys_1:
   \   000071                ; Setup parameters for call to function ZSE_ECCGenerateKey
   \   000071   90....       MOV       DPTR,#__Constant_0
   \   000074   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000077   E4           CLR       A
   \   000078   F5..         MOV       ?V2,A
   \   00007A   F5..         MOV       ?V3,A
   \   00007C   78..         MOV       R0,#?V2
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000081   75....       MOV       ?V2,#`??zclKE_GetRandom::?relay` & 0xff
   \   000084   75....       MOV       ?V3,#(`??zclKE_GetRandom::?relay` >> 8) & 0xff
   \   000087   78..         MOV       R0,#?V2
   \   000089   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008C   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00008F   12....       LCALL     `??ZSE_ECCGenerateKey::?relay`; Banked call to: ZSE_ECCGenerateKey
   \   000092   8021         SJMP      ??zclKE_GenEphKeys_3
    738                break;
    739          #endif // !defined( ECCAPI_163_DISABLED )
    740          
    741          #if !defined( ECCAPI_283_DISABLED )
    742              case ZCL_KE_SUITE_2:
    743                result = ZSE_ECCGenerateKey283( pConn->pEPrivateKey,
    744                                                pConn->pEPublicKey,
    745                                                zclKE_GetRandom,
    746                                                NULL, 0);
   \                     ??zclKE_GenEphKeys_2:
   \   000094                ; Setup parameters for call to function ZSE_ECCGenerateKey283
   \   000094   90....       MOV       DPTR,#__Constant_0
   \   000097   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00009A   E4           CLR       A
   \   00009B   F5..         MOV       ?V2,A
   \   00009D   F5..         MOV       ?V3,A
   \   00009F   78..         MOV       R0,#?V2
   \   0000A1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A4   75....       MOV       ?V2,#`??zclKE_GetRandom::?relay` & 0xff
   \   0000A7   75....       MOV       ?V3,#(`??zclKE_GetRandom::?relay` >> 8) & 0xff
   \   0000AA   78..         MOV       R0,#?V2
   \   0000AC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AF   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000B2   12....       LCALL     `??ZSE_ECCGenerateKey283::?relay`; Banked call to: ZSE_ECCGenerateKey283
   \                     ??zclKE_GenEphKeys_3:
   \   0000B5   7408         MOV       A,#0x8
   \   0000B7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BA   EA           MOV       A,R2
    747                break;
    748          #endif // !defined( ECCAPI_283_DISABLED )
    749          
    750              default:
    751                // Should never get here
    752                result = MCE_ERR_BAD_INPUT;
    753                break;
    754            }
    755          
    756            if ( result != MCE_SUCCESS )
   \   0000BB   600D         JZ        ??zclKE_GenEphKeys_4
    757            {
    758              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   \                     ??zclKE_GenEphKeys_0:
   \   0000BD   85..82       MOV       DPL,?V0
   \   0000C0   85..83       MOV       DPH,?V1
   \   0000C3   7404         MOV       A,#0x4
   \   0000C5   F0           MOVX      @DPTR,A
    759              return FALSE;
   \   0000C6   7900         MOV       R1,#0x0
   \   0000C8   8002         SJMP      ??zclKE_GenEphKeys_5
    760            }
    761          
    762            return TRUE;
   \                     ??zclKE_GenEphKeys_4:
   \   0000CA   7901         MOV       R1,#0x1
   \                     ??zclKE_GenEphKeys_5:
   \   0000CC                REQUIRE ?Subroutine3
   \   0000CC                ; // Fall through to label ?Subroutine3
    763          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine149_0
   \   000003                ; // Fall through to label ??Subroutine149_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine149_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V2,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   12....       LCALL     ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   EE           MOV       A,R6
   \   000001   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000004   3F           ADDC      A,R7
   \   000005   12....       LCALL     ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000008   EE           MOV       A,R6
   \   000009   241D         ADD       A,#0x1d
   \   00000B   F582         MOV       DPL,A
   \   00000D   E4           CLR       A
   \   00000E   3F           ADDC      A,R7
   \   00000F   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_396:
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine150_0
   \   000002                ; // Fall through to label ??Subroutine150_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine150_0:
   \   000000   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   000003   FB           MOV       R3,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine151_0
   \   000002                ; // Fall through to label ??Subroutine151_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine151_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   241B         ADD       A,#0x1b
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   12....       LCALL     ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine161_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine162_0
   \   000002                ; // Fall through to label ??Subroutine162_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine162_0:
   \   000000   12....       LCALL     ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine167_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   C8           XCH       A,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   EA           MOV       A,R2
   \   000006   49           ORL       A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine188_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET
    764          
    765          /**************************************************************************************************
    766           * @fn      zclKE_GenKeyBits
    767           *
    768           * @brief   Generate key bits.
    769           *
    770           * @param   pCtxt - connection context
    771           * @param   pKeyBits - key bits buffer(ZCL_KE_PRIVATE_KEY_LEN)
    772           *
    773           * @return  uint8 - TRUE if successful, FALSE if not
    774           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    775          static uint8 zclKE_GenKeyBits( zclKE_ConnCtxt_t *pCtxt, uint8 *pKeyBits )
   \                     zclKE_GenKeyBits:
    776          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EC           MOV       A,R4
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   ED           MOV       A,R5
   \   000013   F0           MOVX      @DPTR,A
   \   000014   8A..         MOV       ?V14,R2
   \   000016   8B..         MOV       ?V15,R3
    777            uint8 success;
    778            uint8 result;
    779            uint8 rxOnIdleSaved;
    780            uint8 rxOnIdleSet;
    781            uint8 *pPublicKey = NULL;
    782            uint8 *pPrivateKey = NULL;
   \   000018   75..00       MOV       ?V8,#0x0
   \   00001B   75..00       MOV       ?V9,#0x0
    783            uint16 publicKeyLen;
    784            uint16 privateKeyLen;
    785            zclKE_Conn_t *pConn = pCtxt->pConn;
   \   00001E   8A82         MOV       DPL,R2
   \   000020   8B83         MOV       DPH,R3
   \   000022   12....       LCALL     ?Subroutine51 & 0xFFFF
    786          
    787            // Assume success
    788            success = TRUE;
   \                     ??CrossCallReturnLabel_208:
   \   000025   75..01       MOV       ?V6,#0x1
    789          
    790            publicKeyLen = zclKE_GetField( pConn->suite, ZCL_KE_PUBLIC_KEY_LEN );
   \   000028   E5..         MOV       A,?V2
   \   00002A   2405         ADD       A,#0x5
   \   00002C   F5..         MOV       ?V4,A
   \   00002E   E4           CLR       A
   \   00002F   35..         ADDC      A,?V3
   \   000031   F5..         MOV       ?V5,A
   \   000033                ; Setup parameters for call to function zclKE_GetField
   \   000033   7903         MOV       R1,#0x3
   \   000035   85..82       MOV       DPL,?V4
   \   000038   F583         MOV       DPH,A
   \   00003A   12....       LCALL     ?Subroutine36 & 0xFFFF
    791            privateKeyLen = zclKE_GetField( pConn->suite, ZCL_KE_PRIVATE_KEY_LEN );
   \                     ??CrossCallReturnLabel_32:
   \   00003D                ; Setup parameters for call to function zclKE_GetField
   \   00003D   7904         MOV       R1,#0x4
   \   00003F   85..82       MOV       DPL,?V4
   \   000042   85..83       MOV       DPH,?V5
   \   000045   12....       LCALL     ?Subroutine43 & 0xFFFF
    792            
    793            do 
    794            {
    795              pPublicKey = osal_mem_alloc( publicKeyLen );
   \                     ??CrossCallReturnLabel_41:
   \   000048                ; Setup parameters for call to function osal_mem_alloc
   \   000048   EE           MOV       A,R6
   \   000049   FA           MOV       R2,A
   \   00004A   EF           MOV       A,R7
   \   00004B   12....       LCALL     ?Subroutine94 & 0xFFFF
    796              if ( !pPublicKey )
   \                     ??CrossCallReturnLabel_133:
   \   00004E   600F         JZ        ??zclKE_GenKeyBits_0
    797              {
    798                pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
    799                success = FALSE;
    800                break;
    801              }
    802          
    803              pPrivateKey = osal_mem_alloc( privateKeyLen );
   \   000050                ; Setup parameters for call to function osal_mem_alloc
   \   000050   AA..         MOV       R2,?V0
   \   000052   AB..         MOV       R3,?V1
   \   000054   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000057   8A..         MOV       ?V8,R2
   \   000059   8B..         MOV       ?V9,R3
    804              if ( !pPrivateKey )
   \   00005B   EA           MOV       A,R2
   \   00005C   4B           ORL       A,R3
   \   00005D   700F         JNZ       ??zclKE_GenKeyBits_1
    805              {
    806                pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   \                     ??zclKE_GenKeyBits_0:
   \   00005F   85..82       MOV       DPL,?V14
   \   000062   85..83       MOV       DPH,?V15
   \   000065   7404         MOV       A,#0x4
   \   000067   F0           MOVX      @DPTR,A
    807                success = FALSE;
   \   000068   75..00       MOV       ?V6,#0x0
    808                break;
   \   00006B   02....       LJMP      ??zclKE_GenKeyBits_2 & 0xFFFF
    809              }
    810          
    811              osal_nv_read( zclKE_GetField( pConn->suite, ZCL_KE_PUBLIC_KEY_NV_ID ), 0,
    812                            publicKeyLen, pPublicKey );
   \                     ??zclKE_GenKeyBits_1:
   \   00006E   E5..         MOV       A,?V2
   \   000070   2405         ADD       A,#0x5
   \   000072   E4           CLR       A
   \   000073   35..         ADDC      A,?V3
   \   000075                ; Setup parameters for call to function zclKE_GetField
   \   000075   7900         MOV       R1,#0x0
   \   000077   85..82       MOV       DPL,?V4
   \   00007A   F583         MOV       DPH,A
   \   00007C   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00007F                ; Setup parameters for call to function osal_nv_read
   \   00007F   78..         MOV       R0,#?V10
   \   000081   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000084   8E..         MOV       ?V12,R6
   \   000086   8F..         MOV       ?V13,R7
   \   000088   78..         MOV       R0,#?V12
   \   00008A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008D   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000090   12....       LCALL     ?DEALLOC_XSTACK8
    813          
    814              osal_nv_read( zclKE_GetField( pConn->suite, ZCL_KE_PRIVATE_KEY_NV_ID ), 0,
    815                            privateKeyLen, pPrivateKey );
   \   000093                ; Setup parameters for call to function zclKE_GetField
   \   000093   7901         MOV       R1,#0x1
   \   000095   85..82       MOV       DPL,?V4
   \   000098   85..83       MOV       DPH,?V5
   \   00009B   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00009E                ; Setup parameters for call to function osal_nv_read
   \   00009E   78..         MOV       R0,#?V8
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A3   78..         MOV       R0,#?V0
   \   0000A5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A8   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   0000AB   12....       LCALL     ?DEALLOC_XSTACK8
    816          
    817              // Turn off the radio before the key bit generation, in order to avoid
    818              // incoming message accumulation by interrupts during the long process time.
    819              rxOnIdleSet = FALSE;
   \   0000AE   85..82       MOV       DPL,?XSP + 0
   \   0000B1   85..83       MOV       DPH,?XSP + 1
   \   0000B4   E4           CLR       A
   \   0000B5   F0           MOVX      @DPTR,A
    820              ZMacGetReq( ZMacRxOnIdle, &rxOnIdleSaved );
   \   0000B6                ; Setup parameters for call to function ZMacGetReq
   \   0000B6   04           INC       A
   \   0000B7   12....       LCALL     ?XSTACK_DISP101_8
   \   0000BA   7952         MOV       R1,#0x52
   \   0000BC   12....       LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
    821              ZMacSetReq( ZMacRxOnIdle, &rxOnIdleSet );
   \   0000BF                ; Setup parameters for call to function ZMacSetReq
   \   0000BF   AA..         MOV       R2,?XSP + 0
   \   0000C1   AB..         MOV       R3,?XSP + 1
   \   0000C3   7952         MOV       R1,#0x52
   \   0000C5   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    822          
    823              // DO NOT BREAK -- until radio state is restored
    824          
    825              // Generate the ephemeral keys
    826              switch ( pConn->suite )
   \   0000C8   85..82       MOV       DPL,?V4
   \   0000CB   85..83       MOV       DPH,?V5
   \   0000CE   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0000D1   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for zclKE_GenKeyBits>_0`:
   \   0000D4   0100         DW        1
   \   0000D6   01           DB        1
   \   0000D7   ....         DW        ??zclKE_GenKeyBits_3
   \   0000D9   ....         DW        ??zclKE_GenKeyBits_4
   \   0000DB   ....         DW        ??zclKE_GenKeyBits_5
    827              {
    828          #if !defined( ECCAPI_163_DISABLED )
    829                case ZCL_KE_SUITE_1:
    830                  result = ZSE_ECCKeyBitGenerate( pPrivateKey, pConn->pEPrivateKey,
    831                                                  pConn->pEPublicKey, pConn->pRmtCert,
    832                                                  pConn->pRmtEPublicKey, pPublicKey,
    833                                                  pKeyBits, zclKE_HashFunc, NULL, 0 );
   \                     ??zclKE_GenKeyBits_4:
   \   0000DD                ; Setup parameters for call to function ZSE_ECCKeyBitGenerate
   \   0000DD   90....       MOV       DPTR,#__Constant_0
   \   0000E0   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000E3   E4           CLR       A
   \   0000E4   F5..         MOV       ?V4,A
   \   0000E6   F5..         MOV       ?V5,A
   \   0000E8   78..         MOV       R0,#?V4
   \   0000EA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000ED   75....       MOV       ?V4,#`??zclKE_HashFunc::?relay` & 0xff
   \   0000F0   75....       MOV       ?V5,#(`??zclKE_HashFunc::?relay` >> 8) & 0xff
   \   0000F3   78..         MOV       R0,#?V4
   \   0000F5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F8   740A         MOV       A,#0xa
   \   0000FA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FD   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000100   78..         MOV       R0,#?V10
   \   000102   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000105   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000108   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00010B   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   00010E   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000111   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000114   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000117   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00011A   12....       LCALL     `??ZSE_ECCKeyBitGenerate::?relay`; Banked call to: ZSE_ECCKeyBitGenerate
   \   00011D   8040         SJMP      ??zclKE_GenKeyBits_6
    834                  break;
    835          #endif // !defined( ECCAPI_163_DISABLED )
    836          
    837          #if !defined( ECCAPI_283_DISABLED )
    838                case ZCL_KE_SUITE_2:
    839                  result = ZSE_ECCKeyBitGenerate283( pPrivateKey, pConn->pEPrivateKey,
    840                                                     pConn->pEPublicKey, pConn->pRmtCert,
    841                                                     pConn->pRmtEPublicKey, pPublicKey,
    842                                                     pKeyBits, zclKE_HashFunc, NULL, 0 );
   \                     ??zclKE_GenKeyBits_5:
   \   00011F                ; Setup parameters for call to function ZSE_ECCKeyBitGenerate283
   \   00011F   90....       MOV       DPTR,#__Constant_0
   \   000122   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000125   E4           CLR       A
   \   000126   F5..         MOV       ?V4,A
   \   000128   F5..         MOV       ?V5,A
   \   00012A   78..         MOV       R0,#?V4
   \   00012C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012F   75....       MOV       ?V4,#`??zclKE_HashFunc::?relay` & 0xff
   \   000132   75....       MOV       ?V5,#(`??zclKE_HashFunc::?relay` >> 8) & 0xff
   \   000135   78..         MOV       R0,#?V4
   \   000137   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00013A   740A         MOV       A,#0xa
   \   00013C   12....       LCALL     ?XSTACK_DISP0_8
   \   00013F   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000142   78..         MOV       R0,#?V10
   \   000144   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000147   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   00014A   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00014D   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000150   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000153   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000156   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000159   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00015C   12....       LCALL     `??ZSE_ECCKeyBitGenerate283::?relay`; Banked call to: ZSE_ECCKeyBitGenerate283
   \                     ??zclKE_GenKeyBits_6:
   \   00015F   7412         MOV       A,#0x12
   \   000161   12....       LCALL     ?DEALLOC_XSTACK8
   \   000164   EA           MOV       A,R2
    843                  break;
    844          #endif // !defined( ECCAPI_283_DISABLED )
    845          
    846                default:
    847                  // Should never get here
    848                  result = MCE_ERR_BAD_INPUT;
    849                  break;
    850              }
    851          
    852              if( result != MCE_SUCCESS )
   \   000165   600C         JZ        ??zclKE_GenKeyBits_7
    853              {
    854                pCtxt->error = ZCL_KE_TERMINATE_BAD_KEY_CONFIRM;
   \                     ??zclKE_GenKeyBits_3:
   \   000167   85..82       MOV       DPL,?V14
   \   00016A   85..83       MOV       DPH,?V15
   \   00016D   7402         MOV       A,#0x2
   \   00016F   F0           MOVX      @DPTR,A
    855                success = FALSE;
   \   000170   75..00       MOV       ?V6,#0x0
    856                // DO NOT BREAK -- until radio state is restored
    857              }
    858          
    859              // Restore radio state
    860              ZMacSetReq( ZMacRxOnIdle, &rxOnIdleSaved );
   \                     ??zclKE_GenKeyBits_7:
   \   000173                ; Setup parameters for call to function ZMacSetReq
   \   000173   7401         MOV       A,#0x1
   \   000175   12....       LCALL     ?XSTACK_DISP101_8
   \   000178   7952         MOV       R1,#0x52
   \   00017A   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    861          
    862            } while ( 0 );
    863          
    864            // Cleanup local memory allocations
    865            zclKE_MemFree( pPublicKey, publicKeyLen );
   \                     ??zclKE_GenKeyBits_2:
   \   00017D                ; Setup parameters for call to function zclKE_MemFree
   \   00017D   EE           MOV       A,R6
   \   00017E   FC           MOV       R4,A
   \   00017F   EF           MOV       A,R7
   \   000180   FD           MOV       R5,A
   \   000181   AA..         MOV       R2,?V10
   \   000183   AB..         MOV       R3,?V11
   \   000185   12....       LCALL     `??zclKE_MemFree::?relay`; Banked call to: zclKE_MemFree
    866            zclKE_MemFree( pPrivateKey, privateKeyLen );
   \   000188                ; Setup parameters for call to function zclKE_MemFree
   \   000188   AC..         MOV       R4,?V0
   \   00018A   AD..         MOV       R5,?V1
   \   00018C   AA..         MOV       R2,?V8
   \   00018E   AB..         MOV       R3,?V9
   \   000190   12....       LCALL     `??zclKE_MemFree::?relay`; Banked call to: zclKE_MemFree
    867          
    868            return success;
   \   000193   A9..         MOV       R1,?V6
   \   000195   7404         MOV       A,#0x4
   \   000197                REQUIRE ?Subroutine4
   \   000197                ; // Fall through to label ?Subroutine4
    869          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F10         MOV       R7,#0x10
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   7C00         MOV       R4,#0x0
   \   000002   7D00         MOV       R5,#0x0
   \   000004                REQUIRE ??Subroutine152_0
   \   000004                ; // Fall through to label ??Subroutine152_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine152_0:
   \   000000   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   E5..         MOV       A,?V2
   \   000002   12....       LCALL     ??Subroutine170_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   000005   35..         ADDC      A,?V3
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   E5..         MOV       A,?V2
   \   000002   241F         ADD       A,#0x1f
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V3
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   E5..         MOV       A,?V2
   \   000002   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000005   35..         ADDC      A,?V3
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   E5..         MOV       A,?V2
   \   000002   241D         ADD       A,#0x1d
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V3
   \   000009   12....       LCALL     ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   00000C   AA..         MOV       R2,?V8
   \   00000E   AB..         MOV       R3,?V9
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   FB           MOV       R3,A
   \   000001   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000004   8A..         MOV       ?V10,R2
   \   000006   8B..         MOV       ?V11,R3
   \   000008   EA           MOV       A,R2
   \   000009   4B           ORL       A,R3
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL     ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   000003   78..         MOV       R0,#?V4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000003   AE..         MOV       R6,?V0
   \   000005   AF..         MOV       R7,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL     ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine170_0:
   \   000000   2421         ADD       A,#0x21
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET
    870          
    871          /**************************************************************************************************
    872           * @fn      zclKE_GenKeys
    873           *
    874           * @brief   Generate keys.
    875           *
    876           * @param   pCtxt - connection context
    877           *
    878           * @return  uint8 - TRUE if successful, FALSE if not
    879           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    880          static uint8 zclKE_GenKeys( zclKE_ConnCtxt_t *pCtxt )
   \                     zclKE_GenKeys:
    881          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 44
   \   000005   74D4         MOV       A,#-0x2c
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
    882            uint8 success;
    883            uint8 *pKeyBits = NULL;
    884            uint8 *pKeyData = NULL;
   \   00000E   75..00       MOV       ?V10,#0x0
   \   000011   75..00       MOV       ?V11,#0x0
    885            uint16 privateKeyLen;
    886            zclKE_Conn_t *pConn = pCtxt->pConn;
   \   000014   8A82         MOV       DPL,R2
   \   000016   8B83         MOV       DPH,R3
   \   000018   12....       LCALL     ?Subroutine117 & 0xFFFF
    887          
    888            // Assume success
    889            success = TRUE;
   \                     ??CrossCallReturnLabel_221:
   \   00001B   75..01       MOV       ?V2,#0x1
    890          
    891            privateKeyLen = zclKE_GetField( pConn->suite, ZCL_KE_PRIVATE_KEY_LEN );
   \   00001E                ; Setup parameters for call to function zclKE_GetField
   \   00001E   7904         MOV       R1,#0x4
   \   000020   85..82       MOV       DPL,?V8
   \   000023   F583         MOV       DPH,A
   \   000025   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000028   AE..         MOV       R6,?V4
   \   00002A   AF..         MOV       R7,?V5
    892          
    893            do
    894            {
    895              // Allocate buffer for "zclKE_GenKeyBits"
    896              pKeyBits = osal_mem_alloc( privateKeyLen );
   \   00002C                ; Setup parameters for call to function osal_mem_alloc
   \   00002C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002F   8A..         MOV       ?V14,R2
   \   000031   8B..         MOV       ?V15,R3
    897              if ( !pKeyBits )
   \   000033   EA           MOV       A,R2
   \   000034   4B           ORL       A,R3
   \   000035   6074         JZ        ??zclKE_GenKeys_0
    898              {
    899                pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
    900                success = FALSE;
    901                break;
    902              }
    903          
    904              // Generate key bitstream
    905              if ( !zclKE_GenKeyBits( pCtxt, pKeyBits ) )
   \   000037                ; Setup parameters for call to function zclKE_GenKeyBits
   \   000037   AC..         MOV       R4,?V14
   \   000039   AD..         MOV       R5,?V15
   \   00003B   AA..         MOV       R2,?V0
   \   00003D   AB..         MOV       R3,?V1
   \   00003F   12....       LCALL     `??zclKE_GenKeyBits::?relay`; Banked call to: zclKE_GenKeyBits
   \   000042   E9           MOV       A,R1
   \   000043   606F         JZ        ??zclKE_GenKeys_1
    906              {
    907                // pCtxt->error set in "zclKE_GenKeyBits"
    908                success = FALSE;
    909                break;
    910              }
    911          
    912              // Release and clear any memory blocks that are not needed
    913              zclKE_MemFree( pConn->pRmtCert, zclKE_GetField( pConn->suite, ZCL_KE_CERT_LEN ) ); 
   \   000045                ; Setup parameters for call to function zclKE_GetField
   \   000045   7905         MOV       R1,#0x5
   \   000047   85..82       MOV       DPL,?V8
   \   00004A   85..83       MOV       DPH,?V9
   \   00004D   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000050   AC..         MOV       R4,?V4
   \   000052   AD..         MOV       R5,?V5
   \   000054   E5..         MOV       A,?V8
   \   000056   2421         ADD       A,#0x21
   \   000058   F5..         MOV       ?V6,A
   \   00005A   E4           CLR       A
   \   00005B   35..         ADDC      A,?V9
   \   00005D   F5..         MOV       ?V7,A
   \   00005F                ; Setup parameters for call to function zclKE_MemFree
   \   00005F   85..82       MOV       DPL,?V6
   \   000062   12....       LCALL     ??Subroutine146_0 & 0xFFFF
    914              zclKE_MemFree( pConn->pEPrivateKey, privateKeyLen ); 
   \                     ??CrossCallReturnLabel_199:
   \   000065   E5..         MOV       A,?V8
   \   000067   241D         ADD       A,#0x1d
   \   000069   F5..         MOV       ?V4,A
   \   00006B   E4           CLR       A
   \   00006C   35..         ADDC      A,?V9
   \   00006E   F5..         MOV       ?V5,A
   \   000070                ; Setup parameters for call to function zclKE_MemFree
   \   000070   EE           MOV       A,R6
   \   000071   FC           MOV       R4,A
   \   000072   EF           MOV       A,R7
   \   000073   FD           MOV       R5,A
   \   000074   85..82       MOV       DPL,?V4
   \   000077   85..83       MOV       DPH,?V5
   \   00007A   12....       LCALL     ??Subroutine147_0 & 0xFFFF
    915              pConn->pRmtCert = NULL;
   \                     ??CrossCallReturnLabel_200:
   \   00007D   85..82       MOV       DPL,?V6
   \   000080   85..83       MOV       DPH,?V7
   \   000083   E4           CLR       A
   \   000084   F0           MOVX      @DPTR,A
   \   000085   A3           INC       DPTR
   \   000086   F0           MOVX      @DPTR,A
    916              pConn->pEPrivateKey = NULL;
   \   000087   85..82       MOV       DPL,?V4
   \   00008A   85..83       MOV       DPH,?V5
   \   00008D   F0           MOVX      @DPTR,A
   \   00008E   A3           INC       DPTR
   \   00008F   F0           MOVX      @DPTR,A
    917          
    918              // Allocate buffer for key data: KDF(KEY_BITS) = MAC_KEY_DATA || KEY_DATA
    919              pKeyData = osal_mem_alloc( 2 * ZCL_KE_KEY_LEN );
   \   000090                ; Setup parameters for call to function osal_mem_alloc
   \   000090   7A20         MOV       R2,#0x20
   \   000092   12....       LCALL     ?Subroutine94 & 0xFFFF
    920              if ( !pKeyData )
   \                     ??CrossCallReturnLabel_134:
   \   000095   6014         JZ        ??zclKE_GenKeys_0
    921              {
    922                pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
    923                success = FALSE;
    924                break;
    925              }
    926          
    927              pConn->pMACKey = osal_mem_alloc( ZCL_KE_KEY_LEN );
   \   000097                ; Setup parameters for call to function osal_mem_alloc
   \   000097   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   00009A   2425         ADD       A,#0x25
   \   00009C   12....       LCALL     ?Subroutine67 & 0xFFFF
    928              if ( !pConn->pMACKey )
   \                     ??CrossCallReturnLabel_255:
   \   00009F   600A         JZ        ??zclKE_GenKeys_0
    929              {
    930                pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
    931                success = FALSE;
    932                break;
    933              }
    934          
    935              pConn->pKey = osal_mem_alloc( ZCL_KE_KEY_LEN );
   \   0000A1                ; Setup parameters for call to function osal_mem_alloc
   \   0000A1   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   0000A4   2423         ADD       A,#0x23
   \   0000A6   12....       LCALL     ?Subroutine67 & 0xFFFF
    936              if ( !pConn->pKey )
   \                     ??CrossCallReturnLabel_256:
   \   0000A9   700F         JNZ       ??zclKE_GenKeys_2
    937              {
    938                pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   \                     ??zclKE_GenKeys_0:
   \   0000AB   85..82       MOV       DPL,?V0
   \   0000AE   85..83       MOV       DPH,?V1
   \   0000B1   7404         MOV       A,#0x4
   \   0000B3   F0           MOVX      @DPTR,A
    939                success = FALSE;
   \                     ??zclKE_GenKeys_1:
   \   0000B4   75..00       MOV       ?V2,#0x0
    940                break;
   \   0000B7   02....       LJMP      ??zclKE_GenKeys_3 & 0xFFFF
    941              }
    942          
    943              // Derive the keying data using KDF function
    944              zclKE_KeyDeriveFunction( pKeyBits, privateKeyLen, pKeyData );
   \                     ??zclKE_GenKeys_2:
   \   0000BA   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 1}>`
   \   0000BD   AC..         MOV       R4,?XSP + 0
   \   0000BF   AD..         MOV       R5,?XSP + 1
   \   0000C1   7404         MOV       A,#0x4
   \   0000C3   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   0000C6   EE           MOV       A,R6
   \   0000C7   2404         ADD       A,#0x4
   \   0000C9   F5..         MOV       ?V4,A
   \   0000CB   E4           CLR       A
   \   0000CC   3F           ADDC      A,R7
   \   0000CD   F5..         MOV       ?V5,A
   \   0000CF   7403         MOV       A,#0x3
   \   0000D1   78..         MOV       R0,#?V4
   \   0000D3   12....       LCALL     ?S_SHL
   \   0000D6   85....       MOV       ?V0,?V4
   \   0000D9   85....       MOV       ?V1,?V5
   \   0000DC                ; Setup parameters for call to function osal_memcpy
   \   0000DC   85....       MOV       ?V4,?V14
   \   0000DF   85....       MOV       ?V5,?V15
   \   0000E2   F5..         MOV       ?V6,A
   \   0000E4   78..         MOV       R0,#?V4
   \   0000E6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000E9   EE           MOV       A,R6
   \   0000EA   FC           MOV       R4,A
   \   0000EB   EF           MOV       A,R7
   \   0000EC   FD           MOV       R5,A
   \   0000ED   7407         MOV       A,#0x7
   \   0000EF   12....       LCALL     ?XSTACK_DISP101_8
   \   0000F2   12....       LCALL     ??Subroutine155_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   0000F5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F8   7404         MOV       A,#0x4
   \   0000FA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FD   E582         MOV       A,DPL
   \   0000FF   2E           ADD       A,R6
   \   000100   F5..         MOV       ?V12,A
   \   000102   E583         MOV       A,DPH
   \   000104   3F           ADDC      A,R7
   \   000105   F5..         MOV       ?V13,A
   \   000107                ; Setup parameters for call to function osal_memcpy
   \   000107   A8..         MOV       R0,?XSP + 0
   \   000109   A9..         MOV       R1,?XSP + 1
   \   00010B   88..         MOV       ?V4,R0
   \   00010D   89..         MOV       ?V5,R1
   \   00010F   78..         MOV       R0,#?V4
   \   000111   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000114   7C04         MOV       R4,#0x4
   \   000116   7D00         MOV       R5,#0x0
   \   000118   AA..         MOV       R2,?V12
   \   00011A   AB..         MOV       R3,?V13
   \   00011C   12....       LCALL     ??Subroutine155_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   00011F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000122                ; Setup parameters for call to function sspMMOHash
   \   000122   78..         MOV       R0,#?V10
   \   000124   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000127   78..         MOV       R0,#?V0
   \   000129   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012C   7408         MOV       A,#0x8
   \   00012E   12....       LCALL     ?XSTACK_DISP102_8
   \   000131   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000134   12....       LCALL     ?DEALLOC_XSTACK8
   \   000137   85..82       MOV       DPL,?V12
   \   00013A   85..83       MOV       DPH,?V13
   \   00013D   A3           INC       DPTR
   \   00013E   A3           INC       DPTR
   \   00013F   A3           INC       DPTR
   \   000140   7402         MOV       A,#0x2
   \   000142   F0           MOVX      @DPTR,A
   \   000143   E5..         MOV       A,?V10
   \   000145   2410         ADD       A,#0x10
   \   000147   F5..         MOV       ?V12,A
   \   000149   E4           CLR       A
   \   00014A   35..         ADDC      A,?V11
   \   00014C   F5..         MOV       ?V13,A
   \   00014E                ; Setup parameters for call to function sspMMOHash
   \   00014E   78..         MOV       R0,#?V12
   \   000150   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000153   78..         MOV       R0,#?V0
   \   000155   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000158   7408         MOV       A,#0x8
   \   00015A   12....       LCALL     ?XSTACK_DISP102_8
   \   00015D   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000160   12....       LCALL     ?DEALLOC_XSTACK8
    945          
    946              // Save the derived keys
    947              osal_memcpy( pConn->pMACKey, pKeyData, ZCL_KE_KEY_LEN );
    948              osal_memcpy( pConn->pKey, &(pKeyData[ZCL_KE_KEY_LEN]), ZCL_KE_KEY_LEN );
    949          
    950            } while ( 0 );
   \   000163                ; Setup parameters for call to function osal_memcpy
   \   000163   85....       MOV       ?V4,?V10
   \   000166   85....       MOV       ?V5,?V11
   \   000169   78..         MOV       R0,#?V4
   \   00016B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00016E   7C10         MOV       R4,#0x10
   \   000170   7D00         MOV       R5,#0x0
   \   000172   E5..         MOV       A,?V8
   \   000174   2425         ADD       A,#0x25
   \   000176   F582         MOV       DPL,A
   \   000178   E4           CLR       A
   \   000179   35..         ADDC      A,?V9
   \   00017B   12....       LCALL     ??Subroutine173_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   00017E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000181                ; Setup parameters for call to function osal_memcpy
   \   000181   85....       MOV       ?V4,?V12
   \   000184   85....       MOV       ?V5,?V13
   \   000187   78..         MOV       R0,#?V4
   \   000189   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00018C   7C10         MOV       R4,#0x10
   \   00018E   7D00         MOV       R5,#0x0
   \   000190   E5..         MOV       A,?V8
   \   000192   2423         ADD       A,#0x23
   \   000194   F582         MOV       DPL,A
   \   000196   E4           CLR       A
   \   000197   35..         ADDC      A,?V9
   \   000199   12....       LCALL     ??Subroutine173_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_326:
   \   00019C   12....       LCALL     ?DEALLOC_XSTACK8
    951          
    952            // Cleanup local memory allocations
    953            zclKE_MemFree( pKeyBits, privateKeyLen );
   \                     ??zclKE_GenKeys_3:
   \   00019F                ; Setup parameters for call to function zclKE_MemFree
   \   00019F   EE           MOV       A,R6
   \   0001A0   FC           MOV       R4,A
   \   0001A1   EF           MOV       A,R7
   \   0001A2   FD           MOV       R5,A
   \   0001A3   AA..         MOV       R2,?V14
   \   0001A5   AB..         MOV       R3,?V15
   \   0001A7   12....       LCALL     `??zclKE_MemFree::?relay`; Banked call to: zclKE_MemFree
    954            zclKE_MemFree( pKeyData, 2 * ZCL_KE_KEY_LEN );
   \   0001AA                ; Setup parameters for call to function zclKE_MemFree
   \   0001AA   7C20         MOV       R4,#0x20
   \   0001AC   7D00         MOV       R5,#0x0
   \   0001AE   AA..         MOV       R2,?V10
   \   0001B0   AB..         MOV       R3,?V11
   \   0001B2   12....       LCALL     `??zclKE_MemFree::?relay`; Banked call to: zclKE_MemFree
    955          
    956            return success;
   \   0001B5   A9..         MOV       R1,?V2
   \   0001B7   742C         MOV       A,#0x2c
   \   0001B9   02....       LJMP      ?Subroutine4 & 0xFFFF
    957          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine153_0
   \   000003                ; // Fall through to label ??Subroutine153_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine153_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V8,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V9,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   7A10         MOV       R2,#0x10
   \   000002   7B00         MOV       R3,#0x0
   \   000004   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000007   8B..         MOV       ?V5,R3
   \   000009   A9..         MOV       R1,?V5
   \   00000B   E5..         MOV       A,?V8
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005                REQUIRE ??Subroutine154_0
   \   000005                ; // Fall through to label ??Subroutine154_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine154_0:
   \   000000   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   12....       LCALL     ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000003   8A..         MOV       ?V4,R2
   \   000005   8B..         MOV       ?V5,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine155_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V9
   \   000005                REQUIRE ??Subroutine161_0
   \   000005                ; // Fall through to label ??Subroutine161_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine173_0:
   \   000000   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   000003   12....       LCALL     ??Subroutine155_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   000006   22           RET
    958          
    959          /**************************************************************************************************
    960           * @fn      zclKE_GenKeys
    961           *
    962           * @brief   Generate MAC value.
    963           *
    964           * @param   pConn - server or client connection
    965           * @param   initiator - key establishment initiator(TRUE) or responder(FALSE)
    966           * @param   MACu - MACu(TRUE) or MACv(FALSE)
    967           * @param   pMAC - MAC buffer
    968           *
    969           * @return  uint8 - TRUE if successful, FALSE if not
    970           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    971          static uint8 zclKE_GenMAC( zclKE_Conn_t *pConn, uint8 initiator, uint8 MACu, uint8* pMAC )
   \                     zclKE_GenMAC:
    972          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V8,R2
   \   00000C   8B..         MOV       ?V9,R3
   \   00000E   89..         MOV       ?V10,R1
   \   000010   8C..         MOV       ?V7,R4
    973            uint8 *hashBuf = NULL;
    974            uint16 bufLen;
    975            uint16 keyLen;
    976            uint8 rmtExtAddr[Z_EXTADDR_LEN];
    977          
    978            // Lookup remote extended address
    979            if ( !AddrMgrExtAddrLookup( pConn->partner.addr.shortAddr, rmtExtAddr ) )
   \   000012                ; Setup parameters for call to function AddrMgrExtAddrLookup
   \   000012   AC..         MOV       R4,?XSP + 0
   \   000014   AD..         MOV       R5,?XSP + 1
   \   000016   EA           MOV       A,R2
   \   000017   12....       LCALL     ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_411:
   \   00001A   35..         ADDC      A,?V9
   \   00001C   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   00001F   602D         JZ        ??zclKE_GenMAC_0
    980            {
    981              return FALSE;
    982            }
    983          
    984            // Lookup key length
    985            keyLen = zclKE_GetField( pConn->suite, ZCL_KE_PUBLIC_KEY_LEN );
   \   000021                ; Setup parameters for call to function zclKE_GetField
   \   000021   7903         MOV       R1,#0x3
   \   000023   85..82       MOV       DPL,?V8
   \   000026   85..83       MOV       DPH,?V9
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   12....       LCALL     ?Subroutine36 & 0xFFFF
    986          
    987            // MAC(U) = MAC(MacKey) { M(U) || ID(U) || ID(V) || E(U) || E(V) }
    988            bufLen = 1 + (Z_EXTADDR_LEN * 2) + (keyLen * 2);
   \                     ??CrossCallReturnLabel_33:
   \   000031   EA           MOV       A,R2
   \   000032   2A           ADD       A,R2
   \   000033   F8           MOV       R0,A
   \   000034   EB           MOV       A,R3
   \   000035   33           RLC       A
   \   000036   F9           MOV       R1,A
   \   000037   E8           MOV       A,R0
   \   000038   2411         ADD       A,#0x11
   \   00003A   F5..         MOV       ?V0,A
   \   00003C   E4           CLR       A
   \   00003D   39           ADDC      A,R1
   \   00003E   F5..         MOV       ?V1,A
    989            hashBuf = osal_mem_alloc( bufLen );
   \   000040                ; Setup parameters for call to function osal_mem_alloc
   \   000040   AA..         MOV       R2,?V0
   \   000042   FB           MOV       R3,A
   \   000043   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000046   8A..         MOV       ?V2,R2
   \   000048   8B..         MOV       ?V3,R3
    990            if( !hashBuf )
   \   00004A   EA           MOV       A,R2
   \   00004B   4B           ORL       A,R3
   \   00004C   7005         JNZ       ??zclKE_GenMAC_1
    991            {
    992              return FALSE;
   \                     ??zclKE_GenMAC_0:
   \   00004E   7900         MOV       R1,#0x0
   \   000050   02....       LJMP      ??zclKE_GenMAC_2 & 0xFFFF
    993            }
    994          
    995            // Convert length to bit length
    996            bufLen = bufLen * 8;
   \                     ??zclKE_GenMAC_1:
   \   000053   85....       MOV       ?V4,?V0
   \   000056   85....       MOV       ?V5,?V1
   \   000059   7403         MOV       A,#0x3
   \   00005B   78..         MOV       R0,#?V4
   \   00005D   12....       LCALL     ?S_SHL
   \   000060   85....       MOV       ?V0,?V4
   \   000063   85....       MOV       ?V1,?V5
    997          
    998            // Assumption for M(U) and M(V) is: M(U) = 0x02, M(V) = 0x03
    999            if( MACu == TRUE )
   \   000066   04           INC       A
   \   000067   65..         XRL       A,?V7
   \   000069   8A82         MOV       DPL,R2
   \   00006B   8B83         MOV       DPH,R3
   \   00006D   7004         JNZ       ??zclKE_GenMAC_3
   1000            {
   1001              hashBuf[0] = 0x02; // M(U)
   \   00006F   7402         MOV       A,#0x2
   \   000071   8002         SJMP      ??zclKE_GenMAC_4
   1002            }
   1003            else
   1004            {
   1005              hashBuf[0] = 0x03; // M(V)
   \                     ??zclKE_GenMAC_3:
   \   000073   7403         MOV       A,#0x3
   \                     ??zclKE_GenMAC_4:
   \   000075   F0           MOVX      @DPTR,A
   1006            }
   1007          
   1008          
   1009            if ( ( initiator && MACu ) || ( !initiator && !MACu ) )
   \   000076   E5..         MOV       A,?V10
   \   000078   7003         JNZ       $+5
   \   00007A   02....       LJMP      ??zclKE_GenMAC_5 & 0xFFFF
   \   00007D   E5..         MOV       A,?V7
   \   00007F   6003         JZ        $+5
   \   000081   02....       LJMP      ??zclKE_GenMAC_6 & 0xFFFF
   1010            {
   1011              // MAC = MAC(MacKey) { M() || ID(L) || ID(R) || E(L) || E(R) }
   1012              // L - Local, R - Remote
   1013              // ID(L)
   1014              SSP_MemCpyReverse( &hashBuf[1], NLME_GetExtAddr(), Z_EXTADDR_LEN);
   1015              // ID(R)
   1016              SSP_MemCpyReverse( &hashBuf[1 + Z_EXTADDR_LEN], rmtExtAddr, Z_EXTADDR_LEN );
   1017              // E(L)
   1018              osal_memcpy( &hashBuf[1 + (2 * Z_EXTADDR_LEN)], pConn->pEPublicKey, keyLen );
   1019              // E(R)
   1020              osal_memcpy( &hashBuf[1 + (2 * Z_EXTADDR_LEN) + keyLen], pConn->pRmtEPublicKey, keyLen );
   1021            }
   1022            else
   1023            {
   1024              // MAC = MAC(MacKey) { M() || ID(R) || ID(L) || E(R) || E(L) }
   1025              // L - Local, R - Remote
   1026              // ID(R)
   1027              SSP_MemCpyReverse( &hashBuf[1], rmtExtAddr, Z_EXTADDR_LEN);
   \                     ??zclKE_GenMAC_7:
   \   000084                ; Setup parameters for call to function SSP_MemCpyReverse
   \   000084   75..08       MOV       ?V4,#0x8
   \   000087   75..00       MOV       ?V5,#0x0
   \   00008A   78..         MOV       R0,#?V4
   \   00008C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008F   7402         MOV       A,#0x2
   \   000091   12....       LCALL     ?XSTACK_DISP102_8
   \   000094   8A82         MOV       DPL,R2
   \   000096   8B83         MOV       DPH,R3
   \   000098   A3           INC       DPTR
   \   000099   AA82         MOV       R2,DPL
   \   00009B   AB83         MOV       R3,DPH
   \   00009D   12....       LCALL     `??SSP_MemCpyReverse::?relay`; Banked call to: SSP_MemCpyReverse
   \   0000A0   7402         MOV       A,#0x2
   \   0000A2   12....       LCALL     ?DEALLOC_XSTACK8
   1028              // ID(L)
   1029              SSP_MemCpyReverse( &hashBuf[1 + Z_EXTADDR_LEN], NLME_GetExtAddr(), Z_EXTADDR_LEN );
   \   0000A5                ; Setup parameters for call to function NLME_GetExtAddr
   \   0000A5   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   0000A8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AB   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   0000AE   12....       LCALL     ?DEALLOC_XSTACK8
   1030              // E(R)
   1031              osal_memcpy( &hashBuf[1 + (2 * Z_EXTADDR_LEN)], pConn->pRmtEPublicKey, keyLen );
   \   0000B1                ; Setup parameters for call to function osal_memcpy
   \   0000B1   E5..         MOV       A,?V8
   \   0000B3   241F         ADD       A,#0x1f
   \   0000B5   F582         MOV       DPL,A
   \   0000B7   E4           CLR       A
   \   0000B8   35..         ADDC      A,?V9
   \   0000BA   F583         MOV       DPH,A
   \   0000BC   12....       LCALL     ??Subroutine168_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   0000BF   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000C2   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   0000C5   12....       LCALL     ?DEALLOC_XSTACK8
   1032              // E(L)
   1033              osal_memcpy( &hashBuf[1 + (2 * Z_EXTADDR_LEN) + keyLen], pConn->pEPublicKey, keyLen );
   \   0000C8                ; Setup parameters for call to function osal_memcpy
   \   0000C8   E5..         MOV       A,?V8
   \   0000CA   241B         ADD       A,#0x1b
   \                     ??zclKE_GenMAC_8:
   \   0000CC   F582         MOV       DPL,A
   \   0000CE   E4           CLR       A
   \   0000CF   35..         ADDC      A,?V9
   \   0000D1   F583         MOV       DPH,A
   1034            }
   \   0000D3   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000D6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000D9   EE           MOV       A,R6
   \   0000DA   FC           MOV       R4,A
   \   0000DB   EF           MOV       A,R7
   \   0000DC   FD           MOV       R5,A
   \   0000DD   E5..         MOV       A,?V2
   \   0000DF   2E           ADD       A,R6
   \   0000E0   F8           MOV       R0,A
   \   0000E1   E5..         MOV       A,?V3
   \   0000E3   3F           ADDC      A,R7
   \   0000E4   F9           MOV       R1,A
   \   0000E5   E8           MOV       A,R0
   \   0000E6   2411         ADD       A,#0x11
   \   0000E8   FA           MOV       R2,A
   \   0000E9   E4           CLR       A
   \   0000EA   39           ADDC      A,R1
   \   0000EB   12....       LCALL     ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   0000EE   12....       LCALL     ?DEALLOC_XSTACK8
   1035          
   1036            // Hash MAC
   1037            SSP_KeyedHash( hashBuf, bufLen, pConn->pMACKey, pMAC );
   \   0000F1                ; Setup parameters for call to function SSP_KeyedHash
   \   0000F1   741B         MOV       A,#0x1b
   \   0000F3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F6   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000F9   E5..         MOV       A,?V8
   \   0000FB   2425         ADD       A,#0x25
   \   0000FD   F582         MOV       DPL,A
   \   0000FF   E4           CLR       A
   \   000100   35..         ADDC      A,?V9
   \   000102   F583         MOV       DPH,A
   \   000104   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000107   AC..         MOV       R4,?V0
   \   000109   AD..         MOV       R5,?V1
   \   00010B   AA..         MOV       R2,?V2
   \   00010D   AB..         MOV       R3,?V3
   \   00010F   12....       LCALL     `??SSP_KeyedHash::?relay`; Banked call to: SSP_KeyedHash
   \   000112   7404         MOV       A,#0x4
   \   000114   12....       LCALL     ?DEALLOC_XSTACK8
   1038          
   1039            osal_mem_free( hashBuf );
   \   000117                ; Setup parameters for call to function osal_mem_free
   \   000117   AA..         MOV       R2,?V2
   \   000119   AB..         MOV       R3,?V3
   \   00011B   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1040          
   1041            return TRUE;
   \   00011E   7901         MOV       R1,#0x1
   \                     ??zclKE_GenMAC_2:
   \   000120   7408         MOV       A,#0x8
   \   000122   12....       LCALL     ?DEALLOC_XSTACK8
   \   000125   02....       LJMP      ?Subroutine5 & 0xFFFF
   \                     ??zclKE_GenMAC_5:
   \   000128   E5..         MOV       A,?V7
   \   00012A   6003         JZ        $+5
   \   00012C   02....       LJMP      ??zclKE_GenMAC_7 & 0xFFFF
   \                     ??zclKE_GenMAC_6:
   \   00012F                ; Setup parameters for call to function NLME_GetExtAddr
   \   00012F   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000132   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000135   85..82       MOV       DPL,?V2
   \   000138   85..83       MOV       DPH,?V3
   \   00013B   A3           INC       DPTR
   \   00013C   AA82         MOV       R2,DPL
   \   00013E   AB83         MOV       R3,DPH
   \   000140   12....       LCALL     `??SSP_MemCpyReverse::?relay`; Banked call to: SSP_MemCpyReverse
   \   000143   7402         MOV       A,#0x2
   \   000145   12....       LCALL     ?DEALLOC_XSTACK8
   \   000148                ; Setup parameters for call to function SSP_MemCpyReverse
   \   000148   78..         MOV       R0,#?V4
   \   00014A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00014D   7402         MOV       A,#0x2
   \   00014F   12....       LCALL     ?XSTACK_DISP102_8
   \   000152   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000155   12....       LCALL     ?DEALLOC_XSTACK8
   \   000158                ; Setup parameters for call to function osal_memcpy
   \   000158   E5..         MOV       A,?V8
   \   00015A   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   00015D   35..         ADDC      A,?V9
   \   00015F   F583         MOV       DPH,A
   \   000161   12....       LCALL     ??Subroutine168_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000164   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000167   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   00016A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00016D                ; Setup parameters for call to function osal_memcpy
   \   00016D   E5..         MOV       A,?V8
   \   00016F   241F         ADD       A,#0x1f
   \   000171   02....       LJMP      ??zclKE_GenMAC_8 & 0xFFFF
   1042          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000003   8A..         MOV       ?V4,R2
   \   000005   8B..         MOV       ?V5,R3
   \   000007   AC..         MOV       R4,?V4
   \   000009   AD..         MOV       R5,?V5
   \   00000B                ; Setup parameters for call to function SSP_MemCpyReverse
   \   00000B                ; Setup parameters for call to function SSP_MemCpyReverse
   \   00000B   75..08       MOV       ?V4,#0x8
   \   00000E   75..00       MOV       ?V5,#0x0
   \   000011   78..         MOV       R0,#?V4
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   E5..         MOV       A,?V2
   \   000002   2409         ADD       A,#0x9
   \   000004   FA           MOV       R2,A
   \   000005   E4           CLR       A
   \   000006   35..         ADDC      A,?V3
   \   000008   FB           MOV       R3,A
   \   000009   12....       LCALL     `??SSP_MemCpyReverse::?relay`; Banked call to: SSP_MemCpyReverse
   \   00000C   7402         MOV       A,#0x2
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   EE           MOV       A,R6
   \   000001   FC           MOV       R4,A
   \   000002   EF           MOV       A,R7
   \   000003   FD           MOV       R5,A
   \   000004   E5..         MOV       A,?V2
   \   000006   2411         ADD       A,#0x11
   \   000008   FA           MOV       R2,A
   \   000009   E4           CLR       A
   \   00000A   35..         ADDC      A,?V3
   \   00000C   12....       LCALL     ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   FB           MOV       R3,A
   \   000001                REQUIRE ??Subroutine155_0
   \   000001                ; // Fall through to label ??Subroutine155_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine165_0
   \   000002                ; // Fall through to label ??Subroutine165_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine165_0:
   \   000000   12....       LCALL     ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_395:
   \   000003   12....       LCALL     `??AddrMgrExtAddrLookup::?relay`; Banked call to: AddrMgrExtAddrLookup
   \   000006   E9           MOV       A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine168_0:
   \   000000   12....       LCALL     ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   000003   75..00       MOV       ?V6,#0x0
   \   000006   78..         MOV       R0,#?V4
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F0B         MOV       R7,#0xb
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine187_0:
   \   000000   240F         ADD       A,#0xf
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET
   1043          
   1044          /**************************************************************************************************
   1045           * @fn      zclKE_CheckForAvailSuites
   1046           *
   1047           * @brief   Check to see which suites are available.
   1048           *
   1049           * @param   none
   1050           *
   1051           * @return  void
   1052           */
   1053          static void zclKE_CheckForAvailSuites( void )
   1054          {
   1055            uint8 certData[ECCAPI_PUBLIC_KEY_283_LEN];
   1056            uint8 nullData[ECCAPI_PUBLIC_KEY_283_LEN] = {
   1057              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
   1058              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
   1059              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
   1060              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
   1061              0xFF, 0xFF, 0xFF, 0xFF, 0xFF
   1062            };
   1063          
   1064          #if !defined( ECCAPI_163_DISABLED )
   1065            if ( ( SUCCESS == osal_nv_read( ZCD_NV_CA_PUBLIC_KEY, 0, 
   1066                                            ECCAPI_PUBLIC_KEY_163_LEN, certData ) ) && 
   1067                 ( !osal_memcmp( certData, nullData, ECCAPI_PUBLIC_KEY_163_LEN )  )    )
   1068            {
   1069              zclKE_SupportedSuites |= ZCL_KE_SUITE_1;
   1070            }
   1071          #endif // ECCAPI_163_DISABLED
   1072          
   1073          
   1074          #if !defined( ECCAPI_283_DISABLED )
   1075            if ( ( SUCCESS == osal_nv_read( ZCD_NV_PUBLIC_KEY_283, 0, 
   1076                                            ECCAPI_PUBLIC_KEY_283_LEN, certData ) ) && 
   1077                 ( !osal_memcmp( certData, nullData, ECCAPI_PUBLIC_KEY_283_LEN )  )    )
   1078            {
   1079              zclKE_SupportedSuites |= ZCL_KE_SUITE_2;
   1080            }
   1081          #endif // ECCAPI_283_DISABLED
   1082          }
   1083          
   1084          /**************************************************************************************************
   1085           * @fn      zclKE_CheckMultSuiteBits
   1086           *
   1087           * @brief   Check suite field for multiple bits.
   1088           *
   1089           * @param   suite - suite field 
   1090           *
   1091           * @return  uint8 - TRUE multiple bits, FALSE if not
   1092           */
   1093          static uint8 zclKE_CheckMultSuiteBits( uint16 suite )
   1094          {
   1095            uint8 success = FALSE;
   1096            uint8 bit;
   1097            uint16 bitCount = 0;
   1098          
   1099            for ( bit = 0; bit < 16; bit++ )
   1100            {
   1101              if ( suite & ( 1 << bit ) )
   1102              {
   1103                bitCount++;
   1104                if ( bitCount > 1 )
   1105                {
   1106                  // Multiple bits detected
   1107                  success = TRUE;
   1108          
   1109                  break;
   1110                }
   1111              }
   1112              else if ( suite < ( 1 << bit ) )
   1113              {
   1114                // No more bits
   1115                break;
   1116              }
   1117            }
   1118          
   1119            return success;
   1120          }
   1121          
   1122          /**************************************************************************************************
   1123           * @fn      zclKE_InitiateCmdCheckSuite
   1124           *
   1125           * @brief   Check initiate command - suite.
   1126           *
   1127           * @param   pCtxt - connection context
   1128           * @param   pCmd - command payload
   1129           *
   1130           * @return  uint8 - TRUE if successful, FALSE if not
   1131           */
   1132          static uint8 zclKE_InitiateCmdCheckSuite( zclKE_ConnCtxt_t *pCtxt,
   1133                                                    zclKE_InitiateCmd_t *pCmd )
   1134          {
   1135            uint8 success;
   1136          
   1137            // Check for legal suites
   1138            if ( ( pCmd->suite == ZCL_KE_SUITE_1 ) ||
   1139                 ( pCmd->suite == ZCL_KE_SUITE_2 )    )
   1140            {
   1141              // Is the selected suite supported
   1142              if ( pCmd->suite & zclKE_SupportedSuites )
   1143              {
   1144                success = TRUE;
   1145              }
   1146              else
   1147              {
   1148                pCtxt->error = ZCL_KE_TERMINATE_UNSUPPORTED_SUITE;
   1149          
   1150                success = FALSE;
   1151              }
   1152            }
   1153            else
   1154            {
   1155              // Already failed but must check for multiple bits 
   1156              if ( zclKE_CheckMultSuiteBits( pCmd->suite ) )
   1157              {
   1158                pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   1159              }
   1160              else
   1161              {
   1162                pCtxt->error = ZCL_KE_TERMINATE_UNSUPPORTED_SUITE;
   1163              }
   1164          
   1165              success = FALSE;
   1166            }  
   1167          
   1168            return success;
   1169          }
   1170          
   1171          /**************************************************************************************************
   1172           * @fn      zclKE_InitiateCmdCheckGenTimes
   1173           *
   1174           * @brief   Check initiate command - key generation times.
   1175           *
   1176           * @param   pCtxt - connection context
   1177           * @param   pCmd - command payload
   1178           *
   1179           * @return  uint8 - TRUE if successful, FALSE if not
   1180           */
   1181          static uint8 zclKE_InitiateCmdCheckGenTimes( zclKE_ConnCtxt_t *pCtxt,
   1182                                                       zclKE_InitiateCmd_t *pCmd )
   1183          {
   1184            uint8 success;
   1185          
   1186            if ( ( pCmd->ephDataGenTime < ZCL_KE_GEN_INVALID_TIME ) &&
   1187                 ( pCmd->cfmKeyGenTime < ZCL_KE_GEN_INVALID_TIME  )    )
   1188            {
   1189              success = TRUE;
   1190            }
   1191            else
   1192            {
   1193              pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   1194          
   1195              success = FALSE;
   1196            }
   1197          
   1198            return success;
   1199          }
   1200          
   1201          /**************************************************************************************************
   1202           * @fn      zclKE_InitiateCmdCheckCertExtAddr
   1203           *
   1204           * @brief   Check initiate command - cert extended address.
   1205           *
   1206           * @param   pCtxt - connection context
   1207           * @param   pCmd - command payload
   1208           *
   1209           * @return  uint8 - TRUE if successful, FALSE if not
   1210           */
   1211          static uint8 zclKE_InitiateCmdCheckCertExtAddr( zclKE_ConnCtxt_t *pCtxt,
   1212                                                          zclKE_InitiateCmd_t *pCmd )
   1213          {
   1214            uint8 success;
   1215            uint16 idx;
   1216            uint8 extAddr[Z_EXTADDR_LEN];
   1217            uint8 revExtAddr[Z_EXTADDR_LEN];
   1218          
   1219            // Get extended address index
   1220            idx = zclKE_GetField( pCmd->suite, ZCL_KE_CERT_EXT_ADDR_IDX );
   1221          
   1222            // Lookup the extended address, reverse and compare with cert
   1223            if ( ( AddrMgrExtAddrLookup( pCtxt->pInMsg->msg->srcAddr.addr.shortAddr,
   1224                                         extAddr )                                   ) &&
   1225                 ( osal_revmemcpy( revExtAddr, extAddr, Z_EXTADDR_LEN )              ) &&
   1226                 ( osal_memcmp( &pCmd->pIdentity[idx], revExtAddr, Z_EXTADDR_LEN )   )    )
   1227            {
   1228              success = TRUE;
   1229            }
   1230            else
   1231            {
   1232              pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   1233          
   1234              success = FALSE;
   1235            }
   1236            
   1237            return success;
   1238          }
   1239          
   1240          /**************************************************************************************************
   1241           * @fn      zclKE_InitiateCmdCheckCertIssuer
   1242           *
   1243           * @brief   Check initiate command - cert issuer.
   1244           *
   1245           * @param   pCtxt - connection context
   1246           * @param   pCmd - command payload
   1247           *
   1248           * @return  uint8 - TRUE if successful, FALSE if not
   1249           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1250          static uint8 zclKE_InitiateCmdCheckCertIssuer( zclKE_ConnCtxt_t *pCtxt,
   \                     zclKE_InitiateCmdCheckCertIssuer:
   1251                                                         zclKE_InitiateCmd_t *pCmd )
   1252          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V10,R2
   \   000007   8B..         MOV       ?V11,R3
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   1253            uint8 success;
   1254            uint16 id = zclKE_GetField( pCmd->suite, ZCL_KE_CERT_NV_ID );
   \   00000D                ; Setup parameters for call to function zclKE_GetField
   \   00000D   7902         MOV       R1,#0x2
   \   00000F   8C82         MOV       DPL,R4
   \   000011   8D83         MOV       DPH,R5
   \   000013   12....       LCALL     ??Subroutine154_0 & 0xFFFF
   1255            uint16 len = zclKE_GetField( pCmd->suite, ZCL_KE_CERT_LEN );
   \                     ??CrossCallReturnLabel_225:
   \   000016                ; Setup parameters for call to function zclKE_GetField
   \   000016   7905         MOV       R1,#0x5
   \   000018   85..82       MOV       DPL,?V0
   \   00001B   85..83       MOV       DPH,?V1
   \   00001E   12....       LCALL     ??Subroutine157_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000021   AE..         MOV       R6,?V2
   \   000023   AF..         MOV       R7,?V3
   1256            uint16 idx = zclKE_GetField( pCmd->suite, ZCL_KE_CERT_ISSUER_IDX );
   \   000025                ; Setup parameters for call to function zclKE_GetField
   \   000025   7907         MOV       R1,#0x7
   \   000027   85..82       MOV       DPL,?V0
   \   00002A   85..83       MOV       DPH,?V1
   \   00002D   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000030   8A..         MOV       ?V8,R2
   \   000032   8B..         MOV       ?V9,R3
   1257            uint8 *pCert  = NULL;
   1258          
   1259            success = TRUE;
   \   000034   75..01       MOV       ?V2,#0x1
   1260          
   1261            do
   1262            {
   1263              uint8 *pCert  = (uint8 *)osal_mem_alloc( len );
   \   000037                ; Setup parameters for call to function osal_mem_alloc
   \   000037   EE           MOV       A,R6
   \   000038   FA           MOV       R2,A
   \   000039   EF           MOV       A,R7
   \   00003A   FB           MOV       R3,A
   \   00003B   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003E   8A..         MOV       ?V12,R2
   \   000040   8B..         MOV       ?V13,R3
   1264              if ( !pCert )
   \   000042   EA           MOV       A,R2
   \   000043   4B           ORL       A,R3
   \   000044   700A         JNZ       ??zclKE_InitiateCmdCheckCertIssuer_0
   1265              {
   1266                pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   \   000046   85..82       MOV       DPL,?V10
   \   000049   85..83       MOV       DPH,?V11
   \   00004C   7404         MOV       A,#0x4
   \   00004E   8057         SJMP      ??zclKE_InitiateCmdCheckCertIssuer_1
   1267                success = FALSE;
   1268                break;
   1269              }
   1270          
   1271              osal_nv_read( id, 0, len, pCert );
   \                     ??zclKE_InitiateCmdCheckCertIssuer_0:
   \   000050                ; Setup parameters for call to function osal_nv_read
   \   000050   78..         MOV       R0,#?V12
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000055   8E..         MOV       ?V6,R6
   \   000057   8F..         MOV       ?V7,R7
   \   000059   78..         MOV       R0,#?V6
   \   00005B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005E   7C00         MOV       R4,#0x0
   \   000060   7D00         MOV       R5,#0x0
   \   000062   AA..         MOV       R2,?V4
   \   000064   AB..         MOV       R3,?V5
   \   000066   12....       LCALL     ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000069   12....       LCALL     ?DEALLOC_XSTACK8
   1272          
   1273              if ( !osal_memcmp( &pCmd->pIdentity[idx], &pCert[idx], ZCL_KE_CERT_ISSUER_LEN ) )
   \   00006C                ; Setup parameters for call to function osal_memcmp
   \   00006C   E5..         MOV       A,?V12
   \   00006E   25..         ADD       A,?V8
   \   000070   F5..         MOV       ?V4,A
   \   000072   E5..         MOV       A,?V13
   \   000074   35..         ADDC      A,?V9
   \   000076   F5..         MOV       ?V5,A
   \   000078   75..00       MOV       ?V6,#0x0
   \   00007B   78..         MOV       R0,#?V4
   \   00007D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000080   7C08         MOV       R4,#0x8
   \   000082   7D00         MOV       R5,#0x0
   \   000084   85..82       MOV       DPL,?V0
   \   000087   85..83       MOV       DPH,?V1
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   A3           INC       DPTR
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   25..         ADD       A,?V8
   \   000091   F8           MOV       R0,A
   \   000092   A3           INC       DPTR
   \   000093   E0           MOVX      A,@DPTR
   \   000094   35..         ADDC      A,?V9
   \   000096   12....       LCALL     ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_436:
   \   000099   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009C   E9           MOV       A,R1
   \   00009D   700C         JNZ       ??zclKE_InitiateCmdCheckCertIssuer_2
   1274              {
   1275                pCtxt->error = ZCL_KE_TERMINATE_UNKNOWN_ISSUER;
   \   00009F   85..82       MOV       DPL,?V10
   \   0000A2   85..83       MOV       DPH,?V11
   \   0000A5   7401         MOV       A,#0x1
   \                     ??zclKE_InitiateCmdCheckCertIssuer_1:
   \   0000A7   F0           MOVX      @DPTR,A
   1276                success = FALSE;
   \   0000A8   75..00       MOV       ?V2,#0x0
   1277                break;
   1278              }
   1279            }
   1280            while ( 0 );
   1281          
   1282            // Cleanup local memory allocations
   1283            zclKE_MemFree( pCert, len );
   \                     ??zclKE_InitiateCmdCheckCertIssuer_2:
   \   0000AB                ; Setup parameters for call to function zclKE_MemFree
   \   0000AB   EE           MOV       A,R6
   \   0000AC   FC           MOV       R4,A
   \   0000AD   EF           MOV       A,R7
   \   0000AE   FD           MOV       R5,A
   \   0000AF   7A00         MOV       R2,#0x0
   \   0000B1   7B00         MOV       R3,#0x0
   \   0000B3   12....       LCALL     `??zclKE_MemFree::?relay`; Banked call to: zclKE_MemFree
   1284          
   1285            return success;
   \   0000B6   A9..         MOV       R1,?V2
   \   0000B8                REQUIRE ?Subroutine6
   \   0000B8                ; // Fall through to label ?Subroutine6
   1286          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F0E         MOV       R7,#0xe
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine157_0:
   \   000000   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   8882         MOV       DPL,R0
   \   000002   F583         MOV       DPH,A
   \   000004                REQUIRE ??Subroutine192_0
   \   000004                ; // Fall through to label ??Subroutine192_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine192_0:
   \   000000   A982         MOV       R1,DPL
   \   000002   AA83         MOV       R2,DPH
   \   000004   7B00         MOV       R3,#0x0
   \   000006   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000009   7403         MOV       A,#0x3
   \   00000B   22           RET
   1287          
   1288          #if !defined( ECCAPI_283_DISABLED )
   1289          /**************************************************************************************************
   1290           * @fn      zclKE_InitiateCmdCheckCertSuite2
   1291           *
   1292           * @brief   Check initiate command - suite2 cert fields.
   1293           *
   1294           * @param   pCtxt - connection context
   1295           * @param   pCmd - command payload
   1296           *
   1297           * @return  uint8 - TRUE if successful, FALSE if not
   1298           */
   1299          static uint8 zclKE_InitiateCmdCheckCertSuite2( zclKE_ConnCtxt_t *pCtxt,
   1300                                                         zclKE_InitiateCmd_t *pCmd )
   1301          {
   1302            uint8 success;
   1303          
   1304            if ( ( pCmd->pIdentity[ZCL_KE_CERT_283_TYPE_IDX] ==
   1305                   ZCL_KE_CERT_283_TYPE_VALUE                       ) &&
   1306                 ( pCmd->pIdentity[ZCL_KE_CERT_283_CURVE_IDX] ==
   1307                   ZCL_KE_CERT_283_CURVE_VALUE                      ) &&
   1308                 ( pCmd->pIdentity[ZCL_KE_CERT_283_HASH_IDX] ==
   1309                   ZCL_KE_CERT_283_HASH_VALUE                       ) &&
   1310                 ( pCmd->pIdentity[ZCL_KE_CERT_283_KEY_USAGE_IDX] &
   1311                   ZCL_KE_CERT_283_KEY_USAGE_BIT                    )    )
   1312            {
   1313              success = TRUE;
   1314            }
   1315            else
   1316            {
   1317              pCtxt->error = ZCL_KE_TERMINATE_INVALID_CERTIFICATE;
   1318          
   1319              success = FALSE;
   1320            }
   1321          
   1322            return success;
   1323          }
   1324          #endif // !defined( ECCAPI_283_DISABLED )
   1325          
   1326          /**************************************************************************************************
   1327           * @fn      zclKE_InitiateCmdCheckCertSpecific
   1328           *
   1329           * @brief   Check initiate command - suite specific cert fields.
   1330           *
   1331           * @param   pCtxt - connection context
   1332           * @param   pCmd - command payload
   1333           *
   1334           * @return  uint8 - TRUE if successful, FALSE if not
   1335           */
   1336          static uint8 zclKE_InitiateCmdCheckCertSpecific( zclKE_ConnCtxt_t *pCtxt,
   1337                                                           zclKE_InitiateCmd_t *pCmd )
   1338          {
   1339            uint8 success;
   1340          
   1341            switch ( pCmd->suite )
   1342            {
   1343              case ZCL_KE_SUITE_1:
   1344                success = TRUE;
   1345                break;
   1346          
   1347          #if !defined( ECCAPI_283_DISABLED )
   1348              case ZCL_KE_SUITE_2:
   1349                success = zclKE_InitiateCmdCheckCertSuite2( pCtxt, pCmd );
   1350                break;
   1351          #endif
   1352          
   1353              default:
   1354                // Should never get here
   1355                success = TRUE;
   1356                break;
   1357            }
   1358           
   1359            return success;
   1360          }
   1361          
   1362          /**************************************************************************************************
   1363           * @fn      zclKE_InitiateCmdCheckFields
   1364           *
   1365           * @brief   Check fields of ZCL_KE_INITIATE_REQ and ZCL_KE_INITIATE_RSP payloads.
   1366           *
   1367           * @param   pCtxt - connection context
   1368           * @param   pCmd - command payload
   1369           *
   1370           * @return  uint8 - TRUE if successful, FALSE if not
   1371           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1372          static uint8 zclKE_InitiateCmdCheckFields( zclKE_ConnCtxt_t *pCtxt,
   \                     zclKE_InitiateCmdCheckFields:
   1373                                                     zclKE_InitiateCmd_t *pCmd )
   1374          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   1375            uint8 success;
   1376          
   1377            if ( zclKE_InitiateCmdCheckSuite( pCtxt, pCmd ) &&
   1378                 zclKE_InitiateCmdCheckGenTimes( pCtxt, pCmd ) && 
   1379                 zclKE_InitiateCmdCheckCertExtAddr( pCtxt, pCmd ) &&
   1380                 zclKE_InitiateCmdCheckCertIssuer( pCtxt, pCmd ) &&
   1381                 zclKE_InitiateCmdCheckCertSpecific( pCtxt, pCmd )  )
   \   000012   8C82         MOV       DPL,R4
   \   000014   F583         MOV       DPH,A
   \   000016   E0           MOVX      A,@DPTR
   \   000017   6401         XRL       A,#0x1
   \   000019   7002         JNZ       ??zclKE_InitiateCmdCheckFields_0
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \                     ??zclKE_InitiateCmdCheckFields_0:
   \   00001D   606D         JZ        ??zclKE_InitiateCmdCheckFields_1
   \   00001F   8C82         MOV       DPL,R4
   \   000021   8D83         MOV       DPH,R5
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6402         XRL       A,#0x2
   \   000026   7002         JNZ       ??zclKE_InitiateCmdCheckFields_2
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \                     ??zclKE_InitiateCmdCheckFields_2:
   \   00002A   6060         JZ        ??zclKE_InitiateCmdCheckFields_1
   \   00002C   8C82         MOV       DPL,R4
   \   00002E   8D83         MOV       DPH,R5
   \   000030   12....       LCALL     ??Subroutine179_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   000033   7C00         MOV       R4,#0x0
   \   000035   7D00         MOV       R5,#0x0
   \   000037   7900         MOV       R1,#0x0
   \                     ??zclKE_InitiateCmdCheckFields_3:
   \   000039   8A..         MOV       ?V2,R2
   \   00003B   8B..         MOV       ?V3,R3
   \   00003D   E9           MOV       A,R1
   \   00003E   78..         MOV       R0,#?V2
   \   000040   12....       LCALL     ?US_SHR
   \   000043   E5..         MOV       A,?V2
   \   000045   A2E0         MOV       C,0xE0 /* A   */.0
   \   000047   501D         JNC       ??zclKE_InitiateCmdCheckFields_4
   \   000049   0C           INC       R4
   \   00004A   EC           MOV       A,R4
   \   00004B   7001         JNZ       ??zclKE_InitiateCmdCheckFields_5
   \   00004D   0D           INC       R5
   \                     ??zclKE_InitiateCmdCheckFields_5:
   \   00004E   C3           CLR       C
   \   00004F   9402         SUBB      A,#0x2
   \   000051   ED           MOV       A,R5
   \   000052   9400         SUBB      A,#0x0
   \   000054   4025         JC        ??zclKE_InitiateCmdCheckFields_6
   \                     ??zclKE_InitiateCmdCheckFields_7:
   \   000056   85..82       MOV       DPL,?V0
   \   000059   85..83       MOV       DPH,?V1
   \                     ??zclKE_InitiateCmdCheckFields_8:
   \   00005C   7403         MOV       A,#0x3
   \                     ??zclKE_InitiateCmdCheckFields_9:
   \   00005E   F0           MOVX      @DPTR,A
   1382            {
   1383              success = TRUE;
   1384            }
   1385            else
   1386            {
   1387              success = FALSE;
   \                     ??zclKE_InitiateCmdCheckFields_10:
   \   00005F   7900         MOV       R1,#0x0
   1388            }
   1389          
   1390            return success;
   \                     ??zclKE_InitiateCmdCheckFields_11:
   \   000061   7410         MOV       A,#0x10
   \   000063   02....       LJMP      ??Subroutine166_0 & 0xFFFF
   \                     ??zclKE_InitiateCmdCheckFields_4:
   \   000066   75..01       MOV       ?V2,#0x1
   \   000069   75..00       MOV       ?V3,#0x0
   \   00006C   E9           MOV       A,R1
   \   00006D   78..         MOV       R0,#?V2
   \   00006F   12....       LCALL     ?S_SHL
   \   000072   C3           CLR       C
   \   000073   EA           MOV       A,R2
   \   000074   95..         SUBB      A,?V2
   \   000076   EB           MOV       A,R3
   \   000077   95..         SUBB      A,?V3
   \   000079   4007         JC        ??zclKE_InitiateCmdCheckFields_12
   \                     ??zclKE_InitiateCmdCheckFields_6:
   \   00007B   09           INC       R1
   \   00007C   E9           MOV       A,R1
   \   00007D   C3           CLR       C
   \   00007E   9410         SUBB      A,#0x10
   \   000080   40B7         JC        ??zclKE_InitiateCmdCheckFields_3
   \                     ??zclKE_InitiateCmdCheckFields_12:
   \   000082   85..82       MOV       DPL,?V0
   \   000085   85..83       MOV       DPH,?V1
   \                     ??zclKE_InitiateCmdCheckFields_13:
   \   000088   7405         MOV       A,#0x5
   \   00008A   80D2         SJMP      ??zclKE_InitiateCmdCheckFields_9
   \                     ??zclKE_InitiateCmdCheckFields_1:
   \   00008C   8C82         MOV       DPL,R4
   \   00008E   8D83         MOV       DPH,R5
   \   000090   12....       LCALL     ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000093   90....       MOV       DPTR,#zclKE_SupportedSuites
   \   000096   E0           MOVX      A,@DPTR
   \   000097   58           ANL       A,R0
   \   000098   F8           MOV       R0,A
   \   000099   A3           INC       DPTR
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   59           ANL       A,R1
   \   00009C   F9           MOV       R1,A
   \   00009D   E8           MOV       A,R0
   \   00009E   49           ORL       A,R1
   \   00009F   6010         JZ        ??zclKE_InitiateCmdCheckFields_14
   \   0000A1   8C82         MOV       DPL,R4
   \   0000A3   8D83         MOV       DPH,R5
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   F4           CPL       A
   \   0000A9   700C         JNZ       ??zclKE_InitiateCmdCheckFields_15
   \                     ??zclKE_InitiateCmdCheckFields_16:
   \   0000AB   8A82         MOV       DPL,R2
   \   0000AD   8B83         MOV       DPH,R3
   \   0000AF   80AB         SJMP      ??zclKE_InitiateCmdCheckFields_8
   \                     ??zclKE_InitiateCmdCheckFields_14:
   \   0000B1   8A82         MOV       DPL,R2
   \   0000B3   8B83         MOV       DPH,R3
   \   0000B5   80D1         SJMP      ??zclKE_InitiateCmdCheckFields_13
   \                     ??zclKE_InitiateCmdCheckFields_15:
   \   0000B7   8C82         MOV       DPL,R4
   \   0000B9   8D83         MOV       DPH,R5
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   F4           CPL       A
   \   0000C0   60E9         JZ        ??zclKE_InitiateCmdCheckFields_16
   \   0000C2                ; Setup parameters for call to function zclKE_GetField
   \   0000C2   7906         MOV       R1,#0x6
   \   0000C4   8C82         MOV       DPL,R4
   \   0000C6   8D83         MOV       DPH,R5
   \   0000C8   12....       LCALL     ??Subroutine157_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   0000CB                ; Setup parameters for call to function AddrMgrExtAddrLookup
   \   0000CB   7408         MOV       A,#0x8
   \   0000CD   12....       LCALL     ?XSTACK_DISP102_8
   \   0000D0   85..82       MOV       DPL,?V0
   \   0000D3   85..83       MOV       DPH,?V1
   \   0000D6   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   0000D9   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000DC   FA           MOV       R2,A
   \   0000DD   A3           INC       DPTR
   \   0000DE   E0           MOVX      A,@DPTR
   \   0000DF   FB           MOV       R3,A
   \   0000E0   12....       LCALL     `??AddrMgrExtAddrLookup::?relay`; Banked call to: AddrMgrExtAddrLookup
   \   0000E3   E9           MOV       A,R1
   \   0000E4   7003         JNZ       $+5
   \   0000E6   02....       LJMP      ??zclKE_InitiateCmdCheckFields_7 & 0xFFFF
   \   0000E9                ; Setup parameters for call to function osal_revmemcpy
   \   0000E9   7408         MOV       A,#0x8
   \   0000EB   12....       LCALL     ?XSTACK_DISP100_8
   \   0000EE   88..         MOV       ?V4,R0
   \   0000F0   89..         MOV       ?V5,R1
   \   0000F2   75..00       MOV       ?V6,#0x0
   \   0000F5   78..         MOV       R0,#?V4
   \   0000F7   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000FA   7C08         MOV       R4,#0x8
   \   0000FC   7D00         MOV       R5,#0x0
   \   0000FE   7403         MOV       A,#0x3
   \   000100   12....       LCALL     ?XSTACK_DISP101_8
   \   000103   12....       LCALL     `??osal_revmemcpy::?relay`; Banked call to: osal_revmemcpy
   \   000106   7403         MOV       A,#0x3
   \   000108   12....       LCALL     ?DEALLOC_XSTACK8
   \   00010B   EA           MOV       A,R2
   \   00010C   4B           ORL       A,R3
   \   00010D   7003         JNZ       $+5
   \   00010F   02....       LJMP      ??zclKE_InitiateCmdCheckFields_7 & 0xFFFF
   \   000112                ; Setup parameters for call to function osal_memcmp
   \   000112   A8..         MOV       R0,?XSP + 0
   \   000114   A9..         MOV       R1,?XSP + 1
   \   000116   88..         MOV       ?V4,R0
   \   000118   89..         MOV       ?V5,R1
   \   00011A   78..         MOV       R0,#?V4
   \   00011C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00011F   7C08         MOV       R4,#0x8
   \   000121   7D00         MOV       R5,#0x0
   \   000123   8E82         MOV       DPL,R6
   \   000125   8F83         MOV       DPH,R7
   \   000127   A3           INC       DPTR
   \   000128   A3           INC       DPTR
   \   000129   A3           INC       DPTR
   \   00012A   A3           INC       DPTR
   \   00012B   E0           MOVX      A,@DPTR
   \   00012C   25..         ADD       A,?V2
   \   00012E   F8           MOV       R0,A
   \   00012F   A3           INC       DPTR
   \   000130   E0           MOVX      A,@DPTR
   \   000131   35..         ADDC      A,?V3
   \   000133   12....       LCALL     ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_441:
   \   000136   12....       LCALL     ?DEALLOC_XSTACK8
   \   000139   E9           MOV       A,R1
   \   00013A   7003         JNZ       $+5
   \   00013C   02....       LJMP      ??zclKE_InitiateCmdCheckFields_7 & 0xFFFF
   \   00013F                ; Setup parameters for call to function zclKE_InitiateCmdCheckCertIssuer
   \   00013F   EE           MOV       A,R6
   \   000140   FC           MOV       R4,A
   \   000141   EF           MOV       A,R7
   \   000142   FD           MOV       R5,A
   \   000143   AA..         MOV       R2,?V0
   \   000145   AB..         MOV       R3,?V1
   \   000147   12....       LCALL     `??zclKE_InitiateCmdCheckCertIssuer::?relay`; Banked call to: zclKE_InitiateCmdCheckCertIssuer
   \   00014A   E9           MOV       A,R1
   \   00014B   7003         JNZ       $+5
   \   00014D   02....       LJMP      ??zclKE_InitiateCmdCheckFields_10 & 0xFFFF
   \   000150   8E82         MOV       DPL,R6
   \   000152   8F83         MOV       DPH,R7
   \   000154   E0           MOVX      A,@DPTR
   \   000155   6402         XRL       A,#0x2
   \   000157   7002         JNZ       ??zclKE_InitiateCmdCheckFields_17
   \   000159   A3           INC       DPTR
   \   00015A   E0           MOVX      A,@DPTR
   \                     ??zclKE_InitiateCmdCheckFields_17:
   \   00015B   7052         JNZ       ??zclKE_InitiateCmdCheckFields_18
   \   00015D   8E82         MOV       DPL,R6
   \   00015F   8F83         MOV       DPH,R7
   \   000161   A3           INC       DPTR
   \   000162   A3           INC       DPTR
   \   000163   A3           INC       DPTR
   \   000164   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000167   E0           MOVX      A,@DPTR
   \   000168   7038         JNZ       ??zclKE_InitiateCmdCheckFields_19
   \   00016A   8E82         MOV       DPL,R6
   \   00016C   8F83         MOV       DPH,R7
   \   00016E   A3           INC       DPTR
   \   00016F   A3           INC       DPTR
   \   000170   A3           INC       DPTR
   \   000171   A3           INC       DPTR
   \   000172   A3           INC       DPTR
   \   000173   E0           MOVX      A,@DPTR
   \   000174   C8           XCH       A,R0
   \   000175   2409         ADD       A,#0x9
   \   000177   F582         MOV       DPL,A
   \   000179   E4           CLR       A
   \   00017A   38           ADDC      A,R0
   \   00017B   F583         MOV       DPH,A
   \   00017D   E0           MOVX      A,@DPTR
   \   00017E   640D         XRL       A,#0xd
   \   000180   7020         JNZ       ??zclKE_InitiateCmdCheckFields_19
   \   000182   12....       LCALL     ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   000185   240A         ADD       A,#0xa
   \   000187   F582         MOV       DPL,A
   \   000189   E4           CLR       A
   \   00018A   38           ADDC      A,R0
   \   00018B   F583         MOV       DPH,A
   \   00018D   E0           MOVX      A,@DPTR
   \   00018E   6408         XRL       A,#0x8
   \   000190   7010         JNZ       ??zclKE_InitiateCmdCheckFields_19
   \   000192   12....       LCALL     ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000195   2424         ADD       A,#0x24
   \   000197   F582         MOV       DPL,A
   \   000199   E4           CLR       A
   \   00019A   38           ADDC      A,R0
   \   00019B   F583         MOV       DPH,A
   \   00019D   E0           MOVX      A,@DPTR
   \   00019E   A2E3         MOV       C,0xE0 /* A   */.3
   \   0001A0   400D         JC        ??zclKE_InitiateCmdCheckFields_18
   \                     ??zclKE_InitiateCmdCheckFields_19:
   \   0001A2   85..82       MOV       DPL,?V0
   \   0001A5   85..83       MOV       DPH,?V1
   \   0001A8   7406         MOV       A,#0x6
   \   0001AA   F0           MOVX      @DPTR,A
   \   0001AB   7800         MOV       R0,#0x0
   \   0001AD   8002         SJMP      ??zclKE_InitiateCmdCheckFields_20
   \                     ??zclKE_InitiateCmdCheckFields_18:
   \   0001AF   7801         MOV       R0,#0x1
   \                     ??zclKE_InitiateCmdCheckFields_20:
   \   0001B1   E8           MOV       A,R0
   \   0001B2   A2E0         MOV       C,0xE0 /* A   */.0
   \   0001B4   E4           CLR       A
   \   0001B5   33           RLC       A
   \   0001B6   F9           MOV       R1,A
   \   0001B7   02....       LJMP      ??zclKE_InitiateCmdCheckFields_11 & 0xFFFF
   1391          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   12....       LCALL     ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine164_0:
   \   000000   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_380:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine166_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F07         MOV       R7,#0x7
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ??Subroutine167_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000003   2406         ADD       A,#0x6
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine179_0:
   \   000000   12....       LCALL     ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_399:
   \   000003   22           RET
   1392          
   1393          /**************************************************************************************************
   1394           * @fn      zclKE_InitiateRspCheckFields
   1395           *
   1396           * @brief   Check fields of ZCL_KE_INITIATE_RSP payload.
   1397           *
   1398           * @param   pCtxt - connection context
   1399           * @param   pCmd - command payload
   1400           *
   1401           * @return  uint8 - TRUE if successful, FALSE if not
   1402           */
   1403          static uint8 zclKE_InitiateRspCheckFields( zclKE_ConnCtxt_t *pCtxt,
   1404                                                     zclKE_InitiateCmd_t *pCmd )
   1405          {
   1406            uint8 success = FALSE;
   1407          
   1408            // First use the base initiate cmd check -- this should be called first so 
   1409            // expected errors will be returned during specific tests
   1410            if ( zclKE_InitiateCmdCheckFields( (zclKE_ConnCtxt_t *)pCtxt, pCmd ) )
   1411            {
   1412              // Is this the suite that was requested
   1413              if ( pCtxt->pConn->suite == pCmd->suite )
   1414              {
   1415                success = TRUE;
   1416              }    
   1417              else
   1418              {
   1419                pCtxt->error = ZCL_KE_TERMINATE_UNSUPPORTED_SUITE;
   1420              }
   1421            }
   1422          
   1423            return success;
   1424          }
   1425          
   1426          /**************************************************************************************************
   1427           * @fn      zclKE_ParseInitiateCmd
   1428           *
   1429           * @brief   Parse command(ZCL_KE_INITIATE_REQ or ZCL_KE_INITIATE_RSP).
   1430           *
   1431           * @param   pInMsg - incoming message to process
   1432           * @param   pCmd - command payload
   1433           *
   1434           * @return  ZStatus_t - status
   1435           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1436          static ZStatus_t zclKE_ParseInitiateCmd( zclIncoming_t *pInMsg, 
   \                     zclKE_ParseInitiateCmd:
   1437                                                   zclKE_InitiateCmd_t *pCmd )
   1438          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1439            uint8 *pBuf = pInMsg->pData;
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   12....       LCALL     ?Subroutine24 & 0xFFFF
   1440          
   1441            // Check for minimum packet length
   1442            if ( pInMsg->pDataLen < ZCL_KE_INITIATE_HDR_LEN )
   \                     ??CrossCallReturnLabel_12:
   \   00000C   5003         JNC       $+5
   \   00000E   02....       LJMP      ??zclKE_ParseInitiateCmd_0 & 0xFFFF
   1443            {
   1444              return ZCL_STATUS_MALFORMED_COMMAND;
   1445            }
   1446          
   1447            pCmd->suite = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000011   8882         MOV       DPL,R0
   \   000013   8983         MOV       DPH,R1
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F5..         MOV       ?V0,A
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FF           MOV       R7,A
   \   00001B   E5..         MOV       A,?V0
   \   00001D   8C82         MOV       DPL,R4
   \   00001F   8D83         MOV       DPH,R5
   \   000021   F0           MOVX      @DPTR,A
   \   000022   A3           INC       DPTR
   \   000023   EF           MOV       A,R7
   \   000024   12....       LCALL     ?Subroutine81 & 0xFFFF
   1448            pBuf += 2;
   1449            pCmd->ephDataGenTime = *pBuf++;
   \                     ??CrossCallReturnLabel_108:
   \   000027   8C82         MOV       DPL,R4
   \   000029   8D83         MOV       DPH,R5
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   12....       LCALL     ?Subroutine131 & 0xFFFF
   1450            pCmd->cfmKeyGenTime = *pBuf++;
   \                     ??CrossCallReturnLabel_173:
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   8C82         MOV       DPL,R4
   \   000035   8D83         MOV       DPH,R5
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   F0           MOVX      @DPTR,A
   1451            pCmd->pIdentity = pBuf;
   \   00003B   E8           MOV       A,R0
   \   00003C   2404         ADD       A,#0x4
   \   00003E   5001         JNC       ??zclKE_ParseInitiateCmd_1
   \   000040   09           INC       R1
   \                     ??zclKE_ParseInitiateCmd_1:
   \   000041   8C82         MOV       DPL,R4
   \   000043   8D83         MOV       DPH,R5
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   12....       LCALL     ??Subroutine160_0 & 0xFFFF
   1452          
   1453            // Check for valid suite and identity length
   1454            if ( pCmd->suite == ZCL_KE_SUITE_1 )
   \                     ??CrossCallReturnLabel_242:
   \   00004C   8C82         MOV       DPL,R4
   \   00004E   8D83         MOV       DPH,R5
   \   000050   E0           MOVX      A,@DPTR
   \   000051   6401         XRL       A,#0x1
   \   000053   7002         JNZ       ??zclKE_ParseInitiateCmd_2
   \   000055   A3           INC       DPTR
   \   000056   E0           MOVX      A,@DPTR
   \                     ??zclKE_ParseInitiateCmd_2:
   \   000057   701D         JNZ       ??zclKE_ParseInitiateCmd_3
   1455            {
   1456              if ( pInMsg->pDataLen < ZCL_KE_INITIATE_SUITE1_LEN )
   \   000059   8A82         MOV       DPL,R2
   \   00005B   8B83         MOV       DPH,R3
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   C3           CLR       C
   \   000068   E0           MOVX      A,@DPTR
   \   000069   9434         SUBB      A,#0x34
   \   00006B   A3           INC       DPTR
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   9400         SUBB      A,#0x0
   \   00006F   402A         JC        ??zclKE_ParseInitiateCmd_0
   1457              {
   1458                return ZCL_STATUS_MALFORMED_COMMAND;
   1459              }
   1460            }
   1461            else if ( pCmd->suite == ZCL_KE_SUITE_2 )
   1462            {
   1463              if ( pInMsg->pDataLen < ZCL_KE_INITIATE_SUITE2_LEN )
   1464              {
   1465                return ZCL_STATUS_MALFORMED_COMMAND;
   1466              }
   1467            }
   1468            else
   1469            {
   1470              return ZCL_STATUS_MALFORMED_COMMAND;
   1471            }
   1472            
   1473            return ZCL_STATUS_SUCCESS;
   \                     ??zclKE_ParseInitiateCmd_4:
   \   000071   7900         MOV       R1,#0x0
   \                     ??zclKE_ParseInitiateCmd_5:
   \   000073   02....       LJMP      ??Subroutine185_0 & 0xFFFF
   \                     ??zclKE_ParseInitiateCmd_3:
   \   000076   8C82         MOV       DPL,R4
   \   000078   8D83         MOV       DPH,R5
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   6402         XRL       A,#0x2
   \   00007D   7002         JNZ       ??zclKE_ParseInitiateCmd_6
   \   00007F   A3           INC       DPTR
   \   000080   E0           MOVX      A,@DPTR
   \                     ??zclKE_ParseInitiateCmd_6:
   \   000081   7018         JNZ       ??zclKE_ParseInitiateCmd_0
   \   000083   8A82         MOV       DPL,R2
   \   000085   8B83         MOV       DPH,R3
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   C3           CLR       C
   \   000092   E0           MOVX      A,@DPTR
   \   000093   944E         SUBB      A,#0x4e
   \   000095   A3           INC       DPTR
   \   000096   E0           MOVX      A,@DPTR
   \   000097   9400         SUBB      A,#0x0
   \   000099   50D6         JNC       ??zclKE_ParseInitiateCmd_4
   \                     ??zclKE_ParseInitiateCmd_0:
   \   00009B   7980         MOV       R1,#-0x80
   \   00009D   80D4         SJMP      ??zclKE_ParseInitiateCmd_5
   1474          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine160_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   C3           CLR       C
   \   000014   E0           MOVX      A,@DPTR
   \   000015   9404         SUBB      A,#0x4
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   9400         SUBB      A,#0x0
   \   00001B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET
   1475          
   1476          /**************************************************************************************************
   1477           * @fn      zclKE_ParseEphDataCmd
   1478           *
   1479           * @brief   Parse command(ZCL_KE_EPH_DATA_REQ or ZCL_KE_EPH_DATA_RSP).
   1480           *
   1481           * @param   pInMsg - incoming message to process
   1482           * @param   pCmd - command payload
   1483           *
   1484           * @return  ZStatus_t - status
   1485           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1486          static ZStatus_t zclKE_ParseEphDataCmd( uint16 suite,
   \                     zclKE_ParseEphDataCmd:
   1487                                                  zclIncoming_t *pInMsg, 
   1488                                                  zclKE_EphDataCmd_t *pCmd )
   1489          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FE           MOV       R6,A
   \   000007   ED           MOV       A,R5
   \   000008   FF           MOV       R7,A
   1490            // Check for minimum packet length
   1491            if ( pInMsg->pDataLen < zclKE_GetField( suite, ZCL_KE_PUBLIC_KEY_LEN ) )
   \   000009                ; Setup parameters for call to function zclKE_GetField
   \   000009   7903         MOV       R1,#0x3
   \   00000B   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   00000E   8A..         MOV       ?V0,R2
   \   000010   8B..         MOV       ?V1,R3
   \   000012   A8..         MOV       R0,?V0
   \   000014   A9..         MOV       R1,?V1
   \   000016   8E82         MOV       DPL,R6
   \   000018   8F83         MOV       DPH,R7
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   C3           CLR       C
   \   000025   E0           MOVX      A,@DPTR
   \   000026   98           SUBB      A,R0
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   99           SUBB      A,R1
   \   00002A   5004         JNC       ??zclKE_ParseEphDataCmd_0
   1492            {
   1493              return ZCL_STATUS_MALFORMED_COMMAND;
   \   00002C   7980         MOV       R1,#-0x80
   \   00002E   801C         SJMP      ??zclKE_ParseEphDataCmd_1
   1494            }
   1495          
   1496            pCmd->pEphData = pInMsg->pData;
   \                     ??zclKE_ParseEphDataCmd_0:
   \   000030   8E82         MOV       DPL,R6
   \   000032   8F83         MOV       DPH,R7
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   12....       LCALL     ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   00003F   740A         MOV       A,#0xa
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000047   12....       LCALL     ?Subroutine75 & 0xFFFF
   1497          
   1498            return ZCL_STATUS_SUCCESS;
   \                     ??CrossCallReturnLabel_244:
   \   00004A   7900         MOV       R1,#0x0
   \                     ??zclKE_ParseEphDataCmd_1:
   \   00004C   02....       LJMP      ??Subroutine185_0 & 0xFFFF
   1499          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   E8           MOV       A,R0
   \   000001                REQUIRE ??Subroutine160_0
   \   000001                ; // Fall through to label ??Subroutine160_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   000003   F583         MOV       DPH,A
   \   000005   8A82         MOV       DPL,R2
   \   000007   22           RET
   1500          
   1501          /**************************************************************************************************
   1502           * @fn      zclKE_ParseCfmKeyDataCmd
   1503           *
   1504           * @brief   Parse command(ZCL_KE_CFM_KEY_DATA_REQ or ZCL_KE_CFM_KEY_DATA_RSP).
   1505           *
   1506           * @param   pInMsg - incoming message to process
   1507           * @param   pCmd - command payload
   1508           *
   1509           * @return  ZStatus_t - status
   1510           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1511          static ZStatus_t zclKE_ParseCfmKeyDataCmd( zclIncoming_t *pInMsg, 
   \                     zclKE_ParseCfmKeyDataCmd:
   1512                                                     zclKE_CfmKeyDataCmd_t *pCmd )
   1513          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1514            // Check for minimum packet length
   1515            if ( pInMsg->pDataLen < ZCL_KE_MAC_LEN )
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   C3           CLR       C
   \   000013   E0           MOVX      A,@DPTR
   \   000014   9410         SUBB      A,#0x10
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   9400         SUBB      A,#0x0
   \   00001A   5004         JNC       ??zclKE_ParseCfmKeyDataCmd_0
   1516            {
   1517              return ZCL_STATUS_MALFORMED_COMMAND;
   \   00001C   7980         MOV       R1,#-0x80
   \   00001E   8018         SJMP      ??zclKE_ParseCfmKeyDataCmd_1
   1518            }
   1519          
   1520            pCmd->pMAC = pInMsg->pData;
   \                     ??zclKE_ParseCfmKeyDataCmd_0:
   \   000020   8A82         MOV       DPL,R2
   \   000022   8B83         MOV       DPH,R3
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   12....       LCALL     ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   00002F   8C82         MOV       DPL,R4
   \   000031   8D83         MOV       DPH,R5
   \   000033   12....       LCALL     ?Subroutine75 & 0xFFFF
   1521          
   1522            return ZCL_STATUS_SUCCESS;
   \                     ??CrossCallReturnLabel_245:
   \   000036   7900         MOV       R1,#0x0
   \                     ??zclKE_ParseCfmKeyDataCmd_1:
   \   000038   80..         SJMP      ??Subroutine156_0
   1523          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine156_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
   1524          
   1525          /**************************************************************************************************
   1526           * @fn      zclKE_ParseTerminateCmd
   1527           *
   1528           * @brief   Parse command(ZCL_KE_TERMINATE_SERVER or ZCL_KE_TERMINATE_CLIENT).
   1529           *
   1530           * @param   pInMsg - incoming message to process
   1531           * @param   pCmd - command payload
   1532           *
   1533           * @return  ZStatus_t - status
   1534           */
   1535          static ZStatus_t zclKE_ParseTerminateCmd( zclIncoming_t *pInMsg, 
   1536                                                    zclKE_TerminateCmd_t *pCmd )
   1537          {
   1538            uint8 *pBuf = pInMsg->pData;
   1539          
   1540            // Check for minimum packet length
   1541            if ( pInMsg->pDataLen < ZCL_KE_TERMINATE_LEN )
   1542            {
   1543              return ZCL_STATUS_MALFORMED_COMMAND;
   1544            }
   1545          
   1546            pCmd->status = *pBuf++;
   1547            pCmd->waitTime = *pBuf++;
   1548            pCmd->suites = BUILD_UINT16( pBuf[0], pBuf[1] );
   1549            pBuf += 2;
   1550          
   1551            return ZCL_STATUS_SUCCESS;
   1552          }
   1553          
   1554          /**************************************************************************************************
   1555           * @fn      zclKE_SendInitiateCmd
   1556           *
   1557           * @brief   Send an initiate command.
   1558           *
   1559           * @param   pConn - client connection
   1560           * @param   cmdID - ZCL_KE_INITIATE_REQ or ZCL_KE_INITIATE_RSP
   1561           * @param   direction - ZCL_FRAME_SERVER_CLIENT_DIR or ZCL_FRAME_CLIENT_SERVER_DIR
   1562           *
   1563           * @return  ZStatus_t
   1564           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1565          static ZStatus_t zclKE_SendInitiateCmd( zclKE_Conn_t *pConn, uint8 cmdID, uint8 direction )
   \                     zclKE_SendInitiateCmd:
   1566          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V1,R1
   \   00000B   8C..         MOV       ?V0,R4
   1567            ZStatus_t status;
   1568            uint8 *pCmdBuf;
   1569            uint16 cmdBufLen;
   1570            uint8 *pBuf;
   1571            uint16 certLen;
   1572          
   1573            // Get the cert length based on suite
   1574            certLen = zclKE_GetField( pConn->suite, ZCL_KE_CERT_LEN );
   \   00000D                ; Setup parameters for call to function zclKE_GetField
   \   00000D   7905         MOV       R1,#0x5
   \   00000F   8A82         MOV       DPL,R2
   \   000011   F583         MOV       DPH,A
   \   000013   12....       LCALL     ?Subroutine22 & 0xFFFF
   1575          
   1576            // Allocate command buffer
   1577            cmdBufLen = ZCL_KE_INITIATE_HDR_LEN + certLen;
   \                     ??CrossCallReturnLabel_228:
   \   000016   EA           MOV       A,R2
   \   000017   2404         ADD       A,#0x4
   \   000019   F5..         MOV       ?V6,A
   \   00001B   E4           CLR       A
   \   00001C   35..         ADDC      A,?V3
   \   00001E   F5..         MOV       ?V7,A
   1578          
   1579            pCmdBuf = osal_mem_alloc( cmdBufLen );
   \   000020                ; Setup parameters for call to function osal_mem_alloc
   \   000020   AA..         MOV       R2,?V6
   \   000022   FB           MOV       R3,A
   \   000023   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000026   8A..         MOV       ?V4,R2
   \   000028   8B..         MOV       ?V5,R3
   1580            if ( pCmdBuf == NULL )
   \   00002A   EA           MOV       A,R2
   \   00002B   4B           ORL       A,R3
   \   00002C   7005         JNZ       ??zclKE_SendInitiateCmd_0
   1581            {
   1582              return ZMemError;
   \   00002E   7910         MOV       R1,#0x10
   \   000030   02....       LJMP      ??zclKE_SendInitiateCmd_1 & 0xFFFF
   1583            }
   1584          
   1585            pBuf = pCmdBuf;
   1586            *pBuf++ = LO_UINT16( pConn->suite );
   \                     ??zclKE_SendInitiateCmd_0:
   \   000033   EE           MOV       A,R6
   \   000034   2405         ADD       A,#0x5
   \   000036   F8           MOV       R0,A
   \   000037   E4           CLR       A
   \   000038   3F           ADDC      A,R7
   \   000039   F9           MOV       R1,A
   \   00003A   FB           MOV       R3,A
   \   00003B   8882         MOV       DPL,R0
   \   00003D   F583         MOV       DPH,A
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   8A82         MOV       DPL,R2
   \   000042   85..83       MOV       DPH,?V5
   \   000045   12....       LCALL     ?Subroutine69 & 0xFFFF
   1587            *pBuf++ = HI_UINT16( pConn->suite );
   \                     ??CrossCallReturnLabel_83:
   \   000048   8A82         MOV       DPL,R2
   \   00004A   85..83       MOV       DPH,?V5
   \   00004D   A3           INC       DPTR
   \   00004E   12....       LCALL     ?Subroutine83 & 0xFFFF
   1588            *pBuf++ = ZCL_KE_SERVER_EPH_DATA_GEN_TIME;
   \                     ??CrossCallReturnLabel_111:
   \   000051   741E         MOV       A,#0x1e
   \   000053   12....       LCALL     ?Subroutine83 & 0xFFFF
   1589            *pBuf++ = ZCL_KE_SERVER_CFM_KEY_GEN_TIME;
   \                     ??CrossCallReturnLabel_112:
   \   000056   A3           INC       DPTR
   \   000057   F0           MOVX      @DPTR,A
   1590          
   1591            // Get the certificate based on suite
   1592            status = osal_nv_read( zclKE_GetField( pConn->suite, ZCL_KE_CERT_NV_ID ), 
   1593                                   0, certLen, pBuf );
   \   000058                ; Setup parameters for call to function zclKE_GetField
   \   000058   7902         MOV       R1,#0x2
   \   00005A   8882         MOV       DPL,R0
   \   00005C   8B83         MOV       DPH,R3
   \   00005E   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000061                ; Setup parameters for call to function osal_nv_read
   \   000061   E5..         MOV       A,?V4
   \   000063   2404         ADD       A,#0x4
   \   000065   F5..         MOV       ?V8,A
   \   000067   E4           CLR       A
   \   000068   12....       LCALL     ??Subroutine189_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_425:
   \   00006B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006E   78..         MOV       R0,#?V2
   \   000070   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000073   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000076   12....       LCALL     ?DEALLOC_XSTACK8
   \   000079   E9           MOV       A,R1
   \   00007A   F5..         MOV       ?V2,A
   1594            pBuf = pBuf + certLen;
   1595          
   1596            if ( status == SUCCESS )
   \   00007C   704D         JNZ       ??zclKE_SendInitiateCmd_2
   1597            {
   1598              status = zcl_SendCommand( ZCL_KE_ENDPOINT, &pConn->partner,
   1599                                        ZCL_CLUSTER_ID_SE_KEY_ESTABLISHMENT,
   1600                                        cmdID, TRUE, direction,
   1601                                        TRUE, 0, pConn->transSeqNum, cmdBufLen, pCmdBuf );
   \   00007E                ; Setup parameters for call to function zcl_SendCommand
   \   00007E   78..         MOV       R0,#?V4
   \   000080   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000083   78..         MOV       R0,#?V6
   \   000085   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000088   8E82         MOV       DPL,R6
   \   00008A   8F83         MOV       DPH,R7
   \   00008C   A3           INC       DPTR
   \   00008D   A3           INC       DPTR
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   F5..         MOV       ?V2,A
   \   000091   78..         MOV       R0,#?V2
   \   000093   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000096   E4           CLR       A
   \   000097   F5..         MOV       ?V2,A
   \   000099   F5..         MOV       ?V3,A
   \   00009B   78..         MOV       R0,#?V2
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A0   75..01       MOV       ?V2,#0x1
   \   0000A3   78..         MOV       R0,#?V2
   \   0000A5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A8   E5..         MOV       A,?V0
   \   0000AA   F5..         MOV       ?V2,A
   \   0000AC   78..         MOV       R0,#?V2
   \   0000AE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B1   75..01       MOV       ?V2,#0x1
   \   0000B4   78..         MOV       R0,#?V2
   \   0000B6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B9   E5..         MOV       A,?V1
   \   0000BB   F5..         MOV       ?V2,A
   \   0000BD   78..         MOV       R0,#?V2
   \   0000BF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C2   12....       LCALL     ?Subroutine86 & 0xFFFF
   1602            }
   \                     ??CrossCallReturnLabel_115:
   \   0000C5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C8   E9           MOV       A,R1
   \   0000C9   F5..         MOV       ?V2,A
   1603          
   1604            osal_mem_free( pCmdBuf );
   \                     ??zclKE_SendInitiateCmd_2:
   \   0000CB                ; Setup parameters for call to function osal_mem_free
   \   0000CB   AA..         MOV       R2,?V4
   \   0000CD   AB..         MOV       R3,?V5
   \   0000CF   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1605          
   1606            return status;
   \   0000D2   A9..         MOV       R1,?V2
   \                     ??zclKE_SendInitiateCmd_1:
   \   0000D4                REQUIRE ?Subroutine9
   \   0000D4                ; // Fall through to label ?Subroutine9
   1607          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7F0A         MOV       R7,#0xa
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   85..83       MOV       DPH,?V5
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005                REQUIRE ??Subroutine157_0
   \   000005                ; // Fall through to label ??Subroutine157_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   7C00         MOV       R4,#0x0
   \   000002   7D08         MOV       R5,#0x8
   \   000004   EE           MOV       A,R6
   \   000005   240F         ADD       A,#0xf
   \   000007   FA           MOV       R2,A
   \   000008   E4           CLR       A
   \   000009   3F           ADDC      A,R7
   \   00000A   FB           MOV       R3,A
   \   00000B   790A         MOV       R1,#0xa
   \   00000D   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000010   740B         MOV       A,#0xb
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine189_0:
   \   000000   35..         ADDC      A,?V5
   \   000002   F5..         MOV       ?V9,A
   \   000004   78..         MOV       R0,#?V8
   \   000006   22           RET
   1608          
   1609          /**************************************************************************************************
   1610           * @fn      zclKE_SendInitiateReq
   1611           *
   1612           * @brief   Send ZCL_KE_INITIATE_REQ.
   1613           *
   1614           * @param   pConn - client connection
   1615           *
   1616           * @return  ZStatus_t
   1617           */
   1618          static ZStatus_t zclKE_SendInitiateReq( zclKE_Conn_t *pConn )
   1619          {
   1620            return zclKE_SendInitiateCmd( pConn, ZCL_KE_INITIATE_REQ, ZCL_FRAME_CLIENT_SERVER_DIR );
   1621          }
   1622          
   1623          /**************************************************************************************************
   1624           * @fn      zclKE_SendInitiateRsp
   1625           *
   1626           * @brief   Send ZCL_KE_INITIATE_RSP.
   1627           *
   1628           * @param   pConn - client connection
   1629           *
   1630           * @return  ZStatus_t
   1631           */
   1632          static ZStatus_t zclKE_SendInitiateRsp( zclKE_Conn_t *pConn )
   1633          {
   1634            return zclKE_SendInitiateCmd( pConn, ZCL_KE_INITIATE_RSP, ZCL_FRAME_SERVER_CLIENT_DIR );
   1635          }
   1636          
   1637          /**************************************************************************************************
   1638           * @fn      zclKE_SendEphDataCmd
   1639           *
   1640           * @brief   Send an ephemeral data command.
   1641           *
   1642           * @param   pConn - client connection
   1643           * @param   cmdID - ZCL_KE_EPH_DATA_REQ or ZCL_KE_EPH_DATA_RSP
   1644           * @param   direction - ZCL_FRAME_SERVER_CLIENT_DIR or ZCL_FRAME_CLIENT_SERVER_DIR
   1645           *
   1646           * @return  ZStatus_t
   1647           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1648          static ZStatus_t zclKE_SendEphDataCmd( zclKE_Conn_t *pConn, uint8 cmdID, uint8 direction )
   \                     zclKE_SendEphDataCmd:
   1649          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V0,R1
   \   00000B   8C..         MOV       ?V1,R4
   1650            ZStatus_t status;
   1651            uint8 *pCmdBuf;
   1652            uint16 cmdBufLen;
   1653          
   1654            // Set command buffer fields
   1655            cmdBufLen = zclKE_GetField( pConn->suite, ZCL_KE_PUBLIC_KEY_LEN );
   1656            pCmdBuf = pConn->pEPublicKey;
   1657          
   1658            status = zcl_SendCommand( ZCL_KE_ENDPOINT, &pConn->partner,
   1659                                      ZCL_CLUSTER_ID_SE_KEY_ESTABLISHMENT,
   1660                                      cmdID, TRUE, direction,
   1661                                      TRUE, 0, pConn->transSeqNum, cmdBufLen, pCmdBuf );
   1662          
   1663            return status;
   \   00000D                ; Setup parameters for call to function zcl_SendCommand
   \   00000D   EA           MOV       A,R2
   \   00000E   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000011   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000014                ; Setup parameters for call to function zclKE_GetField
   \   000014   7903         MOV       R1,#0x3
   \   000016   8A82         MOV       DPL,R2
   \   000018   8B83         MOV       DPH,R3
   \   00001A   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   00001D   78..         MOV       R0,#?V2
   \   00001F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000022   8E82         MOV       DPL,R6
   \   000024   8F83         MOV       DPH,R7
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F5..         MOV       ?V2,A
   \   00002B   78..         MOV       R0,#?V2
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000030   E4           CLR       A
   \   000031   F5..         MOV       ?V2,A
   \   000033   F5..         MOV       ?V3,A
   \   000035   78..         MOV       R0,#?V2
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   75..01       MOV       ?V2,#0x1
   \   00003D   78..         MOV       R0,#?V2
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000042   E5..         MOV       A,?V1
   \   000044   F5..         MOV       ?V2,A
   \   000046   78..         MOV       R0,#?V2
   \   000048   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004B   75..01       MOV       ?V2,#0x1
   \   00004E   78..         MOV       R0,#?V2
   \   000050   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000053   E5..         MOV       A,?V0
   \   000055   F5..         MOV       ?V2,A
   \   000057   78..         MOV       R0,#?V2
   \   000059   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005C   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   00005F   02....       LJMP      ?Subroutine11 & 0xFFFF
   1664          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   02....       LJMP      ??Subroutine158_0 & 0xFFFF
   1665          
   1666          /**************************************************************************************************
   1667           * @fn      zclKE_SendEphDatReq
   1668           *
   1669           * @brief   Send ZCL_KE_EPH_DATA_REQ.
   1670           *
   1671           * @param   pConn - client connection
   1672           *
   1673           * @return  ZStatus_t
   1674           */
   1675          static ZStatus_t zclKE_SendEphDatReq( zclKE_Conn_t *pConn )
   1676          {
   1677            return zclKE_SendEphDataCmd( pConn, ZCL_KE_EPH_DATA_REQ, ZCL_FRAME_CLIENT_SERVER_DIR );
   1678          }
   1679          
   1680          /**************************************************************************************************
   1681           * @fn      zclKE_SendEphDataRsp
   1682           *
   1683           * @brief   Send ZCL_KE_EPH_DATA_RSP.
   1684           *
   1685           * @param   pConn - client connection
   1686           *
   1687           * @return  ZStatus_t
   1688           */
   1689          static ZStatus_t zclKE_SendEphDataRsp( zclKE_Conn_t *pConn )
   1690          {
   1691            return zclKE_SendEphDataCmd( pConn, ZCL_KE_EPH_DATA_RSP, ZCL_FRAME_SERVER_CLIENT_DIR );
   1692          }
   1693          
   1694          /**************************************************************************************************
   1695           * @fn      zclKE_SendCfmKeyDataCmd
   1696           *
   1697           * @brief   Send an confirm key data command.
   1698           *
   1699           * @param   pConn - client connection
   1700           * @param   cmdID - ZCL_KE_CFM_KEY_DATA_REQ or ZCL_KE_CFM_KEY_DATA_RSP
   1701           * @param   direction - ZCL_FRAME_SERVER_CLIENT_DIR or ZCL_FRAME_CLIENT_SERVER_DIR
   1702           * @param   pMAC - command payload
   1703           *
   1704           * @return  ZStatus_t
   1705           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1706          static ZStatus_t zclKE_SendCfmKeyDataCmd( zclKE_Conn_t *pConn, uint8 cmdID, 
   \                     zclKE_SendCfmKeyDataCmd:
   1707                                                    uint8 direction, uint8 *pMAC )
   1708          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1709            ZStatus_t status;
   1710            uint8 *pCmdBuf;
   1711            uint16 cmdBufLen;
   1712          
   1713            // Set command buffer fields
   1714            cmdBufLen = ZCL_KE_MAC_LEN;
   1715            pCmdBuf = pMAC;
   1716          
   1717            status = zcl_SendCommand( ZCL_KE_ENDPOINT, &pConn->partner,
   1718                                      ZCL_CLUSTER_ID_SE_KEY_ESTABLISHMENT,
   1719                                      cmdID, TRUE, direction,
   1720                                      TRUE, 0, pConn->transSeqNum, cmdBufLen, pCmdBuf );
   1721          
   1722            return status;
   \   000005                ; Setup parameters for call to function zcl_SendCommand
   \   000005   740A         MOV       A,#0xa
   \   000007   12....       LCALL     ?XSTACK_DISP0_8
   \   00000A   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00000D   75..10       MOV       ?V0,#0x10
   \   000010   75..00       MOV       ?V1,#0x0
   \   000013   78..         MOV       R0,#?V0
   \   000015   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V0,A
   \   000021   78..         MOV       R0,#?V0
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000026   E4           CLR       A
   \   000027   F5..         MOV       ?V0,A
   \   000029   78..         MOV       R0,#?V0
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   75..01       MOV       ?V0,#0x1
   \   000031   78..         MOV       R0,#?V0
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000036   EC           MOV       A,R4
   \   000037   F5..         MOV       ?V0,A
   \   000039   78..         MOV       R0,#?V0
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003E   75..01       MOV       ?V0,#0x1
   \   000041   78..         MOV       R0,#?V0
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000046   E9           MOV       A,R1
   \   000047   F5..         MOV       ?V0,A
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004E   7C00         MOV       R4,#0x0
   \   000050   7D08         MOV       R5,#0x8
   \   000052   EA           MOV       A,R2
   \   000053   240F         ADD       A,#0xf
   \   000055   FA           MOV       R2,A
   \   000056   5001         JNC       ??zclKE_SendCfmKeyDataCmd_0
   \   000058   0B           INC       R3
   \                     ??zclKE_SendCfmKeyDataCmd_0:
   \   000059   790A         MOV       R1,#0xa
   \   00005B   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00005E   740B         MOV       A,#0xb
   \   000060   02....       LJMP      ??Subroutine184_0 & 0xFFFF
   1723          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine184_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine185_0
   \   000003                ; // Fall through to label ??Subroutine185_0
   1724          
   1725          /**************************************************************************************************
   1726           * @fn      zclKE_SendCfmKeyDataReq
   1727           *
   1728           * @brief   Send ZCL_KE_CFM_KEY_DATA_REQ.
   1729           *
   1730           * @param   pConn - client connection
   1731           * @param   pMAC - command payload
   1732           *
   1733           * @return  ZStatus_t
   1734           */
   1735          static ZStatus_t zclKE_SendCfmKeyDataReq( zclKE_Conn_t *pConn, uint8 *pMAC )
   1736          {
   1737            return zclKE_SendCfmKeyDataCmd( pConn, ZCL_KE_CFM_KEY_DATA_REQ,
   1738                                            ZCL_FRAME_CLIENT_SERVER_DIR, pMAC );
   1739          }
   1740          
   1741          /**************************************************************************************************
   1742           * @fn      zclKE_SendCfmKeyDataRsp
   1743           *
   1744           * @brief   Send ZCL_KE_CFM_KEY_DATA_RSP.
   1745           *
   1746           * @param   pConn - client connection
   1747           * @param   pMAC - command payload
   1748           *
   1749           * @return  ZStatus_t
   1750           */
   1751          static ZStatus_t zclKE_SendCfmKeyDataRsp( zclKE_Conn_t *pConn, uint8 *pMAC )
   1752          {
   1753            return zclKE_SendCfmKeyDataCmd( pConn, ZCL_KE_CFM_KEY_DATA_RSP,
   1754                                            ZCL_FRAME_SERVER_CLIENT_DIR, pMAC );
   1755          }
   1756          
   1757          /**************************************************************************************************
   1758           * @fn      zclKE_SendTerminate
   1759           *
   1760           * @brief   Send a terminate command.
   1761           *
   1762           * @param   dstAddr - destination address
   1763           * @param   cmdID - ZCL_KE_TERMINATE_CLIENT or ZCL_KE_TERMINATE_SERVER
   1764           * @param   direction - ZCL_FRAME_SERVER_CLIENT_DIR or ZCL_FRAME_CLIENT_SERVER_DIR
   1765           * @param   seqNum - transaction sequence number
   1766           * @param   pCmd - command payload
   1767           *
   1768           * @return  void
   1769           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1770          static void zclKE_SendTerminate( afAddrType_t *dstAddr, uint8 cmdID, 
   \                     zclKE_SendTerminate:
   1771                                           uint8 direction, uint8 seqNum,
   1772                                           zclKE_TerminateCmd_t *pCmd   )
   1773          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   7410         MOV       A,#0x10
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ??Subroutine164_0 & 0xFFFF
   1774            uint8 cmdBuf[ZCL_KE_TERMINATE_LEN];
   1775            uint8 *pBuf = cmdBuf;
   1776          
   1777            *pBuf++ = pCmd->status;
   \                     ??CrossCallReturnLabel_270:
   \   000014   8882         MOV       DPL,R0
   \   000016   F583         MOV       DPH,A
   \   000018   E0           MOVX      A,@DPTR
   \   000019   85..82       MOV       DPL,?XSP + 0
   \   00001C   85..83       MOV       DPH,?XSP + 1
   \   00001F   12....       LCALL     ?Subroutine69 & 0xFFFF
   1778            *pBuf++ = pCmd->waitTime;
   \                     ??CrossCallReturnLabel_84:
   \   000022   C0E0         PUSH      A
   \   000024   7401         MOV       A,#0x1
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   D0E0         POP       A
   \   00002B   F0           MOVX      @DPTR,A
   1779            *pBuf++ = LO_UINT16( pCmd->suites );
   \   00002C   E8           MOV       A,R0
   \   00002D   2402         ADD       A,#0x2
   \   00002F   F8           MOV       R0,A
   \   000030   5001         JNC       ??zclKE_SendTerminate_0
   \   000032   09           INC       R1
   \                     ??zclKE_SendTerminate_0:
   \   000033   F582         MOV       DPL,A
   \   000035   8983         MOV       DPH,R1
   \   000037   E0           MOVX      A,@DPTR
   \   000038   C0E0         PUSH      A
   \   00003A   7402         MOV       A,#0x2
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   D0E0         POP       A
   \   000041   12....       LCALL     ?Subroutine69 & 0xFFFF
   1780            *pBuf++ = HI_UINT16( pCmd->suites );
   \                     ??CrossCallReturnLabel_85:
   \   000044   C0E0         PUSH      A
   \   000046   7403         MOV       A,#0x3
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   D0E0         POP       A
   \   00004D   F0           MOVX      @DPTR,A
   1781          
   1782            zcl_SendCommand( ZCL_KE_ENDPOINT, dstAddr, ZCL_CLUSTER_ID_SE_KEY_ESTABLISHMENT,
   1783                             cmdID, TRUE, direction, TRUE, 0, seqNum, ZCL_KE_TERMINATE_LEN,
   1784                             cmdBuf );
   \   00004E                ; Setup parameters for call to function zcl_SendCommand
   \   00004E   A8..         MOV       R0,?XSP + 0
   \   000050   A9..         MOV       R1,?XSP + 1
   \   000052   88..         MOV       ?V2,R0
   \   000054   89..         MOV       ?V3,R1
   \   000056   78..         MOV       R0,#?V2
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005B   75..04       MOV       ?V2,#0x4
   \   00005E   75..00       MOV       ?V3,#0x0
   \   000061   78..         MOV       R0,#?V2
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000066   ED           MOV       A,R5
   \   000067   F5..         MOV       ?V1,A
   \   000069   78..         MOV       R0,#?V1
   \   00006B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006E   E4           CLR       A
   \   00006F   F5..         MOV       ?V2,A
   \   000071   78..         MOV       R0,#?V2
   \   000073   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000076   75..01       MOV       ?V1,#0x1
   \   000079   78..         MOV       R0,#?V1
   \   00007B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007E   EC           MOV       A,R4
   \   00007F   F5..         MOV       ?V1,A
   \   000081   78..         MOV       R0,#?V1
   \   000083   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000086   75..01       MOV       ?V1,#0x1
   \   000089   78..         MOV       R0,#?V1
   \   00008B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008E   EE           MOV       A,R6
   \   00008F   F5..         MOV       ?V1,A
   \   000091   78..         MOV       R0,#?V1
   \   000093   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000096   7C00         MOV       R4,#0x0
   \   000098   7D08         MOV       R5,#0x8
   \   00009A   790A         MOV       R1,#0xa
   \   00009C   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00009F   740B         MOV       A,#0xb
   \   0000A1   12....       LCALL     ?DEALLOC_XSTACK8
   1785          }
   \   0000A4   7404         MOV       A,#0x4
   \   0000A6   02....       LJMP      ?Subroutine11 & 0xFFFF
   1786          
   1787          /**************************************************************************************************
   1788           * @fn      zclKE_ServerInit
   1789           *
   1790           * @brief   Initialize server side.
   1791           *
   1792           * @param   none
   1793           *
   1794           * @return  void
   1795           */
   1796          static void zclKE_ServerInit( void )
   1797          {
   1798            uint8 max = ZCL_KE_MAX_SERVER_CONNECTIONS;  
   1799          
   1800            osal_nv_item_init( ZCD_NV_KE_MAX_DEVICES, 
   1801                               sizeof(uint8),
   1802                               &max );
   1803          }
   1804          
   1805          /**************************************************************************************************
   1806           * @fn      zclKE_ServerConnMax
   1807           *
   1808           * @brief   Check for maximum server connections.
   1809           *
   1810           * @param   none
   1811           *
   1812           * @return  uint8 - TRUE if maximum reached, FALSE if not
   1813           */
   1814          #if defined ( ZDO_COORDINATOR )
   1815          static uint8 zclKE_ServerConnMax( void )
   1816          {
   1817            // Assume maximum connections
   1818            uint8 result = TRUE;
   1819            uint8 max;
   1820          
   1821            // Set the maximum to zero in case NV read fails
   1822            max = 0;
   1823          
   1824            // Get the maximum number of connections
   1825            osal_nv_read( ZCD_NV_KE_MAX_DEVICES, 0, sizeof(uint8), &max );
   1826          
   1827            if ( max )
   1828            {
   1829              uint8 active = 0;
   1830              zclKE_Conn_t *pConn = zclKE_ServerConnList;
   1831          
   1832              // Count the active connections
   1833              while ( pConn )
   1834              {
   1835                active++;
   1836                pConn = pConn->pNext;
   1837              }
   1838          
   1839              // Are the active connections less than the maximum
   1840              if ( active < max )
   1841              {
   1842                // Connections are not at maximum
   1843                result = FALSE;
   1844              }
   1845            }
   1846          
   1847            return result;
   1848          }
   1849          #else
   1850          static uint8 zclKE_ServerConnMax( void )
   1851          {
   1852            uint8 result;
   1853          
   1854            // Only allow one connection for non Trust Center devices
   1855            if ( zclKE_ServerConnList )
   1856            {
   1857              result = TRUE;  
   1858            }
   1859            else
   1860            {
   1861              result = FALSE;  
   1862            }
   1863          
   1864            return result;
   1865          }
   1866          #endif // ZDO_COORDINATOR
   1867          
   1868          /**************************************************************************************************
   1869           * @fn      zclKE_ServerConnAllowed
   1870           *
   1871           * @brief   Check if server connection is allowed.
   1872           *
   1873           * @param   partnerAddr - partner network address
   1874           *
   1875           * @return  uint8 - TRUE if allowed, FALSE if not
   1876           */
   1877          static uint8 zclKE_ServerConnAllowed( uint16 partnerAddr )
   1878          {
   1879            uint8 allowed;
   1880          
   1881            // 1) Server must be ready
   1882            // 2) Only allow server connections when there are no active client connections.
   1883            // 3) Check for maximum server connections.
   1884            // 4) Only allow connections to the Trust Center (or from the Trust Center). 
   1885            if ( ( zclKE_State == ZCL_KE_READY                             ) &&
   1886                 ( !zclKE_ClientConnList                                   ) &&
   1887                 ( !zclKE_ServerConnMax()                                  ) &&
   1888                 ( ( NLME_GetShortAddr() == APSME_TRUSTCENTER_NWKADDR ) ||
   1889                   ( partnerAddr == APSME_TRUSTCENTER_NWKADDR         )    )    )
   1890            {
   1891              allowed = TRUE;
   1892            }
   1893            else
   1894            {
   1895              allowed = FALSE;
   1896            }
   1897          
   1898            return allowed;
   1899          }
   1900          
   1901          /**************************************************************************************************
   1902           * @fn      zclKE_ServerConnCreate
   1903           *
   1904           * @brief   Create a new server connection.
   1905           *
   1906           * @param   pPartner - partner address
   1907           *
   1908           * @return  zclKE_Conn_t* - pointer to new connection, NULL if failure
   1909           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1910          static zclKE_Conn_t *zclKE_ServerConnCreate( afAddrType_t *pPartner )
   \                     zclKE_ServerConnCreate:
   1911          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1912            zclKE_Conn_t *pNewConn = NULL;
   \   000009   75..00       MOV       ?V0,#0x0
   \   00000C   75..00       MOV       ?V1,#0x0
   1913            
   1914            // Check for legal connections 
   1915            if ( zclKE_ServerConnAllowed( pPartner->addr.shortAddr ) )
   \   00000F   8A82         MOV       DPL,R2
   \   000011   F583         MOV       DPH,A
   \   000013   12....       LCALL     ??Subroutine149_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000016   90....       MOV       DPTR,#zclKE_State
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   6401         XRL       A,#0x1
   \   00001C   7053         JNZ       ??zclKE_ServerConnCreate_0
   \   00001E   90....       MOV       DPTR,#zclKE_ClientConnList
   \   000021   12....       LCALL     ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   000024   704B         JNZ       ??zclKE_ServerConnCreate_0
   \   000026   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   000029   7046         JNZ       ??zclKE_ServerConnCreate_0
   \   00002B                ; Setup parameters for call to function NLME_GetShortAddr
   \   00002B   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00002E   EA           MOV       A,R2
   \   00002F   4B           ORL       A,R3
   \   000030   6006         JZ        ??zclKE_ServerConnCreate_1
   \   000032   E5..         MOV       A,?V2
   \   000034   45..         ORL       A,?V3
   \   000036   7039         JNZ       ??zclKE_ServerConnCreate_0
   1916            {
   1917              // Add a new connection
   1918              pNewConn = osal_mem_alloc( sizeof( zclKE_Conn_t ) );
   \                     ??zclKE_ServerConnCreate_1:
   \   000038                ; Setup parameters for call to function osal_mem_alloc
   \   000038   12....       LCALL     ?Subroutine96 & 0xFFFF
   1919          
   1920              if ( pNewConn )
   \                     ??CrossCallReturnLabel_137:
   \   00003B   6034         JZ        ??zclKE_ServerConnCreate_0
   1921              {
   1922                // Initialize the connnection
   1923                osal_memset( pNewConn, 0, sizeof( zclKE_Conn_t ) );
   \   00003D                ; Setup parameters for call to function osal_memset
   \   00003D   7C29         MOV       R4,#0x29
   \   00003F   7D00         MOV       R5,#0x0
   \   000041   7900         MOV       R1,#0x0
   \   000043   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1924                pNewConn->partner = *pPartner;
   \   000046   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000049   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1925          
   1926                // Add to server connection list
   1927                if ( zclKE_ServerConnList )
   \   00004C   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   00004F   6014         JZ        ??zclKE_ServerConnCreate_2
   1928                {
   1929                  zclKE_Conn_t *pConn = zclKE_ServerConnList;
   \   000051   8003         SJMP      ??CrossCallReturnLabel_277
   1930          
   1931                  while ( pConn->pNext )
   1932                  {
   1933                    pConn = pConn->pNext;
   \                     ??zclKE_ServerConnCreate_3:
   \   000053   12....       LCALL     ?Subroutine49 & 0xFFFF
   1934                  }
   \                     ??CrossCallReturnLabel_277:
   \   000056   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000059   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_366:
   \   00005C   EA           MOV       A,R2
   \   00005D   4B           ORL       A,R3
   \   00005E   70F3         JNZ       ??zclKE_ServerConnCreate_3
   1935          
   1936                  pConn->pNext = pNewConn;
   \   000060   12....       LCALL     ?Subroutine106 & 0xFFFF
   1937                }
   \                     ??CrossCallReturnLabel_151:
   \   000063   8003         SJMP      ??zclKE_ServerConnCreate_4
   1938                else
   1939                {
   1940                  zclKE_ServerConnList = pNewConn;
   \                     ??zclKE_ServerConnCreate_2:
   \   000065   90....       MOV       DPTR,#zclKE_ServerConnList
   \                     ??zclKE_ServerConnCreate_4:
   \   000068   E5..         MOV       A,?V0
   \   00006A   F0           MOVX      @DPTR,A
   \   00006B   A3           INC       DPTR
   \   00006C   E5..         MOV       A,?V1
   \   00006E   F0           MOVX      @DPTR,A
   \   00006F   8005         SJMP      ??zclKE_ServerConnCreate_5
   1941                }
   1942              }
   1943            }
   1944          
   1945          #if defined( NWK_AUTO_POLL )
   1946            // If connections, set the poll rate
   1947            if ( zclKE_ServerConnList )
   \                     ??zclKE_ServerConnCreate_0:
   \   000071   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   000074   6005         JZ        ??zclKE_ServerConnCreate_6
   1948            {
   1949              zclKE_SetPollRate( ZCL_KE_SERVER_POLL_RATE_BIT );
   \                     ??zclKE_ServerConnCreate_5:
   \   000076                ; Setup parameters for call to function zclKE_SetPollRate
   \   000076   7902         MOV       R1,#0x2
   \   000078   12....       LCALL     `??zclKE_SetPollRate::?relay`; Banked call to: zclKE_SetPollRate
   1950            }
   1951          #endif
   1952          
   1953            return pNewConn;
   \                     ??zclKE_ServerConnCreate_6:
   \   00007B   AA..         MOV       R2,?V0
   \   00007D   AB..         MOV       R3,?V1
   \   00007F   02....       LJMP      ?Subroutine3 & 0xFFFF
   1954          } 

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000003   F583         MOV       DPH,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   E8           MOV       A,R0
   \   000001   2427         ADD       A,#0x27
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   39           ADDC      A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000003                REQUIRE ??Subroutine163_0
   \   000003                ; // Fall through to label ??Subroutine163_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine163_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine164_0
   \   000002                ; // Fall through to label ??Subroutine164_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   90....       MOV       DPTR,#zclKE_ServerConnList
   \   000003                REQUIRE ??Subroutine169_0
   \   000003                ; // Fall through to label ??Subroutine169_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   E5..         MOV       A,?V0
   \   000006   240F         ADD       A,#0xf
   \   000008   FC           MOV       R4,A
   \   000009   E4           CLR       A
   \   00000A   35..         ADDC      A,?V1
   \   00000C   FD           MOV       R5,A
   \   00000D   740C         MOV       A,#0xc
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   7A29         MOV       R2,#0x29
   \   000002   7B00         MOV       R3,#0x0
   \   000004   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   \   00000B   EA           MOV       A,R2
   \   00000C   4B           ORL       A,R3
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine179_0
   \   000002                ; // Fall through to label ??Subroutine179_0
   1955          
   1956          /**************************************************************************************************
   1957           * @fn      zclKE_ServerConnClose
   1958           *
   1959           * @brief   Close an existing server connection.
   1960           *
   1961           * @param   pConn - client connection
   1962           *
   1963           * @return  void
   1964           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1965          static void zclKE_ServerConnClose( zclKE_Conn_t *pConn )
   \                     zclKE_ServerConnClose:
   1966          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1967            zclKE_Conn_t *pCurrent = zclKE_ServerConnList;
   \   000004   90....       MOV       DPTR,#zclKE_ServerConnList
   \   000007   12....       LCALL     ??Subroutine164_0 & 0xFFFF
   1968            zclKE_Conn_t *pPrevious = NULL;
   \                     ??CrossCallReturnLabel_271:
   \   00000A   7C00         MOV       R4,#0x0
   \   00000C   7D00         MOV       R5,#0x0
   \   00000E   8007         SJMP      ??CrossCallReturnLabel_278
   1969          
   1970            // Search for connection
   1971            while ( pCurrent )
   1972            {
   1973              // Is this the connection
   1974              if ( pCurrent == pConn )
   1975              {
   1976                // Remove from list
   1977                if ( pPrevious )
   1978                {
   1979                  pPrevious->pNext = pCurrent->pNext;
   1980                }
   1981                else
   1982                {
   1983                  zclKE_ServerConnList = pCurrent->pNext;
   1984                }  
   1985          
   1986                // Release connection memory
   1987                zclKE_ConnRelease( pConn );
   1988          
   1989                break;
   1990              }
   1991              
   1992              // Save the current connection
   1993              pPrevious = pCurrent;
   \                     ??zclKE_ServerConnClose_0:
   \   000010   E8           MOV       A,R0
   \   000011   FC           MOV       R4,A
   \   000012   E9           MOV       A,R1
   \   000013   FD           MOV       R5,A
   1994          
   1995              // Advance to the next connection
   1996              pCurrent = pCurrent->pNext;
   \   000014   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000017   E8           MOV       A,R0
   \   000018   49           ORL       A,R1
   \   000019   6026         JZ        ??zclKE_ServerConnClose_1
   \   00001B   EA           MOV       A,R2
   \   00001C   68           XRL       A,R0
   \   00001D   7002         JNZ       ??zclKE_ServerConnClose_2
   \   00001F   EB           MOV       A,R3
   \   000020   69           XRL       A,R1
   \                     ??zclKE_ServerConnClose_2:
   \   000021   70ED         JNZ       ??zclKE_ServerConnClose_0
   \   000023   EC           MOV       A,R4
   \   000024   4D           ORL       A,R5
   \   000025   600E         JZ        ??zclKE_ServerConnClose_3
   \   000027   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   00002A   EC           MOV       A,R4
   \   00002B   2427         ADD       A,#0x27
   \   00002D   F582         MOV       DPL,A
   \   00002F   E4           CLR       A
   \   000030   3D           ADDC      A,R5
   \   000031   F583         MOV       DPH,A
   \   000033   8006         SJMP      ??zclKE_ServerConnClose_4
   \                     ??zclKE_ServerConnClose_3:
   \   000035   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000038   90....       MOV       DPTR,#zclKE_ServerConnList
   \                     ??zclKE_ServerConnClose_4:
   \   00003B   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   00003E                ; Setup parameters for call to function zclKE_ConnRelease
   \   00003E   12....       LCALL     `??zclKE_ConnRelease::?relay`; Banked call to: zclKE_ConnRelease
   1997            }
   1998          
   1999          #if defined( NWK_AUTO_POLL )
   2000            // If no connections, restore poll rate
   2001            if ( !zclKE_ServerConnList )
   \                     ??zclKE_ServerConnClose_1:
   \   000041   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   000044   7005         JNZ       ??zclKE_ServerConnClose_5
   2002            {
   2003              zclKE_RestorePollRate( ZCL_KE_SERVER_POLL_RATE_BIT );
   \   000046                ; Setup parameters for call to function zclKE_RestorePollRate
   \   000046   7902         MOV       R1,#0x2
   \   000048   12....       LCALL     `??zclKE_RestorePollRate::?relay`; Banked call to: zclKE_RestorePollRate
   2004            }
   2005          #endif
   2006          }
   \                     ??zclKE_ServerConnClose_5:
   \   00004B   02....       LJMP      ??Subroutine156_0 & 0xFFFF
   2007          
   2008          /**************************************************************************************************
   2009           * @fn      zclKE_ServerConnFind
   2010           *
   2011           * @brief   Find a server connection by partnerAddr.
   2012           *
   2013           * @param   partnerAddr - partner network address
   2014           *
   2015           * @return  zclKE_Conn_t* - pointer to existing connection, NULL if not found
   2016           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E8           MOV       A,R0
   \   000001   FA           MOV       R2,A
   \   000002   E9           MOV       A,R1
   \   000003   FB           MOV       R3,A
   \   000004                REQUIRE ??Subroutine156_0
   \   000004                ; // Fall through to label ??Subroutine156_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2017          static zclKE_Conn_t *zclKE_ServerConnFind( uint16 partnerAddr )
   \                     zclKE_ServerConnFind:
   2018          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2019            zclKE_Conn_t *pConn;
   2020          
   2021            pConn = zclKE_ServerConnList;
   \   000004   90....       MOV       DPTR,#zclKE_ServerConnList
   \   000007   8003         SJMP      ??CrossCallReturnLabel_152
   2022          
   2023            while ( pConn )
   2024            {
   2025              if ( pConn->partner.addr.shortAddr == partnerAddr )
   2026              {
   2027                break;
   2028              }
   2029          
   2030              pConn = pConn->pNext;
   \                     ??zclKE_ServerConnFind_0:
   \   000009   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   00000C   12....       LCALL     ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   00000F   600A         JZ        ??zclKE_ServerConnFind_1
   \   000011   12....       LCALL     ?Subroutine100 & 0xFFFF
   2031            }
   \                     ??CrossCallReturnLabel_141:
   \   000014   7003         JNZ       ??zclKE_ServerConnFind_2
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   6B           XRL       A,R3
   \                     ??zclKE_ServerConnFind_2:
   \   000019   70EE         JNZ       ??zclKE_ServerConnFind_0
   2032          
   2033            return pConn;
   \                     ??zclKE_ServerConnFind_1:
   \   00001B   02....       LJMP      ?Subroutine8 & 0xFFFF
   2034          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   E8           MOV       A,R0
   \   000001   12....       LCALL     ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_413:
   \   000004   39           ADDC      A,R1
   \   000005   F583         MOV       DPH,A
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6A           XRL       A,R2
   \   000009   22           RET
   2035          
   2036          /**************************************************************************************************
   2037           * @fn      zclKE_ServerConnLookup
   2038           *
   2039           * @brief   Lookup an expected server connection including end point.
   2040           *
   2041           * @param   pPartner - partner address
   2042           *
   2043           * @return  zclKE_Conn_t* - pointer to existing connection, NULL if not found
   2044           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2045          static zclKE_Conn_t *zclKE_ServerConnLookup( afAddrType_t *pPartner )
   \                     zclKE_ServerConnLookup:
   2046          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2047            zclKE_Conn_t *pConn = NULL;
   2048          
   2049            pConn = zclKE_ServerConnFind( pPartner->addr.shortAddr );
   \   000009                ; Setup parameters for call to function zclKE_ServerConnFind
   \   000009   8A82         MOV       DPL,R2
   \   00000B   12....       LCALL     ?Subroutine37 & 0xFFFF
   2050          
   2051            // Check if connection was found and verify end point
   2052            if ( pConn && ( pConn->partner.endPoint != pPartner->endPoint ) )
   \                     ??CrossCallReturnLabel_239:
   \   00000E   EA           MOV       A,R2
   \   00000F   4B           ORL       A,R3
   \   000010   6009         JZ        ??zclKE_ServerConnLookup_0
   \   000012   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000015   6004         JZ        ??zclKE_ServerConnLookup_0
   2053            {
   2054              // End points do not match return NULL
   2055              pConn = NULL;
   \   000017   7A00         MOV       R2,#0x0
   \   000019   7B00         MOV       R3,#0x0
   2056            }
   2057          
   2058            return pConn;
   \                     ??zclKE_ServerConnLookup_0:
   \   00001B   02....       LJMP      ??Subroutine185_0 & 0xFFFF
   2059          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine159_0
   \   000002                ; // Fall through to label ??Subroutine159_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine159_0:
   \   000000   12....       LCALL     ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   000003   12....       LCALL     `??zclKE_ServerConnFind::?relay`; Banked call to: zclKE_ServerConnFind
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   EA           MOV       A,R2
   \   000001   2418         ADD       A,#0x18
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3B           ADDC      A,R3
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F8           MOV       R0,A
   \   00000B   8E82         MOV       DPL,R6
   \   00000D   8F83         MOV       DPH,R7
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   68           XRL       A,R0
   \   00001A   22           RET
   2060          
   2061          /**************************************************************************************************
   2062           * @fn      zclKE_ServerConnGet
   2063           *
   2064           * @brief   Get an existing connection or create a new one.
   2065           *
   2066           * @param   pPartner - partner address
   2067           *
   2068           * @return  zclKE_Conn_t* - pointer to connection, NULL if not available
   2069           */
   2070          static zclKE_Conn_t *zclKE_ServerConnGet( afAddrType_t *pPartner )
   2071          {
   2072            zclKE_Conn_t *pConn = NULL;
   2073           
   2074            // Check for current connection
   2075            pConn = zclKE_ServerConnFind( pPartner->addr.shortAddr );
   2076          
   2077            if ( !pConn )
   2078            {
   2079              // Create a new connection
   2080              pConn = zclKE_ServerConnCreate( pPartner ); 
   2081            }
   2082            else
   2083            {
   2084              // Connection already open, verify end point
   2085              if ( pConn->partner.endPoint != pPartner->endPoint )
   2086              {
   2087                // Connection has different end point, return NULL
   2088                pConn = NULL;
   2089              }
   2090            }
   2091          
   2092            return pConn;
   2093          }
   2094          
   2095          /**************************************************************************************************
   2096           * @fn      zclKE_ServerConnTerminate
   2097           *
   2098           * @brief   Terminate server connection.
   2099           *
   2100           * @param   pCtxt - connection context
   2101           *
   2102           * @return  void
   2103           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2104          static void zclKE_ServerConnTerminate( zclKE_ConnCtxt_t *pCtxt )
   \                     zclKE_ServerConnTerminate:
   2105          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2106            zclKE_TerminateCmd_t cmd;
   2107          
   2108            cmd.status = pCtxt->error;
   \   00000A   12....       LCALL     ?Subroutine34 & 0xFFFF
   2109            cmd.suites = zclKE_SupportedSuites;
   \                     ??CrossCallReturnLabel_28:
   \   00000D   12....       LCALL     ?XSTACK_DISP0_8
   \   000010   12....       LCALL     ?Subroutine75 & 0xFFFF
   2110            cmd.waitTime = 2 * ( ZCL_KE_SERVER_EPH_DATA_GEN_TIME + ZCL_KE_SERVER_CFM_KEY_GEN_TIME );
   \                     ??CrossCallReturnLabel_247:
   \   000013   7401         MOV       A,#0x1
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   12....       LCALL     ?Subroutine84 & 0xFFFF
   2111          
   2112            if ( pCtxt->pConn )
   \                     ??CrossCallReturnLabel_113:
   \   00001B   12....       LCALL     ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   00001E   602A         JZ        ??zclKE_ServerConnTerminate_0
   2113            {
   2114              zclKE_SendTerminate( &pCtxt->pConn->partner,
   2115                                   ZCL_KE_TERMINATE_CLIENT,
   2116                                   ZCL_FRAME_SERVER_CLIENT_DIR,
   2117                                   pCtxt->pConn->transSeqNum,
   2118                                   &cmd );
   \   000020   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000026   8A82         MOV       DPL,R2
   \   000028   8B83         MOV       DPH,R3
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   FD           MOV       R5,A
   \   00002E   7C01         MOV       R4,#0x1
   \   000030   7903         MOV       R1,#0x3
   \   000032   EA           MOV       A,R2
   \   000033   240F         ADD       A,#0xf
   \   000035   FA           MOV       R2,A
   \   000036   5001         JNC       ??zclKE_ServerConnTerminate_1
   \   000038   0B           INC       R3
   \                     ??zclKE_ServerConnTerminate_1:
   \   000039   12....       LCALL     `??zclKE_SendTerminate::?relay`; Banked call to: zclKE_SendTerminate
   \   00003C   7402         MOV       A,#0x2
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   2119          
   2120              zclKE_ServerConnClose( pCtxt->pConn );      
   \   000041                ; Setup parameters for call to function zclKE_ServerConnClose
   \   000041   8E82         MOV       DPL,R6
   \   000043   8F83         MOV       DPH,R7
   \   000045   12....       LCALL     ?Subroutine58 & 0xFFFF
   2121            }
   \                     ??CrossCallReturnLabel_64:
   \   000048   802F         SJMP      ??zclKE_ServerConnTerminate_2
   2122            else if ( pCtxt->pInMsg )
   \                     ??zclKE_ServerConnTerminate_0:
   \   00004A   8A82         MOV       DPL,R2
   \   00004C   8B83         MOV       DPH,R3
   \   00004E   A3           INC       DPTR
   \   00004F   12....       LCALL     ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   000052   6025         JZ        ??zclKE_ServerConnTerminate_2
   2123            {
   2124              zclKE_SendTerminate( &pCtxt->pInMsg->msg->srcAddr,
   2125                                   ZCL_KE_TERMINATE_CLIENT,
   2126                                   ZCL_FRAME_SERVER_CLIENT_DIR,
   2127                                   pCtxt->pInMsg->hdr.transSeqNum,
   2128                                   &cmd );
   \   000054   E8           MOV       A,R0
   \   000055   FA           MOV       R2,A
   \   000056   E9           MOV       A,R1
   \   000057   FB           MOV       R3,A
   \   000058                ; Setup parameters for call to function zclKE_SendTerminate
   \   000058   A8..         MOV       R0,?XSP + 0
   \   00005A   A9..         MOV       R1,?XSP + 1
   \   00005C   88..         MOV       ?V0,R0
   \   00005E   89..         MOV       ?V1,R1
   \   000060   78..         MOV       R0,#?V0
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000065   8A82         MOV       DPL,R2
   \   000067   8B83         MOV       DPH,R3
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   FD           MOV       R5,A
   \   000071   7C01         MOV       R4,#0x1
   \   000073   12....       LCALL     ?Subroutine38 & 0xFFFF
   2129            }
   \                     ??CrossCallReturnLabel_34:
   \   000076   12....       LCALL     ?DEALLOC_XSTACK8
   2130          }
   \                     ??zclKE_ServerConnTerminate_2:
   \   000079   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL     ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_391:
   \   000003   12....       LCALL     `??zclKE_ServerConnClose::?relay`; Banked call to: zclKE_ServerConnClose
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   7478         MOV       A,#0x78
   \   000002   12....       LCALL     ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   12....       LCALL     ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   7903         MOV       R1,#0x3
   \   000002   8A82         MOV       DPL,R2
   \   000004   8B83         MOV       DPH,R3
   \   000006   12....       LCALL     ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000009   12....       LCALL     `??zclKE_SendTerminate::?relay`; Banked call to: zclKE_SendTerminate
   \   00000C   7402         MOV       A,#0x2
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   E0           MOVX      A,@DPTR
   \   000005   85..82       MOV       DPL,?XSP + 0
   \   000008   85..83       MOV       DPH,?XSP + 1
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   90....       MOV       DPTR,#zclKE_SupportedSuites
   \   00000F   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_379:
   \   000012   7402         MOV       A,#0x2
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   EA           MOV       A,R2
   \   000001   2403         ADD       A,#0x3
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   3B           ADDC      A,R3
   \   000006   F9           MOV       R1,A
   \   000007   E8           MOV       A,R0
   \   000008   FE           MOV       R6,A
   \   000009   E9           MOV       A,R1
   \   00000A   FF           MOV       R7,A
   \   00000B   8882         MOV       DPL,R0
   \   00000D   F583         MOV       DPH,A
   \   00000F   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_378:
   \   000012   E8           MOV       A,R0
   \   000013   FA           MOV       R2,A
   \   000014   E9           MOV       A,R1
   \   000015   FB           MOV       R3,A
   \   000016                ; Setup parameters for call to function zclKE_SendTerminate
   \   000016                ; Setup parameters for call to function zclKE_SendTerminate
   \   000016   A8..         MOV       R0,?XSP + 0
   \   000018   A9..         MOV       R1,?XSP + 1
   \   00001A   88..         MOV       ?V0,R0
   \   00001C   89..         MOV       ?V1,R1
   \   00001E   78..         MOV       R0,#?V0
   \   000020   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine143:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2406         ADD       A,#0x6
   \   000003   FA           MOV       R2,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   FB           MOV       R3,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7404         MOV       A,#0x4
   \   000002                REQUIRE ??Subroutine184_0
   \   000002                ; // Fall through to label ??Subroutine184_0
   2131          
   2132          /**************************************************************************************************
   2133           * @fn      zclKE_ServerConnKeyGenTimeout
   2134           *
   2135           * @brief   Timeout triggers send of ZCL_KE_KEY_GEN_MSG(see ZCL_KE_KEY_GEN_STAGES_SERVER).
   2136           *
   2137           * @param   pConn - connection
   2138           *
   2139           * @return  void
   2140           */
   2141          static void zclKE_ServerConnKeyGenTimeout( zclKE_Conn_t *pConn )
   2142          {
   2143            zclKE_KeyGenMsg_t *pMsg;
   2144          
   2145            // Queue the key generate message
   2146            pMsg = (zclKE_KeyGenMsg_t *) osal_msg_allocate( sizeof( zclKE_KeyGenMsg_t ) );
   2147          
   2148            if (pMsg)
   2149            {
   2150              // Send key generate message
   2151              pMsg->hdr.event = ZCL_KE_KEY_GEN_MSG;
   2152              pMsg->hdr.status = 0;
   2153              pMsg->server = TRUE;
   2154              pMsg->partnerAddr = pConn->partner.addr.shortAddr;
   2155              osal_msg_send( zclKE_TaskID, (uint8 *)pMsg ) ;
   2156          
   2157              // Change state
   2158              pConn->state = ZCL_KE_SERVER_CONN_KEY_GEN_QUEUED;
   2159            }
   2160            else
   2161            {
   2162              // Terminate the connection
   2163              zclKE_ConnCtxt_t ctxt;
   2164              ctxt.pInMsg = NULL;
   2165              ctxt.pConn = pConn;
   2166              ctxt.error = ZCL_KE_TERMINATE_NO_RESOURCES;
   2167              zclKE_ServerConnTerminate( &ctxt );
   2168            }
   2169          }
   2170          
   2171          /**************************************************************************************************
   2172           * @fn      zclKE_ServerConnTimeout
   2173           *
   2174           * @brief   Server connection timeout.
   2175           *
   2176           * @param   pConn - connection
   2177           *
   2178           * @return  void
   2179           */
   2180          static void zclKE_ServerConnTimeout( zclKE_Conn_t *pConn )
   2181          {
   2182            // Clear timer info
   2183            pConn->timeout = 0;
   2184          
   2185            switch ( pConn->state )
   2186            {
   2187              case ZCL_KE_SERVER_CONN_KEY_GEN_WAIT:
   2188                zclKE_ServerConnKeyGenTimeout( pConn );
   2189                break;
   2190          
   2191              default:
   2192                zclKE_ServerConnClose( pConn ); 
   2193                break;
   2194            }
   2195          }
   2196          
   2197          /**************************************************************************************************
   2198           * @fn      zclKE_ServerProcessInitiateReq
   2199           *
   2200           * @brief   Process ZCL_KE_INITIATE_REQ.
   2201           *
   2202           * @param   pCtxt - connection context
   2203           * @param   pCmd - command payload
   2204           *
   2205           * @return  void
   2206           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2207          static void zclKE_ServerProcessInitiateReq( zclKE_ConnCtxt_t *pCtxt,
   \                     zclKE_ServerProcessInitiateReq:
   2208                                                      zclKE_InitiateCmd_t *pCmd )
   2209          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine42 & 0xFFFF
   2210            uint16 len;
   2211            zclKE_Conn_t *pConn = pCtxt->pConn;
   2212          
   2213            if ( !zclKE_InitiateCmdCheckFields( pCtxt, pCmd ) )
   \                     ??CrossCallReturnLabel_418:
   \   000008                ; Setup parameters for call to function zclKE_InitiateCmdCheckFields
   \   000008   12....       LCALL     `??zclKE_InitiateCmdCheckFields::?relay`; Banked call to: zclKE_InitiateCmdCheckFields
   \   00000B   E9           MOV       A,R1
   \   00000C   7003         JNZ       $+5
   \   00000E   02....       LJMP      ??zclKE_ServerProcessInitiateReq_0 & 0xFFFF
   2214            {
   2215              // pCtxt->error set in "zclKE_InitiateCmdCheckFields"
   2216              return;
   2217            }
   2218          
   2219            // Finish setting up connection fields
   2220            pConn->suite = pCmd->suite;
   \   000011   EE           MOV       A,R6
   \   000012   2405         ADD       A,#0x5
   \   000014   F8           MOV       R0,A
   \   000015   E4           CLR       A
   \   000016   3F           ADDC      A,R7
   \   000017   F9           MOV       R1,A
   \   000018   E8           MOV       A,R0
   \   000019   FA           MOV       R2,A
   \   00001A   E9           MOV       A,R1
   \   00001B   FB           MOV       R3,A
   \   00001C   85..82       MOV       DPL,?V2
   \   00001F   85..83       MOV       DPH,?V3
   \   000022   12....       LCALL     ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000025   8A82         MOV       DPL,R2
   \   000027   8B83         MOV       DPH,R3
   \   000029   12....       LCALL     ?Subroutine75 & 0xFFFF
   2221            pConn->rmtEphDataGenTime = pCmd->ephDataGenTime;
   \                     ??CrossCallReturnLabel_248:
   \   00002C   85..82       MOV       DPL,?V2
   \   00002F   85..83       MOV       DPH,?V3
   \   000032   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000035   12....       LCALL     ?Subroutine82 & 0xFFFF
   2222            pConn->rmtCfmKeyGenTime = pCmd->cfmKeyGenTime;
   \                     ??CrossCallReturnLabel_109:
   \   000038   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00003B   A3           INC       DPTR
   \   00003C   F0           MOVX      @DPTR,A
   2223          
   2224            len = zclKE_GetField( pConn->suite, ZCL_KE_CERT_LEN );
   \   00003D                ; Setup parameters for call to function zclKE_GetField
   \   00003D   7905         MOV       R1,#0x5
   \   00003F   8A82         MOV       DPL,R2
   \   000041   8B83         MOV       DPH,R3
   \   000043   12....       LCALL     ?Subroutine30 & 0xFFFF
   2225          
   2226            // Copy the remote certificate
   2227            pConn->pRmtCert = osal_mem_alloc( len );
   \                     ??CrossCallReturnLabel_24:
   \   000046   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   000049   3F           ADDC      A,R7
   \   00004A   12....       LCALL     ??Subroutine161_0 & 0xFFFF
   2228            if ( !pConn->pRmtCert )
   \                     ??CrossCallReturnLabel_258:
   \   00004D   6022         JZ        ??zclKE_ServerProcessInitiateReq_1
   2229            {
   2230              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   2231              return;
   2232            }
   2233          
   2234            osal_memcpy( pConn->pRmtCert, pCmd->pIdentity, len );
   \   00004F                ; Setup parameters for call to function osal_memcpy
   \   00004F   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000055   AC..         MOV       R4,?V4
   \   000057   AD..         MOV       R5,?V5
   \   000059   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   00005C   3F           ADDC      A,R7
   \   00005D   12....       LCALL     ??Subroutine173_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_327:
   \   000060   12....       LCALL     ?DEALLOC_XSTACK8
   2235          
   2236            // Send the ZCL_KE_INITIATE_RSP command
   2237            if ( zclKE_SendInitiateRsp( pConn ) != ZSuccess )
   \   000063                ; Setup parameters for call to function zclKE_SendInitiateCmd
   \   000063   7C01         MOV       R4,#0x1
   \   000065   7900         MOV       R1,#0x0
   \   000067   EE           MOV       A,R6
   \   000068   FA           MOV       R2,A
   \   000069   EF           MOV       A,R7
   \   00006A   FB           MOV       R3,A
   \   00006B   12....       LCALL     `??zclKE_SendInitiateCmd::?relay`; Banked call to: zclKE_SendInitiateCmd
   \   00006E   E9           MOV       A,R1
   \   00006F   600B         JZ        ??zclKE_ServerProcessInitiateReq_2
   2238            {
   2239              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   \                     ??zclKE_ServerProcessInitiateReq_1:
   \   000071   85..82       MOV       DPL,?V0
   \   000074   85..83       MOV       DPH,?V1
   \   000077   7404         MOV       A,#0x4
   \   000079   F0           MOVX      @DPTR,A
   2240              return;
   \   00007A   8018         SJMP      ??zclKE_ServerProcessInitiateReq_0
   2241            }
   2242          
   2243            // Set state to wait for ZCL_KE_EPH_DATA_REQ
   2244            pConn->state = ZCL_KE_SERVER_CONN_EPH_DATA_REQ_WAIT;
   \                     ??zclKE_ServerProcessInitiateReq_2:
   \   00007C   8E82         MOV       DPL,R6
   \   00007E   8F83         MOV       DPH,R7
   \   000080   A3           INC       DPTR
   \   000081   7401         MOV       A,#0x1
   \   000083   F0           MOVX      @DPTR,A
   2245          
   2246            // Set ephemeral data generation timeout
   2247            zclKE_ConnSetTimeout( pConn, pConn->rmtEphDataGenTime * 1000 );
   \   000084                ; Setup parameters for call to function zclKE_ConnSetTimeout
   \   000084   8E82         MOV       DPL,R6
   \   000086   8F83         MOV       DPH,R7
   \   000088   12....       LCALL     ??Subroutine178_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_359:
   \   00008B   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00008E   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   000091   12....       LCALL     ?DEALLOC_XSTACK8
   2248          }
   \                     ??zclKE_ServerProcessInitiateReq_0:
   \   000094   02....       LJMP      ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   8E82         MOV       DPL,R6
   \   000005   8F83         MOV       DPH,R7
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   EE           MOV       A,R6
   \   000001                REQUIRE ??Subroutine170_0
   \   000001                ; // Fall through to label ??Subroutine170_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   00000A   75..00       MOV       ?V10,#0x0
   \   00000D   78..         MOV       R0,#?V8
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000003                ; Setup parameters for call to function osal_mem_alloc
   \   000003                ; Setup parameters for call to function osal_mem_alloc
   \   000003   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000006   8B..         MOV       ?V7,R3
   \   000008   A9..         MOV       R1,?V7
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   EE           MOV       A,R6
   \   000001   FA           MOV       R2,A
   \   000002   EF           MOV       A,R7
   \   000003   FB           MOV       R3,A
   \   000004                REQUIRE ??Subroutine177_0
   \   000004                ; // Fall through to label ??Subroutine177_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine177_0:
   \   000000   12....       LCALL     `??zclKE_ConnSetTimeout::?relay`; Banked call to: zclKE_ConnSetTimeout
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine178_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F5..         MOV       ?V0,A
   \   000006   75..E8       MOV       ?B,#-0x18
   \   000009   A4           MUL       AB
   \   00000A   C5..         XCH       A,?V0
   \   00000C   A8..         MOV       R0,?B
   \   00000E   75..03       MOV       ?B,#0x3
   \   000011   A4           MUL       AB
   \   000012   28           ADD       A,R0
   \   000013   F8           MOV       R0,A
   \   000014   E4           CLR       A
   \   000015   28           ADD       A,R0
   \   000016   F5..         MOV       ?V1,A
   \   000018   33           RLC       A
   \   000019   95E0         SUBB      A,0xE0 /* A   */
   \   00001B   F5..         MOV       ?V2,A
   \   00001D   F5..         MOV       ?V3,A
   \   00001F   78..         MOV       R0,#?V0
   \   000021   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   8A..         MOV       ?V0,R2
   \   000002   8B..         MOV       ?V1,R3
   \   000004   8C..         MOV       ?V2,R4
   \   000006   8D..         MOV       ?V3,R5
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F                REQUIRE ??Subroutine188_0
   \   00000F                ; // Fall through to label ??Subroutine188_0
   2249          
   2250          /**************************************************************************************************
   2251           * @fn      zclKE_ServerProcessEphDataReq
   2252           *
   2253           * @brief   Process ZCL_KE_EPH_DATA_REQ.
   2254           *
   2255           * @param   pCtxt - connection context
   2256           * @param   pCmd - command payload
   2257           *
   2258           * @return  void
   2259           */
   2260          static void zclKE_ServerProcessEphDataReq( zclKE_ConnCtxt_t *pCtxt,
   2261                                                     zclKE_EphDataCmd_t *pCmd )
   2262          {
   2263            zclKE_Conn_t *pConn = pCtxt->pConn;
   2264            uint16 len;
   2265            
   2266            len = zclKE_GetField( pConn->suite, ZCL_KE_PUBLIC_KEY_LEN );
   2267          
   2268            // Copy the remote ephemeral public key
   2269            pConn->pRmtEPublicKey = osal_mem_alloc( len );
   2270          
   2271            if ( !pConn->pRmtEPublicKey )
   2272            {
   2273              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   2274              return;
   2275            }
   2276          
   2277            osal_memcpy( pConn->pRmtEPublicKey, pCmd->pEphData, len );
   2278          
   2279            /*===============================================================================================
   2280            * ZCL_KE_KEY_GEN_STAGES_SERVER: 
   2281            *
   2282            * Server key generation is broken into two stages in order to break up the calculation times, 
   2283            * which can starve processing time for other tasks.
   2284            *
   2285            *   Stage 1(current):
   2286            *     - generate ephemeral key data
   2287            *     - start timer 500ms
   2288            *
   2289            *   Stage 2(next):
   2290            *     - timer expires
   2291            *     - generate keys bits
   2292            *     - derive mac and key data
   2293            *     - send ZCL_KE_EPH_DATA_REQ
   2294            *
   2295            ===============================================================================================*/
   2296          
   2297            // Generate ephemeral key data
   2298            if ( !zclKE_GenEphKeys( pCtxt ) )
   2299            {
   2300              // pCtxt->error set in "zclKE_GenKeyBits"
   2301              return;
   2302            }
   2303          
   2304            // Set state to wait for key generation
   2305            pConn->state = ZCL_KE_SERVER_CONN_KEY_GEN_WAIT;
   2306          
   2307            // Set key generation timeout
   2308            zclKE_ConnSetTimeout( pConn, ZCL_KE_KEY_GEN_TIMEOUT );
   2309          }
   2310          
   2311          /**************************************************************************************************
   2312           * @fn      zclKE_ServerProcessKeyGen
   2313           *
   2314           * @brief   Process ZCL_KE_KEY_GEN_MSG.
   2315           *
   2316           * @param   pCtxt - connection context
   2317           *
   2318           * @return  void
   2319           */
   2320          static void zclKE_ServerProcessKeyGen( zclKE_ConnCtxt_t *pCtxt )
   2321          {
   2322            zclKE_Conn_t *pConn = pCtxt->pConn;
   2323          
   2324            // Handle server connection key generation stage 2 -- see ZCL_KE_KEY_GEN_STAGES_SERVER
   2325            if ( !zclKE_GenKeys( pCtxt ) )
   2326            {
   2327              // pCtxt->error set in "zclKE_GenKeys"
   2328              return;
   2329            }
   2330          
   2331            // Send the ZCL_KE_EPH_DATA_RSP command
   2332            if ( zclKE_SendEphDataRsp( pConn ) != ZSuccess )
   2333            {
   2334              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   2335              return;
   2336            }
   2337          
   2338            // Set state to wait for ZCL_KE_CFM_KEY_DATA_REQ
   2339            pConn->state = ZCL_KE_SERVER_CONN_CFM_KEY_DATA_REQ_WAIT;
   2340          
   2341            // Set aging timeout
   2342            zclKE_ConnSetTimeout( pConn, pConn->rmtCfmKeyGenTime * 1000 );
   2343          }
   2344          
   2345          /**************************************************************************************************
   2346           * @fn      zclKE_ServerProcessCfmKeyDataReq
   2347           *
   2348           * @brief   Process ZCL_KE_CFM_KEY_DATA_REQ.
   2349           *
   2350           * @param   pCtxt - connection context
   2351           * @param   pCmd - command payload
   2352           *
   2353           * @return  void
   2354           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2355          static void zclKE_ServerProcessCfmKeyDataReq( zclKE_ConnCtxt_t *pCtxt,
   \                     zclKE_ServerProcessCfmKeyDataReq:
   2356                                                        zclKE_CfmKeyDataCmd_t *pCmd )
   2357          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV       A,#-0x18
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine42 & 0xFFFF
   2358            uint8 MAC[ZCL_KE_MAC_LEN];
   2359            uint8 partnerExtAddr[Z_EXTADDR_LEN];
   2360            zclKE_Conn_t *pConn = pCtxt->pConn;
   2361          
   2362            // Lookup partner's extended address -- required to add link key
   2363            if ( !AddrMgrExtAddrLookup( pConn->partner.addr.shortAddr, partnerExtAddr ) )
   \                     ??CrossCallReturnLabel_419:
   \   00000D                ; Setup parameters for call to function AddrMgrExtAddrLookup
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_409:
   \   000014   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   000017   6074         JZ        ??zclKE_ServerProcessCfmKeyDataReq_0
   2364            {
   2365              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   2366              return;
   2367            }
   2368          
   2369            // Calculate MACu
   2370            if ( !zclKE_GenMAC( pConn, FALSE, TRUE, MAC ) )
   \   000019                ; Setup parameters for call to function zclKE_GenMAC
   \   000019   7408         MOV       A,#0x8
   \   00001B   12....       LCALL     ?XSTACK_DISP100_8
   \   00001E   88..         MOV       ?V4,R0
   \   000020   89..         MOV       ?V5,R1
   \   000022   78..         MOV       R0,#?V4
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000027   7C01         MOV       R4,#0x1
   \   000029   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_346:
   \   00002C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002F   E9           MOV       A,R1
   \   000030   605B         JZ        ??zclKE_ServerProcessCfmKeyDataReq_0
   2371            {
   2372              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   2373              return;
   2374            }
   2375          
   2376            // Compare MACu values
   2377            if ( osal_memcmp( MAC, pCmd->pMAC, ZCL_KE_MAC_LEN ) != TRUE )
   \   000032                ; Setup parameters for call to function osal_memcmp
   \   000032   85..82       MOV       DPL,?V2
   \   000035   85..83       MOV       DPH,?V3
   \   000038   12....       LCALL     ??Subroutine168_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00003E   7C10         MOV       R4,#0x10
   \   000040   7D00         MOV       R5,#0x0
   \   000042   740B         MOV       A,#0xb
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   12....       LCALL     ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_437:
   \   00004A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004D   E9           MOV       A,R1
   \   00004E   6401         XRL       A,#0x1
   \   000050   600A         JZ        ??zclKE_ServerProcessCfmKeyDataReq_1
   2378            {
   2379              pCtxt->error = ZCL_KE_TERMINATE_BAD_KEY_CONFIRM;
   \   000052   85..82       MOV       DPL,?V0
   \   000055   85..83       MOV       DPH,?V1
   \   000058   7402         MOV       A,#0x2
   \   00005A   8039         SJMP      ??zclKE_ServerProcessCfmKeyDataReq_2
   2380              return;
   2381            }
   2382          
   2383            // Calculate MACv
   2384            if ( !zclKE_GenMAC( pConn, FALSE, FALSE, MAC ) )
   \                     ??zclKE_ServerProcessCfmKeyDataReq_1:
   \   00005C                ; Setup parameters for call to function zclKE_GenMAC
   \   00005C   7408         MOV       A,#0x8
   \   00005E   12....       LCALL     ?XSTACK_DISP100_8
   \   000061   88..         MOV       ?V2,R0
   \   000063   89..         MOV       ?V3,R1
   \   000065   78..         MOV       R0,#?V2
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006A   7C00         MOV       R4,#0x0
   \   00006C   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   00006F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000072   E9           MOV       A,R1
   \   000073   6018         JZ        ??zclKE_ServerProcessCfmKeyDataReq_0
   2385            {
   2386              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   2387              return;
   2388            }
   2389          
   2390            // Send the ZCL_KE_CFM_KEY_DATA_RSP command
   2391            if ( zclKE_SendCfmKeyDataRsp( pConn, MAC ) != ZSuccess )
   \   000075                ; Setup parameters for call to function zclKE_SendCfmKeyDataCmd
   \   000075   78..         MOV       R0,#?V2
   \   000077   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007A   7C01         MOV       R4,#0x1
   \   00007C   7902         MOV       R1,#0x2
   \   00007E   EE           MOV       A,R6
   \   00007F   FA           MOV       R2,A
   \   000080   EF           MOV       A,R7
   \   000081   FB           MOV       R3,A
   \   000082   12....       LCALL     `??zclKE_SendCfmKeyDataCmd::?relay`; Banked call to: zclKE_SendCfmKeyDataCmd
   \   000085   7402         MOV       A,#0x2
   \   000087   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008A   E9           MOV       A,R1
   \   00008B   600B         JZ        ??zclKE_ServerProcessCfmKeyDataReq_3
   2392            {
   2393              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   \                     ??zclKE_ServerProcessCfmKeyDataReq_0:
   \   00008D   85..82       MOV       DPL,?V0
   \   000090   85..83       MOV       DPH,?V1
   \   000093   7404         MOV       A,#0x4
   \                     ??zclKE_ServerProcessCfmKeyDataReq_2:
   \   000095   F0           MOVX      @DPTR,A
   2394              return;
   \   000096   8021         SJMP      ??zclKE_ServerProcessCfmKeyDataReq_4
   2395            }
   2396          
   2397            // Add the link key
   2398            ZDSecMgrAddLinkKey( pConn->partner.addr.shortAddr,
   2399                                partnerExtAddr,
   2400                                pConn->pKey );
   \                     ??zclKE_ServerProcessCfmKeyDataReq_3:
   \   000098                ; Setup parameters for call to function ZDSecMgrAddLinkKey
   \   000098   EE           MOV       A,R6
   \   000099   2423         ADD       A,#0x23
   \   00009B   F582         MOV       DPL,A
   \   00009D   E4           CLR       A
   \   00009E   3F           ADDC      A,R7
   \   00009F   F583         MOV       DPH,A
   \   0000A1   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000A4   7402         MOV       A,#0x2
   \   0000A6   12....       LCALL     ?XSTACK_DISP102_8
   \   0000A9   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_410:
   \   0000AC   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   0000AF   12....       LCALL     ?DEALLOC_XSTACK8
   2401          
   2402            // Done, close connection
   2403            zclKE_ServerConnClose( pConn );
   \   0000B2                ; Setup parameters for call to function zclKE_ServerConnClose
   \   0000B2   EE           MOV       A,R6
   \   0000B3   FA           MOV       R2,A
   \   0000B4   EF           MOV       A,R7
   \   0000B5   FB           MOV       R3,A
   \   0000B6   12....       LCALL     `??zclKE_ServerConnClose::?relay`; Banked call to: zclKE_ServerConnClose
   2404          }
   \                     ??zclKE_ServerProcessCfmKeyDataReq_4:
   \   0000B9   7418         MOV       A,#0x18
   \   0000BB   80..         SJMP      ??Subroutine166_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   000003   12....       LCALL     `??ZDSecMgrAddLinkKey::?relay`; Banked call to: ZDSecMgrAddLinkKey
   \   000006   7402         MOV       A,#0x2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   7900         MOV       R1,#0x0
   \   000002                REQUIRE ??Subroutine175_0
   \   000002                ; // Fall through to label ??Subroutine175_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine175_0:
   \   000000   EE           MOV       A,R6
   \   000001   FA           MOV       R2,A
   \   000002   EF           MOV       A,R7
   \   000003   FB           MOV       R3,A
   \   000004                REQUIRE ??Subroutine176_0
   \   000004                ; // Fall through to label ??Subroutine176_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine176_0:
   \   000000   12....       LCALL     `??zclKE_GenMAC::?relay`; Banked call to: zclKE_GenMAC
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   EE           MOV       A,R6
   \   000001                REQUIRE ??Subroutine186_0
   \   000001                ; // Fall through to label ??Subroutine186_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine186_0:
   \   000000   12....       LCALL     ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_417:
   \   000003   3F           ADDC      A,R7
   \   000004   22           RET
   2405          
   2406          /**************************************************************************************************
   2407           * @fn      zclKE_ServerHdlInitiateReq
   2408           *
   2409           * @brief   Handle ZCL_KE_INITIATE_REQ.
   2410           *
   2411           * @param   pCtxt - connection context
   2412           *
   2413           * @return  ZStatus_t - status
   2414           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2415          static ZStatus_t zclKE_ServerHdlInitiateReq( zclKE_ConnCtxt_t *pCtxt )
   \                     zclKE_ServerHdlInitiateReq:
   2416          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine50 & 0xFFFF
   2417            // Find an existing connection or create a new one
   2418            pCtxt->pConn = zclKE_ServerConnGet( &pCtxt->pInMsg->msg->srcAddr );
   \                     ??CrossCallReturnLabel_52:
   \   00000D   F5..         MOV       ?V0,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   3400         ADDC      A,#0x0
   \   000013   F5..         MOV       ?V1,A
   \   000015                ; Setup parameters for call to function zclKE_ServerConnFind
   \   000015   85..82       MOV       DPL,?V0
   \   000018   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   00001B   8A..         MOV       ?V2,R2
   \   00001D   8B..         MOV       ?V3,R3
   \   00001F   A8..         MOV       R0,?V2
   \   000021   A9..         MOV       R1,?V3
   \   000023   EA           MOV       A,R2
   \   000024   49           ORL       A,R1
   \   000025   7011         JNZ       ??zclKE_ServerHdlInitiateReq_0
   \   000027                ; Setup parameters for call to function zclKE_ServerConnCreate
   \   000027   AA..         MOV       R2,?V0
   \   000029   AB..         MOV       R3,?V1
   \   00002B   12....       LCALL     `??zclKE_ServerConnCreate::?relay`; Banked call to: zclKE_ServerConnCreate
   \   00002E   8A..         MOV       ?V0,R2
   \   000030   8B..         MOV       ?V1,R3
   \   000032   A8..         MOV       R0,?V0
   \   000034   A9..         MOV       R1,?V1
   \   000036   8022         SJMP      ??zclKE_ServerHdlInitiateReq_1
   \                     ??zclKE_ServerHdlInitiateReq_0:
   \   000038   EA           MOV       A,R2
   \   000039   2418         ADD       A,#0x18
   \   00003B   F582         MOV       DPL,A
   \   00003D   E4           CLR       A
   \   00003E   39           ADDC      A,R1
   \   00003F   F583         MOV       DPH,A
   \   000041   E0           MOVX      A,@DPTR
   \   000042   FA           MOV       R2,A
   \   000043   85..82       MOV       DPL,?V0
   \   000046   85..83       MOV       DPH,?V1
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   6A           XRL       A,R2
   \   000054   6004         JZ        ??zclKE_ServerHdlInitiateReq_1
   \   000056   7800         MOV       R0,#0x0
   \   000058   7900         MOV       R1,#0x0
   \                     ??zclKE_ServerHdlInitiateReq_1:
   \   00005A   EE           MOV       A,R6
   \   00005B   2403         ADD       A,#0x3
   \   00005D   FA           MOV       R2,A
   \   00005E   E4           CLR       A
   \   00005F   3F           ADDC      A,R7
   \   000060   FB           MOV       R3,A
   \   000061   8A82         MOV       DPL,R2
   \   000063   F583         MOV       DPH,A
   \   000065   12....       LCALL     ?Subroutine75 & 0xFFFF
   2419          
   2420            if ( pCtxt->pConn )
   \                     ??CrossCallReturnLabel_249:
   \   000068   8A82         MOV       DPL,R2
   \   00006A   8B83         MOV       DPH,R3
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   49           ORL       A,R1
   \   00006E   8E82         MOV       DPL,R6
   \   000070   8F83         MOV       DPH,R7
   \   000072   6043         JZ        ??zclKE_ServerHdlInitiateReq_2
   2421            {
   2422              // Update transaction sequence number
   2423              pCtxt->pConn->transSeqNum = pCtxt->pInMsg->hdr.transSeqNum;
   \   000074   A3           INC       DPTR
   \   000075   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000078   C0E0         PUSH      A
   \   00007A   8A82         MOV       DPL,R2
   \   00007C   8B83         MOV       DPH,R3
   \   00007E   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000081   D0E0         POP       A
   \   000083   F0           MOVX      @DPTR,A
   2424          
   2425              if ( pCtxt->pConn->state == ZCL_KE_SERVER_CONN_INIT )
   \   000084   8A82         MOV       DPL,R2
   \   000086   8B83         MOV       DPH,R3
   \   000088   12....       LCALL     ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   00008B   7022         JNZ       ??zclKE_ServerHdlInitiateReq_3
   2426              {
   2427                zclKE_InitiateCmd_t cmd;
   2428          
   2429                if ( zclKE_ParseInitiateCmd( pCtxt->pInMsg, &cmd ) == ZCL_STATUS_SUCCESS )
   \   00008D                ; Setup parameters for call to function zclKE_ParseInitiateCmd
   \   00008D   AC..         MOV       R4,?XSP + 0
   \   00008F   AD..         MOV       R5,?XSP + 1
   \   000091   8E82         MOV       DPL,R6
   \   000093   8F83         MOV       DPH,R7
   \   000095   A3           INC       DPTR
   \   000096   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000099   7014         JNZ       ??zclKE_ServerHdlInitiateReq_3
   2430                {
   2431                  zclKE_ServerProcessInitiateReq( pCtxt, &cmd );      
   \   00009B                ; Setup parameters for call to function zclKE_ServerProcessInitiateReq
   \   00009B   AC..         MOV       R4,?XSP + 0
   \   00009D   AD..         MOV       R5,?XSP + 1
   \   00009F   EE           MOV       A,R6
   \   0000A0   FA           MOV       R2,A
   \   0000A1   EF           MOV       A,R7
   \   0000A2   FB           MOV       R3,A
   \   0000A3   12....       LCALL     `??zclKE_ServerProcessInitiateReq::?relay`; Banked call to: zclKE_ServerProcessInitiateReq
   2432                }
   2433                else
   2434                {
   2435                  pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   2436                }
   2437              }
   2438              else
   2439              {
   2440                pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   2441              }
   2442            }
   2443            else
   2444            {
   2445              // No resources available
   2446              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   2447            }
   2448          
   2449            // Check for error and terminate connection
   2450            if ( pCtxt->error )
   \   0000A6   8E82         MOV       DPL,R6
   \   0000A8   8F83         MOV       DPH,R7
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   700D         JNZ       ??zclKE_ServerHdlInitiateReq_4
   \   0000AD   8012         SJMP      ??zclKE_ServerHdlInitiateReq_5
   \                     ??zclKE_ServerHdlInitiateReq_3:
   \   0000AF   8E82         MOV       DPL,R6
   \   0000B1   8F83         MOV       DPH,R7
   \   0000B3   7403         MOV       A,#0x3
   \   0000B5   8002         SJMP      ??zclKE_ServerHdlInitiateReq_6
   \                     ??zclKE_ServerHdlInitiateReq_2:
   \   0000B7   7404         MOV       A,#0x4
   \                     ??zclKE_ServerHdlInitiateReq_6:
   \   0000B9   F0           MOVX      @DPTR,A
   2451            {
   2452              zclKE_ServerConnTerminate( pCtxt ); 
   \                     ??zclKE_ServerHdlInitiateReq_4:
   \   0000BA                ; Setup parameters for call to function zclKE_ServerConnTerminate
   \   0000BA   EE           MOV       A,R6
   \   0000BB   FA           MOV       R2,A
   \   0000BC   EF           MOV       A,R7
   \   0000BD   FB           MOV       R3,A
   \   0000BE   12....       LCALL     `??zclKE_ServerConnTerminate::?relay`; Banked call to: zclKE_ServerConnTerminate
   2453            }
   2454          
   2455            return ZCL_STATUS_CMD_HAS_RSP;
   \                     ??zclKE_ServerHdlInitiateReq_5:
   \   0000C1   79FF         MOV       R1,#-0x1
   \   0000C3   7406         MOV       A,#0x6
   \   0000C5                REQUIRE ?Subroutine11
   \   0000C5                ; // Fall through to label ?Subroutine11
   2456          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004                ; Setup parameters for call to function zclKE_ServerConnLookup
   \   000004                ; Setup parameters for call to function zclKE_ClientConnLookup
   \   000004                ; Setup parameters for call to function zclKE_ClientConnLookup
   \   000004   8A82         MOV       DPL,R2
   \   000006   F583         MOV       DPH,A
   \   000008   A3           INC       DPTR
   \   000009   12....       LCALL     ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   2406         ADD       A,#0x6
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   12....       LCALL     ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL     ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_392:
   \   000003   12....       LCALL     `??zclKE_ParseInitiateCmd::?relay`; Banked call to: zclKE_ParseInitiateCmd
   \   000006   E9           MOV       A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine174_0:
   \   000000   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET
   2457          
   2458          /**************************************************************************************************
   2459           * @fn      zclKE_ServerHdlEphDataReq
   2460           *
   2461           * @brief   Handle ZCL_KE_EPH_DATA_REQ.
   2462           *
   2463           * @param   pCtxt - connection context
   2464           *
   2465           * @return  ZStatus_t - status
   2466           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   79FF         MOV       R1,#-0x1
   \   000002   7402         MOV       A,#0x2
   \   000004                REQUIRE ??Subroutine166_0
   \   000004                ; // Fall through to label ??Subroutine166_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2467          static ZStatus_t zclKE_ServerHdlEphDataReq( zclKE_ConnCtxt_t *pCtxt )
   \                     zclKE_ServerHdlEphDataReq:
   2468          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00000D   FA           MOV       R2,A
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   3400         ADDC      A,#0x0
   \   000012   FB           MOV       R3,A
   2469            // Look for an existing connection
   2470            pCtxt->pConn = zclKE_ServerConnLookup( &pCtxt->pInMsg->msg->srcAddr );
   \   000013   12....       LCALL     `??zclKE_ServerConnLookup::?relay`; Banked call to: zclKE_ServerConnLookup
   \   000016   EE           MOV       A,R6
   \   000017   2403         ADD       A,#0x3
   \   000019   F8           MOV       R0,A
   \   00001A   E4           CLR       A
   \   00001B   3F           ADDC      A,R7
   \   00001C   F9           MOV       R1,A
   \   00001D   8882         MOV       DPL,R0
   \   00001F   F583         MOV       DPH,A
   \   000021   EA           MOV       A,R2
   \   000022   F0           MOVX      @DPTR,A
   \   000023   A3           INC       DPTR
   \   000024   EB           MOV       A,R3
   \   000025   F0           MOVX      @DPTR,A
   2471          
   2472            if ( pCtxt->pConn )
   \   000026   EA           MOV       A,R2
   \   000027   4B           ORL       A,R3
   \   000028   7003         JNZ       $+5
   \   00002A   02....       LJMP      ??zclKE_ServerHdlEphDataReq_0 & 0xFFFF
   2473            {
   2474              // Update transaction sequence number
   2475              pCtxt->pConn->transSeqNum = pCtxt->pInMsg->hdr.transSeqNum;
   \   00002D   8E82         MOV       DPL,R6
   \   00002F   8F83         MOV       DPH,R7
   \   000031   A3           INC       DPTR
   \   000032   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   000035   CA           XCH       A,R2
   \   000036   2406         ADD       A,#0x6
   \   000038   F582         MOV       DPL,A
   \   00003A   E4           CLR       A
   \   00003B   3A           ADDC      A,R2
   \   00003C   F583         MOV       DPH,A
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   C0E0         PUSH      A
   \   000041   8882         MOV       DPL,R0
   \   000043   8983         MOV       DPH,R1
   \   000045   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   D0E0         POP       A
   \   00004C   F0           MOVX      @DPTR,A
   2476          
   2477              if ( pCtxt->pConn->state == ZCL_KE_SERVER_CONN_EPH_DATA_REQ_WAIT )
   \   00004D   8882         MOV       DPL,R0
   \   00004F   8983         MOV       DPH,R1
   \   000051   12....       LCALL     ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_336:
   \   000054   6401         XRL       A,#0x1
   \   000056   7064         JNZ       ??zclKE_ServerHdlEphDataReq_0
   2478              {
   2479                zclKE_EphDataCmd_t cmd;
   2480          
   2481                if ( zclKE_ParseEphDataCmd( pCtxt->pConn->suite, 
   2482                                            pCtxt->pInMsg, 
   2483                                            &cmd ) == ZCL_STATUS_SUCCESS )
   \   000058                ; Setup parameters for call to function zclKE_ParseEphDataCmd
   \   000058   A8..         MOV       R0,?XSP + 0
   \   00005A   A9..         MOV       R1,?XSP + 1
   \   00005C   88..         MOV       ?V0,R0
   \   00005E   89..         MOV       ?V1,R1
   \   000060   78..         MOV       R0,#?V0
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000065   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000068   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006B   E9           MOV       A,R1
   \   00006C   704E         JNZ       ??zclKE_ServerHdlEphDataReq_0
   2484                {
   2485                  zclKE_ServerProcessEphDataReq( pCtxt, &cmd );      
   \   00006E   12....       LCALL     ?Subroutine14 & 0xFFFF
   2486                }
   2487                else
   2488                {
   2489                  pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   2490                }
   2491              }
   2492              else
   2493              {
   2494                pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   2495              }
   2496            }
   \                     ??CrossCallReturnLabel_0:
   \   000071   7008         JNZ       ??zclKE_ServerHdlEphDataReq_1
   \   000073   8E82         MOV       DPL,R6
   \   000075   8F83         MOV       DPH,R7
   \   000077   7404         MOV       A,#0x4
   \   000079   8047         SJMP      ??zclKE_ServerHdlEphDataReq_2
   \                     ??zclKE_ServerHdlEphDataReq_1:
   \   00007B                ; Setup parameters for call to function osal_memcpy
   \   00007B   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000081   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   000084   12....       LCALL     ?DEALLOC_XSTACK8
   \   000087                ; Setup parameters for call to function zclKE_GenEphKeys
   \   000087   EE           MOV       A,R6
   \   000088   FA           MOV       R2,A
   \   000089   EF           MOV       A,R7
   \   00008A   FB           MOV       R3,A
   \   00008B   12....       LCALL     `??zclKE_GenEphKeys::?relay`; Banked call to: zclKE_GenEphKeys
   \   00008E   E9           MOV       A,R1
   \   00008F   601A         JZ        ??zclKE_ServerHdlEphDataReq_3
   \   000091   85..82       MOV       DPL,?V0
   \   000094   85..83       MOV       DPH,?V1
   \   000097   A3           INC       DPTR
   \   000098   7402         MOV       A,#0x2
   \   00009A   F0           MOVX      @DPTR,A
   \   00009B                ; Setup parameters for call to function zclKE_ConnSetTimeout
   \   00009B   90....       MOV       DPTR,#__Constant_1f4
   \   00009E   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000A1   AA..         MOV       R2,?V0
   \   0000A3   AB..         MOV       R3,?V1
   \   0000A5   12....       LCALL     ??Subroutine177_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   0000A8   12....       LCALL     ?DEALLOC_XSTACK8
   2497            else
   2498            {
   2499              pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   2500            }
   2501          
   2502            // Check for error and terminate connection
   2503            if ( pCtxt->error )
   \                     ??zclKE_ServerHdlEphDataReq_3:
   \   0000AB   8E82         MOV       DPL,R6
   \   0000AD   8F83         MOV       DPH,R7
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   6007         JZ        ??zclKE_ServerHdlEphDataReq_4
   2504            {
   2505              zclKE_ServerConnTerminate( pCtxt ); 
   \                     ??zclKE_ServerHdlEphDataReq_5:
   \   0000B2                ; Setup parameters for call to function zclKE_ServerConnTerminate
   \   0000B2   EE           MOV       A,R6
   \   0000B3   FA           MOV       R2,A
   \   0000B4   EF           MOV       A,R7
   \   0000B5   FB           MOV       R3,A
   \   0000B6   12....       LCALL     `??zclKE_ServerConnTerminate::?relay`; Banked call to: zclKE_ServerConnTerminate
   2506            }
   2507          
   2508            return ZCL_STATUS_CMD_HAS_RSP;
   \                     ??zclKE_ServerHdlEphDataReq_4:
   \   0000B9   02....       LJMP      ?Subroutine7 & 0xFFFF
   \                     ??zclKE_ServerHdlEphDataReq_0:
   \   0000BC   8E82         MOV       DPL,R6
   \   0000BE   8F83         MOV       DPH,R7
   \   0000C0   7403         MOV       A,#0x3
   \                     ??zclKE_ServerHdlEphDataReq_2:
   \   0000C2   F0           MOVX      @DPTR,A
   \   0000C3   80ED         SJMP      ??zclKE_ServerHdlEphDataReq_5
   2509          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine168_0
   \   000006                ; // Fall through to label ??Subroutine168_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   AC..         MOV       R4,?V2
   \   000002   AD..         MOV       R5,?V3
   \   000004   E5..         MOV       A,?V0
   \   000006   241F         ADD       A,#0x1f
   \   000008                REQUIRE ??Subroutine172_0
   \   000008                ; // Fall through to label ??Subroutine172_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine172_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V1
   \   000005                REQUIRE ??Subroutine173_0
   \   000005                ; // Fall through to label ??Subroutine173_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   12....       LCALL     ??Subroutine151_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000008   8E82         MOV       DPL,R6
   \   00000A   8F83         MOV       DPH,R7
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   12....       LCALL     ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_390:
   \   000018   12....       LCALL     `??zclKE_ParseEphDataCmd::?relay`; Banked call to: zclKE_ParseEphDataCmd
   \   00001B   7402         MOV       A,#0x2
   \   00001D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F5..         MOV       ?V0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F5..         MOV       ?V1,A
   \   00000E                ; Setup parameters for call to function zclKE_GetField
   \   00000E                ; Setup parameters for call to function zclKE_GetField
   \   00000E   7903         MOV       R1,#0x3
   \   000010   85..82       MOV       DPL,?V0
   \   000013   F583         MOV       DPH,A
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   00001D                ; Setup parameters for call to function osal_mem_alloc
   \   00001D                ; Setup parameters for call to function osal_mem_alloc
   \   00001D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000020   8B..         MOV       ?V5,R3
   \   000022   A9..         MOV       R1,?V5
   \   000024   E5..         MOV       A,?V0
   \   000026   241F         ADD       A,#0x1f
   \   000028   F582         MOV       DPL,A
   \   00002A   E4           CLR       A
   \   00002B   35..         ADDC      A,?V1
   \   00002D   F583         MOV       DPH,A
   \   00002F   12....       LCALL     ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000032   22           RET
   2510          
   2511          /**************************************************************************************************
   2512           * @fn      zclKE_ServerHdlCfmKeyDataReq
   2513           *
   2514           * @brief   Handle ZCL_KE_CFM_KEY_DATA_REQ.
   2515           *
   2516           * @param   pCtxt - connection context
   2517           *
   2518           * @return  ZStatus_t - status
   2519           */
   2520          static ZStatus_t zclKE_ServerHdlCfmKeyDataReq( zclKE_ConnCtxt_t *pCtxt )
   2521          {
   2522            // Look for an existing connection
   2523            pCtxt->pConn = zclKE_ServerConnLookup( &pCtxt->pInMsg->msg->srcAddr );
   2524          
   2525            if ( pCtxt->pConn )
   2526            {
   2527              // Update transaction sequence number
   2528              pCtxt->pConn->transSeqNum = pCtxt->pInMsg->hdr.transSeqNum;
   2529          
   2530              if ( pCtxt->pConn->state == ZCL_KE_SERVER_CONN_CFM_KEY_DATA_REQ_WAIT )
   2531              {
   2532                zclKE_CfmKeyDataCmd_t cmd;
   2533          
   2534                if ( zclKE_ParseCfmKeyDataCmd( pCtxt->pInMsg, &cmd ) == ZCL_STATUS_SUCCESS )
   2535                {
   2536                  zclKE_ServerProcessCfmKeyDataReq( pCtxt, &cmd );      
   2537                }
   2538                else
   2539                {
   2540                  pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   2541                }
   2542              }
   2543              else
   2544              {
   2545                pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   2546              }
   2547            }
   2548            else
   2549            {
   2550              pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   2551            }
   2552          
   2553            // Check for error and terminate connection
   2554            if ( pCtxt->error )
   2555            {
   2556              zclKE_ServerConnTerminate( pCtxt ); 
   2557            }
   2558          
   2559            return ZCL_STATUS_CMD_HAS_RSP;
   2560          }
   2561          
   2562          /**************************************************************************************************
   2563           * @fn      zclKE_ServerHdlTerminate
   2564           *
   2565           * @brief   Handle ZCL_KE_TERMINATE_SERVER.
   2566           *
   2567           * @param   pCtxt - connection context
   2568           *
   2569           * @return  ZStatus_t - status
   2570           */
   2571          static ZStatus_t zclKE_ServerHdlTerminate( zclKE_ConnCtxt_t *pCtxt )
   2572          {
   2573            // Look for an existing connection
   2574            pCtxt->pConn = zclKE_ServerConnLookup( &pCtxt->pInMsg->msg->srcAddr );
   2575          
   2576            if ( pCtxt->pConn )
   2577            {
   2578              // Update transaction sequence number
   2579              pCtxt->pConn->transSeqNum = pCtxt->pInMsg->hdr.transSeqNum;
   2580          
   2581              zclKE_ServerConnClose( pCtxt->pConn );
   2582            }
   2583          
   2584            return ZCL_STATUS_SUCCESS;
   2585          }
   2586          
   2587          /**************************************************************************************************
   2588           * @fn      zclKE_ServerHdlSpecificCmd
   2589           *
   2590           * @brief   Server ZCL specific command handler.
   2591           *
   2592           * @param   pInMsg - incoming message to process
   2593           *
   2594           * @return  ZStatus_t - status
   2595           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2596          static ZStatus_t zclKE_ServerHdlSpecificCmd( zclIncoming_t *pInMsg )
   \                     zclKE_ServerHdlSpecificCmd:
   2597          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV       A,#-0x7
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2598            ZStatus_t status;
   2599            zclKE_ConnCtxt_t ctxt;
   2600          
   2601            // Initialize connection context
   2602            ctxt.pInMsg = pInMsg;
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   2603            ctxt.pConn = NULL;
   \   000014   7403         MOV       A,#0x3
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ?Subroutine68 & 0xFFFF
   2604            ctxt.error = 0;
   2605          
   2606            // Process the command
   2607            switch ( pInMsg->hdr.commandID )
   \                     ??CrossCallReturnLabel_80:
   \   00001C   600F         JZ        ??zclKE_ServerHdlSpecificCmd_0
   \   00001E   14           DEC       A
   \   00001F   6015         JZ        ??zclKE_ServerHdlSpecificCmd_1
   \   000021   14           DEC       A
   \   000022   601E         JZ        ??zclKE_ServerHdlSpecificCmd_2
   \   000024   14           DEC       A
   \   000025   7003         JNZ       $+5
   \   000027   02....       LJMP      ??zclKE_ServerHdlSpecificCmd_3 & 0xFFFF
   \   00002A   02....       LJMP      ??zclKE_ServerHdlSpecificCmd_4 & 0xFFFF
   2608            {
   2609              case ZCL_KE_INITIATE_REQ:
   2610                status = zclKE_ServerHdlInitiateReq( &ctxt );
   \                     ??zclKE_ServerHdlSpecificCmd_0:
   \   00002D                ; Setup parameters for call to function zclKE_ServerHdlInitiateReq
   \   00002D   AA..         MOV       R2,?XSP + 0
   \   00002F   AB..         MOV       R3,?XSP + 1
   \   000031   12....       LCALL     `??zclKE_ServerHdlInitiateReq::?relay`; Banked call to: zclKE_ServerHdlInitiateReq
   \   000034   8007         SJMP      ??zclKE_ServerHdlSpecificCmd_5
   2611                break;
   2612          
   2613              case ZCL_KE_EPH_DATA_REQ:
   2614                status = zclKE_ServerHdlEphDataReq( &ctxt );
   \                     ??zclKE_ServerHdlSpecificCmd_1:
   \   000036                ; Setup parameters for call to function zclKE_ServerHdlEphDataReq
   \   000036   AA..         MOV       R2,?XSP + 0
   \   000038   AB..         MOV       R3,?XSP + 1
   \   00003A   12....       LCALL     `??zclKE_ServerHdlEphDataReq::?relay`; Banked call to: zclKE_ServerHdlEphDataReq
   \                     ??zclKE_ServerHdlSpecificCmd_5:
   \   00003D   E9           MOV       A,R1
   \   00003E   F9           MOV       R1,A
   2615                break;
   \   00003F   02....       LJMP      ??zclKE_ServerHdlSpecificCmd_6 & 0xFFFF
   2616          
   2617              case ZCL_KE_CFM_KEY_DATA_REQ:
   2618                status = zclKE_ServerHdlCfmKeyDataReq( &ctxt );
   \                     ??zclKE_ServerHdlSpecificCmd_2:
   \   000042   7401         MOV       A,#0x1
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00004A   12....       LCALL     ?XSTACK_DISP0_8
   \   00004D   12....       LCALL     ??Subroutine162_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000050   6047         JZ        ??zclKE_ServerHdlSpecificCmd_7
   \   000052   7401         MOV       A,#0x1
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00005A   C0E0         PUSH      A
   \   00005C   7403         MOV       A,#0x3
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000064   D0E0         POP       A
   \   000066   F0           MOVX      @DPTR,A
   \   000067   7403         MOV       A,#0x3
   \   000069   12....       LCALL     ?XSTACK_DISP0_8
   \   00006C   12....       LCALL     ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   00006F   6404         XRL       A,#0x4
   \   000071   7026         JNZ       ??zclKE_ServerHdlSpecificCmd_7
   \   000073                ; Setup parameters for call to function zclKE_ParseCfmKeyDataCmd
   \   000073   7405         MOV       A,#0x5
   \   000075   12....       LCALL     ?XSTACK_DISP102_8
   \   000078   7401         MOV       A,#0x1
   \   00007A   12....       LCALL     ?XSTACK_DISP0_8
   \   00007D   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000080   7017         JNZ       ??zclKE_ServerHdlSpecificCmd_7
   \   000082                ; Setup parameters for call to function zclKE_ServerProcessCfmKeyDataReq
   \   000082   7405         MOV       A,#0x5
   \   000084   12....       LCALL     ?XSTACK_DISP102_8
   \   000087   AA..         MOV       R2,?XSP + 0
   \   000089   AB..         MOV       R3,?XSP + 1
   \   00008B   12....       LCALL     `??zclKE_ServerProcessCfmKeyDataReq::?relay`; Banked call to: zclKE_ServerProcessCfmKeyDataReq
   \   00008E   85..82       MOV       DPL,?XSP + 0
   \   000091   85..83       MOV       DPH,?XSP + 1
   \   000094   E0           MOVX      A,@DPTR
   \   000095   700B         JNZ       ??zclKE_ServerHdlSpecificCmd_8
   \   000097   8010         SJMP      ??zclKE_ServerHdlSpecificCmd_9
   \                     ??zclKE_ServerHdlSpecificCmd_7:
   \   000099   85..82       MOV       DPL,?XSP + 0
   \   00009C   85..83       MOV       DPH,?XSP + 1
   \   00009F   7403         MOV       A,#0x3
   \   0000A1   F0           MOVX      @DPTR,A
   \                     ??zclKE_ServerHdlSpecificCmd_8:
   \   0000A2                ; Setup parameters for call to function zclKE_ServerConnTerminate
   \   0000A2   AA..         MOV       R2,?XSP + 0
   \   0000A4   AB..         MOV       R3,?XSP + 1
   \   0000A6   12....       LCALL     `??zclKE_ServerConnTerminate::?relay`; Banked call to: zclKE_ServerConnTerminate
   \                     ??zclKE_ServerHdlSpecificCmd_9:
   \   0000A9   79FF         MOV       R1,#-0x1
   2619                break;
   \   0000AB   8033         SJMP      ??zclKE_ServerHdlSpecificCmd_6
   2620          
   2621              case ZCL_KE_TERMINATE_SERVER:
   2622                status = zclKE_ServerHdlTerminate( &ctxt );
   \                     ??zclKE_ServerHdlSpecificCmd_3:
   \   0000AD   7401         MOV       A,#0x1
   \   0000AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B2   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0000B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B8   12....       LCALL     ??Subroutine162_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   0000BB   601D         JZ        ??CrossCallReturnLabel_65
   \   0000BD   7401         MOV       A,#0x1
   \   0000BF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C2   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000C5   C0E0         PUSH      A
   \   0000C7   7403         MOV       A,#0x3
   \   0000C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CC   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000CF   D0E0         POP       A
   \   0000D1   F0           MOVX      @DPTR,A
   \   0000D2                ; Setup parameters for call to function zclKE_ServerConnClose
   \   0000D2   7403         MOV       A,#0x3
   \   0000D4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D7   12....       LCALL     ?Subroutine58 & 0xFFFF
   2623                break;
   2624          
   2625              default:
   2626                status = ZCL_STATUS_FAILURE;
   2627                break;
   2628            }
   \                     ??CrossCallReturnLabel_65:
   \   0000DA   7900         MOV       R1,#0x0
   \   0000DC   8002         SJMP      ??zclKE_ServerHdlSpecificCmd_6
   \                     ??zclKE_ServerHdlSpecificCmd_4:
   \   0000DE   7901         MOV       R1,#0x1
   2629          
   2630            return status;
   \                     ??zclKE_ServerHdlSpecificCmd_6:
   \   0000E0   7407         MOV       A,#0x7
   \   0000E2   02....       LJMP      ??Subroutine184_0 & 0xFFFF
   2631          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   E4           CLR       A
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000006   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   22           RET
   2632          
   2633          /**************************************************************************************************
   2634           * @fn      zclKE_ServerKeyGenMsg
   2635           *
   2636           * @brief   Process server ZCL_KE_KEY_GEN_MSG.
   2637           *
   2638           * @param   pMsg - incoming message to process
   2639           *
   2640           * @return  void
   2641           */
   2642          static void zclKE_ServerKeyGenMsg( zclKE_KeyGenMsg_t *pMsg )
   2643          {
   2644            zclKE_Conn_t *pConn;
   2645          
   2646            // Find the existing connection
   2647            pConn = zclKE_ServerConnFind( pMsg->partnerAddr );
   2648          
   2649            // Check for connection and state
   2650            if ( pConn && ( pConn->state == ZCL_KE_SERVER_CONN_KEY_GEN_QUEUED ) )
   2651            {
   2652              zclKE_ConnCtxt_t ctxt;
   2653          
   2654              ctxt.pInMsg = NULL;
   2655              ctxt.pConn = pConn;
   2656              ctxt.error = 0;
   2657          
   2658              zclKE_ServerProcessKeyGen( &ctxt );
   2659          
   2660              // Check for failure and terminate connection
   2661              if ( ctxt.error )
   2662              {
   2663                zclKE_ServerConnTerminate( &ctxt ); 
   2664              }
   2665            }
   2666          }
   2667          
   2668          /**************************************************************************************************
   2669           * @fn      zclKE_ClientInit
   2670           *
   2671           * @brief   Initialize client side.
   2672           *
   2673           * @param   none
   2674           *
   2675           * @return  void
   2676           */
   2677          static void zclKE_ClientInit( void )
   2678          {
   2679            // Register for Match Descriptor Responses
   2680            ZDO_RegisterForZDOMsg( zclKE_TaskID, Match_Desc_rsp );
   2681          }
   2682          
   2683          /**************************************************************************************************
   2684           * @fn      zclKE_ClientConnAllowed
   2685           *
   2686           * @brief   Check if client connection is allowed.
   2687           *
   2688           * @param   partnerAddr - partner network address
   2689           *
   2690           * @return  uint8 - TRUE if allowed, FALSE if not
   2691           */
   2692          static uint8 zclKE_ClientConnAllowed( uint16 partnerAddr )
   2693          {
   2694            uint8 allowed;
   2695          
   2696            // 1) Client must be ready
   2697            // 2) Only allow client connections when there are no active server connections.
   2698            // 3) Check for maximum client connections(currently just one).
   2699            // 4) Only allow connections to the Trust Center (or from the Trust Center). 
   2700            if ( ( zclKE_State == ZCL_KE_READY                             ) &&
   2701                 ( !zclKE_ServerConnList                                   ) &&
   2702                 ( !zclKE_ClientConnList                                   ) &&
   2703                 ( ( NLME_GetShortAddr() == APSME_TRUSTCENTER_NWKADDR ) ||
   2704                   ( partnerAddr == APSME_TRUSTCENTER_NWKADDR         )    )    )
   2705            {
   2706              allowed = TRUE;
   2707            }
   2708            else
   2709            {
   2710              allowed = FALSE;
   2711            }
   2712          
   2713            return allowed;
   2714          }
   2715          
   2716          /**************************************************************************************************
   2717           * @fn      zclKE_ClientConnCreate
   2718           *
   2719           * @brief   Create a new client connection.
   2720           *
   2721           * @param   taskID - OSAL task ID of requesting task
   2722           * @param   pPartner - partner address
   2723           * @param   transSeqNum - starting transaction sequence number
   2724           * @param   suite - security suite
   2725           *
   2726           * @return  zclKE_Conn_t* - pointer to new connection, NULL if failure
   2727           */
   2728          static zclKE_Conn_t *zclKE_ClientConnCreate( uint8 taskID,
   2729                                                       afAddrType_t *pPartner,
   2730                                                       uint8 transSeqNum,
   2731                                                       uint16 suite )
   2732          {
   2733            zclKE_Conn_t *pConn = NULL;
   2734          
   2735            // Check for legal connections 
   2736            if ( zclKE_ClientConnAllowed( pPartner->addr.shortAddr ) )
   2737            {
   2738              // Add connection
   2739              pConn = osal_mem_alloc( sizeof( zclKE_Conn_t ) );
   2740            
   2741              if ( pConn )
   2742              {
   2743                // Initialize the connnection
   2744                osal_memset( pConn, 0, sizeof( zclKE_Conn_t ) );
   2745                pConn->taskID = taskID;
   2746                pConn->partner = *pPartner;
   2747                pConn->transSeqNum = transSeqNum;
   2748                pConn->suite = suite;
   2749            
   2750                // Currently only one client connection active at a time
   2751                zclKE_ClientConnList = pConn;
   2752              }
   2753            }
   2754          
   2755          #if defined( NWK_AUTO_POLL )
   2756            // If connections, set the poll rate
   2757            if ( zclKE_ClientConnList )
   2758            {
   2759              zclKE_SetPollRate( ZCL_KE_CLIENT_POLL_RATE_BIT );
   2760            }
   2761          #endif
   2762          
   2763            return pConn;
   2764          }
   2765          
   2766          /**************************************************************************************************
   2767           * @fn      zclKE_ClientConnClose
   2768           *
   2769           * @brief   Close an existing client connection.
   2770           *
   2771           * @param   pConn - client connection
   2772           * @param   notifyStatus - notify status of closure
   2773           * @param   pCmd - terminate command
   2774           *
   2775           * @return  void
   2776           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2777          static void zclKE_ClientConnClose( zclKE_Conn_t *pConn, 
   \                     zclKE_ClientConnClose:
   2778                                             uint8 notifyStatus,
   2779                                             zclKE_TerminateCmd_t *pCmd )
   2780          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V2,R1
   2781            zclKE_NotifyStatus( pConn->taskID,
   2782                                pConn->partner.addr.shortAddr,
   2783                                notifyStatus,
   2784                                pCmd );
   \   00000B                ; Setup parameters for call to function zclKE_NotifyStatus
   \   00000B   8C..         MOV       ?V0,R4
   \   00000D   8D..         MOV       ?V1,R5
   \   00000F   78..         MOV       R0,#?V0
   \   000011   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000014   AC..         MOV       R4,?V2
   \   000016   EA           MOV       A,R2
   \   000017   12....       LCALL     ??Subroutine186_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_407:
   \   00001A   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   00001D   8E82         MOV       DPL,R6
   \   00001F   8F83         MOV       DPH,R7
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   12....       LCALL     `??zclKE_NotifyStatus::?relay`; Banked call to: zclKE_NotifyStatus
   \   000026   7402         MOV       A,#0x2
   \   000028   12....       LCALL     ?DEALLOC_XSTACK8
   2785          
   2786            // Release connection memory
   2787            zclKE_ConnRelease( pConn );
   \   00002B                ; Setup parameters for call to function zclKE_ConnRelease
   \   00002B   EE           MOV       A,R6
   \   00002C   FA           MOV       R2,A
   \   00002D   EF           MOV       A,R7
   \   00002E   FB           MOV       R3,A
   \   00002F   12....       LCALL     `??zclKE_ConnRelease::?relay`; Banked call to: zclKE_ConnRelease
   2788          
   2789            // Currently only one client connection
   2790            zclKE_ClientConnList = NULL;    
   \   000032   90....       MOV       DPTR,#zclKE_ClientConnList
   \   000035   E4           CLR       A
   \   000036   F0           MOVX      @DPTR,A
   \   000037   A3           INC       DPTR
   \   000038   F0           MOVX      @DPTR,A
   2791          
   2792          #if defined( NWK_AUTO_POLL )
   2793            // If no connections, restore poll rate
   2794            if ( !zclKE_ClientConnList )
   2795            {
   2796              zclKE_RestorePollRate( ZCL_KE_CLIENT_POLL_RATE_BIT );
   \   000039                ; Setup parameters for call to function zclKE_RestorePollRate
   \   000039   7901         MOV       R1,#0x1
   \   00003B   12....       LCALL     `??zclKE_RestorePollRate::?relay`; Banked call to: zclKE_RestorePollRate
   2797            }
   2798          #endif
   2799          }
   \   00003E                REQUIRE ?Subroutine10
   \   00003E                ; // Fall through to label ?Subroutine10

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   7F03         MOV       R7,#0x3
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   2800          
   2801          /**************************************************************************************************
   2802           * @fn      zclKE_ClientConnFind
   2803           *
   2804           * @brief   Find a client connection by partnerAddr.
   2805           *
   2806           * @param   partnerAddr - partner network address
   2807           *
   2808           * @return  zclKE_Conn_t* - pointer to existing connection, NULL if not found
   2809           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2810          static zclKE_Conn_t *zclKE_ClientConnFind( uint16 partnerAddr )
   \                     zclKE_ClientConnFind:
   2811          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2812            zclKE_Conn_t *pConn;
   2813          
   2814            pConn = zclKE_ClientConnList;
   \   000004   90....       MOV       DPTR,#zclKE_ClientConnList
   \   000007   8003         SJMP      ??CrossCallReturnLabel_153
   2815          
   2816            while ( pConn )
   2817            {
   2818              if ( pConn->partner.addr.shortAddr == partnerAddr )
   2819              {
   2820                break;
   2821              }
   2822          
   2823              pConn = pConn->pNext;
   \                     ??zclKE_ClientConnFind_0:
   \   000009   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   00000C   12....       LCALL     ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   00000F   600A         JZ        ??zclKE_ClientConnFind_1
   \   000011   12....       LCALL     ?Subroutine100 & 0xFFFF
   2824            }
   \                     ??CrossCallReturnLabel_142:
   \   000014   7003         JNZ       ??zclKE_ClientConnFind_2
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   6B           XRL       A,R3
   \                     ??zclKE_ClientConnFind_2:
   \   000019   70EE         JNZ       ??zclKE_ClientConnFind_0
   2825          
   2826            return pConn;
   \                     ??zclKE_ClientConnFind_1:
   \   00001B   02....       LJMP      ?Subroutine8 & 0xFFFF
   2827          }
   2828          
   2829          /**************************************************************************************************
   2830           * @fn      zclKE_ClientConnLookup
   2831           *
   2832           * @brief   Lookup an expected client connection including end point.
   2833           *
   2834           * @param   pPartner - partner address
   2835           *
   2836           * @return  zclKE_Conn_t* - pointer to existing connection, NULL if not found
   2837           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2838          static zclKE_Conn_t *zclKE_ClientConnLookup( afAddrType_t *pPartner )
   \                     zclKE_ClientConnLookup:
   2839          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2840            zclKE_Conn_t *pConn = NULL;
   2841          
   2842            pConn = zclKE_ClientConnFind( pPartner->addr.shortAddr );
   \   000009                ; Setup parameters for call to function zclKE_ClientConnFind
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   12....       LCALL     ?Subroutine54 & 0xFFFF
   2843          
   2844            // Check if connection was found and verify end point
   2845            if ( pConn && ( pConn->partner.endPoint != pPartner->endPoint ) )
   \                     ??CrossCallReturnLabel_56:
   \   000010   6009         JZ        ??zclKE_ClientConnLookup_0
   \   000012   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000015   6004         JZ        ??zclKE_ClientConnLookup_0
   2846            {
   2847              // End points do not match return NULL
   2848              pConn = NULL;
   \   000017   7A00         MOV       R2,#0x0
   \   000019   7B00         MOV       R3,#0x0
   2849            }
   2850          
   2851            return pConn;
   \                     ??zclKE_ClientConnLookup_0:
   \   00001B   02....       LJMP      ??Subroutine185_0 & 0xFFFF
   2852          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL     ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000003   EA           MOV       A,R2
   \   000004   4B           ORL       A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_404:
   \   000003   FB           MOV       R3,A
   \   000004   12....       LCALL     `??zclKE_ClientConnFind::?relay`; Banked call to: zclKE_ClientConnFind
   \   000007   22           RET
   2853          
   2854          /**************************************************************************************************
   2855           * @fn      zclKE_ClientConnOpen
   2856           *
   2857           * @brief   Open a new client connection.
   2858           *
   2859           * @param   taskID - OSAL task ID of requesting task
   2860           * @param   pPartner - partner address
   2861           * @param   transSeqNum - starting transaction sequence number
   2862           * @param   suite - security suite
   2863           * @param   ppConn - reference to output connection pointer
   2864           *
   2865           * @return  uint8 - TRUE if successful, FALSE if not
   2866           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2867          static uint8 zclKE_ClientConnOpen( uint8 taskID,
   \                     zclKE_ClientConnOpen:
   2868                                             afAddrType_t *pPartner,
   2869                                             uint8 transSeqNum,
   2870                                             uint16 suite,
   2871                                             zclKE_Conn_t **ppConn )
   2872          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V3,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   \   000010   8C..         MOV       ?V6,R4
   2873            uint8 success = FALSE;
   \   000012   75..00       MOV       ?V2,#0x0
   \   000015   7420         MOV       A,#0x20
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   12....       LCALL     ?Subroutine118 & 0xFFFF
   2874            uint8 extAddr[Z_EXTADDR_LEN];
   2875            uint8 notifyErr ;
   2876          
   2877            *ppConn = NULL;
   \                     ??CrossCallReturnLabel_295:
   \   00001D   85..82       MOV       DPL,?V4
   \   000020   F583         MOV       DPH,A
   \   000022   E4           CLR       A
   \   000023   F0           MOVX      @DPTR,A
   \   000024   A3           INC       DPTR
   \   000025   F0           MOVX      @DPTR,A
   2878          
   2879            do 
   2880            {
   2881              if ( zclKE_State != ZCL_KE_READY )
   \   000026   90....       MOV       DPTR,#zclKE_State
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   6401         XRL       A,#0x1
   \   00002C   6027         JZ        ??zclKE_ClientConnOpen_0
   2882              {
   2883                // Currently the only error state is no certs
   2884                // if ( zclKE_State == ZCL_KE_NO_CERTS )
   2885                notifyErr = ZCL_KE_NOTIFY_NO_CERTS;
   \   00002E   7C07         MOV       R4,#0x7
   2886                break;
   2887              }
   2888          
   2889              // Make sure connection isn't already open
   2890              if ( zclKE_ClientConnFind( pPartner->addr.shortAddr ) )
   2891              {
   2892                notifyErr = ZCL_KE_NOTIFY_BUSY;
   2893                break;
   2894              }
   2895          
   2896              // Verify partner's extended address
   2897              if ( !AddrMgrExtAddrLookup( pPartner->addr.shortAddr, extAddr ) )
   2898              {
   2899                notifyErr = ZCL_KE_NOTIFY_NO_EXT_ADDR;
   2900                break;
   2901              }
   2902              
   2903              // Check for valid suite
   2904              if ( !( suite & zclKE_SupportedSuites ) )
   2905              {
   2906                notifyErr = ZCL_KE_NOTIFY_BAD_SUITE;
   2907                break;
   2908              }
   2909          
   2910              // Create connection
   2911              *ppConn = zclKE_ClientConnCreate( taskID, pPartner, transSeqNum, suite );
   2912          
   2913              if ( !( *ppConn ) )
   2914              {
   2915                notifyErr = ZCL_KE_NOTIFY_BUSY;
   2916                break;
   2917              }
   2918          
   2919              success = TRUE;
   2920              
   2921            } while ( 0 );
   2922          
   2923            if ( !success )
   2924            {
   2925              zclKE_NotifyStatus( taskID, pPartner->addr.shortAddr, notifyErr, NULL );
   \                     ??zclKE_ClientConnOpen_1:
   \   000030                ; Setup parameters for call to function zclKE_NotifyStatus
   \   000030   E4           CLR       A
   \   000031   F5..         MOV       ?V0,A
   \   000033   F5..         MOV       ?V1,A
   \   000035   78..         MOV       R0,#?V0
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   8E82         MOV       DPL,R6
   \   00003C   8F83         MOV       DPH,R7
   \   00003E   12....       LCALL     ??Subroutine179_0 & 0xFFFF
   2926            }
   \                     ??CrossCallReturnLabel_363:
   \   000041   A9..         MOV       R1,?V3
   \   000043   12....       LCALL     `??zclKE_NotifyStatus::?relay`; Banked call to: zclKE_NotifyStatus
   \   000046   7402         MOV       A,#0x2
   \   000048   12....       LCALL     ?DEALLOC_XSTACK8
   2927          
   2928            return success;
   \                     ??zclKE_ClientConnOpen_2:
   \   00004B   A9..         MOV       R1,?V2
   \   00004D   7408         MOV       A,#0x8
   \   00004F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000052   02....       LJMP      ?Subroutine6 & 0xFFFF
   \                     ??zclKE_ClientConnOpen_0:
   \   000055                ; Setup parameters for call to function zclKE_ClientConnFind
   \   000055   8A82         MOV       DPL,R2
   \   000057   8B83         MOV       DPH,R3
   \   000059   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00005C   6003         JZ        $+5
   \   00005E   02....       LJMP      ??zclKE_ClientConnOpen_3 & 0xFFFF
   \   000061                ; Setup parameters for call to function AddrMgrExtAddrLookup
   \   000061   AC..         MOV       R4,?XSP + 0
   \   000063   AD..         MOV       R5,?XSP + 1
   \   000065   8E82         MOV       DPL,R6
   \   000067   8F83         MOV       DPH,R7
   \   000069   12....       LCALL     ??Subroutine165_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   00006C   7004         JNZ       ??zclKE_ClientConnOpen_4
   \   00006E   7C05         MOV       R4,#0x5
   \   000070   80BE         SJMP      ??zclKE_ClientConnOpen_1
   \                     ??zclKE_ClientConnOpen_4:
   \   000072   741E         MOV       A,#0x1e
   \   000074   12....       LCALL     ?XSTACK_DISP0_8
   \   000077   E0           MOVX      A,@DPTR
   \   000078   F5..         MOV       ?V12,A
   \   00007A   A3           INC       DPTR
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   F5..         MOV       ?V13,A
   \   00007E   90....       MOV       DPTR,#zclKE_SupportedSuites
   \   000081   E0           MOVX      A,@DPTR
   \   000082   55..         ANL       A,?V12
   \   000084   F8           MOV       R0,A
   \   000085   A3           INC       DPTR
   \   000086   E0           MOVX      A,@DPTR
   \   000087   55..         ANL       A,?V13
   \   000089   F9           MOV       R1,A
   \   00008A   E8           MOV       A,R0
   \   00008B   49           ORL       A,R1
   \   00008C   7004         JNZ       ??zclKE_ClientConnOpen_5
   \   00008E   7C06         MOV       R4,#0x6
   \   000090   809E         SJMP      ??zclKE_ClientConnOpen_1
   \                     ??zclKE_ClientConnOpen_5:
   \   000092   75..00       MOV       ?V0,#0x0
   \   000095   75..00       MOV       ?V1,#0x0
   \   000098   8E82         MOV       DPL,R6
   \   00009A   8F83         MOV       DPH,R7
   \   00009C   12....       LCALL     ??Subroutine153_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   00009F   90....       MOV       DPTR,#zclKE_State
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   6401         XRL       A,#0x1
   \   0000A5   7059         JNZ       ??zclKE_ClientConnOpen_6
   \   0000A7   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   0000AA   7054         JNZ       ??zclKE_ClientConnOpen_6
   \   0000AC   90....       MOV       DPTR,#zclKE_ClientConnList
   \   0000AF   12....       LCALL     ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   0000B2   704C         JNZ       ??zclKE_ClientConnOpen_6
   \   0000B4                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000B4   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000B7   EA           MOV       A,R2
   \   0000B8   4B           ORL       A,R3
   \   0000B9   6006         JZ        ??zclKE_ClientConnOpen_7
   \   0000BB   E5..         MOV       A,?V8
   \   0000BD   45..         ORL       A,?V9
   \   0000BF   703F         JNZ       ??zclKE_ClientConnOpen_6
   \                     ??zclKE_ClientConnOpen_7:
   \   0000C1                ; Setup parameters for call to function osal_mem_alloc
   \   0000C1   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   0000C4   603A         JZ        ??zclKE_ClientConnOpen_6
   \   0000C6                ; Setup parameters for call to function osal_memset
   \   0000C6   7C29         MOV       R4,#0x29
   \   0000C8   7D00         MOV       R5,#0x0
   \   0000CA   7900         MOV       R1,#0x0
   \   0000CC   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000CF   85..82       MOV       DPL,?V0
   \   0000D2   85..83       MOV       DPH,?V1
   \   0000D5   E5..         MOV       A,?V3
   \   0000D7   F0           MOVX      @DPTR,A
   \   0000D8   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   0000DB   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   0000DE   85..82       MOV       DPL,?V0
   \   0000E1   85..83       MOV       DPH,?V1
   \   0000E4   A3           INC       DPTR
   \   0000E5   A3           INC       DPTR
   \   0000E6   E5..         MOV       A,?V6
   \   0000E8   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   0000EB   A3           INC       DPTR
   \   0000EC   A3           INC       DPTR
   \   0000ED   E5..         MOV       A,?V12
   \   0000EF   F0           MOVX      @DPTR,A
   \   0000F0   A3           INC       DPTR
   \   0000F1   E5..         MOV       A,?V13
   \   0000F3   F0           MOVX      @DPTR,A
   \   0000F4   90....       MOV       DPTR,#zclKE_ClientConnList
   \   0000F7   E5..         MOV       A,?V0
   \   0000F9   F0           MOVX      @DPTR,A
   \   0000FA   A3           INC       DPTR
   \   0000FB   E5..         MOV       A,?V1
   \   0000FD   F0           MOVX      @DPTR,A
   \   0000FE   8008         SJMP      ??zclKE_ClientConnOpen_8
   \                     ??zclKE_ClientConnOpen_6:
   \   000100   90....       MOV       DPTR,#zclKE_ClientConnList
   \   000103   12....       LCALL     ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   000106   6005         JZ        ??zclKE_ClientConnOpen_9
   \                     ??zclKE_ClientConnOpen_8:
   \   000108                ; Setup parameters for call to function zclKE_SetPollRate
   \   000108   7901         MOV       R1,#0x1
   \   00010A   12....       LCALL     `??zclKE_SetPollRate::?relay`; Banked call to: zclKE_SetPollRate
   \                     ??zclKE_ClientConnOpen_9:
   \   00010D   85..82       MOV       DPL,?V4
   \   000110   85..83       MOV       DPH,?V5
   \   000113   E5..         MOV       A,?V0
   \   000115   F0           MOVX      @DPTR,A
   \   000116   A3           INC       DPTR
   \   000117   E5..         MOV       A,?V1
   \   000119   F0           MOVX      @DPTR,A
   \   00011A   85..82       MOV       DPL,?V4
   \   00011D   85..83       MOV       DPH,?V5
   \   000120   12....       LCALL     ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   000123   7005         JNZ       ??zclKE_ClientConnOpen_10
   \                     ??zclKE_ClientConnOpen_3:
   \   000125   7C04         MOV       R4,#0x4
   \   000127   02....       LJMP      ??zclKE_ClientConnOpen_1 & 0xFFFF
   \                     ??zclKE_ClientConnOpen_10:
   \   00012A   75..01       MOV       ?V2,#0x1
   \   00012D   02....       LJMP      ??zclKE_ClientConnOpen_2 & 0xFFFF
   2929          }
   2930          
   2931          /**************************************************************************************************
   2932           * @fn      zclKE_ClientConnTerminate
   2933           *
   2934           * @brief   Terminate client connection.
   2935           *
   2936           * @param   pCtxt - connection context
   2937           *
   2938           * @return  void
   2939           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2940          static void zclKE_ClientConnTerminate( zclKE_ConnCtxt_t *pCtxt )
   \                     zclKE_ClientConnTerminate:
   2941          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2942            zclKE_TerminateCmd_t cmd;
   2943          
   2944            cmd.status = pCtxt->error;
   \   00000A   12....       LCALL     ?Subroutine34 & 0xFFFF
   2945            cmd.suites = zclKE_SupportedSuites;
   \                     ??CrossCallReturnLabel_29:
   \   00000D   12....       LCALL     ?XSTACK_DISP0_8
   \   000010   12....       LCALL     ?Subroutine75 & 0xFFFF
   2946            cmd.waitTime = 2 * ( ZCL_KE_CLIENT_EPH_DATA_GEN_TIME + ZCL_KE_CLIENT_CFM_KEY_GEN_TIME );
   \                     ??CrossCallReturnLabel_250:
   \   000013   7401         MOV       A,#0x1
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   12....       LCALL     ?Subroutine84 & 0xFFFF
   2947          
   2948            if ( pCtxt->pConn )
   \                     ??CrossCallReturnLabel_114:
   \   00001B   12....       LCALL     ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   00001E   6030         JZ        ??zclKE_ClientConnTerminate_0
   2949            {
   2950              zclKE_SendTerminate( &pCtxt->pConn->partner,
   2951                                   ZCL_KE_TERMINATE_SERVER,
   2952                                   ZCL_FRAME_CLIENT_SERVER_DIR,
   2953                                   pCtxt->pConn->transSeqNum,
   2954                                   &cmd );
   \   000020   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000026   8A82         MOV       DPL,R2
   \   000028   8B83         MOV       DPH,R3
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   FD           MOV       R5,A
   \   00002E   7C00         MOV       R4,#0x0
   \   000030   7903         MOV       R1,#0x3
   \   000032   EA           MOV       A,R2
   \   000033   240F         ADD       A,#0xf
   \   000035   FA           MOV       R2,A
   \   000036   5001         JNC       ??zclKE_ClientConnTerminate_1
   \   000038   0B           INC       R3
   \                     ??zclKE_ClientConnTerminate_1:
   \   000039   12....       LCALL     `??zclKE_SendTerminate::?relay`; Banked call to: zclKE_SendTerminate
   \   00003C   7402         MOV       A,#0x2
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   2955          
   2956              zclKE_ClientConnClose( pCtxt->pConn, ZCL_KE_NOTIFY_TERMINATE_SENT, &cmd ); 
   \   000041                ; Setup parameters for call to function zclKE_ClientConnClose
   \   000041   AC..         MOV       R4,?XSP + 0
   \   000043   AD..         MOV       R5,?XSP + 1
   \   000045   7903         MOV       R1,#0x3
   \   000047   8E82         MOV       DPL,R6
   \   000049   8F83         MOV       DPH,R7
   \   00004B   12....       LCALL     ??Subroutine183_0 & 0xFFFF
   2957            }
   \                     ??CrossCallReturnLabel_388:
   \   00004E   802F         SJMP      ??zclKE_ClientConnTerminate_2
   2958            else if ( pCtxt->pInMsg )
   \                     ??zclKE_ClientConnTerminate_0:
   \   000050   8A82         MOV       DPL,R2
   \   000052   8B83         MOV       DPH,R3
   \   000054   A3           INC       DPTR
   \   000055   12....       LCALL     ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   000058   6025         JZ        ??zclKE_ClientConnTerminate_2
   2959            {
   2960              zclKE_SendTerminate( &pCtxt->pInMsg->msg->srcAddr,
   2961                                   ZCL_KE_TERMINATE_SERVER,
   2962                                   ZCL_FRAME_CLIENT_SERVER_DIR,
   2963                                   pCtxt->pInMsg->hdr.transSeqNum,
   2964                                   &cmd );
   \   00005A   E8           MOV       A,R0
   \   00005B   FA           MOV       R2,A
   \   00005C   E9           MOV       A,R1
   \   00005D   FB           MOV       R3,A
   \   00005E                ; Setup parameters for call to function zclKE_SendTerminate
   \   00005E   A8..         MOV       R0,?XSP + 0
   \   000060   A9..         MOV       R1,?XSP + 1
   \   000062   88..         MOV       ?V0,R0
   \   000064   89..         MOV       ?V1,R1
   \   000066   78..         MOV       R0,#?V0
   \   000068   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006B   8A82         MOV       DPL,R2
   \   00006D   8B83         MOV       DPH,R3
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   E0           MOVX      A,@DPTR
   \   000076   FD           MOV       R5,A
   \   000077   7C00         MOV       R4,#0x0
   \   000079   12....       LCALL     ?Subroutine38 & 0xFFFF
   2965            }
   \                     ??CrossCallReturnLabel_35:
   \   00007C   12....       LCALL     ?DEALLOC_XSTACK8
   2966          }
   \                     ??zclKE_ClientConnTerminate_2:
   \   00007F   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine183_0:
   \   000000   12....       LCALL     ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   000003   12....       LCALL     `??zclKE_ClientConnClose::?relay`; Banked call to: zclKE_ClientConnClose
   \   000006   22           RET
   2967          
   2968          /**************************************************************************************************
   2969           * @fn      zclKE_ClientConnKeyGenTimeout
   2970           *
   2971           * @brief   Timeout triggers send of ZCL_KE_KEY_GEN_MSG(see ZCL_KE_KEY_GEN_STAGES_CLIENT).
   2972           *
   2973           * @param   pConn - connection
   2974           *
   2975           * @return  void
   2976           */
   2977          static void zclKE_ClientConnKeyGenTimeout( zclKE_Conn_t *pConn )
   2978          {
   2979            zclKE_KeyGenMsg_t *pMsg;
   2980          
   2981            // Queue the key generate message
   2982            pMsg = (zclKE_KeyGenMsg_t *) osal_msg_allocate( sizeof( zclKE_KeyGenMsg_t ) );
   2983          
   2984            if (pMsg)
   2985            {
   2986              // Send key generate message
   2987              pMsg->hdr.event = ZCL_KE_KEY_GEN_MSG;
   2988              pMsg->hdr.status = 0;
   2989              pMsg->server = FALSE;
   2990              pMsg->partnerAddr = pConn->partner.addr.shortAddr;
   2991              osal_msg_send( zclKE_TaskID, (uint8 *)pMsg ) ;
   2992          
   2993              // Change state
   2994              pConn->state = ZCL_KE_CLIENT_CONN_KEY_GEN_QUEUED;
   2995            }
   2996            else
   2997            {
   2998              // Terminate the connection
   2999              zclKE_ConnCtxt_t ctxt;
   3000              ctxt.pInMsg = NULL;
   3001              ctxt.pConn = pConn;
   3002              ctxt.error = ZCL_KE_TERMINATE_NO_RESOURCES;
   3003              zclKE_ClientConnTerminate( &ctxt );
   3004            }
   3005          }
   3006          
   3007          /**************************************************************************************************
   3008           * @fn      zclKE_ClientConnTimeout
   3009           *
   3010           * @brief   Client connection timeout.
   3011           *
   3012           * @param   pConn - connection
   3013           *
   3014           * @return  void
   3015           */
   3016          static void zclKE_ClientConnTimeout( zclKE_Conn_t *pConn )
   3017          {
   3018            // Clear timer info
   3019            pConn->timeout = 0;
   3020          
   3021            switch ( pConn->state )
   3022            {
   3023              case ZCL_KE_CLIENT_CONN_KEY_GEN_WAIT:
   3024                zclKE_ClientConnKeyGenTimeout( pConn );
   3025                break;
   3026          
   3027              default:
   3028                zclKE_ClientConnClose( pConn, ZCL_KE_NOTIFY_TIMEOUT, NULL ); 
   3029                break;
   3030            }
   3031          }
   3032          
   3033          /**************************************************************************************************
   3034           * @fn      zclKE_ClientProcessMatchReq
   3035           *
   3036           * @brief   Process request to match an end point for key establishment.
   3037           *
   3038           * @param   pConn - connection
   3039           *
   3040           * @return  uint8 - TRUE if successful, FALSE if not
   3041           */
   3042          static uint8 zclKE_ClientProcessMatchReq( zclKE_Conn_t *pConn )
   3043          {
   3044            ZStatus_t status;
   3045            zAddrType_t dstAddr;
   3046            cId_t cbke = ZCL_CLUSTER_ID_SE_KEY_ESTABLISHMENT;
   3047          
   3048            // Send out a match for the key establishment
   3049            dstAddr.addrMode = Addr16Bit;
   3050            dstAddr.addr.shortAddr = pConn->partner.addr.shortAddr;
   3051          
   3052            status = ZDP_MatchDescReq( &dstAddr, pConn->partner.addr.shortAddr, 
   3053                                       ZCL_SE_PROFILE_ID, 1, &cbke, 0, NULL, FALSE );
   3054          
   3055            if ( status != ZSuccess )
   3056            {
   3057              return FALSE;
   3058            }
   3059          
   3060            // Set state to wait for Match_Desc_rsp
   3061            pConn->state = ZCL_KE_CLIENT_CONN_MATCH_RSP_WAIT;
   3062          
   3063            // Set match timeout
   3064            zclKE_ConnSetTimeout( pConn, ZCL_KE_SUITE_DISCOVERY_TIMEOUT );
   3065          
   3066            return TRUE;
   3067          }
   3068          
   3069          /**************************************************************************************************
   3070           * @fn      zclKE_ClientProcessMatchRsp
   3071           *
   3072           * @brief   Process match of end point for key establishment.
   3073           *
   3074           * @param   pConn - connection
   3075           * @param   ep - end point
   3076           *
   3077           * @return  uint8 - TRUE if successful, FALSE if not
   3078           */
   3079          static uint8 zclKE_ClientProcessMatchRsp( zclKE_Conn_t *pConn, uint8 ep )
   3080          {
   3081          #if defined( ZCL_READ )
   3082            zclKE_ReadCmd_t cmd;
   3083          
   3084            // Save the end point
   3085            pConn->partner.endPoint = ep;
   3086          
   3087            // Read the partner's suite attribute to find out which suites are supported
   3088            cmd.numAttr = 1;
   3089            cmd.attrID[0] = ATTRID_KE_SUITE;
   3090          
   3091            if ( zcl_SendRead( ZCL_KE_ENDPOINT, &pConn->partner,
   3092                               ZCL_CLUSTER_ID_SE_KEY_ESTABLISHMENT, (zclReadCmd_t*)&cmd,
   3093                               ZCL_FRAME_CLIENT_SERVER_DIR, TRUE, pConn->transSeqNum ) != ZSuccess )
   3094            {
   3095              return FALSE; 
   3096            }
   3097          
   3098            // Increment the transaction number
   3099            pConn->transSeqNum++;
   3100          
   3101            // Set state to wait for ZCL_CMD_READ_RSP
   3102            pConn->state = ZCL_KE_CLIENT_CONN_READ_RSP_WAIT;
   3103          
   3104            // Set read response timeout
   3105            zclKE_ConnSetTimeout( pConn, ZCL_KE_SUITE_DISCOVERY_TIMEOUT );
   3106          
   3107            return TRUE;
   3108          #else
   3109            (void)pConn;
   3110            (void)ep;
   3111            return FALSE;
   3112          #endif // ZCL_READ
   3113          }
   3114          
   3115          /**************************************************************************************************
   3116           * @fn      zclKE_ClientProcessStart
   3117           *
   3118           * @brief   Process start request.
   3119           *
   3120           * @param   pCtxt - connection context
   3121           *
   3122           * @return  uint8 - TRUE if successful, FALSE if not
   3123           */
   3124          static uint8 zclKE_ClientProcessStart( zclKE_ConnCtxt_t *pCtxt )
   3125          {
   3126            zclKE_Conn_t *pConn = pCtxt->pConn;
   3127          
   3128            // Generate the ephemeral keys
   3129            if ( !zclKE_GenEphKeys( pCtxt ) )
   3130            {
   3131              // pCtxt->error set in "zclKE_GenKeyBits"
   3132              return FALSE;
   3133            }  
   3134          
   3135            // Send the ZCL_KE_INITIATE_REQ
   3136            if ( zclKE_SendInitiateReq( pConn ) != ZSuccess )
   3137            {
   3138              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   3139              return FALSE;
   3140            }
   3141          
   3142            // Increment the transaction number
   3143            pConn->transSeqNum++;
   3144          
   3145            // Set state to wait for ZCL_KE_INITIATE_RSP
   3146            pConn->state = ZCL_KE_CLIENT_CONN_INIT_RSP_WAIT;
   3147          
   3148            // Set aging timeout
   3149            zclKE_ConnSetTimeout( pConn, pConn->rmtEphDataGenTime * 1000 );
   3150          
   3151            return TRUE;
   3152          }
   3153          
   3154          /**************************************************************************************************
   3155           * @fn      zclKE_ClientProcessInitiateRsp
   3156           *
   3157           * @brief   Process ZCL_KE_INITIATE_RSP.
   3158           *
   3159           * @param   pCtxt - connection context
   3160           * @param   pCmd - command payload
   3161           *
   3162           * @return  void
   3163           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3164          static void zclKE_ClientProcessInitiateRsp( zclKE_ConnCtxt_t *pCtxt,
   \                     zclKE_ClientProcessInitiateRsp:
   3165                                                      zclKE_InitiateCmd_t *pCmd )
   3166          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   3167            if ( zclKE_InitiateRspCheckFields( pCtxt, pCmd ) )
   \   00000D                ; Setup parameters for call to function zclKE_InitiateCmdCheckFields
   \   00000D   12....       LCALL     `??zclKE_InitiateCmdCheckFields::?relay`; Banked call to: zclKE_InitiateCmdCheckFields
   \   000010   E9           MOV       A,R1
   \   000011   7003         JNZ       $+5
   \   000013   02....       LJMP      ??zclKE_ClientProcessInitiateRsp_0 & 0xFFFF
   \   000016   8E82         MOV       DPL,R6
   \   000018   8F83         MOV       DPH,R7
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   12....       LCALL     ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000026   85..82       MOV       DPL,?V2
   \   000029   85..83       MOV       DPH,?V3
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   68           XRL       A,R0
   \   00002E   7003         JNZ       ??zclKE_ClientProcessInitiateRsp_1
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   69           XRL       A,R1
   \                     ??zclKE_ClientProcessInitiateRsp_1:
   \   000033   8E82         MOV       DPL,R6
   \   000035   8F83         MOV       DPH,R7
   \   000037   7060         JNZ       ??zclKE_ClientProcessInitiateRsp_2
   3168            {
   3169              // Finish setting up connection fields
   3170              uint16 len;
   3171              zclKE_Conn_t *pConn = pCtxt->pConn;
   \   000039   12....       LCALL     ?Subroutine52 & 0xFFFF
   3172              pConn->rmtEphDataGenTime = pCmd->ephDataGenTime;
   \                     ??CrossCallReturnLabel_322:
   \   00003C   85..82       MOV       DPL,?V2
   \   00003F   85..83       MOV       DPH,?V3
   \   000042   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000045   12....       LCALL     ?Subroutine82 & 0xFFFF
   3173              pConn->rmtCfmKeyGenTime = pCmd->cfmKeyGenTime;
   \                     ??CrossCallReturnLabel_110:
   \   000048   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00004B   A3           INC       DPTR
   \   00004C   F0           MOVX      @DPTR,A
   3174          
   3175              len = zclKE_GetField( pConn->suite, ZCL_KE_CERT_LEN );
   \   00004D                ; Setup parameters for call to function zclKE_GetField
   \   00004D   7905         MOV       R1,#0x5
   \   00004F   85..82       MOV       DPL,?V0
   \   000052   85..83       MOV       DPH,?V1
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   12....       LCALL     ?Subroutine30 & 0xFFFF
   3176          
   3177              // Copy the remote certificate
   3178              pConn->pRmtCert = osal_mem_alloc( len );
   \                     ??CrossCallReturnLabel_25:
   \   00005D   E5..         MOV       A,?V0
   \   00005F   12....       LCALL     ??Subroutine170_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   000062   35..         ADDC      A,?V1
   \   000064   12....       LCALL     ??Subroutine161_0 & 0xFFFF
   3179          
   3180              if ( !pConn->pRmtCert )
   \                     ??CrossCallReturnLabel_259:
   \   000067   6028         JZ        ??zclKE_ClientProcessInitiateRsp_3
   3181              {
   3182                pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   3183                return;
   3184              }
   3185          
   3186              osal_memcpy( pConn->pRmtCert, pCmd->pIdentity, len );
   \   000069                ; Setup parameters for call to function osal_memcpy
   \   000069   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00006C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00006F   AC..         MOV       R4,?V4
   \   000071   AD..         MOV       R5,?V5
   \   000073   E5..         MOV       A,?V0
   \   000075   2421         ADD       A,#0x21
   \   000077   12....       LCALL     ??Subroutine172_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   00007A   12....       LCALL     ?DEALLOC_XSTACK8
   3187          
   3188              // Send the ZCL_KE_EPH_DATA_REQ command
   3189              if ( zclKE_SendEphDatReq( pCtxt->pConn ) != ZSuccess )
   \   00007D                ; Setup parameters for call to function zclKE_SendEphDataCmd
   \   00007D   7C00         MOV       R4,#0x0
   \   00007F   7901         MOV       R1,#0x1
   \   000081   8E82         MOV       DPL,R6
   \   000083   8F83         MOV       DPH,R7
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   12....       LCALL     ??Subroutine179_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   00008B   12....       LCALL     `??zclKE_SendEphDataCmd::?relay`; Banked call to: zclKE_SendEphDataCmd
   \   00008E   E9           MOV       A,R1
   \   00008F   600D         JZ        ??zclKE_ClientProcessInitiateRsp_4
   3190              {
   3191                pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   \                     ??zclKE_ClientProcessInitiateRsp_3:
   \   000091   8E82         MOV       DPL,R6
   \   000093   8F83         MOV       DPH,R7
   \   000095   7404         MOV       A,#0x4
   \   000097   8002         SJMP      ??zclKE_ClientProcessInitiateRsp_5
   3192                return;
   3193              }
   \                     ??zclKE_ClientProcessInitiateRsp_2:
   \   000099   7405         MOV       A,#0x5
   \                     ??zclKE_ClientProcessInitiateRsp_5:
   \   00009B   F0           MOVX      @DPTR,A
   \   00009C   803D         SJMP      ??zclKE_ClientProcessInitiateRsp_0
   3194          
   3195              // Increment the transaction number
   3196              pConn->transSeqNum++;
   \                     ??zclKE_ClientProcessInitiateRsp_4:
   \   00009E   85..82       MOV       DPL,?V0
   \   0000A1   85..83       MOV       DPH,?V1
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   04           INC       A
   \   0000A8   12....       LCALL     ?Subroutine134 & 0xFFFF
   3197          
   3198              // Update connection state    
   3199              pConn->state = ZCL_KE_CLIENT_CONN_EPH_DATA_RSP_WAIT;
   3200          
   3201              // Set ephemeral data generation timeout
   3202              zclKE_ConnSetTimeout( pConn, pConn->rmtEphDataGenTime * 1000 );
   3203            }
   \                     ??CrossCallReturnLabel_181:
   \   0000AB   7406         MOV       A,#0x6
   \   0000AD   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   F5..         MOV       ?V4,A
   \   0000B3   75..E8       MOV       ?B,#-0x18
   \   0000B6   A4           MUL       AB
   \   0000B7   C5..         XCH       A,?V4
   \   0000B9   A8..         MOV       R0,?B
   \   0000BB   75..03       MOV       ?B,#0x3
   \   0000BE   A4           MUL       AB
   \   0000BF   28           ADD       A,R0
   \   0000C0   F8           MOV       R0,A
   \   0000C1   E4           CLR       A
   \   0000C2   28           ADD       A,R0
   \   0000C3   F5..         MOV       ?V5,A
   \   0000C5   33           RLC       A
   \   0000C6   95E0         SUBB      A,0xE0 /* A   */
   \   0000C8   F5..         MOV       ?V6,A
   \   0000CA   F5..         MOV       ?V7,A
   \   0000CC   78..         MOV       R0,#?V4
   \   0000CE   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   0000D1   AA..         MOV       R2,?V0
   \   0000D3   AB..         MOV       R3,?V1
   \   0000D5   12....       LCALL     ??Subroutine177_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   0000D8   12....       LCALL     ?DEALLOC_XSTACK8
   3204          }
   \                     ??zclKE_ClientProcessInitiateRsp_0:
   \   0000DB                REQUIRE ?Subroutine5
   \   0000DB                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function zclKE_ConnSetTimeout
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   85..82       MOV       DPL,?V0
   \   000006   85..83       MOV       DPH,?V1
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine171_0
   \   000003                ; // Fall through to label ??Subroutine171_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine171_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET
   3205          
   3206          /**************************************************************************************************
   3207           * @fn      zclKE_ClientProcessEphDataRsp
   3208           *
   3209           * @brief   Process ZCL_KE_EPH_DATA_RSP.
   3210           *
   3211           * @param   pCtxt - connection context
   3212           * @param   pCmd - command payload
   3213           *
   3214           * @return  void
   3215           */
   3216          static void zclKE_ClientProcessEphDataRsp( zclKE_ConnCtxt_t *pCtxt,
   3217                                                     zclKE_EphDataCmd_t *pCmd )
   3218          {
   3219            zclKE_Conn_t *pConn = pCtxt->pConn;
   3220            uint16 len;
   3221            
   3222            len = zclKE_GetField( pConn->suite, ZCL_KE_PUBLIC_KEY_LEN );
   3223          
   3224            // Copy the remote ephemeral public key
   3225            pConn->pRmtEPublicKey = osal_mem_alloc( len );
   3226          
   3227            if ( !pConn->pRmtEPublicKey )
   3228            {
   3229              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   3230              return;
   3231            }
   3232          
   3233            osal_memcpy( pConn->pRmtEPublicKey, pCmd->pEphData, len );
   3234          
   3235            /*===============================================================================================
   3236            * ZCL_KE_KEY_GEN_STAGES_CLIENT: 
   3237            *
   3238            * Client key generation is broken into two stages in order to break up the calculation times, 
   3239            * which can starve processing time for other tasks.
   3240            *
   3241            *   Stage 1(current):
   3242            *     - start timer 500ms
   3243            *
   3244            *   Stage 2(next):
   3245            *     - timer expires
   3246            *     - generate keys bits
   3247            *     - derive mac and key data
   3248            *     - generate MACu
   3249            *     - send ZCL_KE_CFM_KEY_DATA_REQ
   3250            *
   3251            ===============================================================================================*/
   3252          
   3253            // Set state to wait for key generation
   3254            pConn->state = ZCL_KE_CLIENT_CONN_KEY_GEN_WAIT;
   3255          
   3256            // Set key generation timeout
   3257            zclKE_ConnSetTimeout( pConn, ZCL_KE_KEY_GEN_TIMEOUT );
   3258          }
   3259          
   3260          /**************************************************************************************************
   3261           * @fn      zclKE_ClientProcessKeyGen
   3262           *
   3263           * @brief   Process ZCL_KE_KEY_GEN_MSG.
   3264           *
   3265           * @param   pCtxt - connection context
   3266           *
   3267           * @return  void
   3268           */
   3269          static void zclKE_ClientProcessKeyGen( zclKE_ConnCtxt_t *pCtxt )
   3270          {
   3271            uint8 MAC[ZCL_KE_MAC_LEN];
   3272            zclKE_Conn_t *pConn = pCtxt->pConn;
   3273          
   3274            // Handle server connection key generation stage 2 -- see ZCL_KE_KEY_GEN_STAGES_CLIENT
   3275            if ( !zclKE_GenKeys( pCtxt ) )
   3276            {
   3277              // pCtxt->error set in "zclKE_GenKeys"
   3278              return;
   3279            }
   3280          
   3281            // Calculate MACu
   3282            if ( !zclKE_GenMAC( pConn, TRUE, TRUE, MAC ) )
   3283            {
   3284              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   3285              return;
   3286            }
   3287          
   3288            // Send the ZCL_KE_CFM_KEY_DATA_REQ command
   3289            if ( zclKE_SendCfmKeyDataReq( pConn, MAC ) != ZSuccess )
   3290            {
   3291              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   3292              return;
   3293            }
   3294          
   3295            // Increment the transaction number
   3296            pConn->transSeqNum++;
   3297          
   3298            // Set state to wait for ZCL_KE_CFM_KEY_DATA_RSP
   3299            pConn->state = ZCL_KE_CLIENT_CONN_CFM_KEY_DATA_RSP_WAIT;
   3300          
   3301            // Set aging timeout
   3302            zclKE_ConnSetTimeout( pConn, pConn->rmtCfmKeyGenTime * 1000 );
   3303          }
   3304          
   3305          /**************************************************************************************************
   3306           * @fn      zclKE_ClientProcessCfmKeyDataRsp
   3307           *
   3308           * @brief   Process ZCL_KE_CFM_KEY_DATA_RSP.
   3309           *
   3310           * @param   pCtxt - connection context
   3311           * @param   pCmd - command payload
   3312           *
   3313           * @return  void
   3314           */
   3315          static void zclKE_ClientProcessCfmKeyDataRsp( zclKE_ConnCtxt_t *pCtxt,
   3316                                                        zclKE_CfmKeyDataCmd_t *pCmd )
   3317          {
   3318            uint8 MAC[ZCL_KE_MAC_LEN];
   3319            uint8 partnerExtAddr[Z_EXTADDR_LEN];
   3320            zclKE_Conn_t *pConn = pCtxt->pConn;
   3321          
   3322            // Lookup partner's extended address -- required to add link key
   3323            if ( !AddrMgrExtAddrLookup( pConn->partner.addr.shortAddr, partnerExtAddr ) )
   3324            {
   3325              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   3326              return;
   3327            }
   3328          
   3329            // Calculate MACv
   3330            if ( !zclKE_GenMAC( pConn, TRUE, FALSE, MAC ) )
   3331            {
   3332              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   3333              return;
   3334            }
   3335          
   3336            // Compare MACv values
   3337            if ( osal_memcmp( MAC, pCmd->pMAC, ZCL_KE_MAC_LEN ) != TRUE )
   3338            {
   3339              pCtxt->error = ZCL_KE_TERMINATE_BAD_KEY_CONFIRM;
   3340              return;
   3341            }
   3342          
   3343            // Add the link key
   3344            ZDSecMgrAddLinkKey( pConn->partner.addr.shortAddr,
   3345                                partnerExtAddr,
   3346                                pConn->pKey );
   3347          
   3348            // Done, close connection
   3349            zclKE_ClientConnClose( pConn, ZCL_KE_NOTIFY_SUCCESS,  NULL );
   3350          }
   3351          
   3352          /**************************************************************************************************
   3353           * @fn      zclKE_ClientHdlInitiateRsp
   3354           *
   3355           * @brief   Handle ZCL_KE_INITIATE_RSP.
   3356           *
   3357           * @param   pCtxt - connection context
   3358           *
   3359           * @return  ZStatus_t - status
   3360           */
   3361          static ZStatus_t zclKE_ClientHdlInitiateRsp( zclKE_ConnCtxt_t *pCtxt )
   3362          {
   3363            // Look for an existing connection
   3364            pCtxt->pConn = zclKE_ClientConnLookup( &pCtxt->pInMsg->msg->srcAddr );
   3365          
   3366            if ( pCtxt->pConn )
   3367            {
   3368              if ( pCtxt->pConn->state == ZCL_KE_CLIENT_CONN_INIT_RSP_WAIT )
   3369              {
   3370                zclKE_InitiateCmd_t cmd;
   3371          
   3372                if ( zclKE_ParseInitiateCmd( pCtxt->pInMsg, &cmd ) == ZCL_STATUS_SUCCESS )
   3373                {
   3374                  zclKE_ClientProcessInitiateRsp( pCtxt, &cmd );      
   3375                }
   3376                else
   3377                {
   3378                  pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   3379                }
   3380              }
   3381              else
   3382              {
   3383                pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   3384              }
   3385            }
   3386            else
   3387            {
   3388              pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   3389            }
   3390          
   3391            // Check for error and terminate connection
   3392            if ( pCtxt->error )
   3393            {
   3394              zclKE_ClientConnTerminate( pCtxt ); 
   3395            }
   3396          
   3397            return ZCL_STATUS_CMD_HAS_RSP;
   3398          }
   3399          
   3400          /**************************************************************************************************
   3401           * @fn      zclKE_ClientHdlEphDataRsp
   3402           *
   3403           * @brief   Handle ZCL_KE_EPH_DATA_RSP.
   3404           *
   3405           * @param   pCtxt - connection context
   3406           *
   3407           * @return  ZStatus_t - status
   3408           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3409          static ZStatus_t zclKE_ClientHdlEphDataRsp( zclKE_ConnCtxt_t *pCtxt )
   \                     zclKE_ClientHdlEphDataRsp:
   3410          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine17 & 0xFFFF
   3411            // Look for an existing connection
   3412            pCtxt->pConn = zclKE_ClientConnLookup( &pCtxt->pInMsg->msg->srcAddr );
   3413          
   3414            if ( pCtxt->pConn )
   \                     ??CrossCallReturnLabel_2:
   \   00000D   6059         JZ        ??zclKE_ClientHdlEphDataRsp_0
   3415            {
   3416              if ( pCtxt->pConn->state == ZCL_KE_CLIENT_CONN_EPH_DATA_RSP_WAIT )
   \   00000F   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   000012   6406         XRL       A,#0x6
   \   000014   7052         JNZ       ??zclKE_ClientHdlEphDataRsp_0
   3417              {
   3418                zclKE_EphDataCmd_t cmd;
   3419          
   3420                if ( zclKE_ParseEphDataCmd( pCtxt->pConn->suite, 
   3421                                            pCtxt->pInMsg, 
   3422                                            &cmd ) == ZCL_STATUS_SUCCESS )
   \   000016                ; Setup parameters for call to function zclKE_ParseEphDataCmd
   \   000016   A8..         MOV       R0,?XSP + 0
   \   000018   A9..         MOV       R1,?XSP + 1
   \   00001A   88..         MOV       ?V0,R0
   \   00001C   89..         MOV       ?V1,R1
   \   00001E   78..         MOV       R0,#?V0
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000026   12....       LCALL     ?DEALLOC_XSTACK8
   \   000029   E9           MOV       A,R1
   \   00002A   703C         JNZ       ??zclKE_ClientHdlEphDataRsp_0
   3423                {
   3424                  zclKE_ClientProcessEphDataRsp( pCtxt, &cmd );      
   \   00002C   12....       LCALL     ?Subroutine14 & 0xFFFF
   3425                }
   3426                else
   3427                {
   3428                  pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   3429                }
   3430              }
   3431              else
   3432              {
   3433                pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   3434              }
   3435            }
   \                     ??CrossCallReturnLabel_1:
   \   00002F   7008         JNZ       ??zclKE_ClientHdlEphDataRsp_1
   \   000031   8E82         MOV       DPL,R6
   \   000033   8F83         MOV       DPH,R7
   \   000035   7404         MOV       A,#0x4
   \   000037   8035         SJMP      ??zclKE_ClientHdlEphDataRsp_2
   \                     ??zclKE_ClientHdlEphDataRsp_1:
   \   000039                ; Setup parameters for call to function osal_memcpy
   \   000039   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00003F   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   000042   12....       LCALL     ?DEALLOC_XSTACK8
   \   000045   85..82       MOV       DPL,?V0
   \   000048   85..83       MOV       DPH,?V1
   \   00004B   A3           INC       DPTR
   \   00004C   7407         MOV       A,#0x7
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F                ; Setup parameters for call to function zclKE_ConnSetTimeout
   \   00004F   90....       MOV       DPTR,#__Constant_1f4
   \   000052   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000055   AA..         MOV       R2,?V0
   \   000057   AB..         MOV       R3,?V1
   \   000059   12....       LCALL     ??Subroutine177_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   00005C   12....       LCALL     ?DEALLOC_XSTACK8
   3436            else
   3437            {
   3438              pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   3439            }
   3440          
   3441            // Check for error and terminate connection
   3442            if ( pCtxt->error )
   \   00005F   8E82         MOV       DPL,R6
   \   000061   8F83         MOV       DPH,R7
   \   000063   E0           MOVX      A,@DPTR
   \   000064   7009         JNZ       ??zclKE_ClientHdlEphDataRsp_3
   \   000066   800E         SJMP      ??zclKE_ClientHdlEphDataRsp_4
   \                     ??zclKE_ClientHdlEphDataRsp_0:
   \   000068   8E82         MOV       DPL,R6
   \   00006A   8F83         MOV       DPH,R7
   \   00006C   7403         MOV       A,#0x3
   \                     ??zclKE_ClientHdlEphDataRsp_2:
   \   00006E   F0           MOVX      @DPTR,A
   3443            {
   3444              zclKE_ClientConnTerminate( pCtxt ); 
   \                     ??zclKE_ClientHdlEphDataRsp_3:
   \   00006F                ; Setup parameters for call to function zclKE_ClientConnTerminate
   \   00006F   EE           MOV       A,R6
   \   000070   FA           MOV       R2,A
   \   000071   EF           MOV       A,R7
   \   000072   FB           MOV       R3,A
   \   000073   12....       LCALL     `??zclKE_ClientConnTerminate::?relay`; Banked call to: zclKE_ClientConnTerminate
   3445            }
   3446          
   3447            return ZCL_STATUS_CMD_HAS_RSP;
   \                     ??zclKE_ClientHdlEphDataRsp_4:
   \   000076   02....       LJMP      ?Subroutine7 & 0xFFFF
   3448          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000003   FA           MOV       R2,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   FB           MOV       R3,A
   \   000009   12....       LCALL     `??zclKE_ClientConnLookup::?relay`; Banked call to: zclKE_ClientConnLookup
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   A9..         MOV       R1,?V1
   \   000010   8E82         MOV       DPL,R6
   \   000012   8F83         MOV       DPH,R7
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   12....       LCALL     ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   00001A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007                REQUIRE ??Subroutine174_0
   \   000007                ; // Fall through to label ??Subroutine174_0
   3449          
   3450          /**************************************************************************************************
   3451           * @fn      zclKE_ClientHdlCfmKeyDataRsp
   3452           *
   3453           * @brief   Handle ZCL_KE_CFM_KEY_DATA_RSP.
   3454           *
   3455           * @param   pCtxt - connection context
   3456           *
   3457           * @return  ZStatus_t - status
   3458           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3459          static ZStatus_t zclKE_ClientHdlCfmKeyDataRsp( zclKE_ConnCtxt_t *pCtxt )
   \                     zclKE_ClientHdlCfmKeyDataRsp:
   3460          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 26
   \   000005   74E6         MOV       A,#-0x1a
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine17 & 0xFFFF
   3461            ZStatus_t status;
   3462          
   3463            // Look for an existing connection
   3464            pCtxt->pConn = zclKE_ClientConnLookup( &pCtxt->pInMsg->msg->srcAddr );
   3465          
   3466            if ( pCtxt->pConn )
   \                     ??CrossCallReturnLabel_3:
   \   00000D   7003         JNZ       $+5
   \   00000F   02....       LJMP      ??zclKE_ClientHdlCfmKeyDataRsp_0 & 0xFFFF
   3467            {
   3468              if ( pCtxt->pConn->state == ZCL_KE_CLIENT_CONN_CFM_KEY_DATA_RSP_WAIT )
   \   000012   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_340:
   \   000015   6409         XRL       A,#0x9
   \   000017   6003         JZ        $+5
   \   000019   02....       LJMP      ??zclKE_ClientHdlCfmKeyDataRsp_0 & 0xFFFF
   3469              {
   3470                zclKE_CfmKeyDataCmd_t cmd;
   3471          
   3472                if ( zclKE_ParseCfmKeyDataCmd( pCtxt->pInMsg, &cmd ) == ZCL_STATUS_SUCCESS )
   \   00001C                ; Setup parameters for call to function zclKE_ParseCfmKeyDataCmd
   \   00001C   AC..         MOV       R4,?XSP + 0
   \   00001E   AD..         MOV       R5,?XSP + 1
   \   000020   8E82         MOV       DPL,R6
   \   000022   8F83         MOV       DPH,R7
   \   000024   A3           INC       DPTR
   \   000025   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000028   6003         JZ        $+5
   \   00002A   02....       LJMP      ??zclKE_ClientHdlCfmKeyDataRsp_0 & 0xFFFF
   3473                {
   3474                  zclKE_ClientProcessCfmKeyDataRsp( pCtxt, &cmd );
   \   00002D   8E82         MOV       DPL,R6
   \   00002F   8F83         MOV       DPH,R7
   \   000031   12....       LCALL     ?Subroutine52 & 0xFFFF
   3475                }
   3476                else
   3477                {
   3478                  pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   3479                }
   3480              }
   3481              else
   3482              {
   3483                pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   3484              }
   3485            }
   \                     ??CrossCallReturnLabel_323:
   \   000034                ; Setup parameters for call to function AddrMgrExtAddrLookup
   \   000034   7402         MOV       A,#0x2
   \   000036   12....       LCALL     ?XSTACK_DISP102_8
   \   000039   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_415:
   \   00003C   35..         ADDC      A,?V1
   \   00003E   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000041   607A         JZ        ??zclKE_ClientHdlCfmKeyDataRsp_1
   \   000043                ; Setup parameters for call to function zclKE_GenMAC
   \   000043   740A         MOV       A,#0xa
   \   000045   12....       LCALL     ?XSTACK_DISP100_8
   \   000048   88..         MOV       ?V2,R0
   \   00004A   89..         MOV       ?V3,R1
   \   00004C   78..         MOV       R0,#?V2
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000051   7C00         MOV       R4,#0x0
   \   000053   7901         MOV       R1,#0x1
   \   000055   AA..         MOV       R2,?V0
   \   000057   AB..         MOV       R3,?V1
   \   000059   12....       LCALL     ??Subroutine176_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   00005C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005F   E9           MOV       A,R1
   \   000060   605B         JZ        ??zclKE_ClientHdlCfmKeyDataRsp_1
   \   000062                ; Setup parameters for call to function osal_memcmp
   \   000062   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000068   7C10         MOV       R4,#0x10
   \   00006A   7D00         MOV       R5,#0x0
   \   00006C   740D         MOV       A,#0xd
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   12....       LCALL     ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_440:
   \   000074   12....       LCALL     ?DEALLOC_XSTACK8
   \   000077   E9           MOV       A,R1
   \   000078   6401         XRL       A,#0x1
   \   00007A   6008         JZ        ??zclKE_ClientHdlCfmKeyDataRsp_2
   \   00007C   8E82         MOV       DPL,R6
   \   00007E   8F83         MOV       DPH,R7
   \   000080   7402         MOV       A,#0x2
   \   000082   8047         SJMP      ??zclKE_ClientHdlCfmKeyDataRsp_3
   \                     ??zclKE_ClientHdlCfmKeyDataRsp_2:
   \   000084                ; Setup parameters for call to function ZDSecMgrAddLinkKey
   \   000084   E5..         MOV       A,?V0
   \   000086   2423         ADD       A,#0x23
   \   000088   F582         MOV       DPL,A
   \   00008A   E4           CLR       A
   \   00008B   35..         ADDC      A,?V1
   \   00008D   F583         MOV       DPH,A
   \   00008F   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000092   7404         MOV       A,#0x4
   \   000094   12....       LCALL     ?XSTACK_DISP102_8
   \   000097   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_416:
   \   00009A   35..         ADDC      A,?V1
   \   00009C   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00009F   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A2                ; Setup parameters for call to function zclKE_ClientConnClose
   \   0000A2   7C00         MOV       R4,#0x0
   \   0000A4   7D00         MOV       R5,#0x0
   \   0000A6   7900         MOV       R1,#0x0
   \   0000A8   AA..         MOV       R2,?V0
   \   0000AA   AB..         MOV       R3,?V1
   \   0000AC   12....       LCALL     `??zclKE_ClientConnClose::?relay`; Banked call to: zclKE_ClientConnClose
   3486            else
   3487            {
   3488              pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   3489            }
   3490          
   3491            // Check for error
   3492            if ( pCtxt->error )
   \   0000AF   8E82         MOV       DPL,R6
   \   0000B1   8F83         MOV       DPH,R7
   \   0000B3   E0           MOVX      A,@DPTR
   \   0000B4   7016         JNZ       ??zclKE_ClientHdlCfmKeyDataRsp_4
   3493            {
   3494              // Terminate connection
   3495              zclKE_ClientConnTerminate( pCtxt );
   3496          
   3497              // Failure -- ZCL_KE_TERMINATE_SERVER sent
   3498              status = ZCL_STATUS_CMD_HAS_RSP;
   3499            }
   3500            else
   3501            {
   3502              // Success -- no other response
   3503              status = ZCL_STATUS_SUCCESS;
   \   0000B6   7900         MOV       R1,#0x0
   3504            }
   3505          
   3506            return status;
   \                     ??zclKE_ClientHdlCfmKeyDataRsp_5:
   \   0000B8   741A         MOV       A,#0x1a
   \   0000BA   02....       LJMP      ??Subroutine166_0 & 0xFFFF
   \                     ??zclKE_ClientHdlCfmKeyDataRsp_1:
   \   0000BD   8E82         MOV       DPL,R6
   \   0000BF   8F83         MOV       DPH,R7
   \   0000C1   7404         MOV       A,#0x4
   \   0000C3   8006         SJMP      ??zclKE_ClientHdlCfmKeyDataRsp_3
   \                     ??zclKE_ClientHdlCfmKeyDataRsp_0:
   \   0000C5   8E82         MOV       DPL,R6
   \   0000C7   8F83         MOV       DPH,R7
   \   0000C9   7403         MOV       A,#0x3
   \                     ??zclKE_ClientHdlCfmKeyDataRsp_3:
   \   0000CB   F0           MOVX      @DPTR,A
   \                     ??zclKE_ClientHdlCfmKeyDataRsp_4:
   \   0000CC                ; Setup parameters for call to function zclKE_ClientConnTerminate
   \   0000CC   EE           MOV       A,R6
   \   0000CD   FA           MOV       R2,A
   \   0000CE   EF           MOV       A,R7
   \   0000CF   FB           MOV       R3,A
   \   0000D0   12....       LCALL     `??zclKE_ClientConnTerminate::?relay`; Banked call to: zclKE_ClientConnTerminate
   \   0000D3   79FF         MOV       R1,#-0x1
   \   0000D5   80E1         SJMP      ??zclKE_ClientHdlCfmKeyDataRsp_5
   3507          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL     ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_393:
   \   000003   12....       LCALL     `??zclKE_ParseCfmKeyDataCmd::?relay`; Banked call to: zclKE_ParseCfmKeyDataCmd
   \   000006   E9           MOV       A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   E5..         MOV       A,?V0
   \   000002                REQUIRE ??Subroutine187_0
   \   000002                ; // Fall through to label ??Subroutine187_0
   3508          
   3509          /**************************************************************************************************
   3510           * @fn      zclKE_ClientHdlTerminate
   3511           *
   3512           * @brief   Handle ZCL_KE_TERMINATE_CLIENT.
   3513           *
   3514           * @param   pCtxt - connection context
   3515           *
   3516           * @return  ZStatus_t - status
   3517           */
   3518          static ZStatus_t zclKE_ClientHdlTerminate( zclKE_ConnCtxt_t *pCtxt )
   3519          {
   3520            // Look for an existing connection
   3521            pCtxt->pConn = zclKE_ClientConnLookup( &pCtxt->pInMsg->msg->srcAddr );
   3522          
   3523            if ( pCtxt->pConn )
   3524            {
   3525              zclKE_TerminateCmd_t cmd = {0};
   3526          
   3527              zclKE_ParseTerminateCmd( pCtxt->pInMsg, &cmd );
   3528          
   3529              zclKE_ClientConnClose( pCtxt->pConn, ZCL_KE_NOTIFY_TERMINATE_RCVD, &cmd );
   3530            }
   3531          
   3532            return ZCL_STATUS_SUCCESS;
   3533          }
   3534          
   3535          /**************************************************************************************************
   3536           * @fn      zclKE_ClientHdlSpecificCmd
   3537           *
   3538           * @brief   Client ZCL specific command handler.
   3539           *
   3540           * @param   pInMsg - incoming message to process
   3541           *
   3542           * @return  ZStatus_t - status
   3543           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3544          static ZStatus_t zclKE_ClientHdlSpecificCmd( zclIncoming_t *pInMsg )
   \                     zclKE_ClientHdlSpecificCmd:
   3545          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV       A,#-0xf
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3546            ZStatus_t status;
   3547            zclKE_ConnCtxt_t ctxt;
   3548          
   3549            // Initialize connection context
   3550            ctxt.pInMsg = pInMsg;
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   3551            ctxt.pConn = NULL;
   \   000014   7403         MOV       A,#0x3
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ?Subroutine68 & 0xFFFF
   3552            ctxt.error = 0;
   3553          
   3554            // Process the command
   3555            switch ( pInMsg->hdr.commandID )
   \                     ??CrossCallReturnLabel_81:
   \   00001C   600C         JZ        ??zclKE_ClientHdlSpecificCmd_0
   \   00001E   14           DEC       A
   \   00001F   6060         JZ        ??zclKE_ClientHdlSpecificCmd_1
   \   000021   14           DEC       A
   \   000022   6066         JZ        ??zclKE_ClientHdlSpecificCmd_2
   \   000024   14           DEC       A
   \   000025   606E         JZ        ??zclKE_ClientHdlSpecificCmd_3
   \   000027   02....       LJMP      ??zclKE_ClientHdlSpecificCmd_4 & 0xFFFF
   3556            {
   3557              case ZCL_KE_INITIATE_RSP:
   3558                status = zclKE_ClientHdlInitiateRsp( &ctxt );
   \                     ??zclKE_ClientHdlSpecificCmd_0:
   \   00002A   7401         MOV       A,#0x1
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000032   12....       LCALL     ?XSTACK_DISP0_8
   \   000035   12....       LCALL     ??Subroutine162_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   000038   6032         JZ        ??zclKE_ClientHdlSpecificCmd_5
   \   00003A   7403         MOV       A,#0x3
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   12....       LCALL     ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   000042   6405         XRL       A,#0x5
   \   000044   7026         JNZ       ??zclKE_ClientHdlSpecificCmd_5
   \   000046                ; Setup parameters for call to function zclKE_ParseInitiateCmd
   \   000046   7409         MOV       A,#0x9
   \   000048   12....       LCALL     ?XSTACK_DISP102_8
   \   00004B   7401         MOV       A,#0x1
   \   00004D   12....       LCALL     ?XSTACK_DISP0_8
   \   000050   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000053   7017         JNZ       ??zclKE_ClientHdlSpecificCmd_5
   \   000055                ; Setup parameters for call to function zclKE_ClientProcessInitiateRsp
   \   000055   7409         MOV       A,#0x9
   \   000057   12....       LCALL     ?XSTACK_DISP102_8
   \   00005A   AA..         MOV       R2,?XSP + 0
   \   00005C   AB..         MOV       R3,?XSP + 1
   \   00005E   12....       LCALL     `??zclKE_ClientProcessInitiateRsp::?relay`; Banked call to: zclKE_ClientProcessInitiateRsp
   \   000061   85..82       MOV       DPL,?XSP + 0
   \   000064   85..83       MOV       DPH,?XSP + 1
   \   000067   E0           MOVX      A,@DPTR
   \   000068   700B         JNZ       ??zclKE_ClientHdlSpecificCmd_6
   \   00006A   8010         SJMP      ??zclKE_ClientHdlSpecificCmd_7
   \                     ??zclKE_ClientHdlSpecificCmd_5:
   \   00006C   85..82       MOV       DPL,?XSP + 0
   \   00006F   85..83       MOV       DPH,?XSP + 1
   \   000072   7403         MOV       A,#0x3
   \   000074   F0           MOVX      @DPTR,A
   \                     ??zclKE_ClientHdlSpecificCmd_6:
   \   000075                ; Setup parameters for call to function zclKE_ClientConnTerminate
   \   000075   AA..         MOV       R2,?XSP + 0
   \   000077   AB..         MOV       R3,?XSP + 1
   \   000079   12....       LCALL     `??zclKE_ClientConnTerminate::?relay`; Banked call to: zclKE_ClientConnTerminate
   \                     ??zclKE_ClientHdlSpecificCmd_7:
   \   00007C   79FF         MOV       R1,#-0x1
   3559                break;
   \   00007E   02....       LJMP      ??zclKE_ClientHdlSpecificCmd_8 & 0xFFFF
   3560          
   3561              case ZCL_KE_EPH_DATA_RSP:
   3562                status = zclKE_ClientHdlEphDataRsp( &ctxt );
   \                     ??zclKE_ClientHdlSpecificCmd_1:
   \   000081                ; Setup parameters for call to function zclKE_ClientHdlEphDataRsp
   \   000081   AA..         MOV       R2,?XSP + 0
   \   000083   AB..         MOV       R3,?XSP + 1
   \   000085   12....       LCALL     `??zclKE_ClientHdlEphDataRsp::?relay`; Banked call to: zclKE_ClientHdlEphDataRsp
   \   000088   8007         SJMP      ??zclKE_ClientHdlSpecificCmd_9
   3563                break;
   3564          
   3565              case ZCL_KE_CFM_KEY_DATA_RSP:
   3566                status = zclKE_ClientHdlCfmKeyDataRsp( &ctxt );
   \                     ??zclKE_ClientHdlSpecificCmd_2:
   \   00008A                ; Setup parameters for call to function zclKE_ClientHdlCfmKeyDataRsp
   \   00008A   AA..         MOV       R2,?XSP + 0
   \   00008C   AB..         MOV       R3,?XSP + 1
   \   00008E   12....       LCALL     `??zclKE_ClientHdlCfmKeyDataRsp::?relay`; Banked call to: zclKE_ClientHdlCfmKeyDataRsp
   \                     ??zclKE_ClientHdlSpecificCmd_9:
   \   000091   E9           MOV       A,R1
   \   000092   F9           MOV       R1,A
   3567                break;
   \   000093   8078         SJMP      ??zclKE_ClientHdlSpecificCmd_8
   3568          
   3569              case ZCL_KE_TERMINATE_CLIENT:
   3570                status = zclKE_ClientHdlTerminate( &ctxt );
   \                     ??zclKE_ClientHdlSpecificCmd_3:
   \   000095   7401         MOV       A,#0x1
   \   000097   12....       LCALL     ?XSTACK_DISP0_8
   \   00009A   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00009D   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A0   12....       LCALL     ??Subroutine162_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   0000A3   6062         JZ        ??CrossCallReturnLabel_389
   \   0000A5   90....       MOV       DPTR,#`?<Constant {0, 0, 0}>`
   \   0000A8   7405         MOV       A,#0x5
   \   0000AA   12....       LCALL     ?XSTACK_DISP102_8
   \   0000AD   7404         MOV       A,#0x4
   \   0000AF   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   0000B2   04           INC       A
   \   0000B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B6   12....       LCALL     ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   0000B9   E8           MOV       A,R0
   \   0000BA   FA           MOV       R2,A
   \   0000BB   E9           MOV       A,R1
   \   0000BC   FB           MOV       R3,A
   \   0000BD   8882         MOV       DPL,R0
   \   0000BF   F583         MOV       DPH,A
   \   0000C1   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000C4   4032         JC        ??CrossCallReturnLabel_243
   \   0000C6   8882         MOV       DPL,R0
   \   0000C8   8983         MOV       DPH,R1
   \   0000CA   E0           MOVX      A,@DPTR
   \   0000CB   C0E0         PUSH      A
   \   0000CD   7405         MOV       A,#0x5
   \   0000CF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D2   D0E0         POP       A
   \   0000D4   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   0000D7   C0E0         PUSH      A
   \   0000D9   7406         MOV       A,#0x6
   \   0000DB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DE   D0E0         POP       A
   \   0000E0   F0           MOVX      @DPTR,A
   \   0000E1   E8           MOV       A,R0
   \   0000E2   2402         ADD       A,#0x2
   \   0000E4   5001         JNC       ??zclKE_ClientHdlSpecificCmd_10
   \   0000E6   09           INC       R1
   \                     ??zclKE_ClientHdlSpecificCmd_10:
   \   0000E7   F582         MOV       DPL,A
   \   0000E9   8983         MOV       DPH,R1
   \   0000EB   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   0000EE   F9           MOV       R1,A
   \   0000EF   7407         MOV       A,#0x7
   \   0000F1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F4   EA           MOV       A,R2
   \   0000F5   12....       LCALL     ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   0000F8                ; Setup parameters for call to function zclKE_ClientConnClose
   \   0000F8   7405         MOV       A,#0x5
   \   0000FA   12....       LCALL     ?XSTACK_DISP102_8
   \   0000FD   7902         MOV       R1,#0x2
   \   0000FF   7403         MOV       A,#0x3
   \   000101   12....       LCALL     ?XSTACK_DISP0_8
   \   000104   12....       LCALL     ??Subroutine183_0 & 0xFFFF
   3571                break;
   3572          
   3573              // Unknown command
   3574              default:
   3575                status = ZCL_STATUS_FAILURE;
   3576                break;
   3577            }
   \                     ??CrossCallReturnLabel_389:
   \   000107   7900         MOV       R1,#0x0
   \   000109   8002         SJMP      ??zclKE_ClientHdlSpecificCmd_8
   \                     ??zclKE_ClientHdlSpecificCmd_4:
   \   00010B   7901         MOV       R1,#0x1
   3578          
   3579            return status;
   \                     ??zclKE_ClientHdlSpecificCmd_8:
   \   00010D   740F         MOV       A,#0xf
   \   00010F   02....       LJMP      ??Subroutine184_0 & 0xFFFF
   3580          }
   3581          
   3582          /**************************************************************************************************
   3583           * @fn      zclKE_ClientKeyGenMsg
   3584           *
   3585           * @brief   Process client ZCL_KE_KEY_GEN_MSG.
   3586           *
   3587           * @param   pMsg - incoming message to process
   3588           *
   3589           * @return  void
   3590           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3591          static void zclKE_ClientKeyGenMsg( zclKE_KeyGenMsg_t *pMsg )
   \                     zclKE_ClientKeyGenMsg:
   3592          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3593            zclKE_Conn_t *pConn;
   3594          
   3595            // Find the existing connection
   3596            pConn = zclKE_ClientConnFind( pMsg->partnerAddr );
   \   00000A                ; Setup parameters for call to function zclKE_ClientConnFind
   \   00000A   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00000D   8B..         MOV       ?V1,R3
   \   00000F   A9..         MOV       R1,?V1
   3597          
   3598            // Check for connection and state
   3599            if ( pConn && ( pConn->state == ZCL_KE_CLIENT_CONN_KEY_GEN_QUEUED ) )
   \   000011   EA           MOV       A,R2
   \   000012   49           ORL       A,R1
   \   000013   6074         JZ        ??zclKE_ClientKeyGenMsg_0
   \   000015   8A82         MOV       DPL,R2
   \   000017   8B83         MOV       DPH,R3
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   6408         XRL       A,#0x8
   \   00001D   706A         JNZ       ??zclKE_ClientKeyGenMsg_0
   3600            {
   3601              zclKE_ConnCtxt_t ctxt;
   3602          
   3603              ctxt.pInMsg = NULL;
   \   00001F   7401         MOV       A,#0x1
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   12....       LCALL     ?Subroutine80 & 0xFFFF
   3604              ctxt.pConn = pConn;
   \                     ??CrossCallReturnLabel_103:
   \   000027   12....       LCALL     ?XSTACK_DISP0_8
   \   00002A   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000033   6044         JZ        ??zclKE_ClientKeyGenMsg_1
   \   000035                ; Setup parameters for call to function zclKE_GenMAC
   \   000035   7405         MOV       A,#0x5
   \   000037   12....       LCALL     ?XSTACK_DISP100_8
   \   00003A   88..         MOV       ?V0,R0
   \   00003C   89..         MOV       ?V1,R1
   \   00003E   78..         MOV       R0,#?V0
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000043   7C01         MOV       R4,#0x1
   \   000045   7901         MOV       R1,#0x1
   \   000047   12....       LCALL     ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   00004A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004D   E9           MOV       A,R1
   \   00004E   603E         JZ        ??zclKE_ClientKeyGenMsg_2
   \   000050                ; Setup parameters for call to function zclKE_SendCfmKeyDataCmd
   \   000050   78..         MOV       R0,#?V0
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000055   7C00         MOV       R4,#0x0
   \   000057   7902         MOV       R1,#0x2
   \   000059   EE           MOV       A,R6
   \   00005A   FA           MOV       R2,A
   \   00005B   EF           MOV       A,R7
   \   00005C   FB           MOV       R3,A
   \   00005D   12....       LCALL     `??zclKE_SendCfmKeyDataCmd::?relay`; Banked call to: zclKE_SendCfmKeyDataCmd
   \   000060   7402         MOV       A,#0x2
   \   000062   12....       LCALL     ?DEALLOC_XSTACK8
   \   000065   E9           MOV       A,R1
   \   000066   7026         JNZ       ??zclKE_ClientKeyGenMsg_2
   \   000068   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00006B   7409         MOV       A,#0x9
   \   00006D   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_358:
   \   000070   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000073   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   000076   12....       LCALL     ?DEALLOC_XSTACK8
   3605              ctxt.error = 0;
   3606          
   3607              zclKE_ClientProcessKeyGen( &ctxt );
   3608          
   3609              // Check for failure and terminate connection
   3610              if ( ctxt.error )
   \                     ??zclKE_ClientKeyGenMsg_1:
   \   000079   85..82       MOV       DPL,?XSP + 0
   \   00007C   85..83       MOV       DPH,?XSP + 1
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   6007         JZ        ??zclKE_ClientKeyGenMsg_0
   3611              {
   3612                zclKE_ClientConnTerminate( &ctxt ); 
   \                     ??zclKE_ClientKeyGenMsg_3:
   \   000082                ; Setup parameters for call to function zclKE_ClientConnTerminate
   \   000082   AA..         MOV       R2,?XSP + 0
   \   000084   AB..         MOV       R3,?XSP + 1
   \   000086   12....       LCALL     `??zclKE_ClientConnTerminate::?relay`; Banked call to: zclKE_ClientConnTerminate
   3613              }
   3614            }
   3615          }
   \                     ??zclKE_ClientKeyGenMsg_0:
   \   000089   7415         MOV       A,#0x15
   \   00008B   02....       LJMP      ?Subroutine11 & 0xFFFF
   \                     ??zclKE_ClientKeyGenMsg_2:
   \   00008E   85..82       MOV       DPL,?XSP + 0
   \   000091   85..83       MOV       DPH,?XSP + 1
   \   000094   7404         MOV       A,#0x4
   \   000096   F0           MOVX      @DPTR,A
   \   000097   80E9         SJMP      ??zclKE_ClientKeyGenMsg_3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   E4           CLR       A
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   F0           MOVX      @DPTR,A
   \   000004   7403         MOV       A,#0x3
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
   \   000009   7403         MOV       A,#0x3
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   12....       LCALL     ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000009   22           RET
   3616          
   3617          #if defined( ZCL_READ )
   3618          /**************************************************************************************************
   3619           * @fn      zclKE_ClientReadRspCmd
   3620           *
   3621           * @brief   ZCL_CMD_READ_RSP handler.
   3622           *
   3623           * @param   pPartner - partner address
   3624           * @param   clusterID - cluster ID of read
   3625           * @param   pCmd - zclReadRspCmd_t
   3626           *
   3627           * @return  void
   3628           */
   3629          static void zclKE_ClientReadRspCmd( afAddrType_t *pPartner, uint16 clusterID, 
   3630                                              zclReadRspCmd_t *pCmd  )
   3631          {
   3632            zclKE_Conn_t *pConn;
   3633            uint16 suites;
   3634            uint16 selected;
   3635            uint8 *pBuf;
   3636          
   3637            // Find the existing connection
   3638            pConn = zclKE_ClientConnFind( pPartner->addr.shortAddr );
   3639          
   3640            // Check for valid connection and state
   3641            if ( ( pConn                                            ) && 
   3642                 ( pConn->partner.endPoint == pPartner->endPoint    ) &&
   3643                 ( pConn->state == ZCL_KE_CLIENT_CONN_READ_RSP_WAIT )    )
   3644            {
   3645              // Check for valid ATTRID_KE_SUITE attribute
   3646              if ( ( clusterID == ZCL_CLUSTER_ID_SE_KEY_ESTABLISHMENT  ) &&
   3647                   ( pCmd->numAttr == 1                                ) &&
   3648                   ( pCmd->attrList[0].attrID == ATTRID_KE_SUITE       ) &&
   3649                   ( pCmd->attrList[0].status == ZCL_STATUS_SUCCESS    ) &&
   3650                   ( pCmd->attrList[0].dataType == ZCL_DATATYPE_ENUM16 )    )
   3651              {
   3652                pBuf = pCmd->attrList[0].data;
   3653          
   3654                // Get the supported suites
   3655                suites = BUILD_UINT16( pBuf[0], pBuf[1] );
   3656              }
   3657              else
   3658              {
   3659                // Invalid attribute -- just try using device's lowest supported suite
   3660                if ( zclKE_SupportedSuites & ZCL_KE_SUITE_1 )
   3661                {
   3662                  suites = ZCL_KE_SUITE_1;
   3663                }
   3664                else // if ( suites & ZCL_KE_SUITE_2 )
   3665                {
   3666                  suites = ZCL_KE_SUITE_2;
   3667                }
   3668              } 
   3669          
   3670              // Select highest supported suite
   3671              if ( ( suites & ZCL_KE_SUITE_2                ) &&
   3672                   ( zclKE_SupportedSuites & ZCL_KE_SUITE_2 )    )
   3673              {
   3674                selected = ZCL_KE_SUITE_2;
   3675              }
   3676              else if ( ( suites & ZCL_KE_SUITE_1                ) &&
   3677                        ( zclKE_SupportedSuites & ZCL_KE_SUITE_1 )    )
   3678              {
   3679                selected = ZCL_KE_SUITE_1;
   3680              }
   3681              else
   3682              {
   3683                selected = 0;
   3684              }
   3685          
   3686              // Check if suite selected
   3687              if ( selected )
   3688              {
   3689                zclKE_ConnCtxt_t ctxt = {0, NULL, pConn};
   3690          
   3691                pConn->suite = selected;
   3692          
   3693                // Start key establishment process
   3694                if ( !zclKE_ClientProcessStart( &ctxt ) )
   3695                {  
   3696                  // Only possible error condition would be limited resources so return busy
   3697                  // (ctxt.error == ZCL_KE_TERMINATE_NO_RESOURCES)
   3698                  zclKE_ClientConnClose( pConn, ZCL_KE_NOTIFY_BUSY, NULL );
   3699                }
   3700              }
   3701              else
   3702              {
   3703                zclKE_ClientConnClose( pConn, ZCL_KE_NOTIFY_NO_SUITE_MATCH, NULL ); 
   3704              }
   3705            }
   3706          }
   3707          #endif // ZCL_READ
   3708          
   3709          /**************************************************************************************************
   3710           * @fn      zclKE_HdlSpecificCmd
   3711           *
   3712           * @brief   ZCL specific command handler.
   3713           *
   3714           * @param   pInMsg - incoming message to process
   3715           *
   3716           * @return  ZStatus_t - status
   3717           */
   3718          static ZStatus_t zclKE_HdlSpecificCmd( zclIncoming_t *pInMsg )
   3719          {
   3720            ZStatus_t status;
   3721          
   3722            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   3723            {
   3724              // Process Client-to-Server Commands
   3725              status = zclKE_ServerHdlSpecificCmd( pInMsg );
   3726            }
   3727            else
   3728            {
   3729              // Process Server-to-Client Commands
   3730              status = zclKE_ClientHdlSpecificCmd( pInMsg );
   3731            }
   3732          
   3733            return status;
   3734          }
   3735          
   3736          /**************************************************************************************************
   3737           * @fn      zclKE_HdlIncoming
   3738           *
   3739           * @brief   Callback from ZCL to process incoming cluster specific commands
   3740           *          for this cluster library.
   3741           *
   3742           * @param   pInMsg - incoming message to process
   3743           *
   3744           * @return  ZStatus_t - status
   3745           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3746          static ZStatus_t zclKE_HdlIncoming( zclIncoming_t *pInMsg )
   \                     zclKE_HdlIncoming:
   3747          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   3748            ZStatus_t status = ZCL_STATUS_SUCCESS;
   3749          
   3750          #if defined ( INTER_PAN )
   3751            if ( StubAPS_InterPan( pInMsg->msg->srcAddr.panId, pInMsg->msg->srcAddr.endPoint ) )
   \   000009   8A82         MOV       DPL,R2
   \   00000B   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_368:
   \   00000E                ; Setup parameters for call to function StubAPS_InterPan
   \   00000E   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000011   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000014   12....       LCALL     ??Subroutine179_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_365:
   \   000017   12....       LCALL     `??StubAPS_InterPan::?relay`; Banked call to: StubAPS_InterPan
   \   00001A   E9           MOV       A,R1
   \   00001B   6004         JZ        ??zclKE_HdlIncoming_0
   3752            {
   3753              return status; // Cluster not supported thru Inter-PAN
   \   00001D   7900         MOV       R1,#0x0
   \   00001F   802E         SJMP      ??zclKE_HdlIncoming_1
   3754            }
   3755          #endif
   3756            if ( zcl_ClusterCmd( pInMsg->hdr.fc.type ) )
   \                     ??zclKE_HdlIncoming_0:
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   5407         ANL       A,#0x7
   \   00002A   6401         XRL       A,#0x1
   \   00002C   701F         JNZ       ??zclKE_HdlIncoming_2
   3757            {
   3758              // Check for manufacturer specific command
   3759              if ( pInMsg->hdr.fc.manuSpecific == 0 )
   3760              {
   3761                status = zclKE_HdlSpecificCmd( pInMsg );
   \   00002E   8E82         MOV       DPL,R6
   \   000030   8F83         MOV       DPH,R7
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   5408         ANL       A,#0x8
   \   000037   7009         JNZ       ??zclKE_HdlIncoming_3
   \   000039                ; Setup parameters for call to function zclKE_ServerHdlSpecificCmd
   \   000039   EE           MOV       A,R6
   \   00003A   FA           MOV       R2,A
   \   00003B   EF           MOV       A,R7
   \   00003C   FB           MOV       R3,A
   \   00003D   12....       LCALL     `??zclKE_ServerHdlSpecificCmd::?relay`; Banked call to: zclKE_ServerHdlSpecificCmd
   \   000040   8007         SJMP      ??zclKE_HdlIncoming_4
   \                     ??zclKE_HdlIncoming_3:
   \   000042                ; Setup parameters for call to function zclKE_ClientHdlSpecificCmd
   \   000042   EE           MOV       A,R6
   \   000043   FA           MOV       R2,A
   \   000044   EF           MOV       A,R7
   \   000045   FB           MOV       R3,A
   \   000046   12....       LCALL     `??zclKE_ClientHdlSpecificCmd::?relay`; Banked call to: zclKE_ClientHdlSpecificCmd
   \                     ??zclKE_HdlIncoming_4:
   \   000049   E9           MOV       A,R1
   3762              }
   3763              else
   3764              {
   3765                // Manufacturer specific command not handled
   3766                status = ZCL_STATUS_FAILURE;
   3767              }
   3768            }
   \   00004A   F9           MOV       R1,A
   \   00004B   8002         SJMP      ??zclKE_HdlIncoming_1
   3769            else
   3770            {
   3771              // Should never get here
   3772              status = ZCL_STATUS_FAILURE;
   \                     ??zclKE_HdlIncoming_2:
   \   00004D   7901         MOV       R1,#0x1
   3773            }
   3774          
   3775            return status;
   \                     ??zclKE_HdlIncoming_1:
   \   00004F   02....       LJMP      ?Subroutine0 & 0xFFFF
   3776          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   EA           MOV       A,R2
   \   000001   12....       LCALL     ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_414:
   \   000004   3B           ADDC      A,R3
   \   000005   F583         MOV       DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   EA           MOV       A,R2
   \   000003   2410         ADD       A,#0x10
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   3B           ADDC      A,R3
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET
   3777          
   3778          /**************************************************************************************************
   3779           * @fn      zclKE_ProcessKeyGenMsg
   3780           *
   3781           * @brief   Process ZCL_KE_KEY_GEN_MSG.
   3782           *
   3783           * @param   pMsg - incoming message to process
   3784           *
   3785           * @return  void
   3786           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000003                REQUIRE ??Subroutine178_0
   \   000003                ; // Fall through to label ??Subroutine178_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3787          static void zclKE_ProcessKeyGenMsg( zclKE_KeyGenMsg_t *pMsg )
   \                     zclKE_ProcessKeyGenMsg:
   3788          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3789            if ( pMsg->server )
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   606F         JZ        ??zclKE_ProcessKeyGenMsg_0
   3790            {
   3791              zclKE_ServerKeyGenMsg( pMsg );
   \   000015                ; Setup parameters for call to function zclKE_ServerConnFind
   \   000015   8A82         MOV       DPL,R2
   \   000017   8B83         MOV       DPH,R3
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   12....       LCALL     ??Subroutine159_0 & 0xFFFF
   3792            }
   \                     ??CrossCallReturnLabel_241:
   \   00001E   8B..         MOV       ?V1,R3
   \   000020   A9..         MOV       R1,?V1
   \   000022   EA           MOV       A,R2
   \   000023   49           ORL       A,R1
   \   000024   6061         JZ        ??zclKE_ProcessKeyGenMsg_1
   \   000026   8A82         MOV       DPL,R2
   \   000028   8B83         MOV       DPH,R3
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   6403         XRL       A,#0x3
   \   00002E   7057         JNZ       ??zclKE_ProcessKeyGenMsg_1
   \   000030   7401         MOV       A,#0x1
   \   000032   12....       LCALL     ?XSTACK_DISP0_8
   \   000035   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000044   602C         JZ        ??zclKE_ProcessKeyGenMsg_2
   \   000046                ; Setup parameters for call to function zclKE_SendEphDataCmd
   \   000046   7C01         MOV       R4,#0x1
   \   000048   7901         MOV       R1,#0x1
   \   00004A   EE           MOV       A,R6
   \   00004B   FA           MOV       R2,A
   \   00004C   EF           MOV       A,R7
   \   00004D   FB           MOV       R3,A
   \   00004E   12....       LCALL     `??zclKE_SendEphDataCmd::?relay`; Banked call to: zclKE_SendEphDataCmd
   \   000051   E9           MOV       A,R1
   \   000052   600B         JZ        ??zclKE_ProcessKeyGenMsg_3
   \   000054   85..82       MOV       DPL,?XSP + 0
   \   000057   85..83       MOV       DPH,?XSP + 1
   \   00005A   7404         MOV       A,#0x4
   \   00005C   F0           MOVX      @DPTR,A
   \   00005D   801C         SJMP      ??zclKE_ProcessKeyGenMsg_4
   \                     ??zclKE_ProcessKeyGenMsg_3:
   \   00005F   8E82         MOV       DPL,R6
   \   000061   8F83         MOV       DPH,R7
   \   000063   A3           INC       DPTR
   \   000064   7404         MOV       A,#0x4
   \   000066   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00006C   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   00006F   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??zclKE_ProcessKeyGenMsg_2:
   \   000072   85..82       MOV       DPL,?XSP + 0
   \   000075   85..83       MOV       DPH,?XSP + 1
   \   000078   E0           MOVX      A,@DPTR
   \   000079   600C         JZ        ??zclKE_ProcessKeyGenMsg_1
   \                     ??zclKE_ProcessKeyGenMsg_4:
   \   00007B                ; Setup parameters for call to function zclKE_ServerConnTerminate
   \   00007B   AA..         MOV       R2,?XSP + 0
   \   00007D   AB..         MOV       R3,?XSP + 1
   \   00007F   12....       LCALL     `??zclKE_ServerConnTerminate::?relay`; Banked call to: zclKE_ServerConnTerminate
   \   000082   8003         SJMP      ??zclKE_ProcessKeyGenMsg_1
   3793            else
   3794            {
   3795              zclKE_ClientKeyGenMsg( pMsg );
   \                     ??zclKE_ProcessKeyGenMsg_0:
   \   000084                ; Setup parameters for call to function zclKE_ClientKeyGenMsg
   \   000084   12....       LCALL     `??zclKE_ClientKeyGenMsg::?relay`; Banked call to: zclKE_ClientKeyGenMsg
   3796            }
   3797          }
   \                     ??zclKE_ProcessKeyGenMsg_1:
   \   000087   7405         MOV       A,#0x5
   \   000089   02....       LJMP      ?Subroutine11 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005                ; Setup parameters for call to function zclKE_GenKeys
   \   000005                ; Setup parameters for call to function zclKE_GenKeys
   \   000005   AA..         MOV       R2,?XSP + 0
   \   000007   AB..         MOV       R3,?XSP + 1
   \   000009   12....       LCALL     `??zclKE_GenKeys::?relay`; Banked call to: zclKE_GenKeys
   \   00000C   E9           MOV       A,R1
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function zclKE_ConnSetTimeout
   \   000001                ; Setup parameters for call to function zclKE_ConnSetTimeout
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   22           RET
   3798          
   3799          /**************************************************************************************************
   3800           * @fn      zclKE_ProcessAFMsgCmd
   3801           *
   3802           * @brief   Process AF_INCOMING_MSG_CMD.
   3803           *
   3804           * @param   pCmd - incoming command to process
   3805           *
   3806           * @return  void
   3807           */
   3808          static void zclKE_ProcessAFMsgCmd( afIncomingMSGPacket_t *pCmd )
   3809          {
   3810          #ifdef ZCL_STANDALONE
   3811            // Forward command to ZCL
   3812            zcl_ProcessMessageMSG( pCmd );
   3813          #endif
   3814            (void)pCmd;
   3815          }
   3816          
   3817          /**************************************************************************************************
   3818           * @fn      zclKE_ProcessZCLMsg
   3819           *
   3820           * @brief   Process ZCL_INCOMING_MSG.
   3821           *
   3822           * @param   pInMsg - incoming message to process
   3823           *
   3824           * @return  void
   3825           */
   3826          static void zclKE_ProcessZCLMsg( zclIncomingMsg_t *pInMsg )
   3827          {
   3828            if ( pInMsg->zclHdr.commandID == ZCL_CMD_READ_RSP )
   3829            {
   3830          #if defined( ZCL_READ )
   3831              zclKE_ClientReadRspCmd( &pInMsg->srcAddr, pInMsg->clusterId, 
   3832                                      (zclReadRspCmd_t *)pInMsg->attrCmd  );
   3833          #endif // ZCL_READ
   3834            }
   3835          
   3836            if ( pInMsg->attrCmd != NULL )
   3837            {
   3838              osal_mem_free( pInMsg->attrCmd );
   3839              pInMsg->attrCmd = NULL;
   3840            }
   3841          }
   3842          
   3843          /**************************************************************************************************
   3844           * @fn      zclKE_ProcessZDOMsg
   3845           *
   3846           * @brief   Process ZDO_CB_MSG.
   3847           *
   3848           * @param   pMsg - incoming message to process
   3849           *
   3850           * @return  void
   3851           */
   3852          static void zclKE_ProcessZDOMsg( zdoIncomingMsg_t *pMsg )
   3853          {
   3854            if ( pMsg->clusterID == Match_Desc_rsp )
   3855            {
   3856              zclKE_Conn_t *pConn;
   3857          
   3858              // Find the existing connection
   3859              pConn = zclKE_ClientConnFind( pMsg->srcAddr.addr.shortAddr );
   3860          
   3861              // Check for connection and state
   3862              if ( pConn && ( pConn->state == ZCL_KE_CLIENT_CONN_MATCH_RSP_WAIT ) )
   3863              {
   3864                ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( pMsg );
   3865          
   3866                if ( pRsp )
   3867                {
   3868                  if ( pRsp->cnt )
   3869                  {
   3870                    // Process the match response 
   3871                    if ( !zclKE_ClientProcessMatchRsp( pConn, pRsp->epList[0] ) )
   3872                    {
   3873                      // Resource failure 
   3874                      zclKE_ClientConnClose( pConn, ZCL_KE_NOTIFY_BUSY, NULL );  
   3875                    } 
   3876                  }
   3877                  else
   3878                  {
   3879                    zclKE_ClientConnClose( pConn, ZCL_KE_NOTIFY_NO_EP_MATCH, NULL );  
   3880                  }
   3881          
   3882                  osal_mem_free( pRsp );
   3883                }
   3884              }
   3885            }
   3886          }
   3887          
   3888          /**************************************************************************************************
   3889           * @fn      zclKE_ProcessTimerEvt
   3890           *
   3891           * @brief   Process timer.
   3892           *
   3893           * @param   none
   3894           *
   3895           * @return  void
   3896           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3897          static void zclKE_ProcessTimerEvt( void )
   \                     zclKE_ProcessTimerEvt:
   3898          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV       A,#-0x7
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3899            uint32 current = osal_GetSystemClock();
   \   00000A                ; Setup parameters for call to function osal_GetSystemClock
   \   00000A   12....       LCALL     `??osal_GetSystemClock::?relay`; Banked call to: osal_GetSystemClock
   \   00000D   8A..         MOV       ?V0,R2
   \   00000F   8B..         MOV       ?V1,R3
   \   000011   8C..         MOV       ?V2,R4
   \   000013   8D..         MOV       ?V3,R5
   3900            uint32 elapsed;
   3901            uint32 nextTimer = 0;
   \   000015   75..00       MOV       ?V4,#0x0
   \   000018   75..00       MOV       ?V5,#0x0
   \   00001B   75..00       MOV       ?V6,#0x0
   \   00001E   75..00       MOV       ?V7,#0x0
   3902            uint32 timeout;
   3903            zclKE_Conn_t *pNext;
   3904            zclKE_Conn_t *pCurr;
   3905          
   3906            // Process server connections
   3907            pCurr = zclKE_ServerConnList;
   \   000021   90....       MOV       DPTR,#zclKE_ServerConnList
   \   000024   8031         SJMP      ??zclKE_ProcessTimerEvt_0
   3908          
   3909            while ( pCurr )
   3910            {
   3911              // Save next connection since current connection may be closed
   3912              pNext = pCurr->pNext;
   3913          
   3914              // Is this connection waiting for a timeout
   3915              if ( pCurr->timeout )
   3916              {
   3917                // Get elapsed time since last timeout
   3918                elapsed = current - pCurr->stamp;
   3919          
   3920                if ( pCurr->timeout <= elapsed )
   3921                {
   3922                  // Handle connection timeout
   3923                  zclKE_ServerConnTimeout( pCurr );
   3924                }
   3925                else
   3926                {
   3927                  // Adjust next timeout
   3928                  timeout = pCurr->timeout - elapsed;
   \                     ??zclKE_ProcessTimerEvt_1:
   \   000026   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000029   12....       LCALL     ?L_MOV_X
   \   00002C   78..         MOV       R0,#?V12
   \   00002E   79..         MOV       R1,#?V8
   \   000030   12....       LCALL     ?L_SUB
   3929          
   3930                  if ( !nextTimer || ( timeout < nextTimer ) )
   \   000033   E5..         MOV       A,?V4
   \   000035   45..         ORL       A,?V5
   \   000037   45..         ORL       A,?V6
   \   000039   45..         ORL       A,?V7
   \   00003B   6009         JZ        ??zclKE_ProcessTimerEvt_2
   \   00003D   78..         MOV       R0,#?V4
   \   00003F   79..         MOV       R1,#?V12
   \   000041   12....       LCALL     ?UL_GT
   \   000044   500C         JNC       ??zclKE_ProcessTimerEvt_3
   3931                  {
   3932                    nextTimer = timeout;
   \                     ??zclKE_ProcessTimerEvt_2:
   \   000046   85....       MOV       ?V4,?V12
   \   000049   85....       MOV       ?V5,?V13
   \   00004C   85....       MOV       ?V6,?V14
   \   00004F   85....       MOV       ?V7,?V15
   3933                  }
   3934                }
   3935              }
   3936          
   3937              // Set next connection to current
   3938              pCurr = pNext;
   \                     ??zclKE_ProcessTimerEvt_3:
   \   000052   7405         MOV       A,#0x5
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \                     ??zclKE_ProcessTimerEvt_0:
   \   000057   12....       LCALL     ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_421:
   \   00005A   EE           MOV       A,R6
   \   00005B   4F           ORL       A,R7
   \   00005C   606B         JZ        ??zclKE_ProcessTimerEvt_4
   \   00005E   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_376:
   \   000061   12....       LCALL     ?XSTACK_DISP0_8
   \   000064   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000067   12....       LCALL     ?XLOAD_R0123
   \   00006A   E8           MOV       A,R0
   \   00006B   49           ORL       A,R1
   \   00006C   4A           ORL       A,R2
   \   00006D   4B           ORL       A,R3
   \   00006E   60E2         JZ        ??zclKE_ProcessTimerEvt_3
   \   000070   85....       MOV       ?V8,?V0
   \   000073   85....       MOV       ?V9,?V1
   \   000076   85....       MOV       ?V10,?V2
   \   000079   85....       MOV       ?V11,?V3
   \   00007C   8E82         MOV       DPL,R6
   \   00007E   8F83         MOV       DPH,R7
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   78..         MOV       R0,#?V8
   \   000089   12....       LCALL     ?L_SUB_X
   \   00008C   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   00008F   12....       LCALL     ?UL_GE_X
   \   000092   EE           MOV       A,R6
   \   000093   5091         JNC       ??zclKE_ProcessTimerEvt_1
   \   000095   12....       LCALL     ?Subroutine73 & 0xFFFF
   3939            }
   \                     ??CrossCallReturnLabel_91:
   \   000098   6402         XRL       A,#0x2
   \   00009A   7024         JNZ       ??zclKE_ProcessTimerEvt_5
   \   00009C                ; Setup parameters for call to function osal_msg_allocate
   \   00009C   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_434:
   \   00009F   600C         JZ        ??zclKE_ProcessTimerEvt_6
   \   0000A1   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   0000A4   04           INC       A
   \   0000A5   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000A8   7403         MOV       A,#0x3
   \   0000AA   F0           MOVX      @DPTR,A
   \   0000AB   80A5         SJMP      ??zclKE_ProcessTimerEvt_3
   \                     ??zclKE_ProcessTimerEvt_6:
   \   0000AD   7401         MOV       A,#0x1
   \   0000AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B2   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   0000B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B8   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0000BB   12....       LCALL     `??zclKE_ServerConnTerminate::?relay`; Banked call to: zclKE_ServerConnTerminate
   \   0000BE   8092         SJMP      ??zclKE_ProcessTimerEvt_3
   \                     ??zclKE_ProcessTimerEvt_5:
   \   0000C0                ; Setup parameters for call to function zclKE_ServerConnClose
   \   0000C0   EE           MOV       A,R6
   \   0000C1   FA           MOV       R2,A
   \   0000C2   EF           MOV       A,R7
   \   0000C3   FB           MOV       R3,A
   \   0000C4   12....       LCALL     `??zclKE_ServerConnClose::?relay`; Banked call to: zclKE_ServerConnClose
   \   0000C7   8089         SJMP      ??zclKE_ProcessTimerEvt_3
   3940          
   3941            // Process client connections
   3942            pCurr = zclKE_ClientConnList;
   \                     ??zclKE_ProcessTimerEvt_4:
   \   0000C9   90....       MOV       DPTR,#zclKE_ClientConnList
   \   0000CC   8031         SJMP      ??zclKE_ProcessTimerEvt_7
   3943          
   3944            while ( pCurr )
   3945            {
   3946              // Save next connection since current connection may be closed
   3947              pNext = pCurr->pNext;
   3948          
   3949              // Is this connection waiting for a timeout
   3950              if ( pCurr->timeout )
   3951              {
   3952                // Get elapsed time since last timeout
   3953                elapsed = current - pCurr->stamp;
   3954          
   3955                if ( pCurr->timeout <= elapsed )
   3956                {
   3957                  // Handle connection timeout
   3958                  zclKE_ClientConnTimeout( pCurr );
   3959                }
   3960                else
   3961                {
   3962                  // Adjust next timeout
   3963                  timeout = pCurr->timeout - elapsed;
   \                     ??zclKE_ProcessTimerEvt_8:
   \   0000CE   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   0000D1   12....       LCALL     ?L_MOV_X
   \   0000D4   78..         MOV       R0,#?V12
   \   0000D6   79..         MOV       R1,#?V8
   \   0000D8   12....       LCALL     ?L_SUB
   3964          
   3965                  if ( !nextTimer || ( timeout < nextTimer ) )
   \   0000DB   E5..         MOV       A,?V4
   \   0000DD   45..         ORL       A,?V5
   \   0000DF   45..         ORL       A,?V6
   \   0000E1   45..         ORL       A,?V7
   \   0000E3   6009         JZ        ??zclKE_ProcessTimerEvt_9
   \   0000E5   78..         MOV       R0,#?V4
   \   0000E7   79..         MOV       R1,#?V12
   \   0000E9   12....       LCALL     ?UL_GT
   \   0000EC   500C         JNC       ??zclKE_ProcessTimerEvt_10
   3966                  {
   3967                    nextTimer = timeout;
   \                     ??zclKE_ProcessTimerEvt_9:
   \   0000EE   85....       MOV       ?V4,?V12
   \   0000F1   85....       MOV       ?V5,?V13
   \   0000F4   85....       MOV       ?V6,?V14
   \   0000F7   85....       MOV       ?V7,?V15
   3968                  }
   3969                }
   3970              }
   3971          
   3972              // Set next connection to current
   3973              pCurr = pNext;
   \                     ??zclKE_ProcessTimerEvt_10:
   \   0000FA   7405         MOV       A,#0x5
   \   0000FC   12....       LCALL     ?XSTACK_DISP0_8
   \                     ??zclKE_ProcessTimerEvt_7:
   \   0000FF   12....       LCALL     ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_422:
   \   000102   EE           MOV       A,R6
   \   000103   4F           ORL       A,R7
   \   000104   6070         JZ        ??zclKE_ProcessTimerEvt_11
   \   000106   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   000109   12....       LCALL     ?XSTACK_DISP0_8
   \   00010C   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00010F   12....       LCALL     ?XLOAD_R0123
   \   000112   E8           MOV       A,R0
   \   000113   49           ORL       A,R1
   \   000114   4A           ORL       A,R2
   \   000115   4B           ORL       A,R3
   \   000116   60E2         JZ        ??zclKE_ProcessTimerEvt_10
   \   000118   85....       MOV       ?V8,?V0
   \   00011B   85....       MOV       ?V9,?V1
   \   00011E   85....       MOV       ?V10,?V2
   \   000121   85....       MOV       ?V11,?V3
   \   000124   8E82         MOV       DPL,R6
   \   000126   8F83         MOV       DPH,R7
   \   000128   A3           INC       DPTR
   \   000129   A3           INC       DPTR
   \   00012A   A3           INC       DPTR
   \   00012B   A3           INC       DPTR
   \   00012C   A3           INC       DPTR
   \   00012D   A3           INC       DPTR
   \   00012E   A3           INC       DPTR
   \   00012F   78..         MOV       R0,#?V8
   \   000131   12....       LCALL     ?L_SUB_X
   \   000134   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000137   12....       LCALL     ?UL_GE_X
   \   00013A   EE           MOV       A,R6
   \   00013B   5091         JNC       ??zclKE_ProcessTimerEvt_8
   \   00013D   12....       LCALL     ?Subroutine73 & 0xFFFF
   3974            }
   \                     ??CrossCallReturnLabel_92:
   \   000140   6407         XRL       A,#0x7
   \   000142   7023         JNZ       ??zclKE_ProcessTimerEvt_12
   \   000144                ; Setup parameters for call to function osal_msg_allocate
   \   000144   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_435:
   \   000147   600B         JZ        ??zclKE_ProcessTimerEvt_13
   \   000149   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00014C   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00014F   7408         MOV       A,#0x8
   \   000151   F0           MOVX      @DPTR,A
   \   000152   80A6         SJMP      ??zclKE_ProcessTimerEvt_10
   \                     ??zclKE_ProcessTimerEvt_13:
   \   000154   7401         MOV       A,#0x1
   \   000156   12....       LCALL     ?XSTACK_DISP0_8
   \   000159   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00015C   12....       LCALL     ?XSTACK_DISP0_8
   \   00015F   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000162   12....       LCALL     `??zclKE_ClientConnTerminate::?relay`; Banked call to: zclKE_ClientConnTerminate
   \   000165   8093         SJMP      ??zclKE_ProcessTimerEvt_10
   \                     ??zclKE_ProcessTimerEvt_12:
   \   000167                ; Setup parameters for call to function zclKE_ClientConnClose
   \   000167   7C00         MOV       R4,#0x0
   \   000169   7D00         MOV       R5,#0x0
   \   00016B   7901         MOV       R1,#0x1
   \   00016D   EE           MOV       A,R6
   \   00016E   FA           MOV       R2,A
   \   00016F   EF           MOV       A,R7
   \   000170   FB           MOV       R3,A
   \   000171   12....       LCALL     `??zclKE_ClientConnClose::?relay`; Banked call to: zclKE_ClientConnClose
   \   000174   8084         SJMP      ??zclKE_ProcessTimerEvt_10
   3975          
   3976            // Start the timer based on the next timeout
   3977            zclKE_StartTimer( nextTimer );
   \                     ??zclKE_ProcessTimerEvt_11:
   \   000176                ; Setup parameters for call to function zclKE_StartTimer
   \   000176   AA..         MOV       R2,?V4
   \   000178   AB..         MOV       R3,?V5
   \   00017A   AC..         MOV       R4,?V6
   \   00017C   AD..         MOV       R5,?V7
   \   00017E   12....       LCALL     `??zclKE_StartTimer::?relay`; Banked call to: zclKE_StartTimer
   3978          }
   \   000181   7407         MOV       A,#0x7
   \   000183   02....       LJMP      ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   12....       LCALL     ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_374:
   \   000003   78..         MOV       R0,#?V8
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_371:
   \   000003   78..         MOV       R0,#?V12
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   7403         MOV       A,#0x3
   \   000006   F0           MOVX      @DPTR,A
   \   000007   A3           INC       DPTR
   \   000008   E4           CLR       A
   \   000009   12....       LCALL     ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   00000C   A3           INC       DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   12....       LCALL     ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   12....       LCALL     ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_370:
   \   000003   E4           CLR       A
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   F0           MOVX      @DPTR,A
   \   000007   A3           INC       DPTR
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   12....       LCALL     ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   EE           MOV       A,R6
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EF           MOV       A,R7
   \   000004   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000007   7404         MOV       A,#0x4
   \   000009   F0           MOVX      @DPTR,A
   \   00000A                ; Setup parameters for call to function zclKE_ServerConnTerminate
   \   00000A                ; Setup parameters for call to function zclKE_ClientConnTerminate
   \   00000A   AA..         MOV       R2,?XSP + 0
   \   00000C   AB..         MOV       R3,?XSP + 1
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   EE           MOV       A,R6
   \   000001   2427         ADD       A,#0x27
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009                REQUIRE ??Subroutine181_0
   \   000009                ; // Fall through to label ??Subroutine181_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine181_0:
   \   000000   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_382:
   \   000003   7405         MOV       A,#0x5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   EE           MOV       A,R6
   \   000002   12....       LCALL     ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_412:
   \   000005   3F           ADDC      A,R7
   \   000006   F583         MOV       DPH,A
   \   000008   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   00000B   E8           MOV       A,R0
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   A3           INC       DPTR
   \   00000E   E9           MOV       A,R1
   \   00000F   12....       LCALL     ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_385:
   \   000012   8E82         MOV       DPL,R6
   \   000014   8F83         MOV       DPH,R7
   \   000016   A3           INC       DPTR
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_msg_send
   \   000001                ; Setup parameters for call to function osal_msg_send
   \   000001                ; Setup parameters for call to function osal_msg_send
   \   000001                REQUIRE ??Subroutine182_0
   \   000001                ; // Fall through to label ??Subroutine182_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine182_0:
   \   000000   90....       MOV       DPTR,#zclKE_TaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   7A05         MOV       R2,#0x5
   \   000002                REQUIRE ??Subroutine191_0
   \   000002                ; // Fall through to label ??Subroutine191_0
   3979          
   3980          /**************************************************************************************************
   3981           * @fn      zclKE_ProcessStartMsg
   3982           *
   3983           * @brief   Start key establishment *WITH* end point discovery and suite selection.
   3984           *
   3985           * @param   pInMsg - incoming message to process
   3986           *
   3987           * @return  void
   3988           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3989          static void zclKE_ProcessStartMsg( zclKE_StartMsg_t *pMsg )
   \                     zclKE_ProcessStartMsg:
   3990          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV       A,#-0x19
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   3991            zclKE_Conn_t *pConn;
   3992            afAddrType_t partner = {0};
   \   00000E   90....       MOV       DPTR,#`?<Constant {{0}}>`
   \   000011   740D         MOV       A,#0xd
   \   000013   12....       LCALL     ?XSTACK_DISP102_8
   \   000016   740C         MOV       A,#0xc
   \   000018   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   3993          
   3994            partner.addr.shortAddr = pMsg->partnerNwkAddr;
   \   00001B   8A82         MOV       DPL,R2
   \   00001D   8B83         MOV       DPH,R3
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   12....       LCALL     ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000025   740D         MOV       A,#0xd
   \   000027   12....       LCALL     ?XSTACK_DISP0_8
   \   00002A   12....       LCALL     ?Subroutine75 & 0xFFFF
   3995            partner.addrMode = afAddr16Bit;
   \                     ??CrossCallReturnLabel_251:
   \   00002D   7415         MOV       A,#0x15
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   12....       LCALL     ?Subroutine77 & 0xFFFF
   3996          
   3997            // Create a new client connection
   3998            if ( zclKE_ClientConnOpen( pMsg->taskID,
   3999                                       &partner,
   4000                                       pMsg->transSeqNum,
   4001                                       zclKE_SupportedSuites, 
   4002                                       &pConn ) )
   \                     ??CrossCallReturnLabel_97:
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   90....       MOV       DPTR,#zclKE_SupportedSuites
   \   00003B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00003E   8A82         MOV       DPL,R2
   \   000040   8B83         MOV       DPH,R3
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   FC           MOV       R4,A
   \   000049   7411         MOV       A,#0x11
   \   00004B   12....       LCALL     ?XSTACK_DISP101_8
   \   00004E   8E82         MOV       DPL,R6
   \   000050   8F83         MOV       DPH,R7
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   F9           MOV       R1,A
   \   000056   12....       LCALL     `??zclKE_ClientConnOpen::?relay`; Banked call to: zclKE_ClientConnOpen
   \   000059   7404         MOV       A,#0x4
   \   00005B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005E   E9           MOV       A,R1
   \   00005F   7003         JNZ       $+5
   \   000061   02....       LJMP      ??zclKE_ProcessStartMsg_0 & 0xFFFF
   4003            {
   4004              if ( !zclKE_ClientProcessMatchReq( pConn ) )
   \   000064   85..82       MOV       DPL,?XSP + 0
   \   000067   85..83       MOV       DPH,?XSP + 1
   \   00006A   12....       LCALL     ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_423:
   \   00006D   7402         MOV       A,#0x2
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   E4           CLR       A
   \   000073   F0           MOVX      @DPTR,A
   \   000074   A3           INC       DPTR
   \   000075   7408         MOV       A,#0x8
   \   000077   F0           MOVX      @DPTR,A
   \   000078   740C         MOV       A,#0xc
   \   00007A   12....       LCALL     ?XSTACK_DISP0_8
   \   00007D   7402         MOV       A,#0x2
   \   00007F   F0           MOVX      @DPTR,A
   \   000080   EE           MOV       A,R6
   \   000081   240F         ADD       A,#0xf
   \   000083   F8           MOV       R0,A
   \   000084   E4           CLR       A
   \   000085   3F           ADDC      A,R7
   \   000086   F9           MOV       R1,A
   \   000087   E8           MOV       A,R0
   \   000088   FA           MOV       R2,A
   \   000089   E9           MOV       A,R1
   \   00008A   FB           MOV       R3,A
   \   00008B   8882         MOV       DPL,R0
   \   00008D   12....       LCALL     ??Subroutine163_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000090   7404         MOV       A,#0x4
   \   000092   12....       LCALL     ?XSTACK_DISP0_8
   \   000095   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   000098                ; Setup parameters for call to function ZDP_MatchDescReq
   \   000098   75..00       MOV       ?V0,#0x0
   \   00009B   78..         MOV       R0,#?V0
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A0   E4           CLR       A
   \   0000A1   F5..         MOV       ?V1,A
   \   0000A3   78..         MOV       R0,#?V0
   \   0000A5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A8   78..         MOV       R0,#?V0
   \   0000AA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AD   7406         MOV       A,#0x6
   \   0000AF   12....       LCALL     ?XSTACK_DISP100_8
   \   0000B2   88..         MOV       ?V0,R0
   \   0000B4   89..         MOV       ?V1,R1
   \   0000B6   78..         MOV       R0,#?V0
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BB   75..09       MOV       ?V0,#0x9
   \   0000BE   75..01       MOV       ?V1,#0x1
   \   0000C1   78..         MOV       R0,#?V0
   \   0000C3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C6   7901         MOV       R1,#0x1
   \   0000C8   8A82         MOV       DPL,R2
   \   0000CA   8B83         MOV       DPH,R3
   \   0000CC   12....       LCALL     ??Subroutine151_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   0000CF   740C         MOV       A,#0xc
   \   0000D1   12....       LCALL     ?XSTACK_DISP101_8
   \   0000D4   12....       LCALL     `??ZDP_MatchDescReq::?relay`; Banked call to: ZDP_MatchDescReq
   \   0000D7   7408         MOV       A,#0x8
   \   0000D9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DC   E9           MOV       A,R1
   \   0000DD   6005         JZ        ??zclKE_ProcessStartMsg_1
   4005              {
   4006                // Only possible error condition would be limited resources so return busy
   4007                // (ctxt.error == ZCL_KE_TERMINATE_NO_RESOURCES)
   4008                zclKE_ClientConnClose( pConn, ZCL_KE_NOTIFY_BUSY, NULL );
   \   0000DF                ; Setup parameters for call to function zclKE_ClientConnClose
   \   0000DF   12....       LCALL     ?Subroutine32 & 0xFFFF
   4009              }
   4010            }
   \                     ??CrossCallReturnLabel_386:
   \   0000E2   8014         SJMP      ??zclKE_ProcessStartMsg_0
   \                     ??zclKE_ProcessStartMsg_1:
   \   0000E4   8E82         MOV       DPL,R6
   \   0000E6   8F83         MOV       DPH,R7
   \   0000E8   A3           INC       DPTR
   \   0000E9   7401         MOV       A,#0x1
   \   0000EB   F0           MOVX      @DPTR,A
   \   0000EC                ; Setup parameters for call to function zclKE_ConnSetTimeout
   \   0000EC   90....       MOV       DPTR,#__Constant_ea60
   \   0000EF   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000F2   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_356:
   \   0000F5   12....       LCALL     ?DEALLOC_XSTACK8
   4011          }
   \                     ??zclKE_ProcessStartMsg_0:
   \   0000F8   7419         MOV       A,#0x19
   \   0000FA   80..         SJMP      ??Subroutine184_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   7C00         MOV       R4,#0x0
   \   000002   7D00         MOV       R5,#0x0
   \   000004   7904         MOV       R1,#0x4
   \   000006   85..82       MOV       DPL,?XSP + 0
   \   000009   85..83       MOV       DPH,?XSP + 1
   \   00000C                REQUIRE ??Subroutine183_0
   \   00000C                ; // Fall through to label ??Subroutine183_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   7402         MOV       A,#0x2
   \   000002   F0           MOVX      @DPTR,A
   \   000003                ; Setup parameters for call to function zclKE_ClientConnOpen
   \   000003                ; Setup parameters for call to function osal_nv_item_init
   \   000003   A8..         MOV       R0,?XSP + 0
   \   000005   A9..         MOV       R1,?XSP + 1
   \   000007   88..         MOV       ?V0,R0
   \   000009   89..         MOV       ?V1,R1
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {{0}}>`:
   \   000000   0000         DW 0
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    
   \   000008   00000000     DB 0, 0, 0, 0
   4012          
   4013          /**************************************************************************************************
   4014           * @fn      zclKE_ProcessStartDirectMsg
   4015           *
   4016           * @brief   Start key establishment *WITHOUT* end point discovery and suite selection.
   4017           *
   4018           * @param   pMsg - incoming message to process
   4019           *
   4020           * @return  void
   4021           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4022          static void zclKE_ProcessStartDirectMsg( zclKE_StartDirectMsg_t *pMsg )
   \                     zclKE_ProcessStartDirectMsg:
   4023          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV       A,#-0x7
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   4024            zclKE_Conn_t *pConn;
   4025          
   4026            // Open a new client connection
   4027            if ( zclKE_ClientConnOpen( pMsg->taskID,
   4028                                       &pMsg->partnerAddr,
   4029                                       pMsg->transSeqNum,
   4030                                       pMsg->suite,
   4031                                       &pConn ) )
   \   00000E                ; Setup parameters for call to function zclKE_ClientConnOpen
   \   00000E   A8..         MOV       R0,?XSP + 0
   \   000010   A9..         MOV       R1,?XSP + 1
   \   000012   88..         MOV       ?V0,R0
   \   000014   89..         MOV       ?V1,R1
   \   000016   78..         MOV       R0,#?V0
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001B   EA           MOV       A,R2
   \   00001C   2410         ADD       A,#0x10
   \   00001E   F582         MOV       DPL,A
   \   000020   E4           CLR       A
   \   000021   3F           ADDC      A,R7
   \   000022   F583         MOV       DPH,A
   \   000024   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000027   EA           MOV       A,R2
   \   000028   12....       LCALL     ??Subroutine186_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_408:
   \   00002B   F583         MOV       DPH,A
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   FC           MOV       R4,A
   \   00002F   EA           MOV       A,R2
   \   000030   2403         ADD       A,#0x3
   \   000032   FA           MOV       R2,A
   \   000033   E4           CLR       A
   \   000034   3F           ADDC      A,R7
   \   000035   FB           MOV       R3,A
   \   000036   8E82         MOV       DPL,R6
   \   000038   8F83         MOV       DPH,R7
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   F9           MOV       R1,A
   \   00003E   12....       LCALL     `??zclKE_ClientConnOpen::?relay`; Banked call to: zclKE_ClientConnOpen
   \   000041   7404         MOV       A,#0x4
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
   \   000046   E9           MOV       A,R1
   \   000047   6048         JZ        ??CrossCallReturnLabel_387
   4032            {
   4033              zclKE_ConnCtxt_t ctxt = {0, NULL, pConn};
   \   000049   90....       MOV       DPTR,#`?<Constant {0, (zclIncoming_t *)0, (zclKE_Conn`
   \   00004C   7402         MOV       A,#0x2
   \   00004E   12....       LCALL     ?XSTACK_DISP102_8
   \   000051   7405         MOV       A,#0x5
   \   000053   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   000056   85..82       MOV       DPL,?XSP + 0
   \   000059   85..83       MOV       DPH,?XSP + 1
   \   00005C   12....       LCALL     ??Subroutine181_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   12....       LCALL     ?Subroutine75 & 0xFFFF
   4034          
   4035              if ( !zclKE_ClientProcessStart( &ctxt ) )
   \                     ??CrossCallReturnLabel_253:
   \   000065   7405         MOV       A,#0x5
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   12....       LCALL     ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_424:
   \   00006D                ; Setup parameters for call to function zclKE_GenEphKeys
   \   00006D   7402         MOV       A,#0x2
   \   00006F   12....       LCALL     ?XSTACK_DISP101_8
   \   000072   12....       LCALL     `??zclKE_GenEphKeys::?relay`; Banked call to: zclKE_GenEphKeys
   \   000075   E9           MOV       A,R1
   \   000076   6016         JZ        ??zclKE_ProcessStartDirectMsg_0
   \   000078                ; Setup parameters for call to function zclKE_SendInitiateCmd
   \   000078   7C00         MOV       R4,#0x0
   \   00007A   7900         MOV       R1,#0x0
   \   00007C   EE           MOV       A,R6
   \   00007D   FA           MOV       R2,A
   \   00007E   EF           MOV       A,R7
   \   00007F   FB           MOV       R3,A
   \   000080   12....       LCALL     `??zclKE_SendInitiateCmd::?relay`; Banked call to: zclKE_SendInitiateCmd
   \   000083   E9           MOV       A,R1
   \   000084   6010         JZ        ??zclKE_ProcessStartDirectMsg_1
   \   000086   7402         MOV       A,#0x2
   \   000088   12....       LCALL     ?XSTACK_DISP0_8
   \   00008B   7404         MOV       A,#0x4
   \   00008D   F0           MOVX      @DPTR,A
   4036              {  
   4037                // Only possible error condition would be limited resources so return busy
   4038                // (ctxt.error == ZCL_KE_TERMINATE_NO_RESOURCES)
   4039                zclKE_ClientConnClose( pConn, ZCL_KE_NOTIFY_BUSY, NULL );
   \                     ??zclKE_ProcessStartDirectMsg_0:
   \   00008E                ; Setup parameters for call to function zclKE_ClientConnClose
   \   00008E   12....       LCALL     ?Subroutine32 & 0xFFFF
   4040              }
   4041            }
   4042          }
   \                     ??CrossCallReturnLabel_387:
   \   000091   7407         MOV       A,#0x7
   \   000093   02....       LJMP      ?Subroutine11 & 0xFFFF
   \                     ??zclKE_ProcessStartDirectMsg_1:
   \   000096   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000099   7405         MOV       A,#0x5
   \   00009B   F0           MOVX      @DPTR,A
   \   00009C                ; Setup parameters for call to function zclKE_ConnSetTimeout
   \   00009C   8E82         MOV       DPL,R6
   \   00009E   8F83         MOV       DPH,R7
   \   0000A0   12....       LCALL     ??Subroutine178_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   0000A3   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   0000A6   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   0000A9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AC   80E3         SJMP      ??CrossCallReturnLabel_387

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   04           INC       A
   \   000008   12....       LCALL     ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   00000B   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, (zclIncoming_t *)0, (zclKE_Conn`:
   \   000000   00           DB 0
   \   000001   0000         DW 0H
   \   000003   0000         DW 0H
   4043          
   4044          
   4045          /**************************************************************************************************
   4046           * PUBLIC FUNCTIONS
   4047           */
   4048          
   4049          /**************************************************************************************************
   4050           * @fn      zclKE_HdlGeneralCmd
   4051           *
   4052           * @brief   Handle general cluster commands in ZCL_STANDALONE mode.
   4053           *
   4054           * @param   pInMsg - incoming message to process
   4055           *
   4056           * @return  void
   4057           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4058          void zclKE_HdlGeneralCmd( zclIncoming_t *pInMsg )
   \                     zclKE_HdlGeneralCmd:
   4059          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   4060            if ( pInMsg->hdr.commandID == ZCL_CMD_READ_RSP )
   4061            {
   4062          #if defined( ZCL_READ )
   4063              zclKE_ClientReadRspCmd( &pInMsg->msg->srcAddr, pInMsg->msg->clusterId,
   4064                                      (zclReadRspCmd_t *)pInMsg->attrCmd  );
   4065          #endif // ZCL_READ
   4066            }
   4067          }
   \   000000   02....       LJMP      ?BRET
   4068          
   4069          /**************************************************************************************************
   4070           * @fn      zclKE_ECDSASignGetLen
   4071           *
   4072           * @brief   Returns length required for zclKE_ECDSASign "pOutBuf" field.
   4073           *
   4074           * @param   suite - selected security suite
   4075           *
   4076           * @return  uint8 - length for zclKE_ECDSASign "pOutBuf" field
   4077           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4078          uint8 zclKE_ECDSASignGetLen( uint16 suite )
   \                     zclKE_ECDSASignGetLen:
   4079          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   4080            uint8 len;
   4081          
   4082            len = (uint8)( zclKE_GetField( suite, ZCL_KE_PRIVATE_KEY_LEN ) * 2 );
   4083          
   4084            return len;
   \   000004                ; Setup parameters for call to function zclKE_GetField
   \   000004   7904         MOV       R1,#0x4
   \   000006   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   000009   EA           MOV       A,R2
   \   00000A   C3           CLR       C
   \   00000B   33           RLC       A
   \   00000C   F9           MOV       R1,A
   \   00000D   02....       LJMP      ??Subroutine156_0 & 0xFFFF
   4085          }
   4086          
   4087          /**************************************************************************************************
   4088           * @fn      zclKE_ECDSASign
   4089           *
   4090           * @brief   Creates an ECDSA signature of a message digest.
   4091           *
   4092           * @param   suite - selected security suite
   4093           * @param   pInBuf - input buffer
   4094           * @param   inBufLen - input buffer length
   4095           * @param   pOutBuf - output buffer ( length == zclKE_ECDSASignGetLen )
   4096           *
   4097           * @return  ZStatus_t - status
   4098           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4099          ZStatus_t zclKE_ECDSASign( uint16 suite, uint8 *pInBuf, uint8 inBufLen, uint8 *pOutBuf )
   \                     zclKE_ECDSASign:
   4100          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V8,R2
   \   00000C   8B..         MOV       ?V9,R3
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
   \   000012   89..         MOV       ?V2,R1
   4101            uint8 status;
   4102            uint8 result;
   4103            uint8 msgDigest[ZCL_KE_MAC_LEN];
   4104            uint16 bitLen = inBufLen * 8;
   4105            uint8 *pPrivateKey = NULL;
   4106            uint16 privateKeyLen;
   4107          
   4108            do
   4109            {
   4110              privateKeyLen = zclKE_GetField( suite, ZCL_KE_PRIVATE_KEY_LEN );
   \   000014                ; Setup parameters for call to function zclKE_GetField
   \   000014   7904         MOV       R1,#0x4
   \   000016   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   000019   8A..         MOV       ?V4,R2
   \   00001B   8B..         MOV       ?V5,R3
   4111          
   4112              pPrivateKey = osal_mem_alloc( privateKeyLen );
   \   00001D                ; Setup parameters for call to function osal_mem_alloc
   \   00001D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000020   8A..         MOV       ?V6,R2
   \   000022   8B..         MOV       ?V7,R3
   4113              if ( !pPrivateKey )
   \   000024   EA           MOV       A,R2
   \   000025   4B           ORL       A,R3
   \   000026   7005         JNZ       ??zclKE_ECDSASign_0
   4114              {
   4115                status = ZMemError;
   \   000028   7E10         MOV       R6,#0x10
   4116                break;
   \   00002A   02....       LJMP      ??zclKE_ECDSASign_1 & 0xFFFF
   4117              }
   4118          
   4119              osal_nv_read( zclKE_GetField( suite, ZCL_KE_PRIVATE_KEY_NV_ID ), 0,
   4120                            privateKeyLen, pPrivateKey );
   \                     ??zclKE_ECDSASign_0:
   \   00002D                ; Setup parameters for call to function osal_nv_read
   \   00002D   78..         MOV       R0,#?V6
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000032   78..         MOV       R0,#?V4
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037                ; Setup parameters for call to function zclKE_GetField
   \   000037   7901         MOV       R1,#0x1
   \   000039   AA..         MOV       R2,?V8
   \   00003B   AB..         MOV       R3,?V9
   \   00003D   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   000040   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
   4121          
   4122              // First hash the input buffer
   4123              sspMMOHash(NULL, 0, pInBuf, bitLen, msgDigest);
   \   000046                ; Setup parameters for call to function sspMMOHash
   \   000046   A8..         MOV       R0,?XSP + 0
   \   000048   A9..         MOV       R1,?XSP + 1
   \   00004A   88..         MOV       ?V10,R0
   \   00004C   89..         MOV       ?V11,R1
   \   00004E   78..         MOV       R0,#?V10
   \   000050   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000053   E5..         MOV       A,?V2
   \   000055   F5..         MOV       ?V10,A
   \   000057   75..00       MOV       ?V11,#0x0
   \   00005A   7403         MOV       A,#0x3
   \   00005C   78..         MOV       R0,#?V10
   \   00005E   12....       LCALL     ?S_SHL
   \   000061   78..         MOV       R0,#?V10
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000066   AC..         MOV       R4,?V0
   \   000068   AD..         MOV       R5,?V1
   \   00006A   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   00006D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000070   7424         MOV       A,#0x24
   \   000072   12....       LCALL     ?XSTACK_DISP0_8
   \   000075   12....       LCALL     ??Subroutine171_0 & 0xFFFF
   4124          
   4125              switch ( suite )
   \                     ??CrossCallReturnLabel_321:
   \   000078   78..         MOV       R0,#?V8
   \   00007A   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for zclKE_ECDSASign>_0`:
   \   00007D   0100         DW        1
   \   00007F   01           DB        1
   \   000080   ....         DW        ??zclKE_ECDSASign_2
   \   000082   ....         DW        ??zclKE_ECDSASign_3
   \   000084   ....         DW        ??zclKE_ECDSASign_4
   4126              {
   4127          #if !defined( ECCAPI_163_DISABLED )
   4128                case ZCL_KE_SUITE_1:
   4129                  result = ZSE_ECDSASign( pPrivateKey, msgDigest, zclKE_GetRandom, 
   4130                                          pOutBuf, &pOutBuf[privateKeyLen], NULL, 0 );
   \                     ??zclKE_ECDSASign_3:
   \   000086                ; Setup parameters for call to function ZSE_ECDSASign
   \   000086   90....       MOV       DPTR,#__Constant_0
   \   000089   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00008C   E4           CLR       A
   \   00008D   F5..         MOV       ?V8,A
   \   00008F   F5..         MOV       ?V9,A
   \   000091   78..         MOV       R0,#?V8
   \   000093   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000096   12....       LCALL     ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_426:
   \   000099   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009C   78..         MOV       R0,#?V0
   \   00009E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A1   75....       MOV       ?V0,#`??zclKE_GetRandom::?relay` & 0xff
   \   0000A4   75....       MOV       ?V1,#(`??zclKE_GetRandom::?relay` >> 8) & 0xff
   \   0000A7   78..         MOV       R0,#?V0
   \   0000A9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AC   740C         MOV       A,#0xc
   \   0000AE   12....       LCALL     ?XSTACK_DISP102_8
   \   0000B1   AA..         MOV       R2,?V6
   \   0000B3   AB..         MOV       R3,?V7
   \   0000B5   12....       LCALL     `??ZSE_ECDSASign::?relay`; Banked call to: ZSE_ECDSASign
   \   0000B8   8032         SJMP      ??zclKE_ECDSASign_5
   4131                  break;
   4132          #endif // !defined( ECCAPI_163_DISABLED )
   4133          
   4134          #if !defined( ECCAPI_283_DISABLED )
   4135                case ZCL_KE_SUITE_2:
   4136                  result = ZSE_ECDSASign283( pPrivateKey, msgDigest, zclKE_GetRandom, 
   4137                                             pOutBuf, &pOutBuf[privateKeyLen], NULL, 0 );
   \                     ??zclKE_ECDSASign_4:
   \   0000BA                ; Setup parameters for call to function ZSE_ECDSASign283
   \   0000BA   90....       MOV       DPTR,#__Constant_0
   \   0000BD   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000C0   E4           CLR       A
   \   0000C1   F5..         MOV       ?V8,A
   \   0000C3   F5..         MOV       ?V9,A
   \   0000C5   78..         MOV       R0,#?V8
   \   0000C7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000CA   12....       LCALL     ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_427:
   \   0000CD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D0   78..         MOV       R0,#?V0
   \   0000D2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D5   75....       MOV       ?V0,#`??zclKE_GetRandom::?relay` & 0xff
   \   0000D8   75....       MOV       ?V1,#(`??zclKE_GetRandom::?relay` >> 8) & 0xff
   \   0000DB   78..         MOV       R0,#?V0
   \   0000DD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E0   740C         MOV       A,#0xc
   \   0000E2   12....       LCALL     ?XSTACK_DISP102_8
   \   0000E5   AA..         MOV       R2,?V6
   \   0000E7   AB..         MOV       R3,?V7
   \   0000E9   12....       LCALL     `??ZSE_ECDSASign283::?relay`; Banked call to: ZSE_ECDSASign283
   \                     ??zclKE_ECDSASign_5:
   \   0000EC   740C         MOV       A,#0xc
   \   0000EE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F1   EA           MOV       A,R2
   4138                  break;
   4139          #endif // !defined( ECCAPI_283_DISABLED )
   4140          
   4141                default:
   4142                  // Should never get here
   4143                  result = MCE_ERR_BAD_INPUT;
   4144                  break;
   4145              }
   4146          
   4147              if( result != MCE_SUCCESS )
   \   0000F2   6004         JZ        ??zclKE_ECDSASign_6
   4148              {
   4149                status = ZFailure;
   \                     ??zclKE_ECDSASign_2:
   \   0000F4   7E01         MOV       R6,#0x1
   4150                break;
   \   0000F6   8002         SJMP      ??zclKE_ECDSASign_1
   4151              }
   4152          
   4153              status = ZSuccess;
   \                     ??zclKE_ECDSASign_6:
   \   0000F8   7E00         MOV       R6,#0x0
   4154          
   4155            } while ( 0 );
   4156          
   4157            // Cleanup local memory allocations
   4158            zclKE_MemFree( pPrivateKey, privateKeyLen );
   \                     ??zclKE_ECDSASign_1:
   \   0000FA                ; Setup parameters for call to function zclKE_MemFree
   \   0000FA   AC..         MOV       R4,?V4
   \   0000FC   AD..         MOV       R5,?V5
   \   0000FE   AA..         MOV       R2,?V6
   \   000100   AB..         MOV       R3,?V7
   \   000102   12....       LCALL     `??zclKE_MemFree::?relay`; Banked call to: zclKE_MemFree
   4159          
   4160            return status;
   \   000105   EE           MOV       A,R6
   \   000106   F9           MOV       R1,A
   \   000107   7410         MOV       A,#0x10
   \   000109   12....       LCALL     ?DEALLOC_XSTACK8
   \   00010C   7F0C         MOV       R7,#0xc
   \   00010E   02....       LJMP      ?BANKED_LEAVE_XDATA
   4161          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   E5..         MOV       A,?V0
   \   000002   25..         ADD       A,?V4
   \   000004   F5..         MOV       ?V8,A
   \   000006   E5..         MOV       A,?V1
   \   000008                REQUIRE ??Subroutine189_0
   \   000008                ; // Fall through to label ??Subroutine189_0
   4162          
   4163          /**************************************************************************************************
   4164           * @fn      zclKE_Start
   4165           *
   4166           * @brief   Start key establishment with selected partner at the nwkAddr.
   4167           *
   4168           * @param   taskID - OSAL task ID of requesting task
   4169           * @param   partnerNwkAddr - partner network address
   4170           * @param   transSeqNum - starting transaction sequence number
   4171           *
   4172           * @return  ZStatus_t - status
   4173           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4174          ZStatus_t zclKE_Start( uint8 taskID, uint16 partnerNwkAddr, uint8 transSeqNum )
   \                     zclKE_Start:
   4175          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
   \   00000B   8C..         MOV       ?V1,R4
   4176            ZStatus_t status;
   4177            zclKE_StartMsg_t *pMsg;
   4178          
   4179            // Allocate the message
   4180            pMsg = (zclKE_StartMsg_t *)osal_msg_allocate( sizeof( zclKE_StartMsg_t ) );
   \   00000D                ; Setup parameters for call to function osal_msg_allocate
   \   00000D   7A06         MOV       R2,#0x6
   \   00000F   12....       LCALL     ??Subroutine191_0 & 0xFFFF
   4181          
   4182            if ( pMsg )
   \                     ??CrossCallReturnLabel_432:
   \   000012   6020         JZ        ??zclKE_Start_0
   4183            {
   4184              pMsg->hdr.event = ZCL_KE_START_MSG;
   \   000014   8A82         MOV       DPL,R2
   \   000016   8B83         MOV       DPH,R3
   \   000018   7401         MOV       A,#0x1
   \   00001A   12....       LCALL     ?Subroutine70 & 0xFFFF
   4185              pMsg->hdr.status = 0;
   4186              pMsg->taskID = taskID;
   4187              pMsg->partnerNwkAddr = partnerNwkAddr;
   \                     ??CrossCallReturnLabel_428:
   \   00001D   8A82         MOV       DPL,R2
   \   00001F   8B83         MOV       DPH,R3
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   EE           MOV       A,R6
   \   000025   F0           MOVX      @DPTR,A
   \   000026   A3           INC       DPTR
   \   000027   EF           MOV       A,R7
   \   000028   12....       LCALL     ?Subroutine78 & 0xFFFF
   4188              pMsg->transSeqNum = transSeqNum;
   4189              status = osal_msg_send( zclKE_TaskID, (uint8 *)pMsg );
   4190            }
   \                     ??CrossCallReturnLabel_100:
   \   00002B   E5..         MOV       A,?V1
   \   00002D   12....       LCALL     ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_383:
   \   000030   E9           MOV       A,R1
   \   000031   F9           MOV       R1,A
   \   000032   8002         SJMP      ??zclKE_Start_1
   4191            else
   4192            {
   4193              status = ZMemError;
   \                     ??zclKE_Start_0:
   \   000034   7910         MOV       R1,#0x10
   4194            }  
   4195          
   4196            return status;
   \                     ??zclKE_Start_1:
   \   000036   02....       LJMP      ??Subroutine158_0 & 0xFFFF
   4197          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E4           CLR       A
   \   000003                REQUIRE ??Subroutine190_0
   \   000003                ; // Fall through to label ??Subroutine190_0
   4198          
   4199          /**************************************************************************************************
   4200           * @fn      zclKE_StartDirect
   4201           *
   4202           * @brief   Start key establishment directly with partner at the pPartnerAddr.
   4203           *
   4204           * @param   taskID - OSAL task ID of requesting task
   4205           * @param   pPartnerAddr - valid partner network address and end point
   4206           * @param   transSeqNum - starting transaction sequence number
   4207           * @param   suite - selected security suite
   4208           *
   4209           * @return  ZStatus_t - status
   4210           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4211          ZStatus_t zclKE_StartDirect( uint8 taskID, afAddrType_t *pPartnerAddr,
   \                     zclKE_StartDirect:
   4212                                       uint8 transSeqNum, uint16 suite )
   4213          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
   \   00000B   8C..         MOV       ?V1,R4
   4214            ZStatus_t status;
   4215            zclKE_StartDirectMsg_t *pMsg;
   4216          
   4217            // Allocate the message
   4218            pMsg = (zclKE_StartDirectMsg_t *)osal_msg_allocate( sizeof( zclKE_StartDirectMsg_t ) );
   \   00000D                ; Setup parameters for call to function osal_msg_allocate
   \   00000D   7A12         MOV       R2,#0x12
   \   00000F   12....       LCALL     ??Subroutine191_0 & 0xFFFF
   4219          
   4220            if ( pMsg )
   \                     ??CrossCallReturnLabel_433:
   \   000012   6034         JZ        ??zclKE_StartDirect_0
   4221            {
   4222              pMsg->hdr.event = ZCL_KE_START_DIRECT_MSG;
   \   000014   8A82         MOV       DPL,R2
   \   000016   8B83         MOV       DPH,R3
   \   000018   7402         MOV       A,#0x2
   \   00001A   12....       LCALL     ?Subroutine70 & 0xFFFF
   4223              pMsg->hdr.status = 0;
   4224              pMsg->taskID = taskID;
   4225              pMsg->partnerAddr = *pPartnerAddr;
   \                     ??CrossCallReturnLabel_429:
   \   00001D   8E82         MOV       DPL,R6
   \   00001F   8F83         MOV       DPH,R7
   \   000021   EA           MOV       A,R2
   \   000022   2403         ADD       A,#0x3
   \   000024   FC           MOV       R4,A
   \   000025   E4           CLR       A
   \   000026   3B           ADDC      A,R3
   \   000027   FD           MOV       R5,A
   \   000028   740C         MOV       A,#0xc
   \   00002A   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   4226              pMsg->transSeqNum = transSeqNum;
   \   00002D   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000030   E5..         MOV       A,?V1
   \   000032   F0           MOVX      @DPTR,A
   4227              pMsg->suite = suite;
   \   000033   740C         MOV       A,#0xc
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F8           MOV       R0,A
   \   00003A   A3           INC       DPTR
   \   00003B   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00003E   12....       LCALL     ?Subroutine75 & 0xFFFF
   4228              status = osal_msg_send( zclKE_TaskID, (uint8 *)pMsg );
   \                     ??CrossCallReturnLabel_254:
   \   000041                ; Setup parameters for call to function osal_msg_send
   \   000041   12....       LCALL     ??Subroutine182_0 & 0xFFFF
   4229            }
   \                     ??CrossCallReturnLabel_384:
   \   000044   E9           MOV       A,R1
   \   000045   F9           MOV       R1,A
   \   000046   8002         SJMP      ??zclKE_StartDirect_1
   4230            else
   4231            {
   4232              status = ZMemError;
   \                     ??zclKE_StartDirect_0:
   \   000048   7910         MOV       R1,#0x10
   4233            }  
   4234          
   4235            return status;
   \                     ??zclKE_StartDirect_1:
   \   00004A   02....       LJMP      ??Subroutine158_0 & 0xFFFF
   4236          }
   4237          
   4238          /**************************************************************************************************
   4239           * @fn      zclKE_Init
   4240           *
   4241           * @brief   Initialization function for the ZCL key establishment task.
   4242           *
   4243           * @param   taskID - OSAL task ID of this task
   4244           *
   4245           * @return  void
   4246           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4247          void zclKE_Init( uint8 taskID )
   \                     zclKE_Init:
   4248          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 75
   \   000005   74B5         MOV       A,#-0x4b
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   4249            zclKE_TaskID = taskID;
   \   00000B   90....       MOV       DPTR,#zclKE_TaskID
   \   00000E   F0           MOVX      @DPTR,A
   4250          
   4251            // Register end point description
   4252            afRegister( (endPointDesc_t* )&zclKE_EPDesc );
   \   00000F                ; Setup parameters for call to function afRegister
   \   00000F   7A..         MOV       R2,#zclKE_EPDesc & 0xff
   \   000011   7B..         MOV       R3,#(zclKE_EPDesc >> 8) & 0xff
   \   000013   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
   4253          
   4254            // Register ZCL attribute list
   4255            zcl_registerAttrList( ZCL_KE_ENDPOINT, 1, zclKE_ZCL_AttrList );
   \   000016                ; Setup parameters for call to function zcl_registerAttrList
   \   000016   7C..         MOV       R4,#zclKE_ZCL_AttrList & 0xff
   \   000018   7D..         MOV       R5,#(zclKE_ZCL_AttrList >> 8) & 0xff
   \   00001A   7A01         MOV       R2,#0x1
   \   00001C   790A         MOV       R1,#0xa
   \   00001E   12....       LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
   4256          
   4257            // Register ZCL cluster options
   4258            zcl_registerClusterOptionList( ZCL_KE_ENDPOINT, 1, zclKE_ZCL_Options );
   \   000021                ; Setup parameters for call to function zcl_registerClusterOptionList
   \   000021   7C..         MOV       R4,#zclKE_ZCL_Options & 0xff
   \   000023   7D..         MOV       R5,#(zclKE_ZCL_Options >> 8) & 0xff
   \   000025   7A01         MOV       R2,#0x1
   \   000027   790A         MOV       R1,#0xa
   \   000029   12....       LCALL     `??zcl_registerClusterOptionList::?relay`; Banked call to: zcl_registerClusterOptionList
   4259          
   4260            // Register as a ZCL KE plugin
   4261            zcl_registerPlugin( ZCL_CLUSTER_ID_SE_KEY_ESTABLISHMENT,
   4262                                ZCL_CLUSTER_ID_SE_KEY_ESTABLISHMENT,
   4263                                zclKE_HdlIncoming );
   \   00002C                ; Setup parameters for call to function zcl_registerPlugin
   \   00002C   75....       MOV       ?V0,#`??zclKE_HdlIncoming::?relay` & 0xff
   \   00002F   75....       MOV       ?V1,#(`??zclKE_HdlIncoming::?relay` >> 8) & 0xff
   \   000032   78..         MOV       R0,#?V0
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   7C00         MOV       R4,#0x0
   \   000039   7D08         MOV       R5,#0x8
   \   00003B   7A00         MOV       R2,#0x0
   \   00003D   7B08         MOV       R3,#0x8
   \   00003F   12....       LCALL     `??zcl_registerPlugin::?relay`; Banked call to: zcl_registerPlugin
   \   000042   7402         MOV       A,#0x2
   \   000044   12....       LCALL     ?DEALLOC_XSTACK8
   4264          
   4265          #ifndef ZCL_STANDALONE
   4266            // Register for ZCL_INCOMING_MSG
   4267            zcl_registerForMsg( zclKE_TaskID );
   \   000047                ; Setup parameters for call to function zcl_registerForMsg
   \   000047   90....       MOV       DPTR,#zclKE_TaskID
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F9           MOV       R1,A
   \   00004C   12....       LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
   4268          #endif
   4269          
   4270            // Initialize available suites
   4271            zclKE_CheckForAvailSuites();
   \   00004F   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   000052   7426         MOV       A,#0x26
   \   000054   12....       LCALL     ?XSTACK_DISP102_8
   \   000057   7425         MOV       A,#0x25
   \   000059   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   00005C                ; Setup parameters for call to function osal_nv_read
   \   00005C   04           INC       A
   \   00005D   12....       LCALL     ?XSTACK_DISP100_8
   \   000060   88..         MOV       ?V0,R0
   \   000062   89..         MOV       ?V1,R1
   \   000064   78..         MOV       R0,#?V0
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000069   75..16       MOV       ?V0,#0x16
   \   00006C   75..00       MOV       ?V1,#0x0
   \   00006F   78..         MOV       R0,#?V0
   \   000071   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000074   7C00         MOV       R4,#0x0
   \   000076   7D00         MOV       R5,#0x0
   \   000078   7A6B         MOV       R2,#0x6b
   \   00007A   7B00         MOV       R3,#0x0
   \   00007C   12....       LCALL     ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   00007F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000082   E9           MOV       A,R1
   \   000083   702A         JNZ       ??zclKE_Init_0
   \   000085                ; Setup parameters for call to function osal_memcmp
   \   000085   7426         MOV       A,#0x26
   \   000087   12....       LCALL     ?XSTACK_DISP100_8
   \   00008A   88..         MOV       ?V0,R0
   \   00008C   89..         MOV       ?V1,R1
   \   00008E   75..00       MOV       ?V2,#0x0
   \   000091   78..         MOV       R0,#?V0
   \   000093   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000096   7C16         MOV       R4,#0x16
   \   000098   7D00         MOV       R5,#0x0
   \   00009A   7404         MOV       A,#0x4
   \   00009C   12....       LCALL     ?XSTACK_DISP0_8
   \   00009F   12....       LCALL     ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_438:
   \   0000A2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A5   E9           MOV       A,R1
   \   0000A6   7007         JNZ       ??zclKE_Init_0
   \   0000A8   90....       MOV       DPTR,#zclKE_SupportedSuites
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   4401         ORL       A,#0x1
   \   0000AE   F0           MOVX      @DPTR,A
   \                     ??zclKE_Init_0:
   \   0000AF                ; Setup parameters for call to function osal_nv_read
   \   0000AF   7401         MOV       A,#0x1
   \   0000B1   12....       LCALL     ?XSTACK_DISP100_8
   \   0000B4   88..         MOV       ?V0,R0
   \   0000B6   89..         MOV       ?V1,R1
   \   0000B8   78..         MOV       R0,#?V0
   \   0000BA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BD   75..25       MOV       ?V0,#0x25
   \   0000C0   75..00       MOV       ?V1,#0x0
   \   0000C3   78..         MOV       R0,#?V0
   \   0000C5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C8   7C00         MOV       R4,#0x0
   \   0000CA   7D00         MOV       R5,#0x0
   \   0000CC   7A74         MOV       R2,#0x74
   \   0000CE   7B00         MOV       R3,#0x0
   \   0000D0   12....       LCALL     ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   0000D3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D6   E9           MOV       A,R1
   \   0000D7   702A         JNZ       ??zclKE_Init_1
   \   0000D9                ; Setup parameters for call to function osal_memcmp
   \   0000D9   7426         MOV       A,#0x26
   \   0000DB   12....       LCALL     ?XSTACK_DISP100_8
   \   0000DE   88..         MOV       ?V0,R0
   \   0000E0   89..         MOV       ?V1,R1
   \   0000E2   75..00       MOV       ?V2,#0x0
   \   0000E5   78..         MOV       R0,#?V0
   \   0000E7   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000EA   7C25         MOV       R4,#0x25
   \   0000EC   7D00         MOV       R5,#0x0
   \   0000EE   7404         MOV       A,#0x4
   \   0000F0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F3   12....       LCALL     ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_439:
   \   0000F6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F9   E9           MOV       A,R1
   \   0000FA   7007         JNZ       ??zclKE_Init_1
   \   0000FC   90....       MOV       DPTR,#zclKE_SupportedSuites
   \   0000FF   E0           MOVX      A,@DPTR
   \   000100   4402         ORL       A,#0x2
   \   000102   F0           MOVX      @DPTR,A
   4272          
   4273            // Initialize server functionality
   4274            zclKE_ServerInit();
   \                     ??zclKE_Init_1:
   \   000103   85..82       MOV       DPL,?XSP + 0
   \   000106   85..83       MOV       DPH,?XSP + 1
   \   000109   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00010C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010F   7C01         MOV       R4,#0x1
   \   000111   7D00         MOV       R5,#0x0
   \   000113   7A6C         MOV       R2,#0x6c
   \   000115   7B00         MOV       R3,#0x0
   \   000117   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00011A   7402         MOV       A,#0x2
   \   00011C   12....       LCALL     ?DEALLOC_XSTACK8
   4275          
   4276            // Initialize client functionality
   4277            zclKE_ClientInit();
   \   00011F                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00011F   7A06         MOV       R2,#0x6
   \   000121   7B80         MOV       R3,#-0x80
   \   000123   90....       MOV       DPTR,#zclKE_TaskID
   \   000126   E0           MOVX      A,@DPTR
   \   000127   F9           MOV       R1,A
   \   000128   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   4278          
   4279            // Set initial state
   4280            if ( zclKE_SupportedSuites )
   \   00012B   90....       MOV       DPTR,#zclKE_SupportedSuites
   \   00012E   12....       LCALL     ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   000131   90....       MOV       DPTR,#zclKE_State
   \   000134   6004         JZ        ??zclKE_Init_2
   4281            {
   4282              zclKE_State = ZCL_KE_READY;
   \   000136   7401         MOV       A,#0x1
   \   000138   8002         SJMP      ??zclKE_Init_3
   4283            }
   4284            else
   4285            {
   4286              zclKE_State = ZCL_KE_NO_CERTS;
   \                     ??zclKE_Init_2:
   \   00013A   740A         MOV       A,#0xa
   \                     ??zclKE_Init_3:
   \   00013C   F0           MOVX      @DPTR,A
   4287            }
   4288          }
   \   00013D   744B         MOV       A,#0x4b
   \   00013F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000142   02....       LJMP      ?Subroutine10 & 0xFFFF
   4289          
   4290          /**************************************************************************************************
   4291           * @fn      zclKE_ProcessEvent
   4292           *
   4293           * @brief   Process an event for the ZCL key establishment task.
   4294           *
   4295           * @param   taskID - OSAL task ID of this task
   4296           * @param   events - OSAL event mask
   4297           *
   4298           * @return  uint16 - OSAL events not processed
   4299           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4300          uint16 zclKE_ProcessEvent( uint8 taskID, uint16 events )
   \                     zclKE_ProcessEvent:
   4301          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   4302            osal_event_hdr_t *pMsg;
   4303          
   4304            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL       A,#0x80
   \   00000B   7003         JNZ       $+5
   \   00000D   02....       LJMP      ??zclKE_ProcessEvent_0 & 0xFFFF
   4305            {
   4306              pMsg = (osal_event_hdr_t *)osal_msg_receive( taskID );
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000013   8A..         MOV       ?V0,R2
   \   000015   8B..         MOV       ?V1,R3
   4307          
   4308              if ( pMsg )
   \   000017   EA           MOV       A,R2
   \   000018   4B           ORL       A,R3
   \   000019   7003         JNZ       $+5
   \   00001B   02....       LJMP      ??zclKE_ProcessEvent_1 & 0xFFFF
   4309              {
   4310                switch ( pMsg->event )
   \   00001E   8A82         MOV       DPL,R2
   \   000020   8B83         MOV       DPH,R3
   \   000022   E0           MOVX      A,@DPTR
   \   000023   14           DEC       A
   \   000024   6011         JZ        ??zclKE_ProcessEvent_2
   \   000026   14           DEC       A
   \   000027   6014         JZ        ??zclKE_ProcessEvent_3
   \   000029   14           DEC       A
   \   00002A   6017         JZ        ??zclKE_ProcessEvent_4
   \   00002C   24CF         ADD       A,#-0x31
   \   00002E   6019         JZ        ??zclKE_ProcessEvent_5
   \   000030   2461         ADD       A,#0x61
   \   000032   6043         JZ        ??zclKE_ProcessEvent_6
   \   000034   02....       LJMP      ??zclKE_ProcessEvent_7 & 0xFFFF
   4311                {
   4312                  case ZCL_KE_START_MSG:
   4313                    zclKE_ProcessStartMsg( (zclKE_StartMsg_t *)pMsg );
   \                     ??zclKE_ProcessEvent_2:
   \   000037                ; Setup parameters for call to function zclKE_ProcessStartMsg
   \   000037   12....       LCALL     `??zclKE_ProcessStartMsg::?relay`; Banked call to: zclKE_ProcessStartMsg
   4314                    break;
   \   00003A   02....       LJMP      ??zclKE_ProcessEvent_7 & 0xFFFF
   4315          
   4316                  case ZCL_KE_START_DIRECT_MSG:
   4317                    zclKE_ProcessStartDirectMsg( (zclKE_StartDirectMsg_t *)pMsg );
   \                     ??zclKE_ProcessEvent_3:
   \   00003D                ; Setup parameters for call to function zclKE_ProcessStartDirectMsg
   \   00003D   12....       LCALL     `??zclKE_ProcessStartDirectMsg::?relay`; Banked call to: zclKE_ProcessStartDirectMsg
   4318                    break;
   \   000040   02....       LJMP      ??zclKE_ProcessEvent_7 & 0xFFFF
   4319          
   4320                  case ZCL_KE_KEY_GEN_MSG:
   4321                    zclKE_ProcessKeyGenMsg( (zclKE_KeyGenMsg_t *)pMsg );
   \                     ??zclKE_ProcessEvent_4:
   \   000043                ; Setup parameters for call to function zclKE_ProcessKeyGenMsg
   \   000043   12....       LCALL     `??zclKE_ProcessKeyGenMsg::?relay`; Banked call to: zclKE_ProcessKeyGenMsg
   4322                    break;
   \   000046   02....       LJMP      ??zclKE_ProcessEvent_7 & 0xFFFF
   4323          
   4324                  case AF_INCOMING_MSG_CMD:
   4325                    zclKE_ProcessAFMsgCmd( (afIncomingMSGPacket_t *)pMsg );
   4326                    break;
   4327          
   4328                  case ZCL_INCOMING_MSG:
   4329                    zclKE_ProcessZCLMsg( (zclIncomingMsg_t *)pMsg );
   \                     ??zclKE_ProcessEvent_5:
   \   000049   EA           MOV       A,R2
   \   00004A   2417         ADD       A,#0x17
   \   00004C   F582         MOV       DPL,A
   \   00004E   E4           CLR       A
   \   00004F   35..         ADDC      A,?V1
   \   000051   F583         MOV       DPH,A
   \   000053   12....       LCALL     ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   000056   607A         JZ        ??zclKE_ProcessEvent_7
   \   000058   EA           MOV       A,R2
   \   000059   2417         ADD       A,#0x17
   \   00005B   F8           MOV       R0,A
   \   00005C   E4           CLR       A
   \   00005D   35..         ADDC      A,?V1
   \   00005F   88..         MOV       ?V2,R0
   \   000061   F5..         MOV       ?V3,A
   \   000063                ; Setup parameters for call to function osal_mem_free
   \   000063   8882         MOV       DPL,R0
   \   000065   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   000068   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00006B   85..82       MOV       DPL,?V2
   \   00006E   85..83       MOV       DPH,?V3
   \   000071   E4           CLR       A
   \   000072   F0           MOVX      @DPTR,A
   \   000073   A3           INC       DPTR
   \   000074   F0           MOVX      @DPTR,A
   \   000075   805B         SJMP      ??zclKE_ProcessEvent_7
   4330                    break;
   4331          
   4332                  case ZDO_CB_MSG:
   4333                    zclKE_ProcessZDOMsg( (zdoIncomingMsg_t *)pMsg );
   \                     ??zclKE_ProcessEvent_6:
   \   000077   EA           MOV       A,R2
   \   000078   240C         ADD       A,#0xc
   \   00007A   F582         MOV       DPL,A
   \   00007C   E4           CLR       A
   \   00007D   35..         ADDC      A,?V1
   \   00007F   F583         MOV       DPH,A
   \   000081   E0           MOVX      A,@DPTR
   \   000082   6406         XRL       A,#0x6
   \   000084   7004         JNZ       ??zclKE_ProcessEvent_8
   \   000086   A3           INC       DPTR
   \   000087   E0           MOVX      A,@DPTR
   \   000088   6480         XRL       A,#0x80
   \                     ??zclKE_ProcessEvent_8:
   \   00008A   7046         JNZ       ??zclKE_ProcessEvent_7
   \   00008C                ; Setup parameters for call to function zclKE_ClientConnFind
   \   00008C   12....       LCALL     ?Subroutine61 & 0xFFFF
   4334                    break;
   4335          
   4336                  default:
   4337                    break;
   4338                }
   \                     ??CrossCallReturnLabel_71:
   \   00008F   8A..         MOV       ?V2,R2
   \   000091   8B..         MOV       ?V3,R3
   \   000093   EA           MOV       A,R2
   \   000094   4B           ORL       A,R3
   \   000095   603B         JZ        ??zclKE_ProcessEvent_7
   \   000097   8A82         MOV       DPL,R2
   \   000099   8B83         MOV       DPH,R3
   \   00009B   A3           INC       DPTR
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   6401         XRL       A,#0x1
   \   00009F   7031         JNZ       ??zclKE_ProcessEvent_7
   \   0000A1                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   0000A1   AA..         MOV       R2,?V0
   \   0000A3   AB..         MOV       R3,?V1
   \   0000A5   12....       LCALL     `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
   \   0000A8   8A..         MOV       ?V6,R2
   \   0000AA   8B..         MOV       ?V7,R3
   \   0000AC   EA           MOV       A,R2
   \   0000AD   4B           ORL       A,R3
   \   0000AE   6022         JZ        ??zclKE_ProcessEvent_7
   \   0000B0   8A82         MOV       DPL,R2
   \   0000B2   8B83         MOV       DPH,R3
   \   0000B4   A3           INC       DPTR
   \   0000B5   A3           INC       DPTR
   \   0000B6   A3           INC       DPTR
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   7C00         MOV       R4,#0x0
   \   0000BA   7D00         MOV       R5,#0x0
   \   0000BC   6004         JZ        ??zclKE_ProcessEvent_9
   \   0000BE                ; Setup parameters for call to function zclKE_ClientConnClose
   \   0000BE   7904         MOV       R1,#0x4
   \   0000C0   8002         SJMP      ??zclKE_ProcessEvent_10
   \                     ??zclKE_ProcessEvent_9:
   \   0000C2                ; Setup parameters for call to function zclKE_ClientConnClose
   \   0000C2   7908         MOV       R1,#0x8
   \                     ??zclKE_ProcessEvent_10:
   \   0000C4   AA..         MOV       R2,?V2
   \   0000C6   AB..         MOV       R3,?V3
   \   0000C8   12....       LCALL     `??zclKE_ClientConnClose::?relay`; Banked call to: zclKE_ClientConnClose
   \   0000CB                ; Setup parameters for call to function osal_mem_free
   \   0000CB   AA..         MOV       R2,?V6
   \   0000CD   AB..         MOV       R3,?V7
   \   0000CF   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4339          
   4340                // Release the memory
   4341                osal_msg_deallocate( (uint8 *)pMsg );
   \                     ??zclKE_ProcessEvent_7:
   \   0000D2                ; Setup parameters for call to function osal_msg_deallocate
   \   0000D2   AA..         MOV       R2,?V0
   \   0000D4   AB..         MOV       R3,?V1
   \   0000D6   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   4342              }
   4343          
   4344              return ( events ^ SYS_EVENT_MSG );
   \                     ??zclKE_ProcessEvent_1:
   \   0000D9   EE           MOV       A,R6
   \   0000DA   FA           MOV       R2,A
   \   0000DB   EF           MOV       A,R7
   \   0000DC   6480         XRL       A,#0x80
   \   0000DE   800D         SJMP      ??zclKE_ProcessEvent_11
   4345            }
   4346          
   4347            if ( events & ZCL_KE_TIMER_EVT )
   \                     ??zclKE_ProcessEvent_0:
   \   0000E0   EA           MOV       A,R2
   \   0000E1   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000E3   500B         JNC       ??zclKE_ProcessEvent_12
   4348            {
   4349              zclKE_ProcessTimerEvt();
   \   0000E5                ; Setup parameters for call to function zclKE_ProcessTimerEvt
   \   0000E5   12....       LCALL     `??zclKE_ProcessTimerEvt::?relay`; Banked call to: zclKE_ProcessTimerEvt
   4350          
   4351              return ( events ^ ZCL_KE_TIMER_EVT );
   \   0000E8   EE           MOV       A,R6
   \   0000E9   6401         XRL       A,#0x1
   \   0000EB   FA           MOV       R2,A
   \   0000EC   EF           MOV       A,R7
   \                     ??zclKE_ProcessEvent_11:
   \   0000ED   FB           MOV       R3,A
   \   0000EE   8004         SJMP      ??zclKE_ProcessEvent_13
   4352            }
   4353          
   4354            // Discard unknown events
   4355            return 0;
   \                     ??zclKE_ProcessEvent_12:
   \   0000F0   7A00         MOV       R2,#0x0
   \   0000F2   7B00         MOV       R3,#0x0
   \                     ??zclKE_ProcessEvent_13:
   \   0000F4   02....       LJMP      ?Subroutine9 & 0xFFFF
   4356          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008                REQUIRE ??Subroutine167_0
   \   000008                ; // Fall through to label ??Subroutine167_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000003   12....       LCALL     `??zclKE_ServerConnLookup::?relay`; Banked call to: zclKE_ServerConnLookup
   \   000006   8B..         MOV       ?V1,R3
   \   000008   A9..         MOV       R1,?V1
   \   00000A   7403         MOV       A,#0x3
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000003   12....       LCALL     `??zclKE_ClientConnLookup::?relay`; Banked call to: zclKE_ClientConnLookup
   \   000006   8B..         MOV       ?V1,R3
   \   000008   A9..         MOV       R1,?V1
   \   00000A   7403         MOV       A,#0x3
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   8882         MOV       DPL,R0
   \   000006   F583         MOV       DPH,A
   \   000008                ; Setup parameters for call to function zclKE_ServerConnLookup
   \   000008                ; Setup parameters for call to function zclKE_ServerConnLookup
   \   000008                ; Setup parameters for call to function zclKE_ClientConnLookup
   \   000008                ; Setup parameters for call to function zclKE_ClientConnLookup
   \   000008   12....       LCALL     ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   00000B   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclKE_ZCL_Options>`:
   \   000000   0008         DW 2048
   \   000002   10           DB 16

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 1}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   01           DB 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   FF           DB 255
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   FF           DB 255
   \   000023   FF           DB 255
   \   000024   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_fffffff0:
   \   000000   F0FFFFFF     DD 4294967280

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_11:
   \   000000   11000000     DD 17

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1f4:
   \   000000   F4010000     DD 500

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ea60:
   \   000000   60EA0000     DD 60000
   4357          
   4358          
   4359          /**************************************************************************************************
   4360          **************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     54   zclKE_ClientConnClose
        0     11   -> zclKE_ConnRelease
        0     13   -> zclKE_NotifyStatus
        0     11   -> zclKE_RestorePollRate
      2     33   zclKE_ClientConnFind
      0     51   zclKE_ClientConnLookup
        0     10   -> zclKE_ClientConnFind
      1     71   zclKE_ClientConnOpen
        0     30   -> AddrMgrExtAddrLookup
        0     30   -> NLME_GetShortAddr
        0     30   -> osal_mem_alloc
        0     30   -> osal_memset
        0     30   -> zclKE_ClientConnFind
        0     32   -> zclKE_NotifyStatus
        0     30   -> zclKE_SetPollRate
      1     57   zclKE_ClientConnTerminate
        0     14   -> zclKE_ClientConnClose
        0     16   -> zclKE_SendTerminate
      0     69   zclKE_ClientHdlCfmKeyDataRsp
        0     41   -> AddrMgrExtAddrLookup
        0     43   -> ZDSecMgrAddLinkKey
        0     44   -> osal_memcmp
        0     41   -> zclKE_ClientConnClose
        0     41   -> zclKE_ClientConnLookup
        0     41   -> zclKE_ClientConnTerminate
        0     43   -> zclKE_GenMAC
        0     41   -> zclKE_ParseCfmKeyDataCmd
      0     46   zclKE_ClientHdlEphDataRsp
        0     17   -> osal_mem_alloc
        0     20   -> osal_memcpy
        0     17   -> zclKE_ClientConnLookup
        0     17   -> zclKE_ClientConnTerminate
        0     21   -> zclKE_ConnSetTimeout
        0     17   -> zclKE_GetField
        0     19   -> zclKE_ParseEphDataCmd
      1     34   zclKE_ClientHdlSpecificCmd
        0     25   -> zclKE_ClientConnClose
        0     25   -> zclKE_ClientConnLookup
        0     25   -> zclKE_ClientConnTerminate
        0     25   -> zclKE_ClientHdlCfmKeyDataRsp
        0     25   -> zclKE_ClientHdlEphDataRsp
        0     25   -> zclKE_ClientProcessInitiateRsp
        0     25   -> zclKE_ParseInitiateCmd
      0     54   zclKE_ClientKeyGenMsg
        0     33   -> zclKE_ClientConnFind
        0     33   -> zclKE_ClientConnTerminate
        0     37   -> zclKE_ConnSetTimeout
        0     33   -> zclKE_GenKeys
        0     35   -> zclKE_GenMAC
        0     35   -> zclKE_SendCfmKeyDataCmd
      1     48   zclKE_ClientProcessInitiateRsp
        0     19   -> osal_mem_alloc
        0     22   -> osal_memcpy
        0     23   -> zclKE_ConnSetTimeout
        0     19   -> zclKE_GetField
        0     19   -> zclKE_InitiateCmdCheckFields
        0     19   -> zclKE_SendEphDataCmd
      0     23   zclKE_ConnRelease
        0     12   -> osal_mem_free
        0     12   -> zclKE_GetField
        0     12   -> zclKE_MemFree
      0     51   zclKE_ConnSetTimeout
        0     12   -> osal_GetSystemClock
        0     12   -> zclKE_StartTimer
      0     50   zclKE_ECDSASign
        0     48   -> ZSE_ECDSASign
        0     48   -> ZSE_ECDSASign283
        0     36   -> osal_mem_alloc
        0     40   -> osal_nv_read
        0     40   -> sspMMOHash
        0     36   -> zclKE_GetField
        0     40   -> zclKE_GetField
        0     36   -> zclKE_MemFree
      2      0   zclKE_ECDSASignGetLen
        2      0   -> zclKE_GetField
      0     41   zclKE_GenEphKeys
        0     22   -> ZSE_ECCGenerateKey
        0     22   -> ZSE_ECCGenerateKey283
        0     14   -> osal_mem_alloc
        0     14   -> zclKE_GetField
      0    114   zclKE_GenKeyBits
        0     28   -> ZMacGetReq
        0     28   -> ZMacSetReq
        0     46   -> ZSE_ECCKeyBitGenerate
        0     46   -> ZSE_ECCKeyBitGenerate283
        0     28   -> osal_mem_alloc
        0     32   -> osal_nv_read
        0     28   -> zclKE_GetField
        0     28   -> zclKE_MemFree
      0    105   zclKE_GenKeys
        0     68   -> osal_mem_alloc
        0     71   -> osal_memcpy
        0     72   -> sspMMOHash
        0     68   -> zclKE_GenKeyBits
        0     68   -> zclKE_GetField
        0     68   -> zclKE_MemFree
      0     74   zclKE_GenMAC
        0     27   -> AddrMgrExtAddrLookup
        0     27   -> NLME_GetExtAddr
        0     31   -> SSP_KeyedHash
        0     29   -> SSP_MemCpyReverse
        0     27   -> osal_mem_alloc
        0     27   -> osal_mem_free
        0     30   -> osal_memcpy
        0     27   -> zclKE_GetField
      0     78   zclKE_GetField
      0     16   zclKE_GetRandom
        0     12   -> SSP_GetTrueRandAES
      0     20   zclKE_HashFunc
        0     16   -> sspMMOHash
      0      0   zclKE_HdlGeneralCmd
      0      9   zclKE_HdlIncoming
        0      9   -> StubAPS_InterPan
        0      9   -> zclKE_ClientHdlSpecificCmd
        0      9   -> zclKE_ServerHdlSpecificCmd
      0     90   zclKE_Init
        0     86   -> ZDO_RegisterForZDOMsg
        0     86   -> afRegister
        0     89   -> osal_memcmp
        0     88   -> osal_nv_item_init
        0     90   -> osal_nv_read
        0     86   -> zcl_registerAttrList
        0     86   -> zcl_registerClusterOptionList
        0     86   -> zcl_registerForMsg
        0     88   -> zcl_registerPlugin
      0     57   zclKE_InitiateCmdCheckCertIssuer
        0     22   -> osal_mem_alloc
        0     25   -> osal_memcmp
        0     26   -> osal_nv_read
        0     22   -> zclKE_GetField
        0     22   -> zclKE_MemFree
      0     53   zclKE_InitiateCmdCheckFields
        0     31   -> AddrMgrExtAddrLookup
        0     34   -> osal_memcmp
        0     34   -> osal_revmemcpy
        0     31   -> zclKE_GetField
        0     31   -> zclKE_InitiateCmdCheckCertIssuer
      0     77   zclKE_MemFree
        0      9   -> osal_mem_free
        0      9   -> osal_memset
      1     44   zclKE_NotifyStatus
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_send
      2     41   zclKE_ParseCfmKeyDataCmd
      0     29   zclKE_ParseEphDataCmd
        0     10   -> zclKE_GetField
      1     35   zclKE_ParseInitiateCmd
      0     18   zclKE_ProcessEvent
        0     18   -> ZDO_ParseEPListRsp
        0     18   -> osal_mem_free
        0     18   -> osal_msg_deallocate
        0     18   -> osal_msg_receive
        0     18   -> zclKE_ClientConnClose
        0     18   -> zclKE_ClientConnFind
        0     18   -> zclKE_ProcessKeyGenMsg
        0     18   -> zclKE_ProcessStartDirectMsg
        0     18   -> zclKE_ProcessStartMsg
        0     18   -> zclKE_ProcessTimerEvt
      0     39   zclKE_ProcessKeyGenMsg
        0     17   -> zclKE_ClientKeyGenMsg
        0     21   -> zclKE_ConnSetTimeout
        0     17   -> zclKE_GenKeys
        0     17   -> zclKE_SendEphDataCmd
        0     17   -> zclKE_ServerConnFind
        0     17   -> zclKE_ServerConnTerminate
      0     41   zclKE_ProcessStartDirectMsg
        0     19   -> zclKE_ClientConnClose
        0     23   -> zclKE_ClientConnOpen
        0     23   -> zclKE_ConnSetTimeout
        0     19   -> zclKE_GenEphKeys
        0     19   -> zclKE_SendInitiateCmd
      0     61   zclKE_ProcessStartMsg
        0     43   -> ZDP_MatchDescReq
        0     35   -> zclKE_ClientConnClose
        0     39   -> zclKE_ClientConnOpen
        0     39   -> zclKE_ConnSetTimeout
      0     49   zclKE_ProcessTimerEvt
        0     31   -> osal_GetSystemClock
        0     31   -> osal_msg_allocate
        0     31   -> osal_msg_send
        0     31   -> zclKE_ClientConnClose
        0     31   -> zclKE_ClientConnTerminate
        0     31   -> zclKE_ServerConnClose
        0     31   -> zclKE_ServerConnTerminate
        0     31   -> zclKE_StartTimer
      0     20   zclKE_RestorePollRate
        0      9   -> NLME_SetPollRate
      0     62   zclKE_SendCfmKeyDataCmd
        0     21   -> zcl_SendCommand
      0     42   zclKE_SendEphDataCmd
        0     14   -> zclKE_GetField
        0     23   -> zcl_SendCommand
      1     48   zclKE_SendInitiateCmd
        0     18   -> osal_mem_alloc
        0     18   -> osal_mem_free
        0     22   -> osal_nv_read
        0     18   -> zclKE_GetField
        0     29   -> zcl_SendCommand
      1     43   zclKE_SendTerminate
        0     27   -> zcl_SendCommand
      2     39   zclKE_ServerConnClose
        2      0   -> zclKE_ConnRelease
        2      0   -> zclKE_RestorePollRate
      0     32   zclKE_ServerConnCreate
        0     14   -> NLME_GetShortAddr
        0     14   -> osal_mem_alloc
        0     14   -> osal_memset
        0     14   -> zclKE_SetPollRate
      2     18   zclKE_ServerConnFind
      0     27   zclKE_ServerConnLookup
        0     10   -> zclKE_ServerConnFind
      1     47   zclKE_ServerConnTerminate
        0     16   -> zclKE_SendTerminate
        0     14   -> zclKE_ServerConnClose
      1     38   zclKE_ServerHdlEphDataReq
        0     17   -> osal_mem_alloc
        0     20   -> osal_memcpy
        0     21   -> zclKE_ConnSetTimeout
        0     17   -> zclKE_GenEphKeys
        0     17   -> zclKE_GetField
        0     19   -> zclKE_ParseEphDataCmd
        0     17   -> zclKE_ServerConnLookup
        0     17   -> zclKE_ServerConnTerminate
      1     35   zclKE_ServerHdlInitiateReq
        0     18   -> zclKE_ParseInitiateCmd
        0     18   -> zclKE_ServerConnCreate
        0     18   -> zclKE_ServerConnFind
        0     18   -> zclKE_ServerConnTerminate
        0     18   -> zclKE_ServerProcessInitiateReq
      1     26   zclKE_ServerHdlSpecificCmd
        0     17   -> zclKE_ParseCfmKeyDataCmd
        0     17   -> zclKE_ServerConnClose
        0     17   -> zclKE_ServerConnLookup
        0     17   -> zclKE_ServerConnTerminate
        0     17   -> zclKE_ServerHdlEphDataReq
        0     17   -> zclKE_ServerHdlInitiateReq
        0     17   -> zclKE_ServerProcessCfmKeyDataReq
      0     59   zclKE_ServerProcessCfmKeyDataReq
        0     39   -> AddrMgrExtAddrLookup
        0     41   -> ZDSecMgrAddLinkKey
        0     42   -> osal_memcmp
        0     41   -> zclKE_GenMAC
        0     41   -> zclKE_SendCfmKeyDataCmd
        0     39   -> zclKE_ServerConnClose
      1     41   zclKE_ServerProcessInitiateReq
        0     19   -> osal_mem_alloc
        0     22   -> osal_memcpy
        0     23   -> zclKE_ConnSetTimeout
        0     19   -> zclKE_GetField
        0     19   -> zclKE_InitiateCmdCheckFields
        0     19   -> zclKE_SendInitiateCmd
      0     39   zclKE_SetPollRate
        0      9   -> NLME_SetPollRate
      1     12   zclKE_Start
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_send
      1     14   zclKE_StartDirect
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_send
      0     51   zclKE_StartTimer
        0     16   -> osal_get_timeoutEx
        0     20   -> osal_start_timerEx


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ?<Constant {0, (zclIncoming_t *)0, (zclKE_Conn
       4  ?<Constant {0, 0, 0, 1}>
       4  ?<Constant {0, 0, 0}>
      37  ?<Constant {255, 255, 255, 255, 255, 255, 255,
      12  ?<Constant {{0}}>
       3  ?<Initializer for zclKE_ZCL_Options>
       2  ??Subroutine146_0
       4  ??Subroutine147_0
       9  ??Subroutine148_0
       8  ??Subroutine149_0
       5  ??Subroutine150_0
       6  ??Subroutine151_0
       6  ??Subroutine152_0
       8  ??Subroutine153_0
       4  ??Subroutine154_0
       6  ??Subroutine155_0
       7  ??Subroutine156_0
       4  ??Subroutine157_0
       5  ??Subroutine158_0
       7  ??Subroutine159_0
       5  ??Subroutine160_0
       2  ??Subroutine161_0
       4  ??Subroutine162_0
       2  ??Subroutine163_0
       4  ??Subroutine164_0
       8  ??Subroutine165_0
       8  ??Subroutine166_0
       6  ??Subroutine167_0
       9  ??Subroutine168_0
       6  ??Subroutine169_0
       6  ??Subroutine170_0
       8  ??Subroutine171_0
       5  ??Subroutine172_0
       7  ??Subroutine173_0
       6  ??Subroutine174_0
       4  ??Subroutine175_0
       6  ??Subroutine176_0
       6  ??Subroutine177_0
      34  ??Subroutine178_0
       4  ??Subroutine179_0
       9  ??Subroutine180_0
       6  ??Subroutine181_0
       9  ??Subroutine182_0
       7  ??Subroutine183_0
       3  ??Subroutine184_0
       5  ??Subroutine185_0
       5  ??Subroutine186_0
       6  ??Subroutine187_0
       6  ??Subroutine188_0
       7  ??Subroutine189_0
      11  ??Subroutine190_0
       8  ??Subroutine191_0
      12  ??Subroutine192_0
       5  ?Subroutine0
       2  ?Subroutine1
       5  ?Subroutine10
      10  ?Subroutine100
      16  ?Subroutine101
      15  ?Subroutine102
       8  ?Subroutine103
      20  ?Subroutine104
       4  ?Subroutine105
       6  ?Subroutine106
       8  ?Subroutine107
       4  ?Subroutine108
       2  ?Subroutine109
       6  ?Subroutine11
       8  ?Subroutine110
      12  ?Subroutine111
       8  ?Subroutine112
       8  ?Subroutine113
      16  ?Subroutine114
      12  ?Subroutine115
       6  ?Subroutine116
       3  ?Subroutine117
       8  ?Subroutine118
       6  ?Subroutine119
       3  ?Subroutine12
       8  ?Subroutine120
       8  ?Subroutine121
       4  ?Subroutine122
       2  ?Subroutine123
       8  ?Subroutine124
       2  ?Subroutine125
       1  ?Subroutine126
       4  ?Subroutine127
       8  ?Subroutine128
       6  ?Subroutine129
       3  ?Subroutine13
       8  ?Subroutine130
       7  ?Subroutine131
       7  ?Subroutine132
       4  ?Subroutine133
       9  ?Subroutine134
       6  ?Subroutine135
       1  ?Subroutine136
       1  ?Subroutine137
       2  ?Subroutine138
       1  ?Subroutine139
      51  ?Subroutine14
       8  ?Subroutine140
       9  ?Subroutine141
       9  ?Subroutine142
      10  ?Subroutine143
       5  ?Subroutine144
       9  ?Subroutine145
       6  ?Subroutine15
       8  ?Subroutine16
      27  ?Subroutine17
       7  ?Subroutine18
      13  ?Subroutine19
       4  ?Subroutine2
      30  ?Subroutine20
       6  ?Subroutine21
       5  ?Subroutine22
      24  ?Subroutine23
      28  ?Subroutine24
      13  ?Subroutine25
      13  ?Subroutine26
       4  ?Subroutine27
       2  ?Subroutine28
      19  ?Subroutine29
       5  ?Subroutine3
      11  ?Subroutine30
       5  ?Subroutine31
      12  ?Subroutine32
      33  ?Subroutine33
      21  ?Subroutine34
      27  ?Subroutine35
       8  ?Subroutine36
       2  ?Subroutine37
      15  ?Subroutine38
      15  ?Subroutine39
       8  ?Subroutine4
       4  ?Subroutine40
      14  ?Subroutine41
      15  ?Subroutine42
       4  ?Subroutine43
      12  ?Subroutine44
       4  ?Subroutine45
      16  ?Subroutine46
      12  ?Subroutine47
       9  ?Subroutine48
       3  ?Subroutine49
       5  ?Subroutine5
       4  ?Subroutine50
       3  ?Subroutine51
       3  ?Subroutine52
       9  ?Subroutine53
       6  ?Subroutine54
      13  ?Subroutine55
      17  ?Subroutine56
       6  ?Subroutine57
       7  ?Subroutine58
       8  ?Subroutine59
       5  ?Subroutine6
       8  ?Subroutine60
      10  ?Subroutine61
       2  ?Subroutine62
       5  ?Subroutine63
       8  ?Subroutine64
      11  ?Subroutine65
      12  ?Subroutine66
       5  ?Subroutine67
      13  ?Subroutine68
       5  ?Subroutine69
       4  ?Subroutine7
       3  ?Subroutine70
      15  ?Subroutine71
      12  ?Subroutine72
      15  ?Subroutine73
       9  ?Subroutine74
       1  ?Subroutine75
      14  ?Subroutine76
      14  ?Subroutine77
       4  ?Subroutine78
       6  ?Subroutine79
       4  ?Subroutine8
       7  ?Subroutine80
       6  ?Subroutine81
       9  ?Subroutine82
       9  ?Subroutine83
       6  ?Subroutine84
       2  ?Subroutine85
      19  ?Subroutine86
      10  ?Subroutine87
       7  ?Subroutine88
       6  ?Subroutine89
       5  ?Subroutine9
       6  ?Subroutine90
      12  ?Subroutine91
      10  ?Subroutine92
      12  ?Subroutine93
      11  ?Subroutine94
      14  ?Subroutine95
      14  ?Subroutine96
       4  ?Subroutine97
       1  ?Subroutine98
      16  ?Subroutine99
       4  __Constant_0
       4  __Constant_11
       4  __Constant_1f4
       4  __Constant_3e8
       4  __Constant_ea60
       4  __Constant_fffffff0
      62  zclKE_ClientConnClose
      30  zclKE_ClientConnFind
       2  zclKE_ClientConnList
      30  zclKE_ClientConnLookup
     304  zclKE_ClientConnOpen
     130  zclKE_ClientConnTerminate
     215  zclKE_ClientHdlCfmKeyDataRsp
     121  zclKE_ClientHdlEphDataRsp
     274  zclKE_ClientHdlSpecificCmd
     153  zclKE_ClientKeyGenMsg
     219  zclKE_ClientProcessInitiateRsp
       2  zclKE_ClusterList
      94  zclKE_ConnRelease
      66  zclKE_ConnSetTimeout
     273  zclKE_ECDSASign
      16  zclKE_ECDSASignGetLen
       7  zclKE_EPDesc
     204  zclKE_GenEphKeys
     407  zclKE_GenKeyBits
     444  zclKE_GenKeys
     372  zclKE_GenMAC
      78  zclKE_GetField
      63  zclKE_GetRandom
      45  zclKE_HashFunc
       3  zclKE_HdlGeneralCmd
      82  zclKE_HdlIncoming
     325  zclKE_Init
     184  zclKE_InitiateCmdCheckCertIssuer
     442  zclKE_InitiateCmdCheckFields
      25  zclKE_MemFree
     119  zclKE_NotifyStatus
      58  zclKE_ParseCfmKeyDataCmd
      79  zclKE_ParseEphDataCmd
     159  zclKE_ParseInitiateCmd
       4  zclKE_PollRateSaved
       1  zclKE_PollRateSet
     247  zclKE_ProcessEvent
     140  zclKE_ProcessKeyGenMsg
     174  zclKE_ProcessStartDirectMsg
     252  zclKE_ProcessStartMsg
     390  zclKE_ProcessTimerEvt
      27  zclKE_RestorePollRate
      99  zclKE_SendCfmKeyDataCmd
      98  zclKE_SendEphDataCmd
     212  zclKE_SendInitiateCmd
     169  zclKE_SendTerminate
      78  zclKE_ServerConnClose
     130  zclKE_ServerConnCreate
      30  zclKE_ServerConnFind
       2  zclKE_ServerConnList
      30  zclKE_ServerConnLookup
     124  zclKE_ServerConnTerminate
     197  zclKE_ServerHdlEphDataReq
     197  zclKE_ServerHdlInitiateReq
     229  zclKE_ServerHdlSpecificCmd
     189  zclKE_ServerProcessCfmKeyDataReq
     151  zclKE_ServerProcessInitiateReq
      42  zclKE_SetPollRate
      12  zclKE_SimpleDesc
      57  zclKE_Start
      77  zclKE_StartDirect
      81  zclKE_StartTimer
       1  zclKE_State
      16  zclKE_Suite1Fields
      16  zclKE_Suite2Fields
       2  zclKE_SupportedSuites
       1  zclKE_TaskID
       8  zclKE_ZCL_AttrList
       3  zclKE_ZCL_Options
     330  -- Other

 
 10 129 bytes in segment BANKED_CODE
    330 bytes in segment BANK_RELAYS
     61 bytes in segment CODE_C
      3 bytes in segment XDATA_I
      3 bytes in segment XDATA_ID
     86 bytes in segment XDATA_ROM_C
     13 bytes in segment XDATA_Z
 
    394 bytes of CODE     memory
     62 bytes of CONST    memory (+ 24 bytes shared)
 10 129 bytes of HUGECODE memory
     16 bytes of XDATA    memory

Errors: none
Warnings: none
