///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.40.1.7397 for 8051              01/May/2021  14:31:34
// Copyright 2004-2021 IAR Systems AB.
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        E:\Texas Instruments\Z-Stack 3.0.2\Components\stack\zcl\zcl.c
//    Command line       =  
//        -f C:\Users\asus\AppData\Local\Temp\EW6A1F.tmp ("E:\Texas
//        Instruments\Z-Stack 3.0.2\Components\stack\zcl\zcl.c" -D
//        BDB_FINDING_BINDING_CAPABILITY_ENABLED=0 -D TC_LINKKEY_JOIN -D
//        HAL_UART_DMA_RX_MAX=128 -D MAXMEMHEAP=2765 -D NWK_MAX_DEVICE_LIST=10
//        -D ZDSECMGR_TC_DEVICE_MAX=30 -D DISABLE_GREENPOWER_BASIC_PROXY -D
//        POWER_SAVING -D FEATURE_SYSTEM_STATS -D MT_GP_CB_FUNC -D ASSERT_RESET
//        -D MAKE_CRC_SHDW -lC "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\List" -lA
//        "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\List"
//        --diag_suppress Pe001,Pa010 -o "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\Obj" -e
//        --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "E:\Texas
//        Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
//        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR |
//        DEVICE_BUILD_ROUTER | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL
//        -DZNP_RUN_WDOG=FALSE -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO
//        -DZIGBEE_FRAGMENTATION -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE
//        -DSAPI_CB_FUNC=FALSE -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT
//        -DNUM_DISC_ATTEMPTS=0 -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC
//        -DMT_SAPI_FUNC -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC
//        -DMT_ZDO_MGMT -DMT_ZDO_EXTENSIONS -DMT_GP_CB_FUNC -DMT_APP_FUNC
//        -DMT_APP_CNF_FUNC) -f "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg" -I
//        "E:\Texas Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\" -I
//        "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\Source\" -I "E:\Texas
//        Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\..\Source\" -I
//        "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "E:\Texas
//        Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Utilities\BootLoad\Source\" -I
//        "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I "E:\Texas
//        Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
//        "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\" -I
//        "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\gp\" -I
//        "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\bdb\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\" -I
//        "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes --no_code_motion)
//    Locale             =  English_USA.1252
//    List file          =  
//        E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\List\zcl.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?V14
        EXTERN ?V15
        EXTERN ?V7
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?B
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_CODE
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?UL_SHR
        EXTERN ?VB
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??zclBuildHdr::?relay`,0203H
        PUBLIC `??zclFindAttrRec::?relay`
        FUNCTION `??zclFindAttrRec::?relay`,0203H
        PUBLIC `??zclFindAttrRecsList::?relay`
        FUNCTION `??zclFindAttrRecsList::?relay`,0203H
        FUNCTION `??zclFindClusterOption::?relay`,0203H
        PUBLIC `??zclGetAttrDataLength::?relay`
        FUNCTION `??zclGetAttrDataLength::?relay`,0203H
        FUNCTION `??zclGetClusterOption::?relay`,0203H
        PUBLIC `??zclGetDataTypeLength::?relay`
        FUNCTION `??zclGetDataTypeLength::?relay`,0203H
        PUBLIC `??zclParseHdr::?relay`
        FUNCTION `??zclParseHdr::?relay`,0203H
        FUNCTION `??zclParseInDefaultRspCmd::?relay`,0203H
        PUBLIC `??zclSerializeData::?relay`
        FUNCTION `??zclSerializeData::?relay`,0203H
        FUNCTION `??zclSetSecurityOption::?relay`,0203H
        FUNCTION `??zcl_DeviceOperational::?relay`,0203H
        PUBLIC `??zcl_HandleExternal::?relay`
        FUNCTION `??zcl_HandleExternal::?relay`,0203H
        PUBLIC `??zcl_Init::?relay`
        FUNCTION `??zcl_Init::?relay`,0203H
        PUBLIC `??zcl_ProcessMessageMSG::?relay`
        FUNCTION `??zcl_ProcessMessageMSG::?relay`,0203H
        PUBLIC `??zcl_SendCommand::?relay`
        FUNCTION `??zcl_SendCommand::?relay`,0203H
        PUBLIC `??zcl_SendDefaultRspCmd::?relay`
        FUNCTION `??zcl_SendDefaultRspCmd::?relay`,0203H
        FUNCTION `??zcl_addExternalFoundationHandler::?relay`,0203H
        PUBLIC `??zcl_event_loop::?relay`
        FUNCTION `??zcl_event_loop::?relay`,0203H
        FUNCTION `??zcl_getExternalFoundationHandler::?relay`,0203H
        PUBLIC `??zcl_getParsedTransSeqNum::?relay`
        FUNCTION `??zcl_getParsedTransSeqNum::?relay`,0203H
        PUBLIC `??zcl_getRawAFMsg::?relay`
        FUNCTION `??zcl_getRawAFMsg::?relay`,0203H
        PUBLIC `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,0203H
        PUBLIC `??zcl_registerClusterOptionList::?relay`
        FUNCTION `??zcl_registerClusterOptionList::?relay`,0203H
        PUBLIC `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,0203H
        PUBLIC `??zcl_registerForMsgExt::?relay`
        FUNCTION `??zcl_registerForMsgExt::?relay`,0203H
        PUBLIC `??zcl_registerPlugin::?relay`
        FUNCTION `??zcl_registerPlugin::?relay`,0203H
        PUBLIC `??zcl_registerReadWriteCB::?relay`
        FUNCTION `??zcl_registerReadWriteCB::?relay`,0203H
        PUBLIC `??zcl_registerValidateAttrData::?relay`
        FUNCTION `??zcl_registerValidateAttrData::?relay`,0203H
        FUNCTION zclBuildHdr,0203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zclFindAttrRec
        FUNCTION zclFindAttrRec,0a1203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC zclFindAttrRecsList
        FUNCTION zclFindAttrRecsList,0203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclFindClusterOption,080203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zclGetAttrDataLength
        FUNCTION zclGetAttrDataLength,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION zclGetClusterOption,0a1203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC zclGetDataTypeLength
        FUNCTION zclGetDataTypeLength,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC zclParseHdr
        FUNCTION zclParseHdr,0a1203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        FUNCTION zclParseInDefaultRspCmd,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC zclSerializeData
        FUNCTION zclSerializeData,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        FUNCTION zclSetSecurityOption,0a1203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        FUNCTION zcl_DeviceOperational,0a1203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC zcl_HandleExternal
        FUNCTION zcl_HandleExternal,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC zcl_InSeqNum
        PUBLIC zcl_Init
        FUNCTION zcl_Init,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zcl_ProcessMessageMSG
        FUNCTION zcl_ProcessMessageMSG,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 40, STACK
        PUBLIC zcl_SendCommand
        FUNCTION zcl_SendCommand,0a1203H
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 39, STACK
        PUBLIC zcl_SendDefaultRspCmd
        FUNCTION zcl_SendDefaultRspCmd,0a1203H
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC zcl_TaskID
        PUBLIC zcl_ValidateAttrDataCB
        FUNCTION zcl_addExternalFoundationHandler,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC zcl_event_loop
        FUNCTION zcl_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        FUNCTION zcl_getExternalFoundationHandler,0203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zcl_getParsedTransSeqNum
        FUNCTION zcl_getParsedTransSeqNum,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zcl_getRawAFMsg
        FUNCTION zcl_getRawAFMsg,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zcl_radius
        PUBLIC zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC zcl_registerClusterOptionList
        FUNCTION zcl_registerClusterOptionList,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC zcl_registerForMsg
        FUNCTION zcl_registerForMsg,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zcl_registerForMsgExt
        FUNCTION zcl_registerForMsgExt,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zcl_registerPlugin
        FUNCTION zcl_registerPlugin,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC zcl_registerReadWriteCB
        FUNCTION zcl_registerReadWriteCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC zcl_registerValidateAttrData
        FUNCTION zcl_registerValidateAttrData,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AF_DataRequest      SYMBOL "AF_DataRequest"
`??AF_DataRequest::?relay` SYMBOL "?relay", AF_DataRequest
StubAPS_InterPan    SYMBOL "StubAPS_InterPan"
`??StubAPS_InterPan::?relay` SYMBOL "?relay", StubAPS_InterPan
afFindEndPointDesc  SYMBOL "afFindEndPointDesc"
`??afFindEndPointDesc::?relay` SYMBOL "?relay", afFindEndPointDesc
osal_buffer_uint32  SYMBOL "osal_buffer_uint32"
`??osal_buffer_uint32::?relay` SYMBOL "?relay", osal_buffer_uint32
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
zclFindAttrRec      SYMBOL "zclFindAttrRec"
`??zclFindAttrRec::?relay` SYMBOL "?relay", zclFindAttrRec
zclFindAttrRecsList SYMBOL "zclFindAttrRecsList"
`??zclFindAttrRecsList::?relay` SYMBOL "?relay", zclFindAttrRecsList
zclGetAttrDataLength SYMBOL "zclGetAttrDataLength"
`??zclGetAttrDataLength::?relay` SYMBOL "?relay", zclGetAttrDataLength
zclGetDataTypeLength SYMBOL "zclGetDataTypeLength"
`??zclGetDataTypeLength::?relay` SYMBOL "?relay", zclGetDataTypeLength
zclParseHdr         SYMBOL "zclParseHdr"
`??zclParseHdr::?relay` SYMBOL "?relay", zclParseHdr
zclSerializeData    SYMBOL "zclSerializeData"
`??zclSerializeData::?relay` SYMBOL "?relay", zclSerializeData
zcl_HandleExternal  SYMBOL "zcl_HandleExternal"
`??zcl_HandleExternal::?relay` SYMBOL "?relay", zcl_HandleExternal
zcl_Init            SYMBOL "zcl_Init"
`??zcl_Init::?relay` SYMBOL "?relay", zcl_Init
zcl_ProcessMessageMSG SYMBOL "zcl_ProcessMessageMSG"
`??zcl_ProcessMessageMSG::?relay` SYMBOL "?relay", zcl_ProcessMessageMSG
zcl_SendCommand     SYMBOL "zcl_SendCommand"
`??zcl_SendCommand::?relay` SYMBOL "?relay", zcl_SendCommand
zcl_SendDefaultRspCmd SYMBOL "zcl_SendDefaultRspCmd"
`??zcl_SendDefaultRspCmd::?relay` SYMBOL "?relay", zcl_SendDefaultRspCmd
zcl_event_loop      SYMBOL "zcl_event_loop"
`??zcl_event_loop::?relay` SYMBOL "?relay", zcl_event_loop
zcl_getParsedTransSeqNum SYMBOL "zcl_getParsedTransSeqNum"
`??zcl_getParsedTransSeqNum::?relay` SYMBOL "?relay", zcl_getParsedTransSeqNum
zcl_getRawAFMsg     SYMBOL "zcl_getRawAFMsg"
`??zcl_getRawAFMsg::?relay` SYMBOL "?relay", zcl_getRawAFMsg
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerClusterOptionList SYMBOL "zcl_registerClusterOptionList"
`??zcl_registerClusterOptionList::?relay` SYMBOL "?relay", zcl_registerClusterOptionList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zcl_registerForMsgExt SYMBOL "zcl_registerForMsgExt"
`??zcl_registerForMsgExt::?relay` SYMBOL "?relay", zcl_registerForMsgExt
zcl_registerPlugin  SYMBOL "zcl_registerPlugin"
`??zcl_registerPlugin::?relay` SYMBOL "?relay", zcl_registerPlugin
zcl_registerReadWriteCB SYMBOL "zcl_registerReadWriteCB"
`??zcl_registerReadWriteCB::?relay` SYMBOL "?relay", zcl_registerReadWriteCB
zcl_registerValidateAttrData SYMBOL "zcl_registerValidateAttrData"
`??zcl_registerValidateAttrData::?relay` SYMBOL "?relay", zcl_registerValidateAttrData

        EXTERN `??AF_DataRequest::?relay`
        FUNCTION `??AF_DataRequest::?relay`,00H
        EXTERN `??StubAPS_InterPan::?relay`
        FUNCTION `??StubAPS_InterPan::?relay`,00H
        EXTERN `??afFindEndPointDesc::?relay`
        FUNCTION `??afFindEndPointDesc::?relay`,00H
        EXTERN `??osal_buffer_uint32::?relay`
        FUNCTION `??osal_buffer_uint32::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APS_Counter
        EXTERN StubAPS_InterPan
        FUNCTION StubAPS_InterPan,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afFindEndPointDesc
        FUNCTION afFindEndPointDesc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_buffer_uint32
        FUNCTION osal_buffer_uint32,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// E:\Texas Instruments\Z-Stack 3.0.2\Components\stack\zcl\zcl.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl.c
//    3   Revised:        $Date: 2015-09-09 11:51:49 -0700 (Wed, 09 Sep 2015) $
//    4   Revision:       $Revision: 44489 $
//    5 
//    6   Description:    This file contains the Zigbee Cluster Library Foundation functions.
//    7 
//    8 
//    9   Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 #include "ZComDef.h"
//   44 #include "AF.h"
//   45 #include "APS.h"
//   46 #include "zcl.h"
//   47 #include "zcl_general.h"
//   48 
//   49 #if defined ( INTER_PAN )
//   50   #include "stub_aps.h"
//   51 #endif
//   52    
//   53 #ifdef BDB_REPORTING
//   54   #include "bdb_Reporting.h"
//   55 #endif
//   56 #include "bdb_interface.h"
//   57 
//   58 #include "zcl_green_power.h"
//   59 
//   60    
//   61 /*********************************************************************
//   62  * MACROS
//   63  */
//   64 /*** Frame Control ***/
//   65 #define zcl_FCType( a )               ( (a) & ZCL_FRAME_CONTROL_TYPE )
//   66 #define zcl_FCManuSpecific( a )       ( (a) & ZCL_FRAME_CONTROL_MANU_SPECIFIC )
//   67 #define zcl_FCDirection( a )          ( (a) & ZCL_FRAME_CONTROL_DIRECTION )
//   68 #define zcl_FCDisableDefaultRsp( a )  ( (a) & ZCL_FRAME_CONTROL_DISABLE_DEFAULT_RSP )
//   69 
//   70 /*** Attribute Access Control ***/
//   71 #define zcl_AccessCtrlRead( a )       ( (a) & ACCESS_CONTROL_READ )
//   72 #define zcl_AccessCtrlWrite( a )      ( (a) & ACCESS_CONTROL_WRITE )
//   73 #define zcl_AccessCtrlCmd( a )        ( (a) & ACCESS_CONTROL_CMD )
//   74 #define zcl_AccessCtrlAuthRead( a )   ( (a) & ACCESS_CONTROL_AUTH_READ )
//   75 #define zcl_AccessCtrlAuthWrite( a )  ( (a) & ACCESS_CONTROL_AUTH_WRITE )
//   76 #define zcl_AccessClient( a )         ( (a) & ACCESS_CLIENT )
//   77 
//   78 #define zclParseCmd( a, b )           zclCmdTable[(a)].pfnParseInProfile( (b) )
//   79 #define zclProcessCmd( a, b )         zclCmdTable[(a)].pfnProcessInProfile( (b) )
//   80 
//   81 #define zcl_DefaultRspCmd( zclHdr )   ( zcl_ProfileCmd( (zclHdr).fc.type )     && \ 
//   82                                         (zclHdr).fc.manuSpecific == 0          && \ 
//   83                                         (zclHdr).commandID == ZCL_CMD_DEFAULT_RSP )
//   84 
//   85 // Commands that have corresponding responses (ZCL_CMD_WRITE_NO_RSP, does not have response, but must not send default response)
//   86 #define CMD_HAS_RSP( cmd )            ( (cmd) == ZCL_CMD_READ                   || \ 
//   87                                         (cmd) == ZCL_CMD_WRITE                  || \ 
//   88                                         (cmd) == ZCL_CMD_WRITE_UNDIVIDED        || \ 
//   89                                         (cmd) == ZCL_CMD_WRITE_NO_RSP           || \ 
//   90                                         (cmd) == ZCL_CMD_CONFIG_REPORT          || \ 
//   91                                         (cmd) == ZCL_CMD_READ_REPORT_CFG        || \ 
//   92                                         (cmd) == ZCL_CMD_DISCOVER_ATTRS         || \ 
//   93                                         (cmd) == ZCL_CMD_DISCOVER_CMDS_RECEIVED || \ 
//   94                                         (cmd) == ZCL_CMD_DISCOVER_CMDS_GEN      || \ 
//   95                                         (cmd) == ZCL_CMD_DISCOVER_ATTRS_EXT     || \ 
//   96                                         (cmd) == ZCL_CMD_DEFAULT_RSP ) // exception
//   97 #define  ZCL_VALID_MIN_HEADER_LEN  3
//   98 
//   99 /*********************************************************************
//  100  * CONSTANTS
//  101  */
//  102 
//  103 /*********************************************************************
//  104  * TYPEDEFS
//  105  */
//  106 typedef struct zclLibPlugin
//  107 {
//  108   struct zclLibPlugin *next;
//  109   uint16              startClusterID;    // starting cluster ID
//  110   uint16              endClusterID;      // ending cluster ID
//  111   zclInHdlr_t         pfnIncomingHdlr;    // function to handle incoming message
//  112 } zclLibPlugin_t;
//  113 
//  114 // Command record list
//  115 typedef struct zclCmdRecsList
//  116 {
//  117   struct zclCmdRecsList *pNext;
//  118   uint8                 endpoint;
//  119   uint8                 numCommands;
//  120   CONST zclCommandRec_t *pCmdRecs;
//  121 } zclCmdRecsList_t;
//  122 
//  123 
//  124 // Cluster option list item
//  125 typedef struct zclClusterOptionList
//  126 {
//  127   struct zclClusterOptionList *next;
//  128   uint8                       endpoint;   // Used to link it into the endpoint descriptor
//  129   uint8                       numOptions; // Number of the following records
//  130   zclOptionRec_t              *options;   // option records
//  131 } zclClusterOptionList;
//  132 
//  133 typedef void *(*zclParseInProfileCmd_t)( zclParseCmd_t *pCmd );
//  134 typedef uint8 (*zclProcessInProfileCmd_t)( zclIncoming_t *pInMsg );
//  135 
//  136 typedef struct
//  137 {
//  138   zclParseInProfileCmd_t   pfnParseInProfile;
//  139   zclProcessInProfileCmd_t pfnProcessInProfile;
//  140 } zclCmdItems_t;
//  141 
//  142 
//  143 // List record for external handler for unhandled ZCL Foundation commands/rsps
//  144 typedef struct zclExternalFoundationHandlerList
//  145 {
//  146     struct zclExternalFoundationHandlerList *next;
//  147     uint8 zcl_ExternalTaskID;
//  148     uint8 zcl_ExternalEndPoint;
//  149 } zclExternalFoundationHandlerList;
//  150 
//  151 
//  152 /*********************************************************************
//  153  * GLOBAL VARIABLES
//  154  */
//  155 
//  156 #if !defined ( ZCL_STANDALONE )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  157   uint8 zcl_TaskID;
zcl_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  158 #endif
//  159 
//  160 // The Application should register its attribute data validation function

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  161 zclValidateAttrData_t zcl_ValidateAttrDataCB = (zclValidateAttrData_t)NULL;
zcl_ValidateAttrDataCB:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  162 
//  163 // ZCL Sequence number
//  164 //uint8 zcl_SeqNum = 0x00;  //Not longer used, refer to bdb_getZCLFrameCounter() in bdb_interface.h

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  165 uint8 zcl_InSeqNum = 0x00;
zcl_InSeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  166 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  167 uint8 zcl_radius = AF_DEFAULT_RADIUS;
zcl_radius:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zcl_radius>`
        REQUIRE __INIT_XDATA_I
//  168 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  169 static uint8 savedZCLTransSeqNum = 0;
savedZCLTransSeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  170 
//  171 /*********************************************************************
//  172  * EXTERNAL VARIABLES
//  173  */
//  174 
//  175 /*********************************************************************
//  176  * EXTERNAL FUNCTIONS
//  177  */
//  178 
//  179 /*********************************************************************
//  180  * LOCAL VARIABLES
//  181  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  182 static zclLibPlugin_t *plugins = (zclLibPlugin_t *)NULL;
plugins:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  183 
//  184 #if defined ( ZCL_DISCOVER )
//  185   static zclCmdRecsList_t *gpCmdList = (zclCmdRecsList_t *)NULL;
//  186 #endif
//  187 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  188 static zclAttrRecsList *attrList = (zclAttrRecsList *)NULL;
attrList:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  189 static zclClusterOptionList *clusterOptionList = (zclClusterOptionList *)NULL;
clusterOptionList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  190 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  191 static afIncomingMSGPacket_t *rawAFMsg = (afIncomingMSGPacket_t *)NULL;
rawAFMsg:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  192 
//  193 #if !defined ( ZCL_STANDALONE )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  194 static zclExternalFoundationHandlerList *externalEndPointHandlerList = (zclExternalFoundationHandlerList *)NULL;
externalEndPointHandlerList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  195 #endif
//  196 
//  197 /*********************************************************************
//  198  * LOCAL FUNCTIONS
//  199  */
//  200 static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData );
//  201 static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr );
//  202 static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID );
//  203 
//  204 #if !defined ( ZCL_STANDALONE )
//  205 static uint8 zcl_addExternalFoundationHandler( uint8 taskId, uint8 endPointId );
//  206 static uint8 zcl_getExternalFoundationHandler( afIncomingMSGPacket_t *pInMsg );
//  207 #endif // !defined ( ZCL_STANDALONE )
//  208 
//  209 #if defined ( ZCL_DISCOVER )
//  210   static zclCmdRecsList_t *zclFindCmdRecsList( uint8 endpoint );
//  211 #endif
//  212 
//  213 zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint );
//  214 static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID );
//  215 static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID );
//  216 static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable );
//  217 
//  218 static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID, uint8 frameType, uint8 cmd, uint16 profileID );
//  219 
//  220 #if defined ( ZCL_READ ) || defined ( ZCL_WRITE )
//  221 static zclReadWriteCB_t zclGetReadWriteCB( uint8 endpoint );
//  222 static zclAuthorizeCB_t zclGetAuthorizeCB( uint8 endpoint );
//  223 #endif // ZCL_READ || ZCL_WRITE
//  224 
//  225 #ifdef ZCL_READ
//  226 ZStatus_t zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr, uint16 *pDataLen );
//  227 static uint16 zclGetAttrDataLengthUsingCB( uint8 endpoint, uint16 clusterID, uint16 attrId );
//  228 static ZStatus_t zclReadAttrDataUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId,
//  229                                          uint8 *pAttrData, uint16 *pDataLen );
//  230 static ZStatus_t zclAuthorizeRead( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr );
//  231 static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd );
//  232 static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg );
//  233 #endif // ZCL_READ
//  234 
//  235 #ifdef ZCL_WRITE
//  236 static ZStatus_t zclWriteAttrData( uint8 endpoint, afAddrType_t *srcAddr,
//  237                                    zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec );
//  238 static ZStatus_t zclWriteAttrDataUsingCB( uint8 endpoint, afAddrType_t *srcAddr,
//  239                                           zclAttrRec_t *pAttr, uint8 *pAttrData );
//  240 static ZStatus_t zclAuthorizeWrite( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr );
//  241 static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd );
//  242 static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg );
//  243 static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg );
//  244 #endif // ZCL_WRITE
//  245 
//  246 #ifdef ZCL_REPORT_CONFIGURING_DEVICE
//  247 static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd );
//  248 static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd );
//  249 #endif
//  250 
//  251 static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd );
//  252 
//  253 #ifdef ZCL_DISCOVER
//  254 static uint8 zclFindNextCmdRec( uint8 endpoint, uint16 clusterID, uint8 commandID, uint8 direction, uint8 *pCmdID, zclCommandRec_t *pCmd );
//  255 static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint8 direction, uint16 *attrId, zclAttrRec_t *pAttr );
//  256 static void *zclParseInDiscCmdsRspCmd( zclParseCmd_t *pCmd );
//  257 static void *zclParseInDiscAttrsRspCmd( zclParseCmd_t *pCmd );
//  258 static void *zclParseInDiscAttrsExtRspCmd( zclParseCmd_t *pCmd );
//  259 static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg );
//  260 static uint8 zclProcessInDiscAttrs( zclIncoming_t *pInMsg );
//  261 static void zclProcessInDiscAttrsCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 attrLenBuf );
//  262 static void zclProcessInDiscAttrsExtCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 attrLenBuf );
//  263 #endif // ZCL_DISCOVER
//  264 
//  265 /*********************************************************************
//  266  * Parse Profile Command Function Table
//  267  */
//  268 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  269 static CONST zclCmdItems_t zclCmdTable[] =
zclCmdTable:
        DATA16
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW `??zclParseInDefaultRspCmd::?relay`
        DW `??zcl_HandleExternal::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
//  270 {
//  271 #ifdef ZCL_READ
//  272   /* ZCL_CMD_READ */                { zclParseInReadCmd,             zclProcessInReadCmd             },
//  273   /* ZCL_CMD_READ_RSP */            { zclParseInReadRspCmd,          zcl_HandleExternal              },
//  274 #else
//  275   /* ZCL_CMD_READ */                { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  276   /* ZCL_CMD_READ_RSP */            { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  277 #endif // ZCL_READ
//  278 
//  279 #ifdef ZCL_WRITE
//  280   /* ZCL_CMD_WRITE */               { zclParseInWriteCmd,            zclProcessInWriteCmd            },
//  281   /* ZCL_CMD_WRITE_UNDIVIDED */     { zclParseInWriteCmd,            zclProcessInWriteUndividedCmd   },
//  282   /* ZCL_CMD_WRITE_RSP */           { zclParseInWriteRspCmd,         zcl_HandleExternal              },
//  283   /* ZCL_CMD_WRITE_NO_RSP */        { zclParseInWriteCmd,            zclProcessInWriteCmd            },
//  284 #else
//  285   /* ZCL_CMD_WRITE */               { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  286   /* ZCL_CMD_WRITE_UNDIVIDED */     { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  287   /* ZCL_CMD_WRITE_RSP */           { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  288   /* ZCL_CMD_WRITE_NO_RSP */        { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  289 #endif // ZCL_WRITE
//  290 
//  291 #ifdef ZCL_REPORTING_DEVICE
//  292     /* ZCL_CMD_CONFIG_REPORT */       { zclParseInConfigReportCmd,     zcl_HandleExternal              },
//  293 #else
//  294     /* ZCL_CMD_CONFIG_REPORT */       { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  295 #endif
//  296 
//  297 #ifdef ZCL_REPORT_CONFIGURING_DEVICE
//  298     /* ZCL_CMD_CONFIG_REPORT_RSP */   { zclParseInConfigReportRspCmd,  zcl_HandleExternal              },
//  299 #else
//  300     /* ZCL_CMD_CONFIG_REPORT_RSP */   { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  301 #endif
//  302 
//  303 #ifdef ZCL_REPORTING_DEVICE
//  304     /* ZCL_CMD_READ_REPORT_CFG */     { zclParseInReadReportCfgCmd,    zcl_HandleExternal              },
//  305 #else
//  306     /* ZCL_CMD_READ_REPORT_CFG */     { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  307 #endif
//  308 
//  309 #ifdef ZCL_REPORT_CONFIGURING_DEVICE
//  310     /* ZCL_CMD_READ_REPORT_CFG_RSP */ { zclParseInReadReportCfgRspCmd, zcl_HandleExternal              },
//  311 #else
//  312     /* ZCL_CMD_READ_REPORT_CFG_RSP */ { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  313 #endif
//  314 
//  315 #ifdef ZCL_REPORT_DESTINATION_DEVICE
//  316     /* ZCL_CMD_REPORT */              { zclParseInReportCmd,           zcl_HandleExternal              },
//  317 #else
//  318     /* ZCL_CMD_REPORT */              { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  319 #endif
//  320 
//  321   /* ZCL_CMD_DEFAULT_RSP */         { zclParseInDefaultRspCmd,       zcl_HandleExternal              },
//  322 
//  323 #ifdef ZCL_DISCOVER
//  324   /* ZCL_CMD_DISCOVER_ATTRS */                { zclParseInDiscAttrsCmd,         zclProcessInDiscAttrs           },
//  325   /* ZCL_CMD_DISCOVER_ATTRS_RSP */            { zclParseInDiscAttrsRspCmd,      zcl_HandleExternal              },
//  326   /* *not supported* READ_ATTRS_STRCT */      { NULL,                           (zclProcessInProfileCmd_t)NULL  },
//  327   /* *not supported* WRITE_ATTRS_STRCT */     { NULL,                           (zclProcessInProfileCmd_t)NULL  },
//  328   /* *not supported* WRITE_ATTRS_STRCT_RSP */ { NULL,                           (zclProcessInProfileCmd_t)NULL  },
//  329   /* ZCL_CMD_DISCOVER_CMDS_RECEIVED */        { zclParseInDiscCmdsCmd,          zclProcessInDiscCmd             },
//  330   /* ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP */    { zclParseInDiscCmdsRspCmd,       zcl_HandleExternal              },
//  331   /* ZCL_CMD_DISCOVER_CMDS_GEN */             { zclParseInDiscCmdsCmd,          zclProcessInDiscCmd             },
//  332   /* ZCL_CMD_DISCOVER_CMDS_GEN_RSP */         { zclParseInDiscCmdsRspCmd,       zcl_HandleExternal              },
//  333   /* ZCL_CMD_DISCOVER_ATTRS_EXT */            { zclParseInDiscAttrsCmd,         zclProcessInDiscAttrs           },
//  334   /* ZCL_CMD_DISCOVER_ATTRS_EXT_RSP */        { zclParseInDiscAttrsExtRspCmd,   zcl_HandleExternal              },
//  335 #else
//  336   /* ZCL_CMD_DISCOVER_ATTRS */                { (zclParseInProfileCmd_t)NULL,    (zclProcessInProfileCmd_t)NULL  },
//  337   /* ZCL_CMD_DISCOVER_ATTRS_RSP */            { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  338   /* *not supported* READ_ATTRS_STRCT */      { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  339   /* *not supported* WRITE_ATTRS_STRCT */     { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  340   /* *not supported* WRITE_ATTRS_STRCT_RSP */ { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  341   /* ZCL_CMD_DISCOVER_CMDS_RECEIVED */        { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  342   /* ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP */    { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  343   /* ZCL_CMD_DISCOVER_CMDS_GEN */             { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  344   /* ZCL_CMD_DISCOVER_CMDS_GEN_RSP */         { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  345   /* ZCL_CMD_DISCOVER_ATTRS_EXT */            { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  346   /* ZCL_CMD_DISCOVER_ATTRS_EXT_RSP */        { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  347 #endif // ZCL_DISCOVER
//  348 };
//  349 
//  350 /*********************************************************************
//  351  * PUBLIC FUNCTIONS
//  352  *********************************************************************/
//  353 
//  354 #if !defined ( ZCL_STANDALONE )
//  355 /*********************************************************************
//  356  * @fn          zcl_Init
//  357  *
//  358  * @brief       Initialization function for the zcl layer.
//  359  *
//  360  * @param       task_id - ZCL task id
//  361  *
//  362  * @return      none
//  363  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  364 void zcl_Init( uint8 task_id )
zcl_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zcl_Init
        CODE
//  365 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  366   zcl_TaskID = task_id;
        MOV       A,R1
        MOV       DPTR,#zcl_TaskID
        MOVX      @DPTR,A
//  367 }
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock0
//  368 #endif
//  369 
//  370 #if !defined ( ZCL_STANDALONE )
//  371 /*********************************************************************
//  372  * @fn          zcl_event_loop
//  373  *
//  374  * @brief       Event Loop Processor for zcl.
//  375  *
//  376  * @param       task_id - task id
//  377  * @param       events - event bitmap
//  378  *
//  379  * @return      unprocessed events
//  380  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  381 uint16 zcl_event_loop( uint8 task_id, uint16 events )
zcl_event_loop:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function zcl_event_loop
        CODE
//  382 {
        FUNCALL zcl_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, zcl_ProcessMessageMSG
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, zcl_getExternalFoundationHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
//  383   uint8 *msgPtr;
//  384 
//  385   (void)task_id;  // Intentionally unreferenced parameter
//  386 
//  387   if ( events & SYS_EVENT_MSG )
        MOV       A,R3
        ANL       A,#0x80
        JZ        ??zcl_event_loop_0
//  388   {
//  389     msgPtr = osal_msg_receive( zcl_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP      ??zcl_event_loop_1
//  390     while ( msgPtr != NULL )
//  391     {
//  392       uint8 dealloc = TRUE;
//  393 
//  394       if ( *msgPtr == AF_INCOMING_MSG_CMD )
//  395       {
//  396         zcl_ProcessMessageMSG( (afIncomingMSGPacket_t *)msgPtr );
??zcl_event_loop_2:
        ; Setup parameters for call to function zcl_ProcessMessageMSG
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??zcl_ProcessMessageMSG::?relay`; Banked call to: zcl_ProcessMessageMSG
//  397       }
//  398       else
//  399       {
//  400         uint8 taskID;
//  401         taskID = zcl_getExternalFoundationHandler( (afIncomingMSGPacket_t *)msgPtr );
//  402 
//  403         if ( taskID != TASK_NO_TASK )
//  404         {
//  405           // send it to another task to process.
//  406           osal_msg_send( taskID, msgPtr );
//  407           dealloc = FALSE;
//  408         }
//  409       }
//  410 
//  411       // Release the memory
//  412       if ( dealloc )
//  413       {
//  414         osal_msg_deallocate( msgPtr );
??zcl_event_loop_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
//  415       }
//  416 
//  417       // Next
//  418       msgPtr = osal_msg_receive( zcl_TaskID );
??zcl_event_loop_1:
        ; Setup parameters for call to function osal_msg_receive
        MOV       DPTR,#zcl_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R6,?V2
        MOV       R7,?V3
        MOV       A,R6
        ORL       A,R7
        JZ        ??zcl_event_loop_4
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        XRL       A,#0x1a
        JZ        ??zcl_event_loop_2
        ; Setup parameters for call to function zcl_getExternalFoundationHandler
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??zcl_getExternalFoundationHandler::?relay`; Banked call to: zcl_getExternalFoundationHandler
        MOV       A,R1
        MOV       R1,A
        MOV       A,#-0x1
        XRL       A,R1
        JZ        ??zcl_event_loop_3
        ; Setup parameters for call to function osal_msg_send
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
        SJMP      ??zcl_event_loop_1
//  419     }
//  420 
//  421     // return unprocessed events
//  422     return (events ^ SYS_EVENT_MSG);
??zcl_event_loop_4:
        MOV       R2,?V0
        MOV       A,?V1
        XRL       A,#0x80
        MOV       R3,A
        SJMP      ??zcl_event_loop_5
//  423   }
//  424 
//  425 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
//  426   if ( events & ZCL_DATABUF_SEND )
//  427   {
//  428     gpNotificationMsg_t *gpNotification = NULL;
//  429     gpCmdPayloadMsg_t *pCmdPayloadMsgCurr = NULL;
//  430     gpd_ID_t gpd_ID;
//  431     uint8 *pgpdid;
//  432     uint8 entry[PROXY_TBL_ENTRY_LEN];
//  433     uint8 appId;
//  434     uint8 nwkSeqNum;
//  435     uint8 apsSecNum;
//  436     uint16 nwkAddr;
//  437     
//  438     gpNotification = gp_GetHeadNotificationMsg( );
//  439     
//  440     if ( gpNotification == NULL )
//  441     {
//  442       return 0;
//  443     }
//  444     
//  445     pCmdPayloadMsgCurr = ( gpCmdPayloadMsg_t* ) gpNotification->pMsg ;
//  446     appId = PROXY_TBL_GET_APPLICTION_ID((uint16)*pCmdPayloadMsgCurr->pMsg);
//  447     
//  448     // To save the NIB nwk sequense number and use the GP alias nwk sequence number
//  449     // for the GP notification
//  450     nwkSeqNum = _NIB.SequenceNum;
//  451     _NIB.SequenceNum = pCmdPayloadMsgCurr->secNum;
//  452     
//  453     // To save the NIB nwk address and use the GP alias nwk address for the GP notification
//  454     nwkAddr = _NIB.nwkDevAddress;
//  455     
//  456     if( appId == GP_OPT_APP_ID_GPD )
//  457     {
//  458       pgpdid = pCmdPayloadMsgCurr->pMsg + sizeof( uint16 );
//  459       
//  460       osal_memcpy( &_NIB.nwkDevAddress, pgpdid, sizeof(uint16) );
//  461       gpd_ID.AppID = GP_OPT_APP_ID_GPD;
//  462       osal_memcpy( &gpd_ID.GPDId.SrcID, pgpdid, sizeof( uint32 ) );
//  463     }
//  464     else if( appId == GP_OPT_APP_ID_IEEE )
//  465     {
//  466       pgpdid = pCmdPayloadMsgCurr->pMsg + Z_EXTADDR_LEN;
//  467       
//  468       osal_revmemcpy( &_NIB.nwkDevAddress,(pCmdPayloadMsgCurr->pMsg + Z_EXTADDR_LEN), sizeof(uint16) );
//  469       
//  470       gpd_ID.AppID = GP_OPT_APP_ID_IEEE;
//  471 
//  472       pgpdid = pCmdPayloadMsgCurr->pMsg + sizeof( uint16 );
//  473       osal_memcpy( gpd_ID.GPDId.GPDExtAddr, pgpdid, Z_EXTADDR_LEN );
//  474     }
//  475     
//  476     gp_getProxyTableByGpId(&gpd_ID, entry, NULL);
//  477 
//  478     if ( PROXY_TBL_GET_ASSIGNED_ALIAS( entry[PROXY_TBL_ENTRY_OPT + 1] ) )
//  479     {
//  480       _NIB.nwkDevAddress = 0;
//  481       osal_memcpy( (uint8*)&_NIB.nwkDevAddress, &entry[PROXY_TBL_ENTRY_ALIAS], sizeof(uint16));
//  482     }
//  483     
//  484     // save aps sequence number
//  485     apsSecNum = APS_Counter;
//  486     APS_Counter = pCmdPayloadMsgCurr->secNum;
//  487     
//  488     // Set nwk radius for zcl frame
//  489     if ( entry[PROXY_TBL_ENTRY_GRP_RAD] != 0xFF)
//  490     {
//  491       zcl_radius =  entry[PROXY_TBL_ENTRY_GRP_RAD];
//  492     }
//  493     
//  494     zcl_SendCommand( GREEN_POWER_INTERNAL_ENDPOINT, &gpNotification->addr, ZCL_CLUSTER_ID_GREEN_POWER,
//  495                           COMMAND_GP_NOTIFICATION, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  496                           TRUE, 0,  bdb_getZCLFrameCounter(), pCmdPayloadMsgCurr->lenght, pCmdPayloadMsgCurr->pMsg );
//  497     
//  498     // restore nwk radius
//  499     zcl_radius = AF_DEFAULT_RADIUS;
//  500     
//  501     // restore aps sequence number
//  502     APS_Counter = apsSecNum;
//  503      
//  504     // Restore the NIB nwk sequence number
//  505     _NIB.SequenceNum = nwkSeqNum;
//  506     
//  507     // Restore the NIB nwk address
//  508     _NIB.nwkDevAddress = nwkAddr;
//  509     
//  510     gp_NotificationMsgClean( gp_GetPHeadNotification ( ) );
//  511     
//  512     if ( gp_GetHeadNotificationMsg ( ) != NULL )
//  513     {
//  514       osal_start_timerEx( zcl_TaskID, ZCL_DATABUF_SEND, 50 );
//  515     }
//  516   }
//  517 #endif
//  518 
//  519   // Discard unknown events
//  520   return 0;
??zcl_event_loop_0:
        MOV       R2,#0x0
        MOV       R3,#0x0
??zcl_event_loop_5:
        LJMP      ??Subroutine53_0 & 0xFFFF
//  521 }
          CFI EndBlock cfiBlock1
//  522 #endif
//  523 
//  524 #if !defined ( ZCL_STANDALONE )
//  525 /*********************************************************************
//  526  * @fn      zcl_registerForMsg
//  527  *
//  528  * @brief   The ZCL is setup to send all incoming Foundation Command/Response
//  529  *          messages that aren't processed to one task (if a task is
//  530  *          registered).
//  531  *
//  532  * @param   taskId - task Id of the Application where commands will be sent to
//  533  *
//  534  * @return  TRUE if task registeration successful, FALSE otherwise
//  535  *********************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  536 uint8 zcl_registerForMsg( uint8 taskId )
zcl_registerForMsg:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function zcl_registerForMsg
        CODE
//  537 {
        FUNCALL zcl_registerForMsg, zcl_addExternalFoundationHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  538   return zcl_addExternalFoundationHandler( taskId, AF_BROADCAST_ENDPOINT );
        ; Setup parameters for call to function zcl_addExternalFoundationHandler
        MOV       R2,#-0x1
        LJMP      ?Subroutine2 & 0xFFFF
//  539 }
          CFI EndBlock cfiBlock2
//  540 
//  541 /*********************************************************************
//  542  * @fn      zcl_registerForMsgExt
//  543  *
//  544  * @brief   This function enables a Task to register to recieve all
//  545  *          incoming Foundation Command/Response messages, for a particular
//  546  *          End Point, that aren't processed by ZCL.
//  547  *
//  548  *          NOTE: Any Task registered for a unique end point will take
//  549  *          priority over any Task registered with the AF_BROADCAST_ENDPOINT
//  550  *          value.  ie. If task A registers for End Point 1, task B registers
//  551  *          for AF_BROADCAST_ENDPOINT,  commands addressed to End Point 1 will be
//  552  *          sent to Task A and NOT Task B.
//  553  *
//  554  * @param   taskId - task Id of the Application where commands will be sent to
//  555  * @param   endPointId - end point Id of interest
//  556  *
//  557  * @return  TRUE if task registeration successful, FALSE otherwise
//  558  *********************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  559 uint8 zcl_registerForMsgExt( uint8 taskId, uint8 endPointId  )
zcl_registerForMsgExt:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function zcl_registerForMsgExt
        CODE
//  560 {
        FUNCALL zcl_registerForMsgExt, zcl_addExternalFoundationHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  561   return ( zcl_addExternalFoundationHandler( taskId, endPointId  ) );
        ; Setup parameters for call to function zcl_addExternalFoundationHandler
        LJMP      ?Subroutine2 & 0xFFFF
//  562 }
          CFI EndBlock cfiBlock3
//  563 
//  564 /*********************************************************************
//  565  * @fn      zcl_addExternalFoundationHandler
//  566  *
//  567  * @brief   This function adds a record to the internal list of external
//  568  *          handlers of unhandled incoming Foundation Command/Response messages.
//  569  *
//  570  * @param   taskId - task Id of the Application where commands will be sent to
//  571  * @param   endPointId - end point Id of interest
//  572  *
//  573  * @return  TRUE if task registeration successful, FALSE otherwise
//  574  *********************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  575 uint8 zcl_addExternalFoundationHandler( uint8 taskId, uint8 endPointId  )
zcl_addExternalFoundationHandler:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function zcl_addExternalFoundationHandler
        CODE
//  576 {
        FUNCALL zcl_addExternalFoundationHandler, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_addExternalFoundationHandler, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
        MOV       A,R2
        MOV       R7,A
//  577   zclExternalFoundationHandlerList *pNewItem;
//  578   zclExternalFoundationHandlerList *pLoop;
//  579   zclExternalFoundationHandlerList *pLoopPrev;
//  580 
//  581   // Fill in the new endpoint registrant list
//  582   pNewItem = zcl_mem_alloc( sizeof( zclExternalFoundationHandlerList ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x4
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
//  583   if ( pNewItem == NULL )
        MOV       A,R2
        ORL       A,R3
        JZ        ??zcl_addExternalFoundationHandler_0
//  584   {
//  585     return ( false );
//  586   }
//  587 
//  588   pNewItem->zcl_ExternalEndPoint = endPointId;
        MOV       A,R7
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
//  589   pNewItem->zcl_ExternalTaskID = taskId;
        MOV       A,R6
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine15 & 0xFFFF
//  590   pNewItem->next = NULL;
??CrossCallReturnLabel_24:
        MOVX      @DPTR,A
//  591 
//  592   // Add to the list
//  593   if ( externalEndPointHandlerList == NULL )
        MOV       DPTR,#externalEndPointHandlerList
        LCALL     ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_117:
        JNZ       ??zcl_addExternalFoundationHandler_1
//  594   {
//  595     externalEndPointHandlerList = pNewItem;
        MOV       DPTR,#externalEndPointHandlerList
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        SJMP      ??zcl_addExternalFoundationHandler_2
//  596   }
//  597   else
//  598   {
//  599     // make sure no one else tried to register for this endpoint
//  600     pLoop = externalEndPointHandlerList;
??zcl_addExternalFoundationHandler_1:
        MOVX      A,@DPTR
        MOV       R1,A
//  601     pLoopPrev = externalEndPointHandlerList;
//  602 
//  603     while ( pLoop != NULL )
//  604     {
//  605       if ( ( pLoop->zcl_ExternalEndPoint ) == endPointId )
??zcl_addExternalFoundationHandler_3:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R7
        JNZ       ??zcl_addExternalFoundationHandler_4
//  606       {
//  607         zcl_mem_free(pNewItem);
        ; Setup parameters for call to function osal_mem_free
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  608         return ( false );
??zcl_addExternalFoundationHandler_0:
        MOV       R1,#0x0
        SJMP      ??zcl_addExternalFoundationHandler_5
//  609       }
//  610       pLoopPrev = pLoop;
??zcl_addExternalFoundationHandler_4:
        MOV       A,R0
        MOV       R4,A
        MOV       A,R1
        MOV       R5,A
//  611       pLoop = pLoop->next;
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ??Subroutine56_0 & 0xFFFF
//  612     }
??CrossCallReturnLabel_112:
        JNZ       ??zcl_addExternalFoundationHandler_3
//  613 
//  614     if ( endPointId == AF_BROADCAST_ENDPOINT )
        MOV       A,#-0x1
        XRL       A,R7
        JNZ       ??zcl_addExternalFoundationHandler_6
//  615     {
//  616       // put new registration at the end of the list
//  617       pLoopPrev->next = pNewItem;
        MOV       DPL,R4
        MOV       DPH,R5
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        LCALL     ?Subroutine15 & 0xFFFF
//  618       pNewItem->next = NULL;
//  619     }
??CrossCallReturnLabel_25:
        SJMP      ??zcl_addExternalFoundationHandler_2
//  620     else
//  621     {
//  622       // put new registration at the front of the list
//  623       zclExternalFoundationHandlerList *temp = externalEndPointHandlerList;
??zcl_addExternalFoundationHandler_6:
        MOV       DPTR,#externalEndPointHandlerList
        LCALL     ?Subroutine33 & 0xFFFF
//  624       externalEndPointHandlerList = pNewItem;
??CrossCallReturnLabel_69:
        MOV       DPTR,#externalEndPointHandlerList
        LCALL     ?Subroutine16 & 0xFFFF
//  625       pNewItem->next = temp;
??CrossCallReturnLabel_26:
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
??zcl_addExternalFoundationHandler_2:
        MOVX      @DPTR,A
//  626     }
//  627   }
//  628 
//  629   return ( true );
        MOV       R1,#0x1
??zcl_addExternalFoundationHandler_5:
        LJMP      ?Subroutine3 & 0xFFFF
//  630 
//  631 }
          CFI EndBlock cfiBlock4

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function zcl_addExternalFoundationHandler
          CFI Conditional ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function zcl_addExternalFoundationHandler
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker7 Using cfiCommon1
          CFI (cfiPicker7) NoFunction
          CFI (cfiPicker7) Picker
        LCALL     ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_142:
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiPicker7
//  632 
//  633 /*********************************************************************
//  634  * @fn      zcl_getExternalFoundationHandler
//  635  *
//  636  * @brief   This function retrieves the Task ID of the task registered
//  637  *          to received unhandled incoming Foundation Command/Response messages
//  638  *          for a particular End Point ID.
//  639  *
//  640  * @param   pInMsg - recevied ZCL command
//  641  *
//  642  * @return  TASK ID of registered task.  If no task is reigistered, it returns
//  643  *          TASK_NO_TASK.
//  644  *********************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  645 static uint8 zcl_getExternalFoundationHandler( afIncomingMSGPacket_t *pInMsg )
zcl_getExternalFoundationHandler:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function zcl_getExternalFoundationHandler
        CODE
//  646 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  647   zclExternalFoundationHandlerList *pLoop;
//  648   uint8 addressedEndPointId = pInMsg->endPoint;
        MOV       A,R2
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R2,A
//  649 
//  650   // make sure no one else tried to register for this endpoint
//  651   pLoop = externalEndPointHandlerList;
        MOV       DPTR,#externalEndPointHandlerList
        SJMP      ??zcl_getExternalFoundationHandler_0
//  652 
//  653   while ( pLoop != NULL )
//  654   {
//  655     if ( ( ( pLoop->zcl_ExternalEndPoint ) == addressedEndPointId ) ||
//  656          ( ( pLoop->zcl_ExternalEndPoint ) == AF_BROADCAST_ENDPOINT ) )
//  657     {
//  658       return ( pLoop->zcl_ExternalTaskID );
//  659     }
//  660     pLoop = pLoop->next;
??zcl_getExternalFoundationHandler_1:
        MOV       DPL,R0
        MOV       DPH,R1
??zcl_getExternalFoundationHandler_0:
        LCALL     ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_113:
        JZ        ??zcl_getExternalFoundationHandler_2
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R2
        JZ        ??zcl_getExternalFoundationHandler_3
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
        JNZ       ??zcl_getExternalFoundationHandler_1
??zcl_getExternalFoundationHandler_3:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        SJMP      ??zcl_getExternalFoundationHandler_4
//  661   }
//  662 
//  663   return ( TASK_NO_TASK );
??zcl_getExternalFoundationHandler_2:
        MOV       R1,#-0x1
??zcl_getExternalFoundationHandler_4:
        LJMP      ?Subroutine0 & 0xFFFF
//  664 }
          CFI EndBlock cfiBlock8
//  665 #endif
//  666 
//  667 #if !defined ( ZCL_STANDALONE )
//  668 /*********************************************************************
//  669  * @fn      zcl_HandleExternal
//  670  *
//  671  * @brief
//  672  *
//  673  * @param   pInMsg - incoming message to process
//  674  *
//  675  * @return  TRUE
//  676  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  677 uint8 zcl_HandleExternal( zclIncoming_t *pInMsg )
zcl_HandleExternal:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function zcl_HandleExternal
        CODE
//  678 {
        FUNCALL zcl_HandleExternal, zcl_getExternalFoundationHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_HandleExternal, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_HandleExternal, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  679   zclIncomingMsg_t *pCmd;
//  680   uint8 taskID;
//  681 
//  682   taskID = zcl_getExternalFoundationHandler( pInMsg->msg );
        ; Setup parameters for call to function zcl_getExternalFoundationHandler
        MOV       DPL,R2
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_127:
        LCALL     `??zcl_getExternalFoundationHandler::?relay`; Banked call to: zcl_getExternalFoundationHandler
        MOV       A,R1
        MOV       ?V0,A
//  683 
//  684   if ( taskID == TASK_NO_TASK )
        MOV       A,#-0x1
        XRL       A,R1
        JNZ       $+5
        LJMP      ??zcl_HandleExternal_0 & 0xFFFF
//  685   {
//  686     return ( TRUE );
//  687   }
//  688 
//  689   pCmd = (zclIncomingMsg_t *)osal_msg_allocate( sizeof ( zclIncomingMsg_t ) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV       R2,#0x19
        MOV       R3,#0x0
        LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
//  690   if ( pCmd != NULL )
        MOV       A,R2
        ORL       A,R3
        JNZ       $+5
        LJMP      ??zcl_HandleExternal_0 & 0xFFFF
//  691   {
//  692     // fill in the message
//  693     pCmd->hdr.event = ZCL_INCOMING_MSG;
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,#0x34
        LCALL     ?Subroutine13 & 0xFFFF
//  694     pCmd->zclHdr    = pInMsg->hdr;
??CrossCallReturnLabel_17:
        INC       DPTR
        INC       DPTR
        MOV       A,R2
        ADD       A,#0x2
        MOV       R4,A
        CLR       A
        ADDC      A,R3
        MOV       R5,A
        MOV       A,#0x6
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  695     pCmd->clusterId = pInMsg->msg->clusterId;
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_68:
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_137:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        LCALL     ?Subroutine14 & 0xFFFF
//  696     pCmd->srcAddr   = pInMsg->msg->srcAddr;
??CrossCallReturnLabel_21:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R2
        ADD       A,#0xa
        MOV       R4,A
        CLR       A
        ADDC      A,R3
        MOV       R5,A
        MOV       A,#0xc
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  697     pCmd->endPoint  = pInMsg->msg->endPoint;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        LCALL     ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_97:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R2
        ADD       A,#0x16
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  698     pCmd->attrCmd   = pInMsg->attrCmd;
        MOV       A,R6
        ADD       A,#0xc
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        LCALL     ??Subroutine58_0 & 0xFFFF
??CrossCallReturnLabel_134:
        MOV       A,R2
        ADD       A,#0x17
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
//  699     
//  700 #ifdef BDB_REPORTING
//  701     if(pCmd->zclHdr.commandID == ZCL_CMD_CONFIG_REPORT)
//  702     {
//  703       bdb_ProcessInConfigReportCmd(pCmd);
//  704       osal_msg_deallocate((uint8*)pCmd);
//  705       return TRUE;          
//  706     }
//  707     if(pCmd->zclHdr.commandID == ZCL_CMD_READ_REPORT_CFG)
//  708     {
//  709       bdb_ProcessInReadReportCfgCmd(pCmd);
//  710       osal_msg_deallocate((uint8*)pCmd);
//  711       return TRUE;
//  712     }
//  713 #endif
//  714     // Application will free the attrCmd buffer
//  715     pInMsg->attrCmd = NULL;
        MOV       DPL,R0
        MOV       DPH,R1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  716 
//  717     /* send message through task message */
//  718     osal_msg_send( taskID, (uint8 *)pCmd );
        ; Setup parameters for call to function osal_msg_send
        MOV       R1,?V0
        LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
//  719   }
//  720 
//  721   return ( TRUE );
??zcl_HandleExternal_0:
        MOV       R1,#0x1
        SJMP      ??Subroutine53_0
//  722 }
          CFI EndBlock cfiBlock9
//  723 #endif
//  724 
//  725 
//  726 /*********************************************************************
//  727  * @fn          zcl_getRawAFMsg
//  728  *
//  729  * @brief       Call to get original unprocessed AF message
//  730  *              (not parsed by ZCL).
//  731  *
//  732  *   NOTE:  This function can only be called during a ZCL callback function
//  733  *          and the calling function must NOT change any data in the message.
//  734  *
//  735  * @param       none
//  736  *
//  737  * @return      pointer to original AF message, NULL if not processing
//  738  *              AF message.
//  739  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  740 afIncomingMSGPacket_t *zcl_getRawAFMsg( void )
zcl_getRawAFMsg:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function zcl_getRawAFMsg
        CODE
//  741 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  742   return ( rawAFMsg );
        MOV       DPTR,#rawAFMsg
        LCALL     ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_124:
        SJMP      ?Subroutine0
//  743 }
          CFI EndBlock cfiBlock10
//  744 
//  745 /*********************************************************************
//  746  * @fn          zcl_getParsedTransSeqNum
//  747  *
//  748  * @brief       Call to the get the transaction sequence number from
//  749  *              the incoming message.
//  750  *
//  751  *   NOTE:  This function can only be called during a ZCL callback function
//  752  *          and the calling function must NOT change any data in the message.
//  753  *
//  754  * @param       none
//  755  *
//  756  * @return      transaction sequence number.
//  757  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  758 uint8 zcl_getParsedTransSeqNum( void )
zcl_getParsedTransSeqNum:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function zcl_getParsedTransSeqNum
        CODE
//  759 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  760   return ( savedZCLTransSeqNum );
        MOV       DPTR,#savedZCLTransSeqNum
        MOVX      A,@DPTR
        MOV       R1,A
          CFI EndBlock cfiBlock11
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  761 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock12
//  762 
//  763 /*********************************************************************
//  764  * @fn          zcl_registerPlugin
//  765  *
//  766  * @brief       Add a Cluster Library handler
//  767  *
//  768  * @param       startClusterID - starting cluster ID
//  769  * @param       endClusterID - ending cluster ID
//  770  * @param       pfnHdlr - function pointer to incoming message handler
//  771  *
//  772  * @return      ZSuccess if OK
//  773  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  774 ZStatus_t zcl_registerPlugin( uint16 startClusterID,
zcl_registerPlugin:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function zcl_registerPlugin
        CODE
//  775           uint16 endClusterID, zclInHdlr_t pfnIncomingHdlr )
//  776 {
        FUNCALL zcl_registerPlugin, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
//  777   zclLibPlugin_t *pNewItem;
//  778   zclLibPlugin_t *pLoop;
//  779 
//  780   // Fill in the new profile list
//  781   pNewItem = zcl_mem_alloc( sizeof( zclLibPlugin_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x8
        LCALL     ?Subroutine39 & 0xFFFF
//  782   if ( pNewItem == NULL )
??CrossCallReturnLabel_81:
        JNZ       ??zcl_registerPlugin_0
//  783   {
//  784     return (ZMemError);
        MOV       R1,#0x10
        SJMP      ??CrossCallReturnLabel_11
//  785   }
//  786 
//  787   // Fill in the plugin record.
//  788   pNewItem->next = (zclLibPlugin_t *)NULL;
??zcl_registerPlugin_0:
        LCALL     ?Subroutine43 & 0xFFFF
//  789   pNewItem->startClusterID = startClusterID;
??CrossCallReturnLabel_90:
        INC       DPTR
        LCALL     ?Subroutine6 & 0xFFFF
//  790   pNewItem->endClusterID = endClusterID;
//  791   pNewItem->pfnIncomingHdlr = pfnIncomingHdlr;
??CrossCallReturnLabel_2:
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_125:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine16 & 0xFFFF
//  792 
//  793   // Find spot in list
//  794   if (  plugins == NULL )
??CrossCallReturnLabel_27:
        MOV       DPTR,#plugins
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_43:
        JNZ       ??zcl_registerPlugin_1
//  795   {
//  796     plugins = pNewItem;
        MOV       DPTR,#plugins
        SJMP      ??zcl_registerPlugin_2
//  797   }
//  798   else
//  799   {
//  800     // Look for end of list
//  801     pLoop = plugins;
//  802     while ( pLoop->next != NULL )
//  803     {
//  804       pLoop = pLoop->next;
??zcl_registerPlugin_3:
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
//  805     }
??zcl_registerPlugin_1:
        LCALL     ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_33:
        JNZ       ??zcl_registerPlugin_3
//  806 
//  807     // Put new item at end of list
//  808     pLoop->next = pNewItem;
//  809   }
??zcl_registerPlugin_2:
        LCALL     ?Subroutine11 & 0xFFFF
//  810 
//  811   return ( ZSuccess );
??CrossCallReturnLabel_11:
        SJMP      ??Subroutine53_0
//  812 }
          CFI EndBlock cfiBlock13

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock14
        REQUIRE ??Subroutine53_0
        ; // Fall through to label ??Subroutine53_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine53_0:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock15
//  813 
//  814 #ifdef ZCL_DISCOVER
//  815 /*********************************************************************
//  816  * @fn          zcl_registerCmdList
//  817  *
//  818  * @brief       Register a Command List with ZCL Foundation
//  819  *
//  820  * @param       endpoint - endpoint the attribute list belongs to
//  821  * @param       newCmdList - array of command records
//  822  *
//  823  * @return      ZSuccess if OK
//  824  */
//  825 ZStatus_t zcl_registerCmdList( uint8 endpoint, CONST uint8 cmdListSize, CONST zclCommandRec_t newCmdList[] )
//  826 {
//  827   zclCmdRecsList_t *pNewItem;
//  828   zclCmdRecsList_t *pLoop;
//  829 
//  830   // Fill in the new profile list
//  831   pNewItem = zcl_mem_alloc( sizeof( zclCmdRecsList_t ) );
//  832   if ( pNewItem == NULL )
//  833   {
//  834     return (ZMemError);
//  835   }
//  836 
//  837   pNewItem->pNext = (zclCmdRecsList_t *)NULL;
//  838   pNewItem->endpoint = endpoint;
//  839   pNewItem->numCommands = cmdListSize;
//  840   pNewItem->pCmdRecs = newCmdList;
//  841 
//  842   // Find spot in list
//  843   if ( gpCmdList == NULL )
//  844   {
//  845     gpCmdList = pNewItem;
//  846   }
//  847   else
//  848   {
//  849     // Look for end of list
//  850     pLoop = gpCmdList;
//  851     while ( pLoop->pNext != NULL )
//  852     {
//  853       pLoop = pLoop->pNext;
//  854     }
//  855 
//  856     // Put new item at end of list
//  857     pLoop->pNext = pNewItem;
//  858   }
//  859 
//  860   return ( ZSuccess );
//  861 }
//  862 #endif  // ZCL_DISCOVER
//  863 
//  864 /*********************************************************************
//  865  * @fn          zcl_registerAttrList
//  866  *
//  867  * @brief       Register an Attribute List with ZCL Foundation
//  868  *
//  869  * @param       endpoint - endpoint the attribute list belongs to
//  870  * @param       numAttr - number of attributes in list
//  871  * @param       newAttrList - array of Attribute records.
//  872  *                            NOTE: THE ATTRIBUTE IDs (FOR A CLUSTER) MUST BE IN
//  873  *                            ASCENDING ORDER. OTHERWISE, THE DISCOVERY RESPONSE
//  874  *                            COMMAND WILL NOT HAVE THE RIGHT ATTRIBUTE INFO
//  875  *
//  876  * @return      ZSuccess if OK
//  877  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  878 ZStatus_t zcl_registerAttrList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t newAttrList[] )
zcl_registerAttrList:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function zcl_registerAttrList
        CODE
//  879 {
        FUNCALL zcl_registerAttrList, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R1
        MOV       ?V1,R2
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
//  880   zclAttrRecsList *pNewItem;
//  881   zclAttrRecsList *pLoop;
//  882 
//  883   // Fill in the new profile list
//  884   pNewItem = zcl_mem_alloc( sizeof( zclAttrRecsList ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0xa
        LCALL     ?Subroutine39 & 0xFFFF
//  885   if ( pNewItem == NULL )
??CrossCallReturnLabel_82:
        JNZ       ??zcl_registerAttrList_0
//  886   {
//  887     return (ZMemError);
        MOV       R1,#0x10
        SJMP      ??CrossCallReturnLabel_12
//  888   }
//  889 
//  890   pNewItem->next = (zclAttrRecsList *)NULL;
??zcl_registerAttrList_0:
        LCALL     ?Subroutine5 & 0xFFFF
//  891   pNewItem->endpoint = endpoint;
//  892   pNewItem->pfnReadWriteCB = NULL;
??CrossCallReturnLabel_0:
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        LCALL     ?Subroutine7 & 0xFFFF
//  893   pNewItem->numAttributes = numAttr;
??CrossCallReturnLabel_4:
        MOV       A,?V1
        LCALL     ?Subroutine7 & 0xFFFF
//  894   pNewItem->attrs = newAttrList;
??CrossCallReturnLabel_5:
        INC       DPTR
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
//  895 
//  896   // Find spot in list
//  897   if ( attrList == NULL )
        MOV       DPTR,#attrList
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_44:
        JNZ       ??zcl_registerAttrList_1
//  898   {
//  899     attrList = pNewItem;
        MOV       DPTR,#attrList
        SJMP      ??zcl_registerAttrList_2
//  900   }
//  901   else
//  902   {
//  903     // Look for end of list
//  904     pLoop = attrList;
//  905     while ( pLoop->next != NULL )
//  906     {
//  907       pLoop = pLoop->next;
??zcl_registerAttrList_3:
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
//  908     }
??zcl_registerAttrList_1:
        LCALL     ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_34:
        JNZ       ??zcl_registerAttrList_3
//  909 
//  910     // Put new item at end of list
//  911     pLoop->next = pNewItem;
//  912   }
??zcl_registerAttrList_2:
        LCALL     ?Subroutine11 & 0xFFFF
//  913 
//  914   return ( ZSuccess );
??CrossCallReturnLabel_12:
        SJMP      ??Subroutine53_0
//  915 }
          CFI EndBlock cfiBlock16

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine39:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_81
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function zcl_registerAttrList
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function zcl_registerClusterOptionList
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker20 Using cfiCommon1
          CFI (cfiPicker20) NoFunction
          CFI (cfiPicker20) Picker
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,?V2
        MOV       R1,?V3
        MOV       A,R2
        ORL       A,R1
        RET
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond21 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_33
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function zcl_registerAttrList
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function zcl_registerClusterOptionList
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-2
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker24 Using cfiCommon1
          CFI (cfiPicker24) NoFunction
          CFI (cfiPicker24) Picker
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,R4
        ORL       A,R5
        MOV       DPL,R2
        MOV       DPH,R3
        RET
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiPicker24

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond25 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function zcl_registerAttrList
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function zcl_registerClusterOptionList
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker28 Using cfiCommon1
          CFI (cfiPicker28) NoFunction
          CFI (cfiPicker28) Picker
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_111:
        MOV       R1,#0x0
        RET
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiPicker28

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond29 Using cfiCommon0
          CFI Function zcl_registerAttrList
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function zcl_registerAttrList
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker31 Using cfiCommon1
          CFI (cfiPicker31) NoFunction
          CFI (cfiPicker31) Picker
        LCALL     ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_92:
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiPicker31
//  916 
//  917 /*********************************************************************
//  918  * @fn          zcl_registerClusterOptionList
//  919  *
//  920  * @brief       Register a Cluster Option List with ZCL Foundation
//  921  *
//  922  * @param       endpoint - endpoint the option list belongs to
//  923  * @param       numOption - number of options in list
//  924  * @param       optionList - array of cluster option records.
//  925  *
//  926  *              NOTE: This API should be called to enable 'Application
//  927  *                    Link Key' security and/or 'APS ACK' for a specific
//  928  *                    Cluster. The 'Application Link Key' is discarded
//  929  *                    if security isn't enabled on the device.
//  930  *                    The default behavior is 'Network Key' when security
//  931  *                    is enabled and no 'APS ACK' for the ZCL messages.
//  932  *
//  933  * @return      ZSuccess if OK
//  934  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  935 ZStatus_t zcl_registerClusterOptionList( uint8 endpoint, uint8 numOption, zclOptionRec_t optionList[] )
zcl_registerClusterOptionList:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI Function zcl_registerClusterOptionList
        CODE
//  936 {
        FUNCALL zcl_registerClusterOptionList, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R1
        MOV       ?V1,R2
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
//  937   zclClusterOptionList *pNewItem;
//  938   zclClusterOptionList *pLoop;
//  939 
//  940   // Fill in the new profile list
//  941   pNewItem = zcl_mem_alloc( sizeof( zclClusterOptionList ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x6
        LCALL     ?Subroutine39 & 0xFFFF
//  942   if ( pNewItem == NULL )
??CrossCallReturnLabel_83:
        JNZ       ??zcl_registerClusterOptionList_0
//  943   {
//  944     return (ZMemError);
        MOV       R1,#0x10
        SJMP      ??CrossCallReturnLabel_13
//  945   }
//  946 
//  947   pNewItem->next = (zclClusterOptionList *)NULL;
??zcl_registerClusterOptionList_0:
        LCALL     ?Subroutine5 & 0xFFFF
//  948   pNewItem->endpoint = endpoint;
//  949   pNewItem->numOptions = numOption;
??CrossCallReturnLabel_1:
        LCALL     ?Subroutine6 & 0xFFFF
//  950   pNewItem->options = optionList;
//  951 
//  952   // Find spot in list
//  953   if ( clusterOptionList == NULL )
??CrossCallReturnLabel_3:
        MOV       DPTR,#clusterOptionList
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_45:
        JNZ       ??zcl_registerClusterOptionList_1
//  954   {
//  955     clusterOptionList = pNewItem;
        MOV       DPTR,#clusterOptionList
        SJMP      ??zcl_registerClusterOptionList_2
//  956   }
//  957   else
//  958   {
//  959     // Look for end of list
//  960     pLoop = clusterOptionList;
//  961     while ( pLoop->next != NULL )
//  962     {
//  963       pLoop = pLoop->next;
??zcl_registerClusterOptionList_3:
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
//  964     }
??zcl_registerClusterOptionList_1:
        LCALL     ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_35:
        JNZ       ??zcl_registerClusterOptionList_3
//  965 
//  966     // Put new item at end of list
//  967     pLoop->next = pNewItem;
//  968   }
??zcl_registerClusterOptionList_2:
        LCALL     ?Subroutine11 & 0xFFFF
//  969 
//  970   return ( ZSuccess );
??CrossCallReturnLabel_13:
        LJMP      ??Subroutine53_0 & 0xFFFF
//  971 }
          CFI EndBlock cfiBlock32

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond33 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function zcl_registerAttrList
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function zcl_registerClusterOptionList
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function zcl_ProcessMessageMSG
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function zclFindAttrRecsList
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond37) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond37) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond37) CFA_SP SP+-7
          CFI Block cfiPicker38 Using cfiCommon1
          CFI (cfiPicker38) NoFunction
          CFI (cfiPicker38) Picker
        LCALL     ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_129:
        MOV       A,R2
        ORL       A,R3
        RET
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiPicker38

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond39 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function zcl_registerClusterOptionList
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker41 Using cfiCommon1
          CFI (cfiPicker41) NoFunction
          CFI (cfiPicker41) Picker
        MOV       A,?V1
        LCALL     ?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_104:
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiPicker41

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond42 Using cfiCommon0
          CFI Function zcl_registerAttrList
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function zcl_registerClusterOptionList
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-2
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker44 Using cfiCommon1
          CFI (cfiPicker44) NoFunction
          CFI (cfiPicker44) Picker
        LCALL     ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_91:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiPicker44

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine43:
          CFI Block cfiCond45 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_90
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function zcl_registerAttrList
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_0
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-4
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function zcl_registerClusterOptionList
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_1
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-4
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker48 Using cfiCommon1
          CFI (cfiPicker48) NoFunction
          CFI (cfiPicker48) Picker
        MOV       DPL,R2
        MOV       DPH,R3
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        LCALL     ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_143:
        INC       DPTR
        INC       DPTR
        MOV       A,?V0
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiPicker48
//  972 
//  973 /*********************************************************************
//  974  * @fn          zcl_registerValidateAttrData
//  975  *
//  976  * @brief       Add a validation function for attribute data
//  977  *
//  978  * @param       pfnValidateAttrData - function pointer to validate routine
//  979  *
//  980  * @return      ZSuccess if OK
//  981  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  982 ZStatus_t zcl_registerValidateAttrData( zclValidateAttrData_t pfnValidateAttrData )
zcl_registerValidateAttrData:
          CFI Block cfiBlock49 Using cfiCommon0
          CFI Function zcl_registerValidateAttrData
        CODE
//  983 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  984   zcl_ValidateAttrDataCB = pfnValidateAttrData;
        MOV       DPTR,#zcl_ValidateAttrDataCB
        LCALL     ?Subroutine16 & 0xFFFF
//  985 
//  986   return ( ZSuccess );
??CrossCallReturnLabel_28:
        MOV       R1,#0x0
        LJMP      ?Subroutine0 & 0xFFFF
//  987 }
          CFI EndBlock cfiBlock49

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond50 Using cfiCommon0
          CFI Function zcl_addExternalFoundationHandler
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function zcl_registerPlugin
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function zcl_registerValidateAttrData
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond52) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond52) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond52) CFA_SP SP+-7
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function zcl_ProcessMessageMSG
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-2
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function zcl_ProcessMessageMSG
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-2
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function zcl_ProcessMessageMSG
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+-2
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function zcl_ProcessMessageMSG
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-2
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker57 Using cfiCommon1
          CFI (cfiPicker57) NoFunction
          CFI (cfiPicker57) Picker
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiPicker57
//  988 
//  989 /*********************************************************************
//  990  * @fn          zcl_registerReadWriteCB
//  991  *
//  992  * @brief       Register the application's callback function to read/write
//  993  *              attribute data, and authorize read/write operation.
//  994  *
//  995  *              Note: The pfnReadWriteCB callback function is only required
//  996  *                    when the attribute data format is unknown to ZCL. The
//  997  *                    callback function gets called when the pointer 'dataPtr'
//  998  *                    to the attribute value is NULL in the attribute database
//  999  *                    registered with the ZCL.
// 1000  *
// 1001  *              Note: The pfnAuthorizeCB callback function is only required
// 1002  *                    when the Read/Write operation on an attribute requires
// 1003  *                    authorization (i.e., attributes with ACCESS_CONTROL_AUTH_READ
// 1004  *                    or ACCESS_CONTROL_AUTH_WRITE access permissions).
// 1005  *
// 1006  * @param       endpoint - application's endpoint
// 1007  * @param       pfnReadWriteCB - function pointer to read/write routine
// 1008  * @param       pfnAuthorizeCB - function pointer to authorize read/write operation
// 1009  *
// 1010  * @return      ZSuccess if successful. ZFailure, otherwise.
// 1011  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1012 ZStatus_t zcl_registerReadWriteCB( uint8 endpoint, zclReadWriteCB_t pfnReadWriteCB,
zcl_registerReadWriteCB:
          CFI Block cfiBlock58 Using cfiCommon0
          CFI Function zcl_registerReadWriteCB
        CODE
// 1013                                    zclAuthorizeCB_t pfnAuthorizeCB )
// 1014 {
        FUNCALL zcl_registerReadWriteCB, zclFindAttrRecsList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
// 1015   zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
        ; Setup parameters for call to function zclFindAttrRecsList
        LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
        MOV       ?V5,R3
        MOV       R1,?V5
// 1016 
// 1017   if ( pRec != NULL )
        MOV       A,R2
        ORL       A,R1
        JZ        ??zcl_registerReadWriteCB_0
// 1018   {
// 1019     pRec->pfnReadWriteCB = pfnReadWriteCB;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        LCALL     ?Subroutine9 & 0xFFFF
// 1020     pRec->pfnAuthorizeCB = pfnAuthorizeCB;
??CrossCallReturnLabel_9:
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
// 1021 
// 1022     return ( ZSuccess );
        MOV       R1,#0x0
        SJMP      ??zcl_registerReadWriteCB_1
// 1023   }
// 1024 
// 1025   return ( ZFailure );
??zcl_registerReadWriteCB_0:
        MOV       R1,#0x1
??zcl_registerReadWriteCB_1:
          CFI EndBlock cfiBlock58
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4
// 1026 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock59 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock59
// 1027 
// 1028 /*********************************************************************
// 1029  * @fn      zcl_DeviceOperational
// 1030  *
// 1031  * @brief   Used to see whether or not the device can send or respond
// 1032  *          to application level commands.
// 1033  *
// 1034  * @param   srcEP - source endpoint
// 1035  * @param   clusterID - cluster ID
// 1036  * @param   frameType - command type
// 1037  * @param   cmd - command ID
// 1038  *
// 1039  * @return  TRUE if device is operational, FALSE otherwise
// 1040  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1041 static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID,
zcl_DeviceOperational:
          CFI Block cfiBlock60 Using cfiCommon0
          CFI Function zcl_DeviceOperational
        CODE
// 1042                                     uint8 frameType, uint8 cmd, uint16 profileID )
// 1043 {
        FUNCALL zcl_DeviceOperational, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 8
        MOV       A,#-0x8
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R1
        MOV       R6,A
        MOV       A,R4
// 1044   zclAttrRec_t attrRec;
// 1045   uint8 deviceEnabled = DEVICE_ENABLED; // default value
// 1046 
// 1047   (void)profileID;  // Intentionally unreferenced parameter
// 1048 
// 1049   // If the device is Disabled (DeviceEnabled attribute is set to Disabled), it
// 1050   // cannot send or respond to application level commands, other than commands
// 1051   // to read or write attributes. Note that the Identify cluster cannot be
// 1052   // disabled, and remains functional regardless of this setting.
// 1053   if ( zcl_ProfileCmd( frameType ) && cmd <= ZCL_CMD_WRITE_NO_RSP )
        JNZ       ??zcl_DeviceOperational_0
        MOV       A,R5
        CLR       C
        SUBB      A,#0x6
        JC        ??zcl_DeviceOperational_1
// 1054   {
// 1055     return ( TRUE );
// 1056   }
// 1057 
// 1058   if ( clusterID == ZCL_CLUSTER_ID_GEN_IDENTIFY )
??zcl_DeviceOperational_0:
        MOV       A,#0x3
        XRL       A,R2
        ORL       A,R3
        JNZ       ??zcl_DeviceOperational_2
// 1059   {
// 1060     return ( TRUE );
??zcl_DeviceOperational_1:
        MOV       R1,#0x1
        MOV       A,#0x8
        LJMP      ?Subroutine1 & 0xFFFF
// 1061   }
// 1062 
// 1063   // Is device enabled?
// 1064   if ( zclFindAttrRec( srcEP, ZCL_CLUSTER_ID_GEN_BASIC,
// 1065                        ATTRID_BASIC_DEVICE_ENABLED, &attrRec ) )
??zcl_DeviceOperational_2:
        ; Setup parameters for call to function zclFindAttrRec
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R4,#0x12
        MOV       R5,#0x0
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       A,R6
        MOV       R1,A
        LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        SJMP      ??zcl_DeviceOperational_1
// 1066   {
// 1067 #ifdef ZCL_READ
// 1068     zclReadAttrData( &deviceEnabled, &attrRec, NULL );
// 1069 #endif
// 1070   }
// 1071 
// 1072   return ( deviceEnabled == DEVICE_ENABLED ? TRUE : FALSE );
// 1073 }
          CFI EndBlock cfiBlock60
// 1074 
// 1075 /*********************************************************************
// 1076  * @fn      zcl_SendCommand
// 1077  *
// 1078  * @brief   Used to send Profile and Cluster Specific Command messages.
// 1079  *
// 1080  *          NOTE: The calling application is responsible for incrementing
// 1081  *                the Sequence Number.
// 1082  *
// 1083  * @param   srcEp - source endpoint
// 1084  * @param   destAddr - destination address
// 1085  * @param   clusterID - cluster ID
// 1086  * @param   cmd - command ID
// 1087  * @param   specific - whether the command is Cluster Specific
// 1088  * @param   direction - client/server direction of the command
// 1089  * @param   disableDefaultRsp - disable Default Response command
// 1090  * @param   manuCode - manufacturer code for proprietary extensions to a profile
// 1091  * @param   seqNumber - identification number for the transaction
// 1092  * @param   cmdFormatLen - length of the command to be sent
// 1093  * @param   cmdFormat - command to be sent
// 1094  *
// 1095  * @return  ZSuccess if OK
// 1096  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1097 ZStatus_t zcl_SendCommand( uint8 srcEP, afAddrType_t *destAddr,
zcl_SendCommand:
          CFI Block cfiBlock61 Using cfiCommon0
          CFI Function zcl_SendCommand
        CODE
// 1098                            uint16 clusterID, uint8 cmd, uint8 specific, uint8 direction,
// 1099                            uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum,
// 1100                            uint16 cmdFormatLen, uint8 *cmdFormat )
// 1101 {
        FUNCALL zcl_SendCommand, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, StubAPS_InterPan
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, zclGetClusterOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, zcl_DeviceOperational
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, zclBuildHdr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV       A,#-0x18
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 6
        MOV       A,#-0x6
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       ?V3,R1
        MOV       ?V14,R2
        MOV       ?V15,R3
        MOV       ?V0,R4
        MOV       ?V1,R5
// 1102   endPointDesc_t *epDesc;
// 1103   zclFrameHdr_t hdr;
// 1104   uint8 *msgBuf;
// 1105   uint16 msgLen;
// 1106   uint8 *pBuf;
// 1107   uint8 options;
// 1108   ZStatus_t status;
// 1109 
// 1110   epDesc = afFindEndPointDesc( srcEP );
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
        MOV       ?V12,R2
        MOV       ?V13,R3
// 1111   if ( epDesc == NULL )
        MOV       A,R2
        ORL       A,R3
        JNZ       ??zcl_SendCommand_0
// 1112   {
// 1113     return ( ZInvalidParameter ); // EMBEDDED RETURN
        MOV       R1,#0x2
        LJMP      ??zcl_SendCommand_1 & 0xFFFF
// 1114   }
// 1115 
// 1116 #if defined ( INTER_PAN )
// 1117   if ( StubAPS_InterPan( destAddr->panId, destAddr->endPoint ) )
??zcl_SendCommand_0:
        ; Setup parameters for call to function StubAPS_InterPan
        MOV       DPL,?V14
        MOV       DPH,?V15
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,?V14
        MOV       DPH,?V15
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_73:
        JZ        ??zcl_SendCommand_2
// 1118   {
// 1119     options = AF_TX_OPTIONS_NONE;
        MOV       ?V2,#0x0
        SJMP      ??zcl_SendCommand_3
// 1120   }
// 1121   else
// 1122 #endif
// 1123   {
// 1124     options = zclGetClusterOption( srcEP, clusterID );
??zcl_SendCommand_2:
        ; Setup parameters for call to function zclGetClusterOption
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R1,?V3
        LCALL     `??zclGetClusterOption::?relay`; Banked call to: zclGetClusterOption
        MOV       A,R1
        MOV       ?V2,A
// 1125 
// 1126     // The cluster might not have been defined to use security but if this message
// 1127     // is in response to another message that was using APS security this message
// 1128     // will be sent with APS security
// 1129     if ( !( options & AF_EN_SECURITY ) )
        MOV       C,0xE0 /* A   */.6
        JC        ??zcl_SendCommand_3
// 1130     {
// 1131       afIncomingMSGPacket_t *origPkt = zcl_getRawAFMsg();
        MOV       DPTR,#rawAFMsg
        LCALL     ??Subroutine56_0 & 0xFFFF
// 1132 
// 1133       if ( ( origPkt != NULL ) && ( origPkt->SecurityUse == TRUE ) )
??CrossCallReturnLabel_114:
        JZ        ??zcl_SendCommand_3
        MOV       A,R0
        ADD       A,#0x19
        MOV       DPL,A
        CLR       A
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??zcl_SendCommand_3
// 1134       {
// 1135         options |= AF_EN_SECURITY;
        MOV       A,?V2
        SETB      0xE0 /* A   */.6
        MOV       ?V2,A
// 1136       }
// 1137     }
// 1138   }
// 1139 
// 1140   zcl_memset( &hdr, 0, sizeof( zclFrameHdr_t ) );
??zcl_SendCommand_3:
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x6
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 1141 
// 1142   // Not Profile wide command (like READ, WRITE)
// 1143   if ( specific )
        MOV       A,#0x1f
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_53:
        JZ        ??zcl_SendCommand_4
// 1144   {
// 1145     hdr.fc.type = ZCL_FRAME_TYPE_SPECIFIC_CMD;
        MOVX      A,@DPTR
        ANL       A,#0xfc
        MOVX      @DPTR,A
        MOVX      A,@DPTR
        ORL       A,#0x1
        SJMP      ??zcl_SendCommand_5
// 1146   }
// 1147   else
// 1148   {
// 1149     hdr.fc.type = ZCL_FRAME_TYPE_PROFILE_CMD;
??zcl_SendCommand_4:
        MOVX      A,@DPTR
        ANL       A,#0xfc
??zcl_SendCommand_5:
        MOVX      @DPTR,A
// 1150   }
// 1151 
// 1152   if ( ( epDesc->simpleDesc == NULL ) ||
// 1153        ( zcl_DeviceOperational( srcEP, clusterID, hdr.fc.type,
// 1154                                 cmd, epDesc->simpleDesc->AppProfId ) == FALSE ) )
        MOV       DPL,?V12
        MOV       DPH,?V13
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine55_0 & 0xFFFF
??CrossCallReturnLabel_120:
        JZ        ??zcl_SendCommand_6
        MOV       A,#0x1e
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R6,A
        ; Setup parameters for call to function zcl_DeviceOperational
        MOV       DPL,?V12
        MOV       DPH,?V13
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,R6
        MOV       R5,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ANL       A,#0x3
        MOV       R4,A
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R1,?V3
        LCALL     `??zcl_DeviceOperational::?relay`; Banked call to: zcl_DeviceOperational
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R1
        JNZ       ??zcl_SendCommand_7
// 1155   {
// 1156     return ( ZFailure ); // EMBEDDED RETURN
??zcl_SendCommand_6:
        MOV       R1,#0x1
        LJMP      ??zcl_SendCommand_1 & 0xFFFF
// 1157   }
??zcl_SendCommand_7:
        MOV       A,#0x22
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine56_0 & 0xFFFF
// 1158 
// 1159   // Fill in the Maufacturer Code
// 1160   if ( manuCode != 0 )
??CrossCallReturnLabel_115:
        JZ        ??CrossCallReturnLabel_107
// 1161   {
// 1162     hdr.fc.manuSpecific = 1;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        ORL       A,#0x4
        MOVX      @DPTR,A
// 1163     hdr.manuCode = manuCode;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine45 & 0xFFFF
// 1164   }
// 1165 
// 1166   // Set the Command Direction
// 1167   if ( direction )
??CrossCallReturnLabel_107:
        MOV       A,#0x20
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_54:
        JZ        ??zcl_SendCommand_8
// 1168   {
// 1169     hdr.fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
        MOVX      A,@DPTR
        ORL       A,#0x8
        SJMP      ??zcl_SendCommand_9
// 1170   }
// 1171   else
// 1172   {
// 1173     hdr.fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
??zcl_SendCommand_8:
        MOVX      A,@DPTR
        ANL       A,#0xf7
??zcl_SendCommand_9:
        MOVX      @DPTR,A
// 1174   }
// 1175 
// 1176   // Set the Disable Default Response field
// 1177   if ( disableDefaultRsp )
        MOV       A,#0x21
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_55:
        JZ        ??zcl_SendCommand_10
// 1178   {
// 1179     hdr.fc.disableDefaultRsp = 1;
        MOVX      A,@DPTR
        ORL       A,#0x10
        SJMP      ??zcl_SendCommand_11
// 1180   }
// 1181   else
// 1182   {
// 1183     hdr.fc.disableDefaultRsp = 0;
??zcl_SendCommand_10:
        MOVX      A,@DPTR
        ANL       A,#0xef
??zcl_SendCommand_11:
        MOVX      @DPTR,A
// 1184   }
// 1185 
// 1186   // Fill in the Transaction Sequence Number
// 1187   hdr.transSeqNum = seqNum;
        MOV       A,#0x24
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1188 
// 1189   // Fill in the command
// 1190   hdr.commandID = cmd;
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R6
        MOVX      @DPTR,A
// 1191 
// 1192   // calculate the needed buffer size
// 1193   msgLen = zclCalcHdrSize( &hdr );
        MOV       R0,#0x3
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        ANL       A,#0x4
        JZ        ??zcl_SendCommand_12
        MOV       R0,#0x5
??zcl_SendCommand_12:
        MOV       A,#0x25
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V10,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V11,A
// 1194   msgLen += cmdFormatLen;
        MOV       A,R0
        ADD       A,?V10
        MOV       R6,A
        CLR       A
        ADDC      A,?V11
        MOV       R7,A
// 1195 
// 1196   // Allocate the buffer needed
// 1197   msgBuf = zcl_mem_alloc( msgLen );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V8,R2
        MOV       ?V9,R3
// 1198   if ( msgBuf != NULL )
        MOV       A,R2
        ORL       A,R3
        JZ        ??zcl_SendCommand_13
// 1199   {
// 1200     // Fill in the ZCL Header
// 1201     pBuf = zclBuildHdr( &hdr, msgBuf );
        ; Setup parameters for call to function zclBuildHdr
        MOV       R4,?V8
        MOV       R5,?V9
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??zclBuildHdr::?relay`; Banked call to: zclBuildHdr
// 1202 
// 1203     // Fill in the command frame
// 1204     zcl_memcpy( pBuf, cmdFormat, cmdFormatLen );
        ; Setup parameters for call to function osal_memcpy
        MOV       A,#0x27
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V5,A
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       R4,?V10
        MOV       R5,?V11
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
// 1205 
// 1206     status = AF_DataRequest( destAddr, epDesc, clusterID, msgLen, msgBuf,
// 1207                              &APS_Counter, options, zcl_radius );
        ; Setup parameters for call to function AF_DataRequest
        MOV       DPTR,#zcl_radius
        MOVX      A,@DPTR
        MOV       ?V4,A
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       ?V4,#APS_Counter & 0xff
        MOV       ?V5,#(APS_Counter >> 8) & 0xff
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       ?V4,R6
        MOV       ?V5,R7
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 37)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV       R1,?V2
        MOV       R4,?V12
        MOV       R5,?V13
        MOV       R2,?V14
        MOV       R3,?V15
        LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R1
        MOV       R6,A
// 1208     zcl_mem_free ( msgBuf );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V8
        MOV       R3,?V9
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??zcl_SendCommand_14
// 1209   }
// 1210   else
// 1211   {
// 1212     status = ZMemError;
??zcl_SendCommand_13:
        MOV       R6,#0x10
// 1213   }
// 1214 
// 1215   return ( status );
??zcl_SendCommand_14:
        MOV       A,R6
        MOV       R1,A
??zcl_SendCommand_1:
        MOV       A,#0x6
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R7,#0x10
        LJMP      ?BANKED_LEAVE_XDATA
// 1216 }
          CFI EndBlock cfiBlock61

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine45:
          CFI Block cfiCond62 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function zcl_registerAttrList
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_12
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+-4
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function zcl_registerClusterOptionList
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_13
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-4
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function zcl_SendCommand
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond65) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond65) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond65) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-2
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function zcl_ProcessMessageMSG
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+-2
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function zcl_ProcessMessageMSG
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+-2
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function zcl_ProcessMessageMSG
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-2
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker69 Using cfiCommon1
          CFI (cfiPicker69) NoFunction
          CFI (cfiPicker69) Picker
        MOV       A,R0
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiPicker69
        REQUIRE ??Subroutine54_0
        ; // Fall through to label ??Subroutine54_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine54_0:
          CFI Block cfiCond70 Using cfiCommon0
          CFI Function zclParseHdr
          CFI Conditional ??CrossCallReturnLabel_106
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function zcl_registerPlugin
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_11
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-4
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function zcl_registerAttrList
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_12
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-4
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function zcl_registerClusterOptionList
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_13
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-4
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function zcl_SendCommand
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond74) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond74) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond74) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond74) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond74) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond74) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-2
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function zcl_ProcessMessageMSG
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-2
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function zcl_ProcessMessageMSG
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-2
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function zcl_ProcessMessageMSG
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+-2
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker78 Using cfiCommon1
          CFI (cfiPicker78) NoFunction
          CFI (cfiPicker78) Picker
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiPicker78

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond79 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_122
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function zcl_ProcessMessageMSG
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond80) CFA_SP SP+-2
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker81 Using cfiCommon1
          CFI (cfiPicker81) NoFunction
          CFI (cfiPicker81) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_95:
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiPicker81
        REQUIRE ??Subroutine55_0
        ; // Fall through to label ??Subroutine55_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine55_0:
          CFI Block cfiCond82 Using cfiCommon0
          CFI Function zcl_SendCommand
          CFI Conditional ??CrossCallReturnLabel_120
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function zcl_ProcessMessageMSG
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond83) CFA_SP SP+-2
          CFI (cfiCond83) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function zcl_ProcessMessageMSG
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_122
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-2
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function zcl_ProcessMessageMSG
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-2
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker86 Using cfiCommon1
          CFI (cfiPicker86) NoFunction
          CFI (cfiPicker86) Picker
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiPicker86
        REQUIRE ??Subroutine56_0
        ; // Fall through to label ??Subroutine56_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine56_0:
          CFI Block cfiCond87 Using cfiCommon0
          CFI Function zcl_addExternalFoundationHandler
          CFI Conditional ??CrossCallReturnLabel_117
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function zcl_addExternalFoundationHandler
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_112
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-2
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function zcl_getExternalFoundationHandler
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_113
          CFI (cfiCond89) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond89) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond89) CFA_SP SP+-7
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function zcl_SendCommand
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_114
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond90) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond90) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond90) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond90) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond90) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-2
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function zcl_SendCommand
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_115
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond91) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond91) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond91) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond91) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond91) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond91) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond91) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+-2
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function zcl_ProcessMessageMSG
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_118
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-2
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function zcl_ProcessMessageMSG
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_119
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-2
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function zclFindClusterOption
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-2
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function zcl_SendCommand
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond95) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond95) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond95) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond95) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond95) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond95) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond95) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond95) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond95) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-2
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function zcl_ProcessMessageMSG
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-2
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function zcl_ProcessMessageMSG
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_122
          CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond97) CFA_SP SP+-2
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function zcl_ProcessMessageMSG
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-2
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker99 Using cfiCommon1
          CFI (cfiPicker99) NoFunction
          CFI (cfiPicker99) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiPicker99
// 1217 
// 1218 #ifdef ZCL_READ
// 1219 /*********************************************************************
// 1220  * @fn      zcl_SendRead
// 1221  *
// 1222  * @brief   Send a Read command
// 1223  *
// 1224  * @param   srcEP - Application's endpoint
// 1225  * @param   dstAddr - destination address
// 1226  * @param   clusterID - cluster ID
// 1227  * @param   readCmd - read command to be sent
// 1228  * @param   direction - direction of the command
// 1229  * @param   seqNum - transaction sequence number
// 1230  *
// 1231  * @return  ZSuccess if OK
// 1232  */
// 1233 ZStatus_t zcl_SendRead( uint8 srcEP, afAddrType_t *dstAddr,
// 1234                         uint16 clusterID, zclReadCmd_t *readCmd,
// 1235                         uint8 direction, uint8 disableDefaultRsp, uint8 seqNum)
// 1236 {
// 1237   uint16 dataLen;
// 1238   uint8 *buf;
// 1239   uint8 *pBuf;
// 1240   ZStatus_t status;
// 1241 
// 1242   dataLen = readCmd->numAttr * 2; // Attribute ID
// 1243 
// 1244   buf = zcl_mem_alloc( dataLen );
// 1245   if ( buf != NULL )
// 1246   {
// 1247     uint8 i;
// 1248 
// 1249     // Load the buffer - serially
// 1250     pBuf = buf;
// 1251     for (i = 0; i < readCmd->numAttr; i++)
// 1252     {
// 1253       *pBuf++ = LO_UINT16( readCmd->attrID[i] );
// 1254       *pBuf++ = HI_UINT16( readCmd->attrID[i] );
// 1255     }
// 1256 
// 1257     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ, FALSE,
// 1258                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1259     zcl_mem_free( buf );
// 1260   }
// 1261   else
// 1262   {
// 1263     status = ZMemError;
// 1264   }
// 1265 
// 1266   return ( status );
// 1267 }
// 1268 
// 1269 /*********************************************************************
// 1270  * @fn      zcl_SendReadRsp
// 1271  *
// 1272  * @brief   Send a Read Response command.
// 1273  *
// 1274  * @param   srcEP - Application's endpoint
// 1275  * @param   dstAddr - destination address
// 1276  * @param   clusterID - cluster ID
// 1277  * @param   readRspCmd - read response command to be sent
// 1278  * @param   direction - direction of the command
// 1279  * @param   seqNum - transaction sequence number
// 1280  *
// 1281  * @return  ZSuccess if OK
// 1282  */
// 1283 ZStatus_t zcl_SendReadRsp( uint8 srcEP, afAddrType_t *dstAddr,
// 1284                            uint16 clusterID, zclReadRspCmd_t *readRspCmd,
// 1285                            uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1286 {
// 1287   uint8 *buf;
// 1288   uint16 len = 0;
// 1289   ZStatus_t status;
// 1290   uint8 i;
// 1291 
// 1292   // calculate the size of the command
// 1293   for ( i = 0; i < readRspCmd->numAttr; i++ )
// 1294   {
// 1295     zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 1296 
// 1297     len += 2 + 1; // Attribute ID + Status
// 1298 
// 1299     if ( statusRec->status == ZCL_STATUS_SUCCESS )
// 1300     {
// 1301       len++; // Attribute Data Type length
// 1302 
// 1303       // Attribute Data length
// 1304       if ( statusRec->data != NULL )
// 1305       {
// 1306         len += zclGetAttrDataLength( statusRec->dataType, statusRec->data );
// 1307       }
// 1308       else
// 1309       {
// 1310         len += zclGetAttrDataLengthUsingCB( srcEP, clusterID, statusRec->attrID );
// 1311       }
// 1312     }
// 1313   }
// 1314 
// 1315   buf = zcl_mem_alloc( len );
// 1316   if ( buf != NULL )
// 1317   {
// 1318     // Load the buffer - serially
// 1319     uint8 *pBuf = buf;
// 1320 
// 1321     for ( i = 0; i < readRspCmd->numAttr; i++ )
// 1322     {
// 1323       zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 1324 
// 1325       *pBuf++ = LO_UINT16( statusRec->attrID );
// 1326       *pBuf++ = HI_UINT16( statusRec->attrID );
// 1327       *pBuf++ = statusRec->status;
// 1328 
// 1329       if ( statusRec->status == ZCL_STATUS_SUCCESS )
// 1330       {
// 1331         *pBuf++ = statusRec->dataType;
// 1332 
// 1333         if ( statusRec->data != NULL )
// 1334         {
// 1335           // Copy attribute data to the buffer to be sent out
// 1336           pBuf = zclSerializeData( statusRec->dataType, statusRec->data, pBuf );
// 1337         }
// 1338         else
// 1339         {
// 1340           uint16 dataLen;
// 1341 
// 1342           // Read attribute data directly into the buffer to be sent out
// 1343           zclReadAttrDataUsingCB( srcEP, clusterID, statusRec->attrID, pBuf, &dataLen );
// 1344           pBuf += dataLen;
// 1345         }
// 1346       }
// 1347     } // for loop
// 1348 
// 1349     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_RSP, FALSE,
// 1350                               direction, disableDefaultRsp, 0, seqNum, len, buf );
// 1351     zcl_mem_free( buf );
// 1352   }
// 1353   else
// 1354   {
// 1355     status = ZMemError;
// 1356   }
// 1357 
// 1358   return ( status );
// 1359 }
// 1360 #endif // ZCL_READ
// 1361 
// 1362 #ifdef ZCL_WRITE
// 1363 /*********************************************************************
// 1364  * @fn      sendWriteRequest
// 1365  *
// 1366  * @brief   Send a Write command
// 1367  *
// 1368  * @param   dstAddr - destination address
// 1369  * @param   clusterID - cluster ID
// 1370  * @param   writeCmd - write command to be sent
// 1371  * @param   cmd - ZCL_CMD_WRITE, ZCL_CMD_WRITE_UNDIVIDED or ZCL_CMD_WRITE_NO_RSP
// 1372  * @param   direction - direction of the command
// 1373  * @param   seqNum - transaction sequence number
// 1374  *
// 1375  * @return  ZSuccess if OK
// 1376  */
// 1377 ZStatus_t zcl_SendWriteRequest( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
// 1378                                 zclWriteCmd_t *writeCmd, uint8 cmd, uint8 direction,
// 1379                                 uint8 disableDefaultRsp, uint8 seqNum )
// 1380 {
// 1381   uint8 *buf;
// 1382   uint16 dataLen = 0;
// 1383   ZStatus_t status;
// 1384   uint8 i;
// 1385 
// 1386   for ( i = 0; i < writeCmd->numAttr; i++ )
// 1387   {
// 1388     zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
// 1389 
// 1390     dataLen += 2 + 1; // Attribute ID + Attribute Type
// 1391 
// 1392     // Attribute Data
// 1393     dataLen += zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
// 1394   }
// 1395 
// 1396   buf = zcl_mem_alloc( dataLen );
// 1397   if ( buf != NULL )
// 1398   {
// 1399     // Load the buffer - serially
// 1400     uint8 *pBuf = buf;
// 1401     for ( i = 0; i < writeCmd->numAttr; i++ )
// 1402     {
// 1403       zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
// 1404 
// 1405       *pBuf++ = LO_UINT16( statusRec->attrID );
// 1406       *pBuf++ = HI_UINT16( statusRec->attrID );
// 1407       *pBuf++ = statusRec->dataType;
// 1408 
// 1409       pBuf = zclSerializeData( statusRec->dataType, statusRec->attrData, pBuf );
// 1410     }
// 1411 
// 1412     status = zcl_SendCommand( srcEP, dstAddr, clusterID, cmd, FALSE,
// 1413                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1414     zcl_mem_free( buf );
// 1415   }
// 1416   else
// 1417   {
// 1418     status = ZMemError;
// 1419   }
// 1420 
// 1421   return ( status);
// 1422 }
// 1423 
// 1424 /*********************************************************************
// 1425  * @fn      zcl_SendWriteRsp
// 1426  *
// 1427  * @brief   Send a Write Response command
// 1428  *
// 1429  * @param   dstAddr - destination address
// 1430  * @param   clusterID - cluster ID
// 1431  * @param   wrtieRspCmd - write response command to be sent
// 1432  * @param   direction - direction of the command
// 1433  * @param   seqNum - transaction sequence number
// 1434  *
// 1435  * @return  ZSuccess if OK
// 1436  */
// 1437 ZStatus_t zcl_SendWriteRsp( uint8 srcEP, afAddrType_t *dstAddr,
// 1438                             uint16 clusterID, zclWriteRspCmd_t *writeRspCmd,
// 1439                             uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1440 {
// 1441   uint16 dataLen;
// 1442   uint8 *buf;
// 1443   ZStatus_t status;
// 1444 
// 1445   dataLen = writeRspCmd->numAttr * ( 1 + 2 ); // status + attribute id
// 1446 
// 1447   buf = zcl_mem_alloc( dataLen );
// 1448   if ( buf != NULL )
// 1449   {
// 1450     // Load the buffer - serially
// 1451     uint8 i;
// 1452     uint8 *pBuf = buf;
// 1453     for ( i = 0; i < writeRspCmd->numAttr; i++ )
// 1454     {
// 1455       *pBuf++ = writeRspCmd->attrList[i].status;
// 1456       *pBuf++ = LO_UINT16( writeRspCmd->attrList[i].attrID );
// 1457       *pBuf++ = HI_UINT16( writeRspCmd->attrList[i].attrID );
// 1458     }
// 1459 
// 1460     // If there's only a single status record and its status field is set to
// 1461     // SUCCESS then omit the attribute ID field.
// 1462     if ( writeRspCmd->numAttr == 1 && writeRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
// 1463     {
// 1464       dataLen = 1;
// 1465     }
// 1466 
// 1467     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_WRITE_RSP, FALSE,
// 1468                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1469     zcl_mem_free( buf );
// 1470   }
// 1471   else
// 1472   {
// 1473     status = ZMemError;
// 1474   }
// 1475 
// 1476   return ( status );
// 1477 }
// 1478 #endif // ZCL_WRITE
// 1479 
// 1480 #ifdef ZCL_REPORT_CONFIGURING_DEVICE
// 1481 /*********************************************************************
// 1482  * @fn      zcl_SendConfigReportCmd
// 1483  *
// 1484  * @brief   Send a Configure Reporting command
// 1485  *
// 1486  * @param   dstAddr - destination address
// 1487  * @param   clusterID - cluster ID
// 1488  * @param   cfgReportCmd - configure reporting command to be sent
// 1489  * @param   direction - direction of the command
// 1490  * @param   seqNum - transaction sequence number
// 1491  *
// 1492  * @return  ZSuccess if OK
// 1493  */
// 1494 ZStatus_t zcl_SendConfigReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1495                           uint16 clusterID, zclCfgReportCmd_t *cfgReportCmd,
// 1496                           uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1497 {
// 1498   uint8 *buf;
// 1499   uint16 dataLen = 0;
// 1500   ZStatus_t status;
// 1501   uint8 i;
// 1502 
// 1503   // Find out the data length
// 1504   for ( i = 0; i < cfgReportCmd->numAttr; i++ )
// 1505   {
// 1506     zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
// 1507 
// 1508     dataLen += 1 + 2; // Direction + Attribute ID
// 1509 
// 1510     if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
// 1511     {
// 1512       dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
// 1513 
// 1514       // Find out the size of the Reportable Change field (for Analog data types)
// 1515       if ( zclAnalogDataType( reportRec->dataType ) )
// 1516       {
// 1517         dataLen += zclGetDataTypeLength( reportRec->dataType );
// 1518       }
// 1519     }
// 1520     else
// 1521     {
// 1522       dataLen += 2; // Timeout Period
// 1523     }
// 1524   }
// 1525 
// 1526   buf = zcl_mem_alloc( dataLen );
// 1527   if ( buf != NULL )
// 1528   {
// 1529     // Load the buffer - serially
// 1530     uint8 *pBuf = buf;
// 1531 
// 1532     for ( i = 0; i < cfgReportCmd->numAttr; i++ )
// 1533     {
// 1534       zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
// 1535 
// 1536       *pBuf++ = reportRec->direction;
// 1537       *pBuf++ = LO_UINT16( reportRec->attrID );
// 1538       *pBuf++ = HI_UINT16( reportRec->attrID );
// 1539 
// 1540       if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
// 1541       {
// 1542         *pBuf++ = reportRec->dataType;
// 1543         *pBuf++ = LO_UINT16( reportRec->minReportInt );
// 1544         *pBuf++ = HI_UINT16( reportRec->minReportInt );
// 1545         *pBuf++ = LO_UINT16( reportRec->maxReportInt );
// 1546         *pBuf++ = HI_UINT16( reportRec->maxReportInt );
// 1547 
// 1548         if ( zclAnalogDataType( reportRec->dataType ) )
// 1549         {
// 1550           pBuf = zclSerializeData( reportRec->dataType, reportRec->reportableChange, pBuf );
// 1551         }
// 1552       }
// 1553       else
// 1554       {
// 1555         *pBuf++ = LO_UINT16( reportRec->timeoutPeriod );
// 1556         *pBuf++ = HI_UINT16( reportRec->timeoutPeriod );
// 1557       }
// 1558     } // for loop
// 1559 
// 1560     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_CONFIG_REPORT, FALSE,
// 1561                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1562     zcl_mem_free( buf );
// 1563   }
// 1564   else
// 1565   {
// 1566     status = ZMemError;
// 1567   }
// 1568 
// 1569   return ( status );
// 1570 }
// 1571 #endif
// 1572 
// 1573 #ifdef ZCL_REPORTING_DEVICE
// 1574 /*********************************************************************
// 1575  * @fn      zcl_SendConfigReportRspCmd
// 1576  *
// 1577  * @brief   Send a Configure Reporting Response command
// 1578  *
// 1579  * @param   dstAddr - destination address
// 1580  * @param   clusterID - cluster ID
// 1581  * @param   cfgReportRspCmd - configure reporting response command to be sent
// 1582  * @param   direction - direction of the command
// 1583  * @param   seqNum - transaction sequence number
// 1584  *
// 1585  * @return  ZSuccess if OK
// 1586  */
// 1587 ZStatus_t zcl_SendConfigReportRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1588                     uint16 clusterID, zclCfgReportRspCmd_t *cfgReportRspCmd,
// 1589                     uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1590 {
// 1591   uint16 dataLen;
// 1592   uint8 *buf;
// 1593   ZStatus_t status;
// 1594 
// 1595   // Atrribute list (Status, Direction and Attribute ID)
// 1596   dataLen = cfgReportRspCmd->numAttr * ( 1 + 1 + 2 );
// 1597 
// 1598   buf = zcl_mem_alloc( dataLen );
// 1599   if ( buf != NULL )
// 1600   {
// 1601     // Load the buffer - serially
// 1602     uint8 *pBuf = buf;
// 1603     uint8 i;
// 1604 
// 1605     for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
// 1606     {
// 1607       *pBuf++ = cfgReportRspCmd->attrList[i].status;
// 1608       *pBuf++ = cfgReportRspCmd->attrList[i].direction;
// 1609       *pBuf++ = LO_UINT16( cfgReportRspCmd->attrList[i].attrID );
// 1610       *pBuf++ = HI_UINT16( cfgReportRspCmd->attrList[i].attrID );
// 1611     }
// 1612 
// 1613     // If there's only a single status record and its status field is set to
// 1614     // SUCCESS then omit the attribute ID field.
// 1615     if ( cfgReportRspCmd->numAttr == 1 && cfgReportRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
// 1616     {
// 1617       dataLen = 1;
// 1618     }
// 1619 
// 1620     status = zcl_SendCommand( srcEP, dstAddr, clusterID,
// 1621                               ZCL_CMD_CONFIG_REPORT_RSP, FALSE, direction,
// 1622                               disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1623     zcl_mem_free( buf );
// 1624   }
// 1625   else
// 1626   {
// 1627     status = ZMemError;
// 1628   }
// 1629 
// 1630   return ( status );
// 1631 }
// 1632 #endif
// 1633 
// 1634 #ifdef ZCL_REPORT_CONFIGURING_DEVICE
// 1635 /*********************************************************************
// 1636  * @fn      zcl_SendReadReportCfgCmd
// 1637  *
// 1638  * @brief   Send a Read Reporting Configuration command
// 1639  *
// 1640  * @param   dstAddr - destination address
// 1641  * @param   clusterID - cluster ID
// 1642  * @param   readReportCfgCmd - read reporting configuration command to be sent
// 1643  * @param   direction - direction of the command
// 1644  * @param   seqNum - transaction sequence number
// 1645  *
// 1646  * @return  ZSuccess if OK
// 1647  */
// 1648 ZStatus_t zcl_SendReadReportCfgCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1649                   uint16 clusterID, zclReadReportCfgCmd_t *readReportCfgCmd,
// 1650                   uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1651 {
// 1652   uint16 dataLen;
// 1653   uint8 *buf;
// 1654   ZStatus_t status;
// 1655 
// 1656   dataLen = readReportCfgCmd->numAttr * ( 1 + 2 ); // Direction + Atrribute ID
// 1657 
// 1658   buf = zcl_mem_alloc( dataLen );
// 1659   if ( buf != NULL )
// 1660   {
// 1661     // Load the buffer - serially
// 1662     uint8 *pBuf = buf;
// 1663     uint8 i;
// 1664 
// 1665     for ( i = 0; i < readReportCfgCmd->numAttr; i++ )
// 1666     {
// 1667       *pBuf++ = readReportCfgCmd->attrList[i].direction;
// 1668       *pBuf++ = LO_UINT16( readReportCfgCmd->attrList[i].attrID );
// 1669       *pBuf++ = HI_UINT16( readReportCfgCmd->attrList[i].attrID );
// 1670     }
// 1671 
// 1672     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_REPORT_CFG, FALSE,
// 1673                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1674     zcl_mem_free( buf );
// 1675   }
// 1676   else
// 1677   {
// 1678     status = ZMemError;
// 1679   }
// 1680 
// 1681   return ( status );
// 1682 }
// 1683 #endif
// 1684 
// 1685 #ifdef ZCL_REPORTING_DEVICE
// 1686 /*********************************************************************
// 1687  * @fn      zcl_SendReadReportCfgRspCmd
// 1688  *
// 1689  * @brief   Send a Read Reporting Configuration Response command
// 1690  *
// 1691  * @param   dstAddr - destination address
// 1692  * @param   clusterID - cluster ID
// 1693  * @param   readReportCfgRspCmd - read reporting configuration response command to be sent
// 1694  * @param   direction - direction of the command
// 1695  * @param   seqNum - transaction sequence number
// 1696  *
// 1697  * @return  ZSuccess if OK
// 1698  */
// 1699 ZStatus_t zcl_SendReadReportCfgRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1700              uint16 clusterID, zclReadReportCfgRspCmd_t *readReportCfgRspCmd,
// 1701              uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1702 {
// 1703   uint8 *buf;
// 1704   uint16 dataLen = 0;
// 1705   ZStatus_t status;
// 1706   uint8 i;
// 1707 
// 1708   // Find out the data length
// 1709   for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
// 1710   {
// 1711     zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
// 1712 
// 1713     dataLen += 1 + 1 + 2 ; // Status, Direction and Atrribute ID
// 1714 
// 1715     if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
// 1716     {
// 1717       if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
// 1718       {
// 1719         dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
// 1720 
// 1721         // Find out the size of the Reportable Change field (for Analog data types)
// 1722         if ( zclAnalogDataType( reportRspRec->dataType ) )
// 1723         {
// 1724           dataLen += zclGetDataTypeLength( reportRspRec->dataType );
// 1725         }
// 1726       }
// 1727       else
// 1728       {
// 1729         dataLen += 2; // Timeout Period
// 1730       }
// 1731     }
// 1732   }
// 1733 
// 1734   buf = zcl_mem_alloc( dataLen );
// 1735   if ( buf != NULL )
// 1736   {
// 1737     // Load the buffer - serially
// 1738     uint8 *pBuf = buf;
// 1739 
// 1740     for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
// 1741     {
// 1742       zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
// 1743 
// 1744       *pBuf++ = reportRspRec->status;
// 1745       *pBuf++ = reportRspRec->direction;
// 1746       *pBuf++ = LO_UINT16( reportRspRec->attrID );
// 1747       *pBuf++ = HI_UINT16( reportRspRec->attrID );
// 1748 
// 1749       if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
// 1750       {
// 1751         if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
// 1752         {
// 1753           *pBuf++ = reportRspRec->dataType;
// 1754           *pBuf++ = LO_UINT16( reportRspRec->minReportInt );
// 1755           *pBuf++ = HI_UINT16( reportRspRec->minReportInt );
// 1756           *pBuf++ = LO_UINT16( reportRspRec->maxReportInt );
// 1757           *pBuf++ = HI_UINT16( reportRspRec->maxReportInt );
// 1758 
// 1759           if ( zclAnalogDataType( reportRspRec->dataType ) )
// 1760           {
// 1761             pBuf = zclSerializeData( reportRspRec->dataType,
// 1762                                      reportRspRec->reportableChange, pBuf );
// 1763           }
// 1764         }
// 1765         else
// 1766         {
// 1767           *pBuf++ = LO_UINT16( reportRspRec->timeoutPeriod );
// 1768           *pBuf++ = HI_UINT16( reportRspRec->timeoutPeriod );
// 1769         }
// 1770       }
// 1771     }
// 1772 
// 1773     status = zcl_SendCommand( srcEP, dstAddr, clusterID,
// 1774                               ZCL_CMD_READ_REPORT_CFG_RSP, FALSE,
// 1775                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1776     zcl_mem_free( buf );
// 1777   }
// 1778   else
// 1779   {
// 1780     status = ZMemError;
// 1781   }
// 1782 
// 1783   return ( status );
// 1784 }
// 1785 
// 1786 /*********************************************************************
// 1787  * @fn      zcl_SendReportCmd
// 1788  *
// 1789  * @brief   Send a Report command
// 1790  *
// 1791  * @param   dstAddr - destination address
// 1792  * @param   clusterID - cluster ID
// 1793  * @param   reportCmd - report command to be sent
// 1794  * @param   direction - direction of the command
// 1795  * @param   seqNum - transaction sequence number
// 1796  *
// 1797  * @return  ZSuccess if OK
// 1798  */
// 1799 ZStatus_t zcl_SendReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1800                              uint16 clusterID, zclReportCmd_t *reportCmd,
// 1801                              uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1802 {
// 1803   uint16 dataLen = 0;
// 1804   uint8 *buf;
// 1805   ZStatus_t status;
// 1806   uint8 i;
// 1807 
// 1808   // calculate the size of the command
// 1809   for ( i = 0; i < reportCmd->numAttr; i++ )
// 1810   {
// 1811     zclReport_t *reportRec = &(reportCmd->attrList[i]);
// 1812 
// 1813     dataLen += 2 + 1; // Attribute ID + data type
// 1814 
// 1815     // Attribute Data
// 1816     dataLen += zclGetAttrDataLength( reportRec->dataType, reportRec->attrData );
// 1817   }
// 1818 
// 1819   buf = zcl_mem_alloc( dataLen );
// 1820   if ( buf != NULL )
// 1821   {
// 1822     // Load the buffer - serially
// 1823     uint8 *pBuf = buf;
// 1824 
// 1825     for ( i = 0; i < reportCmd->numAttr; i++ )
// 1826     {
// 1827       zclReport_t *reportRec = &(reportCmd->attrList[i]);
// 1828 
// 1829       *pBuf++ = LO_UINT16( reportRec->attrID );
// 1830       *pBuf++ = HI_UINT16( reportRec->attrID );
// 1831       *pBuf++ = reportRec->dataType;
// 1832 
// 1833       pBuf = zclSerializeData( reportRec->dataType, reportRec->attrData, pBuf );
// 1834     }
// 1835 
// 1836     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_REPORT, FALSE,
// 1837                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1838     zcl_mem_free( buf );
// 1839   }
// 1840   else
// 1841   {
// 1842     status = ZMemError;
// 1843   }
// 1844 
// 1845   return ( status );
// 1846 }
// 1847 #endif
// 1848 
// 1849 /*********************************************************************
// 1850  * @fn      zcl_SendDefaultRspCmd
// 1851  *
// 1852  * @brief   Send a Default Response command
// 1853  *
// 1854  *          Note: The manufacturer code field should be set if this
// 1855  *          command is being sent in response to a manufacturer specific
// 1856  *          command.
// 1857  *
// 1858  * @param   dstAddr - destination address
// 1859  * @param   clusterID - cluster ID
// 1860  * @param   defaultRspCmd - default response command to be sent
// 1861  * @param   direction - direction of the command
// 1862  * @param   manuCode - manufacturer code for proprietary extensions to a profile
// 1863  * @param   seqNum - transaction sequence number
// 1864  *
// 1865  * @return  ZSuccess if OK
// 1866  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1867 ZStatus_t zcl_SendDefaultRspCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
zcl_SendDefaultRspCmd:
          CFI Block cfiBlock100 Using cfiCommon0
          CFI Function zcl_SendDefaultRspCmd
        CODE
// 1868                                  zclDefaultRspCmd_t *defaultRspCmd, uint8 direction,
// 1869                                  uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum )
// 1870 {
        FUNCALL zcl_SendDefaultRspCmd, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,R1
        MOV       R6,A
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine32 & 0xFFFF
// 1871   uint8 buf[2]; // Command ID and Status;
// 1872 
// 1873   // Load the buffer - serially
// 1874   buf[0] = defaultRspCmd->commandID;
??CrossCallReturnLabel_67:
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_56:
        LCALL     ?Subroutine14 & 0xFFFF
// 1875   buf[1] = defaultRspCmd->statusCode;
??CrossCallReturnLabel_22:
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1876 
// 1877   return ( zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DEFAULT_RSP, FALSE,
// 1878                             direction, disableDefaultRsp, manuCode, seqNum, 2, buf ) );
        ; Setup parameters for call to function zcl_SendCommand
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_75:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_76:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_77:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V0,#0xb
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       A,R6
        MOV       R1,A
        LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        LJMP      ?Subroutine3 & 0xFFFF
// 1879 }
          CFI EndBlock cfiBlock100

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond101 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_68
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function zcl_SendDefaultRspCmd
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_SP SP+-2
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker103 Using cfiCommon1
          CFI (cfiPicker103) NoFunction
          CFI (cfiPicker103) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiPicker103

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond104 Using cfiCommon0
          CFI Function zcl_SendCommand
          CFI Conditional ??CrossCallReturnLabel_53
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function zcl_SendCommand
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond105) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond105) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond105) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond105) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond105) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond105) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-2
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function zcl_SendCommand
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond106) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond106) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond106) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond106) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond106) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond106) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-2
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function zcl_SendDefaultRspCmd
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+-2
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker108 Using cfiCommon1
          CFI (cfiPicker108) NoFunction
          CFI (cfiPicker108) Picker
        MOVX      A,@DPTR
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        RET
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiPicker108

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond109 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function zcl_SendDefaultRspCmd
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond110) CFA_SP SP+-2
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function zclBuildHdr
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-2
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker112 Using cfiCommon1
          CFI (cfiPicker112) NoFunction
          CFI (cfiPicker112) Picker
        MOVX      @DPTR,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        RET
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiPicker112
// 1880 
// 1881 #ifdef ZCL_DISCOVER
// 1882 /*********************************************************************
// 1883  * @fn      zcl_SendDiscoverCmdsCmd
// 1884  *
// 1885  * @brief   Send a Discover Commands command
// 1886  *
// 1887  * @param   dstAddr - destination address
// 1888  * @param   clusterID - cluster ID
// 1889  * @param   cmdType - requesting command ID
// 1890  * @param   pDiscoverCmd - discover command to be sent
// 1891  * @param   direction - direction of the command
// 1892  * @param   seqNum - transaction sequence number
// 1893  *
// 1894  * @return  ZSuccess if OK
// 1895  */
// 1896 ZStatus_t zcl_SendDiscoverCmdsCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
// 1897                                   uint8 cmdType, zclDiscoverCmdsCmd_t *pDiscoverCmd,
// 1898                                   uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1899 {
// 1900   uint8 payload[2]; // size of startCmdID and maxCmdID
// 1901   ZStatus_t status;
// 1902 
// 1903   payload[0] = pDiscoverCmd->startCmdID;
// 1904   payload[1] = pDiscoverCmd->maxCmdID;
// 1905 
// 1906   // Send message for either commands received or generated
// 1907   if ( cmdType == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
// 1908   {
// 1909     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_RECEIVED, FALSE,
// 1910                                 direction, disableDefaultRsp, 0, seqNum, sizeof(payload), payload );
// 1911   }
// 1912   else  // generated
// 1913   {
// 1914     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_GEN, FALSE,
// 1915                                 direction, disableDefaultRsp, 0, seqNum, sizeof(payload), payload );
// 1916   }
// 1917 
// 1918   return ( status );
// 1919 }
// 1920 
// 1921 /*********************************************************************
// 1922  * @fn      zcl_SendDiscoverCmdsRspCmd
// 1923  *
// 1924  * @brief   Send a Discover Commands Response command
// 1925  *
// 1926  * @param   dstAddr - destination address
// 1927  * @param   clusterID - cluster ID
// 1928  * @param   pDiscoverRspCmd - response command to be sent
// 1929  * @param   direction - direction of the command
// 1930  * @param   seqNum - transaction sequence number
// 1931  *
// 1932  * @return  ZSuccess if OK
// 1933  */
// 1934 ZStatus_t zcl_SendDiscoverCmdsRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1935                                       uint16 clusterID, zclDiscoverCmdsCmdRsp_t *pDiscoverRspCmd,
// 1936                                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1937 {
// 1938   uint8 payloadSize = ( 1 + pDiscoverRspCmd->numCmd );  // size of discovery complete field plus cmds
// 1939   uint8 *pCmdBuf;
// 1940   uint8 i;
// 1941   ZStatus_t status = ZSuccess;
// 1942 
// 1943   // allocate memory
// 1944   pCmdBuf = zcl_mem_alloc( payloadSize );
// 1945   if ( pCmdBuf != NULL )
// 1946   {
// 1947     uint8 *pBuf = pCmdBuf;
// 1948 
// 1949     // Load the buffer - serially
// 1950     *pBuf++ = pDiscoverRspCmd->discComplete;
// 1951     for ( i = 0; i < pDiscoverRspCmd->numCmd; i++ )
// 1952     {
// 1953       *pBuf++ = pDiscoverRspCmd->pCmdID[i];
// 1954     }
// 1955 
// 1956     // Send response message for either commands received or generated
// 1957     if( pDiscoverRspCmd->cmdType == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
// 1958     {
// 1959       status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP, FALSE,
// 1960                                 direction, disableDefaultRsp, 0, seqNum, payloadSize, pCmdBuf );
// 1961     }
// 1962     else if ( pDiscoverRspCmd->cmdType == ZCL_CMD_DISCOVER_CMDS_GEN )
// 1963     {
// 1964       status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_GEN_RSP, FALSE,
// 1965                                 direction, disableDefaultRsp, 0, seqNum, payloadSize, pCmdBuf );
// 1966     }
// 1967 
// 1968     zcl_mem_free( pCmdBuf );
// 1969   }
// 1970   else
// 1971   {
// 1972     status = ZMemError;
// 1973   }
// 1974 
// 1975   return ( status );
// 1976 }
// 1977 
// 1978 /*********************************************************************
// 1979  * @fn      zcl_SendDiscoverAttrsCmd
// 1980  *
// 1981  * @brief   Send a Discover Attributes command
// 1982  *
// 1983  * @param   dstAddr - destination address
// 1984  * @param   clusterID - cluster ID
// 1985  * @param   pDiscoverCmd - discover command to be sent
// 1986  * @param   direction - direction of the command
// 1987  * @param   seqNum - transaction sequence number
// 1988  *
// 1989  * @return  ZSuccess if OK
// 1990  */
// 1991 ZStatus_t zcl_SendDiscoverAttrsCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1992                             uint16 clusterID, zclDiscoverAttrsCmd_t *pDiscoverCmd,
// 1993                             uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1994 {
// 1995   uint8 dataLen = 2 + 1; // Start Attribute ID and Max Attribute IDs
// 1996   uint8 *buf;
// 1997   ZStatus_t status;
// 1998 
// 1999   buf = zcl_mem_alloc( dataLen );
// 2000   if ( buf != NULL )
// 2001   {
// 2002     // Load the buffer - serially
// 2003     uint8 *pBuf = buf;
// 2004     *pBuf++ = LO_UINT16(pDiscoverCmd->startAttr);
// 2005     *pBuf++ = HI_UINT16(pDiscoverCmd->startAttr);
// 2006     *pBuf++ = pDiscoverCmd->maxAttrIDs;
// 2007 
// 2008     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS, FALSE,
// 2009                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 2010     zcl_mem_free( buf );
// 2011   }
// 2012   else
// 2013   {
// 2014     status = ZMemError;
// 2015   }
// 2016 
// 2017   return ( status );
// 2018 }
// 2019 
// 2020 /*********************************************************************
// 2021  * @fn      zcl_SendDiscoverAttrsRspCmd
// 2022  *
// 2023  * @brief   Send a Discover Attributes Response command
// 2024  *
// 2025  * @param   dstAddr - destination address
// 2026  * @param   clusterID - cluster ID
// 2027  * @param   reportRspCmd - report response command to be sent
// 2028  * @param   direction - direction of the command
// 2029  * @param   seqNum - transaction sequence number
// 2030  *
// 2031  * @return  ZSuccess if OK
// 2032  */
// 2033 ZStatus_t zcl_SendDiscoverAttrsRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 2034                           uint16 clusterID, zclDiscoverAttrsRspCmd_t *pDiscoverRspCmd,
// 2035                           uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 2036 {
// 2037   uint16 dataLen = 1; // Discovery complete
// 2038   uint8 *buf;
// 2039   ZStatus_t status;
// 2040 
// 2041   // calculate the size of the command
// 2042   dataLen += pDiscoverRspCmd->numAttr * (2 + 1); // Attribute ID and Data Type
// 2043 
// 2044   buf = zcl_mem_alloc( dataLen );
// 2045   if ( buf != NULL )
// 2046   {
// 2047     // Load the buffer - serially
// 2048     uint8 i;
// 2049     uint8 *pBuf = buf;
// 2050 
// 2051     *pBuf++ = pDiscoverRspCmd->discComplete;
// 2052 
// 2053     for ( i = 0; i < pDiscoverRspCmd->numAttr; i++ )
// 2054     {
// 2055       *pBuf++ = LO_UINT16(pDiscoverRspCmd->attrList[i].attrID);
// 2056       *pBuf++ = HI_UINT16(pDiscoverRspCmd->attrList[i].attrID);
// 2057       *pBuf++ = pDiscoverRspCmd->attrList[i].dataType;
// 2058     }
// 2059 
// 2060     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_RSP, FALSE,
// 2061                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 2062     zcl_mem_free( buf );
// 2063   }
// 2064   else
// 2065   {
// 2066     status = ZMemError;
// 2067   }
// 2068 
// 2069   return ( status );
// 2070 }
// 2071 
// 2072 /*********************************************************************
// 2073  * @fn      zcl_SendDiscoverAttrsExt
// 2074  *
// 2075  * @brief   Send a Discover Attributes Extended command
// 2076  *
// 2077  * @param   dstAddr - destination address
// 2078  * @param   clusterID - cluster ID
// 2079  * @param   pDiscoverAttrsExt:
// 2080  *            - startAttrID: the first attribute to be selected
// 2081  *            - maxAttrIDs: maximum number of returned attributes
// 2082  * @param   direction - direction of the command
// 2083  * @param   seqNum - transaction sequence number
// 2084  *
// 2085  * @return  ZSuccess if OK
// 2086  */
// 2087 ZStatus_t zcl_SendDiscoverAttrsExt( uint8 srcEP, afAddrType_t *dstAddr,
// 2088                             uint16 clusterID, zclDiscoverAttrsCmd_t *pDiscoverAttrsExt,
// 2089                             uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 2090 {
// 2091   uint8 buf[3];  // Buffer size equal to Start Attribute ID and Max Attribute IDs
// 2092   ZStatus_t status;
// 2093 
// 2094   // Load the buffer - serially
// 2095   buf[0] = LO_UINT16(pDiscoverAttrsExt->startAttr);
// 2096   buf[1] = HI_UINT16(pDiscoverAttrsExt->startAttr);
// 2097   buf[2] = pDiscoverAttrsExt->maxAttrIDs;
// 2098 
// 2099   status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_EXT, FALSE,
// 2100                             direction, disableDefaultRsp, 0, seqNum, sizeof( buf ), buf );
// 2101 
// 2102   return ( status );
// 2103 }
// 2104 
// 2105 /*********************************************************************
// 2106  * @fn      zcl_SendDiscoverAttrsExtRsp
// 2107  *
// 2108  * @brief   Send a Discover Attributes Extended Response command
// 2109  *
// 2110  * @param   dstAddr - destination address
// 2111  * @param   clusterID - cluster ID
// 2112  * @param   pDiscoverRspCmd:
// 2113  *            - discComplete: indicates whether all requested attributes returned
// 2114  *            - attrID: attribute ID
// 2115  *            - attrDataType: data type of the given attribute
// 2116  *            - attrAccessControl: access control of the given attribute
// 2117  * @param   direction - direction of the command
// 2118  * @param   seqNum - transaction sequence number
// 2119  *
// 2120  * @return  ZSuccess if OK
// 2121  */
// 2122 ZStatus_t zcl_SendDiscoverAttrsExtRsp( uint8 srcEP, afAddrType_t *dstAddr,
// 2123                                       uint16 clusterID, zclDiscoverAttrsExtRsp_t *pDiscoverRspCmd,
// 2124                                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 2125 {
// 2126   uint8 *buf;
// 2127   uint8 i;
// 2128   uint16 dataLen = 1; // Discovery complete
// 2129   ZStatus_t status;
// 2130 
// 2131   // calculate the size of the command
// 2132   dataLen += pDiscoverRspCmd->numAttr * (2 + 1 + 1); // Attribute ID, Data Type, and Access Control
// 2133 
// 2134   buf = zcl_mem_alloc( dataLen );
// 2135   if ( buf != NULL )
// 2136   {
// 2137     // Load the buffer - serially
// 2138     uint8 *pBuf = buf;
// 2139     *pBuf++ = pDiscoverRspCmd->discComplete;
// 2140     for ( i = 0; i < pDiscoverRspCmd->numAttr; i++ )
// 2141     {
// 2142       *pBuf++ = LO_UINT16(pDiscoverRspCmd->aExtAttrInfo[i].attrID);
// 2143       *pBuf++ = HI_UINT16(pDiscoverRspCmd->aExtAttrInfo[i].attrID);
// 2144       *pBuf++ = pDiscoverRspCmd->aExtAttrInfo[i].attrDataType;
// 2145       *pBuf++ = pDiscoverRspCmd->aExtAttrInfo[i].attrAccessControl;
// 2146     }
// 2147 
// 2148     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_EXT_RSP, FALSE,
// 2149                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 2150     zcl_mem_free( buf );
// 2151   }
// 2152   else
// 2153   {
// 2154     status = ZMemError;
// 2155   }
// 2156 
// 2157   return ( status );
// 2158 }
// 2159 #endif // ZCL_DISCOVER
// 2160 
// 2161 /*********************************************************************
// 2162  * @fn      zcl_ProcessMessageMSG
// 2163  *
// 2164  * @brief   Data message processor callback.  This function processes
// 2165  *          any incoming data - probably from other devices.  So, based
// 2166  *          on cluster ID, perform the intended action.
// 2167  *
// 2168  * @param   pkt - incoming message
// 2169  *
// 2170  * @return  zclProcMsgStatus_t
// 2171  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2172 zclProcMsgStatus_t zcl_ProcessMessageMSG( afIncomingMSGPacket_t *pkt )
zcl_ProcessMessageMSG:
          CFI Block cfiBlock113 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
        CODE
// 2173 {
        FUNCALL zcl_ProcessMessageMSG, zclParseHdr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zcl_DeviceOperational
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, StubAPS_InterPan
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zclGetClusterOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zclSetSecurityOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zcl_SendDefaultRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zclSetSecurityOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zcl_SendDefaultRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 21
        MOV       A,#-0x15
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2174   endPointDesc_t *epDesc;
// 2175   zclIncoming_t inMsg;
// 2176   zclLibPlugin_t *pInPlugin;
// 2177   zclDefaultRspCmd_t defautlRspCmd;
// 2178   uint8 options;
// 2179   uint8 securityEnable;
// 2180   uint8 interPanMsg;
// 2181   ZStatus_t status = ZFailure;
// 2182   uint8 defaultResponseSent = FALSE;
        CLR       ?VB.0
// 2183 
// 2184   if ( pkt->cmd.DataLength < ZCL_VALID_MIN_HEADER_LEN  )
        MOV       A,R2
        ADD       A,#0x20
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        CLR       C
        MOVX      A,@DPTR
        SUBB      A,#0x3
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,#0x0
        JNC       ??zcl_ProcessMessageMSG_0
// 2185   {
// 2186     return ( ZCL_PROC_INVALID );   // Error, ignore the message
        MOV       R1,#0x1
        LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 2187   }
// 2188 
// 2189   // Initialize
// 2190   rawAFMsg = (afIncomingMSGPacket_t *)pkt;
??zcl_ProcessMessageMSG_0:
        MOV       DPTR,#rawAFMsg
        LCALL     ?Subroutine16 & 0xFFFF
// 2191   inMsg.msg = pkt;
??CrossCallReturnLabel_29:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine16 & 0xFFFF
// 2192   inMsg.attrCmd = NULL;
??CrossCallReturnLabel_30:
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2193   inMsg.pData = NULL;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2194   inMsg.pDataLen = 0;
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2195 
// 2196   inMsg.pData = zclParseHdr( &(inMsg.hdr), pkt->cmd.Data );
        MOV       A,R2
        ADD       A,#0x22
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       ?V0,R0
        MOV       ?V1,A
        ; Setup parameters for call to function zclParseHdr
        MOV       DPL,R0
        MOV       DPH,A
        LCALL     ??Subroutine58_0 & 0xFFFF
??CrossCallReturnLabel_135:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??zclParseHdr::?relay`; Banked call to: zclParseHdr
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,?V2
        MOV       R1,?V3
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine16 & 0xFFFF
// 2197   inMsg.pDataLen = pkt->cmd.DataLength;
// 2198   inMsg.pDataLen -= (uint16)(inMsg.pData - pkt->cmd.Data);
??CrossCallReturnLabel_31:
        MOV       A,R6
        ADD       A,#0x20
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_128:
        MOV       A,R2
        CLR       C
        SUBB      A,R0
        MOV       R0,A
        MOV       A,R3
        SUBB      A,R1
        MOV       R1,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       R1,A
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine45 & 0xFFFF
// 2199 
// 2200   // Temporary workaround to allow callback functions access to the
// 2201   // transaction sequence number.  Callback functions will call
// 2202   // zcl_getParsedTransSeqNum() to retrieve this number.
// 2203   savedZCLTransSeqNum = inMsg.hdr.transSeqNum;
??CrossCallReturnLabel_108:
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       DPTR,#savedZCLTransSeqNum
        MOVX      @DPTR,A
// 2204 
// 2205   // Find the wanted endpoint
// 2206   epDesc = afFindEndPointDesc( pkt->endPoint );
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_84:
        MOV       R1,A
        LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
// 2207   if ( epDesc == NULL )
        MOV       A,R2
        ORL       A,R3
        JNZ       ??zcl_ProcessMessageMSG_2
// 2208   {
// 2209     rawAFMsg = NULL;
        MOV       DPTR,#rawAFMsg
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2210     return ( ZCL_PROC_EP_NOT_FOUND );   // Error, ignore the message
        MOV       R1,#0x2
        LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 2211   }
// 2212 
// 2213   if ( ( epDesc->simpleDesc == NULL ) ||
// 2214        ( zcl_DeviceOperational( pkt->endPoint, pkt->clusterId, inMsg.hdr.fc.type,
// 2215                                 inMsg.hdr.commandID, epDesc->simpleDesc->AppProfId ) == FALSE ) )
??zcl_ProcessMessageMSG_2:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine55_0 & 0xFFFF
??CrossCallReturnLabel_121:
        JZ        ??zcl_ProcessMessageMSG_3
        ; Setup parameters for call to function zcl_DeviceOperational
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ANL       A,#0x3
        MOV       R4,A
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_49:
        LCALL     `??zcl_DeviceOperational::?relay`; Banked call to: zcl_DeviceOperational
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       A,R1
        JNZ       ??zcl_ProcessMessageMSG_4
// 2216   {
// 2217     rawAFMsg = NULL;
??zcl_ProcessMessageMSG_3:
        MOV       DPTR,#rawAFMsg
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2218     return ( ZCL_PROC_NOT_OPERATIONAL ); // Error, ignore the message
        MOV       R1,#0x3
        LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 2219   }
// 2220 
// 2221 #if defined ( INTER_PAN )
// 2222   if ( StubAPS_InterPan( pkt->srcAddr.panId, pkt->srcAddr.endPoint ) )
??zcl_ProcessMessageMSG_4:
        ; Setup parameters for call to function StubAPS_InterPan
        MOV       A,R6
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R6
        ADD       A,#0x10
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_74:
        JZ        ??zcl_ProcessMessageMSG_5
// 2223   {
// 2224     // No foundation command is supported thru Inter-PAN communication.
// 2225     // But the Light Link cluster uses a different Frame Control format
// 2226     // for it's Inter-PAN messages, where the messages could be confused
// 2227     // with the foundation commands.
// 2228     if ( zcl_ProfileCmd( inMsg.hdr.fc.type ) )
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ANL       A,#0x3
        JNZ       ??zcl_ProcessMessageMSG_6
// 2229     {
// 2230       rawAFMsg = NULL;
        MOV       DPTR,#rawAFMsg
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2231       return ( ZCL_PROC_INTERPAN_FOUNDATION_CMD );
        MOV       R1,#0x4
        LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 2232     }
// 2233 
// 2234     interPanMsg = TRUE;
??zcl_ProcessMessageMSG_6:
        SETB      ?VB.1
// 2235     options = AF_TX_OPTIONS_NONE;
        MOV       R2,#0x0
        SJMP      ??zcl_ProcessMessageMSG_7
// 2236   }
// 2237   else
// 2238 #endif
// 2239   {
// 2240     interPanMsg = FALSE;
??zcl_ProcessMessageMSG_5:
        CLR       ?VB.1
// 2241     options = zclGetClusterOption( pkt->endPoint, pkt->clusterId );
        ; Setup parameters for call to function zclGetClusterOption
        LCALL     ?Subroutine23 & 0xFFFF
// 2242   }
??CrossCallReturnLabel_50:
        LCALL     `??zclGetClusterOption::?relay`; Banked call to: zclGetClusterOption
        MOV       A,R1
        ANL       A,#0x40
        MOV       R2,A
// 2243 
// 2244   // Find the appropriate plugin
// 2245   pInPlugin = zclFindPlugin( pkt->clusterId, epDesc->simpleDesc->AppProfId );
??zcl_ProcessMessageMSG_7:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_138:
        MOV       DPTR,#plugins
        SJMP      ??zcl_ProcessMessageMSG_8
??zcl_ProcessMessageMSG_9:
        MOV       DPL,R0
        MOV       DPH,R1
??zcl_ProcessMessageMSG_8:
        LCALL     ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_118:
        JNZ       $+5
        LJMP      ??zcl_ProcessMessageMSG_10 & 0xFFFF
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        CLR       C
        MOV       A,R4
        SUBB      A,?V0
        MOV       A,R5
        SUBB      A,?V1
        JC        ??zcl_ProcessMessageMSG_9
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        CLR       C
        MOVX      A,@DPTR
        SUBB      A,R4
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,R5
        JC        ??zcl_ProcessMessageMSG_9
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ANL       A,#0x7
        JNZ       ??zcl_ProcessMessageMSG_11
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        XRL       A,#0xb
        JNZ       $+5
        LJMP      ??zcl_ProcessMessageMSG_12 & 0xFFFF
// 2246 
// 2247   // Local and remote Security options must match except for Default Response command
// 2248   if ( ( pInPlugin != NULL ) && !zcl_DefaultRspCmd( inMsg.hdr ) )
// 2249   {
// 2250     securityEnable = ( options & AF_EN_SECURITY ) ? TRUE : FALSE;
??zcl_ProcessMessageMSG_11:
        MOV       A,R2
        JNZ       $+5
        LJMP      ??zcl_ProcessMessageMSG_12 & 0xFFFF
        MOV       A,R6
        ADD       A,#0x19
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        JZ        $+5
        LJMP      ??zcl_ProcessMessageMSG_12 & 0xFFFF
// 2251 
// 2252     // Make sure that Clusters specifically defined to use security are received secure,
// 2253     // any other cluster that wants to use APS security will be allowed
// 2254     if ( ( securityEnable == TRUE ) && ( pkt->SecurityUse == FALSE ) )
// 2255     {
// 2256       if ( UNICAST_MSG( inMsg.msg ) )
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_57:
        JZ        $+5
        LJMP      ??CrossCallReturnLabel_52 & 0xFFFF
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_122:
        JZ        $+5
        LJMP      ??CrossCallReturnLabel_52 & 0xFFFF
// 2257       {
// 2258         // Send a Default Response command back with no Application Link Key security
// 2259         zclSetSecurityOption( pkt->endPoint, pkt->clusterId, FALSE );
        MOV       A,R6
        ADD       A,#0x4
        MOV       ?V0,A
        CLR       A
        ADDC      A,R7
        MOV       ?V1,A
        MOV       A,R6
        ADD       A,#0x14
        MOV       R6,A
        JNC       ??zcl_ProcessMessageMSG_13
        INC       R7
??zcl_ProcessMessageMSG_13:
        ; Setup parameters for call to function zclSetSecurityOption
        MOV       R4,#0x0
        LCALL     ?Subroutine24 & 0xFFFF
// 2260 
// 2261         defautlRspCmd.statusCode = status;
??CrossCallReturnLabel_51:
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
// 2262         defautlRspCmd.commandID = inMsg.hdr.commandID;
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2263         zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
// 2264                                inMsg.msg->clusterId, &defautlRspCmd,
// 2265                                !inMsg.hdr.fc.direction, true,
// 2266                                inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
        ; Setup parameters for call to function zcl_SendDefaultRspCmd
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       ?V2,#0x1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_63:
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_40:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_61:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_47:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 33)
// 2267 
// 2268         zclSetSecurityOption( pkt->endPoint, pkt->clusterId, TRUE );
        ; Setup parameters for call to function zclSetSecurityOption
        MOV       R4,#0x1
        LCALL     ?Subroutine24 & 0xFFFF
// 2269       }
// 2270 
// 2271       rawAFMsg = NULL;
??CrossCallReturnLabel_52:
        MOV       DPTR,#rawAFMsg
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2272       return ( ZCL_PROC_NOT_SECURE );   // Error, ignore the message
        MOV       R1,#0x5
        LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 2273     }
// 2274   }
??zcl_ProcessMessageMSG_10:
        MOV       R0,#0x0
        MOV       R1,#0x0
// 2275 
// 2276   // Is this a foundation type message
// 2277   if ( !interPanMsg && zcl_ProfileCmd( inMsg.hdr.fc.type ) )
??zcl_ProcessMessageMSG_12:
        MOV       C,?VB.1
        JNC       $+5
        LJMP      ??zcl_ProcessMessageMSG_14 & 0xFFFF
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ANL       A,#0x3
        JZ        $+5
        LJMP      ??zcl_ProcessMessageMSG_14 & 0xFFFF
// 2278   {
// 2279     if ( inMsg.hdr.fc.manuSpecific )
        MOVX      A,@DPTR
        ANL       A,#0x4
        JZ        ??zcl_ProcessMessageMSG_15
// 2280     {
// 2281       // We don't support any manufacturer specific command
// 2282       status = ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND;
        MOV       R6,#-0x7c
        LJMP      ??zcl_ProcessMessageMSG_16 & 0xFFFF
// 2283     }
// 2284     else if ( ( inMsg.hdr.commandID <= ZCL_CMD_MAX ) &&
// 2285               ( zclCmdTable[inMsg.hdr.commandID].pfnParseInProfile != NULL ) )
??zcl_ProcessMessageMSG_15:
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#0x17
        JC        $+5
        LJMP      ??zcl_ProcessMessageMSG_17 & 0xFFFF
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_36:
        LCALL     ?S_SHL
        MOV       A,#zclCmdTable & 0xff
        ADD       A,?V0
        MOV       DPL,A
        MOV       A,#(zclCmdTable >> 8) & 0xff
        LCALL     ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_86:
        JNZ       $+5
        LJMP      ??zcl_ProcessMessageMSG_17 & 0xFFFF
// 2286     {
// 2287       zclParseCmd_t parseCmd;
// 2288 
// 2289       parseCmd.endpoint = pkt->endPoint;
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_85:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2290       parseCmd.dataLen = inMsg.pDataLen;
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_70:
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine45 & 0xFFFF
// 2291       parseCmd.pData = inMsg.pData;
??CrossCallReturnLabel_109:
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_71:
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_110:
        ; Setup parameters for indirect call
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP101_8
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_37:
        LCALL     ?S_SHL
        MOV       A,#zclCmdTable & 0xff
        ADD       A,?V0
        MOV       DPL,A
        MOV       A,#(zclCmdTable >> 8) & 0xff
        LCALL     ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_101:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       DPH,A
        POP       DPL
          CFI CFA_SP SP+0
// 2292 
// 2293       // Parse the command, remember that the return value is a pointer to allocated memory
// 2294       inMsg.attrCmd = zclParseCmd( inMsg.hdr.commandID, &parseCmd );
        LCALL     ?CALL_IND
        MOV       ?V1,R3
        MOV       R1,?V1
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine16 & 0xFFFF
// 2295       if ( (inMsg.attrCmd != NULL) && (zclCmdTable[inMsg.hdr.commandID].pfnProcessInProfile != NULL) )
??CrossCallReturnLabel_32:
        MOV       A,R2
        ORL       A,R1
        JZ        ??zcl_ProcessMessageMSG_18
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_38:
        LCALL     ?S_SHL
        MOV       A,#(zclCmdTable + 2) & 0xff
        ADD       A,?V0
        MOV       DPL,A
        MOV       A,#((zclCmdTable + 2) >> 8) & 0xff
        LCALL     ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_87:
        JZ        ??zcl_ProcessMessageMSG_19
// 2296       {
// 2297         // Process the command
// 2298         if ( zclProcessCmd( inMsg.hdr.commandID, &inMsg ) == FALSE )
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine19 & 0xFFFF
// 2299         {
// 2300           // Couldn't find attribute in the table.
// 2301         }
// 2302       }
??CrossCallReturnLabel_39:
        LCALL     ?S_SHL
        MOV       A,#(zclCmdTable + 2) & 0xff
        ADD       A,?V0
        MOV       DPL,A
        MOV       A,#((zclCmdTable + 2) >> 8) & 0xff
        LCALL     ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_102:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       DPH,A
        POP       DPL
          CFI CFA_SP SP+0
        LCALL     ?CALL_IND
// 2303 
// 2304       // Free the buffer
// 2305       if ( inMsg.attrCmd )
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_119:
        JZ        ??zcl_ProcessMessageMSG_18
// 2306       {
// 2307         zcl_mem_free( inMsg.attrCmd );
??zcl_ProcessMessageMSG_19:
        ; Setup parameters for call to function osal_mem_free
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine57_0 & 0xFFFF
// 2308       }
??CrossCallReturnLabel_126:
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2309 
// 2310       if ( CMD_HAS_RSP( inMsg.hdr.commandID ) )
??zcl_ProcessMessageMSG_18:
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        JZ        ??zcl_ProcessMessageMSG_20
        XRL       A,#0x2
        JZ        ??zcl_ProcessMessageMSG_20
        MOVX      A,@DPTR
        XRL       A,#0x3
        JZ        ??zcl_ProcessMessageMSG_20
        MOVX      A,@DPTR
        XRL       A,#0x5
        JZ        ??zcl_ProcessMessageMSG_20
        MOVX      A,@DPTR
        XRL       A,#0x6
        JZ        ??zcl_ProcessMessageMSG_20
        MOVX      A,@DPTR
        XRL       A,#0x8
        JZ        ??zcl_ProcessMessageMSG_20
        MOVX      A,@DPTR
        XRL       A,#0xc
        JZ        ??zcl_ProcessMessageMSG_20
        MOVX      A,@DPTR
        XRL       A,#0x11
        JZ        ??zcl_ProcessMessageMSG_20
        MOVX      A,@DPTR
        XRL       A,#0x13
        JZ        ??zcl_ProcessMessageMSG_20
        MOVX      A,@DPTR
        XRL       A,#0x15
        JZ        ??zcl_ProcessMessageMSG_20
        MOVX      A,@DPTR
        XRL       A,#0xb
        JZ        ??zcl_ProcessMessageMSG_20
// 2311       {
// 2312         rawAFMsg = NULL;
// 2313         return ( ZCL_PROC_SUCCESS ); // We're done
// 2314       }
// 2315 
// 2316       status = ZSuccess;
        MOV       R6,#0x0
        SJMP      ??zcl_ProcessMessageMSG_16
// 2317     }
// 2318     else
// 2319     {
// 2320       // Unsupported message
// 2321       status = ZCL_STATUS_UNSUP_GENERAL_COMMAND;
??zcl_ProcessMessageMSG_17:
        MOV       R6,#-0x7e
        SJMP      ??zcl_ProcessMessageMSG_16
// 2322     }
// 2323   }
// 2324   else  // Not a foundation type message, so it must be specific to the cluster ID.
// 2325   {
// 2326     if ( pInPlugin && pInPlugin->pfnIncomingHdlr )
??zcl_ProcessMessageMSG_14:
        MOV       A,R0
        ORL       A,R1
        JZ        ??zcl_ProcessMessageMSG_21
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_46:
        JZ        ??zcl_ProcessMessageMSG_21
// 2327     {
// 2328       // The return value of the plugin function will be
// 2329       //  ZSuccess - Supported and need default response
// 2330       //  ZFailure - Unsupported
// 2331       //  ZCL_STATUS_CMD_HAS_RSP - Supported and do not need default rsp
// 2332       //  ZCL_STATUS_INVALID_FIELD - Supported, but the incoming msg is wrong formatted
// 2333       //  ZCL_STATUS_INVALID_VALUE - Supported, but the request not achievable by the h/w
// 2334       //  ZCL_STATUS_SOFTWARE_FAILURE - Supported but ZStack memory allocation fails
// 2335       status = pInPlugin->pfnIncomingHdlr( &inMsg );
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_94:
        LCALL     ?CALL_IND
        MOV       A,R1
        MOV       R6,A
// 2336       if ( status == ZCL_STATUS_CMD_HAS_RSP || ( interPanMsg && status == ZSuccess ) )
        MOV       A,#-0x1
        XRL       A,R6
        JZ        ??zcl_ProcessMessageMSG_20
        MOV       C,?VB.1
        JNC       ??zcl_ProcessMessageMSG_22
        MOV       A,R1
        JNZ       ??zcl_ProcessMessageMSG_22
// 2337       {
// 2338         rawAFMsg = NULL;
??zcl_ProcessMessageMSG_20:
        MOV       DPTR,#rawAFMsg
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2339         return ( ZCL_PROC_SUCCESS ); // We're done
        MOV       R1,A
        LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 2340       }
// 2341     }
// 2342 
// 2343     if ( status == ZFailure )
??zcl_ProcessMessageMSG_22:
        MOV       A,#0x1
        XRL       A,R6
        JNZ       ??zcl_ProcessMessageMSG_16
// 2344     {
// 2345       // Unsupported message
// 2346       if ( inMsg.hdr.fc.manuSpecific )
??zcl_ProcessMessageMSG_21:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ANL       A,#0x4
        JZ        ??zcl_ProcessMessageMSG_23
// 2347       {
// 2348         status = ZCL_STATUS_UNSUP_MANU_CLUSTER_COMMAND;
        MOV       R6,#-0x7d
        SJMP      ??zcl_ProcessMessageMSG_16
// 2349       }
// 2350       else
// 2351       {
// 2352         status = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
??zcl_ProcessMessageMSG_23:
        MOV       R6,#-0x7f
// 2353       }
// 2354     }
// 2355   }
// 2356 
// 2357   if ( UNICAST_MSG( inMsg.msg ) && inMsg.hdr.fc.disableDefaultRsp == 0 )
??zcl_ProcessMessageMSG_16:
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_58:
        JNZ       ??zcl_ProcessMessageMSG_24
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_123:
        JNZ       ??zcl_ProcessMessageMSG_24
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ANL       A,#0x10
        JNZ       ??zcl_ProcessMessageMSG_24
// 2358   {
// 2359     // Send a Default Response command back
// 2360     defautlRspCmd.statusCode = status;
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R6
        MOVX      @DPTR,A
// 2361     defautlRspCmd.commandID = inMsg.hdr.commandID;
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2362     zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
// 2363                            inMsg.msg->clusterId, &defautlRspCmd,
// 2364                            !inMsg.hdr.fc.direction, true,
// 2365                            inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
        ; Setup parameters for call to function zcl_SendDefaultRspCmd
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_78:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_64:
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_41:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_62:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_48:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 33)
// 2366     defaultResponseSent = TRUE;
        SETB      ?VB.0
// 2367   }
// 2368 
// 2369   rawAFMsg = NULL;
??zcl_ProcessMessageMSG_24:
        MOV       DPTR,#rawAFMsg
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2370   if ( status == ZSuccess )
        MOV       A,R6
        JNZ       ??zcl_ProcessMessageMSG_25
// 2371   {
// 2372     return ( ZCL_PROC_SUCCESS );
        MOV       R1,#0x0
        SJMP      ??zcl_ProcessMessageMSG_1
// 2373   }
// 2374   else if ( status == ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND )
??zcl_ProcessMessageMSG_25:
        MOV       A,#-0x7c
        XRL       A,R6
        MOV       C,?VB.0
        JNZ       ??zcl_ProcessMessageMSG_26
// 2375   {
// 2376     if ( defaultResponseSent )
        JNC       ??zcl_ProcessMessageMSG_27
// 2377     {
// 2378       return ( ZCL_PROC_MANUFACTURER_SPECIFIC_DR );
        MOV       R1,#0x7
        SJMP      ??zcl_ProcessMessageMSG_1
// 2379     }
// 2380     else
// 2381     {
// 2382       return ( ZCL_PROC_MANUFACTURER_SPECIFIC );
??zcl_ProcessMessageMSG_27:
        MOV       R1,#0x6
        SJMP      ??zcl_ProcessMessageMSG_1
// 2383     }
// 2384   }
// 2385   else
// 2386   {
// 2387     if ( defaultResponseSent )
??zcl_ProcessMessageMSG_26:
        JNC       ??zcl_ProcessMessageMSG_28
// 2388     {
// 2389       return ( ZCL_PROC_NOT_HANDLED_DR );
        MOV       R1,#0x9
        SJMP      ??zcl_ProcessMessageMSG_1
// 2390     }
// 2391     else
// 2392     {
// 2393       return ( ZCL_PROC_NOT_HANDLED );
??zcl_ProcessMessageMSG_28:
        MOV       R1,#0x8
??zcl_ProcessMessageMSG_1:
        MOV       A,#0x15
// 2394     }
// 2395   }
        LJMP      ?Subroutine1 & 0xFFFF
// 2396 }
          CFI EndBlock cfiBlock113

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine46:
          CFI Block cfiCond114 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_122
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function zcl_ProcessMessageMSG
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_123
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+-4
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function zcl_ProcessMessageMSG
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-2
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function zcl_ProcessMessageMSG
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_40
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-4
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function zcl_ProcessMessageMSG
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_41
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-4
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiPicker119 Using cfiCommon1
          CFI (cfiPicker119) NoFunction
          CFI (cfiPicker119) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        RET
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiPicker119

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine41:
          CFI Block cfiCond120 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_86
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function zcl_ProcessMessageMSG
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-2
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker122 Using cfiCommon1
          CFI (cfiPicker122) NoFunction
          CFI (cfiPicker122) Picker
        LCALL     ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_103:
        MOV       R0,A
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiPicker122

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine50:
          CFI Block cfiCond123 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_101
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function zcl_ProcessMessageMSG
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-2
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function zcl_ProcessMessageMSG
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_86
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-4
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function zcl_ProcessMessageMSG
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_87
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-4
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker127 Using cfiCommon1
          CFI (cfiPicker127) NoFunction
          CFI (cfiPicker127) Picker
        ADDC      A,?V1
        MOV       DPH,A
        CLR       A
        MOVC      A,@A+DPTR
        RET
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiPicker127

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine40:
          CFI Block cfiCond128 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_84
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function zcl_ProcessMessageMSG
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-2
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker130 Using cfiCommon1
          CFI (cfiPicker130) NoFunction
          CFI (cfiPicker130) Picker
        LCALL     ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_100:
        RET
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiPicker130

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine49:
          CFI Block cfiCond131 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_84
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function zcl_ProcessMessageMSG
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_85
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-4
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function zcl_ProcessMessageMSG
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_49
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-4
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function zcl_ProcessMessageMSG
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_50
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-4
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker135 Using cfiCommon1
          CFI (cfiPicker135) NoFunction
          CFI (cfiPicker135) Picker
        MOV       A,R6
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiPicker135

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond136 Using cfiCommon0
          CFI Function zcl_SendDefaultRspCmd
          CFI Conditional ??CrossCallReturnLabel_75
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function zcl_SendDefaultRspCmd
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-2
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function zcl_SendDefaultRspCmd
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-2
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function zcl_ProcessMessageMSG
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-2
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker140 Using cfiCommon1
          CFI (cfiPicker140) NoFunction
          CFI (cfiPicker140) Picker
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiPicker140

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond141 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_127
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function zcl_ProcessMessageMSG
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_128
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-2
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker143 Using cfiCommon1
          CFI (cfiPicker143) NoFunction
          CFI (cfiPicker143) Picker
        MOV       DPH,A
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiPicker143
        REQUIRE ??Subroutine57_0
        ; // Fall through to label ??Subroutine57_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine57_0:
          CFI Block cfiCond144 Using cfiCommon0
          CFI Function zcl_getRawAFMsg
          CFI Conditional ??CrossCallReturnLabel_124
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function zcl_registerPlugin
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_125
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-2
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function zcl_ProcessMessageMSG
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_126
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-2
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function zcl_HandleExternal
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_127
          CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond147) CFA_SP SP+-2
          CFI (cfiCond147) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function zcl_ProcessMessageMSG
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_128
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+-2
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker149 Using cfiCommon1
          CFI (cfiPicker149) NoFunction
          CFI (cfiPicker149) Picker
        LCALL     ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_133:
        RET
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiPicker149

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine47:
          CFI Block cfiCond150 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function zcl_registerAttrList
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_44
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+-4
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond152 Using cfiCommon0
          CFI (cfiCond152) Function zcl_registerClusterOptionList
          CFI (cfiCond152) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_45
          CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond152) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond152) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond152) CFA_SP SP+-4
          CFI (cfiCond152) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function zcl_ProcessMessageMSG
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_46
          CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond153) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond153) CFA_SP SP+-4
          CFI (cfiCond153) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function zclFindAttrRecsList
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_42
          CFI (cfiCond154) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond154) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond154) CFA_SP SP+-9
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function zcl_HandleExternal
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_127
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-4
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function zcl_ProcessMessageMSG
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_128
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-4
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function zcl_getRawAFMsg
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_124
          CFI (cfiCond157) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond157) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond157) CFA_SP SP+-9
          CFI Block cfiCond158 Using cfiCommon0
          CFI (cfiCond158) Function zcl_registerPlugin
          CFI (cfiCond158) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_125
          CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond158) CFA_SP SP+-4
          CFI (cfiCond158) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function zcl_ProcessMessageMSG
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_126
          CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond159) CFA_SP SP+-4
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function zcl_SendCommand
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_73
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond160) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond160) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond160) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond160) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond160) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond160) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond160) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-4
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function zcl_ProcessMessageMSG
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_74
          CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond161) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond161) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond161) CFA_SP SP+-4
          CFI (cfiCond161) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function zcl_ProcessMessageMSG
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_131, ??CrossCallReturnLabel_51
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+-4
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function zcl_ProcessMessageMSG
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_131, ??CrossCallReturnLabel_52
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-4
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function zcl_ProcessMessageMSG
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_49
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+-4
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function zcl_ProcessMessageMSG
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_50
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-4
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker166 Using cfiCommon1
          CFI (cfiPicker166) NoFunction
          CFI (cfiPicker166) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        RET
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiPicker166

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond167 Using cfiCommon0
          CFI Function zcl_SendCommand
          CFI Conditional ??CrossCallReturnLabel_73
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function zcl_ProcessMessageMSG
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond168) CFA_SP SP+-2
          CFI (cfiCond168) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker169 Using cfiCommon1
          CFI (cfiPicker169) NoFunction
          CFI (cfiPicker169) Picker
        LCALL     ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_132:
        LCALL     `??StubAPS_InterPan::?relay`; Banked call to: StubAPS_InterPan
        MOV       A,R1
        RET
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiPicker169

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond170 Using cfiCommon0
          CFI Function zcl_addExternalFoundationHandler
          CFI Conditional ??CrossCallReturnLabel_69
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond171 Using cfiCommon0
          CFI (cfiCond171) Function zcl_ProcessMessageMSG
          CFI (cfiCond171) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond171) CFA_SP SP+-2
          CFI (cfiCond171) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function zcl_ProcessMessageMSG
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+-2
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function zclParseInDefaultRspCmd
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond173) CFA_SP SP+-2
          CFI (cfiCond173) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker174 Using cfiCommon1
          CFI (cfiPicker174) NoFunction
          CFI (cfiPicker174) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond170
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiPicker174

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond175 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_63
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function zcl_ProcessMessageMSG
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond176) CFA_SP SP+-2
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiPicker177 Using cfiCommon1
          CFI (cfiPicker177) NoFunction
          CFI (cfiPicker177) Picker
        MOVX      A,@DPTR
        RRC       A
        RRC       A
        RRC       A
        ANL       A,#0x1f
        XRL       A,#0x1
        ANL       A,#0x1
        RET
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiPicker177

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond178 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_61
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function zcl_ProcessMessageMSG
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+-2
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiPicker180 Using cfiCommon1
          CFI (cfiPicker180) NoFunction
          CFI (cfiPicker180) Picker
        MOVX      A,@DPTR
        ADD       A,#0x6
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R3,A
        MOV       A,#0x7
        RET
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiPicker180

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond181 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_137
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond182 Using cfiCommon0
          CFI (cfiCond182) Function zcl_ProcessMessageMSG
          CFI (cfiCond182) Conditional ??CrossCallReturnLabel_138
          CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond182) CFA_SP SP+-2
          CFI (cfiCond182) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker183 Using cfiCommon1
          CFI (cfiPicker183) NoFunction
          CFI (cfiPicker183) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond181
          CFI EndBlock cfiCond182
          CFI EndBlock cfiPicker183
        REQUIRE ??Subroutine58_0
        ; // Fall through to label ??Subroutine58_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine58_0:
          CFI Block cfiCond184 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_134
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond185 Using cfiCommon0
          CFI (cfiCond185) Function zcl_ProcessMessageMSG
          CFI (cfiCond185) Conditional ??CrossCallReturnLabel_135
          CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond185) CFA_SP SP+-2
          CFI (cfiCond185) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond186 Using cfiCommon0
          CFI (cfiCond186) Function zclFindAttrRec
          CFI (cfiCond186) Conditional ??CrossCallReturnLabel_136
          CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond186) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond186) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond186) CFA_SP SP+-4
          CFI (cfiCond186) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond187 Using cfiCommon0
          CFI (cfiCond187) Function zcl_HandleExternal
          CFI (cfiCond187) Conditional ??CrossCallReturnLabel_137
          CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond187) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond187) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond187) CFA_SP SP+-2
          CFI (cfiCond187) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond188 Using cfiCommon0
          CFI (cfiCond188) Function zcl_ProcessMessageMSG
          CFI (cfiCond188) Conditional ??CrossCallReturnLabel_138
          CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond188) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond188) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond188) CFA_SP SP+-2
          CFI (cfiCond188) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker189 Using cfiCommon1
          CFI (cfiPicker189) NoFunction
          CFI (cfiPicker189) Picker
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        RET
          CFI EndBlock cfiCond184
          CFI EndBlock cfiCond185
          CFI EndBlock cfiCond186
          CFI EndBlock cfiCond187
          CFI EndBlock cfiCond188
          CFI EndBlock cfiPicker189

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond190 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_57
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function zcl_ProcessMessageMSG
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond191) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond191) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond191) CFA_SP SP+-2
          CFI (cfiCond191) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker192 Using cfiCommon1
          CFI (cfiPicker192) NoFunction
          CFI (cfiPicker192) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0x15
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiPicker192

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond193 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_51
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond194 Using cfiCommon0
          CFI (cfiCond194) Function zcl_ProcessMessageMSG
          CFI (cfiCond194) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond194) CFA_SP SP+-2
          CFI (cfiCond194) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker195 Using cfiCommon1
          CFI (cfiPicker195) NoFunction
          CFI (cfiPicker195) Picker
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_131:
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclSetSecurityOption::?relay`; Banked call to: zclSetSecurityOption
        RET
          CFI EndBlock cfiCond193
          CFI EndBlock cfiCond194
          CFI EndBlock cfiPicker195

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond196 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_49
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond197 Using cfiCommon0
          CFI (cfiCond197) Function zcl_ProcessMessageMSG
          CFI (cfiCond197) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond197) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond197) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond197) CFA_SP SP+-2
          CFI (cfiCond197) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker198 Using cfiCommon1
          CFI (cfiPicker198) NoFunction
          CFI (cfiPicker198) Picker
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_130:
        LCALL     ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_99:
        MOV       R1,A
        RET
          CFI EndBlock cfiCond196
          CFI EndBlock cfiCond197
          CFI EndBlock cfiPicker198

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond199 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_47
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond200 Using cfiCommon0
          CFI (cfiCond200) Function zcl_ProcessMessageMSG
          CFI (cfiCond200) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond200) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond200) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond200) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond200) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond200) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond200) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond200) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond200) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond200) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond200) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond200) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond200) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond200) CFA_SP SP+-2
          CFI (cfiCond200) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiPicker201 Using cfiCommon1
          CFI (cfiPicker201) NoFunction
          CFI (cfiPicker201) Picker
        LCALL     ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_98:
        MOV       R1,A
        LCALL     `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
        MOV       A,#0x7
        RET
          CFI EndBlock cfiCond199
          CFI EndBlock cfiCond200
          CFI EndBlock cfiPicker201

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine48:
          CFI Block cfiCond202 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_97
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond203 Using cfiCommon0
          CFI (cfiCond203) Function zcl_ProcessMessageMSG
          CFI (cfiCond203) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_47
          CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond203) CFA_SP SP+-4
          CFI (cfiCond203) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond204 Using cfiCommon0
          CFI (cfiCond204) Function zcl_ProcessMessageMSG
          CFI (cfiCond204) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_48
          CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond204) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond204) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond204) CFA_SP SP+-4
          CFI (cfiCond204) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiPicker205 Using cfiCommon1
          CFI (cfiPicker205) NoFunction
          CFI (cfiPicker205) Picker
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond202
          CFI EndBlock cfiCond203
          CFI EndBlock cfiCond204
          CFI EndBlock cfiPicker205

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond206 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond207 Using cfiCommon0
          CFI (cfiCond207) Function zcl_ProcessMessageMSG
          CFI (cfiCond207) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond207) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond207) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond207) CFA_SP SP+-2
          CFI (cfiCond207) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiPicker208 Using cfiCommon1
          CFI (cfiPicker208) NoFunction
          CFI (cfiPicker208) Picker
        LCALL     ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_96:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,#0x7
        RET
          CFI EndBlock cfiCond206
          CFI EndBlock cfiCond207
          CFI EndBlock cfiPicker208

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond209 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_36
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond210 Using cfiCommon0
          CFI (cfiCond210) Function zcl_ProcessMessageMSG
          CFI (cfiCond210) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond210) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond210) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond210) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond210) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond210) CFA_SP SP+-2
          CFI (cfiCond210) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond211 Using cfiCommon0
          CFI (cfiCond211) Function zcl_ProcessMessageMSG
          CFI (cfiCond211) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond211) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond211) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond211) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond211) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond211) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond211) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond211) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond211) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond211) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond211) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond211) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond211) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond211) CFA_SP SP+-2
          CFI (cfiCond211) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond212 Using cfiCommon0
          CFI (cfiCond212) Function zcl_ProcessMessageMSG
          CFI (cfiCond212) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond212) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond212) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond212) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond212) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond212) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond212) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond212) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond212) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond212) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond212) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond212) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond212) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond212) CFA_SP SP+-2
          CFI (cfiCond212) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker213 Using cfiCommon1
          CFI (cfiPicker213) NoFunction
          CFI (cfiPicker213) Picker
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       ?V1,#0x0
        MOV       A,#0x2
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond209
          CFI EndBlock cfiCond210
          CFI EndBlock cfiCond211
          CFI EndBlock cfiCond212
          CFI EndBlock cfiPicker213
// 2397 
// 2398 /*********************************************************************
// 2399  * PRIVATE FUNCTIONS
// 2400  *********************************************************************/
// 2401 
// 2402 /*********************************************************************
// 2403  * @fn      zclParseHdr
// 2404  *
// 2405  * @brief   Parse header of the ZCL format
// 2406  *
// 2407  * @param   hdr - place to put the frame control information
// 2408  * @param   pData - incoming buffer to parse
// 2409  *
// 2410  * @return  pointer past the header
// 2411  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2412 uint8 *zclParseHdr( zclFrameHdr_t *hdr, uint8 *pData )
zclParseHdr:
          CFI Block cfiBlock214 Using cfiCommon0
          CFI Function zclParseHdr
        CODE
// 2413 {
        FUNCALL zclParseHdr, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
// 2414   // Clear the header
// 2415   zcl_memset( (uint8 *)hdr, 0, sizeof ( zclFrameHdr_t ) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x6
        MOV       R5,#0x0
        MOV       R1,#0x0
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2416 
// 2417   // Parse the Frame Control
// 2418   hdr->fc.type = zcl_FCType( *pData );
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        ANL       A,#0xfc
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        ANL       A,#0x3
        MOV       R2,A
        MOV       A,R0
        ORL       A,R2
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        LCALL     ?Subroutine12 & 0xFFFF
// 2419   hdr->fc.manuSpecific = zcl_FCManuSpecific( *pData ) ? 1 : 0;
??CrossCallReturnLabel_14:
        MOV       C,0xE0 /* A   */.2
        JNC       ??zclParseHdr_0
        SETB      B.0
        SJMP      ??zclParseHdr_1
??zclParseHdr_0:
        CLR       B.0
??zclParseHdr_1:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        ANL       A,#0xfb
        MOVX      @DPTR,A
        MOV       C,B.0
        CLR       A
        RLC       A
        MOV       ?V2,A
        MOV       ?V3,#0x0
        MOV       A,#0x2
        MOV       R0,#?V2
        LCALL     ?S_SHL
        MOVX      A,@DPTR
        ORL       A,?V2
        LCALL     ?Subroutine12 & 0xFFFF
// 2420   if ( zcl_FCDirection( *pData ) )
??CrossCallReturnLabel_15:
        MOV       C,0xE0 /* A   */.3
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        JNC       ??zclParseHdr_2
// 2421   {
// 2422     hdr->fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
        ORL       A,#0x8
        SJMP      ??zclParseHdr_3
// 2423   }
// 2424   else
// 2425   {
// 2426     hdr->fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
??zclParseHdr_2:
        ANL       A,#0xf7
// 2427   }
??zclParseHdr_3:
        LCALL     ?Subroutine12 & 0xFFFF
// 2428 
// 2429   hdr->fc.disableDefaultRsp = zcl_FCDisableDefaultRsp( *pData ) ? 1 : 0;
??CrossCallReturnLabel_16:
        MOV       C,0xE0 /* A   */.4
        JNC       ??zclParseHdr_4
        SETB      B.0
        SJMP      ??zclParseHdr_5
??zclParseHdr_4:
        CLR       B.0
??zclParseHdr_5:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        ANL       A,#0xef
        MOVX      @DPTR,A
        MOV       C,B.0
        CLR       A
        RLC       A
        MOV       ?V2,A
        MOV       A,#0x4
        MOV       R0,#?V2
        LCALL     ?S_SHL
        MOVX      A,@DPTR
        ORL       A,?V2
        LCALL     ?Subroutine13 & 0xFFFF
// 2430   pData++;  // move past the frame control field
??CrossCallReturnLabel_18:
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 2431 
// 2432   // parse the manfacturer code
// 2433   if ( hdr->fc.manuSpecific )
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        ANL       A,#0x4
        JZ        ??zclParseHdr_6
// 2434   {
// 2435     hdr->manuCode = BUILD_UINT16( pData[0], pData[1] );
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R2
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine54_0 & 0xFFFF
// 2436     pData += 2;
??CrossCallReturnLabel_106:
        MOV       A,R6
        ADD       A,#0x2
        MOV       R6,A
        JNC       ??zclParseHdr_6
        INC       R7
// 2437   }
// 2438 
// 2439   // parse the Transaction Sequence Number
// 2440   hdr->transSeqNum = *pData++;
??zclParseHdr_6:
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine8 & 0xFFFF
// 2441 
// 2442   // parse the Cluster's command ID
// 2443   hdr->commandID = *pData++;
??CrossCallReturnLabel_6:
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
// 2444 
// 2445   // Should point to the frame payload
// 2446   return ( pData );
        MOV       A,R6
        ADD       A,#0x2
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LJMP      ??Subroutine53_0 & 0xFFFF
// 2447 }
          CFI EndBlock cfiBlock214

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond215 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function zclParseHdr
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond216) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond216) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond216) CFA_SP SP+-2
          CFI (cfiCond216) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond217 Using cfiCommon0
          CFI (cfiCond217) Function zclSerializeData
          CFI (cfiCond217) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond217) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond217) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond217) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond217) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond217) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond217) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond217) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond217) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond217) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond217) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond217) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond217) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond217) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond217) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond217) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond217) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond217) CFA_SP SP+-2
          CFI (cfiCond217) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond218 Using cfiCommon0
          CFI (cfiCond218) Function zclSerializeData
          CFI (cfiCond218) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond218) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond218) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond218) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond218) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond218) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond218) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond218) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond218) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond218) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond218) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond218) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond218) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond218) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond218) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond218) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond218) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond218) CFA_SP SP+-2
          CFI (cfiCond218) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker219 Using cfiCommon1
          CFI (cfiPicker219) NoFunction
          CFI (cfiPicker219) Picker
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        RET
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiCond217
          CFI EndBlock cfiCond218
          CFI EndBlock cfiPicker219

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond220 Using cfiCommon0
          CFI Function zclParseHdr
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond221 Using cfiCommon0
          CFI (cfiCond221) Function zclParseHdr
          CFI (cfiCond221) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond221) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond221) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond221) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond221) CFA_SP SP+-2
          CFI (cfiCond221) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond222 Using cfiCommon0
          CFI (cfiCond222) Function zclParseHdr
          CFI (cfiCond222) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond222) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond222) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond222) CFA_SP SP+-2
          CFI (cfiCond222) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker223 Using cfiCommon1
          CFI (cfiPicker223) NoFunction
          CFI (cfiPicker223) Picker
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond220
          CFI EndBlock cfiCond221
          CFI EndBlock cfiCond222
          CFI EndBlock cfiPicker223
// 2448 
// 2449 /*********************************************************************
// 2450  * @fn      zclBuildHdr
// 2451  *
// 2452  * @brief   Build header of the ZCL format
// 2453  *
// 2454  * @param   hdr - outgoing header information
// 2455  * @param   pData - outgoing header space
// 2456  *
// 2457  * @return  pointer past the header
// 2458  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2459 static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData )
zclBuildHdr:
          CFI Block cfiBlock224 Using cfiCommon0
          CFI Function zclBuildHdr
        CODE
// 2460 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 2461   // Build the Frame Control byte
// 2462   *pData = hdr->fc.type;
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ANL       A,#0x3
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ??Subroutine59_0 & 0xFFFF
// 2463   *pData |= hdr->fc.manuSpecific << 2;
??CrossCallReturnLabel_141:
        ANL       A,#0x4
        LCALL     ?Subroutine10 & 0xFFFF
// 2464   *pData |= hdr->fc.direction << 3;
??CrossCallReturnLabel_139:
        ANL       A,#0x8
        LCALL     ?Subroutine10 & 0xFFFF
// 2465   *pData |= hdr->fc.disableDefaultRsp << 4;
??CrossCallReturnLabel_140:
        ANL       A,#0x10
        MOV       R0,A
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        ORL       A,R0
        MOVX      @DPTR,A
// 2466   pData++;  // move past the frame control field
        INC       DPTR
        MOV       R4,DPL
        MOV       R5,DPH
// 2467 
// 2468   // Add the manfacturer code
// 2469   if ( hdr->fc.manuSpecific )
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ANL       A,#0x4
        JZ        ??zclBuildHdr_0
// 2470   {
// 2471     *pData++ = LO_UINT16( hdr->manuCode );
        MOV       A,R2
        ADD       A,#0x2
        MOV       R0,A
        CLR       A
        ADDC      A,R3
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        LCALL     ??Subroutine61_0 & 0xFFFF
// 2472     *pData++ = HI_UINT16( hdr->manuCode );
// 2473   }
??CrossCallReturnLabel_146:
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_66:
        MOV       R4,A
        JNC       ??zclBuildHdr_0
        INC       R5
// 2474 
// 2475   // Add the Transaction Sequence Number
// 2476   *pData++ = hdr->transSeqNum;
??zclBuildHdr_0:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine61_0 & 0xFFFF
??CrossCallReturnLabel_147:
        LCALL     ?Subroutine9 & 0xFFFF
// 2477 
// 2478   // Add the Cluster's command ID
// 2479   *pData++ = hdr->commandID;
??CrossCallReturnLabel_10:
        LCALL     ?Subroutine31 & 0xFFFF
// 2480 
// 2481   // Should point to the frame payload
// 2482   return ( pData );
??CrossCallReturnLabel_65:
        MOV       R2,A
        CLR       A
        ADDC      A,R5
        MOV       R3,A
        SJMP      ??Subroutine60_0
// 2483 }
          CFI EndBlock cfiBlock224

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond225 Using cfiCommon0
          CFI Function zclBuildHdr
          CFI Conditional ??CrossCallReturnLabel_66
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond226 Using cfiCommon0
          CFI (cfiCond226) Function zclBuildHdr
          CFI (cfiCond226) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond226) CFA_SP SP+-2
          CFI (cfiCond226) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker227 Using cfiCommon1
          CFI (cfiPicker227) NoFunction
          CFI (cfiPicker227) Picker
        MOVX      A,@DPTR
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        MOVX      @DPTR,A
        MOV       A,R4
        ADD       A,#0x2
        RET
          CFI EndBlock cfiCond225
          CFI EndBlock cfiCond226
          CFI EndBlock cfiPicker227

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond228 Using cfiCommon0
          CFI Function zclBuildHdr
          CFI Conditional ??CrossCallReturnLabel_139
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond229 Using cfiCommon0
          CFI (cfiCond229) Function zclBuildHdr
          CFI (cfiCond229) Conditional ??CrossCallReturnLabel_140
          CFI (cfiCond229) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond229) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond229) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond229) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond229) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond229) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond229) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond229) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond229) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond229) CFA_SP SP+-2
          CFI (cfiCond229) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker230 Using cfiCommon1
          CFI (cfiPicker230) NoFunction
          CFI (cfiPicker230) Picker
        MOV       R0,A
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        ORL       A,R0
          CFI EndBlock cfiCond228
          CFI EndBlock cfiCond229
          CFI EndBlock cfiPicker230
        REQUIRE ??Subroutine59_0
        ; // Fall through to label ??Subroutine59_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine59_0:
          CFI Block cfiCond231 Using cfiCommon0
          CFI Function zclBuildHdr
          CFI Conditional ??CrossCallReturnLabel_141
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond232 Using cfiCommon0
          CFI (cfiCond232) Function zclBuildHdr
          CFI (cfiCond232) Conditional ??CrossCallReturnLabel_139
          CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond232) CFA_SP SP+-2
          CFI (cfiCond232) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond233 Using cfiCommon0
          CFI (cfiCond233) Function zclBuildHdr
          CFI (cfiCond233) Conditional ??CrossCallReturnLabel_140
          CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond233) CFA_SP SP+-2
          CFI (cfiCond233) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker234 Using cfiCommon1
          CFI (cfiPicker234) NoFunction
          CFI (cfiPicker234) Picker
        LCALL     ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_144:
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond231
          CFI EndBlock cfiCond232
          CFI EndBlock cfiCond233
          CFI EndBlock cfiPicker234

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine52:
          CFI Block cfiCond235 Using cfiCommon0
          CFI Function zcl_addExternalFoundationHandler
          CFI Conditional ??CrossCallReturnLabel_142, ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond236 Using cfiCommon0
          CFI (cfiCond236) Function zcl_addExternalFoundationHandler
          CFI (cfiCond236) Conditional ??CrossCallReturnLabel_142, ??CrossCallReturnLabel_25
          CFI (cfiCond236) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond236) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond236) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond236) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond236) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond236) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond236) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond236) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond236) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond236) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond236) CFA_SP SP+-4
          CFI (cfiCond236) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond237 Using cfiCommon0
          CFI (cfiCond237) Function zcl_registerPlugin
          CFI (cfiCond237) Conditional ??CrossCallReturnLabel_143, ??CrossCallReturnLabel_90
          CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond237) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond237) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond237) CFA_SP SP+-4
          CFI (cfiCond237) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond238 Using cfiCommon0
          CFI (cfiCond238) Function zcl_registerAttrList
          CFI (cfiCond238) Conditional ??CrossCallReturnLabel_143, ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_0
          CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond238) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond238) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond238) CFA_SP SP+-6
          CFI (cfiCond238) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond239 Using cfiCommon0
          CFI (cfiCond239) Function zcl_registerClusterOptionList
          CFI (cfiCond239) Conditional ??CrossCallReturnLabel_143, ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_1
          CFI (cfiCond239) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond239) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond239) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond239) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond239) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond239) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond239) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond239) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond239) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond239) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond239) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond239) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond239) CFA_SP SP+-6
          CFI (cfiCond239) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond240 Using cfiCommon0
          CFI (cfiCond240) Function zclBuildHdr
          CFI (cfiCond240) Conditional ??CrossCallReturnLabel_144, ??CrossCallReturnLabel_139
          CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond240) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond240) CFA_SP SP+-4
          CFI (cfiCond240) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond241 Using cfiCommon0
          CFI (cfiCond241) Function zclBuildHdr
          CFI (cfiCond241) Conditional ??CrossCallReturnLabel_144, ??CrossCallReturnLabel_140
          CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond241) CFA_SP SP+-4
          CFI (cfiCond241) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond242 Using cfiCommon0
          CFI (cfiCond242) Function zclBuildHdr
          CFI (cfiCond242) Conditional ??CrossCallReturnLabel_144, ??CrossCallReturnLabel_141
          CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond242) CFA_SP SP+-4
          CFI (cfiCond242) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond243 Using cfiCommon0
          CFI (cfiCond243) Function zcl_registerPlugin
          CFI (cfiCond243) Conditional ??CrossCallReturnLabel_145, ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_2
          CFI (cfiCond243) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond243) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond243) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond243) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond243) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond243) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond243) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond243) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond243) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond243) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond243) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond243) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond243) CFA_SP SP+-6
          CFI (cfiCond243) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond244 Using cfiCommon0
          CFI (cfiCond244) Function zcl_registerClusterOptionList
          CFI (cfiCond244) Conditional ??CrossCallReturnLabel_145, ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_3
          CFI (cfiCond244) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond244) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond244) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond244) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond244) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond244) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond244) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond244) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond244) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond244) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond244) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond244) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond244) CFA_SP SP+-6
          CFI (cfiCond244) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond245 Using cfiCommon0
          CFI (cfiCond245) Function zcl_registerAttrList
          CFI (cfiCond245) Conditional ??CrossCallReturnLabel_145, ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_4
          CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond245) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond245) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond245) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond245) CFA_SP SP+-8
          CFI (cfiCond245) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond246 Using cfiCommon0
          CFI (cfiCond246) Function zcl_registerAttrList
          CFI (cfiCond246) Conditional ??CrossCallReturnLabel_145, ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_5
          CFI (cfiCond246) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond246) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond246) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond246) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond246) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond246) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond246) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond246) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond246) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond246) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond246) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond246) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond246) CFA_SP SP+-8
          CFI (cfiCond246) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond247 Using cfiCommon0
          CFI (cfiCond247) Function zcl_registerReadWriteCB
          CFI (cfiCond247) Conditional ??CrossCallReturnLabel_145, ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_9
          CFI (cfiCond247) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond247) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond247) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond247) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond247) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond247) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond247) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond247) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond247) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond247) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond247) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond247) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond247) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond247) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond247) CFA_SP SP+-8
          CFI (cfiCond247) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond248 Using cfiCommon0
          CFI (cfiCond248) Function zclBuildHdr
          CFI (cfiCond248) Conditional ??CrossCallReturnLabel_145, ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_10
          CFI (cfiCond248) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond248) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond248) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond248) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond248) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond248) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond248) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond248) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond248) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond248) CFA_SP SP+-8
          CFI (cfiCond248) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker249 Using cfiCommon1
          CFI (cfiPicker249) NoFunction
          CFI (cfiPicker249) Picker
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R3
        RET
          CFI EndBlock cfiCond235
          CFI EndBlock cfiCond236
          CFI EndBlock cfiCond237
          CFI EndBlock cfiCond238
          CFI EndBlock cfiCond239
          CFI EndBlock cfiCond240
          CFI EndBlock cfiCond241
          CFI EndBlock cfiCond242
          CFI EndBlock cfiCond243
          CFI EndBlock cfiCond244
          CFI EndBlock cfiCond245
          CFI EndBlock cfiCond246
          CFI EndBlock cfiCond247
          CFI EndBlock cfiCond248
          CFI EndBlock cfiPicker249

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond250 Using cfiCommon0
          CFI Function zcl_registerReadWriteCB
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond251 Using cfiCommon0
          CFI (cfiCond251) Function zclBuildHdr
          CFI (cfiCond251) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond251) CFA_SP SP+-2
          CFI (cfiCond251) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker252 Using cfiCommon1
          CFI (cfiPicker252) NoFunction
          CFI (cfiPicker252) Picker
        LCALL     ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_93:
        RET
          CFI EndBlock cfiCond250
          CFI EndBlock cfiCond251
          CFI EndBlock cfiPicker252

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine44:
          CFI Block cfiCond253 Using cfiCommon0
          CFI Function zcl_registerAttrList
          CFI Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond254 Using cfiCommon0
          CFI (cfiCond254) Function zcl_registerAttrList
          CFI (cfiCond254) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_5
          CFI (cfiCond254) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond254) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond254) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond254) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond254) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond254) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond254) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond254) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond254) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond254) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond254) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond254) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond254) CFA_SP SP+-4
          CFI (cfiCond254) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond255 Using cfiCommon0
          CFI (cfiCond255) Function zcl_registerReadWriteCB
          CFI (cfiCond255) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_9
          CFI (cfiCond255) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond255) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond255) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond255) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond255) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond255) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond255) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond255) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond255) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond255) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond255) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond255) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond255) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond255) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond255) CFA_SP SP+-4
          CFI (cfiCond255) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond256 Using cfiCommon0
          CFI (cfiCond256) Function zclBuildHdr
          CFI (cfiCond256) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_10
          CFI (cfiCond256) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond256) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond256) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond256) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond256) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond256) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond256) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond256) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond256) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond256) CFA_SP SP+-4
          CFI (cfiCond256) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker257 Using cfiCommon1
          CFI (cfiPicker257) NoFunction
          CFI (cfiPicker257) Picker
        LCALL     ?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_105:
        INC       DPTR
        RET
          CFI EndBlock cfiCond253
          CFI EndBlock cfiCond254
          CFI EndBlock cfiCond255
          CFI EndBlock cfiCond256
          CFI EndBlock cfiPicker257

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine51:
          CFI Block cfiCond258 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond259 Using cfiCommon0
          CFI (cfiCond259) Function zcl_registerClusterOptionList
          CFI (cfiCond259) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_3
          CFI (cfiCond259) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond259) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond259) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond259) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond259) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond259) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond259) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond259) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond259) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond259) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond259) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond259) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond259) CFA_SP SP+-4
          CFI (cfiCond259) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond260 Using cfiCommon0
          CFI (cfiCond260) Function zcl_registerAttrList
          CFI (cfiCond260) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_4
          CFI (cfiCond260) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond260) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond260) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond260) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond260) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond260) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond260) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond260) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond260) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond260) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond260) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond260) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond260) CFA_SP SP+-6
          CFI (cfiCond260) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond261 Using cfiCommon0
          CFI (cfiCond261) Function zcl_registerAttrList
          CFI (cfiCond261) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_5
          CFI (cfiCond261) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond261) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond261) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond261) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond261) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond261) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond261) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond261) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond261) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond261) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond261) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond261) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond261) CFA_SP SP+-6
          CFI (cfiCond261) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond262 Using cfiCommon0
          CFI (cfiCond262) Function zcl_registerReadWriteCB
          CFI (cfiCond262) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_9
          CFI (cfiCond262) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond262) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond262) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond262) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond262) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond262) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond262) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond262) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond262) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond262) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond262) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond262) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond262) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond262) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond262) CFA_SP SP+-6
          CFI (cfiCond262) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond263 Using cfiCommon0
          CFI (cfiCond263) Function zclBuildHdr
          CFI (cfiCond263) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_10
          CFI (cfiCond263) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond263) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond263) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond263) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond263) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond263) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond263) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond263) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond263) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond263) CFA_SP SP+-6
          CFI (cfiCond263) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker264 Using cfiCommon1
          CFI (cfiPicker264) NoFunction
          CFI (cfiPicker264) Picker
        LCALL     ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_145:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond258
          CFI EndBlock cfiCond259
          CFI EndBlock cfiCond260
          CFI EndBlock cfiCond261
          CFI EndBlock cfiCond262
          CFI EndBlock cfiCond263
          CFI EndBlock cfiPicker264

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock265 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL     `??zcl_addExternalFoundationHandler::?relay`; Banked call to: zcl_addExternalFoundationHandler
          CFI EndBlock cfiBlock265
        REQUIRE ??Subroutine60_0
        ; // Fall through to label ??Subroutine60_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine60_0:
          CFI Block cfiBlock266 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock266
// 2484 
// 2485 /*********************************************************************
// 2486  * @fn      zclCalcHdrSize
// 2487  *
// 2488  * @brief   Calculate the number of bytes needed for an outgoing
// 2489  *          ZCL header.
// 2490  *
// 2491  * @param   hdr - outgoing header information
// 2492  *
// 2493  * @return  returns the number of bytes needed
// 2494  */
// 2495 static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr )
// 2496 {
// 2497   uint8 needed = (1 + 1 + 1); // frame control + transaction seq num + cmd ID
// 2498 
// 2499   // Add the manfacturer code
// 2500   if ( hdr->fc.manuSpecific )
// 2501   {
// 2502     needed += 2;
// 2503   }
// 2504 
// 2505   return ( needed );
// 2506 }
// 2507 
// 2508 /*********************************************************************
// 2509  * @fn      zclFindPlugin
// 2510  *
// 2511  * @brief   Find the right plugin for a cluster ID
// 2512  *
// 2513  * @param   clusterID - cluster ID to look for
// 2514  * @param   profileID - profile ID
// 2515  *
// 2516  * @return  pointer to plugin, NULL if not found
// 2517  */
// 2518 static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID )
// 2519 {
// 2520   zclLibPlugin_t *pLoop = plugins;
// 2521 
// 2522   (void)profileID;  // Intentionally unreferenced parameter
// 2523 
// 2524   while ( pLoop != NULL )
// 2525   {
// 2526     if ( ( clusterID >= pLoop->startClusterID ) && ( clusterID <= pLoop->endClusterID ) )
// 2527     {
// 2528       return ( pLoop );
// 2529     }
// 2530 
// 2531     pLoop = pLoop->next;
// 2532   }
// 2533 
// 2534   return ( (zclLibPlugin_t *)NULL );
// 2535 }
// 2536 
// 2537 #ifdef ZCL_DISCOVER
// 2538 /*********************************************************************
// 2539  * @fn      zclFindCmdRecsList
// 2540  *
// 2541  * @brief   Find the right command record list for an endpoint
// 2542  *
// 2543  * @param   endpoint - endpoint to look for
// 2544  *
// 2545  * @return  pointer to record list, NULL if not found
// 2546  */
// 2547 static zclCmdRecsList_t *zclFindCmdRecsList( uint8 endpoint )
// 2548 {
// 2549   zclCmdRecsList_t *pLoop = gpCmdList;
// 2550 
// 2551   while ( pLoop != NULL )
// 2552   {
// 2553     if ( pLoop->endpoint == endpoint )
// 2554     {
// 2555       return ( pLoop );
// 2556     }
// 2557 
// 2558     pLoop = pLoop->pNext;
// 2559   }
// 2560 
// 2561   return ( NULL );
// 2562 }
// 2563 
// 2564 /*********************************************************************
// 2565  * @fn      zclFindCmdRec
// 2566  *
// 2567  * @brief   Find the command record that matchs the parameters
// 2568  *
// 2569  * @param   endpoint - Application's endpoint
// 2570  * @param   clusterID - cluster ID
// 2571  * @param   attrId - attribute looking for
// 2572  * @param   pAttr - attribute record to be returned
// 2573  *
// 2574  * @return  TRUE if record found. FALSE, otherwise.
// 2575  */
// 2576 uint8 zclFindCmdRec( uint8 endpoint, uint16 clusterID, uint8 cmdID, zclCommandRec_t *pCmd )
// 2577 {
// 2578   uint8 i;
// 2579   zclCmdRecsList_t *pRec = zclFindCmdRecsList( endpoint );
// 2580 
// 2581   if ( pRec != NULL )
// 2582   {
// 2583     for ( i = 0; i < pRec->numCommands; i++ )
// 2584     {
// 2585       if ( pRec->pCmdRecs[i].clusterID == clusterID && pRec->pCmdRecs[i].cmdID == cmdID )
// 2586       {
// 2587         *pCmd = pRec->pCmdRecs[i];
// 2588 
// 2589         return ( TRUE ); // EMBEDDED RETURN
// 2590       }
// 2591     }
// 2592   }
// 2593 
// 2594   return ( FALSE );
// 2595 }
// 2596 #endif // ZCL_DISCOVER
// 2597 
// 2598 /*********************************************************************
// 2599  * @fn      zclFindAttrRecsList
// 2600  *
// 2601  * @brief   Find the right attribute record list for an endpoint
// 2602  *
// 2603  * @param   clusterID - endpointto look for
// 2604  *
// 2605  * @return  pointer to record list, NULL if not found
// 2606  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2607 zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint )
zclFindAttrRecsList:
          CFI Block cfiBlock267 Using cfiCommon0
          CFI Function zclFindAttrRecsList
        CODE
// 2608 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2609   zclAttrRecsList *pLoop = attrList;
        MOV       DPTR,#attrList
        SJMP      ??zclFindAttrRecsList_0
// 2610 
// 2611   while ( pLoop != NULL )
// 2612   {
// 2613     if ( pLoop->endpoint == endpoint )
// 2614     {
// 2615       return ( pLoop );
// 2616     }
// 2617 
// 2618     pLoop = pLoop->next;
??zclFindAttrRecsList_1:
        MOV       DPL,R2
        MOV       DPH,R3
??zclFindAttrRecsList_0:
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_42:
        JZ        ??zclFindAttrRecsList_2
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
        JNZ       ??zclFindAttrRecsList_1
        SJMP      ??zclFindAttrRecsList_3
// 2619   }
// 2620 
// 2621   return ( NULL );
??zclFindAttrRecsList_2:
        MOV       R2,#0x0
        MOV       R3,#0x0
??zclFindAttrRecsList_3:
        LJMP      ?Subroutine0 & 0xFFFF
// 2622 }
          CFI EndBlock cfiBlock267
// 2623 
// 2624 /*********************************************************************
// 2625  * @fn      zclFindAttrRec
// 2626  *
// 2627  * @brief   Find the attribute record that matchs the parameters
// 2628  *
// 2629  * @param   endpoint - Application's endpoint
// 2630  * @param   clusterID - cluster ID
// 2631  * @param   attrId - attribute looking for
// 2632  * @param   pAttr - attribute record to be returned
// 2633  *
// 2634  * @return  TRUE if record found. FALSE, otherwise.
// 2635  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2636 uint8 zclFindAttrRec( uint8 endpoint, uint16 clusterID, uint16 attrId, zclAttrRec_t *pAttr )
zclFindAttrRec:
          CFI Block cfiBlock268 Using cfiCommon0
          CFI Function zclFindAttrRec
        CODE
// 2637 {
        FUNCALL zclFindAttrRec, zclFindAttrRecsList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
// 2638   uint8 x;
// 2639   zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
        ; Setup parameters for call to function zclFindAttrRecsList
        LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R4,?V4
        MOV       R5,?V5
// 2640 
// 2641   if ( pRec != NULL )
        MOV       A,R2
        ORL       A,R5
        JNZ       $+5
        LJMP      ??zclFindAttrRec_0 & 0xFFFF
// 2642   {
// 2643     for ( x = 0; x < pRec->numAttributes; x++ )
        MOV       R2,#0x0
        SJMP      ??zclFindAttrRec_1
??zclFindAttrRec_2:
        INC       R2
??zclFindAttrRec_1:
        MOV       DPL,R4
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R2
        CLR       C
        SUBB      A,R0
        JC        $+5
        LJMP      ??zclFindAttrRec_0 & 0xFFFF
// 2644     {
// 2645       if ( pRec->attrs[x].clusterID == clusterID && pRec->attrs[x].attr.attrId == attrId )
        MOV       A,R2
        MOV       ?V4,A
        MOV       ?V5,#0x0
        MOV       A,#0x3
        MOV       R0,#?V4
        LCALL     ?S_SHL
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_59:
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       R1,A
        MOV       A,?V0
        XRL       A,R0
        JNZ       ??zclFindAttrRec_3
        MOV       A,?V1
        XRL       A,R1
??zclFindAttrRec_3:
        JNZ       ??zclFindAttrRec_2
        MOV       A,R2
        MOV       ?V4,A
        MOV       ?V5,#0x0
        MOV       A,#0x3
        MOV       R0,#?V4
        LCALL     ?S_SHL
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_60:
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       R1,A
        MOV       A,R6
        XRL       A,R0
        JNZ       ??zclFindAttrRec_4
        MOV       A,R7
        XRL       A,R1
??zclFindAttrRec_4:
        JNZ       ??zclFindAttrRec_2
// 2646       {
// 2647         *pAttr = pRec->attrs[x];
        MOV       A,R2
        MOV       ?V0,A
        MOV       ?V1,#0x0
        MOV       A,#0x3
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       DPL,R4
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ADD       A,?V0
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,?V1
        MOV       DPL,R0
        MOV       DPH,A
        PUSH      DPL
          CFI CFA_SP SP+-1
        PUSH      DPH
          CFI CFA_SP SP+-2
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine58_0 & 0xFFFF
??CrossCallReturnLabel_136:
        POP       DPH
          CFI CFA_SP SP+-1
        POP       DPL
          CFI CFA_SP SP+0
        MOV       A,#0x8
        LCALL     ?MOVE_LONG8_XDATA_CODE
// 2648 
// 2649         return ( TRUE ); // EMBEDDED RETURN
        MOV       R1,#0x1
        SJMP      ??zclFindAttrRec_5
// 2650       }
// 2651     }
// 2652   }
// 2653 
// 2654   return ( FALSE );
??zclFindAttrRec_0:
        MOV       R1,#0x0
??zclFindAttrRec_5:
        LJMP      ?Subroutine4 & 0xFFFF
// 2655 }
          CFI EndBlock cfiBlock268

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond269 Using cfiCommon0
          CFI Function zclFindAttrRec
          CFI Conditional ??CrossCallReturnLabel_59
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond270 Using cfiCommon0
          CFI (cfiCond270) Function zclFindAttrRec
          CFI (cfiCond270) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond270) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond270) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond270) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond270) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond270) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond270) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond270) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond270) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond270) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond270) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond270) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond270) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond270) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond270) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond270) CFA_SP SP+-2
          CFI (cfiCond270) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker271 Using cfiCommon1
          CFI (cfiPicker271) NoFunction
          CFI (cfiPicker271) Picker
        MOV       DPL,R4
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ADD       A,?V4
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,?V5
        MOV       DPL,R0
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond269
          CFI EndBlock cfiCond270
          CFI EndBlock cfiPicker271
// 2656 
// 2657 #if defined ( ZCL_STANDALONE )
// 2658 /*********************************************************************
// 2659  * @fn      zclSetAttrRecList
// 2660  *
// 2661  * @brief   Set attribute record list for end point
// 2662  *
// 2663  * @param   endpoint - endpoint the attribute list belongs to
// 2664  * @param   numAttr - number of attributes in list
// 2665  * @param   attrList - array of attribute records.
// 2666  *                     NOTE: THE ATTRIBUTE IDs (FOR A CLUSTER) MUST BE
// 2667  *                     IN ASCENDING ORDER. OTHERWISE, THE DISCOVERY
// 2668  *                     RESPONSE COMMAND WILL NOT HAVE THE RIGHT
// 2669  *                     ATTRIBUTE INFO
// 2670  *
// 2671  * @return  TRUE if successful, FALSE otherwise.
// 2672  */
// 2673 uint8 zclSetAttrRecList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t attrList[] )
// 2674 {
// 2675   zclAttrRecsList *pRecsList = zclFindAttrRecsList( endpoint );
// 2676 
// 2677   if ( pRecsList != NULL )
// 2678   {
// 2679     pRecsList->numAttributes = numAttr;
// 2680     pRecsList->attrs = attrList;
// 2681     return ( TRUE );
// 2682   }
// 2683 
// 2684   return ( FALSE );
// 2685 }
// 2686 
// 2687 #endif // ZCL_STANDALONE
// 2688 
// 2689 #if defined ( ZCL_READ ) || defined ( ZCL_WRITE )
// 2690 /*********************************************************************
// 2691  * @fn      zclGetReadWriteCB
// 2692  *
// 2693  * @brief   Get the Read/Write callback function pointer for a given endpoint.
// 2694  *
// 2695  * @param   endpoint - Application's endpoint
// 2696  *
// 2697  * @return  Read/Write CB, NULL if not found
// 2698  */
// 2699 static zclReadWriteCB_t zclGetReadWriteCB( uint8 endpoint )
// 2700 {
// 2701   zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
// 2702 
// 2703   if ( pRec != NULL )
// 2704   {
// 2705     return ( pRec->pfnReadWriteCB );
// 2706   }
// 2707 
// 2708   return ( NULL );
// 2709 }
// 2710 
// 2711 /*********************************************************************
// 2712  * @fn      zclGetAuthorizeCB
// 2713  *
// 2714  * @brief   Get the Read/Write Authorization callback function pointer
// 2715  *          for a given endpoint.
// 2716  *
// 2717  * @param   endpoint - Application's endpoint
// 2718  *
// 2719  * @return  Authorization CB, NULL if not found
// 2720  */
// 2721 static zclAuthorizeCB_t zclGetAuthorizeCB( uint8 endpoint )
// 2722 {
// 2723   zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
// 2724 
// 2725   if ( pRec != NULL )
// 2726   {
// 2727     return ( pRec->pfnAuthorizeCB );
// 2728   }
// 2729 
// 2730   return ( NULL );
// 2731 }
// 2732 #endif // ZCL_READ || ZCL_WRITE
// 2733 
// 2734 /*********************************************************************
// 2735  * @fn      zclFindClusterOption
// 2736  *
// 2737  * @brief   Find the option record that matchs the cluster id
// 2738  *
// 2739  * @param   endpoint - Application's endpoint
// 2740  * @param   clusterID - cluster ID looking for
// 2741  *
// 2742  * @return  pointer to clutser option, NULL if not found
// 2743  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2744 static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID )
zclFindClusterOption:
          CFI Block cfiBlock272 Using cfiCommon0
          CFI Function zclFindClusterOption
        CODE
// 2745 {
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R7,A
// 2746   zclClusterOptionList *pLoop;
// 2747 
// 2748   pLoop = clusterOptionList;
        MOV       DPTR,#clusterOptionList
        SJMP      ??zclFindClusterOption_0
// 2749   while ( pLoop != NULL )
// 2750   {
// 2751     if ( pLoop->endpoint == endpoint )
// 2752     {
// 2753       uint8 x;
// 2754       for ( x = 0; x < pLoop->numOptions; x++ )
// 2755       {
// 2756         if ( pLoop->options[x].clusterID == clusterID )
// 2757         {
// 2758           return ( &(pLoop->options[x]) ); // EMBEDDED RETURN
// 2759         }
// 2760       }
// 2761     }
// 2762 
// 2763     pLoop = pLoop->next;
??zclFindClusterOption_1:
        MOV       DPL,R0
        MOV       DPH,R1
??zclFindClusterOption_0:
        LCALL     ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_116:
        JZ        ??zclFindClusterOption_2
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R7
        JNZ       ??zclFindClusterOption_1
        MOV       R6,#0x0
        SJMP      ??zclFindClusterOption_3
??zclFindClusterOption_4:
        INC       R6
??zclFindClusterOption_3:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       A,R6
        CLR       C
        SUBB      A,R4
        JNC       ??zclFindClusterOption_1
        MOV       A,R6
        MOV       ?B,#0x3
        MUL       AB
        MOV       R4,A
        MOV       ?V0,?B
        MOV       R5,?V0
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ADD       A,R4
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R5
        MOV       DPL,?V0
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,R2
        JNZ       ??zclFindClusterOption_5
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R3
??zclFindClusterOption_5:
        JNZ       ??zclFindClusterOption_4
        MOV       A,R5
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ADD       A,R4
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R3
        MOV       R3,A
        SJMP      ??zclFindClusterOption_6
// 2764   }
// 2765 
// 2766   return ( NULL );
??zclFindClusterOption_2:
        MOV       R2,#0x0
        MOV       R3,#0x0
??zclFindClusterOption_6:
        LJMP      ??Subroutine60_0 & 0xFFFF
// 2767 }
          CFI EndBlock cfiBlock272
// 2768 
// 2769 /*********************************************************************
// 2770  * @fn      zclGetClusterOption
// 2771  *
// 2772  * @brief   Get the option record that matchs the cluster id
// 2773  *
// 2774  * @param   endpoint - Application's endpoint
// 2775  * @param   clusterID - cluster ID looking for
// 2776  *
// 2777  * @return  clutser option, AF_TX_OPTIONS_NONE if not found
// 2778  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2779 static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID )
zclGetClusterOption:
          CFI Block cfiBlock273 Using cfiCommon0
          CFI Function zclGetClusterOption
        CODE
// 2780 {
        FUNCALL zclGetClusterOption, zclFindClusterOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 2781   uint8 option;
// 2782   zclOptionRec_t *pOption;
// 2783 
// 2784   pOption = zclFindClusterOption( endpoint, clusterID );
        ; Setup parameters for call to function zclFindClusterOption
        LCALL     ?Subroutine42 & 0xFFFF
// 2785   if ( pOption != NULL )
??CrossCallReturnLabel_88:
        JZ        ??zclGetClusterOption_0
// 2786   {
// 2787     option = pOption->option;
// 2788     if ( !ZG_SECURE_ENABLED )
// 2789     {
// 2790       option &= (AF_EN_SECURITY ^ 0xFF); // make sure Application Link Key security is off
// 2791     }
// 2792 
// 2793     return ( option ); // EMBEDDED RETURN
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        SJMP      ??zclGetClusterOption_1
// 2794   }
// 2795 
// 2796   return ( AF_TX_OPTIONS_NONE );
??zclGetClusterOption_0:
        MOV       R1,#0x0
??zclGetClusterOption_1:
          CFI EndBlock cfiBlock273
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
// 2797 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock274 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock274
// 2798 
// 2799 /*********************************************************************
// 2800  * @fn      zclSetSecurityOption
// 2801  *
// 2802  * @brief   Set the security option for the cluster id
// 2803  *
// 2804  * @param   endpoint - Application's endpoint
// 2805  * @param   clusterID - cluster ID looking for
// 2806  * @param   enable - whether to enable (TRUE) or disable (FALSE) security option
// 2807  *
// 2808  * @return  none
// 2809  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2810 static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable )
zclSetSecurityOption:
          CFI Block cfiBlock275 Using cfiCommon0
          CFI Function zclSetSecurityOption
        CODE
// 2811 {
        FUNCALL zclSetSecurityOption, zclFindClusterOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R4
        MOV       R7,A
// 2812   zclOptionRec_t *pOption;
// 2813 
// 2814   pOption = zclFindClusterOption( endpoint, clusterID );
        ; Setup parameters for call to function zclFindClusterOption
        LCALL     ?Subroutine42 & 0xFFFF
// 2815   if ( pOption != NULL )
??CrossCallReturnLabel_89:
        JZ        ??zclSetSecurityOption_0
// 2816   {
// 2817     if ( enable )
        MOV       A,R7
        INC       DPTR
        INC       DPTR
        JZ        ??zclSetSecurityOption_1
// 2818     {
// 2819       pOption->option |= AF_EN_SECURITY;
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.6
        SJMP      ??zclSetSecurityOption_2
// 2820     }
// 2821     else
// 2822     {
// 2823       pOption->option &= (AF_EN_SECURITY ^ 0xFF);
??zclSetSecurityOption_1:
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.6
??zclSetSecurityOption_2:
        MOVX      @DPTR,A
// 2824     }
// 2825   }
// 2826 }
??zclSetSecurityOption_0:
        SJMP      ?Subroutine3
          CFI EndBlock cfiBlock275

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine42:
          CFI Block cfiCond276 Using cfiCommon0
          CFI Function zclGetClusterOption
          CFI Conditional ??CrossCallReturnLabel_88
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond277 Using cfiCommon0
          CFI (cfiCond277) Function zclSetSecurityOption
          CFI (cfiCond277) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond277) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond277) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond277) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond277) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond277) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond277) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond277) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond277) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond277) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond277) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond277) CFA_SP SP+-2
          CFI (cfiCond277) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker278 Using cfiCommon1
          CFI (cfiPicker278) NoFunction
          CFI (cfiPicker278) Picker
        LCALL     `??zclFindClusterOption::?relay`; Banked call to: zclFindClusterOption
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,DPL
        ORL       A,DPH
        RET
          CFI EndBlock cfiCond276
          CFI EndBlock cfiCond277
          CFI EndBlock cfiPicker278
// 2827 
// 2828 #ifdef ZCL_DISCOVER
// 2829 /*********************************************************************
// 2830  * @fn      zclFindNextCmdRec
// 2831  *
// 2832  * @brief   Find the command (or next) record that matchs the parameters
// 2833  *
// 2834  * @param   endpoint - Application's endpoint
// 2835  * @param   clusterID - cluster ID
// 2836  * @param   commandID - command ID from requesting command
// 2837  * @param   direction- direction of received command
// 2838  * @param   pCmdID - command looking for
// 2839  * @param   pCmd - command information within command record list
// 2840  *
// 2841  * @return  pointer to command record, NULL no more records of this cluster
// 2842  */
// 2843 static uint8 zclFindNextCmdRec( uint8 endpoint, uint16 clusterID, uint8 commandID,
// 2844                                 uint8 direction, uint8 *pCmdID, zclCommandRec_t *pCmd )
// 2845 {
// 2846   zclCmdRecsList_t *pRec = zclFindCmdRecsList( endpoint );
// 2847   uint8 i;
// 2848 
// 2849   if ( pRec != NULL )
// 2850   {
// 2851     for ( i = 0; i < pRec->numCommands; i++ )
// 2852     {
// 2853       if ( ( pRec->pCmdRecs[i].clusterID == clusterID ) &&
// 2854           ( pRec->pCmdRecs[i].cmdID >= *pCmdID ) )
// 2855       {
// 2856         if ( commandID == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
// 2857         {
// 2858           if ( ( direction == ZCL_FRAME_SERVER_CLIENT_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_CLIENT_RECEIVED ) )
// 2859           {
// 2860             *pCmd = pRec->pCmdRecs[i];
// 2861 
// 2862             // Update command ID
// 2863             *pCmdID = pCmd->cmdID;
// 2864 
// 2865             return ( TRUE ); // EMBEDDED RETURN
// 2866           }
// 2867           else if ( ( direction == ZCL_FRAME_CLIENT_SERVER_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_SERVER_RECEIVED ) )
// 2868           {
// 2869             *pCmd = pRec->pCmdRecs[i];
// 2870 
// 2871             // Update command ID
// 2872             *pCmdID = pCmd->cmdID;
// 2873 
// 2874             return ( TRUE ); // EMBEDDED RETURN
// 2875           }
// 2876         }
// 2877         else if ( commandID == ZCL_CMD_DISCOVER_CMDS_GEN )
// 2878         {
// 2879           if ( ( direction == ZCL_FRAME_CLIENT_SERVER_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_SERVER_GENERATED ) )
// 2880           {
// 2881             *pCmd = pRec->pCmdRecs[i];
// 2882 
// 2883             // Update command ID
// 2884             *pCmdID = pCmd->cmdID;
// 2885 
// 2886             return ( TRUE ); // EMBEDDED RETURN
// 2887           }
// 2888           else if ( ( direction == ZCL_FRAME_SERVER_CLIENT_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_CLIENT_GENERATED ) )
// 2889           {
// 2890             *pCmd = pRec->pCmdRecs[i];
// 2891 
// 2892             // Update command ID
// 2893             *pCmdID = pCmd->cmdID;
// 2894 
// 2895             return ( TRUE ); // EMBEDDED RETURN
// 2896           }
// 2897         }
// 2898         else
// 2899         {
// 2900           return ( FALSE ); // Incorrect Command ID
// 2901         }
// 2902       }
// 2903     }
// 2904   }
// 2905 
// 2906   return ( FALSE );
// 2907 }
// 2908 
// 2909 /*********************************************************************
// 2910  * @fn      zclFindNextAttrRec
// 2911  *
// 2912  * @brief   Find the attribute (or next) record that matchs the parameters
// 2913  *
// 2914  * @param   endpoint - Application's endpoint
// 2915  * @param   clusterID - cluster ID
// 2916  * @param   attr - attribute looking for
// 2917  *
// 2918  * @return  pointer to attribute record, NULL if not found
// 2919  */
// 2920 static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint8 direction,
// 2921                                  uint16 *attrId, zclAttrRec_t *pAttr )
// 2922 {
// 2923   zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
// 2924   uint8 attrDir;
// 2925 
// 2926   if ( pRec != NULL )
// 2927   {
// 2928     uint16 x;
// 2929 
// 2930     for ( x = 0; x < pRec->numAttributes; x++ )
// 2931     {
// 2932       if ( ( pRec->attrs[x].clusterID == clusterID ) &&
// 2933            ( pRec->attrs[x].attr.attrId >= *attrId ) )
// 2934       {
// 2935         // also make sure direction is right
// 2936         attrDir = (pRec->attrs[x].attr.accessControl & ACCESS_CLIENT) ? 1 : 0;
// 2937         if ( (attrDir == direction) || (pRec->attrs[x].attr.accessControl & ACCESS_GLOBAL))
// 2938         {
// 2939           // return attribute and found attribute ID
// 2940           *pAttr = pRec->attrs[x];
// 2941           *attrId = pAttr->attr.attrId;
// 2942 
// 2943           return ( TRUE ); // EMBEDDED RETURN
// 2944         }
// 2945       }
// 2946     }
// 2947   }
// 2948 
// 2949   return ( FALSE );
// 2950 }
// 2951 #endif // ZCL_DISCOVER
// 2952 
// 2953 /*********************************************************************
// 2954  * @fn      zclSerializeData
// 2955  *
// 2956  * @brief   Builds a buffer from the attribute data to sent out over
// 2957  *          the air.
// 2958  *          NOTE - Not compatible with application's attributes callbacks.
// 2959  *
// 2960  * @param   dataType - data types defined in zcl.h
// 2961  * @param   attrData - pointer to the attribute data
// 2962  * @param   buf - where to put the serialized data
// 2963  *
// 2964  * @return  pointer to end of destination buffer
// 2965  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2966 uint8 *zclSerializeData( uint8 dataType, void *attrData, uint8 *buf )
zclSerializeData:
          CFI Block cfiBlock279 Using cfiCommon0
          CFI Function zclSerializeData
        CODE
// 2967 {
        FUNCALL zclSerializeData, osal_buffer_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       A,R4
        MOV       R2,A
        MOV       A,R5
        MOV       R3,A
// 2968   uint8 *pStr;
// 2969   uint16 len;
// 2970 
// 2971   if ( attrData == NULL )
        MOV       A,R6
        ORL       A,R7
        JNZ       $+5
        LJMP      ??zclSerializeData_0 & 0xFFFF
// 2972   {
// 2973     return ( buf );
// 2974   }
// 2975 
// 2976   switch ( dataType )
        MOV       A,R1
        LCALL     ?UC_SWITCH_SPARSE
`?<Jumptable for zclSerializeData>_0`:
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        65
        DATA
        DATA8
        DATA
        DATA8
        DB        66
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_1
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        67
        DATA
        DATA8
        DATA
        DATA8
        DB        68
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_2
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        224
        DATA
        DATA8
        DATA
        DATA8
        DB        226
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        232
        DATA
        DATA8
        DATA
        DATA8
        DB        233
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        37
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        8
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        9
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        10
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_6
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        11
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        16
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        24
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        25
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        26
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_6
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        27
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        28
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_7
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        29
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_8
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        30
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_9
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        31
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_10
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        32
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        33
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        34
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_6
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        35
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        36
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_7
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        37
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_8
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        38
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_9
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        39
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_10
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        40
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        41
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        42
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_6
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        43
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        44
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_7
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        45
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_8
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        46
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_9
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        47
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_10
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        48
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        49
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        56
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        57
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        58
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_10
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        234
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        240
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_10
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        241
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_11
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_0
        CODE
// 2977   {
// 2978     case ZCL_DATATYPE_DATA8:
// 2979     case ZCL_DATATYPE_BOOLEAN:
// 2980     case ZCL_DATATYPE_BITMAP8:
// 2981     case ZCL_DATATYPE_INT8:
// 2982     case ZCL_DATATYPE_UINT8:
// 2983     case ZCL_DATATYPE_ENUM8:
// 2984       *buf++ = *((uint8 *)attrData);
??zclSerializeData_5:
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_148:
        MOVX      @DPTR,A
        INC       DPTR
        MOV       R2,DPL
        MOV       R3,DPH
// 2985        break;
        LJMP      ??zclSerializeData_0 & 0xFFFF
// 2986 
// 2987     case ZCL_DATATYPE_DATA16:
// 2988     case ZCL_DATATYPE_BITMAP16:
// 2989     case ZCL_DATATYPE_UINT16:
// 2990     case ZCL_DATATYPE_INT16:
// 2991     case ZCL_DATATYPE_ENUM16:
// 2992     case ZCL_DATATYPE_SEMI_PREC:
// 2993     case ZCL_DATATYPE_CLUSTER_ID:
// 2994     case ZCL_DATATYPE_ATTR_ID:
// 2995       *buf++ = LO_UINT16( *((uint16*)attrData) );
??zclSerializeData_4:
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_149:
        LCALL     ?Subroutine8 & 0xFFFF
// 2996       *buf++ = HI_UINT16( *((uint16*)attrData) );
??CrossCallReturnLabel_7:
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        MOVX      @DPTR,A
        MOV       A,R4
        ADD       A,#0x2
        MOV       R2,A
        JNC       ??zclSerializeData_12
        INC       R3
// 2997       break;
??zclSerializeData_12:
        LJMP      ??zclSerializeData_0 & 0xFFFF
// 2998 
// 2999     case ZCL_DATATYPE_DATA24:
// 3000     case ZCL_DATATYPE_BITMAP24:
// 3001     case ZCL_DATATYPE_UINT24:
// 3002     case ZCL_DATATYPE_INT24:
// 3003       *buf++ = BREAK_UINT32( *((uint32*)attrData), 0 );
??zclSerializeData_6:
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       DPL,R4
        MOV       DPH,R5
        MOV       A,?V4
        LCALL     ?Subroutine13 & 0xFFFF
// 3004       *buf++ = BREAK_UINT32( *((uint32*)attrData), 1 );
??CrossCallReturnLabel_19:
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       A,?V5
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        LCALL     ?Subroutine13 & 0xFFFF
// 3005       *buf++ = BREAK_UINT32( *((uint32*)attrData), 2 );
??CrossCallReturnLabel_20:
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       A,#0x10
        MOV       R0,#?V4
        LCALL     ?UL_SHR
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        MOV       A,?V4
        MOVX      @DPTR,A
        MOV       A,R4
        ADD       A,#0x3
        MOV       R2,A
        JNC       ??zclSerializeData_13
        INC       R3
// 3006       break;
??zclSerializeData_13:
        LJMP      ??zclSerializeData_0 & 0xFFFF
// 3007 
// 3008     case ZCL_DATATYPE_DATA32:
// 3009     case ZCL_DATATYPE_BITMAP32:
// 3010     case ZCL_DATATYPE_UINT32:
// 3011     case ZCL_DATATYPE_INT32:
// 3012     case ZCL_DATATYPE_SINGLE_PREC:
// 3013     case ZCL_DATATYPE_TOD:
// 3014     case ZCL_DATATYPE_DATE:
// 3015     case ZCL_DATATYPE_UTC:
// 3016     case ZCL_DATATYPE_BAC_OID:
// 3017       buf = zcl_buffer_uint32( buf, *((uint32*)attrData) );
??zclSerializeData_3:
        ; Setup parameters for call to function osal_buffer_uint32
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 3018       break;
        LJMP      ??zclSerializeData_0 & 0xFFFF
// 3019 
// 3020     case ZCL_DATATYPE_BITMAP40:
// 3021     case ZCL_DATATYPE_UINT40:
// 3022     case ZCL_DATATYPE_INT40:
// 3023       pStr = (uint8*)attrData;
// 3024       buf = zcl_memcpy( buf, pStr, 5 );
??zclSerializeData_7:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,R6
        MOV       ?V5,R7
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R4,#0x5
        SJMP      ??zclSerializeData_14
          CFI CFA_XSP16 add(XSP16, 16)
// 3025       break;
// 3026 
// 3027     case ZCL_DATATYPE_BITMAP48:
// 3028     case ZCL_DATATYPE_UINT48:
// 3029     case ZCL_DATATYPE_INT48:
// 3030       pStr = (uint8*)attrData;
// 3031       buf = zcl_memcpy( buf, pStr, 6 );
??zclSerializeData_8:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,R6
        MOV       ?V5,R7
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R4,#0x6
        SJMP      ??zclSerializeData_14
          CFI CFA_XSP16 add(XSP16, 16)
// 3032       break;
// 3033 
// 3034     case ZCL_DATATYPE_BITMAP56:
// 3035     case ZCL_DATATYPE_UINT56:
// 3036     case ZCL_DATATYPE_INT56:
// 3037       pStr = (uint8*)attrData;
// 3038       buf = zcl_memcpy( buf, pStr, 7 );
??zclSerializeData_9:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,R6
        MOV       ?V5,R7
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R4,#0x7
        SJMP      ??zclSerializeData_14
          CFI CFA_XSP16 add(XSP16, 16)
// 3039       break;
// 3040 
// 3041     case ZCL_DATATYPE_BITMAP64:
// 3042     case ZCL_DATATYPE_DOUBLE_PREC:
// 3043     case ZCL_DATATYPE_IEEE_ADDR:
// 3044     case ZCL_DATATYPE_UINT64:
// 3045     case ZCL_DATATYPE_INT64:
// 3046       pStr = (uint8*)attrData;
// 3047       buf = zcl_memcpy( buf, pStr, 8 );
??zclSerializeData_10:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,R6
        MOV       ?V5,R7
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R4,#0x8
        SJMP      ??zclSerializeData_14
          CFI CFA_XSP16 add(XSP16, 16)
// 3048       break;
// 3049 
// 3050     case ZCL_DATATYPE_CHAR_STR:
// 3051     case ZCL_DATATYPE_OCTET_STR:
// 3052       pStr = (uint8*)attrData;
// 3053       len = *pStr;
// 3054       buf = zcl_memcpy( buf, pStr, len+1 ); // Including length field
??zclSerializeData_1:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,R6
        MOV       ?V5,R7
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOV       R4,A
        CLR       A
        ADDC      A,#0x0
        SJMP      ??zclSerializeData_15
          CFI CFA_XSP16 add(XSP16, 16)
// 3055       break;
// 3056 
// 3057     case ZCL_DATATYPE_LONG_CHAR_STR:
// 3058     case ZCL_DATATYPE_LONG_OCTET_STR:
// 3059       pStr = (uint8*)attrData;
// 3060       len = BUILD_UINT16( pStr[0], pStr[1] );
// 3061       buf = zcl_memcpy( buf, pStr, len+2 ); // Including length field
??zclSerializeData_2:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,R6
        MOV       ?V5,R7
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_79:
        MOV       R4,A
        CLR       A
        ADDC      A,R1
??zclSerializeData_15:
        MOV       R5,A
        SJMP      ??zclSerializeData_16
          CFI CFA_XSP16 add(XSP16, 16)
// 3062       break;
// 3063 
// 3064     case ZCL_DATATYPE_128_BIT_SEC_KEY:
// 3065       pStr = (uint8*)attrData;
// 3066       buf = zcl_memcpy( buf, pStr, SEC_KEY_LEN );
??zclSerializeData_11:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,R6
        MOV       ?V5,R7
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R4,#0x10
??zclSerializeData_14:
        MOV       R5,#0x0
??zclSerializeData_16:
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 3067       break;
// 3068 
// 3069     case ZCL_DATATYPE_NO_DATA:
// 3070     case ZCL_DATATYPE_UNKNOWN:
// 3071       // Fall through
// 3072 
// 3073     default:
// 3074       break;
// 3075   }
// 3076 
// 3077   return ( buf );
??zclSerializeData_0:
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
// 3078 }
          CFI EndBlock cfiBlock279

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond280 Using cfiCommon0
          CFI Function zclSerializeData
          CFI Conditional ??CrossCallReturnLabel_148
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond281 Using cfiCommon0
          CFI (cfiCond281) Function zclSerializeData
          CFI (cfiCond281) Conditional ??CrossCallReturnLabel_149
          CFI (cfiCond281) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond281) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond281) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond281) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond281) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond281) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond281) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond281) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond281) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond281) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond281) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond281) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond281) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond281) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond281) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond281) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond281) CFA_SP SP+-2
          CFI (cfiCond281) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker282 Using cfiCommon1
          CFI (cfiPicker282) NoFunction
          CFI (cfiPicker282) Picker
        MOV       DPL,R6
        MOV       DPH,R7
          CFI EndBlock cfiCond280
          CFI EndBlock cfiCond281
          CFI EndBlock cfiPicker282
        REQUIRE ??Subroutine61_0
        ; // Fall through to label ??Subroutine61_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine61_0:
          CFI Block cfiCond283 Using cfiCommon0
          CFI Function zclBuildHdr
          CFI Conditional ??CrossCallReturnLabel_146
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond284 Using cfiCommon0
          CFI (cfiCond284) Function zclBuildHdr
          CFI (cfiCond284) Conditional ??CrossCallReturnLabel_147
          CFI (cfiCond284) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond284) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond284) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond284) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond284) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond284) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond284) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond284) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond284) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond284) CFA_SP SP+-2
          CFI (cfiCond284) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond285 Using cfiCommon0
          CFI (cfiCond285) Function zclSerializeData
          CFI (cfiCond285) Conditional ??CrossCallReturnLabel_148
          CFI (cfiCond285) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond285) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond285) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond285) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond285) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond285) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond285) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond285) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond285) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond285) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond285) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond285) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond285) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond285) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond285) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond285) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond285) CFA_SP SP+-2
          CFI (cfiCond285) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond286 Using cfiCommon0
          CFI (cfiCond286) Function zclSerializeData
          CFI (cfiCond286) Conditional ??CrossCallReturnLabel_149
          CFI (cfiCond286) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond286) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond286) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond286) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond286) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond286) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond286) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond286) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond286) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond286) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond286) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond286) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond286) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond286) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond286) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond286) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond286) CFA_SP SP+-2
          CFI (cfiCond286) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker287 Using cfiCommon1
          CFI (cfiPicker287) NoFunction
          CFI (cfiPicker287) Picker
        MOVX      A,@DPTR
        MOV       DPL,R4
        MOV       DPH,R5
        RET
          CFI EndBlock cfiCond283
          CFI EndBlock cfiCond284
          CFI EndBlock cfiCond285
          CFI EndBlock cfiCond286
          CFI EndBlock cfiPicker287

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond288 Using cfiCommon0
          CFI Function zclParseHdr
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond289 Using cfiCommon0
          CFI (cfiCond289) Function zclSerializeData
          CFI (cfiCond289) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond289) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond289) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond289) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond289) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond289) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond289) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond289) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond289) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond289) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond289) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond289) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond289) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond289) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond289) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond289) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond289) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond289) CFA_SP SP+-2
          CFI (cfiCond289) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond290 Using cfiCommon0
          CFI (cfiCond290) Function zclParseInDefaultRspCmd
          CFI (cfiCond290) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond290) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond290) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond290) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond290) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond290) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond290) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond290) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond290) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond290) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond290) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond290) CFA_SP SP+-2
          CFI (cfiCond290) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker291 Using cfiCommon1
          CFI (cfiPicker291) NoFunction
          CFI (cfiPicker291) Picker
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond288
          CFI EndBlock cfiCond289
          CFI EndBlock cfiCond290
          CFI EndBlock cfiPicker291
// 3079 
// 3080 #if defined ZCL_REPORTING_DEVICE || defined ZCL_REPORT_CONFIGURING_DEVICE
// 3081 /*********************************************************************
// 3082  * @fn      zclAnalogDataType
// 3083  *
// 3084  * @brief   Checks to see if Data Type is Analog
// 3085  *
// 3086  * @param   dataType - data type
// 3087  *
// 3088  * @return  TRUE if data type is analog
// 3089  */
// 3090 uint8 zclAnalogDataType( uint8 dataType )
// 3091 {
// 3092   uint8 analog;
// 3093 
// 3094   switch ( dataType )
// 3095   {
// 3096     case ZCL_DATATYPE_UINT8:
// 3097     case ZCL_DATATYPE_UINT16:
// 3098     case ZCL_DATATYPE_UINT24:
// 3099     case ZCL_DATATYPE_UINT32:
// 3100     case ZCL_DATATYPE_UINT40:
// 3101     case ZCL_DATATYPE_UINT48:
// 3102     case ZCL_DATATYPE_UINT56:
// 3103     case ZCL_DATATYPE_UINT64:
// 3104     case ZCL_DATATYPE_INT8:
// 3105     case ZCL_DATATYPE_INT16:
// 3106     case ZCL_DATATYPE_INT24:
// 3107     case ZCL_DATATYPE_INT32:
// 3108     case ZCL_DATATYPE_INT40:
// 3109     case ZCL_DATATYPE_INT48:
// 3110     case ZCL_DATATYPE_INT56:
// 3111     case ZCL_DATATYPE_INT64:
// 3112     case ZCL_DATATYPE_SEMI_PREC:
// 3113     case ZCL_DATATYPE_SINGLE_PREC:
// 3114     case ZCL_DATATYPE_DOUBLE_PREC:
// 3115     case ZCL_DATATYPE_TOD:
// 3116     case ZCL_DATATYPE_DATE:
// 3117     case ZCL_DATATYPE_UTC:
// 3118       analog = TRUE;
// 3119       break;
// 3120 
// 3121     default:
// 3122       analog = FALSE;
// 3123       break;
// 3124   }
// 3125 
// 3126   return ( analog );
// 3127 }
// 3128 
// 3129 /*********************************************************************
// 3130  * @fn      zclIsLittleEndianMachine
// 3131  *
// 3132  * @brief   Verifies endianness in system.
// 3133  *
// 3134  * @param   none
// 3135  *
// 3136  * @return  MSB-00 or LSB-01 depending on endianness in the system
// 3137  */
// 3138 static int zclIsLittleEndianMachine(void)
// 3139 {
// 3140   uint16 test = 0x0001;
// 3141 
// 3142   return (*((uint8 *)(&test)));
// 3143 }
// 3144 
// 3145 /*********************************************************************
// 3146  * @fn      zcl_BuildAnalogData
// 3147  *
// 3148  * @brief   Build an analog arribute out of sequential bytes.
// 3149  *
// 3150  * @param   dataType - type of data
// 3151  * @param   pData - pointer to data
// 3152  * @param   pBuf - where to put the data
// 3153  *
// 3154  * @return  none
// 3155  */
// 3156 static void zcl_BuildAnalogData( uint8 dataType, uint8 *pData, uint8 *pBuf )
// 3157 {
// 3158   int current_byte_index;
// 3159   int remaining_bytes;
// 3160   int step;
// 3161 
// 3162   remaining_bytes = zclGetAttrDataLength(dataType, pData);
// 3163 
// 3164   // decide if move forward or backwards to copy data
// 3165   if ( zclIsLittleEndianMachine() )
// 3166   {
// 3167     step = 1;
// 3168     current_byte_index = 0;
// 3169   }
// 3170   else
// 3171   {
// 3172     step = -1;
// 3173     current_byte_index = remaining_bytes - 1;
// 3174   }
// 3175 
// 3176   while ( remaining_bytes-- )
// 3177   {
// 3178     pData[current_byte_index] = *(pBuf++);
// 3179     current_byte_index += step;
// 3180   }
// 3181 }
// 3182 #endif
// 3183 
// 3184 /*********************************************************************
// 3185  * @fn      zclGetDataTypeLength
// 3186  *
// 3187  * @brief   Return the length of the datatype in octet.
// 3188  *
// 3189  *          NOTE: Should not be called for ZCL_DATATYPE_OCTECT_STR or
// 3190  *                ZCL_DATATYPE_CHAR_STR data types.
// 3191  *
// 3192  * @param   dataType - data type
// 3193  *
// 3194  * @return  length of data
// 3195  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3196 uint8 zclGetDataTypeLength( uint8 dataType )
zclGetDataTypeLength:
          CFI Block cfiBlock292 Using cfiCommon0
          CFI Function zclGetDataTypeLength
        CODE
// 3197 {
        ; Saved register size: 0
        ; Auto size: 0
        MOV       A,R1
// 3198   uint8 len;
// 3199 
// 3200   switch ( dataType )
        ADD       A,#-0x8
        JZ        ??zclGetDataTypeLength_0
        DEC       A
        JZ        ??zclGetDataTypeLength_1
        DEC       A
        JZ        ??zclGetDataTypeLength_2
        DEC       A
        JZ        ??zclGetDataTypeLength_3
        ADD       A,#-0x5
        JZ        ??zclGetDataTypeLength_0
        ADD       A,#-0x8
        JZ        ??zclGetDataTypeLength_0
        DEC       A
        JZ        ??zclGetDataTypeLength_1
        DEC       A
        JZ        ??zclGetDataTypeLength_2
        DEC       A
        JZ        ??zclGetDataTypeLength_3
        ADD       A,#-0x5
        JZ        ??zclGetDataTypeLength_0
        DEC       A
        JZ        ??zclGetDataTypeLength_1
        DEC       A
        JZ        ??zclGetDataTypeLength_2
        DEC       A
        JZ        ??zclGetDataTypeLength_3
        DEC       A
        JZ        ??zclGetDataTypeLength_4
        DEC       A
        JZ        ??zclGetDataTypeLength_5
        DEC       A
        JZ        ??zclGetDataTypeLength_6
        DEC       A
        JZ        ??zclGetDataTypeLength_7
        DEC       A
        JZ        ??zclGetDataTypeLength_0
        DEC       A
        JZ        ??zclGetDataTypeLength_1
        DEC       A
        JZ        ??zclGetDataTypeLength_2
        DEC       A
        JZ        ??zclGetDataTypeLength_3
        DEC       A
        JZ        ??zclGetDataTypeLength_4
        DEC       A
        JZ        ??zclGetDataTypeLength_5
        DEC       A
        JZ        ??zclGetDataTypeLength_6
        DEC       A
        JZ        ??zclGetDataTypeLength_7
        DEC       A
        JZ        ??zclGetDataTypeLength_0
        DEC       A
        JZ        ??zclGetDataTypeLength_1
        ADD       A,#-0x7
        JZ        ??zclGetDataTypeLength_1
        DEC       A
        JZ        ??zclGetDataTypeLength_3
        DEC       A
        JZ        ??zclGetDataTypeLength_7
        ADD       A,#0x5a
        JZ        ??zclGetDataTypeLength_3
        DEC       A
        JZ        ??zclGetDataTypeLength_3
        DEC       A
        JZ        ??zclGetDataTypeLength_3
        ADD       A,#-0x6
        JZ        ??zclGetDataTypeLength_1
        DEC       A
        JZ        ??zclGetDataTypeLength_1
        DEC       A
        JZ        ??zclGetDataTypeLength_3
        ADD       A,#-0x6
        JZ        ??zclGetDataTypeLength_7
        DEC       A
        JZ        ??zclGetDataTypeLength_8
        SJMP      ??zclGetDataTypeLength_9
// 3201   {
// 3202     case ZCL_DATATYPE_DATA8:
// 3203     case ZCL_DATATYPE_BOOLEAN:
// 3204     case ZCL_DATATYPE_BITMAP8:
// 3205     case ZCL_DATATYPE_INT8:
// 3206     case ZCL_DATATYPE_UINT8:
// 3207     case ZCL_DATATYPE_ENUM8:
// 3208       len = 1;
??zclGetDataTypeLength_0:
        MOV       R1,#0x1
// 3209       break;
        SJMP      ??zclGetDataTypeLength_10
// 3210 
// 3211     case ZCL_DATATYPE_DATA16:
// 3212     case ZCL_DATATYPE_BITMAP16:
// 3213     case ZCL_DATATYPE_UINT16:
// 3214     case ZCL_DATATYPE_INT16:
// 3215     case ZCL_DATATYPE_ENUM16:
// 3216     case ZCL_DATATYPE_SEMI_PREC:
// 3217     case ZCL_DATATYPE_CLUSTER_ID:
// 3218     case ZCL_DATATYPE_ATTR_ID:
// 3219       len = 2;
??zclGetDataTypeLength_1:
        MOV       R1,#0x2
// 3220       break;
        SJMP      ??zclGetDataTypeLength_10
// 3221 
// 3222     case ZCL_DATATYPE_DATA24:
// 3223     case ZCL_DATATYPE_BITMAP24:
// 3224     case ZCL_DATATYPE_UINT24:
// 3225     case ZCL_DATATYPE_INT24:
// 3226       len = 3;
??zclGetDataTypeLength_2:
        MOV       R1,#0x3
// 3227       break;
        SJMP      ??zclGetDataTypeLength_10
// 3228 
// 3229     case ZCL_DATATYPE_DATA32:
// 3230     case ZCL_DATATYPE_BITMAP32:
// 3231     case ZCL_DATATYPE_UINT32:
// 3232     case ZCL_DATATYPE_INT32:
// 3233     case ZCL_DATATYPE_SINGLE_PREC:
// 3234     case ZCL_DATATYPE_TOD:
// 3235     case ZCL_DATATYPE_DATE:
// 3236     case ZCL_DATATYPE_UTC:
// 3237     case ZCL_DATATYPE_BAC_OID:
// 3238       len = 4;
??zclGetDataTypeLength_3:
        MOV       R1,#0x4
// 3239       break;
        SJMP      ??zclGetDataTypeLength_10
// 3240 
// 3241    case ZCL_DATATYPE_UINT40:
// 3242    case ZCL_DATATYPE_INT40:
// 3243        len = 5;
??zclGetDataTypeLength_4:
        MOV       R1,#0x5
// 3244        break;
        SJMP      ??zclGetDataTypeLength_10
// 3245 
// 3246    case ZCL_DATATYPE_UINT48:
// 3247    case ZCL_DATATYPE_INT48:
// 3248        len = 6;
??zclGetDataTypeLength_5:
        MOV       R1,#0x6
// 3249        break;
        SJMP      ??zclGetDataTypeLength_10
// 3250 
// 3251    case ZCL_DATATYPE_UINT56:
// 3252    case ZCL_DATATYPE_INT56:
// 3253        len = 7;
??zclGetDataTypeLength_6:
        MOV       R1,#0x7
// 3254        break;
        SJMP      ??zclGetDataTypeLength_10
// 3255 
// 3256    case ZCL_DATATYPE_DOUBLE_PREC:
// 3257    case ZCL_DATATYPE_IEEE_ADDR:
// 3258    case ZCL_DATATYPE_UINT64:
// 3259    case ZCL_DATATYPE_INT64:
// 3260      len = 8;
??zclGetDataTypeLength_7:
        MOV       R1,#0x8
// 3261      break;
        SJMP      ??zclGetDataTypeLength_10
// 3262 
// 3263     case ZCL_DATATYPE_128_BIT_SEC_KEY:
// 3264      len = SEC_KEY_LEN;
??zclGetDataTypeLength_8:
        MOV       R1,#0x10
// 3265      break;
        SJMP      ??zclGetDataTypeLength_10
// 3266 
// 3267     case ZCL_DATATYPE_NO_DATA:
// 3268     case ZCL_DATATYPE_UNKNOWN:
// 3269       // Fall through
// 3270 
// 3271     default:
// 3272       len = 0;
??zclGetDataTypeLength_9:
        MOV       R1,#0x0
// 3273       break;
// 3274   }
// 3275 
// 3276   return ( len );
??zclGetDataTypeLength_10:
        LJMP      ?BRET
// 3277 }
          CFI EndBlock cfiBlock292
// 3278 
// 3279 /*********************************************************************
// 3280  * @fn      zclGetAttrDataLength
// 3281  *
// 3282  * @brief   Return the length of the attribute.
// 3283  *
// 3284  * @param   dataType - data type
// 3285  * @param   pData - pointer to data
// 3286  *
// 3287  * @return  returns atrribute length
// 3288  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3289 uint16 zclGetAttrDataLength( uint8 dataType, uint8 *pData )
zclGetAttrDataLength:
          CFI Block cfiBlock293 Using cfiCommon0
          CFI Function zclGetAttrDataLength
        CODE
// 3290 {
        FUNCALL zclGetAttrDataLength, zclGetDataTypeLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 3291   uint16 dataLen = 0;
// 3292 
// 3293   if ( dataType == ZCL_DATATYPE_LONG_CHAR_STR || dataType == ZCL_DATATYPE_LONG_OCTET_STR )
        MOV       A,#0x44
        XRL       A,R6
        JZ        ??zclGetAttrDataLength_0
        MOV       A,#0x43
        XRL       A,R6
        JNZ       ??zclGetAttrDataLength_1
// 3294   {
// 3295     dataLen = BUILD_UINT16( pData[0], pData[1] ) + 2; // long string length + 2 for length field
??zclGetAttrDataLength_0:
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine38 & 0xFFFF
// 3296   }
??CrossCallReturnLabel_80:
        MOV       R2,A
        CLR       A
        ADDC      A,R1
        SJMP      ??zclGetAttrDataLength_2
// 3297   else if ( dataType == ZCL_DATATYPE_CHAR_STR || dataType == ZCL_DATATYPE_OCTET_STR )
??zclGetAttrDataLength_1:
        MOV       A,#0x42
        XRL       A,R6
        JZ        ??zclGetAttrDataLength_3
        MOV       A,#0x41
        XRL       A,R6
        JNZ       ??zclGetAttrDataLength_4
// 3298   {
// 3299     dataLen = *pData + 1; // string length + 1 for length field
??zclGetAttrDataLength_3:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOV       R2,A
        CLR       A
        ADDC      A,#0x0
??zclGetAttrDataLength_2:
        MOV       R3,A
        SJMP      ??zclGetAttrDataLength_5
// 3300   }
// 3301   else
// 3302   {
// 3303     dataLen = zclGetDataTypeLength( dataType );
??zclGetAttrDataLength_4:
        ; Setup parameters for call to function zclGetDataTypeLength
        LCALL     `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
        MOV       A,R1
        MOV       R2,A
        MOV       R3,#0x0
// 3304   }
// 3305 
// 3306   return ( dataLen );
??zclGetAttrDataLength_5:
        LJMP      ??Subroutine60_0 & 0xFFFF
// 3307 }
          CFI EndBlock cfiBlock293

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine38:
          CFI Block cfiCond294 Using cfiCommon0
          CFI Function zclSerializeData
          CFI Conditional ??CrossCallReturnLabel_79
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond295 Using cfiCommon0
          CFI (cfiCond295) Function zclGetAttrDataLength
          CFI (cfiCond295) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond295) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond295) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond295) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond295) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond295) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond295) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond295) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond295) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond295) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond295) CFA_SP SP+-2
          CFI (cfiCond295) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker296 Using cfiCommon1
          CFI (cfiPicker296) NoFunction
          CFI (cfiPicker296) Picker
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R4
        ADD       A,#0x2
        RET
          CFI EndBlock cfiCond294
          CFI EndBlock cfiCond295
          CFI EndBlock cfiPicker296
// 3308 
// 3309 #ifdef ZCL_READ
// 3310 /*********************************************************************
// 3311  * @fn      zclReadAttrData
// 3312  *
// 3313  * @brief   Read the attribute's current value into pAttrData.
// 3314  *          NOTE - Not compatible with application's attributes callbacks.
// 3315  *
// 3316  * @param   pAttrData - where to put attribute data
// 3317  * @param   pAttr - pointer to attribute
// 3318  * @param   pDataLen - where to put attribute data length
// 3319  *
// 3320  * @return Success
// 3321  */
// 3322 ZStatus_t zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr, uint16 *pDataLen )
// 3323 {
// 3324   uint16 dataLen;
// 3325 
// 3326   if ( pAttr->attr.dataPtr == NULL )
// 3327   {
// 3328     return ( ZCL_STATUS_FAILURE );
// 3329   }
// 3330 
// 3331   dataLen = zclGetAttrDataLength( pAttr->attr.dataType, (uint8*)(pAttr->attr.dataPtr) );
// 3332   zcl_memcpy( pAttrData, pAttr->attr.dataPtr, dataLen );
// 3333 
// 3334   if ( pDataLen != NULL )
// 3335   {
// 3336     *pDataLen = dataLen;
// 3337   }
// 3338 
// 3339   return ( ZCL_STATUS_SUCCESS );
// 3340 }
// 3341 
// 3342 /*********************************************************************
// 3343  * @fn      zcl_ReadAttrData
// 3344  *
// 3345  * @brief   Read the attribute's current value into pAttrData.
// 3346  *          Use application's callback function if assigned to this attribute.
// 3347  *
// 3348  * @param   endpoint - application's endpoint
// 3349  * @param   clusterId - cluster that attribute belongs to
// 3350  * @param   attrId - attribute id
// 3351  * @param   pAttrData - where to put attribute data
// 3352  * @param   pDataLen - where to put attribute data length
// 3353  *
// 3354  * @return  Successful if data was read
// 3355  */
// 3356 ZStatus_t zcl_ReadAttrData( uint8 endpoint, uint16 clusterId, uint16 attrId,
// 3357                                          uint8 *pAttrData, uint16 *pDataLen )
// 3358 {
// 3359   zclAttrRec_t attrRec;
// 3360 
// 3361   if ( zclFindAttrRec( endpoint, clusterId, attrId, &attrRec ) == FALSE )
// 3362   {
// 3363     return ( ZCL_STATUS_FAILURE );
// 3364   }
// 3365 
// 3366   if ( attrRec.attr.dataPtr != NULL )
// 3367   {
// 3368     return zclReadAttrData( pAttrData, &attrRec, pDataLen );
// 3369   }
// 3370   else
// 3371   {
// 3372     return zclReadAttrDataUsingCB( endpoint, clusterId, attrId, pAttrData, pDataLen );
// 3373   }
// 3374 }
// 3375 
// 3376 /*********************************************************************
// 3377  * @fn      zclGetAttrDataLengthUsingCB
// 3378  *
// 3379  * @brief   Use application's callback to get the length of the attribute's
// 3380  *          current value stored in the database.
// 3381  *
// 3382  * @param   endpoint - application's endpoint
// 3383  * @param   clusterId - cluster that attribute belongs to
// 3384  * @param   attrId - attribute id
// 3385  *
// 3386  * @return  returns attribute length
// 3387  */
// 3388 static uint16 zclGetAttrDataLengthUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId )
// 3389 {
// 3390   uint16 dataLen = 0;
// 3391   zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
// 3392 
// 3393   if ( pfnReadWriteCB != NULL )
// 3394   {
// 3395     // Only get the attribute length
// 3396     (*pfnReadWriteCB)( clusterId, attrId, ZCL_OPER_LEN, NULL, &dataLen );
// 3397   }
// 3398 
// 3399   return ( dataLen );
// 3400 }
// 3401 
// 3402 /*********************************************************************
// 3403  * @fn      zclReadAttrDataUsingCB
// 3404  *
// 3405  * @brief   Use application's callback to read the attribute's current
// 3406  *          value stored in the database.
// 3407  *
// 3408  * @param   endpoint - application's endpoint
// 3409  * @param   clusterId - cluster that attribute belongs to
// 3410  * @param   attrId - attribute id
// 3411  * @param   pAttrData - where to put attribute data
// 3412  * @param   pDataLen - where to put attribute data length
// 3413  *
// 3414  * @return  Successful if data was read
// 3415  */
// 3416 static ZStatus_t zclReadAttrDataUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId,
// 3417                                          uint8 *pAttrData, uint16 *pDataLen )
// 3418 {
// 3419   zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
// 3420 
// 3421   if ( pDataLen != NULL )
// 3422   {
// 3423     *pDataLen = 0; // Always initialize it to 0
// 3424   }
// 3425 
// 3426   if ( pfnReadWriteCB != NULL )
// 3427   {
// 3428     // Read the attribute value and its length
// 3429     return ( (*pfnReadWriteCB)( clusterId, attrId, ZCL_OPER_READ, pAttrData, pDataLen ) );
// 3430   }
// 3431 
// 3432   return ( ZCL_STATUS_SOFTWARE_FAILURE );
// 3433 }
// 3434 
// 3435 /*********************************************************************
// 3436  * @fn      zclAuthorizeRead
// 3437  *
// 3438  * @brief   Use application's callback to authorize a Read operation
// 3439  *          on a given attribute.
// 3440  *
// 3441  * @param   endpoint - application's endpoint
// 3442  * @param   srcAddr - source Address
// 3443  * @param   pAttr - pointer to attribute
// 3444  *
// 3445  * @return  ZCL_STATUS_SUCCESS: Operation authorized
// 3446  *          ZCL_STATUS_NOT_AUTHORIZED: Operation not authorized
// 3447  */
// 3448 static ZStatus_t zclAuthorizeRead( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr )
// 3449 {
// 3450   if ( zcl_AccessCtrlAuthRead( pAttr->attr.accessControl ) )
// 3451   {
// 3452     zclAuthorizeCB_t pfnAuthorizeCB = zclGetAuthorizeCB( endpoint );
// 3453 
// 3454     if ( pfnAuthorizeCB != NULL )
// 3455     {
// 3456       return ( (*pfnAuthorizeCB)( srcAddr, pAttr, ZCL_OPER_READ ) );
// 3457     }
// 3458   }
// 3459 
// 3460   return ( ZCL_STATUS_SUCCESS );
// 3461 }
// 3462 #endif // ZCL_READ
// 3463 
// 3464 #ifdef ZCL_WRITE
// 3465 /*********************************************************************
// 3466  * @fn      zclWriteAttrData
// 3467  *
// 3468  * @brief   Write the received data.
// 3469  *
// 3470  * @param   endpoint - application's endpoint
// 3471  * @param   pAttr - where to write data to
// 3472  * @param   pWriteRec - data to be written
// 3473  *
// 3474  * @return  Successful if data was written
// 3475  */
// 3476 static ZStatus_t zclWriteAttrData( uint8 endpoint, afAddrType_t *srcAddr,
// 3477                                    zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec )
// 3478 {
// 3479   uint8 status;
// 3480 
// 3481   if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
// 3482   {
// 3483     status = zclAuthorizeWrite( endpoint, srcAddr, pAttr );
// 3484     if ( status == ZCL_STATUS_SUCCESS )
// 3485     {
// 3486       if ( ( zcl_ValidateAttrDataCB == NULL ) || zcl_ValidateAttrDataCB( pAttr, pWriteRec ) )
// 3487       {
// 3488         // Write the attribute value
// 3489         uint16 len = zclGetAttrDataLength( pAttr->attr.dataType, pWriteRec->attrData );
// 3490         zcl_memcpy( pAttr->attr.dataPtr, pWriteRec->attrData, len );
// 3491 
// 3492         status = ZCL_STATUS_SUCCESS;
// 3493       }
// 3494       else
// 3495       {
// 3496         status = ZCL_STATUS_INVALID_VALUE;
// 3497       }
// 3498     }
// 3499   }
// 3500   else
// 3501   {
// 3502     status = ZCL_STATUS_READ_ONLY;
// 3503   }
// 3504 
// 3505   return ( status );
// 3506 }
// 3507 
// 3508 /*********************************************************************
// 3509  * @fn      zclWriteAttrDataUsingCB
// 3510  *
// 3511  * @brief   Use application's callback to write the attribute's current
// 3512  *          value stored in the database.
// 3513  *
// 3514  * @param   endpoint - application's endpoint
// 3515  * @param   pAttr - where to write data to
// 3516  * @param   pAttrData - data to be written
// 3517  *
// 3518  * @return  Successful if data was written
// 3519  */
// 3520 static ZStatus_t zclWriteAttrDataUsingCB( uint8 endpoint, afAddrType_t *srcAddr,
// 3521                                           zclAttrRec_t *pAttr, uint8 *pAttrData )
// 3522 {
// 3523   uint8 status;
// 3524 
// 3525   if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
// 3526   {
// 3527     status = zclAuthorizeWrite( endpoint, srcAddr, pAttr );
// 3528     if ( status == ZCL_STATUS_SUCCESS )
// 3529     {
// 3530       zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
// 3531       if ( pfnReadWriteCB != NULL )
// 3532       {
// 3533         // Write the attribute value
// 3534         status = (*pfnReadWriteCB)( pAttr->clusterID, pAttr->attr.attrId,
// 3535                                     ZCL_OPER_WRITE, pAttrData, NULL );
// 3536       }
// 3537       else
// 3538       {
// 3539         status = ZCL_STATUS_SOFTWARE_FAILURE;
// 3540       }
// 3541     }
// 3542   }
// 3543   else
// 3544   {
// 3545     status = ZCL_STATUS_READ_ONLY;
// 3546   }
// 3547 
// 3548   return ( status );
// 3549 }
// 3550 
// 3551 /*********************************************************************
// 3552  * @fn      zclAuthorizeWrite
// 3553  *
// 3554  * @brief   Use application's callback to authorize a Write operation
// 3555  *          on a given attribute.
// 3556  *
// 3557  * @param   endpoint - application's endpoint
// 3558  * @param   srcAddr - source Address
// 3559  * @param   pAttr - pointer to attribute
// 3560  *
// 3561  * @return  ZCL_STATUS_SUCCESS: Operation authorized
// 3562  *          ZCL_STATUS_NOT_AUTHORIZED: Operation not authorized
// 3563  */
// 3564 static ZStatus_t zclAuthorizeWrite( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr )
// 3565 {
// 3566   if ( zcl_AccessCtrlAuthWrite( pAttr->attr.accessControl ) )
// 3567   {
// 3568     zclAuthorizeCB_t pfnAuthorizeCB = zclGetAuthorizeCB( endpoint );
// 3569 
// 3570     if ( pfnAuthorizeCB != NULL )
// 3571     {
// 3572       return ( (*pfnAuthorizeCB)( srcAddr, pAttr, ZCL_OPER_WRITE ) );
// 3573     }
// 3574   }
// 3575 
// 3576   return ( ZCL_STATUS_SUCCESS );
// 3577 }
// 3578 #endif // ZCL_WRITE
// 3579 
// 3580 #ifdef ZCL_READ
// 3581 /*********************************************************************
// 3582  * @fn      zclParseInReadCmd
// 3583  *
// 3584  * @brief   Parse the "Profile" Read Commands
// 3585  *
// 3586  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3587  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3588  *
// 3589  * @param   pCmd - pointer to incoming data to parse
// 3590  *
// 3591  * @return  pointer to the parsed command structure
// 3592  */
// 3593 void *zclParseInReadCmd( zclParseCmd_t *pCmd )
// 3594 {
// 3595   zclReadCmd_t *readCmd;
// 3596   uint8 *pBuf = pCmd->pData;
// 3597 
// 3598   readCmd = (zclReadCmd_t *)zcl_mem_alloc( sizeof ( zclReadCmd_t ) + pCmd->dataLen );
// 3599   if ( readCmd != NULL )
// 3600   {
// 3601     uint8 i;
// 3602     readCmd->numAttr = pCmd->dataLen / 2; // Atrribute ID
// 3603     for ( i = 0; i < readCmd->numAttr; i++ )
// 3604     {
// 3605       readCmd->attrID[i] = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3606       pBuf += 2;
// 3607     }
// 3608   }
// 3609 
// 3610   return ( (void *)readCmd );
// 3611 }
// 3612 
// 3613 /*********************************************************************
// 3614  * @fn      zclParseInReadRspCmd
// 3615  *
// 3616  * @brief   Parse the "Profile" Read Response Commands
// 3617  *
// 3618  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3619  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3620  *
// 3621  * @param   pCmd - pointer to incoming data to parse
// 3622  *
// 3623  * @return  pointer to the parsed command structure
// 3624  */
// 3625 static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd )
// 3626 {
// 3627   zclReadRspCmd_t *readRspCmd;
// 3628   uint8 *pBuf = pCmd->pData;
// 3629   uint8 *dataPtr;
// 3630   uint8 numAttr = 0;
// 3631   uint8 hdrLen;
// 3632   uint16 dataLen = 0;
// 3633   uint16 attrDataLen;
// 3634 
// 3635   // find out the number of attributes and the length of attribute data
// 3636   while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 3637   {
// 3638     uint8 status;
// 3639 
// 3640     numAttr++;
// 3641     pBuf += 2; // move pass attribute id
// 3642 
// 3643     status = *pBuf++;
// 3644     if ( status == ZCL_STATUS_SUCCESS )
// 3645     {
// 3646       uint8 dataType = *pBuf++;
// 3647 
// 3648       attrDataLen = zclGetAttrDataLength( dataType, pBuf );
// 3649       pBuf += attrDataLen; // move pass attribute data
// 3650 
// 3651       // add padding if needed
// 3652       if ( PADDING_NEEDED( attrDataLen ) )
// 3653       {
// 3654         attrDataLen++;
// 3655       }
// 3656 
// 3657       dataLen += attrDataLen;
// 3658     }
// 3659   }
// 3660 
// 3661   // calculate the length of the response header
// 3662   hdrLen = sizeof( zclReadRspCmd_t ) + ( numAttr * sizeof( zclReadRspStatus_t ) );
// 3663 
// 3664   readRspCmd = (zclReadRspCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
// 3665   if ( readRspCmd != NULL )
// 3666   {
// 3667     uint8 i;
// 3668     pBuf = pCmd->pData;
// 3669     dataPtr = (uint8 *)( (uint8 *)readRspCmd + hdrLen );
// 3670 
// 3671     readRspCmd->numAttr = numAttr;
// 3672     for ( i = 0; i < numAttr; i++ )
// 3673     {
// 3674       zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 3675 
// 3676       statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3677       pBuf += 2;
// 3678 
// 3679       statusRec->status = *pBuf++;
// 3680       if ( statusRec->status == ZCL_STATUS_SUCCESS )
// 3681       {
// 3682         statusRec->dataType = *pBuf++;
// 3683 
// 3684         attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
// 3685         zcl_memcpy( dataPtr, pBuf, attrDataLen);
// 3686         statusRec->data = dataPtr;
// 3687 
// 3688         pBuf += attrDataLen; // move pass attribute data
// 3689 
// 3690         // advance attribute data pointer
// 3691         if ( PADDING_NEEDED( attrDataLen ) )
// 3692         {
// 3693           attrDataLen++;
// 3694         }
// 3695 
// 3696         dataPtr += attrDataLen;
// 3697       }
// 3698     }
// 3699   }
// 3700 
// 3701   return ( (void *)readRspCmd );
// 3702 }
// 3703 #endif // ZCL_READ
// 3704 
// 3705 #ifdef ZCL_WRITE
// 3706 /*********************************************************************
// 3707  * @fn      zclParseInWriteCmd
// 3708  *
// 3709  * @brief   Parse the "Profile" Write, Write Undivided and Write No
// 3710  *          Response Commands
// 3711  *
// 3712  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3713  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3714  *
// 3715  * @param   pCmd - pointer to incoming data to parse
// 3716  *
// 3717  * @return  pointer to the parsed command structure
// 3718  */
// 3719 void *zclParseInWriteCmd( zclParseCmd_t *pCmd )
// 3720 {
// 3721   zclWriteCmd_t *writeCmd;
// 3722   uint8 *pBuf = pCmd->pData;
// 3723   uint16 attrDataLen;
// 3724   uint8 *dataPtr;
// 3725   uint8 numAttr = 0;
// 3726   uint8 hdrLen;
// 3727   uint16 dataLen = 0;
// 3728 
// 3729   // find out the number of attributes and the length of attribute data
// 3730   while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 3731   {
// 3732     uint8 dataType;
// 3733 
// 3734     numAttr++;
// 3735     pBuf += 2; // move pass attribute id
// 3736 
// 3737     dataType = *pBuf++;
// 3738 
// 3739     attrDataLen = zclGetAttrDataLength( dataType, pBuf );
// 3740     pBuf += attrDataLen; // move pass attribute data
// 3741 
// 3742     // add padding if needed
// 3743     if ( PADDING_NEEDED( attrDataLen ) )
// 3744     {
// 3745       attrDataLen++;
// 3746     }
// 3747 
// 3748     dataLen += attrDataLen;
// 3749   }
// 3750 
// 3751   // calculate the length of the response header
// 3752   hdrLen = sizeof( zclWriteCmd_t ) + ( numAttr * sizeof( zclWriteRec_t ) );
// 3753 
// 3754   writeCmd = (zclWriteCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
// 3755   if ( writeCmd != NULL )
// 3756   {
// 3757     uint8 i;
// 3758     pBuf = pCmd->pData;
// 3759     dataPtr = (uint8 *)( (uint8 *)writeCmd + hdrLen );
// 3760 
// 3761     writeCmd->numAttr = numAttr;
// 3762     for ( i = 0; i < numAttr; i++ )
// 3763     {
// 3764       zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
// 3765 
// 3766       statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3767       pBuf += 2;
// 3768       statusRec->dataType = *pBuf++;
// 3769 
// 3770       attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
// 3771       zcl_memcpy( dataPtr, pBuf, attrDataLen);
// 3772       statusRec->attrData = dataPtr;
// 3773 
// 3774       pBuf += attrDataLen; // move pass attribute data
// 3775 
// 3776       // advance attribute data pointer
// 3777       if ( PADDING_NEEDED( attrDataLen ) )
// 3778       {
// 3779         attrDataLen++;
// 3780       }
// 3781 
// 3782       dataPtr += attrDataLen;
// 3783     }
// 3784   }
// 3785 
// 3786   return ( (void *)writeCmd );
// 3787 }
// 3788 
// 3789 /*********************************************************************
// 3790  * @fn      zclParseInWriteRspCmd
// 3791  *
// 3792  * @brief   Parse the "Profile" Write Response Commands
// 3793  *
// 3794  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3795  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3796  *
// 3797  * @param   pCmd - pointer to incoming data to parse
// 3798  *
// 3799  * @return  pointer to the parsed command structure
// 3800  */
// 3801 static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd )
// 3802 {
// 3803   zclWriteRspCmd_t *writeRspCmd;
// 3804   uint8 *pBuf = pCmd->pData;
// 3805   uint8 i = 0;
// 3806 
// 3807   writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof ( zclWriteRspCmd_t ) + pCmd->dataLen );
// 3808   if ( writeRspCmd != NULL )
// 3809   {
// 3810     if ( pCmd->dataLen == 1 )
// 3811     {
// 3812       // special case when all writes were successfull
// 3813       writeRspCmd->attrList[i++].status = *pBuf;
// 3814     }
// 3815     else
// 3816     {
// 3817       while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 3818       {
// 3819         writeRspCmd->attrList[i].status = *pBuf++;
// 3820         writeRspCmd->attrList[i++].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3821         pBuf += 2;
// 3822       }
// 3823     }
// 3824 
// 3825     writeRspCmd->numAttr = i;
// 3826   }
// 3827 
// 3828   return ( (void *)writeRspCmd );
// 3829 }
// 3830 #endif // ZCL_WRITE
// 3831 
// 3832 #ifdef ZCL_REPORTING_DEVICE
// 3833 /*********************************************************************
// 3834  * @fn      zclParseInConfigReportCmd
// 3835  *
// 3836  * @brief   Parse the "Profile" Configure Reporting Command
// 3837  *
// 3838  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3839  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3840  *
// 3841  * @param   pCmd - pointer to incoming data to parse
// 3842  *
// 3843  * @return  pointer to the parsed command structure
// 3844  */
// 3845 void *zclParseInConfigReportCmd( zclParseCmd_t *pCmd )
// 3846 {
// 3847   zclCfgReportCmd_t *cfgReportCmd;
// 3848   uint8 *pBuf = pCmd->pData;
// 3849   uint8 *dataPtr;
// 3850   uint8 numAttr = 0;
// 3851   uint8 dataType;
// 3852   uint8 hdrLen;
// 3853   uint16 dataLen = 0;
// 3854   uint8 reportChangeLen; // length of Reportable Change field
// 3855 
// 3856   // Calculate the length of the Request command
// 3857   while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 3858   {
// 3859     uint8 direction;
// 3860 
// 3861     numAttr++;
// 3862     direction = *pBuf++;
// 3863     pBuf += 2; // move pass the attribute ID
// 3864 
// 3865     // Is there a Reportable Change field?
// 3866     if ( direction == ZCL_SEND_ATTR_REPORTS )
// 3867     {
// 3868       dataType = *pBuf++;
// 3869       pBuf += 4; // move pass the Min and Max Reporting Intervals
// 3870 
// 3871       // For attributes of 'discrete' data types this field is omitted
// 3872       if ( zclAnalogDataType( dataType ) )
// 3873       {
// 3874         reportChangeLen = zclGetDataTypeLength( dataType );
// 3875         pBuf += reportChangeLen;
// 3876 
// 3877         // add padding if needed
// 3878         if ( PADDING_NEEDED( reportChangeLen ) )
// 3879         {
// 3880           reportChangeLen++;
// 3881         }
// 3882 
// 3883         dataLen += reportChangeLen;
// 3884       }
// 3885       else
// 3886       {
// 3887         pBuf++; // move past reportable change field
// 3888       }
// 3889     }
// 3890     else
// 3891     {
// 3892       pBuf += 2; // move pass the Timeout Period
// 3893     }
// 3894   } // while loop
// 3895 
// 3896   hdrLen = sizeof( zclCfgReportCmd_t ) + ( numAttr * sizeof( zclCfgReportRec_t ) );
// 3897 
// 3898   cfgReportCmd = (zclCfgReportCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
// 3899   if ( cfgReportCmd != NULL )
// 3900   {
// 3901     uint8 i;
// 3902     pBuf = pCmd->pData;
// 3903     dataPtr = (uint8 *)( (uint8 *)cfgReportCmd + hdrLen );
// 3904 
// 3905     cfgReportCmd->numAttr = numAttr;
// 3906     for ( i = 0; i < numAttr; i++ )
// 3907     {
// 3908       zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
// 3909 
// 3910       zcl_memset( reportRec, 0, sizeof( zclCfgReportRec_t ) );
// 3911 
// 3912       reportRec->direction = *pBuf++;
// 3913       reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3914       pBuf += 2;
// 3915       if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
// 3916       {
// 3917         // Attribute to be reported
// 3918         reportRec->dataType = *pBuf++;
// 3919         reportRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3920         pBuf += 2;
// 3921         reportRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3922         pBuf += 2;
// 3923 
// 3924         // For attributes of 'discrete' data types this field is omitted
// 3925         if ( zclAnalogDataType( reportRec->dataType ) )
// 3926         {
// 3927           zcl_BuildAnalogData( reportRec->dataType, dataPtr, pBuf);
// 3928           reportRec->reportableChange = dataPtr;
// 3929 
// 3930           reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
// 3931           pBuf += reportChangeLen;
// 3932 
// 3933           // advance attribute data pointer
// 3934           if ( PADDING_NEEDED( reportChangeLen ) )
// 3935           {
// 3936             reportChangeLen++;
// 3937           }
// 3938 
// 3939           dataPtr += reportChangeLen;
// 3940         }
// 3941       }
// 3942       else
// 3943       {
// 3944         // Attribute reports to be received
// 3945         reportRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3946         pBuf += 2;
// 3947       }
// 3948     } // while loop
// 3949   }
// 3950 
// 3951   return ( (void *)cfgReportCmd );
// 3952 }
// 3953 #endif
// 3954 
// 3955 #ifdef ZCL_REPORT_CONFIGURING_DEVICE
// 3956 /*********************************************************************
// 3957  * @fn      zclParseInConfigReportRspCmd
// 3958  *
// 3959  * @brief   Parse the "Profile" Configure Reporting Response Command
// 3960  *
// 3961  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3962  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3963  *
// 3964  * @param   pCmd - pointer to incoming data to parse
// 3965  *
// 3966  * @return  pointer to the parsed command structure
// 3967  */
// 3968 static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd )
// 3969 {
// 3970   zclCfgReportRspCmd_t *cfgReportRspCmd;
// 3971   uint8 *pBuf = pCmd->pData;
// 3972   uint8 numAttr;
// 3973 
// 3974   numAttr = pCmd->dataLen / ( 1 + 1 + 2 ); // Status + Direction + Attribute ID
// 3975 
// 3976   cfgReportRspCmd = (zclCfgReportRspCmd_t *)zcl_mem_alloc( sizeof( zclCfgReportRspCmd_t )
// 3977                                             + ( numAttr * sizeof( zclCfgReportStatus_t ) ) );
// 3978   if ( cfgReportRspCmd != NULL )
// 3979   {
// 3980     uint8 i;
// 3981     cfgReportRspCmd->numAttr = numAttr;
// 3982     for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
// 3983     {
// 3984       cfgReportRspCmd->attrList[i].status = *pBuf++;
// 3985       cfgReportRspCmd->attrList[i].direction = *pBuf++;
// 3986       cfgReportRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3987       pBuf += 2;
// 3988     }
// 3989   }
// 3990 
// 3991   return ( (void *)cfgReportRspCmd );
// 3992 }
// 3993 #endif
// 3994 
// 3995 #ifdef ZCL_REPORTING_DEVICE
// 3996 /*********************************************************************
// 3997  * @fn      zclParseInReadReportCfgCmd
// 3998  *
// 3999  * @brief   Parse the "Profile" Read Reporting Configuration Command
// 4000  *
// 4001  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 4002  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 4003  *
// 4004  * @param   pCmd - pointer to incoming data to parse
// 4005  *
// 4006  * @return  pointer to the parsed command structure
// 4007  */
// 4008 void *zclParseInReadReportCfgCmd( zclParseCmd_t *pCmd )
// 4009 {
// 4010   zclReadReportCfgCmd_t *readReportCfgCmd;
// 4011   uint8 *pBuf = pCmd->pData;
// 4012   uint8 numAttr;
// 4013 
// 4014   numAttr = pCmd->dataLen / ( 1 + 2 ); // Direction + Attribute ID
// 4015 
// 4016   readReportCfgCmd = (zclReadReportCfgCmd_t *)zcl_mem_alloc( sizeof( zclReadReportCfgCmd_t )
// 4017                                                   + ( numAttr * sizeof( zclReadReportCfgRec_t ) ) );
// 4018   if ( readReportCfgCmd != NULL )
// 4019   {
// 4020     uint8 i;
// 4021     readReportCfgCmd->numAttr = numAttr;
// 4022     for ( i = 0; i < readReportCfgCmd->numAttr; i++)
// 4023     {
// 4024       readReportCfgCmd->attrList[i].direction = *pBuf++;;
// 4025       readReportCfgCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 4026       pBuf += 2;
// 4027     }
// 4028   }
// 4029 
// 4030   return ( (void *)readReportCfgCmd );
// 4031 }
// 4032 #endif
// 4033 
// 4034 #ifdef ZCL_REPORT_CONFIGURING_DEVICE
// 4035 /*********************************************************************
// 4036  * @fn      zclParseInReadReportCfgRspCmd
// 4037  *
// 4038  * @brief   Parse the "Profile" Read Reporting Configuration Response Command
// 4039  *
// 4040  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 4041  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 4042  *
// 4043  * @param   pCmd - pointer to incoming data to parse
// 4044  *
// 4045  * @return  pointer to the parsed command structure
// 4046  */
// 4047 static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd )
// 4048 {
// 4049   zclReadReportCfgRspCmd_t *readReportCfgRspCmd;
// 4050   uint8 reportChangeLen;
// 4051   uint8 *pBuf = pCmd->pData;
// 4052   uint8 *dataPtr;
// 4053   uint8 numAttr = 0;
// 4054   uint8 hdrLen;
// 4055   uint16 dataLen = 0;
// 4056 
// 4057   // Calculate the length of the response command
// 4058   while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 4059   {
// 4060     uint8 status;
// 4061     uint8 direction;
// 4062 
// 4063     numAttr++;
// 4064     status = *pBuf++;
// 4065     direction = *pBuf++;
// 4066     pBuf += 2; // move pass the attribute ID
// 4067 
// 4068     if ( status == ZCL_STATUS_SUCCESS )
// 4069     {
// 4070       if ( direction == ZCL_SEND_ATTR_REPORTS )
// 4071       {
// 4072         uint8 dataType = *pBuf++;
// 4073         pBuf += 4; // move pass the Min and Max Reporting Intervals
// 4074 
// 4075         // For attributes of 'discrete' data types this field is omitted
// 4076         if ( zclAnalogDataType( dataType ) )
// 4077         {
// 4078           reportChangeLen = zclGetDataTypeLength( dataType );
// 4079           pBuf += reportChangeLen;
// 4080 
// 4081           // add padding if needed
// 4082           if ( PADDING_NEEDED( reportChangeLen ) )
// 4083           {
// 4084             reportChangeLen++;
// 4085           }
// 4086 
// 4087           dataLen += reportChangeLen;
// 4088         }
// 4089       }
// 4090       else
// 4091       {
// 4092         pBuf += 2; // move pass the Timeout field
// 4093       }
// 4094     }
// 4095   } // while loop
// 4096 
// 4097   hdrLen = sizeof( zclReadReportCfgRspCmd_t ) + ( numAttr * sizeof( zclReportCfgRspRec_t ) );
// 4098 
// 4099   readReportCfgRspCmd = (zclReadReportCfgRspCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
// 4100   if ( readReportCfgRspCmd != NULL )
// 4101   {
// 4102     uint8 i;
// 4103     pBuf = pCmd->pData;
// 4104     dataPtr = (uint8 *)( (uint8 *)readReportCfgRspCmd + hdrLen );
// 4105 
// 4106     readReportCfgRspCmd->numAttr = numAttr;
// 4107     for ( i = 0; i < numAttr; i++ )
// 4108     {
// 4109       zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
// 4110 
// 4111       reportRspRec->status = *pBuf++;
// 4112       reportRspRec->direction = *pBuf++;
// 4113       reportRspRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 4114       pBuf += 2;
// 4115 
// 4116       if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
// 4117       {
// 4118         if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
// 4119         {
// 4120           reportRspRec->dataType = *pBuf++;
// 4121           reportRspRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
// 4122           pBuf += 2;
// 4123           reportRspRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
// 4124           pBuf += 2;
// 4125 
// 4126           if ( zclAnalogDataType( reportRspRec->dataType ) )
// 4127           {
// 4128             zcl_BuildAnalogData( reportRspRec->dataType, dataPtr, pBuf);
// 4129             reportRspRec->reportableChange = dataPtr;
// 4130 
// 4131             reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType );
// 4132             pBuf += reportChangeLen;
// 4133 
// 4134             // advance attribute data pointer
// 4135             if ( PADDING_NEEDED( reportChangeLen ) )
// 4136             {
// 4137               reportChangeLen++;
// 4138             }
// 4139 
// 4140             dataPtr += reportChangeLen;
// 4141           }
// 4142         }
// 4143         else
// 4144         {
// 4145           reportRspRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
// 4146           pBuf += 2;
// 4147         }
// 4148       }
// 4149     }
// 4150   }
// 4151 
// 4152   return ( (void *)readReportCfgRspCmd );
// 4153 }
// 4154 #endif
// 4155 
// 4156 #ifdef ZCL_REPORT_DESTINATION_DEVICE
// 4157 /*********************************************************************
// 4158  * @fn      zclParseInReportCmd
// 4159  *
// 4160  * @brief   Parse the "Profile" Report Command
// 4161  *
// 4162  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 4163  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 4164  *
// 4165  * @param   pCmd - pointer to incoming data to parse
// 4166  *
// 4167  * @return  pointer to the parsed command structure
// 4168  */
// 4169 void *zclParseInReportCmd( zclParseCmd_t *pCmd )
// 4170 {
// 4171   zclReportCmd_t *reportCmd;
// 4172   uint8 *pBuf = pCmd->pData;
// 4173   uint16 attrDataLen;
// 4174   uint8 *dataPtr;
// 4175   uint8 numAttr = 0;
// 4176   uint8 hdrLen;
// 4177   uint16 dataLen = 0;
// 4178 
// 4179   // find out the number of attributes and the length of attribute data
// 4180   while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 4181   {
// 4182     uint8 dataType;
// 4183 
// 4184     numAttr++;
// 4185     pBuf += 2; // move pass attribute id
// 4186 
// 4187     dataType = *pBuf++;
// 4188 
// 4189     attrDataLen = zclGetAttrDataLength( dataType, pBuf );
// 4190     pBuf += attrDataLen; // move pass attribute data
// 4191 
// 4192     // add padding if needed
// 4193     if ( PADDING_NEEDED( attrDataLen ) )
// 4194     {
// 4195       attrDataLen++;
// 4196     }
// 4197 
// 4198     dataLen += attrDataLen;
// 4199   }
// 4200 
// 4201   hdrLen = sizeof( zclReportCmd_t ) + ( numAttr * sizeof( zclReport_t ) );
// 4202 
// 4203   reportCmd = (zclReportCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
// 4204   if (reportCmd != NULL )
// 4205   {
// 4206     uint8 i;
// 4207     pBuf = pCmd->pData;
// 4208     dataPtr = (uint8 *)( (uint8 *)reportCmd + hdrLen );
// 4209 
// 4210     reportCmd->numAttr = numAttr;
// 4211     for ( i = 0; i < numAttr; i++ )
// 4212     {
// 4213       zclReport_t *reportRec = &(reportCmd->attrList[i]);
// 4214 
// 4215       reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 4216       pBuf += 2;
// 4217       reportRec->dataType = *pBuf++;
// 4218 
// 4219       attrDataLen = zclGetAttrDataLength( reportRec->dataType, pBuf );
// 4220       zcl_memcpy( dataPtr, pBuf, attrDataLen );
// 4221       reportRec->attrData = dataPtr;
// 4222 
// 4223       pBuf += attrDataLen; // move pass attribute data
// 4224 
// 4225       // advance attribute data pointer
// 4226       if ( PADDING_NEEDED( attrDataLen ) )
// 4227       {
// 4228         attrDataLen++;
// 4229       }
// 4230 
// 4231       dataPtr += attrDataLen;
// 4232     }
// 4233   }
// 4234 
// 4235   return ( (void *)reportCmd );
// 4236 }
// 4237 #endif
// 4238 
// 4239 /*********************************************************************
// 4240  * @fn      zclParseInDefaultRspCmd
// 4241  *
// 4242  * @brief   Parse the "Profile" Default Response Command
// 4243  *
// 4244  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 4245  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 4246  *
// 4247  * @param   pCmd - pointer to incoming data to parse
// 4248  *
// 4249  * @return  pointer to the parsed command structure
// 4250  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 4251 static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd )
zclParseInDefaultRspCmd:
          CFI Block cfiBlock297 Using cfiCommon0
          CFI Function zclParseInDefaultRspCmd
        CODE
// 4252 {
        FUNCALL zclParseInDefaultRspCmd, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 4253   zclDefaultRspCmd_t *defaultRspCmd;
// 4254   uint8 *pBuf = pCmd->pData;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_72:
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
// 4255 
// 4256   defaultRspCmd = (zclDefaultRspCmd_t *)zcl_mem_alloc( sizeof ( zclDefaultRspCmd_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x2
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
// 4257   if ( defaultRspCmd != NULL )
        MOV       A,R2
        ORL       A,R3
        JZ        ??zclParseInDefaultRspCmd_0
// 4258   {
// 4259     defaultRspCmd->commandID = *pBuf++;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine8 & 0xFFFF
// 4260     defaultRspCmd->statusCode = *pBuf;
// 4261   }
??CrossCallReturnLabel_8:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOVX      @DPTR,A
// 4262 
// 4263   return ( (void *)defaultRspCmd );
??zclParseInDefaultRspCmd_0:
        LJMP      ?Subroutine3 & 0xFFFF
// 4264 }
          CFI EndBlock cfiBlock297

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zcl_radius>`:
        DATA8
        DB 30

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_registerForMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerForMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_registerForMsgExt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerForMsgExt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_addExternalFoundationHandler::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_addExternalFoundationHandler

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_getExternalFoundationHandler::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_getExternalFoundationHandler

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_HandleExternal::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_HandleExternal

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_getRawAFMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_getRawAFMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_getParsedTransSeqNum::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_getParsedTransSeqNum

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_registerPlugin::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerPlugin

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_registerAttrList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerAttrList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_registerClusterOptionList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerClusterOptionList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_registerValidateAttrData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerValidateAttrData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_registerReadWriteCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerReadWriteCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_DeviceOperational::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_DeviceOperational

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_SendCommand::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_SendCommand

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_SendDefaultRspCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_SendDefaultRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_ProcessMessageMSG::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_ProcessMessageMSG

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclParseHdr::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclParseHdr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclBuildHdr::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclBuildHdr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclFindAttrRecsList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclFindAttrRecsList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclFindAttrRec::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclFindAttrRec

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclFindClusterOption::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclFindClusterOption

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGetClusterOption::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGetClusterOption

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSetSecurityOption::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSetSecurityOption

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSerializeData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSerializeData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGetDataTypeLength::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGetDataTypeLength

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGetAttrDataLength::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGetAttrDataLength

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclParseInDefaultRspCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclParseInDefaultRspCmd

        END
// 4265 
// 4266 #ifdef ZCL_DISCOVER
// 4267 /*********************************************************************
// 4268  * @fn      zclParseInDiscAttrsCmd
// 4269  *
// 4270  * @brief   Parse the "Profile" Discovery Attributes and Attributes Extended Commands
// 4271  *
// 4272  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 4273  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 4274  *
// 4275  * @param   pCmd - pointer to incoming data to parse
// 4276  *
// 4277  * @return  pointer to the parsed command structure
// 4278  */
// 4279 void *zclParseInDiscAttrsCmd( zclParseCmd_t *pCmd )
// 4280 {
// 4281   zclDiscoverAttrsCmd_t *pDiscoverCmd;
// 4282   uint8 *pBuf = pCmd->pData;
// 4283 
// 4284   pDiscoverCmd = (zclDiscoverAttrsCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsCmd_t ) );
// 4285   if ( pDiscoverCmd != NULL )
// 4286   {
// 4287     pDiscoverCmd->startAttr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 4288     pBuf += 2;
// 4289     pDiscoverCmd->maxAttrIDs = *pBuf;
// 4290   }
// 4291 
// 4292   return ( (void *)pDiscoverCmd );
// 4293 }
// 4294 
// 4295 /*********************************************************************
// 4296  * @fn      zclParseInDiscAttrsRspCmd
// 4297  *
// 4298  * @brief   Parse the "Profile" Discovery Response Commands
// 4299  *
// 4300  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 4301  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 4302  *
// 4303  * @param   pCmd - pointer to incoming data to parse
// 4304  *
// 4305  * @return  pointer to the parsed command structure
// 4306  */
// 4307 #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete
// 4308 static void *zclParseInDiscAttrsRspCmd( zclParseCmd_t *pCmd )
// 4309 {
// 4310   zclDiscoverAttrsRspCmd_t *pDiscoverRspCmd;
// 4311   uint8 *pBuf = pCmd->pData;
// 4312   uint8 numAttr = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 ); // Attr ID + Data Type
// 4313 
// 4314   pDiscoverRspCmd = (zclDiscoverAttrsRspCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsRspCmd_t ) +
// 4315                     ( numAttr * sizeof(zclDiscoverAttrInfo_t) ) );
// 4316 
// 4317   if ( pDiscoverRspCmd != NULL )
// 4318   {
// 4319     uint8 i;
// 4320 
// 4321     pDiscoverRspCmd->discComplete = *pBuf++;
// 4322     pDiscoverRspCmd->numAttr = numAttr;
// 4323 
// 4324     for ( i = 0; i < numAttr; i++ )
// 4325     {
// 4326       pDiscoverRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 4327       pBuf += 2;
// 4328       pDiscoverRspCmd->attrList[i].dataType = *pBuf++;
// 4329     }
// 4330   }
// 4331 
// 4332   return ( (void *)pDiscoverRspCmd );
// 4333 }
// 4334 
// 4335 /*********************************************************************
// 4336  * @fn      zclParseInDiscCmdsCmd
// 4337  *
// 4338  * @brief   Parse the "Profile" Discovery Commands
// 4339  *
// 4340  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 4341  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 4342  *
// 4343  * @param   pCmd - pointer to incoming data to parse
// 4344  *
// 4345  * @return  pointer to the parsed command structure
// 4346  */
// 4347 void *zclParseInDiscCmdsCmd( zclParseCmd_t *pCmd )
// 4348 {
// 4349   zclDiscoverCmdsCmd_t *pDiscoverCmd;
// 4350   uint8 *pBuf = pCmd->pData;
// 4351 
// 4352   pDiscoverCmd = (zclDiscoverCmdsCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverCmdsCmd_t ) );
// 4353   if ( pDiscoverCmd != NULL )
// 4354   {
// 4355     pDiscoverCmd->startCmdID = *pBuf++;
// 4356     pDiscoverCmd->maxCmdID = *pBuf++;
// 4357   }
// 4358 
// 4359   return ( (void *)pDiscoverCmd );
// 4360 }
// 4361 
// 4362 /*********************************************************************
// 4363  * @fn      zclParseInDiscCmdsRspCmd
// 4364  *
// 4365  * @brief   Parse the Discover Commands Response Command
// 4366  *
// 4367  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 4368  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 4369  *
// 4370  * @param   pCmd - pointer to incoming data to parse
// 4371  *
// 4372  * @return  pointer to the parsed command structure
// 4373  */
// 4374 #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete
// 4375 static void *zclParseInDiscCmdsRspCmd( zclParseCmd_t *pCmd )
// 4376 {
// 4377   zclDiscoverCmdsCmdRsp_t *pDiscoverRspCmd;
// 4378   uint8 *pBuf = pCmd->pData;
// 4379   uint8 numCmds = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen);  // length of command ID variable array
// 4380 
// 4381     // allocate memory for size of structure plus variable array
// 4382   pDiscoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)zcl_mem_alloc( sizeof ( zclDiscoverCmdsCmdRsp_t ) +
// 4383                     ( numCmds * sizeof(uint8) ) );
// 4384   if ( pDiscoverRspCmd != NULL )
// 4385   {
// 4386     uint8 i;
// 4387     pDiscoverRspCmd->discComplete = *pBuf++;
// 4388     pDiscoverRspCmd->numCmd = numCmds;
// 4389 
// 4390     for ( i = 0; i < numCmds; i++ )
// 4391     {
// 4392       pDiscoverRspCmd->pCmdID[i] = *pBuf++;
// 4393     }
// 4394   }
// 4395 
// 4396   return ( (void *)pDiscoverRspCmd );
// 4397 }
// 4398 
// 4399 /*********************************************************************
// 4400  * @fn      zclParseInDiscAttrsExtRspCmd
// 4401  *
// 4402  * @brief   Parse the "Profile" Discovery Extended Attributes Response Commands
// 4403  *
// 4404  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 4405  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 4406  *
// 4407  * @param   pCmd - pointer to incoming data to parse
// 4408  *
// 4409  * @return  pointer to the parsed command structure
// 4410  */
// 4411 #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete
// 4412 static void *zclParseInDiscAttrsExtRspCmd( zclParseCmd_t *pCmd )
// 4413 {
// 4414   zclDiscoverAttrsExtRsp_t *pDiscoverRspCmd;
// 4415   uint8 i;
// 4416   uint8 *pBuf = pCmd->pData;
// 4417   uint8 numAttrs = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 + 1 ); // Attr ID + Data Type + Access Control
// 4418 
// 4419   pDiscoverRspCmd = (zclDiscoverAttrsExtRsp_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsExtRsp_t ) +
// 4420                     ( numAttrs * sizeof(zclExtAttrInfo_t) ) );
// 4421 
// 4422   if ( pDiscoverRspCmd != NULL )
// 4423   {
// 4424     pDiscoverRspCmd->discComplete = *pBuf++;
// 4425     pDiscoverRspCmd->numAttr = numAttrs;
// 4426 
// 4427     for ( i = 0; i < numAttrs; i++ )
// 4428     {
// 4429       pDiscoverRspCmd->aExtAttrInfo[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 4430       pBuf += 2;
// 4431       pDiscoverRspCmd->aExtAttrInfo[i].attrDataType = *pBuf++;
// 4432       pDiscoverRspCmd->aExtAttrInfo[i].attrAccessControl = *pBuf++;
// 4433     }
// 4434   }
// 4435 
// 4436   return ( (void *)pDiscoverRspCmd );
// 4437 }
// 4438 #endif // ZCL_DISCOVER
// 4439 
// 4440 #ifdef ZCL_READ
// 4441 /*********************************************************************
// 4442  * @fn      zclProcessInReadCmd
// 4443  *
// 4444  * @brief   Process the "Profile" Read Command
// 4445  *
// 4446  * @param   pInMsg - incoming message to process
// 4447  *
// 4448  * @return  TRUE if command processed. FALSE, otherwise.
// 4449  */
// 4450 static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg )
// 4451 {
// 4452   zclReadCmd_t *readCmd;
// 4453   zclReadRspCmd_t *readRspCmd;
// 4454   zclAttrRec_t attrRec;
// 4455   uint16 len;
// 4456   uint8 i;
// 4457   uint8 attrFound;
// 4458 
// 4459   readCmd = (zclReadCmd_t *)pInMsg->attrCmd;
// 4460 
// 4461   // calculate the length of the response status record
// 4462   len = sizeof( zclReadRspCmd_t ) + (readCmd->numAttr * sizeof( zclReadRspStatus_t ));
// 4463 
// 4464   readRspCmd = zcl_mem_alloc( len );
// 4465   if ( readRspCmd == NULL )
// 4466   {
// 4467     return FALSE; // EMBEDDED RETURN
// 4468   }
// 4469 
// 4470   readRspCmd->numAttr = readCmd->numAttr;
// 4471   for ( i = 0; i < readCmd->numAttr; i++ )
// 4472   {
// 4473     zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 4474 
// 4475     statusRec->attrID = readCmd->attrID[i];
// 4476     
// 4477     attrFound = zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, readCmd->attrID[i], &attrRec );
// 4478     
// 4479     //Validate the attribute is found and the access control
// 4480     if ( ( attrFound == TRUE ) && 
// 4481          (  (attrRec.attr.accessControl & ACCESS_GLOBAL) || 
// 4482             (GET_BIT( &attrRec.attr.accessControl, ACCESS_CONTROL_MASK ) == pInMsg->hdr.fc.direction ) ) )
// 4483     {
// 4484       if ( zcl_AccessCtrlRead( attrRec.attr.accessControl ) )
// 4485       {
// 4486         statusRec->status = zclAuthorizeRead( pInMsg->msg->endPoint,
// 4487                                               &(pInMsg->msg->srcAddr), &attrRec );
// 4488         if ( statusRec->status == ZCL_STATUS_SUCCESS )
// 4489         {
// 4490           statusRec->data = attrRec.attr.dataPtr;
// 4491           statusRec->dataType = attrRec.attr.dataType;
// 4492         }
// 4493       }
// 4494       else
// 4495       {
// 4496         statusRec->status = ZCL_STATUS_WRITE_ONLY;
// 4497       }
// 4498     }
// 4499     else
// 4500     {
// 4501       statusRec->status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
// 4502     }
// 4503   }
// 4504 
// 4505   // Build and send Read Response command
// 4506   zcl_SendReadRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr), pInMsg->msg->clusterId,
// 4507                    readRspCmd, !pInMsg->hdr.fc.direction,
// 4508                    true, pInMsg->hdr.transSeqNum );
// 4509   zcl_mem_free( readRspCmd );
// 4510 
// 4511   return TRUE;
// 4512 }
// 4513 #endif // ZCL_READ
// 4514 
// 4515 #ifdef ZCL_WRITE
// 4516 /*********************************************************************
// 4517  * @fn      processInWriteCmd
// 4518  *
// 4519  * @brief   Process the "Profile" Write and Write No Response Commands
// 4520  *
// 4521  * @param   pInMsg - incoming message to process
// 4522  *
// 4523  * @return  TRUE if command processed. FALSE, otherwise.
// 4524  */
// 4525 static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg )
// 4526 {
// 4527   zclWriteCmd_t *writeCmd;
// 4528   zclWriteRspCmd_t *writeRspCmd;
// 4529   uint8 sendRsp = FALSE;
// 4530   uint8 j = 0;
// 4531   uint8 i;
// 4532 
// 4533   writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
// 4534   if ( pInMsg->hdr.commandID == ZCL_CMD_WRITE )
// 4535   {
// 4536     // We need to send a response back - allocate space for it
// 4537     writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof( zclWriteRspCmd_t )
// 4538             + sizeof( zclWriteRspStatus_t ) * writeCmd->numAttr );
// 4539     if ( writeRspCmd == NULL )
// 4540     {
// 4541       return FALSE; // EMBEDDED RETURN
// 4542     }
// 4543 
// 4544     sendRsp = TRUE;
// 4545   }
// 4546 
// 4547   for ( i = 0; i < writeCmd->numAttr; i++ )
// 4548   {
// 4549     zclAttrRec_t attrRec;
// 4550     zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
// 4551 
// 4552     if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4553                          statusRec->attrID, &attrRec ) )
// 4554     {
// 4555       if ( GET_BIT( &attrRec.attr.accessControl, ACCESS_CONTROLEXT_MASK ) != pInMsg->hdr.fc.direction )
// 4556       {
// 4557         writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
// 4558         writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4559         break;
// 4560       }
// 4561       if ( statusRec->dataType == attrRec.attr.dataType )
// 4562       {
// 4563         uint8 status;
// 4564 
// 4565         // Write the new attribute value
// 4566         if ( attrRec.attr.dataPtr != NULL )
// 4567         {
// 4568           //Handle special case for Identify
// 4569           if((pInMsg->msg->clusterId == ZCL_CLUSTER_ID_GEN_IDENTIFY) && (statusRec->attrID == ATTRID_IDENTIFY_TIME))
// 4570           {
// 4571             uint16 identifyTime; 
// 4572                   
// 4573             osal_memcpy((uint8*)&identifyTime,statusRec->attrData,sizeof(uint16));
// 4574                         
// 4575             bdb_ZclIdentifyCmdInd(identifyTime, pInMsg->msg->endPoint);
// 4576             
// 4577             status = ZCL_STATUS_SUCCESS;
// 4578           }          
// 4579           else
// 4580           {                
// 4581             status = zclWriteAttrData( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4582                                        &attrRec, statusRec );
// 4583           }
// 4584         }
// 4585         else // Use CB
// 4586         {
// 4587           status = zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4588                                             &attrRec, statusRec->attrData );
// 4589         }
// 4590 
// 4591         // If successful, a write attribute status record shall NOT be generated
// 4592         if ( sendRsp && status != ZCL_STATUS_SUCCESS )
// 4593         {
// 4594           // Attribute is read only - move on to the next write attribute record
// 4595           writeRspCmd->attrList[j].status = status;
// 4596           writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4597         }
// 4598       }
// 4599       else
// 4600       {
// 4601         // Attribute data type is incorrect - move on to the next write attribute record
// 4602         if ( sendRsp )
// 4603         {
// 4604           writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
// 4605           writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4606         }
// 4607       }
// 4608     }
// 4609     else
// 4610     {
// 4611       // Attribute is not supported - move on to the next write attribute record
// 4612       if ( sendRsp )
// 4613       {
// 4614         writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
// 4615         writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4616       }
// 4617     }
// 4618   } // for loop
// 4619 
// 4620   if ( sendRsp )
// 4621   {
// 4622     writeRspCmd->numAttr = j;
// 4623     if ( writeRspCmd->numAttr == 0 )
// 4624     {
// 4625       // Since all records were written successful, include a single status record
// 4626       // in the resonse command with the status field set to SUCCESS and the
// 4627       // attribute ID field omitted.
// 4628       writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
// 4629       writeRspCmd->numAttr = 1;
// 4630     }
// 4631 
// 4632     zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4633                       pInMsg->msg->clusterId, writeRspCmd, !pInMsg->hdr.fc.direction,
// 4634                       true, pInMsg->hdr.transSeqNum );
// 4635     zcl_mem_free( writeRspCmd );
// 4636   }
// 4637 
// 4638   return TRUE;
// 4639 }
// 4640 
// 4641 /*********************************************************************
// 4642  * @fn      zclRevertWriteUndividedCmd
// 4643  *
// 4644  * @brief   Revert the "Profile" Write Undevided Command
// 4645  *
// 4646  * @param   pInMsg - incoming message to process
// 4647  * @param   curWriteRec - old data
// 4648  * @param   numAttr - number of attributes to be reverted
// 4649  *
// 4650  * @return  none
// 4651  */
// 4652 static void zclRevertWriteUndividedCmd( zclIncoming_t *pInMsg,
// 4653                                     zclWriteRec_t *curWriteRec, uint16 numAttr )
// 4654 {
// 4655   uint8 i;
// 4656 
// 4657   for ( i = 0; i < numAttr; i++ )
// 4658   {
// 4659     zclAttrRec_t attrRec;
// 4660     zclWriteRec_t *statusRec = &(curWriteRec[i]);
// 4661 
// 4662     if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4663                           statusRec->attrID, &attrRec ) )
// 4664     {
// 4665       break; // should never happen
// 4666     }
// 4667 
// 4668     if ( attrRec.attr.dataPtr != NULL )
// 4669     {
// 4670       // Just copy the old data back - no need to validate the data
// 4671       uint16 dataLen = zclGetAttrDataLength( attrRec.attr.dataType, statusRec->attrData );
// 4672       zcl_memcpy( attrRec.attr.dataPtr, statusRec->attrData, dataLen );
// 4673     }
// 4674     else // Use CB
// 4675     {
// 4676       // Write the old data back
// 4677       zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4678                                &attrRec, statusRec->attrData );
// 4679     }
// 4680   } // for loop
// 4681 }
// 4682 
// 4683 /*********************************************************************
// 4684  * @fn      zclProcessInWriteUndividedCmd
// 4685  *
// 4686  * @brief   Process the "Profile" Write Undivided Command
// 4687  *
// 4688  * @param   pInMsg - incoming message to process
// 4689  *
// 4690  * @return  TRUE if command processed. FALSE, otherwise.
// 4691  */
// 4692 static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg )
// 4693 {
// 4694   zclWriteCmd_t *writeCmd;
// 4695   zclWriteRspCmd_t *writeRspCmd;
// 4696   zclAttrRec_t attrRec;
// 4697   uint16 dataLen;
// 4698   uint16 curLen = 0;
// 4699   uint8 j = 0;
// 4700   uint8 i;
// 4701 
// 4702   writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
// 4703 
// 4704   // Allocate space for Write Response Command
// 4705   writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof( zclWriteRspCmd_t )
// 4706                    + sizeof( zclWriteRspStatus_t )* writeCmd->numAttr );
// 4707   if ( writeRspCmd == NULL )
// 4708   {
// 4709     return FALSE; // EMBEDDED RETURN
// 4710   }
// 4711 
// 4712   // If any attribute cannot be written, no attribute values are changed. Hence,
// 4713   // make sure all the attributes are supported and writable
// 4714   for ( i = 0; i < writeCmd->numAttr; i++ )
// 4715   {
// 4716     zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
// 4717 
// 4718     if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4719                           statusRec->attrID, &attrRec ) )
// 4720     {
// 4721       // Attribute is not supported - stop here
// 4722       writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
// 4723       writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4724       break;
// 4725     }
// 4726 
// 4727     if ( statusRec->dataType != attrRec.attr.dataType )
// 4728     {
// 4729       // Attribute data type is incorrect - stope here
// 4730       writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
// 4731       writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4732       break;
// 4733     }
// 4734 
// 4735     if ( !zcl_AccessCtrlWrite( attrRec.attr.accessControl ) )
// 4736     {
// 4737       // Attribute is not writable - stop here
// 4738       writeRspCmd->attrList[j].status = ZCL_STATUS_READ_ONLY;
// 4739       writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4740       break;
// 4741     }
// 4742 
// 4743     if ( zcl_AccessCtrlAuthWrite( attrRec.attr.accessControl ) )
// 4744     {
// 4745       // Not authorized to write - stop here
// 4746       writeRspCmd->attrList[j].status = ZCL_STATUS_NOT_AUTHORIZED;
// 4747       writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4748       break;
// 4749     }
// 4750 
// 4751     // Attribute Data length
// 4752     if ( attrRec.attr.dataPtr != NULL )
// 4753     {
// 4754       dataLen = zclGetAttrDataLength( attrRec.attr.dataType, attrRec.attr.dataPtr );
// 4755     }
// 4756     else // Use CB
// 4757     {
// 4758       dataLen = zclGetAttrDataLengthUsingCB( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4759                                              statusRec->attrID );
// 4760     }
// 4761 
// 4762     // add padding if needed
// 4763     if ( PADDING_NEEDED( dataLen ) )
// 4764     {
// 4765       dataLen++;
// 4766     }
// 4767 
// 4768     curLen += dataLen;
// 4769   } // for loop
// 4770 
// 4771   writeRspCmd->numAttr = j;
// 4772   if ( writeRspCmd->numAttr == 0 ) // All attributes can be written
// 4773   {
// 4774     uint8 *curDataPtr;
// 4775     zclWriteRec_t *curWriteRec;
// 4776 
// 4777     // calculate the length of the current data header
// 4778     uint8 hdrLen = j * sizeof( zclWriteRec_t );
// 4779 
// 4780     // Allocate space to keep a copy of the current data
// 4781     curWriteRec = (zclWriteRec_t *) zcl_mem_alloc( hdrLen + curLen );
// 4782     if ( curWriteRec == NULL )
// 4783     {
// 4784       zcl_mem_free(writeRspCmd );
// 4785       return FALSE; // EMBEDDED RETURN
// 4786     }
// 4787 
// 4788     curDataPtr = (uint8 *)((uint8 *)curWriteRec + hdrLen);
// 4789 
// 4790     // Write the new data over
// 4791     for ( i = 0; i < writeCmd->numAttr; i++ )
// 4792     {
// 4793       uint8 status;
// 4794       zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
// 4795       zclWriteRec_t *curStatusRec = &(curWriteRec[i]);
// 4796 
// 4797       if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4798                             statusRec->attrID, &attrRec ) )
// 4799       {
// 4800         break; // should never happen
// 4801       }
// 4802 
// 4803       // Keep a copy of the current data before before writing the new data over
// 4804       curStatusRec->attrID = statusRec->attrID;
// 4805       curStatusRec->attrData = curDataPtr;
// 4806 
// 4807       if ( attrRec.attr.dataPtr != NULL )
// 4808       {
// 4809         // Read the current value
// 4810         zclReadAttrData( curDataPtr, &attrRec, &dataLen );
// 4811 
// 4812         // Write the new attribute value
// 4813         status = zclWriteAttrData( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4814                                    &attrRec, statusRec );
// 4815       }
// 4816       else // Use CBs
// 4817       {
// 4818         // Read the current value
// 4819         zclReadAttrDataUsingCB( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4820                                 statusRec->attrID, curDataPtr, &dataLen );
// 4821         // Write the new attribute value
// 4822         status = zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4823                                           &attrRec, statusRec->attrData );
// 4824       }
// 4825 
// 4826       // If successful, a write attribute status record shall NOT be generated
// 4827       if ( status != ZCL_STATUS_SUCCESS )
// 4828       {
// 4829         writeRspCmd->attrList[j].status = status;
// 4830         writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4831 
// 4832         // Since this write failed, we need to revert all the pervious writes
// 4833         zclRevertWriteUndividedCmd( pInMsg, curWriteRec, i);
// 4834         break;
// 4835       }
// 4836 
// 4837       // add padding if needed
// 4838       if ( PADDING_NEEDED( dataLen ) )
// 4839       {
// 4840         dataLen++;
// 4841       }
// 4842 
// 4843       curDataPtr += dataLen;
// 4844     } // for loop
// 4845 
// 4846     writeRspCmd->numAttr = j;
// 4847     if ( writeRspCmd->numAttr  == 0 )
// 4848     {
// 4849       // Since all records were written successful, include a single status record
// 4850       // in the resonse command with the status field set to SUCCESS and the
// 4851       // attribute ID field omitted.
// 4852       writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
// 4853       writeRspCmd->numAttr = 1;
// 4854     }
// 4855 
// 4856     zcl_mem_free( curWriteRec );
// 4857   }
// 4858 
// 4859   zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4860                     pInMsg->msg->clusterId, writeRspCmd, !pInMsg->hdr.fc.direction,
// 4861                     true, pInMsg->hdr.transSeqNum );
// 4862   zcl_mem_free( writeRspCmd );
// 4863 
// 4864   return TRUE;
// 4865 }
// 4866 #endif // ZCL_WRITE
// 4867 
// 4868 #ifdef ZCL_DISCOVER
// 4869 /*********************************************************************
// 4870  * @fn      zclProcessInDiscAttrs
// 4871  *
// 4872  * @brief   Process the "Profile" Discover Attributes Commands
// 4873  *
// 4874  * @param   pInMsg - incoming message to process
// 4875  *
// 4876  * @return  TRUE if command processed. FALSE, otherwise.
// 4877  */
// 4878 static uint8 zclProcessInDiscAttrs( zclIncoming_t *pInMsg )
// 4879 {
// 4880   zclDiscoverAttrsCmd_t *pDiscoverCmd;
// 4881   zclAttrRec_t attrRec;
// 4882   uint16 attrID;
// 4883   uint8 numAttrs;
// 4884   uint8 i;
// 4885 
// 4886   pDiscoverCmd = (zclDiscoverAttrsCmd_t *)pInMsg->attrCmd;
// 4887 
// 4888   // Find out the number of attributes supported within the specified range
// 4889   for ( i = 0, attrID = pDiscoverCmd->startAttr; i < pDiscoverCmd->maxAttrIDs; i++, attrID++ )
// 4890   {
// 4891     // finds the next attribute on this endpoint/cluster after the range.
// 4892     // attributes must be in numerical order in the list.
// 4893     if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
// 4894     {
// 4895       break;
// 4896     }
// 4897   }
// 4898 
// 4899   numAttrs = i;  // store range of attributes in buffer
// 4900 
// 4901     // Process message for either attributes or extended attributes
// 4902   if( pInMsg->hdr.commandID == ZCL_CMD_DISCOVER_ATTRS )
// 4903   {
// 4904     zclProcessInDiscAttrsCmd( pInMsg, pDiscoverCmd, numAttrs );
// 4905   }
// 4906   else if ( pInMsg->hdr.commandID == ZCL_CMD_DISCOVER_ATTRS_EXT )
// 4907   {
// 4908     zclProcessInDiscAttrsExtCmd( pInMsg, pDiscoverCmd, numAttrs );
// 4909   }
// 4910 
// 4911   return TRUE;
// 4912 }
// 4913 
// 4914 /*********************************************************************
// 4915  * @fn      zclProcessInDiscAttrsCmd
// 4916  *
// 4917  * @brief   Process the Discover Attributes Command
// 4918  *
// 4919  * @param   pInMsg - incoming message to process
// 4920  *
// 4921  * @param   pDiscoverCmd - structure from requesting command
// 4922  *
// 4923  * @param   attrLenBuf - describes the amount of attributes to be processed
// 4924  *
// 4925  * @return  none
// 4926  */
// 4927 static void zclProcessInDiscAttrsCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 numAttrs )
// 4928 {
// 4929   zclDiscoverAttrsRspCmd_t *pDiscoverRsp;
// 4930   uint8 discComplete = TRUE;
// 4931   zclAttrRec_t attrRec;
// 4932   uint16 attrID;
// 4933   uint8 i;
// 4934 
// 4935   // Allocate space for the response command
// 4936   pDiscoverRsp = (zclDiscoverAttrsRspCmd_t *)zcl_mem_alloc( sizeof (zclDiscoverAttrsRspCmd_t)
// 4937                                                           + sizeof ( zclDiscoverAttrInfo_t ) * numAttrs );
// 4938   if ( pDiscoverRsp == NULL )
// 4939   {
// 4940     return; // EMBEDDED RETURN
// 4941   }
// 4942 
// 4943   if ( numAttrs != 0 )
// 4944   {
// 4945     for ( i = 0, attrID = pDiscoverCmd->startAttr; i < numAttrs; i++, attrID++ )
// 4946     {
// 4947       if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
// 4948       {
// 4949         break; // should not happen, as numAttrs already calculated
// 4950       }
// 4951 
// 4952       pDiscoverRsp->attrList[i].attrID = attrRec.attr.attrId;
// 4953       pDiscoverRsp->attrList[i].dataType = attrRec.attr.dataType;
// 4954     }
// 4955 
// 4956     // Are there more attributes to be discovered?
// 4957     if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
// 4958     {
// 4959       discComplete = FALSE;
// 4960     }
// 4961   }
// 4962 
// 4963   pDiscoverRsp->discComplete = discComplete;
// 4964   pDiscoverRsp->numAttr = numAttrs;
// 4965 
// 4966   zcl_SendDiscoverAttrsRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 4967                                pInMsg->msg->clusterId, pDiscoverRsp, !(pInMsg->hdr.fc.direction),
// 4968                                true, pInMsg->hdr.transSeqNum );
// 4969   zcl_mem_free( pDiscoverRsp );
// 4970 
// 4971   return;
// 4972 }
// 4973 
// 4974 /*********************************************************************
// 4975  * @fn      zclProcessInDiscAttrsExtCmd
// 4976  *
// 4977  * @brief   Process the Discover Attributes Extended Command
// 4978  *
// 4979  * @param   pInMsg - incoming message to process
// 4980  *
// 4981  * @param   pDiscoverCmd - structure from requesting command
// 4982  *
// 4983  * @param   attrLenBuf - describes the amount of attributes to be processed
// 4984  *
// 4985  * @return  none
// 4986  */
// 4987 static void zclProcessInDiscAttrsExtCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 numAttrs )
// 4988 {
// 4989   zclDiscoverAttrsExtRsp_t *pDiscoverExtRsp;
// 4990   uint8 discComplete = TRUE;
// 4991   zclAttrRec_t attrRec;
// 4992   uint16 attrID;
// 4993   uint8 i;
// 4994 
// 4995     // Allocate space for the response command
// 4996   pDiscoverExtRsp = (zclDiscoverAttrsExtRsp_t *)zcl_mem_alloc( sizeof (zclDiscoverAttrsExtRsp_t)
// 4997                                                          + sizeof ( zclExtAttrInfo_t ) * numAttrs );
// 4998   if ( pDiscoverExtRsp == NULL )
// 4999   {
// 5000     return; // EMBEDDED RETURN
// 5001   }
// 5002 
// 5003 
// 5004   if ( numAttrs != 0 )
// 5005   {
// 5006     for ( i = 0, attrID = pDiscoverCmd->startAttr; i < numAttrs; i++, attrID++ )
// 5007     {
// 5008       if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
// 5009       {
// 5010         break; // Should not happen, as numAttrs already calculated
// 5011       }
// 5012 
// 5013       pDiscoverExtRsp->aExtAttrInfo[i].attrID = attrRec.attr.attrId;
// 5014       pDiscoverExtRsp->aExtAttrInfo[i].attrDataType = attrRec.attr.dataType;
// 5015       pDiscoverExtRsp->aExtAttrInfo[i].attrAccessControl = attrRec.attr.accessControl & ACCESS_CONTROLEXT_MASK;
// 5016     }
// 5017 
// 5018     // Are there more attributes to be discovered?
// 5019     if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
// 5020     {
// 5021       discComplete = FALSE;
// 5022     }
// 5023   }
// 5024 
// 5025   pDiscoverExtRsp->discComplete = discComplete;
// 5026   pDiscoverExtRsp->numAttr = numAttrs;
// 5027 
// 5028   zcl_SendDiscoverAttrsExtRsp( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 5029                                pInMsg->msg->clusterId, pDiscoverExtRsp, !(pInMsg->hdr.fc.direction),
// 5030                                true, pInMsg->hdr.transSeqNum );
// 5031 
// 5032   zcl_mem_free( pDiscoverExtRsp );
// 5033 
// 5034   return;
// 5035 }
// 5036 
// 5037 /*********************************************************************
// 5038  * @fn      zclProcessInDiscCmd
// 5039  *
// 5040  * @brief   Process the "Profile" Discover Command
// 5041  *
// 5042  * @param   pInMsg - incoming message to process
// 5043  *
// 5044  * @return  TRUE if command processed. FALSE, otherwise.
// 5045  */
// 5046 static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg )
// 5047 {
// 5048   zclDiscoverCmdsCmd_t *pDiscoverCmd;
// 5049   zclDiscoverCmdsCmdRsp_t cmdRsp;
// 5050   ZStatus_t status;
// 5051   zclCommandRec_t cmdRec;
// 5052   uint8 cmdID;
// 5053   uint8 i;
// 5054   uint8 j;
// 5055 
// 5056   pDiscoverCmd = (zclDiscoverCmdsCmd_t *)pInMsg->attrCmd;
// 5057 
// 5058   // Find out the number of commands supported within the specified range
// 5059   for ( i = 0, cmdID = pDiscoverCmd->startCmdID; i < pDiscoverCmd->maxCmdID; i++, cmdID++ )
// 5060   {
// 5061     if ( !zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
// 5062     {
// 5063       break;  // Command not supported
// 5064     }
// 5065   }
// 5066 
// 5067   // Allocate space for the response command
// 5068   cmdRsp.pCmdID = zcl_mem_alloc( i ); // size of number of commands returned
// 5069 
// 5070   if ( cmdRsp.pCmdID == NULL )
// 5071   {
// 5072     return FALSE; // EMBEDDED RETURN
// 5073   }
// 5074 
// 5075   if ( i != 0 )
// 5076   {
// 5077     for ( j = 0, cmdID = pDiscoverCmd->startCmdID; j < i; j++, cmdID++ )
// 5078     {
// 5079       if ( !zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
// 5080       {
// 5081         break; // Attribute not supported
// 5082       }
// 5083 
// 5084       cmdRsp.pCmdID[j] = cmdRec.cmdID;
// 5085     }
// 5086   }
// 5087 
// 5088   // Are there more commands to be discovered?
// 5089   if ( zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
// 5090   {
// 5091     cmdRsp.discComplete = FALSE;
// 5092   }
// 5093   else
// 5094   {
// 5095     cmdRsp.discComplete = TRUE;
// 5096   }
// 5097 
// 5098   // pass the command requested
// 5099   cmdRsp.cmdType = pInMsg->hdr.commandID;
// 5100 
// 5101   // store number of commands returned
// 5102   cmdRsp.numCmd = j;
// 5103 
// 5104   status = zcl_SendDiscoverCmdsRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 5105                                       pInMsg->msg->clusterId, &cmdRsp, !(pInMsg->hdr.fc.direction),
// 5106                                       true, pInMsg->hdr.transSeqNum );
// 5107 
// 5108   zcl_mem_free( cmdRsp.pCmdID );
// 5109 
// 5110   if ( status == ZSuccess )
// 5111   {
// 5112     return TRUE;
// 5113   }
// 5114   else
// 5115   {
// 5116     return FALSE;
// 5117   }
// 5118 }
// 5119 
// 5120 #endif // ZCL_DISCOVER
// 5121 
// 5122 
// 5123 /*********************************************************************
// 5124 *********************************************************************/
// 
// 4 616 bytes in segment BANKED_CODE
//   174 bytes in segment BANK_RELAYS
//    92 bytes in segment CODE_C
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//    15 bytes in segment XDATA_Z
// 
//   267 bytes of CODE     memory
// 4 616 bytes of HUGECODE memory
//    16 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
