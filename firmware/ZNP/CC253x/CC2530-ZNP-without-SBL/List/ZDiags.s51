///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.40.1.7397 for 8051              01/May/2021  14:31:36
// Copyright 2004-2021 IAR Systems AB.
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        E:\Texas Instruments\Z-Stack 3.0.2\Components\stack\sys\ZDiags.c
//    Command line       =  
//        -f C:\Users\asus\AppData\Local\Temp\EW75FA.tmp ("E:\Texas
//        Instruments\Z-Stack 3.0.2\Components\stack\sys\ZDiags.c" -D
//        BDB_FINDING_BINDING_CAPABILITY_ENABLED=0 -D TC_LINKKEY_JOIN -D
//        HAL_UART_DMA_RX_MAX=128 -D MAXMEMHEAP=2765 -D NWK_MAX_DEVICE_LIST=10
//        -D ZDSECMGR_TC_DEVICE_MAX=30 -D DISABLE_GREENPOWER_BASIC_PROXY -D
//        POWER_SAVING -D FEATURE_SYSTEM_STATS -D MT_GP_CB_FUNC -D ASSERT_RESET
//        -D MAKE_CRC_SHDW -lC "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\List" -lA
//        "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\List"
//        --diag_suppress Pe001,Pa010 -o "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\Obj" -e
//        --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "E:\Texas
//        Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
//        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR |
//        DEVICE_BUILD_ROUTER | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL
//        -DZNP_RUN_WDOG=FALSE -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO
//        -DZIGBEE_FRAGMENTATION -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE
//        -DSAPI_CB_FUNC=FALSE -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT
//        -DNUM_DISC_ATTEMPTS=0 -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC
//        -DMT_SAPI_FUNC -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC
//        -DMT_ZDO_MGMT -DMT_ZDO_EXTENSIONS -DMT_GP_CB_FUNC -DMT_APP_FUNC
//        -DMT_APP_CNF_FUNC) -f "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg" -I
//        "E:\Texas Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\" -I
//        "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\Source\" -I "E:\Texas
//        Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\..\Source\" -I
//        "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "E:\Texas
//        Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Utilities\BootLoad\Source\" -I
//        "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I "E:\Texas
//        Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
//        "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\" -I
//        "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\gp\" -I
//        "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\bdb\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\"
//        -I "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\" -I
//        "E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes --no_code_motion)
//    Locale             =  English_USA.1252
//    List file          =  
//        E:\Texas Instruments\Z-Stack
//        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\List\ZDiags.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME ZDiags

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_TO_X
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?XLOAD_R0123
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTORE_R0123
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_Z

        PUBLIC `??ZDiagsClearStats::?relay`
        FUNCTION `??ZDiagsClearStats::?relay`,0203H
        PUBLIC `??ZDiagsGetStatsAttr::?relay`
        FUNCTION `??ZDiagsGetStatsAttr::?relay`,0203H
        PUBLIC `??ZDiagsGetStatsTable::?relay`
        FUNCTION `??ZDiagsGetStatsTable::?relay`,0203H
        PUBLIC `??ZDiagsInitStats::?relay`
        FUNCTION `??ZDiagsInitStats::?relay`,0203H
        PUBLIC `??ZDiagsRestoreStatsFromNV::?relay`
        FUNCTION `??ZDiagsRestoreStatsFromNV::?relay`,0203H
        PUBLIC `??ZDiagsSaveStatsToNV::?relay`
        FUNCTION `??ZDiagsSaveStatsToNV::?relay`,0203H
        PUBLIC `??ZDiagsUpdateStats::?relay`
        FUNCTION `??ZDiagsUpdateStats::?relay`,0203H
        PUBLIC ZDiagsClearStats
        FUNCTION ZDiagsClearStats,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDiagsGetStatsAttr
        FUNCTION ZDiagsGetStatsAttr,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDiagsGetStatsTable
        FUNCTION ZDiagsGetStatsTable,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDiagsInitStats
        FUNCTION ZDiagsInitStats,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDiagsRestoreStatsFromNV
        FUNCTION ZDiagsRestoreStatsFromNV,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDiagsSaveStatsToNV
        FUNCTION ZDiagsSaveStatsToNV,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDiagsUpdateStats
        FUNCTION ZDiagsUpdateStats,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
ZMacGetReq          SYMBOL "ZMacGetReq"
`??ZMacGetReq::?relay` SYMBOL "?relay", ZMacGetReq
osal_GetSystemClock SYMBOL "osal_GetSystemClock"
`??osal_GetSystemClock::?relay` SYMBOL "?relay", osal_GetSystemClock
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
ZDiagsClearStats    SYMBOL "ZDiagsClearStats"
`??ZDiagsClearStats::?relay` SYMBOL "?relay", ZDiagsClearStats
ZDiagsGetStatsAttr  SYMBOL "ZDiagsGetStatsAttr"
`??ZDiagsGetStatsAttr::?relay` SYMBOL "?relay", ZDiagsGetStatsAttr
ZDiagsGetStatsTable SYMBOL "ZDiagsGetStatsTable"
`??ZDiagsGetStatsTable::?relay` SYMBOL "?relay", ZDiagsGetStatsTable
ZDiagsInitStats     SYMBOL "ZDiagsInitStats"
`??ZDiagsInitStats::?relay` SYMBOL "?relay", ZDiagsInitStats
ZDiagsRestoreStatsFromNV SYMBOL "ZDiagsRestoreStatsFromNV"
`??ZDiagsRestoreStatsFromNV::?relay` SYMBOL "?relay", ZDiagsRestoreStatsFromNV
ZDiagsSaveStatsToNV SYMBOL "ZDiagsSaveStatsToNV"
`??ZDiagsSaveStatsToNV::?relay` SYMBOL "?relay", ZDiagsSaveStatsToNV
ZDiagsUpdateStats   SYMBOL "ZDiagsUpdateStats"
`??ZDiagsUpdateStats::?relay` SYMBOL "?relay", ZDiagsUpdateStats

        EXTERN `??ZMacGetReq::?relay`
        FUNCTION `??ZMacGetReq::?relay`,00H
        EXTERN `??osal_GetSystemClock::?relay`
        FUNCTION `??osal_GetSystemClock::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN ZMacGetReq
        FUNCTION ZMacGetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_GetSystemClock
        FUNCTION osal_GetSystemClock,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// E:\Texas Instruments\Z-Stack 3.0.2\Components\stack\sys\ZDiags.c
//    1 /**************************************************************************************************
//    2   Filename:       ZDiags.c
//    3   Revised:        $Date: 2014-03-13 15:53:56 -0700 (Thu, 13 Mar 2014) $
//    4   Revision:       $Revision: 37678 $
//    5 
//    6   Description:    Diagnostics module.
//    7 
//    8 
//    9   Copyright 2014 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 #include "OSAL.h"
//   44 #include "OSAL_Nv.h"
//   45 #include "OSAL_Timers.h"
//   46 #include "ZDiags.h"
//   47 #include "ZMAC.h"
//   48 
//   49 /*********************************************************************
//   50  * MACROS
//   51  */
//   52 
//   53 /*********************************************************************
//   54  * CONSTANTS
//   55  */
//   56 
//   57 /*********************************************************************
//   58  * TYPEDEFS
//   59  */
//   60 
//   61 /*********************************************************************
//   62  * GLOBAL VARIABLES
//   63  */
//   64 #if defined ( FEATURE_SYSTEM_STATS )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   65 static DiagStatistics_t DiagsStatsTable;
DiagsStatsTable:
        DS 84
        REQUIRE __INIT_XDATA_Z
//   66 #endif
//   67 
//   68 /*********************************************************************
//   69  * LOCAL VARIABLES
//   70  */
//   71 
//   72 /*********************************************************************
//   73  * LOCAL FUNCTIONS
//   74  */
//   75 
//   76 
//   77 /****************************************************************************
//   78  * @fn          ZDiagsInitStats
//   79  *
//   80  * @brief       Initialize the statistics table in NV or restore values from
//   81  *              NV into the Statistics table in RAM
//   82  *
//   83  * @param       none.
//   84  *
//   85  * @return      ZSuccess - if NV data was initialized successfully.
//   86  *              ZFailure - Otherwise
//   87  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   88 uint8 ZDiagsInitStats( void )
ZDiagsInitStats:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ZDiagsInitStats
        CODE
//   89 {
        FUNCALL ZDiagsInitStats, ZDiagsClearStats
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsInitStats, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsInitStats, ZDiagsRestoreStatsFromNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//   90   uint8 retValue = ZSuccess;
        MOV       R6,#0x0
//   91 
//   92 #if defined ( FEATURE_SYSTEM_STATS )
//   93   uint8 status;
//   94 
//   95   // Initialize structure with default values, and do not try to write to NV
//   96   // because item does not exist yet
//   97   (void)ZDiagsClearStats( FALSE );
        ; Setup parameters for call to function ZDiagsClearStats
        MOV       R1,#0x0
        LCALL     `??ZDiagsClearStats::?relay`; Banked call to: ZDiagsClearStats
//   98 
//   99   status = osal_nv_item_init( ZCD_NV_DIAGNOSTIC_STATS,
//  100                               (uint16)sizeof( DiagStatistics_t ),
//  101                               &DiagsStatsTable );
        ; Setup parameters for call to function osal_nv_item_init
        MOV       ?V0,#DiagsStatsTable & 0xff
        MOV       ?V1,#(DiagsStatsTable >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R4,#0x54
        MOV       R5,#0x0
        MOV       R2,#0x50
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       A,R1
        MOV       R0,A
//  102 
//  103   if ( status == NV_OPER_FAILED )
        MOV       A,#0xa
        XRL       A,R0
        JZ        ??ZDiagsInitStats_0
//  104   {
//  105     retValue = ZFailure;
//  106   }
//  107   else
//  108   {
//  109     // Item existed, restore NV values into RAM table
//  110     if ( status == SUCCESS )
        MOV       A,R1
        JNZ       ??ZDiagsInitStats_1
//  111     {
//  112       if ( NV_OPER_FAILED == ZDiagsRestoreStatsFromNV() )
        ; Setup parameters for call to function ZDiagsRestoreStatsFromNV
        LCALL     `??ZDiagsRestoreStatsFromNV::?relay`; Banked call to: ZDiagsRestoreStatsFromNV
        MOV       A,R1
        XRL       A,#0xa
        JNZ       ??ZDiagsInitStats_1
//  113       {
//  114         retValue = ZFailure;
??ZDiagsInitStats_0:
        MOV       R6,#0x1
//  115       }
//  116     }
//  117   }
//  118 #endif // FEATURE_SYSTEM_STATS
//  119 
//  120   return ( retValue );
??ZDiagsInitStats_1:
        LJMP      ?Subroutine0 & 0xFFFF
//  121 }
          CFI EndBlock cfiBlock0
//  122 
//  123 /****************************************************************************
//  124  * @fn          ZDiagsClearStats
//  125  *
//  126  * @brief       Clears the statistics table in RAM and NV if option flag set.
//  127  *
//  128  * @param       clearNV   - Option flag to clear NV data.
//  129  *
//  130  * @return      System Clock.
//  131  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  132 uint32 ZDiagsClearStats( bool clearNV )
ZDiagsClearStats:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function ZDiagsClearStats
        CODE
//  133 {
        FUNCALL ZDiagsClearStats, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsClearStats, osal_GetSystemClock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsClearStats, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsClearStats, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
        MOV       R6,A
//  134   uint32 retValue = 0;
//  135 
//  136 #if defined ( FEATURE_SYSTEM_STATS )
//  137   // clears statistics table
//  138   osal_memset( &DiagsStatsTable, 0, sizeof( DiagStatistics_t ) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x54
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,#DiagsStatsTable & 0xff
        MOV       R3,#(DiagsStatsTable >> 8) & 0xff
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  139 
//  140   // saves System Clock when statistics were cleared
//  141   retValue = DiagsStatsTable.SysClock = osal_GetSystemClock();
        ; Setup parameters for call to function osal_GetSystemClock
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL     ?L_MOV_TO_X
//  142 
//  143   if ( clearNV )
        MOV       A,R6
        JZ        ??ZDiagsClearStats_0
//  144   {
//  145     uint16 bootCnt = 0;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  146 
//  147     // Boot count is not part of DiagsStatsTable, it has to be initialized separately
//  148     osal_nv_write( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       ?V4,#0x2
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x2
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
//  149 
//  150     // Clears values in NV and saves the system clock for the last time stats were cleared
//  151     osal_nv_write( ZCD_NV_DIAGNOSTIC_STATS, 0, sizeof( DiagStatistics_t ), &DiagsStatsTable );
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V4,#DiagsStatsTable & 0xff
        MOV       ?V5,#(DiagsStatsTable >> 8) & 0xff
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       ?V4,#0x54
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x50
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
//  152   }
//  153 #endif // FEATURE_SYSTEM_STATS
//  154 
//  155   return ( retValue );
??ZDiagsClearStats_0:
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R4,?V2
        MOV       R5,?V3
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock1
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  156 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  157 
//  158 /****************************************************************************
//  159  * @fn          ZDiagsUpdateStats
//  160  *
//  161  * @brief       Update statistics and/or metrics for a specific Attribute Id
//  162  *
//  163  * @param       attributeId  input  - unique identifier for the required attribute
//  164  *
//  165  * @return      none.
//  166  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  167 void ZDiagsUpdateStats( uint16 attributeId )
ZDiagsUpdateStats:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function ZDiagsUpdateStats
        CODE
//  168 {
        FUNCALL ZDiagsUpdateStats, osal_GetSystemClock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  169 #if defined ( FEATURE_SYSTEM_STATS )
//  170   switch ( attributeId )
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R0,#?V0
        LCALL     ?US_SWITCH_SPARSE
`?<Jumptable for ZDiagsUpdateStats>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        25
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsUpdateStats_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsUpdateStats_1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        200
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsUpdateStats_2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        201
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsUpdateStats_3
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        202
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsUpdateStats_4
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        203
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsUpdateStats_5
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        204
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsUpdateStats_6
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        205
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsUpdateStats_7
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        206
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsUpdateStats_8
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        207
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsUpdateStats_9
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        208
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsUpdateStats_10
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        209
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsUpdateStats_11
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        210
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsUpdateStats_12
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        211
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsUpdateStats_13
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        300
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsUpdateStats_14
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        301
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsUpdateStats_15
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        302
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsUpdateStats_16
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        303
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsUpdateStats_17
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        304
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsUpdateStats_18
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        305
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsUpdateStats_19
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        306
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsUpdateStats_20
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        307
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsUpdateStats_21
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        308
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsUpdateStats_22
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        309
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsUpdateStats_23
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        310
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsUpdateStats_24
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsUpdateStats_25
        CODE
//  171   {
//  172     // System and Hardware Diagnostics
//  173     case ZDIAGS_SYSTEM_CLOCK:
//  174       DiagsStatsTable.SysClock = osal_GetSystemClock();
??ZDiagsUpdateStats_0:
        ; Setup parameters for call to function osal_GetSystemClock
        LCALL     `??osal_GetSystemClock::?relay`; Banked call to: osal_GetSystemClock
        MOV       DPTR,#DiagsStatsTable
        LCALL     ?XSTORE_R2345
//  175       break;
        SJMP      ??ZDiagsUpdateStats_25
//  176 
//  177     case ZDIAGS_PERSISTENT_MEMORY_WRITES:
//  178       DiagsStatsTable.PersistentMemoryWrites++;
??ZDiagsUpdateStats_1:
        MOV       DPTR,#DiagsStatsTable + 4
        SJMP      ??ZDiagsUpdateStats_26
//  179       break;
//  180 
//  181     // NWK Diagnostics
//  182     case ZDIAGS_ROUTE_DISC_INITIATED:
//  183       DiagsStatsTable.RouteDiscInitiated++;
??ZDiagsUpdateStats_2:
        MOV       DPTR,#DiagsStatsTable + 38
        SJMP      ??ZDiagsUpdateStats_26
//  184       break;
//  185 
//  186     case ZDIAGS_NEIGHBOR_ADDED:
//  187       DiagsStatsTable.NeighborAdded++;
??ZDiagsUpdateStats_3:
        MOV       DPTR,#DiagsStatsTable + 40
        SJMP      ??ZDiagsUpdateStats_26
//  188       break;
//  189 
//  190     case ZDIAGS_NEIGHBOR_REMOVED:
//  191       DiagsStatsTable.NeighborRemoved++;
??ZDiagsUpdateStats_4:
        MOV       DPTR,#DiagsStatsTable + 42
        SJMP      ??ZDiagsUpdateStats_26
//  192       break;
//  193 
//  194     case ZDIAGS_NEIGHBOR_STALE:
//  195       DiagsStatsTable.NeighborStale++;
??ZDiagsUpdateStats_5:
        MOV       DPTR,#DiagsStatsTable + 44
        SJMP      ??ZDiagsUpdateStats_26
//  196       break;
//  197 
//  198     case ZDIAGS_JOIN_INDICATION:
//  199       DiagsStatsTable.JoinIndication++;
??ZDiagsUpdateStats_6:
        MOV       DPTR,#DiagsStatsTable + 46
        SJMP      ??ZDiagsUpdateStats_26
//  200       break;
//  201 
//  202     case ZDIAGS_CHILD_MOVED:
//  203       DiagsStatsTable.ChildMoved++;
??ZDiagsUpdateStats_7:
        MOV       DPTR,#DiagsStatsTable + 48
        SJMP      ??ZDiagsUpdateStats_26
//  204       break;
//  205 
//  206     case ZDIAGS_NWK_FC_FAILURE:
//  207       DiagsStatsTable.NwkFcFailure++;
??ZDiagsUpdateStats_8:
        MOV       DPTR,#DiagsStatsTable + 50
        SJMP      ??ZDiagsUpdateStats_26
//  208       break;
//  209 
//  210     case ZDIAGS_NWK_DECRYPT_FAILURES:
//  211       DiagsStatsTable.NwkDecryptFailures++;
??ZDiagsUpdateStats_9:
        MOV       DPTR,#DiagsStatsTable + 52
        SJMP      ??ZDiagsUpdateStats_26
//  212       break;
//  213 
//  214     case ZDIAGS_PACKET_BUFFER_ALLOCATE_FAILURES:
//  215       DiagsStatsTable.PacketBufferAllocateFailures++;
??ZDiagsUpdateStats_10:
        MOV       DPTR,#DiagsStatsTable + 54
        SJMP      ??ZDiagsUpdateStats_26
//  216       break;
//  217 
//  218     case ZDIAGS_RELAYED_UCAST:
//  219       DiagsStatsTable.RelayedUcast++;
??ZDiagsUpdateStats_11:
        MOV       DPTR,#DiagsStatsTable + 56
        SJMP      ??ZDiagsUpdateStats_26
//  220       break;
//  221 
//  222     case ZDIAGS_PHY_TO_MAC_QUEUE_LIMIT_REACHED:
//  223       DiagsStatsTable.PhyToMacQueueLimitReached++;
??ZDiagsUpdateStats_12:
        MOV       DPTR,#DiagsStatsTable + 58
        SJMP      ??ZDiagsUpdateStats_26
//  224       break;
//  225 
//  226     case ZDIAGS_PACKET_VALIDATE_DROP_COUNT:
//  227       DiagsStatsTable.PacketValidateDropCount++;
??ZDiagsUpdateStats_13:
        MOV       DPTR,#DiagsStatsTable + 60
        SJMP      ??ZDiagsUpdateStats_26
//  228       break;
//  229 
//  230     // APS Diagnostics
//  231     case ZDIAGS_APS_RX_BCAST:
//  232       DiagsStatsTable.ApsRxBcast++;
??ZDiagsUpdateStats_14:
        MOV       DPTR,#DiagsStatsTable + 62
        SJMP      ??ZDiagsUpdateStats_26
//  233       break;
//  234 
//  235     case ZDIAGS_APS_TX_BCAST:
//  236       DiagsStatsTable.ApsTxBcast++;
??ZDiagsUpdateStats_15:
        MOV       DPTR,#DiagsStatsTable + 64
        SJMP      ??ZDiagsUpdateStats_26
//  237       break;
//  238 
//  239     case ZDIAGS_APS_RX_UCAST:
//  240       DiagsStatsTable.ApsRxUcast++;
??ZDiagsUpdateStats_16:
        MOV       DPTR,#DiagsStatsTable + 66
        SJMP      ??ZDiagsUpdateStats_26
//  241       break;
//  242 
//  243     case ZDIAGS_APS_TX_UCAST_SUCCESS:
//  244       DiagsStatsTable.ApsTxUcastSuccess++;
??ZDiagsUpdateStats_17:
        MOV       DPTR,#DiagsStatsTable + 68
        SJMP      ??ZDiagsUpdateStats_26
//  245       break;
//  246 
//  247     case ZDIAGS_APS_TX_UCAST_RETRY:
//  248       DiagsStatsTable.ApsTxUcastRetry++;
??ZDiagsUpdateStats_18:
        MOV       DPTR,#DiagsStatsTable + 70
        SJMP      ??ZDiagsUpdateStats_26
//  249       break;
//  250 
//  251     case ZDIAGS_APS_TX_UCAST_FAIL:
//  252       DiagsStatsTable.ApsTxUcastFail++;
??ZDiagsUpdateStats_19:
        MOV       DPTR,#DiagsStatsTable + 72
        SJMP      ??ZDiagsUpdateStats_26
//  253       break;
//  254 
//  255     case ZDIAGS_APS_FC_FAILURE:
//  256       DiagsStatsTable.ApsFcFailure++;
??ZDiagsUpdateStats_20:
        MOV       DPTR,#DiagsStatsTable + 74
        SJMP      ??ZDiagsUpdateStats_26
//  257       break;
//  258 
//  259     case ZDIAGS_APS_UNAUTHORIZED_KEY:
//  260       DiagsStatsTable.ApsUnauthorizedKey++;
??ZDiagsUpdateStats_21:
        MOV       DPTR,#DiagsStatsTable + 76
        SJMP      ??ZDiagsUpdateStats_26
//  261       break;
//  262 
//  263     case ZDIAGS_APS_DECRYPT_FAILURES:
//  264       DiagsStatsTable.ApsDecryptFailures++;
??ZDiagsUpdateStats_22:
        MOV       DPTR,#DiagsStatsTable + 78
        SJMP      ??ZDiagsUpdateStats_26
//  265       break;
//  266 
//  267     case ZDIAGS_APS_INVALID_PACKETS:
//  268       DiagsStatsTable.ApsInvalidPackets++;
??ZDiagsUpdateStats_23:
        MOV       DPTR,#DiagsStatsTable + 80
        SJMP      ??ZDiagsUpdateStats_26
//  269       break;
//  270 
//  271     case ZDIAGS_MAC_RETRIES_PER_APS_TX_SUCCESS:
//  272       DiagsStatsTable.MacRetriesPerApsTxSuccess++;
??ZDiagsUpdateStats_24:
        MOV       DPTR,#DiagsStatsTable + 82
??ZDiagsUpdateStats_26:
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOVX      @DPTR,A
//  273       break;
//  274 
//  275     default:
//  276       break;
//  277   }
//  278 #endif // FEATURE_SYSTEM_STATS
//  279 }
??ZDiagsUpdateStats_25:
        SJMP      ??Subroutine5_0
          CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,R6
        MOV       R1,A
          CFI EndBlock cfiBlock4
        REQUIRE ??Subroutine5_0
        ; // Fall through to label ??Subroutine5_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine5_0:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock5
//  280 
//  281 /****************************************************************************
//  282  * @fn          ZDiagsGetStatsAttr
//  283  *
//  284  * @brief       Reads specific systemID statistics and/or metrics
//  285  *
//  286  * @param       attributeId  input  - unique identifier for the required attribute
//  287  *
//  288  *   NOTE: the user of this function will have to cast the value
//  289  *         based on the type of the attributeID, the returned value
//  290  *         will allways be uint32.
//  291  *
//  292  * @return      Value of the attribute requested.
//  293  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  294 uint32 ZDiagsGetStatsAttr( uint16 attributeId )
ZDiagsGetStatsAttr:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function ZDiagsGetStatsAttr
        CODE
//  295 {
        FUNCALL ZDiagsGetStatsAttr, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsGetStatsAttr, ZMacGetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsGetStatsAttr, ZMacGetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsGetStatsAttr, ZMacGetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsGetStatsAttr, ZMacGetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsGetStatsAttr, ZMacGetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsGetStatsAttr, ZMacGetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsGetStatsAttr, ZMacGetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsGetStatsAttr, ZMacGetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 4
        MOV       A,#-0x4
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  296   uint32 diagsValue = 0;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  297 
//  298 #if defined ( FEATURE_SYSTEM_STATS )
//  299   switch ( attributeId )
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R0,#?V0
        LCALL     ?US_SWITCH_SPARSE
`?<Jumptable for ZDiagsGetStatsAttr>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        34
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        100
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_3
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        101
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_4
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        102
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_5
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        103
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_6
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        104
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_7
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        105
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_8
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        106
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_9
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        107
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_10
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        200
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_11
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        201
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_12
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        202
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_13
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        203
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_14
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        204
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_15
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        205
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_16
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        206
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_17
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        207
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_18
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        208
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_19
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        209
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_20
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        210
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_21
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        211
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_22
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        300
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_23
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        301
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_24
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        302
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_25
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        303
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_26
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        304
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_27
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        305
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_28
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        306
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_29
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        307
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_30
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        308
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_31
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        309
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_32
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        310
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_33
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDiagsGetStatsAttr_34
        CODE
//  300   {
//  301     // System and Hardware Diagnostics
//  302     case ZDIAGS_SYSTEM_CLOCK:
//  303       // this is the system clock when statistics were cleared;
//  304       diagsValue = DiagsStatsTable.SysClock;
??ZDiagsGetStatsAttr_0:
        MOV       DPTR,#DiagsStatsTable
        LCALL     ?XLOAD_R0123
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LJMP      ??ZDiagsGetStatsAttr_35 & 0xFFFF
//  305       break;
//  306 
//  307     case ZDIAGS_NUMBER_OF_RESETS:
//  308       // Get the value from NV memory
//  309       osal_nv_read( ZCD_NV_BOOTCOUNTER, 0, sizeof(uint16), &diagsValue );
??ZDiagsGetStatsAttr_1:
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x2
        MOV       R3,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  310       break;
        LJMP      ??ZDiagsGetStatsAttr_34 & 0xFFFF
//  311 
//  312     case ZDIAGS_PERSISTENT_MEMORY_WRITES:
//  313       diagsValue = DiagsStatsTable.PersistentMemoryWrites;
??ZDiagsGetStatsAttr_2:
        MOV       DPTR,#DiagsStatsTable + 4
        LJMP      ??ZDiagsGetStatsAttr_36 & 0xFFFF
//  314       break;
//  315 
//  316     // MAC Diagnostics
//  317     case ZDIAGS_MAC_RX_CRC_PASS:
//  318       ZMacGetReq( ZMacDiagsRxCrcPass, (uint8 *)&diagsValue );
??ZDiagsGetStatsAttr_3:
        ; Setup parameters for call to function ZMacGetReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#-0x19
        LCALL     ?Subroutine3 & 0xFFFF
//  319       // Update the statistics table with this value from MAC
//  320       DiagsStatsTable.MacRxCrcPass = diagsValue;
??CrossCallReturnLabel_2:
        LCALL     ?XLOAD_R0123
        MOV       DPTR,#DiagsStatsTable + 6
        SJMP      ??ZDiagsGetStatsAttr_35
//  321       break;
//  322 
//  323     case ZDIAGS_MAC_RX_CRC_FAIL:
//  324       ZMacGetReq( ZMacDiagsRxCrcFail, (uint8 *)&diagsValue );
??ZDiagsGetStatsAttr_4:
        ; Setup parameters for call to function ZMacGetReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#-0x18
        LCALL     ?Subroutine3 & 0xFFFF
//  325       // Update the statistics table with this value from MAC
//  326       DiagsStatsTable.MacRxCrcFail = diagsValue;
??CrossCallReturnLabel_3:
        LCALL     ?XLOAD_R0123
        MOV       DPTR,#DiagsStatsTable + 10
        SJMP      ??ZDiagsGetStatsAttr_35
//  327       break;
//  328 
//  329     case ZDIAGS_MAC_RX_BCAST:
//  330       ZMacGetReq( ZMacDiagsRxBcast, (uint8 *)&diagsValue );
??ZDiagsGetStatsAttr_5:
        ; Setup parameters for call to function ZMacGetReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#-0x17
        LCALL     ?Subroutine3 & 0xFFFF
//  331       // Update the statistics table with this value from MAC
//  332       DiagsStatsTable.MacRxBcast = diagsValue;
??CrossCallReturnLabel_4:
        LCALL     ?XLOAD_R0123
        MOV       DPTR,#DiagsStatsTable + 14
        SJMP      ??ZDiagsGetStatsAttr_35
//  333       break;
//  334 
//  335     case ZDIAGS_MAC_TX_BCAST:
//  336       ZMacGetReq( ZMacDiagsTxBcast, (uint8 *)&diagsValue );
??ZDiagsGetStatsAttr_6:
        ; Setup parameters for call to function ZMacGetReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#-0x16
        LCALL     ?Subroutine3 & 0xFFFF
//  337       // Update the statistics table with this value from MAC
//  338       DiagsStatsTable.MacTxBcast = diagsValue;
??CrossCallReturnLabel_5:
        LCALL     ?XLOAD_R0123
        MOV       DPTR,#DiagsStatsTable + 18
        SJMP      ??ZDiagsGetStatsAttr_35
//  339       break;
//  340 
//  341     case ZDIAGS_MAC_RX_UCAST:
//  342       ZMacGetReq( ZMacDiagsRxUcast, (uint8 *)&diagsValue );
??ZDiagsGetStatsAttr_7:
        ; Setup parameters for call to function ZMacGetReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#-0x15
        LCALL     ?Subroutine3 & 0xFFFF
//  343       // Update the statistics table with this value from MAC
//  344       DiagsStatsTable.MacRxUcast = diagsValue;
??CrossCallReturnLabel_6:
        LCALL     ?XLOAD_R0123
        MOV       DPTR,#DiagsStatsTable + 22
        SJMP      ??ZDiagsGetStatsAttr_35
//  345       break;
//  346 
//  347     case ZDIAGS_MAC_TX_UCAST:
//  348       ZMacGetReq( ZMacDiagsTxUcast, (uint8 *)&diagsValue );
??ZDiagsGetStatsAttr_8:
        ; Setup parameters for call to function ZMacGetReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#-0x14
        LCALL     ?Subroutine3 & 0xFFFF
//  349       // Update the statistics table with this value from MAC
//  350       DiagsStatsTable.MacTxUcast = diagsValue;
??CrossCallReturnLabel_7:
        LCALL     ?XLOAD_R0123
        MOV       DPTR,#DiagsStatsTable + 26
        SJMP      ??ZDiagsGetStatsAttr_35
//  351       break;
//  352 
//  353     case ZDIAGS_MAC_TX_UCAST_RETRY:
//  354       ZMacGetReq( ZMacDiagsTxUcastRetry, (uint8 *)&diagsValue );
??ZDiagsGetStatsAttr_9:
        ; Setup parameters for call to function ZMacGetReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#-0x13
        LCALL     ?Subroutine3 & 0xFFFF
//  355       // Update the statistics table with this value from MAC
//  356       DiagsStatsTable.MacTxUcastRetry = diagsValue;
??CrossCallReturnLabel_8:
        LCALL     ?XLOAD_R0123
        MOV       DPTR,#DiagsStatsTable + 30
        SJMP      ??ZDiagsGetStatsAttr_35
//  357       break;
//  358 
//  359     case ZDIAGS_MAC_TX_UCAST_FAIL:
//  360       ZMacGetReq( ZMacDiagsTxUcastFail, (uint8 *)&diagsValue );
??ZDiagsGetStatsAttr_10:
        ; Setup parameters for call to function ZMacGetReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#-0x12
        LCALL     ?Subroutine3 & 0xFFFF
//  361       // Update the statistics table with this value from MAC
//  362       DiagsStatsTable.MacTxUcastFail = diagsValue;
??CrossCallReturnLabel_9:
        LCALL     ?XLOAD_R0123
        MOV       DPTR,#DiagsStatsTable + 34
??ZDiagsGetStatsAttr_35:
        LCALL     ?XSTORE_R0123
//  363       break;
        LJMP      ??ZDiagsGetStatsAttr_34 & 0xFFFF
//  364 
//  365     // NWK Diagnostics
//  366     case ZDIAGS_ROUTE_DISC_INITIATED:
//  367       diagsValue = DiagsStatsTable.RouteDiscInitiated;
??ZDiagsGetStatsAttr_11:
        MOV       DPTR,#DiagsStatsTable + 38
        SJMP      ??ZDiagsGetStatsAttr_36
//  368       break;
//  369 
//  370     case ZDIAGS_NEIGHBOR_ADDED:
//  371       diagsValue = DiagsStatsTable.NeighborAdded;
??ZDiagsGetStatsAttr_12:
        MOV       DPTR,#DiagsStatsTable + 40
        SJMP      ??ZDiagsGetStatsAttr_36
//  372       break;
//  373 
//  374     case ZDIAGS_NEIGHBOR_REMOVED:
//  375       diagsValue = DiagsStatsTable.NeighborRemoved;
??ZDiagsGetStatsAttr_13:
        MOV       DPTR,#DiagsStatsTable + 42
        SJMP      ??ZDiagsGetStatsAttr_36
//  376       break;
//  377 
//  378     case ZDIAGS_NEIGHBOR_STALE:
//  379       diagsValue = DiagsStatsTable.NeighborStale;
??ZDiagsGetStatsAttr_14:
        MOV       DPTR,#DiagsStatsTable + 44
        SJMP      ??ZDiagsGetStatsAttr_36
//  380       break;
//  381 
//  382     case ZDIAGS_JOIN_INDICATION:
//  383       diagsValue = DiagsStatsTable.JoinIndication;
??ZDiagsGetStatsAttr_15:
        MOV       DPTR,#DiagsStatsTable + 46
        SJMP      ??ZDiagsGetStatsAttr_36
//  384       break;
//  385 
//  386     case ZDIAGS_CHILD_MOVED:
//  387       diagsValue = DiagsStatsTable.ChildMoved;
??ZDiagsGetStatsAttr_16:
        MOV       DPTR,#DiagsStatsTable + 48
        SJMP      ??ZDiagsGetStatsAttr_36
//  388       break;
//  389 
//  390     case ZDIAGS_NWK_FC_FAILURE:
//  391       diagsValue = DiagsStatsTable.NwkFcFailure;
??ZDiagsGetStatsAttr_17:
        MOV       DPTR,#DiagsStatsTable + 50
        SJMP      ??ZDiagsGetStatsAttr_36
//  392       break;
//  393 
//  394     case ZDIAGS_NWK_DECRYPT_FAILURES:
//  395       diagsValue = DiagsStatsTable.NwkDecryptFailures;
??ZDiagsGetStatsAttr_18:
        MOV       DPTR,#DiagsStatsTable + 52
        SJMP      ??ZDiagsGetStatsAttr_36
//  396       break;
//  397 
//  398     case ZDIAGS_PACKET_BUFFER_ALLOCATE_FAILURES:
//  399       diagsValue = DiagsStatsTable.PacketBufferAllocateFailures;
??ZDiagsGetStatsAttr_19:
        MOV       DPTR,#DiagsStatsTable + 54
        SJMP      ??ZDiagsGetStatsAttr_36
//  400       break;
//  401 
//  402     case ZDIAGS_RELAYED_UCAST:
//  403       diagsValue = DiagsStatsTable.RelayedUcast;
??ZDiagsGetStatsAttr_20:
        MOV       DPTR,#DiagsStatsTable + 56
        SJMP      ??ZDiagsGetStatsAttr_36
//  404       break;
//  405 
//  406     case ZDIAGS_PHY_TO_MAC_QUEUE_LIMIT_REACHED:
//  407       diagsValue = DiagsStatsTable.PhyToMacQueueLimitReached;
??ZDiagsGetStatsAttr_21:
        MOV       DPTR,#DiagsStatsTable + 58
        SJMP      ??ZDiagsGetStatsAttr_36
//  408       break;
//  409 
//  410     case ZDIAGS_PACKET_VALIDATE_DROP_COUNT:
//  411       diagsValue = DiagsStatsTable.PacketValidateDropCount;
??ZDiagsGetStatsAttr_22:
        MOV       DPTR,#DiagsStatsTable + 60
        SJMP      ??ZDiagsGetStatsAttr_36
//  412       break;
//  413 
//  414     // APS Diagnostics
//  415     case ZDIAGS_APS_RX_BCAST:
//  416       diagsValue = DiagsStatsTable.ApsRxBcast;
??ZDiagsGetStatsAttr_23:
        MOV       DPTR,#DiagsStatsTable + 62
        SJMP      ??ZDiagsGetStatsAttr_36
//  417       break;
//  418 
//  419     case ZDIAGS_APS_TX_BCAST:
//  420       diagsValue = DiagsStatsTable.ApsTxBcast;
??ZDiagsGetStatsAttr_24:
        MOV       DPTR,#DiagsStatsTable + 64
        SJMP      ??ZDiagsGetStatsAttr_36
//  421       break;
//  422 
//  423     case ZDIAGS_APS_RX_UCAST:
//  424       diagsValue = DiagsStatsTable.ApsRxUcast;
??ZDiagsGetStatsAttr_25:
        MOV       DPTR,#DiagsStatsTable + 66
        SJMP      ??ZDiagsGetStatsAttr_36
//  425       break;
//  426 
//  427     case ZDIAGS_APS_TX_UCAST_SUCCESS:
//  428       diagsValue = DiagsStatsTable.ApsTxUcastSuccess;
??ZDiagsGetStatsAttr_26:
        MOV       DPTR,#DiagsStatsTable + 68
        SJMP      ??ZDiagsGetStatsAttr_36
//  429       break;
//  430 
//  431     case ZDIAGS_APS_TX_UCAST_RETRY:
//  432       diagsValue = DiagsStatsTable.ApsTxUcastRetry;
??ZDiagsGetStatsAttr_27:
        MOV       DPTR,#DiagsStatsTable + 70
        SJMP      ??ZDiagsGetStatsAttr_36
//  433       break;
//  434 
//  435     case ZDIAGS_APS_TX_UCAST_FAIL:
//  436       diagsValue = DiagsStatsTable.ApsTxUcastFail;
??ZDiagsGetStatsAttr_28:
        MOV       DPTR,#DiagsStatsTable + 72
        SJMP      ??ZDiagsGetStatsAttr_36
//  437       break;
//  438 
//  439     case ZDIAGS_APS_FC_FAILURE:
//  440       diagsValue = DiagsStatsTable.ApsFcFailure;
??ZDiagsGetStatsAttr_29:
        MOV       DPTR,#DiagsStatsTable + 74
        SJMP      ??ZDiagsGetStatsAttr_36
//  441       break;
//  442 
//  443     case ZDIAGS_APS_UNAUTHORIZED_KEY:
//  444       diagsValue = DiagsStatsTable.ApsUnauthorizedKey;
??ZDiagsGetStatsAttr_30:
        MOV       DPTR,#DiagsStatsTable + 76
        SJMP      ??ZDiagsGetStatsAttr_36
//  445       break;
//  446 
//  447     case ZDIAGS_APS_DECRYPT_FAILURES:
//  448       diagsValue = DiagsStatsTable.ApsDecryptFailures;
??ZDiagsGetStatsAttr_31:
        MOV       DPTR,#DiagsStatsTable + 78
        SJMP      ??ZDiagsGetStatsAttr_36
//  449       break;
//  450 
//  451     case ZDIAGS_APS_INVALID_PACKETS:
//  452       diagsValue = DiagsStatsTable.ApsInvalidPackets;
??ZDiagsGetStatsAttr_32:
        MOV       DPTR,#DiagsStatsTable + 80
        SJMP      ??ZDiagsGetStatsAttr_36
//  453       break;
//  454 
//  455     case ZDIAGS_MAC_RETRIES_PER_APS_TX_SUCCESS:
//  456       diagsValue = DiagsStatsTable.MacRetriesPerApsTxSuccess;
??ZDiagsGetStatsAttr_33:
        MOV       DPTR,#DiagsStatsTable + 82
??ZDiagsGetStatsAttr_36:
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  457       break;
//  458 
//  459 
//  460     default:
//  461       break;
//  462   }
//  463 #endif // FEATURE_SYSTEM_STATS
//  464 
//  465   return ( diagsValue );
??ZDiagsGetStatsAttr_34:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?XLOAD_R2345
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        LJMP      ??Subroutine5_0 & 0xFFFF
//  466 }
          CFI EndBlock cfiBlock6

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond7 Using cfiCommon0
          CFI Function ZDiagsGetStatsAttr
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function ZDiagsGetStatsAttr
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function ZDiagsGetStatsAttr
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-2
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function ZDiagsGetStatsAttr
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function ZDiagsGetStatsAttr
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function ZDiagsGetStatsAttr
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function ZDiagsGetStatsAttr
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function ZDiagsGetStatsAttr
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker15 Using cfiCommon1
          CFI (cfiPicker15) NoFunction
          CFI (cfiPicker15) Picker
        LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        RET
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiPicker15
//  467 
//  468 /****************************************************************************
//  469  * @fn          ZDiagsGetStatsTable
//  470  *
//  471  * @brief       Reads the statistics and metrics table
//  472  *
//  473  * @return      pointer to ZDiagStatistics_t structure.
//  474  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  475 DiagStatistics_t *ZDiagsGetStatsTable( void )
ZDiagsGetStatsTable:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function ZDiagsGetStatsTable
        CODE
//  476 {
        FUNCALL ZDiagsGetStatsTable, ZDiagsGetStatsAttr
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsGetStatsTable, ZDiagsGetStatsAttr
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsGetStatsTable, ZDiagsGetStatsAttr
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsGetStatsTable, ZDiagsGetStatsAttr
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsGetStatsTable, ZDiagsGetStatsAttr
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsGetStatsTable, ZDiagsGetStatsAttr
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsGetStatsTable, ZDiagsGetStatsAttr
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsGetStatsTable, ZDiagsGetStatsAttr
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  477 #if defined ( FEATURE_SYSTEM_STATS )
//  478   // call this function to update the DiagsStatsTable with MAC values,
//  479   // the return value does not need to be saved because the function
//  480   // is updating the value in DiagsStatsTable
//  481   (void)ZDiagsGetStatsAttr( ZDIAGS_MAC_RX_CRC_PASS );
        ; Setup parameters for call to function ZDiagsGetStatsAttr
        LCALL     ?Subroutine2 & 0xFFFF
//  482   (void)ZDiagsGetStatsAttr( ZDIAGS_MAC_RX_CRC_FAIL );
//  483   (void)ZDiagsGetStatsAttr( ZDIAGS_MAC_RX_BCAST );
//  484   (void)ZDiagsGetStatsAttr( ZDIAGS_MAC_TX_BCAST );
//  485   (void)ZDiagsGetStatsAttr( ZDIAGS_MAC_RX_UCAST );
//  486   (void)ZDiagsGetStatsAttr( ZDIAGS_MAC_TX_UCAST );
//  487   (void)ZDiagsGetStatsAttr( ZDIAGS_MAC_TX_UCAST_RETRY );
//  488   (void)ZDiagsGetStatsAttr( ZDIAGS_MAC_TX_UCAST_FAIL );
//  489 
//  490   return ( &DiagsStatsTable );
??CrossCallReturnLabel_0:
        MOV       R2,#DiagsStatsTable & 0xff
        MOV       R3,#(DiagsStatsTable >> 8) & 0xff
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
//  491 #else
//  492   return ( NULL );
//  493 #endif  // FEATURE_SYSTEM_STATS
//  494 }
          CFI EndBlock cfiBlock16
//  495 
//  496 /****************************************************************************
//  497  * @fn          ZDiagsRestoreStatsFromNV
//  498  *
//  499  * @brief       Restores the statistics table from NV into the RAM table.
//  500  *
//  501  * @param       none.
//  502  *
//  503  * @return      ZSuccess - if NV data was restored from NV.
//  504  *              ZFailure - Otherwise, NV_OPER_FAILED for failure.
//  505  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  506 uint8 ZDiagsRestoreStatsFromNV( void )
ZDiagsRestoreStatsFromNV:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function ZDiagsRestoreStatsFromNV
        CODE
//  507 {
        FUNCALL ZDiagsRestoreStatsFromNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  508   uint8 retValue = ZFailure;
        MOV       R6,#0x1
//  509 
//  510 #if defined ( FEATURE_SYSTEM_STATS )
//  511 
//  512   // restore diagnostics table from NV into RAM table
//  513   if ( osal_nv_read( ZCD_NV_DIAGNOSTIC_STATS, 0,
//  514                          (uint16)sizeof( DiagStatistics_t ),
//  515                          &DiagsStatsTable ) == SUCCESS )
        ; Setup parameters for call to function osal_nv_read
        MOV       ?V0,#DiagsStatsTable & 0xff
        MOV       ?V1,#(DiagsStatsTable >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0x54
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x50
        MOV       R3,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       A,R1
        JNZ       ??ZDiagsRestoreStatsFromNV_0
//  516   {
//  517     // restore MAC values into the PIB
//  518     /*
//  519     ZMacSetReq( ZMacDiagsRxCrcPass, (uint8 *)&(DiagsStatsTable.MacRxCrcPass) );
//  520     ZMacSetReq( ZMacDiagsRxCrcFail, (uint8 *)&(DiagsStatsTable.MacRxCrcFail) );
//  521     ZMacSetReq( ZMacDiagsRxBcast, (uint8 *)&(DiagsStatsTable.MacRxBcast) );
//  522     ZMacSetReq( ZMacDiagsTxBcast, (uint8 *)&(DiagsStatsTable.MacTxBcast) );
//  523     ZMacSetReq( ZMacDiagsRxUcast, (uint8 *)&(DiagsStatsTable.MacRxUcast) );
//  524     ZMacSetReq( ZMacDiagsTxUcast, (uint8 *)&(DiagsStatsTable.MacTxUcast) );
//  525     ZMacSetReq( ZMacDiagsTxUcastRetry, (uint8 *)&(DiagsStatsTable.MacTxUcastRetry) );
//  526     ZMacSetReq( ZMacDiagsTxUcastFail, (uint8 *)&(DiagsStatsTable.MacTxUcastFail) );
//  527 */
//  528     retValue = ZSuccess;
        MOV       R6,#0x0
//  529   }
//  530 #endif // FEATURE_SYSTEM_STATS
//  531 
//  532   return ( retValue );
??ZDiagsRestoreStatsFromNV_0:
        LJMP      ?Subroutine0 & 0xFFFF
//  533 }
          CFI EndBlock cfiBlock17
//  534 
//  535 /****************************************************************************
//  536  * @fn          ZDiagsSaveStatsToNV
//  537  *
//  538  * @brief       Saves the statistics table from RAM to NV.
//  539  *
//  540  * @param       none.
//  541  *
//  542  * @return      System Time.
//  543  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  544 uint32 ZDiagsSaveStatsToNV( void )
ZDiagsSaveStatsToNV:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function ZDiagsSaveStatsToNV
        CODE
//  545 {
        FUNCALL ZDiagsSaveStatsToNV, ZDiagsGetStatsAttr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsSaveStatsToNV, ZDiagsGetStatsAttr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsSaveStatsToNV, ZDiagsGetStatsAttr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsSaveStatsToNV, ZDiagsGetStatsAttr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsSaveStatsToNV, ZDiagsGetStatsAttr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsSaveStatsToNV, ZDiagsGetStatsAttr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsSaveStatsToNV, ZDiagsGetStatsAttr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsSaveStatsToNV, ZDiagsGetStatsAttr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsSaveStatsToNV, osal_GetSystemClock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDiagsSaveStatsToNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
//  546   uint32 sysClock = 0;
//  547 
//  548 #if defined ( FEATURE_SYSTEM_STATS )
//  549   // call this function to update the DiagsStatsTable with MAC values,
//  550   // the return value does not need to be saved because the function
//  551   // is updating the value in DiagsStatsTable
//  552   (void)ZDiagsGetStatsAttr( ZDIAGS_MAC_RX_CRC_PASS );
        ; Setup parameters for call to function ZDiagsGetStatsAttr
        LCALL     ?Subroutine2 & 0xFFFF
//  553   (void)ZDiagsGetStatsAttr( ZDIAGS_MAC_RX_CRC_FAIL );
//  554   (void)ZDiagsGetStatsAttr( ZDIAGS_MAC_RX_BCAST );
//  555   (void)ZDiagsGetStatsAttr( ZDIAGS_MAC_TX_BCAST );
//  556   (void)ZDiagsGetStatsAttr( ZDIAGS_MAC_RX_UCAST );
//  557   (void)ZDiagsGetStatsAttr( ZDIAGS_MAC_TX_UCAST );
//  558   (void)ZDiagsGetStatsAttr( ZDIAGS_MAC_TX_UCAST_RETRY );
//  559   (void)ZDiagsGetStatsAttr( ZDIAGS_MAC_TX_UCAST_FAIL );
//  560 
//  561   // System Clock when statistics were saved
//  562   sysClock = DiagsStatsTable.SysClock = osal_GetSystemClock();
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function osal_GetSystemClock
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL     ?L_MOV_TO_X
//  563 
//  564   // save the statistics table from RAM to NV
//  565   osal_nv_write( ZCD_NV_DIAGNOSTIC_STATS, 0,
//  566                  sizeof( DiagStatistics_t ), &DiagsStatsTable );
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V4,#DiagsStatsTable & 0xff
        MOV       ?V5,#(DiagsStatsTable >> 8) & 0xff
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       ?V4,#0x54
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x50
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  567 #endif
//  568 
//  569   // returns the System Time
//  570   return ( sysClock );
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R4,?V2
        MOV       R5,?V3
        LJMP      ?Subroutine1 & 0xFFFF
//  571 }
          CFI EndBlock cfiBlock18

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond19 Using cfiCommon0
          CFI Function ZDiagsClearStats
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function ZDiagsSaveStatsToNV
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker21 Using cfiCommon1
          CFI (cfiPicker21) NoFunction
          CFI (cfiPicker21) Picker
        LCALL     `??osal_GetSystemClock::?relay`; Banked call to: osal_GetSystemClock
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
        MOV       DPTR,#DiagsStatsTable
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiPicker21

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond22 Using cfiCommon0
          CFI Function ZDiagsGetStatsTable
          CFI Conditional ??CrossCallReturnLabel_0
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function ZDiagsSaveStatsToNV
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-2
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker24 Using cfiCommon1
          CFI (cfiPicker24) NoFunction
          CFI (cfiPicker24) Picker
        MOV       R2,#0x64
        MOV       R3,#0x0
        LCALL     `??ZDiagsGetStatsAttr::?relay`; Banked call to: ZDiagsGetStatsAttr
        ; Setup parameters for call to function ZDiagsGetStatsAttr
        ; Setup parameters for call to function ZDiagsGetStatsAttr
        MOV       R2,#0x65
        MOV       R3,#0x0
        LCALL     `??ZDiagsGetStatsAttr::?relay`; Banked call to: ZDiagsGetStatsAttr
        ; Setup parameters for call to function ZDiagsGetStatsAttr
        ; Setup parameters for call to function ZDiagsGetStatsAttr
        MOV       R2,#0x66
        MOV       R3,#0x0
        LCALL     `??ZDiagsGetStatsAttr::?relay`; Banked call to: ZDiagsGetStatsAttr
        ; Setup parameters for call to function ZDiagsGetStatsAttr
        ; Setup parameters for call to function ZDiagsGetStatsAttr
        MOV       R2,#0x67
        MOV       R3,#0x0
        LCALL     `??ZDiagsGetStatsAttr::?relay`; Banked call to: ZDiagsGetStatsAttr
        ; Setup parameters for call to function ZDiagsGetStatsAttr
        ; Setup parameters for call to function ZDiagsGetStatsAttr
        MOV       R2,#0x68
        MOV       R3,#0x0
        LCALL     `??ZDiagsGetStatsAttr::?relay`; Banked call to: ZDiagsGetStatsAttr
        ; Setup parameters for call to function ZDiagsGetStatsAttr
        ; Setup parameters for call to function ZDiagsGetStatsAttr
        MOV       R2,#0x69
        MOV       R3,#0x0
        LCALL     `??ZDiagsGetStatsAttr::?relay`; Banked call to: ZDiagsGetStatsAttr
        ; Setup parameters for call to function ZDiagsGetStatsAttr
        ; Setup parameters for call to function ZDiagsGetStatsAttr
        MOV       R2,#0x6a
        MOV       R3,#0x0
        LCALL     `??ZDiagsGetStatsAttr::?relay`; Banked call to: ZDiagsGetStatsAttr
        ; Setup parameters for call to function ZDiagsGetStatsAttr
        ; Setup parameters for call to function ZDiagsGetStatsAttr
        MOV       R2,#0x6b
        MOV       R3,#0x0
        LCALL     `??ZDiagsGetStatsAttr::?relay`; Banked call to: ZDiagsGetStatsAttr
        RET
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiPicker24

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDiagsInitStats::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDiagsInitStats

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDiagsClearStats::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDiagsClearStats

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDiagsUpdateStats::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDiagsUpdateStats

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDiagsGetStatsAttr::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDiagsGetStatsAttr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDiagsGetStatsTable::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDiagsGetStatsTable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDiagsRestoreStatsFromNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDiagsRestoreStatsFromNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDiagsSaveStatsToNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDiagsSaveStatsToNV

        END
//  572 
//  573 /****************************************************************************
//  574 ****************************************************************************/
// 
// 1 217 bytes in segment BANKED_CODE
//    42 bytes in segment BANK_RELAYS
//    84 bytes in segment XDATA_Z
// 
//    42 bytes of CODE     memory
// 1 217 bytes of HUGECODE memory
//    84 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
