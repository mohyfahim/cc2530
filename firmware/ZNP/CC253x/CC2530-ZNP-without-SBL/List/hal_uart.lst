###############################################################################
#
# IAR C/C++ Compiler V10.40.1.7397 for 8051               01/May/2021  14:31:19
# Copyright 2004-2021 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Components\hal\target\CC2530ZNP\hal_uart.c
#    Command line       =  
#        -f C:\Users\asus\AppData\Local\Temp\EW3028.tmp ("E:\Texas
#        Instruments\Z-Stack 3.0.2\Components\hal\target\CC2530ZNP\hal_uart.c"
#        -D BDB_FINDING_BINDING_CAPABILITY_ENABLED=0 -D TC_LINKKEY_JOIN -D
#        HAL_UART_DMA_RX_MAX=128 -D MAXMEMHEAP=2765 -D NWK_MAX_DEVICE_LIST=10
#        -D ZDSECMGR_TC_DEVICE_MAX=30 -D DISABLE_GREENPOWER_BASIC_PROXY -D
#        POWER_SAVING -D FEATURE_SYSTEM_STATS -D MT_GP_CB_FUNC -D ASSERT_RESET
#        -D MAKE_CRC_SHDW -lC "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\List" -lA
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\List"
#        --diag_suppress Pe001,Pa010 -o "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\Obj" -e
#        --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_GP_CB_FUNC -DMT_APP_FUNC -DMT_APP_CNF_FUNC)
#        -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg" -I
#        "E:\Texas Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\Source\" -I "E:\Texas
#        Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\..\Source\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Utilities\BootLoad\Source\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\gp\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\bdb\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  English_USA.1252
#    List file          =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\List\hal_uart.lst
#    Object file        =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-without-SBL\Obj\hal_uart.r51
#
###############################################################################

E:\Texas Instruments\Z-Stack 3.0.2\Components\hal\target\CC2530ZNP\hal_uart.c
      1          /**************************************************************************************************
      2            Filename:       _hal_uart.c
      3            Revised:        $Date: 2009-12-31 18:28:34 -0800 (Thu, 31 Dec 2009) $
      4            Revision:       $Revision: 21422 $
      5          
      6            Description: This file contains the interface to the H/W UART driver.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "hal_board_cfg.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x86
   \   unsigned char volatile __sfr U0CSR
   \                     U0CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x89
   \   unsigned char volatile __sfr P0IFG
   \                     P0IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x95
   \   unsigned char volatile __sfr ST0
   \                     ST0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xab
   \   unsigned char volatile __sfr P0IEN
   \                     P0IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb8
   \   union <unnamed> volatile __sfr _A_IEN1
   \                     _A_IEN1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc2
   \   unsigned char volatile __sfr U0BAUD
   \                     U0BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc4
   \   unsigned char volatile __sfr U0UCR
   \                     U0UCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc5
   \   unsigned char volatile __sfr U0GCR
   \                     U0GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd1
   \   unsigned char volatile __sfr DMAIRQ
   \                     DMAIRQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd6
   \   unsigned char volatile __sfr DMAARM
   \                     DMAARM:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd7
   \   unsigned char volatile __sfr DMAREQ
   \                     DMAREQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     45          #include "hal_defs.h"
     46          #include "hal_types.h"
     47          #include "hal_uart.h"
     48          
     49          /*********************************************************************
     50           * MACROS
     51           */
     52          
     53          /*********************************************************************
     54           * TYPEDEFS
     55           */
     56          
     57          /*********************************************************************
     58           * CONSTANTS
     59           */
     60          
     61          /*********************************************************************
     62           * GLOBAL VARIABLES
     63           */
     64          
     65          /*********************************************************************
     66           * GLOBAL FUNCTIONS
     67           */
     68          
     69          /*********************************************************************
     70           * LOCAL VARIABLES
     71           */
     72          
     73          /*********************************************************************
     74           * LOCAL FUNCTIONS
     75           */
     76          
     77          #if HAL_UART_DMA
     78          #include "_hal_uart_dma.c"

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   static uartDMACfg_t dmaCfg
   \                     dmaCfg:
   \   000000                DS 526
   \   00020E                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTInitDMA(void)
   \                     HalUARTInitDMA:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   53FF3F       ANL       0xff,#0x3f
   \   000007   85FFFF       MOV       0xff,0xff
   \   00000A   53F1FE       ANL       0xf1,#0xfe
   \   00000D   43F30C       ORL       0xf3,#0xc
   \   000010   53F2F3       ANL       0xf2,#0xf3
   \   000013   758680       MOV       0x86,#-0x80
   \   000016   75C480       MOV       0xc4,#-0x80
   \   000019   90....       MOV       DPTR,#dmaCh1234 + 26
   \   00001C   7470         MOV       A,#0x70
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   A3           INC       DPTR
   \   000020   74C1         MOV       A,#-0x3f
   \   000022   F0           MOVX      @DPTR,A
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   541F         ANL       A,#0x1f
   \   000027   F0           MOVX      @DPTR,A
   \   000028   90....       MOV       DPTR,#dmaCh1234 + 30
   \   00002B   740F         MOV       A,#0xf
   \   00002D   F0           MOVX      @DPTR,A
   \   00002E   A3           INC       DPTR
   \   00002F   744A         MOV       A,#0x4a
   \   000031   F0           MOVX      @DPTR,A
   \   000032   90....       MOV       DPTR,#dmaCh1234 + 16
   \   000035   7470         MOV       A,#0x70
   \   000037   F0           MOVX      @DPTR,A
   \   000038   A3           INC       DPTR
   \   000039   74C1         MOV       A,#-0x3f
   \   00003B   F0           MOVX      @DPTR,A
   \   00003C   90....       MOV       DPTR,#dmaCh1234 + 20
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   541F         ANL       A,#0x1f
   \   000042   F0           MOVX      @DPTR,A
   \   000043   90....       MOV       DPTR,#dmaCh1234 + 22
   \   000046   74CE         MOV       A,#-0x32
   \   000048   F0           MOVX      @DPTR,A
   \   000049   A3           INC       DPTR
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   540F         ANL       A,#0xf
   \   00004D   4410         ORL       A,#0x10
   \   00004F   F0           MOVX      @DPTR,A
   \   000050   74..         MOV       A,#(dmaCfg >> 8) & 0xff
   \   000052   90....       MOV       DPTR,#dmaCh1234 + 18
   \   000055   F0           MOVX      @DPTR,A
   \   000056   74..         MOV       A,#dmaCfg & 0xff
   \   000058   A3           INC       DPTR
   \   000059   F0           MOVX      @DPTR,A
   \   00005A   90....       MOV       DPTR,#dmaCh1234 + 21
   \   00005D   7480         MOV       A,#-0x80
   \   00005F   F0           MOVX      @DPTR,A
   \   000060   90....       MOV       DPTR,#dmaCh1234 + 20
   \   000063   E4           CLR       A
   \   000064   F0           MOVX      @DPTR,A
   \   000065   90....       MOV       DPTR,#dmaCh1234 + 23
   \   000068   7412         MOV       A,#0x12
   \   00006A   02....       LJMP      ?Subroutine0 & 0xFFFF
   \   00006D                REQUIRE P2DIR
   \   00006D                REQUIRE PERCFG
   \   00006D                REQUIRE P0SEL
   \   00006D                REQUIRE ADCCFG
   \   00006D                REQUIRE U0CSR
   \   00006D                REQUIRE U0UCR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                REQUIRE ??Subroutine13_0
   \   000001                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTOpenDMA(halUARTCfg_t *)
   \                     HalUARTOpenDMA:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV       A,R2
   \   000005   241B         ADD       A,#0x1b
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F583         MOV       DPH,A
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F8           MOV       R0,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F9           MOV       R1,A
   \   000012   90....       MOV       DPTR,#dmaCfg + 524
   \   000015   E8           MOV       A,R0
   \   000016   F0           MOVX      @DPTR,A
   \   000017   A3           INC       DPTR
   \   000018   E9           MOV       A,R1
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   8A82         MOV       DPL,R2
   \   00001C   8B83         MOV       DPH,R3
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6403         XRL       A,#0x3
   \   000022   600A         JZ        ??HalUARTOpenDMA_0
   \   000024   8A82         MOV       DPL,R2
   \   000026   8B83         MOV       DPH,R3
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   6404         XRL       A,#0x4
   \   00002C   7005         JNZ       ??HalUARTOpenDMA_1
   \                     ??HalUARTOpenDMA_0:
   \   00002E   75C2D8       MOV       0xc2,#-0x28
   \   000031   8003         SJMP      ??HalUARTOpenDMA_2
   \                     ??HalUARTOpenDMA_1:
   \   000033   75C23B       MOV       0xc2,#0x3b
   \                     ??HalUARTOpenDMA_2:
   \   000036   8A82         MOV       DPL,R2
   \   000038   8B83         MOV       DPH,R3
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   600B         JZ        ??HalUARTOpenDMA_3
   \   00003E   14           DEC       A
   \   00003F   6012         JZ        ??HalUARTOpenDMA_4
   \   000041   14           DEC       A
   \   000042   6019         JZ        ??HalUARTOpenDMA_5
   \   000044   14           DEC       A
   \   000045   6020         JZ        ??HalUARTOpenDMA_6
   \   000047   8028         SJMP      ??HalUARTOpenDMA_7
   \                     ??HalUARTOpenDMA_3:
   \   000049   75C508       MOV       0xc5,#0x8
   \   00004C   90....       MOV       DPTR,#dmaCfg + 520
   \   00004F   7423         MOV       A,#0x23
   \   000051   8026         SJMP      ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_4:
   \   000053   75C509       MOV       0xc5,#0x9
   \   000056   90....       MOV       DPTR,#dmaCfg + 520
   \   000059   7412         MOV       A,#0x12
   \   00005B   801C         SJMP      ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_5:
   \   00005D   75C50A       MOV       0xc5,#0xa
   \   000060   90....       MOV       DPTR,#dmaCfg + 520
   \   000063   7409         MOV       A,#0x9
   \   000065   8012         SJMP      ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_6:
   \   000067   75C50A       MOV       0xc5,#0xa
   \   00006A   90....       MOV       DPTR,#dmaCfg + 520
   \   00006D   7406         MOV       A,#0x6
   \   00006F   8008         SJMP      ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_7:
   \   000071   75C50B       MOV       0xc5,#0xb
   \   000074   90....       MOV       DPTR,#dmaCfg + 520
   \   000077   7403         MOV       A,#0x3
   \                     ??HalUARTOpenDMA_8:
   \   000079   F0           MOVX      @DPTR,A
   \   00007A   8A82         MOV       DPL,R2
   \   00007C   8B83         MOV       DPH,R3
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   E0           MOVX      A,@DPTR
   \   000081   6015         JZ        ??HalUARTOpenDMA_9
   \   000083   75C442       MOV       0xc4,#0x42
   \   000086   43F310       ORL       0xf3,#0x10
   \   000089   C285         CLR       0x80.5
   \   00008B   43FD20       ORL       0xfd,#0x20
   \   00008E   5389EF       ANL       0x89,#0xef
   \   000091   53ABEF       ANL       0xab,#0xef
   \   000094   D2BD         SETB      0xb8.5
   \   000096   8003         SJMP      ??HalUARTOpenDMA_10
   \                     ??HalUARTOpenDMA_9:
   \   000098   75C402       MOV       0xc4,#0x2
   \                     ??HalUARTOpenDMA_10:
   \   00009B   9070C1       MOV       DPTR,#0x70c1
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   90....       MOV       DPTR,#dmaCfg
   \   0000A2   F0           MOVX      @DPTR,A
   \   0000A3   A3           INC       DPTR
   \   0000A4   E4           CLR       A
   \   0000A5   F0           MOVX      @DPTR,A
   \   0000A6   75D1F7       MOV       0xd1,#-0x9
   \   0000A9   75D608       MOV       0xd6,#0x8
   \   0000AC                ; Setup parameters for call to function osal_memset
   \   0000AC   FC           MOV       R4,A
   \   0000AD   7D01         MOV       R5,#0x1
   \   0000AF   E5C2         MOV       A,0xc2
   \   0000B1   F4           CPL       A
   \   0000B2   F9           MOV       R1,A
   \   0000B3   7A..         MOV       R2,#dmaCfg & 0xff
   \   0000B5   7B..         MOV       R3,#(dmaCfg >> 8) & 0xff
   \   0000B7   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000BA   438640       ORL       0x86,#0x40
   \   0000BD   90....       MOV       DPTR,#dmaCfg + 523
   \   0000C0   E4           CLR       A
   \   0000C1   F0           MOVX      @DPTR,A
   \   0000C2   90....       MOV       DPTR,#dmaCfg + 522
   \   0000C5   02....       LJMP      ?Subroutine0 & 0xFFFF
   \   0000C8                REQUIRE U0BAUD
   \   0000C8                REQUIRE U0GCR
   \   0000C8                REQUIRE U0UCR
   \   0000C8                REQUIRE P0SEL
   \   0000C8                REQUIRE _A_P0
   \   0000C8                REQUIRE P0DIR
   \   0000C8                REQUIRE P0IFG
   \   0000C8                REQUIRE P0IEN
   \   0000C8                REQUIRE _A_IEN1
   \   0000C8                REQUIRE DMAIRQ
   \   0000C8                REQUIRE DMAARM
   \   0000C8                REQUIRE U0CSR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTReadDMA(uint8 *, uint16)
   \                     HalUARTReadDMA:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   7800         MOV       R0,#0x0
   \   000007   7900         MOV       R1,#0x0
   \   000009   802F         SJMP      ??HalUARTReadDMA_0
   \                     ??HalUARTReadDMA_1:
   \   00000B   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   8A82         MOV       DPL,R2
   \   000011   8B83         MOV       DPH,R3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   AA82         MOV       R2,DPL
   \   000017   AB83         MOV       R3,DPH
   \   000019   AFC2         MOV       R7,0xc2
   \   00001B   EF           MOV       A,R7
   \   00001C   F4           CPL       A
   \   00001D   F5..         MOV       ?V1,A
   \   00001F   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000022   E4           CLR       A
   \   000023   F0           MOVX      @DPTR,A
   \   000024   A3           INC       DPTR
   \   000025   E5..         MOV       A,?V1
   \   000027   F0           MOVX      @DPTR,A
   \   000028   90....       MOV       DPTR,#dmaCfg + 256
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   04           INC       A
   \   00002D   F0           MOVX      @DPTR,A
   \   00002E   C3           CLR       C
   \   00002F   9480         SUBB      A,#-0x80
   \   000031   4002         JC        ??HalUARTReadDMA_2
   \   000033   E4           CLR       A
   \   000034   F0           MOVX      @DPTR,A
   \                     ??HalUARTReadDMA_2:
   \   000035   08           INC       R0
   \   000036   E8           MOV       A,R0
   \   000037   7001         JNZ       ??HalUARTReadDMA_0
   \   000039   09           INC       R1
   \                     ??HalUARTReadDMA_0:
   \   00003A   C3           CLR       C
   \   00003B   E8           MOV       A,R0
   \   00003C   9C           SUBB      A,R4
   \   00003D   E9           MOV       A,R1
   \   00003E   9D           SUBB      A,R5
   \   00003F   5010         JNC       ??HalUARTReadDMA_3
   \   000041   E5C2         MOV       A,0xc2
   \   000043   F5..         MOV       ?V0,A
   \   000045   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   65..         XRL       A,?V0
   \   00004C   7001         JNZ       ??HalUARTReadDMA_4
   \   00004E   E4           CLR       A
   \                     ??HalUARTReadDMA_4:
   \   00004F   60BA         JZ        ??HalUARTReadDMA_1
   \                     ??HalUARTReadDMA_3:
   \   000051   C285         CLR       0x80.5
   \   000053   E8           MOV       A,R0
   \   000054   FA           MOV       R2,A
   \   000055   E9           MOV       A,R1
   \   000056   FB           MOV       R3,A
   \   000057                REQUIRE ?Subroutine1
   \   000057                REQUIRE U0BAUD
   \   000057                REQUIRE _A_P0
   \   000057                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   90....       MOV       DPTR,#dmaCfg + 256
   \   000003   E0           MOVX      A,@DPTR
   \   000004   25E0         ADD       A,0xE0 /* A   */
   \   000006   FE           MOV       R6,A
   \   000007   E4           CLR       A
   \   000008   33           RLC       A
   \   000009   FF           MOV       R7,A
   \   00000A   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   74..         MOV       A,#dmaCfg & 0xff
   \   000002   2E           ADD       A,R6
   \   000003   F582         MOV       DPL,A
   \   000005   74..         MOV       A,#(dmaCfg >> 8) & 0xff
   \   000007   3F           ADDC      A,R7
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTWriteDMA(uint8 *, uint16)
   \                     HalUARTWriteDMA:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   90....       MOV       DPTR,#dmaCfg + 518
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000010   F8           MOV       R0,A
   \   000011   EC           MOV       A,R4
   \   000012   28           ADD       A,R0
   \   000013   F8           MOV       R0,A
   \   000014   E4           CLR       A
   \   000015   3D           ADDC      A,R5
   \   000016   F9           MOV       R1,A
   \   000017   C3           CLR       C
   \   000018   E8           MOV       A,R0
   \   000019   9481         SUBB      A,#-0x7f
   \   00001B   E9           MOV       A,R1
   \   00001C   9400         SUBB      A,#0x0
   \   00001E   4007         JC        ??HalUARTWriteDMA_0
   \   000020   7A00         MOV       R2,#0x0
   \   000022   7B00         MOV       R3,#0x0
   \   000024   02....       LJMP      ??HalUARTWriteDMA_1 & 0xFFFF
   \                     ??HalUARTWriteDMA_0:
   \   000027   A8A8         MOV       R0,0xa8+0x0
   \   000029   C2AF         CLR       0xa8.7
   \   00002B   90....       MOV       DPTR,#dmaCfg + 518
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F5..         MOV       ?V0,A
   \   000031   FA           MOV       R2,A
   \   000032   74..         MOV       A,#(dmaCfg + 4) & 0xff
   \   000034   2A           ADD       A,R2
   \   000035   12....       LCALL     ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000038   F9           MOV       R1,A
   \   000039   E8           MOV       A,R0
   \   00003A   A2E7         MOV       C,0xE0 /* A   */.7
   \   00003C   92AF         MOV       0xa8.7,C
   \   00003E   7A00         MOV       R2,#0x0
   \   000040   7B00         MOV       R3,#0x0
   \   000042   801F         SJMP      ??HalUARTWriteDMA_2
   \                     ??HalUARTWriteDMA_3:
   \   000044   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000047   C0E0         PUSH      A
   \   000049   E5..         MOV       A,?V0
   \   00004B   F5..         MOV       ?V4,A
   \   00004D   75..00       MOV       ?V5,#0x0
   \   000050   7407         MOV       A,#0x7
   \   000052   78..         MOV       R0,#?V4
   \   000054   12....       LCALL     ?S_SHL
   \   000057   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00005A   D0E0         POP       A
   \   00005C   F0           MOVX      @DPTR,A
   \   00005D   09           INC       R1
   \   00005E   0A           INC       R2
   \   00005F   EA           MOV       A,R2
   \   000060   7001         JNZ       ??HalUARTWriteDMA_2
   \   000062   0B           INC       R3
   \                     ??HalUARTWriteDMA_2:
   \   000063   C3           CLR       C
   \   000064   EA           MOV       A,R2
   \   000065   9C           SUBB      A,R4
   \   000066   EB           MOV       A,R3
   \   000067   9D           SUBB      A,R5
   \   000068   40DA         JC        ??HalUARTWriteDMA_3
   \   00006A   A2AF         MOV       C,0xa8.7
   \   00006C   E4           CLR       A
   \   00006D   33           RLC       A
   \   00006E   F8           MOV       R0,A
   \   00006F   C2AF         CLR       0xa8.7
   \   000071   90....       MOV       DPTR,#dmaCfg + 518
   \   000074   E0           MOVX      A,@DPTR
   \   000075   65..         XRL       A,?V0
   \   000077   603F         JZ        ??HalUARTWriteDMA_4
   \   000079   E8           MOV       A,R0
   \   00007A   A2E0         MOV       C,0xE0 /* A   */.0
   \   00007C   92AF         MOV       0xa8.7,C
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   F5..         MOV       ?V0,A
   \   000081   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000084   F9           MOV       R1,A
   \   000085   7A00         MOV       R2,#0x0
   \   000087   7B00         MOV       R3,#0x0
   \   000089   801F         SJMP      ??HalUARTWriteDMA_5
   \                     ??HalUARTWriteDMA_6:
   \   00008B   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00008E   C0E0         PUSH      A
   \   000090   E5..         MOV       A,?V0
   \   000092   F5..         MOV       ?V4,A
   \   000094   75..00       MOV       ?V5,#0x0
   \   000097   7407         MOV       A,#0x7
   \   000099   78..         MOV       R0,#?V4
   \   00009B   12....       LCALL     ?S_SHL
   \   00009E   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000A1   D0E0         POP       A
   \   0000A3   F0           MOVX      @DPTR,A
   \   0000A4   09           INC       R1
   \   0000A5   0A           INC       R2
   \   0000A6   EA           MOV       A,R2
   \   0000A7   7001         JNZ       ??HalUARTWriteDMA_5
   \   0000A9   0B           INC       R3
   \                     ??HalUARTWriteDMA_5:
   \   0000AA   C3           CLR       C
   \   0000AB   EA           MOV       A,R2
   \   0000AC   9C           SUBB      A,R4
   \   0000AD   EB           MOV       A,R3
   \   0000AE   9D           SUBB      A,R5
   \   0000AF   40DA         JC        ??HalUARTWriteDMA_6
   \   0000B1   A2AF         MOV       C,0xa8.7
   \   0000B3   E4           CLR       A
   \   0000B4   33           RLC       A
   \   0000B5   F8           MOV       R0,A
   \   0000B6   C2AF         CLR       0xa8.7
   \                     ??HalUARTWriteDMA_4:
   \   0000B8   AC..         MOV       R4,?V0
   \   0000BA   74..         MOV       A,#(dmaCfg + 4) & 0xff
   \   0000BC   2C           ADD       A,R4
   \   0000BD   F582         MOV       DPL,A
   \   0000BF   E4           CLR       A
   \   0000C0   34..         ADDC      A,#((dmaCfg + 516) >> 8) & 0xff
   \   0000C2   F583         MOV       DPH,A
   \   0000C4   E9           MOV       A,R1
   \   0000C5   F0           MOVX      @DPTR,A
   \   0000C6   7401         MOV       A,#0x1
   \   0000C8   6C           XRL       A,R4
   \   0000C9   FC           MOV       R4,A
   \   0000CA   74..         MOV       A,#(dmaCfg + 4) & 0xff
   \   0000CC   2C           ADD       A,R4
   \   0000CD   12....       LCALL     ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000D0   7006         JNZ       ??HalUARTWriteDMA_7
   \   0000D2   90....       MOV       DPTR,#dmaCfg + 523
   \   0000D5   7401         MOV       A,#0x1
   \   0000D7   F0           MOVX      @DPTR,A
   \                     ??HalUARTWriteDMA_7:
   \   0000D8   E8           MOV       A,R0
   \   0000D9   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000DB   92AF         MOV       0xa8.7,C
   \                     ??HalUARTWriteDMA_1:
   \   0000DD   7F06         MOV       R7,#0x6
   \   0000DF   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   0000E2                REQUIRE _A_IEN0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   EE           MOV       A,R6
   \   000001   2A           ADD       A,R2
   \   000002   F582         MOV       DPL,A
   \   000004   EF           MOV       A,R7
   \   000005   3B           ADDC      A,R3
   \   000006   F583         MOV       DPH,A
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   74..         MOV       A,#(dmaCfg + 4) & 0xff
   \   000002   29           ADD       A,R1
   \   000003   F5..         MOV       ?V2,A
   \   000005   E4           CLR       A
   \   000006   34..         ADDC      A,#((dmaCfg + 260) >> 8) & 0xff
   \   000008   F5..         MOV       ?V3,A
   \   00000A   E5..         MOV       A,?V2
   \   00000C   25..         ADD       A,?V4
   \   00000E   F582         MOV       DPL,A
   \   000010   E5..         MOV       A,?V3
   \   000012   35..         ADDC      A,?V5
   \   000014   F583         MOV       DPH,A
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F8           MOV       R0,A
   \   000001   74..         MOV       A,#(dmaCfg + 4) & 0xff
   \   000003   28           ADD       A,R0
   \   000004                REQUIRE ??Subroutine12_0
   \   000004                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   34..         ADDC      A,#((dmaCfg + 516) >> 8) & 0xff
   \   000005   F583         MOV       DPH,A
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTPollDMA(void)
   \                     HalUARTPollDMA:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7E00         MOV       R6,#0x0
   \   00000C   E5C2         MOV       A,0xc2
   \   00000E   FA           MOV       R2,A
   \   00000F   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000012   6A           XRL       A,R2
   \   000013   7001         JNZ       ??HalUARTPollDMA_0
   \   000015   E4           CLR       A
   \                     ??HalUARTPollDMA_0:
   \   000016   707E         JNZ       ??HalUARTPollDMA_1
   \   000018   90....       MOV       DPTR,#dmaCfg + 256
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F8           MOV       R0,A
   \                     ??HalUARTPollDMA_2:
   \   00001D   E5C2         MOV       A,0xc2
   \   00001F   FC           MOV       R4,A
   \   000020   E8           MOV       A,R0
   \   000021   25E0         ADD       A,0xE0 /* A   */
   \   000023   FA           MOV       R2,A
   \   000024   E4           CLR       A
   \   000025   33           RLC       A
   \   000026   FB           MOV       R3,A
   \   000027   74..         MOV       A,#dmaCfg & 0xff
   \   000029   2A           ADD       A,R2
   \   00002A   F582         MOV       DPL,A
   \   00002C   74..         MOV       A,#(dmaCfg >> 8) & 0xff
   \   00002E   3B           ADDC      A,R3
   \   00002F   F583         MOV       DPH,A
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   6C           XRL       A,R4
   \   000034   7001         JNZ       ??HalUARTPollDMA_3
   \   000036   E4           CLR       A
   \                     ??HalUARTPollDMA_3:
   \   000037   7010         JNZ       ??HalUARTPollDMA_4
   \   000039   08           INC       R0
   \   00003A   E8           MOV       A,R0
   \   00003B   C3           CLR       C
   \   00003C   9480         SUBB      A,#-0x80
   \   00003E   4002         JC        ??HalUARTPollDMA_5
   \   000040   7800         MOV       R0,#0x0
   \                     ??HalUARTPollDMA_5:
   \   000042   90....       MOV       DPTR,#dmaCfg + 256
   \   000045   E0           MOVX      A,@DPTR
   \   000046   68           XRL       A,R0
   \   000047   70D4         JNZ       ??HalUARTPollDMA_2
   \                     ??HalUARTPollDMA_4:
   \   000049   90....       MOV       DPTR,#dmaCfg + 257
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   68           XRL       A,R0
   \   00004E   6011         JZ        ??HalUARTPollDMA_6
   \   000050   E8           MOV       A,R0
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   E0           MOVX      A,@DPTR
   \   000054   7004         JNZ       ??HalUARTPollDMA_7
   \   000056   E595         MOV       A,0x95
   \   000058   A3           INC       DPTR
   \   000059   F0           MOVX      @DPTR,A
   \                     ??HalUARTPollDMA_7:
   \   00005A   90....       MOV       DPTR,#dmaCfg + 258
   \   00005D   7421         MOV       A,#0x21
   \   00005F   8020         SJMP      ??HalUARTPollDMA_8
   \                     ??HalUARTPollDMA_6:
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   601D         JZ        ??HalUARTPollDMA_9
   \   000065   A3           INC       DPTR
   \   000066   E0           MOVX      A,@DPTR
   \   000067   F8           MOV       R0,A
   \   000068   E595         MOV       A,0x95
   \   00006A   C3           CLR       C
   \   00006B   98           SUBB      A,R0
   \   00006C   F8           MOV       R0,A
   \   00006D   90....       MOV       DPTR,#dmaCfg + 258
   \   000070   E0           MOVX      A,@DPTR
   \   000071   F9           MOV       R1,A
   \   000072   E8           MOV       A,R0
   \   000073   C3           CLR       C
   \   000074   99           SUBB      A,R1
   \   000075   5009         JNC       ??HalUARTPollDMA_10
   \   000077   E0           MOVX      A,@DPTR
   \   000078   C3           CLR       C
   \   000079   98           SUBB      A,R0
   \   00007A   F0           MOVX      @DPTR,A
   \   00007B   E595         MOV       A,0x95
   \   00007D   A3           INC       DPTR
   \   00007E   8001         SJMP      ??HalUARTPollDMA_8
   \                     ??HalUARTPollDMA_10:
   \   000080   E4           CLR       A
   \                     ??HalUARTPollDMA_8:
   \   000081   F0           MOVX      @DPTR,A
   \                     ??HalUARTPollDMA_9:
   \   000082                ; Setup parameters for call to function HalUARTRxAvailDMA
   \   000082   12....       LCALL     `??HalUARTRxAvailDMA::?relay`; Banked call to: HalUARTRxAvailDMA
   \   000085   8B..         MOV       ?V1,R3
   \   000087   A9..         MOV       R1,?V1
   \   000089   C3           CLR       C
   \   00008A   EA           MOV       A,R2
   \   00008B   9470         SUBB      A,#0x70
   \   00008D   EB           MOV       A,R3
   \   00008E   9400         SUBB      A,#0x0
   \   000090   400B         JC        ??HalUARTPollDMA_11
   \   000092   7E01         MOV       R6,#0x1
   \   000094   8022         SJMP      ??HalUARTPollDMA_12
   \                     ??HalUARTPollDMA_1:
   \   000096   90....       MOV       DPTR,#dmaCfg + 258
   \   000099   E4           CLR       A
   \   00009A   F0           MOVX      @DPTR,A
   \   00009B   801B         SJMP      ??HalUARTPollDMA_12
   \                     ??HalUARTPollDMA_11:
   \   00009D   C3           CLR       C
   \   00009E   EA           MOV       A,R2
   \   00009F   9430         SUBB      A,#0x30
   \   0000A1   EB           MOV       A,R3
   \   0000A2   9400         SUBB      A,#0x0
   \   0000A4   4006         JC        ??HalUARTPollDMA_13
   \   0000A6   7E02         MOV       R6,#0x2
   \   0000A8   D285         SETB      0x80.5
   \   0000AA   800C         SJMP      ??HalUARTPollDMA_12
   \                     ??HalUARTPollDMA_13:
   \   0000AC   EA           MOV       A,R2
   \   0000AD   49           ORL       A,R1
   \   0000AE   6008         JZ        ??HalUARTPollDMA_12
   \   0000B0   90....       MOV       DPTR,#dmaCfg + 258
   \   0000B3   E0           MOVX      A,@DPTR
   \   0000B4   7002         JNZ       ??HalUARTPollDMA_12
   \   0000B6   7E04         MOV       R6,#0x4
   \                     ??HalUARTPollDMA_12:
   \   0000B8   90....       MOV       DPTR,#dmaCfg + 519
   \   0000BB   E0           MOVX      A,@DPTR
   \   0000BC   6006         JZ        ??HalUARTPollDMA_14
   \   0000BE   E4           CLR       A
   \   0000BF   F0           MOVX      @DPTR,A
   \   0000C0   EE           MOV       A,R6
   \   0000C1   D2E4         SETB      0xE0 /* A   */.4
   \   0000C3   FE           MOV       R6,A
   \                     ??HalUARTPollDMA_14:
   \   0000C4   90....       MOV       DPTR,#dmaCfg + 522
   \   0000C7   E0           MOVX      A,@DPTR
   \   0000C8   6018         JZ        ??HalUARTPollDMA_15
   \   0000CA   A895         MOV       R0,0x95+0x0
   \   0000CC   90....       MOV       DPTR,#dmaCfg + 521
   \   0000CF   E0           MOVX      A,@DPTR
   \   0000D0   F9           MOV       R1,A
   \   0000D1   E8           MOV       A,R0
   \   0000D2   C3           CLR       C
   \   0000D3   99           SUBB      A,R1
   \   0000D4   F8           MOV       R0,A
   \   0000D5   90....       MOV       DPTR,#dmaCfg + 520
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   C3           CLR       C
   \   0000DA   98           SUBB      A,R0
   \   0000DB   5005         JNC       ??HalUARTPollDMA_15
   \   0000DD   90....       MOV       DPTR,#dmaCfg + 522
   \   0000E0   E4           CLR       A
   \   0000E1   F0           MOVX      @DPTR,A
   \                     ??HalUARTPollDMA_15:
   \   0000E2   90....       MOV       DPTR,#dmaCfg + 523
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   6055         JZ        ??HalUARTPollDMA_16
   \   0000E8   90....       MOV       DPTR,#dmaCfg + 522
   \   0000EB   E0           MOVX      A,@DPTR
   \   0000EC   704F         JNZ       ??HalUARTPollDMA_16
   \   0000EE   A3           INC       DPTR
   \   0000EF   E4           CLR       A
   \   0000F0   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000F3   12....       LCALL     ?S_SHL
   \   0000F6   74..         MOV       A,#(dmaCfg + 4) & 0xff
   \   0000F8   25..         ADD       A,?V0
   \   0000FA   74..         MOV       A,#((dmaCfg + 260) >> 8) & 0xff
   \   0000FC   35..         ADDC      A,?V1
   \   0000FE   90....       MOV       DPTR,#dmaCh1234 + 24
   \   000101   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000104   12....       LCALL     ?S_SHL
   \   000107   74..         MOV       A,#(dmaCfg + 4) & 0xff
   \   000109   25..         ADD       A,?V0
   \   00010B   90....       MOV       DPTR,#dmaCh1234 + 25
   \   00010E   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000111   90....       MOV       DPTR,#dmaCh1234 + 29
   \   000114   F0           MOVX      @DPTR,A
   \   000115   90....       MOV       DPTR,#dmaCh1234 + 28
   \   000118   E0           MOVX      A,@DPTR
   \   000119   54E0         ANL       A,#0xe0
   \   00011B   F0           MOVX      @DPTR,A
   \   00011C   90....       MOV       DPTR,#dmaCfg + 518
   \   00011F   E0           MOVX      A,@DPTR
   \   000120   E0           MOVX      A,@DPTR
   \   000121   6401         XRL       A,#0x1
   \   000123   F0           MOVX      @DPTR,A
   \   000124   A2AF         MOV       C,0xa8.7
   \   000126   E4           CLR       A
   \   000127   33           RLC       A
   \   000128   F8           MOV       R0,A
   \   000129   C2AF         CLR       0xa8.7
   \   00012B   75D610       MOV       0xd6,#0x10
   \                     ??HalUARTPollDMA_17:
   \   00012E   00           NOP
   \   00012F   E5D6         MOV       A,0xd6
   \   000131   A2E4         MOV       C,0xE0 /* A   */.4
   \   000133   50F9         JNC       ??HalUARTPollDMA_17
   \   000135   75D1EF       MOV       0xd1,#-0x11
   \   000138   75D710       MOV       0xd7,#0x10
   \   00013B   802A         SJMP      ??HalUARTPollDMA_18
   \                     ??HalUARTPollDMA_16:
   \   00013D   A2AF         MOV       C,0xa8.7
   \   00013F   E4           CLR       A
   \   000140   33           RLC       A
   \   000141   F8           MOV       R0,A
   \   000142   C2AF         CLR       0xa8.7
   \   000144   90....       MOV       DPTR,#dmaCfg + 518
   \   000147   E0           MOVX      A,@DPTR
   \   000148   FA           MOV       R2,A
   \   000149   74..         MOV       A,#(dmaCfg + 4) & 0xff
   \   00014B   2A           ADD       A,R2
   \   00014C   12....       LCALL     ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00014F   6016         JZ        ??HalUARTPollDMA_18
   \   000151   E5D6         MOV       A,0xd6
   \   000153   A2E4         MOV       C,0xE0 /* A   */.4
   \   000155   4010         JC        ??HalUARTPollDMA_18
   \   000157   E5D1         MOV       A,0xd1
   \   000159   A2E4         MOV       C,0xE0 /* A   */.4
   \   00015B   400A         JC        ??HalUARTPollDMA_18
   \   00015D   E8           MOV       A,R0
   \   00015E   A2E0         MOV       C,0xE0 /* A   */.0
   \   000160   92AF         MOV       0xa8.7,C
   \   000162                ; Setup parameters for call to function HalUARTIsrDMA
   \   000162   12....       LCALL     `??HalUARTIsrDMA::?relay`; Banked call to: HalUARTIsrDMA
   \   000165   8005         SJMP      ??HalUARTPollDMA_19
   \                     ??HalUARTPollDMA_18:
   \   000167   E8           MOV       A,R0
   \   000168   A2E0         MOV       C,0xE0 /* A   */.0
   \   00016A   92AF         MOV       0xa8.7,C
   \                     ??HalUARTPollDMA_19:
   \   00016C   EE           MOV       A,R6
   \   00016D   6018         JZ        ??HalUARTPollDMA_20
   \   00016F   90....       MOV       DPTR,#dmaCfg + 524
   \   000172   E0           MOVX      A,@DPTR
   \   000173   F8           MOV       R0,A
   \   000174   A3           INC       DPTR
   \   000175   E0           MOVX      A,@DPTR
   \   000176   F9           MOV       R1,A
   \   000177   E8           MOV       A,R0
   \   000178   49           ORL       A,R1
   \   000179   600C         JZ        ??HalUARTPollDMA_20
   \   00017B                ; Setup parameters for indirect call
   \   00017B   EE           MOV       A,R6
   \   00017C   FA           MOV       R2,A
   \   00017D   7900         MOV       R1,#0x0
   \   00017F   E0           MOVX      A,@DPTR
   \   000180   F583         MOV       DPH,A
   \   000182   8882         MOV       DPL,R0
   \   000184   12....       LCALL     ?CALL_IND
   \                     ??HalUARTPollDMA_20:
   \   000187   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00018A   E0           MOVX      A,@DPTR
   \   00018B   6402         XRL       A,#0x2
   \   00018D   704F         JNZ       ??HalUARTPollDMA_21
   \   00018F   E586         MOV       A,0x86
   \   000191   A2E0         MOV       C,0xE0 /* A   */.0
   \   000193   4049         JC        ??HalUARTPollDMA_21
   \   000195   A284         MOV       C,0x80.4
   \   000197   5045         JNC       ??HalUARTPollDMA_21
   \   000199   90....       MOV       DPTR,#??znpUartActiveShdw
   \   00019C   E0           MOVX      A,@DPTR
   \   00019D   606A         JZ        ??HalUARTPollDMA_22
   \   00019F                ; Setup parameters for call to function ZMacGetReq
   \   00019F   AA..         MOV       R2,?XSP + 0
   \   0001A1   AB..         MOV       R3,?XSP + 1
   \   0001A3   7952         MOV       R1,#0x52
   \   0001A5   12....       LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
   \   0001A8   85..82       MOV       DPL,?XSP + 0
   \   0001AB   85..83       MOV       DPH,?XSP + 1
   \   0001AE   E0           MOVX      A,@DPTR
   \   0001AF   7058         JNZ       ??HalUARTPollDMA_22
   \   0001B1   90....       MOV       DPTR,#??znpUartActiveShdw
   \   0001B4   E4           CLR       A
   \   0001B5   F0           MOVX      @DPTR,A
   \   0001B6                ; Setup parameters for call to function osal_start_timerEx
   \   0001B6   90....       MOV       DPTR,#__Constant_a
   \   0001B9   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0001BC   7A80         MOV       R2,#-0x80
   \   0001BE   7B00         MOV       R3,#0x0
   \   0001C0   90....       MOV       DPTR,#MT_TaskID
   \   0001C3   E0           MOVX      A,@DPTR
   \   0001C4   F9           MOV       R1,A
   \   0001C5   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0001C8   7404         MOV       A,#0x4
   \   0001CA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001CD   E9           MOV       A,R1
   \   0001CE   6039         JZ        ??HalUARTPollDMA_22
   \   0001D0                ; Setup parameters for call to function osal_set_event
   \   0001D0   7A80         MOV       R2,#-0x80
   \   0001D2   7B00         MOV       R3,#0x0
   \   0001D4   90....       MOV       DPTR,#MT_TaskID
   \   0001D7   E0           MOVX      A,@DPTR
   \   0001D8   F9           MOV       R1,A
   \   0001D9   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   0001DC   802B         SJMP      ??HalUARTPollDMA_22
   \                     ??HalUARTPollDMA_21:
   \   0001DE   90....       MOV       DPTR,#??znpUartActiveShdw
   \   0001E1   E0           MOVX      A,@DPTR
   \   0001E2   7025         JNZ       ??HalUARTPollDMA_22
   \   0001E4   7401         MOV       A,#0x1
   \   0001E6   F0           MOVX      @DPTR,A
   \   0001E7                ; Setup parameters for call to function osal_stop_timerEx
   \   0001E7   7A80         MOV       R2,#-0x80
   \   0001E9   7B00         MOV       R3,#0x0
   \   0001EB   90....       MOV       DPTR,#MT_TaskID
   \   0001EE   E0           MOVX      A,@DPTR
   \   0001EF   F9           MOV       R1,A
   \   0001F0   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   0001F3                ; Setup parameters for call to function osal_clear_event
   \   0001F3   7A80         MOV       R2,#-0x80
   \   0001F5   7B00         MOV       R3,#0x0
   \   0001F7   90....       MOV       DPTR,#MT_TaskID
   \   0001FA   E0           MOVX      A,@DPTR
   \   0001FB   F9           MOV       R1,A
   \   0001FC   12....       LCALL     `??osal_clear_event::?relay`; Banked call to: osal_clear_event
   \   0001FF                ; Setup parameters for call to function osal_pwrmgr_task_state
   \   0001FF   7A01         MOV       R2,#0x1
   \   000201   90....       MOV       DPTR,#MT_TaskID
   \   000204   E0           MOVX      A,@DPTR
   \   000205   F9           MOV       R1,A
   \   000206   12....       LCALL     `??osal_pwrmgr_task_state::?relay`; Banked call to: osal_pwrmgr_task_state
   \                     ??HalUARTPollDMA_22:
   \   000209   7401         MOV       A,#0x1
   \   00020B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00020E   02....       LJMP      ?Subroutine1 & 0xFFFF
   \   000211                REQUIRE U0BAUD
   \   000211                REQUIRE ST0
   \   000211                REQUIRE _A_P0
   \   000211                REQUIRE _A_IEN0
   \   000211                REQUIRE DMAARM
   \   000211                REQUIRE DMAIRQ
   \   000211                REQUIRE DMAREQ
   \   000211                REQUIRE U0CSR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#dmaCfg + 518
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V0,A
   \   000007   75..00       MOV       ?V1,#0x0
   \   00000A   7407         MOV       A,#0x7
   \   00000C   78..         MOV       R0,#?V0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   90....       MOV       DPTR,#dmaCfg + 256
   \   000003   E0           MOVX      A,@DPTR
   \   000004   25E0         ADD       A,0xE0 /* A   */
   \   000006   F8           MOV       R0,A
   \   000007   E4           CLR       A
   \   000008   33           RLC       A
   \   000009   F9           MOV       R1,A
   \   00000A   74..         MOV       A,#dmaCfg & 0xff
   \   00000C   28           ADD       A,R0
   \   00000D   F582         MOV       DPL,A
   \   00000F   74..         MOV       A,#(dmaCfg >> 8) & 0xff
   \   000011   39           ADDC      A,R1
   \   000012   F583         MOV       DPH,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#dmaCfg + 518
   \   000004   E0           MOVX      A,@DPTR
   \   000005   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F8           MOV       R0,A
   \   000001   74..         MOV       A,#(dmaCfg + 4) & 0xff
   \   000003   28           ADD       A,R0
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   34..         ADDC      A,#((dmaCfg + 516) >> 8) & 0xff
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   uint8 HalUARTPollDMA::znpUartActiveShdw
   \                     ??znpUartActiveShdw:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTRxAvailDMA(void)
   \                     HalUARTRxAvailDMA:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   7A00         MOV       R2,#0x0
   \   000007   7B00         MOV       R3,#0x0
   \   000009   E5C2         MOV       A,0xc2
   \   00000B   FC           MOV       R4,A
   \   00000C   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00000F   F9           MOV       R1,A
   \   000010   E4           CLR       A
   \   000011   C9           XCH       A,R1
   \   000012   6C           XRL       A,R4
   \   000013   7001         JNZ       ??HalUARTRxAvailDMA_0
   \   000015   E4           CLR       A
   \                     ??HalUARTRxAvailDMA_0:
   \   000016   7033         JNZ       ??HalUARTRxAvailDMA_1
   \   000018   7800         MOV       R0,#0x0
   \                     ??HalUARTRxAvailDMA_2:
   \   00001A   E5C2         MOV       A,0xc2
   \   00001C   FE           MOV       R6,A
   \   00001D   E8           MOV       A,R0
   \   00001E   FC           MOV       R4,A
   \   00001F   E9           MOV       A,R1
   \   000020   FD           MOV       R5,A
   \   000021   EC           MOV       A,R4
   \   000022   2C           ADD       A,R4
   \   000023   FC           MOV       R4,A
   \   000024   ED           MOV       A,R5
   \   000025   33           RLC       A
   \   000026   FD           MOV       R5,A
   \   000027   74..         MOV       A,#dmaCfg & 0xff
   \   000029   2C           ADD       A,R4
   \   00002A   F582         MOV       DPL,A
   \   00002C   74..         MOV       A,#(dmaCfg >> 8) & 0xff
   \   00002E   3D           ADDC      A,R5
   \   00002F   F583         MOV       DPH,A
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   6E           XRL       A,R6
   \   000034   7001         JNZ       ??HalUARTRxAvailDMA_3
   \   000036   E4           CLR       A
   \                     ??HalUARTRxAvailDMA_3:
   \   000037   7005         JNZ       ??HalUARTRxAvailDMA_4
   \   000039   0A           INC       R2
   \   00003A   EA           MOV       A,R2
   \   00003B   7001         JNZ       ??HalUARTRxAvailDMA_4
   \   00003D   0B           INC       R3
   \                     ??HalUARTRxAvailDMA_4:
   \   00003E   08           INC       R0
   \   00003F   E8           MOV       A,R0
   \   000040   7001         JNZ       ??HalUARTRxAvailDMA_5
   \   000042   09           INC       R1
   \                     ??HalUARTRxAvailDMA_5:
   \   000043   C3           CLR       C
   \   000044   9480         SUBB      A,#-0x80
   \   000046   E9           MOV       A,R1
   \   000047   9400         SUBB      A,#0x0
   \   000049   40CF         JC        ??HalUARTRxAvailDMA_2
   \                     ??HalUARTRxAvailDMA_1:
   \   00004B   02....       LJMP      ?Subroutine2 & 0xFFFF
   \   00004E                REQUIRE U0BAUD

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void HalUARTIsrDMA(void)
   \                     HalUARTIsrDMA:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   75D1EF       MOV       0xd1,#-0x11
   \   000007   90....       MOV       DPTR,#dmaCfg + 518
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   6401         XRL       A,#0x1
   \   00000D   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000010   E4           CLR       A
   \   000011   F0           MOVX      @DPTR,A
   \   000012   90....       MOV       DPTR,#dmaCfg + 519
   \   000015   04           INC       A
   \   000016   F0           MOVX      @DPTR,A
   \   000017   E595         MOV       A,0x95
   \   000019   90....       MOV       DPTR,#dmaCfg + 521
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   A3           INC       DPTR
   \   00001E   7401         MOV       A,#0x1
   \   000020   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000023   6006         JZ        ??HalUARTIsrDMA_0
   \   000025   90....       MOV       DPTR,#dmaCfg + 523
   \   000028   7401         MOV       A,#0x1
   \   00002A   F0           MOVX      @DPTR,A
   \                     ??HalUARTIsrDMA_0:
   \   00002B   80..         SJMP      ??Subroutine13_0
   \   00002D                REQUIRE DMAIRQ
   \   00002D                REQUIRE ST0
     79          #endif
     80          #if HAL_UART_ISR
     81          #include "_hal_uart_isr.c"
     82          #endif
     83          #if HAL_UART_USB
     84          #include "_hal_uart_usb.c"
     85          #endif
     86          
     87          /******************************************************************************
     88           * @fn      HalUARTInit
     89           *
     90           * @brief   Initialize the UART
     91           *
     92           * @param   none
     93           *
     94           * @return  none
     95           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     96          void HalUARTInit(void)
   \                     HalUARTInit:
     97          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     98            if (ZNP_CFG1_SPI == znpCfg1)
   \   000004   90....       MOV       DPTR,#znpCfg1
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   6003         JZ        ??HalUARTInit_0
     99            {
    100              return;
    101            }
    102          
    103          #if HAL_UART_DMA
    104            HalUARTInitDMA();
   \   00000C                ; Setup parameters for call to function HalUARTInitDMA
   \   00000C   12....       LCALL     `??HalUARTInitDMA::?relay`; Banked call to: HalUARTInitDMA
    105          #endif
    106          #if HAL_UART_ISR
    107            HalUARTInitISR();
    108          #endif
    109          #if HAL_UART_USB
    110            HalUARTInitUSB();
    111          #endif
    112          }
   \                     ??HalUARTInit_0:
   \   00000F   80..         SJMP      ??Subroutine13_0
    113          
    114          /******************************************************************************
    115           * @fn      HalUARTOpen
    116           *
    117           * @brief   Open a port according tp the configuration specified by parameter.
    118           *
    119           * @param   port   - UART port
    120           *          config - contains configuration information
    121           *
    122           * @return  Status of the function call
    123           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    124          uint8 HalUARTOpen(uint8 port, halUARTCfg_t *config)
   \                     HalUARTOpen:
    125          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    126            (void)port;
    127            (void)config;
    128          
    129          #if (HAL_UART_DMA == 1)
    130            if (port == HAL_UART_PORT_0)  HalUARTOpenDMA(config);
   \   000006   7003         JNZ       ??HalUARTOpen_0
   \   000008                ; Setup parameters for call to function HalUARTOpenDMA
   \   000008   12....       LCALL     `??HalUARTOpenDMA::?relay`; Banked call to: HalUARTOpenDMA
    131          #endif
    132          #if (HAL_UART_DMA == 2)
    133            if (port == HAL_UART_PORT_1)  HalUARTOpenDMA(config);
    134          #endif
    135          #if (HAL_UART_ISR == 1)
    136            if (port == HAL_UART_PORT_0)  HalUARTOpenISR(config);
    137          #endif
    138          #if (HAL_UART_ISR == 2)
    139            if (port == HAL_UART_PORT_1)  HalUARTOpenISR(config);
    140          #endif
    141          #if (HAL_UART_USB)
    142            HalUARTOpenUSB(config);
    143          #endif
    144            
    145            return HAL_UART_SUCCESS;
   \                     ??HalUARTOpen_0:
   \   00000B   7900         MOV       R1,#0x0
   \   00000D   80..         SJMP      ?Subroutine2
    146          }
    147          
    148          /*****************************************************************************
    149           * @fn      HalUARTRead
    150           *
    151           * @brief   Read a buffer from the UART
    152           *
    153           * @param   port - USART module designation
    154           *          buf  - valid data buffer at least 'len' bytes in size
    155           *          len  - max length number of bytes to copy to 'buf'
    156           *
    157           * @return  length of buffer that was read
    158           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    159          uint16 HalUARTRead(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTRead:
    160          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    161            (void)port;
    162            (void)buf;
    163            (void)len;
    164          
    165          #if (HAL_UART_DMA == 1)
    166            if (port == HAL_UART_PORT_0)  return HalUARTReadDMA(buf, len);
   \   000006   7005         JNZ       ??HalUARTRead_0
   \   000008                ; Setup parameters for call to function HalUARTReadDMA
   \   000008   12....       LCALL     `??HalUARTReadDMA::?relay`; Banked call to: HalUARTReadDMA
   \   00000B   8004         SJMP      ??HalUARTRead_1
    167          #endif
    168          #if (HAL_UART_DMA == 2)
    169            if (port == HAL_UART_PORT_1)  return HalUARTReadDMA(buf, len);
    170          #endif
    171          #if (HAL_UART_ISR == 1)
    172            if (port == HAL_UART_PORT_0)  return HalUARTReadISR(buf, len);
    173          #endif
    174          #if (HAL_UART_ISR == 2)
    175            if (port == HAL_UART_PORT_1)  return HalUARTReadISR(buf, len);
    176          #endif
    177          
    178          #if HAL_UART_USB
    179            return HalUARTRx(buf, len);
    180          #else
    181            return 0;
   \                     ??HalUARTRead_0:
   \   00000D   7A00         MOV       R2,#0x0
   \   00000F   7B00         MOV       R3,#0x0
   \                     ??HalUARTRead_1:
   \   000011                REQUIRE ?Subroutine2
   \   000011                ; // Fall through to label ?Subroutine2
    182          #endif
    183          }
    184          
    185          /******************************************************************************
    186           * @fn      HalUARTWrite
    187           *
    188           * @brief   Write a buffer to the UART.
    189           *
    190           * @param   port - UART port
    191           *          buf  - pointer to the buffer that will be written, not freed
    192           *          len  - length of
    193           *
    194           * @return  length of the buffer that was sent
    195           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    196          uint16 HalUARTWrite(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTWrite:
    197          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    198            (void)port;
    199            (void)buf;
    200            (void)len;
    201          
    202          #if (HAL_UART_DMA == 1)
    203            if (port == HAL_UART_PORT_0)  return HalUARTWriteDMA(buf, len);
   \   000006   7005         JNZ       ??HalUARTWrite_0
   \   000008                ; Setup parameters for call to function HalUARTWriteDMA
   \   000008   12....       LCALL     `??HalUARTWriteDMA::?relay`; Banked call to: HalUARTWriteDMA
   \   00000B   8004         SJMP      ??HalUARTWrite_1
    204          #endif
    205          #if (HAL_UART_DMA == 2)
    206            if (port == HAL_UART_PORT_1)  return HalUARTWriteDMA(buf, len);
    207          #endif
    208          #if (HAL_UART_ISR == 1)
    209            if (port == HAL_UART_PORT_0)  return HalUARTWriteISR(buf, len);
    210          #endif
    211          #if (HAL_UART_ISR == 2)
    212            if (port == HAL_UART_PORT_1)  return HalUARTWriteISR(buf, len);
    213          #endif
    214          
    215          #if HAL_UART_USB
    216            HalUARTTx(buf, len);
    217            return len;
    218          #else
    219            return 0;
   \                     ??HalUARTWrite_0:
   \   00000D   7A00         MOV       R2,#0x0
   \   00000F   7B00         MOV       R3,#0x0
   \                     ??HalUARTWrite_1:
   \   000011   80..         SJMP      ?Subroutine2
    220          #endif
    221          }
    222          
    223          /******************************************************************************
    224           * @fn      HalUARTSuspend
    225           *
    226           * @brief   Suspend UART hardware before entering PM mode 1, 2 or 3.
    227           *
    228           * @param   None
    229           *
    230           * @return  None
    231           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    232          void HalUARTSuspend( void )
   \                     HalUARTSuspend:
    233          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    234          #if HAL_UART_DMA
    235            HalUARTSuspendDMA();
   \   000000   D285         SETB      0x80.5
   \   000002   5386BF       ANL       0x86,#0xbf
   \   000005   43AB10       ORL       0xab,#0x10
    236          #endif
    237          #if HAL_UART_ISR
    238            HalUARTSuspendISR();
    239          #endif
    240          }
   \   000008   02....       LJMP      ?BRET
   \   00000B                REQUIRE _A_P0
   \   00000B                REQUIRE U0CSR
   \   00000B                REQUIRE P0IEN
    241          
    242          /******************************************************************************
    243           * @fn      HalUARTResume
    244           *
    245           * @brief   Resume UART hardware after exiting PM mode 1, 2 or 3.
    246           *
    247           * @param   None
    248           *
    249           * @return  None
    250           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    251          void HalUARTResume( void )
   \                     HalUARTResume:
    252          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    253          #if HAL_UART_DMA
    254            HalUARTResumeDMA();
   \   000000   53ABEF       ANL       0xab,#0xef
   \   000003   43C480       ORL       0xc4,#0x80
   \   000006   438640       ORL       0x86,#0x40
   \   000009   C285         CLR       0x80.5
    255          #endif
    256          #if HAL_UART_ISR
    257            HalUARTResumeISR();
    258          #endif
    259          }
   \   00000B   02....       LJMP      ?BRET
   \   00000E                REQUIRE P0IEN
   \   00000E                REQUIRE U0UCR
   \   00000E                REQUIRE U0CSR
   \   00000E                REQUIRE _A_P0
    260          
    261          /***************************************************************************************************
    262           * @fn      HalUARTPoll
    263           *
    264           * @brief   Poll the UART.
    265           *
    266           * @param   none
    267           *
    268           * @return  none
    269           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    270          void HalUARTPoll(void)
   \                     HalUARTPoll:
    271          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    272            if (ZNP_CFG1_SPI == znpCfg1)
   \   000004   90....       MOV       DPTR,#znpCfg1
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   6003         JZ        ??HalUARTPoll_0
    273            {
    274              return;
    275            }
    276          
    277          #if HAL_UART_DMA
    278            HalUARTPollDMA();
   \   00000C                ; Setup parameters for call to function HalUARTPollDMA
   \   00000C   12....       LCALL     `??HalUARTPollDMA::?relay`; Banked call to: HalUARTPollDMA
    279          #endif
    280          #if HAL_UART_ISR
    281            HalUARTPollISR();
    282          #endif
    283          #if HAL_UART_USB
    284            HalUARTPollUSB();
    285          #endif
    286          }
   \                     ??HalUARTPoll_0:
   \   00000F   80..         SJMP      ??Subroutine13_0
    287          
    288          /**************************************************************************************************
    289           * @fn      Hal_UART_RxBufLen()
    290           *
    291           * @brief   Calculate Rx Buffer length - the number of bytes in the buffer.
    292           *
    293           * @param   port - UART port
    294           *
    295           * @return  length of current Rx Buffer
    296           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    297          uint16 Hal_UART_RxBufLen( uint8 port )
   \                     Hal_UART_RxBufLen:
    298          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    299            (void)port;
    300          
    301          #if (HAL_UART_DMA == 1)
    302            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailDMA();
   \   000006   7005         JNZ       ??Hal_UART_RxBufLen_0
   \   000008                ; Setup parameters for call to function HalUARTRxAvailDMA
   \   000008   12....       LCALL     `??HalUARTRxAvailDMA::?relay`; Banked call to: HalUARTRxAvailDMA
   \   00000B   8004         SJMP      ??Hal_UART_RxBufLen_1
    303          #endif
    304          #if (HAL_UART_DMA == 2)
    305            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailDMA();
    306          #endif
    307          #if (HAL_UART_ISR == 1)
    308            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailISR();
    309          #endif
    310          #if (HAL_UART_ISR == 2)
    311            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailISR();
    312          #endif
    313          #if HAL_UART_USB
    314            return HalUARTRxAvailUSB();
    315          #else
    316            return 0;
   \                     ??Hal_UART_RxBufLen_0:
   \   00000D   7A00         MOV       R2,#0x0
   \   00000F   7B00         MOV       R3,#0x0
   \                     ??Hal_UART_RxBufLen_1:
   \   000011   80..         SJMP      ?Subroutine2
    317          #endif
    318          }

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_a:
   \   000000   0A000000     DD 10
    319          
    320          /******************************************************************************
    321          ******************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   HalUARTInit
        2      0   -> HalUARTInitDMA
      2      0   HalUARTInitDMA
      2     11   HalUARTIsrDMA
      0      9   HalUARTOpen
        0      9   -> HalUARTOpenDMA
      2      9   HalUARTOpenDMA
        2      0   -> osal_memset
      2      0   HalUARTPoll
        2      0   -> HalUARTPollDMA
      0     15   HalUARTPollDMA
        0     11   -> HalUARTIsrDMA
        0     11   -> HalUARTRxAvailDMA
        0     11   -> ZMacGetReq
        0     11   -> osal_clear_event
        0     11   -> osal_pwrmgr_task_state
        0     11   -> osal_set_event
        0     15   -> osal_start_timerEx
        0     11   -> osal_stop_timerEx
      0      9   HalUARTRead
        0      9   -> HalUARTReadDMA
      1     19   HalUARTReadDMA
      0      0   HalUARTResume
      0     20   HalUARTRxAvailDMA
      0      0   HalUARTSuspend
      0      9   HalUARTWrite
        0      9   -> HalUARTWriteDMA
      1     23   HalUARTWriteDMA
      0      9   Hal_UART_RxBufLen
        0      9   -> HalUARTRxAvailDMA


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       9  ??Subroutine12_0
       7  ??Subroutine13_0
       1  ?Subroutine0
       5  ?Subroutine1
      11  ?Subroutine10
      12  ?Subroutine11
       5  ?Subroutine2
      10  ?Subroutine3
      15  ?Subroutine4
      23  ?Subroutine5
      14  ?Subroutine6
      23  ?Subroutine7
       4  ?Subroutine8
      10  ?Subroutine9
       1  ADCCFG
       1  DMAARM
       1  DMAIRQ
       1  DMAREQ
      17  HalUARTInit
     109  HalUARTInitDMA
      45  HalUARTIsrDMA
      15  HalUARTOpen
     200  HalUARTOpenDMA
      17  HalUARTPoll
     529  HalUARTPollDMA
      17  HalUARTRead
      87  HalUARTReadDMA
      14  HalUARTResume
      78  HalUARTRxAvailDMA
      11  HalUARTSuspend
      19  HalUARTWrite
     226  HalUARTWriteDMA
      19  Hal_UART_RxBufLen
       1  P0DIR
       1  P0IEN
       1  P0IFG
       1  P0SEL
       1  P2DIR
       1  PERCFG
       1  ST0
       1  U0BAUD
       1  U0CSR
       1  U0GCR
       1  U0UCR
       1  _A_IEN0
       1  _A_IEN1
       1  _A_P0
       4  __Constant_a
     526  dmaCfg
       1  znpUartActiveShdw
      90  -- Other

 
 1 552 bytes in segment BANKED_CODE
    90 bytes in segment BANK_RELAYS
    18 bytes in segment SFR_AN
     4 bytes in segment XDATA_ROM_C
   527 bytes in segment XDATA_Z
 
    90 bytes of CODE     memory
     0 bytes of CONST    memory (+  4 bytes shared)
     0 bytes of DATA     memory (+ 18 bytes shared)
 1 552 bytes of HUGECODE memory
   527 bytes of XDATA    memory

Errors: none
Warnings: none
