###############################################################################
#
# IAR C/C++ Compiler V10.40.1.7397 for 8051               01/May/2021  16:40:07
# Copyright 2004-2021 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\Texas Instruments\Z-Stack 3.0.2\Components\osal\common\OSAL.c
#    Command line       =  
#        -f C:\Users\asus\AppData\Local\Temp\EW1C8A.tmp ("E:\Texas
#        Instruments\Z-Stack 3.0.2\Components\osal\common\OSAL.c" -D
#        BDB_FINDING_BINDING_CAPABILITY_ENABLED=0 -D TC_LINKKEY_JOIN -D
#        HAL_UART_DMA_RX_MAX=128 -D MAXMEMHEAP=2765 -D NWK_MAX_DEVICE_LIST=10
#        -D ZDSECMGR_TC_DEVICE_MAX=30 -D DISABLE_GREENPOWER_BASIC_PROXY -D
#        FEATURE_SYSTEM_STATS -D MT_GP_CB_FUNC -D ASSERT_RESET -D FAKE_CRC_SHDW
#        -lC "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-with-SBL\List" -lA
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-with-SBL\List"
#        --diag_suppress Pe001,Pa010 -o "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-with-SBL\Obj" -e --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_GP_CB_FUNC -DMT_APP_FUNC -DMT_APP_CNF_FUNC
#        -DZNP_ALT) -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg" -I
#        "E:\Texas Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\Source\" -I "E:\Texas
#        Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\..\Source\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Utilities\BootLoad\Source\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\gp\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\bdb\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  English_USA.1252
#    List file          =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-with-SBL\List\OSAL.lst
#    Object file        =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-with-SBL\Obj\OSAL.r51
#
###############################################################################

E:\Texas Instruments\Z-Stack 3.0.2\Components\osal\common\OSAL.c
      1          /**************************************************************************************************
      2            Filename:       OSAL.c
      3            Revised:        $Date: 2014-11-04 15:36:27 -0800 (Tue, 04 Nov 2014) $
      4            Revision:       $Revision: 40989 $
      5          
      6            Description:    This API allows the software components in the Z-stack to be written
      7                            independently of the specifics of the operating system, kernel or tasking
      8                            environment (including control loops or connect-to-interrupt systems).
      9          
     10          
     11            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     12          
     13            IMPORTANT: Your use of this Software is limited to those specific rights
     14            granted under the terms of a software license agreement between the user
     15            who downloaded the software, his/her employer (which must be your employer)
     16            and Texas Instruments Incorporated (the "License"). You may not use this
     17            Software unless you agree to abide by the terms of the License. The License
     18            limits your use, and you acknowledge, that the Software may not be modified,
     19            copied or distributed unless embedded on a Texas Instruments microcontroller
     20            or used solely and exclusively in conjunction with a Texas Instruments radio
     21            frequency transceiver, which is integrated into your product. Other than for
     22            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     23            works of, modify, distribute, perform, display or sell this Software and/or
     24            its documentation for any purpose.
     25          
     26            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     27            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     28            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     29            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     30            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     31            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     32            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     33            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     34            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     35            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     36            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     37          
     38            Should you have any questions regarding your right to use this Software,
     39            contact Texas Instruments Incorporated at www.TI.com.
     40          **************************************************************************************************/
     41          
     42          /*********************************************************************
     43           * INCLUDES
     44           */
     45          
     46          #include <string.h>
     47          
     48          #include "comdef.h"
     49          #include "hal_board.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     50          #include "OSAL.h"
     51          #include "OSAL_Tasks.h"
     52          #include "OSAL_Memory.h"
     53          #include "OSAL_PwrMgr.h"
     54          #include "OSAL_Clock.h"
     55          
     56          #include "OnBoard.h"
     57          
     58          /* HAL */
     59          #include "hal_drivers.h"
     60          
     61          #ifdef IAR_ARMCM3_LM
     62            #include "FreeRTOSConfig.h"
     63            #include "osal_task.h"
     64          #endif
     65          
     66          #ifdef USE_ICALL
     67            #include <ICall.h>
     68          #endif /* USE_ICALL */
     69          
     70          /*********************************************************************
     71           * MACROS
     72           */
     73          
     74          /*********************************************************************
     75           * CONSTANTS
     76           */
     77          #ifdef USE_ICALL
     78          // A bit mask to use to indicate a proxy OSAL task ID.
     79          #define OSAL_PROXY_ID_FLAG       0x80
     80          #endif // USE_ICALL
     81          
     82          /*********************************************************************
     83           * TYPEDEFS
     84           */
     85          
     86          /*********************************************************************
     87           * GLOBAL VARIABLES
     88           */
     89          
     90          // Message Pool Definitions

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     91          osal_msg_q_t osal_qHead;
   \                     osal_qHead:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     92          
     93          #ifdef USE_ICALL
     94          // OSAL event loop hook function pointer 
     95          void (*osal_eventloop_hook)(void) = NULL;
     96          #endif /* USE_ICALL */
     97          
     98          /*********************************************************************
     99           * EXTERNAL VARIABLES
    100           */
    101          
    102          /*********************************************************************
    103           * EXTERNAL FUNCTIONS
    104           */
    105          
    106          /*********************************************************************
    107           * LOCAL VARIABLES
    108           */
    109          
    110          // Index of active task

   \                                 In  segment XDATA_I, align 1, keep-with-next
    111          static uint8 activeTaskID = TASK_NO_TASK;
   \                     activeTaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for activeTaskID>`
   \   000001                REQUIRE __INIT_XDATA_I
    112          
    113          #ifdef USE_ICALL
    114          // Maximum number of proxy tasks
    115          #ifndef OSAL_MAX_NUM_PROXY_TASKS
    116          #define OSAL_MAX_NUM_PROXY_TASKS 2
    117          #endif // OSAL_MAX_NUM_PROXY_TASKS
    118          
    119          // ICall entity ID value used to indicate invalid value
    120          #define OSAL_INVALID_DISPATCH_ID 0xffu
    121          
    122          // Semaphore associated with OSAL RTOS thread receive queue
    123          ICall_Semaphore osal_semaphore;
    124          
    125          // Entity ID that OSAL RTOS thread has registered with
    126          ICall_EntityID osal_entity;
    127          
    128          // Last read tick count value reflected into the OSAL timer
    129          uint_least32_t osal_last_timestamp;
    130          
    131          // RTOS tick period in microseconds
    132          uint_least32_t osal_tickperiod;
    133          
    134          // Maximum timeout value in milliseconds that can be used with an RTOS timer
    135          uint_least32_t osal_max_msecs;
    136          
    137          // Timer ID for RTOS timer as backend engine for OSAL timer
    138          static ICall_TimerID osal_timerid_msec_timer;
    139          
    140          // Timer callback sequence tracking counter to handle race condition
    141          static unsigned osal_msec_timer_seq = 0;
    142          
    143          // proxy task ID map
    144          static uint8 osal_proxy_tasks[OSAL_MAX_NUM_PROXY_TASKS];
    145          
    146          // service dispatcher entity IDs corresponding to OSAL tasks
    147          static uint8 *osal_dispatch_entities;
    148          
    149          static uint8 osal_notask_entity;
    150          
    151          #endif // USE_ICALL
    152          
    153          /*********************************************************************
    154           * LOCAL FUNCTION PROTOTYPES
    155           */
    156          
    157          static uint8 osal_msg_enqueue_push( uint8 destination_task, uint8 *msg_ptr, uint8 urgent );
    158          
    159          #ifdef USE_ICALL
    160          static uint8 osal_alien2proxy(ICall_EntityID entity);
    161          static ICall_EntityID osal_proxy2alien(uint8 proxyid);
    162          static uint8 osal_dispatch2id(ICall_EntityID entity);
    163          static void osal_msec_timer_cback(void *arg);
    164          #endif // USE_ICALL
    165          
    166          /*********************************************************************
    167           * HELPER FUNCTIONS
    168           */
    169          /* very ugly stub so Keil can compile */
    170          #ifdef __KEIL__
    171          char *  itoa ( int value, char * buffer, int radix )
    172          {
    173            return(buffer);
    174          }
    175          #endif
    176          
    177          /*********************************************************************
    178           * @fn      osal_strlen
    179           *
    180           * @brief
    181           *
    182           *   Calculates the length of a string.  The string must be null
    183           *   terminated.
    184           *
    185           * @param   char *pString - pointer to text string
    186           *
    187           * @return  int - number of characters
    188           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    189          int osal_strlen( char *pString )
   \                     osal_strlen:
    190          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    191            return (int)( strlen( pString ) );
   \   000004                ; Setup parameters for call to function strlen
   \   000004   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   000007   02....       LJMP      ?Subroutine0 & 0xFFFF
    192          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    193          
    194          /*********************************************************************
    195           * @fn      osal_memcpy
    196           *
    197           * @brief
    198           *
    199           *   Generic memory copy.
    200           *
    201           *   Note: This function differs from the standard memcpy(), since
    202           *         it returns the pointer to the next destination uint8. The
    203           *         standard memcpy() returns the original destination address.
    204           *
    205           * @param   dst - destination address
    206           * @param   src - source address
    207           * @param   len - number of bytes to copy
    208           *
    209           * @return  pointer to end of destination buffer
    210           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    211          void *osal_memcpy( void *dst, const void GENERIC *src, unsigned int len )
   \                     osal_memcpy:
    212          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    213            uint8 *pDst;
    214            const uint8 GENERIC *pSrc;
    215          
    216            pSrc = src;
   \   000009   7409         MOV       A,#0x9
   \   00000B   12....       LCALL     ?XSTACK_DISP0_8
   \   00000E   12....       LCALL     ?Subroutine13 & 0xFFFF
    217            pDst = dst;
   \                     ??CrossCallReturnLabel_73:
   \   000011   8E82         MOV       DPL,R6
   \   000013   8F83         MOV       DPH,R7
   \   000015   800C         SJMP      ??osal_memcpy_0
    218          
    219            while ( len-- )
    220              *pDst++ = *pSrc++;
   \                     ??osal_memcpy_1:
   \   000017   12....       LCALL     ?C_GPTR_LOAD
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   E9           MOV       A,R1
   \   00001C   2401         ADD       A,#0x1
   \   00001E   09           INC       R1
   \   00001F   E4           CLR       A
   \   000020   3A           ADDC      A,R2
   \   000021   FA           MOV       R2,A
   \   000022   A3           INC       DPTR
   \                     ??osal_memcpy_0:
   \   000023   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000026   70EF         JNZ       ??osal_memcpy_1
    221          
    222            return ( pDst );
   \   000028                REQUIRE ?Subroutine4
   \   000028                ; // Fall through to label ?Subroutine4
    223          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   AA82         MOV       R2,DPL
   \   000002   AB83         MOV       R3,DPH
   \   000004   02....       LJMP      ??Subroutine29_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   EC           MOV       A,R4
   \   000001   FE           MOV       R6,A
   \   000002   ED           MOV       A,R5
   \   000003   FF           MOV       R7,A
   \   000004   EE           MOV       A,R6
   \   000005   24FF         ADD       A,#-0x1
   \   000007   1C           DEC       R4
   \   000008   EF           MOV       A,R7
   \   000009   34FF         ADDC      A,#-0x1
   \   00000B   FD           MOV       R5,A
   \   00000C   EE           MOV       A,R6
   \   00000D   4F           ORL       A,R7
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine37_0
   \   000003                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET
    224          
    225          /*********************************************************************
    226           * @fn      osal_revmemcpy
    227           *
    228           * @brief   Generic reverse memory copy.  Starts at the end of the
    229           *   source buffer, by taking the source address pointer and moving
    230           *   pointer ahead "len" bytes, then decrementing the pointer.
    231           *
    232           *   Note: This function differs from the standard memcpy(), since
    233           *         it returns the pointer to the next destination uint8. The
    234           *         standard memcpy() returns the original destination address.
    235           *
    236           * @param   dst - destination address
    237           * @param   src - source address
    238           * @param   len - number of bytes to copy
    239           *
    240           * @return  pointer to end of destination buffer
    241           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    242          void *osal_revmemcpy( void *dst, const void GENERIC *src, unsigned int len )
   \                     osal_revmemcpy:
    243          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    244            uint8 *pDst;
    245            const uint8 GENERIC *pSrc;
    246          
    247            pSrc = src;
    248            pSrc += (len-1);
   \   000009   7409         MOV       A,#0x9
   \   00000B   12....       LCALL     ?XSTACK_DISP0_8
   \   00000E   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000011   E9           MOV       A,R1
   \   000012   2C           ADD       A,R4
   \   000013   F9           MOV       R1,A
   \   000014   EA           MOV       A,R2
   \   000015   3D           ADDC      A,R5
   \   000016   FA           MOV       R2,A
   \   000017   E9           MOV       A,R1
   \   000018   24FF         ADD       A,#-0x1
   \   00001A   19           DEC       R1
   \   00001B   EA           MOV       A,R2
   \   00001C   34FF         ADDC      A,#-0x1
   \   00001E   FA           MOV       R2,A
    249            pDst = dst;
   \   00001F   8E82         MOV       DPL,R6
   \   000021   8F83         MOV       DPH,R7
   \   000023   800D         SJMP      ??osal_revmemcpy_0
    250          
    251            while ( len-- )
    252              *pDst++ = *pSrc--;
   \                     ??osal_revmemcpy_1:
   \   000025   12....       LCALL     ?C_GPTR_LOAD
   \   000028   F0           MOVX      @DPTR,A
   \   000029   E9           MOV       A,R1
   \   00002A   24FF         ADD       A,#-0x1
   \   00002C   19           DEC       R1
   \   00002D   EA           MOV       A,R2
   \   00002E   34FF         ADDC      A,#-0x1
   \   000030   FA           MOV       R2,A
   \   000031   A3           INC       DPTR
   \                     ??osal_revmemcpy_0:
   \   000032   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000035   70EE         JNZ       ??osal_revmemcpy_1
    253          
    254            return ( pDst );
   \   000037   80..         SJMP      ?Subroutine4
    255          }
    256          
    257          /*********************************************************************
    258           * @fn      osal_memdup
    259           *
    260           * @brief   Allocates a buffer [with osal_mem_alloc()] and copies
    261           *          the src buffer into the newly allocated space.
    262           *
    263           * @param   src - source address
    264           * @param   len - number of bytes to copy
    265           *
    266           * @return  pointer to the new allocated buffer, or NULL if
    267           *          allocation problem.
    268           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    269          void *osal_memdup( const void GENERIC *src, unsigned int len )
   \                     osal_memdup:
    270          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V4,R1
   \   000007   8A..         MOV       ?V5,R2
   \   000009   8B..         MOV       ?V6,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
    271            uint8 *pDst;
    272          
    273            pDst = osal_mem_alloc( len );
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   EC           MOV       A,R4
   \   000010   FA           MOV       R2,A
   \   000011   ED           MOV       A,R5
   \   000012   FB           MOV       R3,A
   \   000013   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000016   8A..         MOV       ?V0,R2
   \   000018   8B..         MOV       ?V1,R3
    274            if ( pDst )
   \   00001A   EA           MOV       A,R2
   \   00001B   4B           ORL       A,R3
   \   00001C   6011         JZ        ??osal_memdup_0
    275            {
    276              VOID osal_memcpy( pDst, src, len );
   \   00001E                ; Setup parameters for call to function osal_memcpy
   \   00001E   78..         MOV       R0,#?V4
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000023   EE           MOV       A,R6
   \   000024   FC           MOV       R4,A
   \   000025   EF           MOV       A,R7
   \   000026   FD           MOV       R5,A
   \   000027   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00002A   7403         MOV       A,#0x3
   \   00002C   12....       LCALL     ?DEALLOC_XSTACK8
    277            }
    278          
    279            return ( (void *)pDst );
   \                     ??osal_memdup_0:
   \   00002F   AA..         MOV       R2,?V0
   \   000031   AB..         MOV       R3,?V1
   \   000033   7F07         MOV       R7,#0x7
   \   000035   02....       LJMP      ?BANKED_LEAVE_XDATA
    280          }
    281          
    282          /*********************************************************************
    283           * @fn      osal_memcmp
    284           *
    285           * @brief
    286           *
    287           *   Generic memory compare.
    288           *
    289           * @param   src1 - source 1 addrexx
    290           * @param   src2 - source 2 address
    291           * @param   len - number of bytes to compare
    292           *
    293           * @return  TRUE - same, FALSE - different
    294           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    295          uint8 osal_memcmp( const void GENERIC *src1, const void GENERIC *src2, unsigned int len )
   \                     osal_memcmp:
    296          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
    297            const uint8 GENERIC *pSrc1;
    298            const uint8 GENERIC *pSrc2;
    299          
    300            pSrc1 = src1;
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V1,R2
   \   000009   8B..         MOV       ?V2,R3
    301            pSrc2 = src2;
   \   00000B   7413         MOV       A,#0x13
   \   00000D   12....       LCALL     ?XSTACK_DISP0_8
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F5..         MOV       ?V4,A
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V5,A
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F5..         MOV       ?V6,A
    302          
    303            while ( len-- )
   \                     ??osal_memcmp_0:
   \   00001B   EC           MOV       A,R4
   \   00001C   F8           MOV       R0,A
   \   00001D   ED           MOV       A,R5
   \   00001E   F9           MOV       R1,A
   \   00001F   E8           MOV       A,R0
   \   000020   24FF         ADD       A,#-0x1
   \   000022   1C           DEC       R4
   \   000023   E9           MOV       A,R1
   \   000024   34FF         ADDC      A,#-0x1
   \   000026   FD           MOV       R5,A
   \   000027   E8           MOV       A,R0
   \   000028   49           ORL       A,R1
   \   000029   6037         JZ        ??osal_memcmp_1
    304            {
    305              if( *pSrc1++ != *pSrc2++ )
   \   00002B   A9..         MOV       R1,?V0
   \   00002D   AA..         MOV       R2,?V1
   \   00002F   AB..         MOV       R3,?V2
   \   000031   E9           MOV       A,R1
   \   000032   2401         ADD       A,#0x1
   \   000034   F5..         MOV       ?V0,A
   \   000036   E4           CLR       A
   \   000037   3A           ADDC      A,R2
   \   000038   F5..         MOV       ?V1,A
   \   00003A   85....       MOV       ?V8,?V4
   \   00003D   85....       MOV       ?V9,?V5
   \   000040   85....       MOV       ?V10,?V6
   \   000043   E5..         MOV       A,?V4
   \   000045   2401         ADD       A,#0x1
   \   000047   F5..         MOV       ?V4,A
   \   000049   E4           CLR       A
   \   00004A   35..         ADDC      A,?V5
   \   00004C   F5..         MOV       ?V5,A
   \   00004E   12....       LCALL     ?C_GPTR_LOAD
   \   000051   F8           MOV       R0,A
   \   000052   A9..         MOV       R1,?V8
   \   000054   AA..         MOV       R2,?V9
   \   000056   AB..         MOV       R3,?V10
   \   000058   12....       LCALL     ?C_GPTR_LOAD
   \   00005B   68           XRL       A,R0
   \   00005C   60BD         JZ        ??osal_memcmp_0
    306                return FALSE;
   \   00005E   7900         MOV       R1,#0x0
   \   000060   8002         SJMP      ??osal_memcmp_2
    307            }
    308            return TRUE;
   \                     ??osal_memcmp_1:
   \   000062   7901         MOV       R1,#0x1
   \                     ??osal_memcmp_2:
   \   000064   7F0B         MOV       R7,#0xb
   \   000066   02....       LJMP      ?BANKED_LEAVE_XDATA
    309          }
    310          
    311          
    312          /*********************************************************************
    313           * @fn      osal_memset
    314           *
    315           * @brief
    316           *
    317           *   Set memory buffer to value.
    318           *
    319           * @param   dest - pointer to buffer
    320           * @param   value - what to set each uint8 of the message
    321           * @param   size - how big
    322           *
    323           * @return  pointer to destination buffer
    324           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    325          void *osal_memset( void *dest, uint8 value, int len )
   \                     osal_memset:
    326          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    327            return memset( dest, value, len );
   \   000005                ; Setup parameters for call to function memset
   \   000005   8C..         MOV       ?V0,R4
   \   000007   8D..         MOV       ?V1,R5
   \   000009   78..         MOV       R0,#?V0
   \   00000B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00000E   E9           MOV       A,R1
   \   00000F   FC           MOV       R4,A
   \   000010   7D00         MOV       R5,#0x0
   \   000012   12....       LCALL     `??memset::?relay`; Banked call to: memset
   \   000015   7402         MOV       A,#0x2
   \   000017   12....       LCALL     ?DEALLOC_XSTACK8
   \   00001A   02....       LJMP      ?Subroutine2 & 0xFFFF
    328          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    329          
    330          /*********************************************************************
    331           * @fn      osal_build_uint16
    332           *
    333           * @brief
    334           *
    335           *   Build a uint16 out of 2 bytes (0 then 1).
    336           *
    337           * @param   swapped - 0 then 1
    338           *
    339           * @return  uint16
    340           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    341          uint16 osal_build_uint16( uint8 *swapped )
   \                     osal_build_uint16:
    342          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    343            return ( BUILD_UINT16( swapped[0], swapped[1] ) );
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   E0           MOVX      A,@DPTR
   \   000009   FC           MOV       R4,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F8           MOV       R0,A
   \   00000D   E4           CLR       A
   \   00000E   C8           XCH       A,R0
   \   00000F   F9           MOV       R1,A
   \   000010   EC           MOV       A,R4
   \   000011   28           ADD       A,R0
   \   000012   FA           MOV       R2,A
   \   000013   E4           CLR       A
   \   000014   39           ADDC      A,R1
   \   000015   FB           MOV       R3,A
   \   000016   02....       LJMP      ?Subroutine0 & 0xFFFF
    344          }
    345          
    346          /*********************************************************************
    347           * @fn      osal_build_uint32
    348           *
    349           * @brief
    350           *
    351           *   Build a uint32 out of sequential bytes.
    352           *
    353           * @param   swapped - sequential bytes
    354           * @param   len - number of bytes in the uint8 array
    355           *
    356           * @return  uint32
    357           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    358          uint32 osal_build_uint32( uint8 *swapped, uint8 len )
   \                     osal_build_uint32:
    359          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    360            if ( len == 2 )
   \   000007   7402         MOV       A,#0x2
   \   000009   6E           XRL       A,R6
   \   00000A   7009         JNZ       ??osal_build_uint32_0
    361              return ( BUILD_UINT32( swapped[0], swapped[1], 0L, 0L ) );
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000013   804F         SJMP      ??osal_build_uint32_1
    362            else if ( len == 3 )
   \                     ??osal_build_uint32_0:
   \   000015   7403         MOV       A,#0x3
   \   000017   6E           XRL       A,R6
   \   000018   7016         JNZ       ??osal_build_uint32_2
    363              return ( BUILD_UINT32( swapped[0], swapped[1], swapped[2], 0L ) );
   \   00001A   8A82         MOV       DPL,R2
   \   00001C   8B83         MOV       DPH,R3
   \   00001E   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000021   12....       LCALL     ?L_SHL
   \   000024   78..         MOV       R0,#?V0
   \   000026   79..         MOV       R1,#?V4
   \   000028   12....       LCALL     ?L_ADD
   \   00002B   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00002E   8034         SJMP      ??osal_build_uint32_1
    364            else if ( len == 4 )
   \                     ??osal_build_uint32_2:
   \   000030   7404         MOV       A,#0x4
   \   000032   6E           XRL       A,R6
   \   000033   8A82         MOV       DPL,R2
   \   000035   8B83         MOV       DPH,R3
   \   000037   7041         JNZ       ??osal_build_uint32_3
    365              return ( BUILD_UINT32( swapped[0], swapped[1], swapped[2], swapped[3] ) );
   \   000039   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00003C   12....       LCALL     ?L_SHL
   \   00003F   78..         MOV       R0,#?V0
   \   000041   79..         MOV       R1,#?V4
   \   000043   12....       LCALL     ?L_ADD
   \   000046   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000049   78..         MOV       R0,#?V4
   \   00004B   12....       LCALL     ?L_SHL
   \   00004E   78..         MOV       R0,#?V0
   \   000050   79..         MOV       R1,#?V4
   \   000052   12....       LCALL     ?L_ADD
   \   000055   8A82         MOV       DPL,R2
   \   000057   8B83         MOV       DPH,R3
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   F5..         MOV       ?V4,A
   \   00005F   E4           CLR       A
   \   000060   F5..         MOV       ?V6,A
   \   000062   7418         MOV       A,#0x18
   \                     ??osal_build_uint32_1:
   \   000064   78..         MOV       R0,#?V4
   \   000066   12....       LCALL     ?L_SHL
   \   000069   78..         MOV       R0,#?V0
   \   00006B   79..         MOV       R1,#?V4
   \   00006D   12....       LCALL     ?L_ADD
   \   000070   AA..         MOV       R2,?V0
   \   000072   AB..         MOV       R3,?V1
   \   000074   AC..         MOV       R4,?V2
   \   000076   AD..         MOV       R5,?V3
   \   000078   8006         SJMP      ??osal_build_uint32_4
    366            else
    367              return ( (uint32)swapped[0] );
   \                     ??osal_build_uint32_3:
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   FA           MOV       R2,A
   \   00007C   E4           CLR       A
   \   00007D   FB           MOV       R3,A
   \   00007E   FC           MOV       R4,A
   \   00007F   FD           MOV       R5,A
   \                     ??osal_build_uint32_4:
   \   000080                REQUIRE ?Subroutine3
   \   000080                ; // Fall through to label ?Subroutine3
    368          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V4,A
   \   000009   E4           CLR       A
   \   00000A   F5..         MOV       ?V5,A
   \   00000C   7410         MOV       A,#0x10
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000003   78..         MOV       R0,#?V4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   E4           CLR       A
   \   000004   F5..         MOV       ?V1,A
   \   000006   F5..         MOV       ?V2,A
   \   000008   F5..         MOV       ?V3,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F5..         MOV       ?V4,A
   \   00000E   E4           CLR       A
   \   00000F   F5..         MOV       ?V5,A
   \   000011   F5..         MOV       ?V6,A
   \   000013   F5..         MOV       ?V7,A
   \   000015   7408         MOV       A,#0x8
   \   000017   22           RET
    369          
    370          #if !defined ( ZBIT ) && !defined ( ZBIT2 ) && !defined (UBIT)
    371          /*********************************************************************
    372           * @fn      _ltoa
    373           *
    374           * @brief
    375           *
    376           *   convert a long unsigned int to a string.
    377           *
    378           * @param  l - long to convert
    379           * @param  buf - buffer to convert to
    380           * @param  radix - 10 dec, 16 hex
    381           *
    382           * @return  pointer to buffer
    383           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    384          unsigned char * _ltoa(unsigned long l, unsigned char *buf, unsigned char radix)
   \                     _ltoa:
    385          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 31
   \   000005   74E1         MOV       A,#-0x1f
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V8,R2
   \   000014   8B..         MOV       ?V9,R3
   \   000016   8C..         MOV       ?V10,R4
   \   000018   8D..         MOV       ?V11,R5
    386          #if defined (__TI_COMPILER_VERSION)
    387            return ( (unsigned char*)ltoa( l, (char *)buf ) );
    388          #elif defined( __GNUC__ )
    389            return ( (char*)ltoa( l, buf, radix ) );
    390          #else
    391            unsigned char tmp1[10] = "", tmp2[10] = "", tmp3[10] = "";
   \   00001A   90....       MOV       DPTR,#`?<Constant "">`
   \   00001D   7401         MOV       A,#0x1
   \   00001F   12....       LCALL     ?XSTACK_DISP102_8
   \   000022   740A         MOV       A,#0xa
   \   000024   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   000027   90....       MOV       DPTR,#`?<Constant "">_1`
   \   00002A   740A         MOV       A,#0xa
   \   00002C   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   00002F   90....       MOV       DPTR,#`?<Constant "">_2`
   \   000032   740A         MOV       A,#0xa
   \   000034   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    392            unsigned short num1, num2, num3;
    393            unsigned char i;
    394          
    395            buf[0] = '\0';
   \   000037   7437         MOV       A,#0x37
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00003F   E4           CLR       A
   \   000040   F0           MOVX      @DPTR,A
    396          
    397            if ( radix == 10 )
   \   000041   85..82       MOV       DPL,?XSP + 0
   \   000044   85..83       MOV       DPH,?XSP + 1
   \   000047   E0           MOVX      A,@DPTR
   \   000048   640A         XRL       A,#0xa
   \   00004A   6003         JZ        $+5
   \   00004C   02....       LJMP      ??_ltoa_0 & 0xFFFF
    398            {
    399              num1 = l % 10000;
   \   00004F   8A..         MOV       ?V0,R2
   \   000051   8B..         MOV       ?V1,R3
   \   000053   85....       MOV       ?V2,?V10
   \   000056   85....       MOV       ?V3,?V11
   \   000059   90....       MOV       DPTR,#__Constant_2710
   \   00005C   78..         MOV       R0,#?V4
   \   00005E   12....       LCALL     ?L_MOV_X
   \   000061   78..         MOV       R0,#?V0
   \   000063   79..         MOV       R1,#?V4
   \   000065   12....       LCALL     ?UL_DIV_MOD
   \   000068   85....       MOV       ?V0,?V4
   \   00006B   85....       MOV       ?V1,?V5
    400              num2 = (l / 10000) % 10000;
   \   00006E   8A..         MOV       ?V4,R2
   \   000070   8B..         MOV       ?V5,R3
   \   000072   85....       MOV       ?V6,?V10
   \   000075   85....       MOV       ?V7,?V11
   \   000078   90....       MOV       DPTR,#__Constant_2710
   \   00007B   78..         MOV       R0,#?V12
   \   00007D   12....       LCALL     ?L_MOV_X
   \   000080   78..         MOV       R0,#?V4
   \   000082   79..         MOV       R1,#?V12
   \   000084   12....       LCALL     ?UL_DIV_MOD
   \   000087   90....       MOV       DPTR,#__Constant_2710
   \   00008A   78..         MOV       R0,#?V12
   \   00008C   12....       LCALL     ?L_MOV_X
   \   00008F   78..         MOV       R0,#?V4
   \   000091   79..         MOV       R1,#?V12
   \   000093   12....       LCALL     ?UL_DIV_MOD
   \   000096   AE..         MOV       R6,?V12
   \   000098   AF..         MOV       R7,?V13
    401              num3 = (unsigned short)(l / 100000000);
   \   00009A   90....       MOV       DPTR,#__Constant_5f5e100
   \   00009D   78..         MOV       R0,#?V4
   \   00009F   12....       LCALL     ?L_MOV_X
   \   0000A2   78..         MOV       R0,#?V8
   \   0000A4   79..         MOV       R1,#?V4
   \   0000A6   12....       LCALL     ?UL_DIV_MOD
   \   0000A9   85....       MOV       ?V2,?V8
   \   0000AC   85....       MOV       ?V3,?V9
    402          
    403              if (num3) _itoa(num3, tmp3, 10);
   \   0000AF   E5..         MOV       A,?V2
   \   0000B1   45..         ORL       A,?V3
   \   0000B3   600E         JZ        ??_ltoa_1
   \   0000B5                ; Setup parameters for call to function _itoa
   \   0000B5   790A         MOV       R1,#0xa
   \   0000B7   7415         MOV       A,#0x15
   \   0000B9   12....       LCALL     ?XSTACK_DISP102_8
   \   0000BC   AA..         MOV       R2,?V2
   \   0000BE   AB..         MOV       R3,?V3
   \   0000C0   12....       LCALL     `??_itoa::?relay`; Banked call to: _itoa
    404              if (num2) _itoa(num2, tmp2, 10);
   \                     ??_ltoa_1:
   \   0000C3   EE           MOV       A,R6
   \   0000C4   4F           ORL       A,R7
   \   0000C5   600E         JZ        ??_ltoa_2
   \   0000C7                ; Setup parameters for call to function _itoa
   \   0000C7   790A         MOV       R1,#0xa
   \   0000C9   740B         MOV       A,#0xb
   \   0000CB   12....       LCALL     ?XSTACK_DISP102_8
   \   0000CE   EE           MOV       A,R6
   \   0000CF   FA           MOV       R2,A
   \   0000D0   EF           MOV       A,R7
   \   0000D1   FB           MOV       R3,A
   \   0000D2   12....       LCALL     `??_itoa::?relay`; Banked call to: _itoa
    405              if (num1) _itoa(num1, tmp1, 10);
   \                     ??_ltoa_2:
   \   0000D5   E5..         MOV       A,?V0
   \   0000D7   45..         ORL       A,?V1
   \   0000D9   600E         JZ        ??_ltoa_3
   \   0000DB                ; Setup parameters for call to function _itoa
   \   0000DB   790A         MOV       R1,#0xa
   \   0000DD   7401         MOV       A,#0x1
   \   0000DF   12....       LCALL     ?XSTACK_DISP102_8
   \   0000E2   AA..         MOV       R2,?V0
   \   0000E4   AB..         MOV       R3,?V1
   \   0000E6   12....       LCALL     `??_itoa::?relay`; Banked call to: _itoa
    406          
    407              if (num3)
   \                     ??_ltoa_3:
   \   0000E9   E5..         MOV       A,?V2
   \   0000EB   45..         ORL       A,?V3
   \   0000ED   6029         JZ        ??_ltoa_4
    408              {
    409                strcpy((char*)buf, (char const*)tmp3);
   \   0000EF                ; Setup parameters for call to function strcpy
   \   0000EF   7415         MOV       A,#0x15
   \   0000F1   12....       LCALL     ?XSTACK_DISP102_8
   \   0000F4   7437         MOV       A,#0x37
   \   0000F6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F9   12....       LCALL     ?Subroutine12 & 0xFFFF
    410                for (i = 0; i < 4 - strlen((char const*)tmp2); i++)
   \                     ??CrossCallReturnLabel_9:
   \   0000FC   800C         SJMP      ??CrossCallReturnLabel_4
    411                  strcat((char*)buf, "0");
   \                     ??_ltoa_5:
   \   0000FE                ; Setup parameters for call to function strcat
   \   0000FE   7C..         MOV       R4,#`?<Constant "0">` & 0xff
   \   000100   7D..         MOV       R5,#(`?<Constant "0">` >> 8) & 0xff
   \   000102   7437         MOV       A,#0x37
   \   000104   12....       LCALL     ?XSTACK_DISP0_8
   \   000107   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00010A   E5..         MOV       A,?V4
   \   00010C   F5..         MOV       ?V6,A
   \   00010E                ; Setup parameters for call to function strlen
   \   00010E   740B         MOV       A,#0xb
   \   000110   12....       LCALL     ?XSTACK_DISP101_8
   \   000113   12....       LCALL     ?Subroutine6 & 0xFFFF
    412              }
   \                     ??CrossCallReturnLabel_0:
   \   000116   40E6         JC        ??_ltoa_5
    413              strcat((char*)buf, (char const*)tmp2);
   \                     ??_ltoa_4:
   \   000118                ; Setup parameters for call to function strcat
   \   000118   740B         MOV       A,#0xb
   \   00011A   12....       LCALL     ?XSTACK_DISP102_8
   \   00011D   7437         MOV       A,#0x37
   \   00011F   12....       LCALL     ?XSTACK_DISP0_8
   \   000122   12....       LCALL     ?Subroutine11 & 0xFFFF
    414              if (num3 || num2)
   \                     ??CrossCallReturnLabel_7:
   \   000125   7004         JNZ       ??_ltoa_6
   \   000127   EE           MOV       A,R6
   \   000128   4F           ORL       A,R7
   \   000129   601F         JZ        ??_ltoa_7
    415              {
    416                for (i = 0; i < 4 - strlen((char const*)tmp1); i++)
   \                     ??_ltoa_6:
   \   00012B   75..00       MOV       ?V4,#0x0
   \   00012E   800C         SJMP      ??CrossCallReturnLabel_5
    417                  strcat((char*)buf, "0");
   \                     ??_ltoa_8:
   \   000130                ; Setup parameters for call to function strcat
   \   000130   7C..         MOV       R4,#`?<Constant "0">` & 0xff
   \   000132   7D..         MOV       R5,#(`?<Constant "0">` >> 8) & 0xff
   \   000134   7437         MOV       A,#0x37
   \   000136   12....       LCALL     ?XSTACK_DISP0_8
   \   000139   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00013C   E5..         MOV       A,?V4
   \   00013E   F5..         MOV       ?V6,A
   \   000140                ; Setup parameters for call to function strlen
   \   000140   7401         MOV       A,#0x1
   \   000142   12....       LCALL     ?XSTACK_DISP101_8
   \   000145   12....       LCALL     ?Subroutine6 & 0xFFFF
    418              }
   \                     ??CrossCallReturnLabel_1:
   \   000148   40E6         JC        ??_ltoa_8
    419              strcat((char*)buf, (char const*)tmp1);
   \                     ??_ltoa_7:
   \   00014A                ; Setup parameters for call to function strcat
   \   00014A   7401         MOV       A,#0x1
   \   00014C   12....       LCALL     ?XSTACK_DISP102_8
   \   00014F   7437         MOV       A,#0x37
   \   000151   12....       LCALL     ?XSTACK_DISP0_8
   \   000154   12....       LCALL     ?Subroutine11 & 0xFFFF
    420              if (!num3 && !num2 && !num1)
    421                strcpy((char*)buf, "0");
    422            }
   \                     ??CrossCallReturnLabel_8:
   \   000157   7007         JNZ       ??_ltoa_9
   \   000159   EE           MOV       A,R6
   \   00015A   4F           ORL       A,R7
   \   00015B   7003         JNZ       $+5
   \   00015D   02....       LJMP      ??_ltoa_10 & 0xFFFF
    423            else if ( radix == 16 )
    424            {
    425              num1 = l & 0x0000FFFF;
    426              num2 = l >> 16;
    427          
    428              if (num2) _itoa(num2, tmp2, 16);
    429              if (num1) _itoa(num1, tmp1, 16);
    430          
    431              if (num2)
    432              {
    433                strcpy((char*)buf,(char const*)tmp2);
    434                for (i = 0; i < 4 - strlen((char const*)tmp1); i++)
    435                  strcat((char*)buf, "0");
    436              }
    437              strcat((char*)buf, (char const*)tmp1);
    438              if (!num2 && !num1)
    439                strcpy((char*)buf, "0");
    440            }
    441            else
    442              return NULL;
    443          
    444            return buf;
   \                     ??_ltoa_9:
   \   000160   7437         MOV       A,#0x37
   \   000162   12....       LCALL     ?XSTACK_DISP0_8
   \   000165   12....       LCALL     ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000168   741F         MOV       A,#0x1f
   \   00016A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00016D   7F10         MOV       R7,#0x10
   \   00016F   02....       LJMP      ?BANKED_LEAVE_XDATA
   \                     ??_ltoa_0:
   \   000172   E0           MOVX      A,@DPTR
   \   000173   6410         XRL       A,#0x10
   \   000175   6003         JZ        $+5
   \   000177   02....       LJMP      ??_ltoa_11 & 0xFFFF
   \   00017A   8A..         MOV       ?V0,R2
   \   00017C   8B..         MOV       ?V1,R3
   \   00017E   7410         MOV       A,#0x10
   \   000180   78..         MOV       R0,#?V8
   \   000182   12....       LCALL     ?UL_SHR
   \   000185   AE..         MOV       R6,?V8
   \   000187   AF..         MOV       R7,?V9
   \   000189   EE           MOV       A,R6
   \   00018A   4F           ORL       A,R7
   \   00018B   600E         JZ        ??_ltoa_12
   \   00018D                ; Setup parameters for call to function _itoa
   \   00018D   7910         MOV       R1,#0x10
   \   00018F   740B         MOV       A,#0xb
   \   000191   12....       LCALL     ?XSTACK_DISP102_8
   \   000194   EE           MOV       A,R6
   \   000195   FA           MOV       R2,A
   \   000196   EF           MOV       A,R7
   \   000197   FB           MOV       R3,A
   \   000198   12....       LCALL     `??_itoa::?relay`; Banked call to: _itoa
   \                     ??_ltoa_12:
   \   00019B   E5..         MOV       A,?V0
   \   00019D   45..         ORL       A,?V1
   \   00019F   600E         JZ        ??_ltoa_13
   \   0001A1                ; Setup parameters for call to function _itoa
   \   0001A1   7910         MOV       R1,#0x10
   \   0001A3   7401         MOV       A,#0x1
   \   0001A5   12....       LCALL     ?XSTACK_DISP102_8
   \   0001A8   AA..         MOV       R2,?V0
   \   0001AA   AB..         MOV       R3,?V1
   \   0001AC   12....       LCALL     `??_itoa::?relay`; Banked call to: _itoa
   \                     ??_ltoa_13:
   \   0001AF   EE           MOV       A,R6
   \   0001B0   4F           ORL       A,R7
   \   0001B1   603D         JZ        ??_ltoa_14
   \   0001B3                ; Setup parameters for call to function strcpy
   \   0001B3   740B         MOV       A,#0xb
   \   0001B5   12....       LCALL     ?XSTACK_DISP102_8
   \   0001B8   7437         MOV       A,#0x37
   \   0001BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BD   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0001C0   800C         SJMP      ??CrossCallReturnLabel_6
   \                     ??_ltoa_15:
   \   0001C2                ; Setup parameters for call to function strcat
   \   0001C2   7C..         MOV       R4,#`?<Constant "0">` & 0xff
   \   0001C4   7D..         MOV       R5,#(`?<Constant "0">` >> 8) & 0xff
   \   0001C6   7437         MOV       A,#0x37
   \   0001C8   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CB   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0001CE   E5..         MOV       A,?V4
   \   0001D0   F5..         MOV       ?V2,A
   \   0001D2                ; Setup parameters for call to function strlen
   \   0001D2   7401         MOV       A,#0x1
   \   0001D4   12....       LCALL     ?XSTACK_DISP101_8
   \   0001D7   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   0001DA   8A..         MOV       ?V6,R2
   \   0001DC   8B..         MOV       ?V7,R3
   \   0001DE   7404         MOV       A,#0x4
   \   0001E0   C3           CLR       C
   \   0001E1   95..         SUBB      A,?V6
   \   0001E3   F8           MOV       R0,A
   \   0001E4   E4           CLR       A
   \   0001E5   95..         SUBB      A,?V7
   \   0001E7   F9           MOV       R1,A
   \   0001E8   C3           CLR       C
   \   0001E9   E5..         MOV       A,?V2
   \   0001EB   98           SUBB      A,R0
   \   0001EC   E4           CLR       A
   \   0001ED   99           SUBB      A,R1
   \   0001EE   40D2         JC        ??_ltoa_15
   \                     ??_ltoa_14:
   \   0001F0                ; Setup parameters for call to function strcat
   \   0001F0   7401         MOV       A,#0x1
   \   0001F2   12....       LCALL     ?XSTACK_DISP102_8
   \   0001F5   7437         MOV       A,#0x37
   \   0001F7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001FA   12....       LCALL     ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0001FD   12....       LCALL     `??strcat::?relay`; Banked call to: strcat
   \   000200   EE           MOV       A,R6
   \   000201   4F           ORL       A,R7
   \   000202   6003         JZ        $+5
   \   000204   02....       LJMP      ??_ltoa_9 & 0xFFFF
   \                     ??_ltoa_10:
   \   000207   E5..         MOV       A,?V0
   \   000209   45..         ORL       A,?V1
   \   00020B   6003         JZ        $+5
   \   00020D   02....       LJMP      ??_ltoa_9 & 0xFFFF
   \   000210                ; Setup parameters for call to function strcpy
   \   000210   7C..         MOV       R4,#`?<Constant "0">` & 0xff
   \   000212   7D..         MOV       R5,#(`?<Constant "0">` >> 8) & 0xff
   \   000214   7437         MOV       A,#0x37
   \   000216   12....       LCALL     ?XSTACK_DISP0_8
   \   000219   12....       LCALL     ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00021C   12....       LCALL     `??strcpy::?relay`; Banked call to: strcpy
   \   00021F   02....       LJMP      ??_ltoa_9 & 0xFFFF
   \                     ??_ltoa_11:
   \   000222   7A00         MOV       R2,#0x0
   \   000224   7B00         MOV       R3,#0x0
   \   000226   02....       LJMP      ??CrossCallReturnLabel_67 & 0xFFFF
    445          #endif
    446          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   12....       LCALL     `??strcpy::?relay`; Banked call to: strcpy
   \   000008   75..00       MOV       ?V4,#0x0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000003   E5..         MOV       A,?V2
   \   000005   45..         ORL       A,?V3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000003   05..         INC       ?V4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   12....       LCALL     `??strcat::?relay`; Banked call to: strcat
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   000003   8A..         MOV       ?V8,R2
   \   000005   8B..         MOV       ?V9,R3
   \   000007   7404         MOV       A,#0x4
   \   000009   C3           CLR       C
   \   00000A   95..         SUBB      A,?V8
   \   00000C   F8           MOV       R0,A
   \   00000D   E4           CLR       A
   \   00000E   95..         SUBB      A,?V9
   \   000010   F9           MOV       R1,A
   \   000011   C3           CLR       C
   \   000012   E5..         MOV       A,?V6
   \   000014   98           SUBB      A,R0
   \   000015   E4           CLR       A
   \   000016   99           SUBB      A,R1
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET
    447          #endif // !defined(ZBIT) && !defined(ZBIT2)
    448          
    449          /*********************************************************************
    450           * @fn        osal_rand
    451           *
    452           * @brief    Random number generator
    453           *
    454           * @param   none
    455           *
    456           * @return  uint16 - new random number
    457           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    458          uint16 osal_rand( void )
   \                     osal_rand:
    459          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    460            return ( Onboard_rand() );
   \   000004                ; Setup parameters for call to function Onboard_rand
   \   000004   12....       LCALL     `??Onboard_rand::?relay`; Banked call to: Onboard_rand
   \   000007   80..         SJMP      ?Subroutine0
    461          }
    462          
    463          /*********************************************************************
    464           * API FUNCTIONS
    465           *********************************************************************/
    466          
    467          #ifdef USE_ICALL
    468          /*********************************************************************
    469           * @fn      osal_prepare_svc_enroll
    470           *
    471           * @brief   Initialize data structures that map OSAL task ids to
    472           *          ICall entity ids.
    473           *
    474           * @param   none
    475           *
    476           * @return  none
    477           */
    478          static void osal_prepare_svc_enroll(void)
    479          {
    480            osal_dispatch_entities = (uint8 *) osal_mem_alloc(tasksCnt * 2);
    481            osal_memset(osal_dispatch_entities, OSAL_INVALID_DISPATCH_ID, tasksCnt * 2);
    482            osal_memset(osal_proxy_tasks, OSAL_INVALID_DISPATCH_ID,
    483                        OSAL_MAX_NUM_PROXY_TASKS);
    484          }
    485          
    486          /*********************************************************************
    487           * @fn      osal_enroll_dispatchid
    488           *
    489           * @brief   Map a task id to an ICall entity id for messaging in
    490           *          both directions (sending and receiving).
    491           *
    492           * @param   taskid       OSAL task id
    493           * @param   dispatchid   ICall entity id
    494           *
    495           * @return  none
    496           */
    497          void osal_enroll_dispatchid(uint8 taskid, ICall_EntityID dispatchid)
    498          {
    499            osal_dispatch_entities[taskid] = dispatchid;
    500            osal_dispatch_entities[tasksCnt + taskid] = dispatchid;
    501          }
    502          
    503          /*********************************************************************
    504           * @fn      osal_enroll_senderid
    505           *
    506           * @brief   Map a task id to an ICall entity id, which shall be used
    507           *          just for sending a message from an OSAL task.
    508           *          Note that osal_enroll_dispatchid() must never be called
    509           *          with the same OSAL task id used in this function call.
    510           *          However, it is OK to call osal_enroll_dispatchid()
    511           *          with the same ICall entity id and a different OSAL task id.
    512           *
    513           * @param   taskid       OSAL task id
    514           * @param   dispatchid   ICall entity id
    515           *
    516           * @return  none
    517           */
    518          void osal_enroll_senderid(uint8 taskid, ICall_EntityID dispatchid)
    519          {
    520            osal_dispatch_entities[tasksCnt + taskid] = dispatchid;
    521          }
    522          
    523          /*********************************************************************
    524           * @fn      osal_enroll_notasksender
    525           *
    526           * @brief   Map no task id to an ICall entity id, which shall be used
    527           *          just for sending a message from non-OSAL task.
    528           *
    529           * @param   dispatchid   ICall entity id
    530           *
    531           * @return  none
    532           */
    533          void osal_enroll_notasksender(ICall_EntityID dispatchid)
    534          {
    535            osal_notask_entity = dispatchid;
    536          }
    537          #endif /* USE_ICALL */
    538          
    539          /*********************************************************************
    540           * @fn      osal_msg_allocate
    541           *
    542           * @brief
    543           *
    544           *    This function is called by a task to allocate a message buffer
    545           *    into which the task will encode the particular message it wishes
    546           *    to send.  This common buffer scheme is used to strictly limit the
    547           *    creation of message buffers within the system due to RAM size
    548           *    limitations on the microprocessor.   Note that all message buffers
    549           *    are a fixed size (at least initially).  The parameter len is kept
    550           *    in case a message pool with varying fixed message sizes is later
    551           *    created (for example, a pool of message buffers of size LARGE,
    552           *    MEDIUM and SMALL could be maintained and allocated based on request
    553           *    from the tasks).
    554           *
    555           *
    556           * @param   uint8 len  - wanted buffer length
    557           *
    558           *
    559           * @return  pointer to allocated buffer or NULL if allocation failed.
    560           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    561          uint8 * osal_msg_allocate( uint16 len )
   \                     osal_msg_allocate:
    562          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    563            osal_msg_hdr_t *hdr;
    564          
    565            if ( len == 0 )
   \   000009   EA           MOV       A,R2
   \   00000A   4F           ORL       A,R7
   \   00000B   6031         JZ        ??osal_msg_allocate_0
    566              return ( NULL );
    567          
    568            hdr = (osal_msg_hdr_t *) osal_mem_alloc( (short)(len + sizeof( osal_msg_hdr_t )) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   EA           MOV       A,R2
   \   00000E   2405         ADD       A,#0x5
   \   000010   FA           MOV       R2,A
   \   000011   E4           CLR       A
   \   000012   3F           ADDC      A,R7
   \   000013   FB           MOV       R3,A
   \   000014   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000017   8B..         MOV       ?V1,R3
   \   000019   A9..         MOV       R1,?V1
    569            if ( hdr )
   \   00001B   EA           MOV       A,R2
   \   00001C   49           ORL       A,R1
   \   00001D   601F         JZ        ??osal_msg_allocate_0
    570            {
    571              hdr->next = NULL;
   \   00001F   8A82         MOV       DPL,R2
   \   000021   8B83         MOV       DPH,R3
   \   000023   E4           CLR       A
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   12....       LCALL     ??Subroutine32_0 & 0xFFFF
    572              hdr->len = len;
   \                     ??CrossCallReturnLabel_47:
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   12....       LCALL     ?Subroutine18 & 0xFFFF
    573              hdr->dest_id = TASK_NO_TASK;
   \                     ??CrossCallReturnLabel_45:
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   74FF         MOV       A,#-0x1
   \   000034   F0           MOVX      @DPTR,A
    574              return ( (uint8 *) (hdr + 1) );
   \   000035   EA           MOV       A,R2
   \   000036   2405         ADD       A,#0x5
   \   000038   FA           MOV       R2,A
   \   000039   E4           CLR       A
   \   00003A   39           ADDC      A,R1
   \   00003B   FB           MOV       R3,A
   \   00003C   8004         SJMP      ??osal_msg_allocate_1
    575            }
    576            else
    577              return ( NULL );
   \                     ??osal_msg_allocate_0:
   \   00003E   7A00         MOV       R2,#0x0
   \   000040   7B00         MOV       R3,#0x0
   \                     ??osal_msg_allocate_1:
   \   000042   02....       LJMP      ?Subroutine2 & 0xFFFF
    578          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   EE           MOV       A,R6
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EF           MOV       A,R7
   \   000004                REQUIRE ??Subroutine32_0
   \   000004                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET
    579          
    580          /*********************************************************************
    581           * @fn      osal_msg_deallocate
    582           *
    583           * @brief
    584           *
    585           *    This function is used to deallocate a message buffer. This function
    586           *    is called by a task (or processing element) after it has finished
    587           *    processing a received message.
    588           *
    589           *
    590           * @param   uint8 *msg_ptr - pointer to new message buffer
    591           *
    592           * @return  SUCCESS, INVALID_MSG_POINTER
    593           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    594          uint8 osal_msg_deallocate( uint8 *msg_ptr )
   \                     osal_msg_deallocate:
    595          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    596            uint8 *x;
    597          
    598            if ( msg_ptr == NULL )
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   7004         JNZ       ??osal_msg_deallocate_0
    599              return ( INVALID_MSG_POINTER );
   \   000008   7905         MOV       R1,#0x5
   \   00000A   8017         SJMP      ??osal_msg_deallocate_1
    600          
    601            // don't deallocate queued buffer
    602            if ( OSAL_MSG_ID( msg_ptr ) != TASK_NO_TASK )
   \                     ??osal_msg_deallocate_0:
   \   00000C   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00000F   F4           CPL       A
   \   000010   6004         JZ        ??osal_msg_deallocate_2
    603              return ( MSG_BUFFER_NOT_AVAIL );
   \   000012   7904         MOV       R1,#0x4
   \   000014   800D         SJMP      ??osal_msg_deallocate_1
    604          
    605            x = (uint8 *)((uint8 *)msg_ptr - sizeof( osal_msg_hdr_t ));
    606          
    607            osal_mem_free( (void *)x );
   \                     ??osal_msg_deallocate_2:
   \   000016                ; Setup parameters for call to function osal_mem_free
   \   000016   EA           MOV       A,R2
   \   000017   24FB         ADD       A,#-0x5
   \   000019   FA           MOV       R2,A
   \   00001A   EB           MOV       A,R3
   \   00001B   34FF         ADDC      A,#-0x1
   \   00001D   FB           MOV       R3,A
   \   00001E   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    608          
    609            return ( SUCCESS );
   \   000021   7900         MOV       R1,#0x0
   \                     ??osal_msg_deallocate_1:
   \   000023                REQUIRE ?Subroutine0
   \   000023                ; // Fall through to label ?Subroutine0
    610          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   EA           MOV       A,R2
   \   000001   24FF         ADD       A,#-0x1
   \   000003   F582         MOV       DPL,A
   \   000005   EB           MOV       A,R3
   \   000006                REQUIRE ??Subroutine26_0
   \   000006                ; // Fall through to label ??Subroutine26_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000   34FF         ADDC      A,#-0x1
   \   000002   F583         MOV       DPH,A
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET
    611          
    612          /*********************************************************************
    613           * @fn      osal_msg_send
    614           *
    615           * @brief
    616           *
    617           *    This function is called by a task to send a command message to
    618           *    another task or processing element.  The sending_task field must
    619           *    refer to a valid task, since the task ID will be used
    620           *    for the response message.  This function will also set a message
    621           *    ready event in the destination tasks event list.
    622           *
    623           *
    624           * @param   uint8 destination_task - Send msg to Task ID
    625           * @param   uint8 *msg_ptr - pointer to new message buffer
    626           *
    627           * @return  SUCCESS, INVALID_TASK, INVALID_MSG_POINTER
    628           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    629          uint8 osal_msg_send( uint8 destination_task, uint8 *msg_ptr )
   \                     osal_msg_send:
    630          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    631          #ifdef USE_ICALL
    632            if (destination_task & OSAL_PROXY_ID_FLAG)
    633            {
    634              /* Destination is a proxy task */
    635              osal_msg_hdr_t *hdr = (osal_msg_hdr_t *)msg_ptr - 1;
    636              ICall_EntityID src, dst;
    637          
    638              uint8 taskid = osal_self();
    639              if (taskid == TASK_NO_TASK)
    640              {
    641                /* Call must have been made from either an ISR or a user-thread */
    642                src = osal_notask_entity;
    643              }
    644              else
    645              {
    646                src = (ICall_EntityID) osal_dispatch_entities[taskid + tasksCnt];
    647              }
    648              if (src == OSAL_INVALID_DISPATCH_ID)
    649              {
    650                /* The source entity is not registered */
    651                /* abort */
    652                ICall_abort();
    653                return FAILURE;
    654              }
    655              dst = osal_proxy2alien(destination_task);
    656              hdr->dest_id = TASK_NO_TASK;
    657              if (ICall_send(src, dst, ICALL_MSG_FORMAT_KEEP, msg_ptr) ==
    658                  ICALL_ERRNO_SUCCESS)
    659              {
    660                return SUCCESS;
    661              }
    662              osal_msg_deallocate(msg_ptr);
    663              return FAILURE;
    664            }
    665          #endif /* USE_ICALL */
    666            return ( osal_msg_enqueue_push( destination_task, msg_ptr, FALSE ) );
   \   000005                ; Setup parameters for call to function osal_msg_enqueue_push
   \   000005   7C00         MOV       R4,#0x0
   \   000007                REQUIRE ?Subroutine5
   \   000007                ; // Fall through to label ?Subroutine5
    667          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     `??osal_msg_enqueue_push::?relay`; Banked call to: osal_msg_enqueue_push
   \   000003   80..         SJMP      ??Subroutine29_0
    668          
    669          /*********************************************************************
    670           * @fn      osal_msg_push_front
    671           *
    672           * @brief
    673           *
    674           *    This function is called by a task to push a command message
    675           *    to the head of the OSAL queue. The destination_task field
    676           *    must refer to a valid task, since the task ID will be used to
    677           *    send the message to. This function will also set a message
    678           *    ready event in the destination task's event list.
    679           *
    680           * @param   uint8 destination_task - Send msg to Task ID
    681           * @param   uint8 *msg_ptr - pointer to message buffer
    682           *
    683           * @return  SUCCESS, INVALID_TASK, INVALID_MSG_POINTER
    684           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    685          uint8 osal_msg_push_front( uint8 destination_task, uint8 *msg_ptr )
   \                     osal_msg_push_front:
    686          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    687            return ( osal_msg_enqueue_push( destination_task, msg_ptr, TRUE ) );
   \   000005                ; Setup parameters for call to function osal_msg_enqueue_push
   \   000005   7C01         MOV       R4,#0x1
   \   000007   80..         SJMP      ?Subroutine5
    688          }
    689          
    690          /*********************************************************************
    691           * @fn      osal_msg_enqueue_push
    692           *
    693           * @brief
    694           *
    695           *    This function is called by a task to either enqueue (append to
    696           *    queue) or push (prepend to queue) a command message to the OSAL
    697           *    queue. The destination_task field must refer to a valid task,
    698           *    since the task ID will be used to send the message to. This 
    699           *    function will also set a message ready event in the destination
    700           *    task's event list.
    701           *
    702           * @param   uint8 destination_task - Send msg to Task ID
    703           * @param   uint8 *msg_ptr - pointer to message buffer
    704           * @param   uint8 push - TRUE to push, otherwise enqueue
    705           *
    706           * @return  SUCCESS, INVALID_TASK, INVALID_MSG_POINTER
    707           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    708          static uint8 osal_msg_enqueue_push( uint8 destination_task, uint8 *msg_ptr, uint8 push )
   \                     osal_msg_enqueue_push:
    709          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EC           MOV       A,R4
   \   000008   FF           MOV       R7,A
    710            if ( msg_ptr == NULL )
   \   000009   EA           MOV       A,R2
   \   00000A   4B           ORL       A,R3
   \   00000B   6025         JZ        ??osal_msg_enqueue_push_0
    711            {
    712              return ( INVALID_MSG_POINTER );
    713            }
    714          
    715          #ifdef USE_ICALL
    716            if (destination_task & OSAL_PROXY_ID_FLAG)
    717            {
    718              ICall_abort();
    719            }
    720          #endif /* USE_ICALL */
    721          
    722            if ( destination_task >= tasksCnt )
   \   00000D   90....       MOV       DPTR,#tasksCnt
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F8           MOV       R0,A
   \   000012   E9           MOV       A,R1
   \   000013   C3           CLR       C
   \   000014   98           SUBB      A,R0
   \   000015   4007         JC        ??osal_msg_enqueue_push_1
    723            {
    724              osal_msg_deallocate( msg_ptr );
   \   000017                ; Setup parameters for call to function osal_msg_deallocate
   \   000017   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    725              return ( INVALID_TASK );
   \   00001A   7903         MOV       R1,#0x3
   \   00001C   8042         SJMP      ??osal_msg_enqueue_push_2
    726            }
    727          
    728            // Check the message header
    729            if ( OSAL_MSG_NEXT( msg_ptr ) != NULL ||
    730                 OSAL_MSG_ID( msg_ptr ) != TASK_NO_TASK )
   \                     ??osal_msg_enqueue_push_1:
   \   00001E   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000021   EB           MOV       A,R3
   \   000022   34FF         ADDC      A,#-0x1
   \   000024   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000027   7006         JNZ       ??osal_msg_enqueue_push_3
   \   000029   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00002C   F4           CPL       A
   \   00002D   6007         JZ        ??osal_msg_enqueue_push_4
    731            {
    732              osal_msg_deallocate( msg_ptr );
   \                     ??osal_msg_enqueue_push_3:
   \   00002F                ; Setup parameters for call to function osal_msg_deallocate
   \   00002F   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    733              return ( INVALID_MSG_POINTER );
   \                     ??osal_msg_enqueue_push_0:
   \   000032   7905         MOV       R1,#0x5
   \   000034   802A         SJMP      ??osal_msg_enqueue_push_2
    734            }
    735          
    736            OSAL_MSG_ID( msg_ptr ) = destination_task;
   \                     ??osal_msg_enqueue_push_4:
   \   000036   EE           MOV       A,R6
   \   000037   F0           MOVX      @DPTR,A
    737          
    738            if ( push == TRUE )
   \   000038   7401         MOV       A,#0x1
   \   00003A   6F           XRL       A,R7
   \   00003B   700D         JNZ       ??osal_msg_enqueue_push_5
    739            {
    740              // prepend the message
    741              osal_msg_push( &osal_qHead, msg_ptr );
   \   00003D                ; Setup parameters for call to function osal_msg_push
   \   00003D   EA           MOV       A,R2
   \   00003E   FC           MOV       R4,A
   \   00003F   EB           MOV       A,R3
   \   000040   FD           MOV       R5,A
   \   000041   7A..         MOV       R2,#osal_qHead & 0xff
   \   000043   7B..         MOV       R3,#(osal_qHead >> 8) & 0xff
   \   000045   12....       LCALL     `??osal_msg_push::?relay`; Banked call to: osal_msg_push
   \   000048   800B         SJMP      ??osal_msg_enqueue_push_6
    742            }
    743            else
    744            {
    745              // append the message
    746              osal_msg_enqueue( &osal_qHead, msg_ptr );
   \                     ??osal_msg_enqueue_push_5:
   \   00004A                ; Setup parameters for call to function osal_msg_enqueue
   \   00004A   EA           MOV       A,R2
   \   00004B   FC           MOV       R4,A
   \   00004C   EB           MOV       A,R3
   \   00004D   FD           MOV       R5,A
   \   00004E   7A..         MOV       R2,#osal_qHead & 0xff
   \   000050   7B..         MOV       R3,#(osal_qHead >> 8) & 0xff
   \   000052   12....       LCALL     `??osal_msg_enqueue::?relay`; Banked call to: osal_msg_enqueue
    747            }
    748          
    749            // Signal the task that a message is waiting
    750            osal_set_event( destination_task, SYS_EVENT_MSG );
   \                     ??osal_msg_enqueue_push_6:
   \   000055                ; Setup parameters for call to function osal_set_event
   \   000055   7A00         MOV       R2,#0x0
   \   000057   7B80         MOV       R3,#-0x80
   \   000059   EE           MOV       A,R6
   \   00005A   F9           MOV       R1,A
   \   00005B   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
    751          
    752            return ( SUCCESS );
   \   00005E   7900         MOV       R1,#0x0
   \                     ??osal_msg_enqueue_push_2:
   \   000060   80..         SJMP      ??Subroutine29_0
    753          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   EA           MOV       A,R2
   \   000001                REQUIRE ??Subroutine30_0
   \   000001                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   24FB         ADD       A,#-0x5
   \   000002   F582         MOV       DPL,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine31_0
   \   000002                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   49           ORL       A,R1
   \   000007   22           RET
    754          
    755          /*********************************************************************
    756           * @fn      osal_msg_receive
    757           *
    758           * @brief
    759           *
    760           *    This function is called by a task to retrieve a received command
    761           *    message. The calling task must deallocate the message buffer after
    762           *    processing the message using the osal_msg_deallocate() call.
    763           *
    764           * @param   uint8 task_id - receiving tasks ID
    765           *
    766           * @return  *uint8 - message information or NULL if no message
    767           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    768          uint8 *osal_msg_receive( uint8 task_id )
   \                     osal_msg_receive:
    769          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
    770            osal_msg_hdr_t *listHdr;
    771            osal_msg_hdr_t *prevHdr = NULL;
   \   000005   75..00       MOV       ?V4,#0x0
   \   000008   75..00       MOV       ?V5,#0x0
    772            osal_msg_hdr_t *foundHdr = NULL;
   \   00000B   7E00         MOV       R6,#0x0
   \   00000D   7F00         MOV       R7,#0x0
    773            halIntState_t   intState;
    774          
    775            // Hold off interrupts
    776            HAL_ENTER_CRITICAL_SECTION(intState);
   \   00000F   A2AF         MOV       C,0xa8.7
   \   000011   E4           CLR       A
   \   000012   33           RLC       A
   \   000013   F5..         MOV       ?V2,A
   \   000015   C2AF         CLR       0xa8.7
    777          
    778            // Point to the top of the queue
    779            listHdr = osal_qHead;
   \   000017   90....       MOV       DPTR,#osal_qHead
   \   00001A   8014         SJMP      ??CrossCallReturnLabel_55
    780          
    781            // Look through the queue for a message that belongs to the asking task
    782            while ( listHdr != NULL )
    783            {
    784              if ( (listHdr - 1)->dest_id == task_id )
    785              {
    786                if ( foundHdr == NULL )
    787                {
    788                  // Save the first one
    789                  foundHdr = listHdr;
    790                }
    791                else
    792                {
    793                  // Second msg found, stop looking
    794                  break;
    795                }
    796              }
    797              if ( foundHdr == NULL )
   \                     ??osal_msg_receive_0:
   \   00001C   EE           MOV       A,R6
   \   00001D   4F           ORL       A,R7
   \   00001E   7006         JNZ       ??osal_msg_receive_1
    798              {
    799                prevHdr = listHdr;
   \   000020   85....       MOV       ?V4,?V0
   \   000023   85....       MOV       ?V5,?V1
    800              }
    801              listHdr = OSAL_MSG_NEXT( listHdr );
   \                     ??osal_msg_receive_1:
   \   000026   E5..         MOV       A,?V0
   \   000028   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00002B   E5..         MOV       A,?V1
   \   00002D   12....       LCALL     ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F5..         MOV       ?V0,A
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F5..         MOV       ?V1,A
   \   000037   E5..         MOV       A,?V0
   \   000039   45..         ORL       A,?V1
   \   00003B   6021         JZ        ??osal_msg_receive_2
   \   00003D   E5..         MOV       A,?V0
   \   00003F   24FF         ADD       A,#-0x1
   \   000041   F582         MOV       DPL,A
   \   000043   E5..         MOV       A,?V1
   \   000045   12....       LCALL     ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000048   69           XRL       A,R1
   \   000049   70D1         JNZ       ??osal_msg_receive_0
   \   00004B   EE           MOV       A,R6
   \   00004C   4F           ORL       A,R7
   \   00004D   7006         JNZ       ??osal_msg_receive_3
   \   00004F   AE..         MOV       R6,?V0
   \   000051   AF..         MOV       R7,?V1
   \   000053   80D1         SJMP      ??osal_msg_receive_1
    802            }
    803          
    804            // Is there more than one?
    805            if ( listHdr != NULL )
    806            {
    807              // Yes, Signal the task that a message is waiting
    808              osal_set_event( task_id, SYS_EVENT_MSG );
   \                     ??osal_msg_receive_3:
   \   000055                ; Setup parameters for call to function osal_set_event
   \   000055   7A00         MOV       R2,#0x0
   \   000057   7B80         MOV       R3,#-0x80
   \   000059   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00005C   800B         SJMP      ??osal_msg_receive_4
    809            }
    810            else
    811            {
    812              // No more
    813              osal_clear_event( task_id, SYS_EVENT_MSG );
   \                     ??osal_msg_receive_2:
   \   00005E                ; Setup parameters for call to function osal_clear_event
   \   00005E   7A00         MOV       R2,#0x0
   \   000060   7B80         MOV       R3,#-0x80
   \   000062   12....       LCALL     `??osal_clear_event::?relay`; Banked call to: osal_clear_event
    814            }
    815          
    816            // Did we find a message?
    817            if ( foundHdr != NULL )
   \   000065   EE           MOV       A,R6
   \   000066   4F           ORL       A,R7
   \   000067   6015         JZ        ??osal_msg_receive_5
    818            {
    819              // Take out of the link list
    820              osal_msg_extract( &osal_qHead, foundHdr, prevHdr );
   \                     ??osal_msg_receive_4:
   \   000069                ; Setup parameters for call to function osal_msg_extract
   \   000069   78..         MOV       R0,#?V4
   \   00006B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006E   EE           MOV       A,R6
   \   00006F   FC           MOV       R4,A
   \   000070   EF           MOV       A,R7
   \   000071   FD           MOV       R5,A
   \   000072   7A..         MOV       R2,#osal_qHead & 0xff
   \   000074   7B..         MOV       R3,#(osal_qHead >> 8) & 0xff
   \   000076   12....       LCALL     `??osal_msg_extract::?relay`; Banked call to: osal_msg_extract
   \   000079   7402         MOV       A,#0x2
   \   00007B   12....       LCALL     ?DEALLOC_XSTACK8
    821            }
    822          
    823            // Release interrupts
    824            HAL_EXIT_CRITICAL_SECTION(intState);
   \                     ??osal_msg_receive_5:
   \   00007E   E5..         MOV       A,?V2
   \   000080   A2E0         MOV       C,0xE0 /* A   */.0
   \   000082   92AF         MOV       0xa8.7,C
    825          
    826            return ( (uint8*) foundHdr );
   \   000084   EE           MOV       A,R6
   \   000085   FA           MOV       R2,A
   \   000086   EF           MOV       A,R7
   \   000087   FB           MOV       R3,A
   \   000088   7F06         MOV       R7,#0x6
   \   00008A   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   00008D                REQUIRE _A_IEN0
    827          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   34FF         ADDC      A,#-0x1
   \   000002   F583         MOV       DPH,A
   \   000004   22           RET
    828          
    829          /**************************************************************************************************
    830           * @fn          osal_msg_find
    831           *
    832           * @brief       This function finds in place an OSAL message matching the task_id and event
    833           *              parameters.
    834           *
    835           * input parameters
    836           *
    837           * @param       task_id - The OSAL task id that the enqueued OSAL message must match.
    838           * @param       event - The OSAL event id that the enqueued OSAL message must match.
    839           *
    840           * output parameters
    841           *
    842           * None.
    843           *
    844           * @return      NULL if no match, otherwise an in place pointer to the matching OSAL message.
    845           **************************************************************************************************
    846           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    847          osal_event_hdr_t *osal_msg_find(uint8 task_id, uint8 event)
   \                     osal_msg_find:
    848          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV       A,R2
   \   000005   FC           MOV       R4,A
    849            osal_msg_hdr_t *pHdr;
    850            halIntState_t intState;
    851          
    852            HAL_ENTER_CRITICAL_SECTION(intState);  // Hold off interrupts.
   \   000006   A2AF         MOV       C,0xa8.7
   \   000008   E4           CLR       A
   \   000009   33           RLC       A
   \   00000A   F8           MOV       R0,A
   \   00000B   C2AF         CLR       0xa8.7
    853          
    854            pHdr = osal_qHead;  // Point to the top of the queue.
   \   00000D   90....       MOV       DPTR,#osal_qHead
   \   000010   8007         SJMP      ??CrossCallReturnLabel_56
    855          
    856            // Look through the queue for a message that matches the task_id and event parameters.
    857            while (pHdr != NULL)
    858            {
    859              if (((pHdr-1)->dest_id == task_id) && (((osal_event_hdr_t *)pHdr)->event == event))
    860              {
    861                break;
    862              }
    863          
    864              pHdr = OSAL_MSG_NEXT(pHdr);
   \                     ??osal_msg_find_0:
   \   000012   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000015   EB           MOV       A,R3
   \   000016   12....       LCALL     ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000019   12....       LCALL     ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00001C   EA           MOV       A,R2
   \   00001D   4B           ORL       A,R3
   \   00001E   600E         JZ        ??osal_msg_find_1
   \   000020   12....       LCALL     ?Subroutine17 & 0xFFFF
    865            }
   \                     ??CrossCallReturnLabel_34:
   \   000023   69           XRL       A,R1
   \   000024   70EC         JNZ       ??osal_msg_find_0
   \   000026   8A82         MOV       DPL,R2
   \   000028   8B83         MOV       DPH,R3
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   6C           XRL       A,R4
   \   00002C   70E4         JNZ       ??osal_msg_find_0
    866          
    867            HAL_EXIT_CRITICAL_SECTION(intState);  // Release interrupts.
   \                     ??osal_msg_find_1:
   \   00002E   E8           MOV       A,R0
   \   00002F   A2E0         MOV       C,0xE0 /* A   */.0
   \   000031   92AF         MOV       0xa8.7,C
    868          
    869            return (osal_event_hdr_t *)pHdr;
   \   000033   02....       LJMP      ?Subroutine0 & 0xFFFF
   \   000036                REQUIRE _A_IEN0
    870          }
    871          
    872          /**************************************************************************************************
    873           * @fn          osal_msg_count
    874           *
    875           * @brief       This function counts the number of messages, in the OSAL message queue with a
    876           *              a given task ID and message event type.
    877           *
    878           * input parameters
    879           *
    880           * @param       task_id - The OSAL task id that the enqueued OSAL message must match.
    881           * @param       event - The OSAL event id that the enqueued OSAL message must match. 0xFF for 
    882           *              all events.
    883           *
    884           * output parameters
    885           *
    886           * None.
    887           *
    888           * @return      The number of OSAL messages that match the task ID and Event.
    889           **************************************************************************************************
    890           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000   A2E0         MOV       C,0xE0 /* A   */.0
   \   000002                REQUIRE ??Subroutine28_0
   \   000002                ; // Fall through to label ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   92AF         MOV       0xa8.7,C
   \   000002                REQUIRE ??Subroutine29_0
   \   000002                ; // Fall through to label ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    891          uint8 osal_msg_count( uint8 task_id, uint8 event )
   \                     osal_msg_count:
    892          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FB           MOV       R3,A
    893            uint8 count = 0;
   \   000007   7900         MOV       R1,#0x0
    894            osal_msg_hdr_t *pHdr;
    895            halIntState_t intState;
    896          
    897            HAL_ENTER_CRITICAL_SECTION(intState);  // Hold off interrupts.
   \   000009   A2AF         MOV       C,0xa8.7
   \   00000B   E4           CLR       A
   \   00000C   33           RLC       A
   \   00000D   F8           MOV       R0,A
   \   00000E   C2AF         CLR       0xa8.7
    898          
    899            pHdr = osal_qHead;  // Point to the top of the queue.
   \   000010   90....       MOV       DPTR,#osal_qHead
   \   000013   801D         SJMP      ??CrossCallReturnLabel_63
    900          
    901            // Look through the queue for a message that matches the task_id and event parameters.
    902            while (pHdr != NULL)
    903            {
    904              if ( ((pHdr-1)->dest_id == task_id) 
    905                  && ((event == 0xFF) || (((osal_event_hdr_t *)pHdr)->event == event)) )
   \                     ??osal_msg_count_0:
   \   000015   EC           MOV       A,R4
   \   000016   24FF         ADD       A,#-0x1
   \   000018   F582         MOV       DPL,A
   \   00001A   ED           MOV       A,R5
   \   00001B   12....       LCALL     ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00001E   6B           XRL       A,R3
   \   00001F   700E         JNZ       ??osal_msg_count_1
   \   000021   74FF         MOV       A,#-0x1
   \   000023   6A           XRL       A,R2
   \   000024   6008         JZ        ??osal_msg_count_2
   \   000026   8C82         MOV       DPL,R4
   \   000028   8D83         MOV       DPH,R5
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   6A           XRL       A,R2
   \   00002C   7001         JNZ       ??osal_msg_count_1
    906              {
    907                count++;
   \                     ??osal_msg_count_2:
   \   00002E   09           INC       R1
    908              }
    909          
    910              pHdr = OSAL_MSG_NEXT(pHdr);
   \                     ??osal_msg_count_1:
   \   00002F   12....       LCALL     ?Subroutine19 & 0xFFFF
    911            }
   \                     ??CrossCallReturnLabel_63:
   \   000032   E0           MOVX      A,@DPTR
   \   000033   FC           MOV       R4,A
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   FD           MOV       R5,A
   \   000037   EC           MOV       A,R4
   \   000038   4D           ORL       A,R5
   \   000039   70DA         JNZ       ??osal_msg_count_0
    912          
    913            HAL_EXIT_CRITICAL_SECTION(intState);  // Release interrupts.
   \   00003B   E8           MOV       A,R0
   \   00003C   02....       LJMP      ??Subroutine27_0 & 0xFFFF
   \   00003F                REQUIRE _A_IEN0
    914          
    915            return ( count );
    916          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   EC           MOV       A,R4
   \   000001   24FB         ADD       A,#-0x5
   \   000003                REQUIRE ??Subroutine35_0
   \   000003                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   F582         MOV       DPL,A
   \   000002   ED           MOV       A,R5
   \   000003                REQUIRE ??Subroutine36_0
   \   000003                ; // Fall through to label ??Subroutine36_0
    917          
    918          /*********************************************************************
    919           * @fn      osal_msg_enqueue
    920           *
    921           * @brief
    922           *
    923           *    This function enqueues an OSAL message into an OSAL queue.
    924           *
    925           * @param   osal_msg_q_t *q_ptr - OSAL queue
    926           * @param   void *msg_ptr  - OSAL message
    927           *
    928           * @return  none
    929           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   EE           MOV       A,R6
   \   000002                REQUIRE ??Subroutine27_0
   \   000002                ; // Fall through to label ??Subroutine27_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    930          void osal_msg_enqueue( osal_msg_q_t *q_ptr, void *msg_ptr )
   \                     osal_msg_enqueue:
    931          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    932            void *list;
    933            halIntState_t intState;
    934          
    935            // Hold off interrupts
    936            HAL_ENTER_CRITICAL_SECTION(intState);
   \   000005   A2AF         MOV       C,0xa8.7
   \   000007   E4           CLR       A
   \   000008   33           RLC       A
   \   000009   FE           MOV       R6,A
   \   00000A   C2AF         CLR       0xa8.7
    937          
    938            OSAL_MSG_NEXT( msg_ptr ) = NULL;
   \   00000C   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   12....       LCALL     ??Subroutine32_0 & 0xFFFF
    939            // If first message in queue
    940            if ( *q_ptr == NULL )
   \                     ??CrossCallReturnLabel_48:
   \   000015   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000018   7009         JNZ       ??CrossCallReturnLabel_53
    941            {
    942              *q_ptr = msg_ptr;
   \   00001A   8A82         MOV       DPL,R2
   \   00001C   8B83         MOV       DPH,R3
   \   00001E   8016         SJMP      ??CrossCallReturnLabel_58
    943            }
    944            else
    945            {
    946              // Find end of queue
    947              for ( list = *q_ptr; OSAL_MSG_NEXT( list ) != NULL; list = OSAL_MSG_NEXT( list ) );
   \                     ??osal_msg_enqueue_0:
   \   000020   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000023   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000026   12....       LCALL     ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000029   12....       LCALL     ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00002C   EA           MOV       A,R2
   \   00002D   4B           ORL       A,R3
   \   00002E   70F0         JNZ       ??osal_msg_enqueue_0
    948          
    949              // Add message to end of queue
    950              OSAL_MSG_NEXT( list ) = msg_ptr;
   \   000030   12....       LCALL     ?Subroutine22 & 0xFFFF
    951            }
   \                     ??CrossCallReturnLabel_22:
   \   000033   12....       LCALL     ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000036   EC           MOV       A,R4
   \   000037   F0           MOVX      @DPTR,A
   \   000038   A3           INC       DPTR
   \   000039   ED           MOV       A,R5
   \   00003A   02....       LJMP      ?Subroutine1 & 0xFFFF
   \   00003D                REQUIRE _A_IEN0
    952          
    953            // Re-enable interrupts
    954            HAL_EXIT_CRITICAL_SECTION(intState);
    955          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E8           MOV       A,R0
   \   000001   24FB         ADD       A,#-0x5
   \   000003   F582         MOV       DPL,A
   \   000005   E9           MOV       A,R1
   \   000006                REQUIRE ??Subroutine33_0
   \   000006                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   34FF         ADDC      A,#-0x1
   \   000002   F583         MOV       DPH,A
   \   000004                REQUIRE ??Subroutine34_0
   \   000004                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E8           MOV       A,R0
   \   000001   24FB         ADD       A,#-0x5
   \   000003   F582         MOV       DPL,A
   \   000005   E9           MOV       A,R1
   \   000006   22           RET
    956          
    957          /*********************************************************************
    958           * @fn      osal_msg_dequeue
    959           *
    960           * @brief
    961           *
    962           *    This function dequeues an OSAL message from an OSAL queue.
    963           *
    964           * @param   osal_msg_q_t *q_ptr - OSAL queue
    965           *
    966           * @return  void * - pointer to OSAL message or NULL of queue is empty.
    967           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    968          void *osal_msg_dequeue( osal_msg_q_t *q_ptr )
   \                     osal_msg_dequeue:
    969          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    970            void *msg_ptr = NULL;
   \   000005   7800         MOV       R0,#0x0
   \   000007   7900         MOV       R1,#0x0
    971            halIntState_t intState;
    972          
    973            // Hold off interrupts
    974            HAL_ENTER_CRITICAL_SECTION(intState);
   \   000009   A2AF         MOV       C,0xa8.7
   \   00000B   E4           CLR       A
   \   00000C   33           RLC       A
   \   00000D   FE           MOV       R6,A
   \   00000E   C2AF         CLR       0xa8.7
    975          
    976            if ( *q_ptr != NULL )
   \   000010   8A82         MOV       DPL,R2
   \   000012   8B83         MOV       DPH,R3
   \   000014   E0           MOVX      A,@DPTR
   \   000015   FC           MOV       R4,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   FD           MOV       R5,A
   \   000019   EC           MOV       A,R4
   \   00001A   4D           ORL       A,R5
   \   00001B   6039         JZ        ??osal_msg_dequeue_0
    977            {
    978              // Dequeue message
    979              msg_ptr = *q_ptr;
   \   00001D   8A82         MOV       DPL,R2
   \   00001F   8B83         MOV       DPH,R3
   \   000021   12....       LCALL     ??Subroutine34_0 & 0xFFFF
    980              *q_ptr = OSAL_MSG_NEXT( msg_ptr );
   \                     ??CrossCallReturnLabel_49:
   \   000024   EC           MOV       A,R4
   \   000025   24FB         ADD       A,#-0x5
   \   000027   FC           MOV       R4,A
   \   000028   ED           MOV       A,R5
   \   000029   34FF         ADDC      A,#-0x1
   \   00002B   FD           MOV       R5,A
   \   00002C   8C82         MOV       DPL,R4
   \   00002E   F583         MOV       DPH,A
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F5..         MOV       ?V0,A
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F5..         MOV       ?V1,A
   \   000037   8A82         MOV       DPL,R2
   \   000039   8B83         MOV       DPH,R3
   \   00003B   E5..         MOV       A,?V0
   \   00003D   F0           MOVX      @DPTR,A
   \   00003E   A3           INC       DPTR
   \   00003F   E5..         MOV       A,?V1
   \   000041   F0           MOVX      @DPTR,A
    981              OSAL_MSG_NEXT( msg_ptr ) = NULL;
   \   000042   8C82         MOV       DPL,R4
   \   000044   8D83         MOV       DPH,R5
   \   000046   E4           CLR       A
   \   000047   F0           MOVX      @DPTR,A
   \   000048   A3           INC       DPTR
   \   000049   F0           MOVX      @DPTR,A
    982              OSAL_MSG_ID( msg_ptr ) = TASK_NO_TASK;
   \   00004A   E8           MOV       A,R0
   \   00004B   24FF         ADD       A,#-0x1
   \   00004D   F582         MOV       DPL,A
   \   00004F   E9           MOV       A,R1
   \   000050   12....       LCALL     ??Subroutine36_0 & 0xFFFF
    983            }
   \                     ??CrossCallReturnLabel_59:
   \   000053   74FF         MOV       A,#-0x1
   \   000055   F0           MOVX      @DPTR,A
    984          
    985            // Re-enable interrupts
    986            HAL_EXIT_CRITICAL_SECTION(intState);
   \                     ??osal_msg_dequeue_0:
   \   000056   EE           MOV       A,R6
   \   000057   A2E0         MOV       C,0xE0 /* A   */.0
   \   000059   92AF         MOV       0xa8.7,C
    987          
    988            return msg_ptr;
   \   00005B   E8           MOV       A,R0
   \   00005C   FA           MOV       R2,A
   \   00005D   E9           MOV       A,R1
   \   00005E   FB           MOV       R3,A
   \   00005F                REQUIRE ?Subroutine2
   \   00005F                REQUIRE _A_IEN0
   \   00005F                ; // Fall through to label ?Subroutine2
    989          }
    990          
    991          /*********************************************************************
    992           * @fn      osal_msg_push
    993           *
    994           * @brief
    995           *
    996           *    This function pushes an OSAL message to the head of an OSAL
    997           *    queue.
    998           *
    999           * @param   osal_msg_q_t *q_ptr - OSAL queue
   1000           * @param   void *msg_ptr  - OSAL message
   1001           *
   1002           * @return  none
   1003           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1004          void osal_msg_push( osal_msg_q_t *q_ptr, void *msg_ptr )
   \                     osal_msg_push:
   1005          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1006            halIntState_t intState;
   1007          
   1008            // Hold off interrupts
   1009            HAL_ENTER_CRITICAL_SECTION(intState);
   \   000005   A8A8         MOV       R0,0xa8+0x0
   \   000007   C2AF         CLR       0xa8.7
   1010          
   1011            // Push message to head of queue
   1012            OSAL_MSG_NEXT( msg_ptr ) = *q_ptr;
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   FE           MOV       R6,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   FF           MOV       R7,A
   \   000012   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000015   12....       LCALL     ?Subroutine18 & 0xFFFF
   1013            *q_ptr = msg_ptr;
   \                     ??CrossCallReturnLabel_46:
   \   000018   EC           MOV       A,R4
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   A3           INC       DPTR
   \   00001B   ED           MOV       A,R5
   \   00001C   F0           MOVX      @DPTR,A
   1014          
   1015            // Re-enable interrupts
   1016            HAL_EXIT_CRITICAL_SECTION(intState);
   \   00001D   E8           MOV       A,R0
   \   00001E   A2E7         MOV       C,0xE0 /* A   */.7
   \   000020   02....       LJMP      ??Subroutine28_0 & 0xFFFF
   \   000023                REQUIRE _A_IEN0
   1017          }
   1018          
   1019          /*********************************************************************
   1020           * @fn      osal_msg_extract
   1021           *
   1022           * @brief
   1023           *
   1024           *    This function extracts and removes an OSAL message from the
   1025           *    middle of an OSAL queue.
   1026           *
   1027           * @param   osal_msg_q_t *q_ptr - OSAL queue
   1028           * @param   void *msg_ptr  - OSAL message to be extracted
   1029           * @param   void *prev_ptr  - OSAL message before msg_ptr in queue
   1030           *
   1031           * @return  none
   1032           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1033          void osal_msg_extract( osal_msg_q_t *q_ptr, void *msg_ptr, void *prev_ptr )
   \                     osal_msg_extract:
   1034          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1035            halIntState_t intState;
   1036          
   1037            // Hold off interrupts
   1038            HAL_ENTER_CRITICAL_SECTION(intState);
   \   000005   A2AF         MOV       C,0xa8.7
   \   000007   E4           CLR       A
   \   000008   33           RLC       A
   \   000009   FE           MOV       R6,A
   \   00000A   C2AF         CLR       0xa8.7
   1039          
   1040            if ( msg_ptr == *q_ptr )
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   12....       LCALL     ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000013   EC           MOV       A,R4
   \   000014   68           XRL       A,R0
   \   000015   7002         JNZ       ??osal_msg_extract_0
   \   000017   ED           MOV       A,R5
   \   000018   69           XRL       A,R1
   \                     ??osal_msg_extract_0:
   \   000019   700E         JNZ       ??osal_msg_extract_1
   1041            {
   1042              // remove from first
   1043              *q_ptr = OSAL_MSG_NEXT( msg_ptr );
   \   00001B   EC           MOV       A,R4
   \   00001C   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   1044            }
   \                     ??CrossCallReturnLabel_36:
   \   00001F   ED           MOV       A,R5
   \   000020   12....       LCALL     ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000023   8A82         MOV       DPL,R2
   \   000025   8B83         MOV       DPH,R3
   \   000027   8019         SJMP      ??CrossCallReturnLabel_60
   1045            else
   1046            {
   1047              // remove from middle
   1048              OSAL_MSG_NEXT( prev_ptr ) = OSAL_MSG_NEXT( msg_ptr );
   \                     ??osal_msg_extract_1:
   \   000029   EC           MOV       A,R4
   \   00002A   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   1049            }
   \                     ??CrossCallReturnLabel_37:
   \   00002D   ED           MOV       A,R5
   \   00002E   12....       LCALL     ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000031   7409         MOV       A,#0x9
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   E0           MOVX      A,@DPTR
   \   000037   FA           MOV       R2,A
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   CA           XCH       A,R2
   \   00003B   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00003E   EA           MOV       A,R2
   \   00003F   12....       LCALL     ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000042   E8           MOV       A,R0
   \   000043   F0           MOVX      @DPTR,A
   \   000044   A3           INC       DPTR
   \   000045   E9           MOV       A,R1
   \   000046   F0           MOVX      @DPTR,A
   1050            OSAL_MSG_NEXT( msg_ptr ) = NULL;
   \   000047   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00004A   E4           CLR       A
   \   00004B   F0           MOVX      @DPTR,A
   \   00004C   A3           INC       DPTR
   \   00004D   F0           MOVX      @DPTR,A
   1051            OSAL_MSG_ID( msg_ptr ) = TASK_NO_TASK;
   \   00004E   EC           MOV       A,R4
   \   00004F   24FF         ADD       A,#-0x1
   \   000051   12....       LCALL     ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000054   74FF         MOV       A,#-0x1
   \   000056   02....       LJMP      ?Subroutine1 & 0xFFFF
   \   000059                REQUIRE _A_IEN0
   1052          
   1053            // Re-enable interrupts
   1054            HAL_EXIT_CRITICAL_SECTION(intState);
   1055          }
   1056          
   1057          /*********************************************************************
   1058           * @fn      osal_msg_enqueue_max
   1059           *
   1060           * @brief
   1061           *
   1062           *    This function enqueues an OSAL message into an OSAL queue if
   1063           *    the length of the queue is less than max.
   1064           *
   1065           * @param   osal_msg_q_t *q_ptr - OSAL queue
   1066           * @param   void *msg_ptr  - OSAL message
   1067           * @param   uint8 max - maximum length of queue
   1068           *
   1069           * @return  TRUE if message was enqueued, FALSE otherwise
   1070           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1071          uint8 osal_msg_enqueue_max( osal_msg_q_t *q_ptr, void *msg_ptr, uint8 max )
   \                     osal_msg_enqueue_max:
   1072          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V0,R1
   1073            void *list;
   1074            uint8 ret = FALSE;
   \   00000B   7A00         MOV       R2,#0x0
   1075            halIntState_t intState;
   1076          
   1077            // Hold off interrupts
   1078            HAL_ENTER_CRITICAL_SECTION(intState);
   \   00000D   A2AF         MOV       C,0xa8.7
   \   00000F   E4           CLR       A
   \   000010   33           RLC       A
   \   000011   FB           MOV       R3,A
   \   000012   C2AF         CLR       0xa8.7
   1079          
   1080            // If first message in queue
   1081            if ( *q_ptr == NULL )
   \   000014   8E82         MOV       DPL,R6
   \   000016   8F83         MOV       DPH,R7
   \   000018   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00001B   700D         JNZ       ??CrossCallReturnLabel_54
   1082            {
   1083              *q_ptr = msg_ptr;
   \   00001D   8E82         MOV       DPL,R6
   \   00001F   8F83         MOV       DPH,R7
   \   000021   8021         SJMP      ??CrossCallReturnLabel_61
   1084              ret = TRUE;
   1085            }
   1086            else
   1087            {
   1088              // Find end of queue or max
   1089              list = *q_ptr;
   1090              max--;
   1091              while ( (OSAL_MSG_NEXT( list ) != NULL) && (max > 0) )
   \                     ??osal_msg_enqueue_max_0:
   \   000023   E5..         MOV       A,?V0
   \   000025   6024         JZ        ??osal_msg_enqueue_max_1
   1092              {
   1093                list = OSAL_MSG_NEXT( list );
   \   000027   12....       LCALL     ?Subroutine10 & 0xFFFF
   1094                max--;
   \                     ??CrossCallReturnLabel_54:
   \   00002A   15..         DEC       ?V0
   1095              }
   \   00002C   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00002F   12....       LCALL     ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000032   FE           MOV       R6,A
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   FF           MOV       R7,A
   \   000036   EE           MOV       A,R6
   \   000037   4F           ORL       A,R7
   \   000038   70E9         JNZ       ??osal_msg_enqueue_max_0
   1096          
   1097              // Add message to end of queue if max not reached
   1098              if ( max != 0 )
   \   00003A   E5..         MOV       A,?V0
   \   00003C   600D         JZ        ??osal_msg_enqueue_max_1
   1099              {
   1100                OSAL_MSG_NEXT( list ) = msg_ptr;
   \   00003E   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000041   12....       LCALL     ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000044   EC           MOV       A,R4
   \   000045   F0           MOVX      @DPTR,A
   \   000046   A3           INC       DPTR
   \   000047   ED           MOV       A,R5
   \   000048   F0           MOVX      @DPTR,A
   1101                ret = TRUE;
   \   000049   7A01         MOV       R2,#0x1
   1102              }
   1103            }
   1104          
   1105            // Re-enable interrupts
   1106            HAL_EXIT_CRITICAL_SECTION(intState);
   \                     ??osal_msg_enqueue_max_1:
   \   00004B   EB           MOV       A,R3
   \   00004C   A2E0         MOV       C,0xE0 /* A   */.0
   \   00004E   92AF         MOV       0xa8.7,C
   1107          
   1108            return ret;
   \   000050   EA           MOV       A,R2
   \   000051   F9           MOV       R1,A
   \   000052   02....       LJMP      ??Subroutine29_0 & 0xFFFF
   \   000055                REQUIRE _A_IEN0
   1109          }
   1110          
   1111          /*********************************************************************
   1112           * @fn      osal_set_event
   1113           *
   1114           * @brief
   1115           *
   1116           *    This function is called to set the event flags for a task. The
   1117           *    event passed in is OR'd into the task's event variable.
   1118           *
   1119           * @param   uint8 task_id - receiving tasks ID
   1120           * @param   uint8 event_flag - what event to set
   1121           *
   1122           * @return  SUCCESS, MSG_BUFFER_NOT_AVAIL, FAILURE, INVALID_TASK
   1123           */
   1124          #ifdef OSAL_PORT2TIRTOS
   1125          uint8 osal_set_event_raw( uint8 task_id, uint16 event_flag )
   1126          #else /* OSAL_PORT2TIRTOS */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1127          uint8 osal_set_event( uint8 task_id, uint16 event_flag )
   \                     osal_set_event:
   1128          #endif /* OSAL_PORT2TIRTOS */
   1129          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1130          #ifdef USE_ICALL
   1131            if (task_id & OSAL_PROXY_ID_FLAG)
   1132            {
   1133              /* Destination is a proxy task */
   1134              osal_msg_hdr_t *hdr;
   1135              ICall_EntityID src, dst;
   1136              uint8 taskid;
   1137          
   1138              struct _osal_event_msg_t
   1139              {
   1140                uint16 signature;
   1141                uint16 event_flag;
   1142              } *msg_ptr = (struct _osal_event_msg_t *)
   1143                osal_msg_allocate(sizeof(*msg_ptr));
   1144          
   1145              if (!msg_ptr)
   1146              {
   1147                return MSG_BUFFER_NOT_AVAIL;
   1148              }
   1149              msg_ptr->signature = 0xffffu;
   1150              msg_ptr->event_flag = event_flag;
   1151              hdr = (osal_msg_hdr_t *)msg_ptr - 1;
   1152          
   1153              taskid = osal_self();
   1154              if (taskid == TASK_NO_TASK)
   1155              {
   1156                /* Call must have been made from either an ISR or a user-thread */
   1157                src = osal_notask_entity;
   1158              }
   1159              else
   1160              {
   1161                src = (ICall_EntityID) osal_dispatch_entities[taskid + tasksCnt];
   1162              }
   1163          
   1164              if (src == OSAL_INVALID_DISPATCH_ID)
   1165              {
   1166                /* The source entity is not registered */
   1167                osal_msg_deallocate((uint8 *) msg_ptr);
   1168                ICall_abort();
   1169                return FAILURE;
   1170              }
   1171              dst = osal_proxy2alien(task_id);
   1172              hdr->dest_id = TASK_NO_TASK;
   1173              if (ICall_send(src, dst,
   1174                             ICALL_MSG_FORMAT_KEEP, msg_ptr) ==
   1175                  ICALL_ERRNO_SUCCESS)
   1176              {
   1177                return SUCCESS;
   1178              }
   1179              osal_msg_deallocate((uint8 *) msg_ptr);
   1180              return FAILURE;
   1181            }
   1182          #endif /* USE_ICALL */
   1183          
   1184            if ( task_id < tasksCnt )
   \   000005   90....       MOV       DPTR,#tasksCnt
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F8           MOV       R0,A
   \   00000A   E9           MOV       A,R1
   \   00000B   C3           CLR       C
   \   00000C   98           SUBB      A,R0
   \   00000D   5027         JNC       ??osal_set_event_0
   1185            {
   1186              halIntState_t   intState;
   1187              HAL_ENTER_CRITICAL_SECTION(intState);    // Hold off interrupts
   \   00000F   ACA8         MOV       R4,0xa8+0x0
   \   000011   C2AF         CLR       0xa8.7
   1188              tasksEvents[task_id] |= event_flag;  // Stuff the event bit(s)
   \   000013   E9           MOV       A,R1
   \   000014   29           ADD       A,R1
   \   000015   F8           MOV       R0,A
   \   000016   E4           CLR       A
   \   000017   33           RLC       A
   \   000018   F9           MOV       R1,A
   \   000019   90....       MOV       DPTR,#tasksEvents
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   28           ADD       A,R0
   \   00001E   FD           MOV       R5,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   39           ADDC      A,R1
   \   000022   8D82         MOV       DPL,R5
   \   000024   F583         MOV       DPH,A
   \   000026   E0           MOVX      A,@DPTR
   \   000027   4A           ORL       A,R2
   \   000028   F0           MOVX      @DPTR,A
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   4B           ORL       A,R3
   \   00002C   F0           MOVX      @DPTR,A
   1189              HAL_EXIT_CRITICAL_SECTION(intState);     // Release interrupts
   \   00002D   EC           MOV       A,R4
   \   00002E   A2E7         MOV       C,0xE0 /* A   */.7
   \   000030   92AF         MOV       0xa8.7,C
   1190          #ifdef USE_ICALL
   1191              ICall_signal(osal_semaphore);
   1192          #endif /* USE_ICALL */
   1193              return ( SUCCESS );
   \   000032   7900         MOV       R1,#0x0
   \   000034   8002         SJMP      ??osal_set_event_1
   1194            }
   1195             else
   1196            {
   1197              return ( INVALID_TASK );
   \                     ??osal_set_event_0:
   \   000036   7903         MOV       R1,#0x3
   1198            }
   \                     ??osal_set_event_1:
   \   000038   02....       LJMP      ??Subroutine29_0 & 0xFFFF
   \   00003B                REQUIRE _A_IEN0
   1199          }
   1200          
   1201          /*********************************************************************
   1202           * @fn      osal_clear_event
   1203           *
   1204           * @brief
   1205           *
   1206           *    This function is called to clear the event flags for a task. The
   1207           *    event passed in is masked out of the task's event variable.
   1208           *
   1209           * @param   uint8 task_id - receiving tasks ID
   1210           * @param   uint8 event_flag - what event to clear
   1211           *
   1212           * @return  SUCCESS, INVALID_TASK
   1213           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1214          uint8 osal_clear_event( uint8 task_id, uint16 event_flag )
   \                     osal_clear_event:
   1215          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1216            if ( task_id < tasksCnt )
   \   000005   90....       MOV       DPTR,#tasksCnt
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F8           MOV       R0,A
   \   00000A   E9           MOV       A,R1
   \   00000B   C3           CLR       C
   \   00000C   98           SUBB      A,R0
   \   00000D   5021         JNC       ??osal_clear_event_0
   1217            {
   1218              halIntState_t   intState;
   1219              HAL_ENTER_CRITICAL_SECTION(intState);    // Hold off interrupts
   \   00000F   AEA8         MOV       R6,0xa8+0x0
   \   000011   C2AF         CLR       0xa8.7
   1220              tasksEvents[task_id] &= ~(event_flag);   // Clear the event bit(s)
   \   000013   EA           MOV       A,R2
   \   000014   F4           CPL       A
   \   000015   FC           MOV       R4,A
   \   000016   EB           MOV       A,R3
   \   000017   F4           CPL       A
   \   000018   FD           MOV       R5,A
   \   000019   E9           MOV       A,R1
   \   00001A   29           ADD       A,R1
   \   00001B   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00001E   F583         MOV       DPH,A
   \   000020   E0           MOVX      A,@DPTR
   \   000021   5C           ANL       A,R4
   \   000022   F0           MOVX      @DPTR,A
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   5D           ANL       A,R5
   \   000026   F0           MOVX      @DPTR,A
   1221              HAL_EXIT_CRITICAL_SECTION(intState);     // Release interrupts
   \   000027   EE           MOV       A,R6
   \   000028   A2E7         MOV       C,0xE0 /* A   */.7
   \   00002A   92AF         MOV       0xa8.7,C
   1222              return ( SUCCESS );
   \   00002C   7900         MOV       R1,#0x0
   \   00002E   8002         SJMP      ??osal_clear_event_1
   1223            }
   1224             else
   1225            {
   1226              return ( INVALID_TASK );
   \                     ??osal_clear_event_0:
   \   000030   7903         MOV       R1,#0x3
   1227            }
   \                     ??osal_clear_event_1:
   \   000032   02....       LJMP      ??Subroutine29_0 & 0xFFFF
   \   000035                REQUIRE _A_IEN0
   1228          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   33           RLC       A
   \   000003   F9           MOV       R1,A
   \   000004   90....       MOV       DPTR,#tasksEvents
   \   000007   E0           MOVX      A,@DPTR
   \   000008   28           ADD       A,R0
   \   000009   FA           MOV       R2,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   39           ADDC      A,R1
   \   00000D   8A82         MOV       DPL,R2
   \   00000F   22           RET
   1229          
   1230          /*********************************************************************
   1231           * @fn      osal_isr_register
   1232           *
   1233           * @brief
   1234           *
   1235           *   This function is called to register a service routine with an
   1236           *   interrupt. When the interrupt occurs, this service routine is called.
   1237           *
   1238           * @param   uint8 interrupt_id - Interrupt number
   1239           * @param   void (*isr_ptr)( uint8* ) - function pointer to ISR
   1240           *
   1241           * @return  SUCCESS, INVALID_INTERRUPT_ID,
   1242           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1243          uint8 osal_isr_register( uint8 interrupt_id, void (*isr_ptr)( uint8* ) )
   \                     osal_isr_register:
   1244          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1245            // Remove these statements when functionality is complete
   1246            (void)interrupt_id;
   1247            (void)isr_ptr;
   1248            return ( SUCCESS );
   \   000000   7900         MOV       R1,#0x0
   \   000002   02....       LJMP      ?BRET
   1249          }
   1250          
   1251          /*********************************************************************
   1252           * @fn      osal_int_enable
   1253           *
   1254           * @brief
   1255           *
   1256           *   This function is called to enable an interrupt. Once enabled,
   1257           *   occurrence of the interrupt causes the service routine associated
   1258           *   with that interrupt to be called.
   1259           *
   1260           *   If INTS_ALL is the interrupt_id, interrupts (in general) are enabled.
   1261           *   If a single interrupt is passed in, then interrupts still have
   1262           *   to be enabled with another call to INTS_ALL.
   1263           *
   1264           * @param   uint8 interrupt_id - Interrupt number
   1265           *
   1266           * @return  SUCCESS or INVALID_INTERRUPT_ID
   1267           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1268          uint8 osal_int_enable( uint8 interrupt_id )
   \                     osal_int_enable:
   1269          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   \   000001   F8           MOV       R0,A
   1270          
   1271            if ( interrupt_id == INTS_ALL )
   \   000002   74FF         MOV       A,#-0x1
   \   000004   68           XRL       A,R0
   \   000005   7006         JNZ       ??osal_int_enable_0
   1272            {
   1273              HAL_ENABLE_INTERRUPTS();
   \   000007   D2AF         SETB      0xa8.7
   1274              return ( SUCCESS );
   \   000009   7900         MOV       R1,#0x0
   \   00000B   8002         SJMP      ??osal_int_enable_1
   1275            }
   1276            else
   1277            {
   1278              return ( INVALID_INTERRUPT_ID );
   \                     ??osal_int_enable_0:
   \   00000D   7907         MOV       R1,#0x7
   \                     ??osal_int_enable_1:
   \   00000F   02....       LJMP      ?BRET
   \   000012                REQUIRE _A_IEN0
   1279            }
   1280          }
   1281          
   1282          /*********************************************************************
   1283           * @fn      osal_int_disable
   1284           *
   1285           * @brief
   1286           *
   1287           *   This function is called to disable an interrupt. When a disabled
   1288           *   interrupt occurs, the service routine associated with that
   1289           *   interrupt is not called.
   1290           *
   1291           *   If INTS_ALL is the interrupt_id, interrupts (in general) are disabled.
   1292           *   If a single interrupt is passed in, then just that interrupt is disabled.
   1293           *
   1294           * @param   uint8 interrupt_id - Interrupt number
   1295           *
   1296           * @return  SUCCESS or INVALID_INTERRUPT_ID
   1297           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1298          uint8 osal_int_disable( uint8 interrupt_id )
   \                     osal_int_disable:
   1299          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   \   000001   F8           MOV       R0,A
   1300          
   1301            if ( interrupt_id == INTS_ALL )
   \   000002   74FF         MOV       A,#-0x1
   \   000004   68           XRL       A,R0
   \   000005   7006         JNZ       ??osal_int_disable_0
   1302            {
   1303              HAL_DISABLE_INTERRUPTS();
   \   000007   C2AF         CLR       0xa8.7
   1304              return ( SUCCESS );
   \   000009   7900         MOV       R1,#0x0
   \   00000B   8002         SJMP      ??osal_int_disable_1
   1305            }
   1306            else
   1307            {
   1308              return ( INVALID_INTERRUPT_ID );
   \                     ??osal_int_disable_0:
   \   00000D   7907         MOV       R1,#0x7
   \                     ??osal_int_disable_1:
   \   00000F   02....       LJMP      ?BRET
   \   000012                REQUIRE _A_IEN0
   1309            }
   1310          }
   1311          
   1312          /*********************************************************************
   1313           * @fn      osal_init_system
   1314           *
   1315           * @brief
   1316           *
   1317           *   This function initializes the "task" system by creating the
   1318           *   tasks defined in the task table (OSAL_Tasks.h).
   1319           *
   1320           * @param   void
   1321           *
   1322           * @return  SUCCESS
   1323           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1324          uint8 osal_init_system( void )
   \                     osal_init_system:
   1325          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1326          #if !defined USE_ICALL && !defined OSAL_PORT2TIRTOS
   1327            // Initialize the Memory Allocation System
   1328            osal_mem_init();
   \   000004                ; Setup parameters for call to function osal_mem_init
   \   000004   12....       LCALL     `??osal_mem_init::?relay`; Banked call to: osal_mem_init
   1329          #endif /* !defined USE_ICALL && !defined OSAL_PORT2TIRTOS */
   1330          
   1331            // Initialize the message queue
   1332            osal_qHead = NULL;
   \   000007   90....       MOV       DPTR,#osal_qHead
   \   00000A   E4           CLR       A
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   A3           INC       DPTR
   \   00000D   F0           MOVX      @DPTR,A
   1333          
   1334            // Initialize the timers
   1335            osalTimerInit();
   \   00000E                ; Setup parameters for call to function osalTimerInit
   \   00000E   12....       LCALL     `??osalTimerInit::?relay`; Banked call to: osalTimerInit
   1336          
   1337            // Initialize the Power Management System
   1338            osal_pwrmgr_init();
   \   000011                ; Setup parameters for call to function osal_pwrmgr_init
   \   000011   12....       LCALL     `??osal_pwrmgr_init::?relay`; Banked call to: osal_pwrmgr_init
   1339          
   1340          #ifdef USE_ICALL
   1341            /* Prepare memory space for service enrollment */
   1342            osal_prepare_svc_enroll();
   1343          #endif /* USE_ICALL */
   1344          
   1345            // Initialize the system tasks.
   1346            osalInitTasks();
   \   000014                ; Setup parameters for call to function osalInitTasks
   \   000014   12....       LCALL     `??osalInitTasks::?relay`; Banked call to: osalInitTasks
   1347          
   1348          #if !defined USE_ICALL && !defined OSAL_PORT2TIRTOS
   1349            // Setup efficient search for the first free block of heap.
   1350            osal_mem_kick();
   \   000017                ; Setup parameters for call to function osal_mem_kick
   \   000017   12....       LCALL     `??osal_mem_kick::?relay`; Banked call to: osal_mem_kick
   1351          #endif /* !defined USE_ICALL && !defined OSAL_PORT2TIRTOS */
   1352          
   1353          #ifdef USE_ICALL
   1354            // Initialize variables used to track timing and provide OSAL timer service
   1355            osal_last_timestamp = (uint_least32_t) ICall_getTicks();
   1356            osal_tickperiod = (uint_least32_t) ICall_getTickPeriod();
   1357            osal_max_msecs = (uint_least32_t) ICall_getMaxMSecs();
   1358            /* Reduce ceiling considering potential latency */
   1359            osal_max_msecs -= 2;
   1360          #endif /* USE_ICALL */
   1361          
   1362            return ( SUCCESS );
   \   00001A   7900         MOV       R1,#0x0
   \   00001C   02....       LJMP      ?Subroutine0 & 0xFFFF
   1363          }
   1364          
   1365          /*********************************************************************
   1366           * @fn      osal_start_system
   1367           *
   1368           * @brief
   1369           *
   1370           *   This function is the main loop function of the task system (if
   1371           *   ZBIT and UBIT are not defined). This Function doesn't return.
   1372           *
   1373           * @param   void
   1374           *
   1375           * @return  none
   1376           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1377          void osal_start_system( void )
   \                     osal_start_system:
   1378          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1379          #ifdef USE_ICALL
   1380            /* Kick off timer service in order to allocate resources upfront.
   1381             * The first timeout is required to schedule next OSAL timer event
   1382             * as well. */
   1383            ICall_Errno errno = ICall_setTimer(1, osal_msec_timer_cback,
   1384                                               (void *) osal_msec_timer_seq,
   1385                                               &osal_timerid_msec_timer);
   1386            if (errno != ICALL_ERRNO_SUCCESS)
   1387            {
   1388              ICall_abort();
   1389            }
   1390          #endif /* USE_ICALL */
   1391          
   1392          #if !defined ( ZBIT ) && !defined ( UBIT )
   1393            for(;;)  // Forever Loop
   1394          #endif
   1395            {
   1396              osal_run_system();
   \                     ??osal_start_system_0:
   \   000004                ; Setup parameters for call to function osal_run_system
   \   000004   12....       LCALL     `??osal_run_system::?relay`; Banked call to: osal_run_system
   \   000007   80FB         SJMP      ??osal_start_system_0
   1397          
   1398          #ifdef USE_ICALL
   1399              ICall_wait(ICALL_TIMEOUT_FOREVER);
   1400          #endif /* USE_ICALL */
   1401            }
   1402          }
   1403          
   1404          #ifdef USE_ICALL
   1405          /*********************************************************************
   1406           * @fn      osal_alien2proxy
   1407           *
   1408           * @brief
   1409           *
   1410           *   Assign or retrieve a proxy OSAL task id for an external ICall entity.
   1411           *
   1412           * @param   origid  ICall entity id
   1413           *
   1414           * @return  proxy OSAL task id
   1415           */
   1416          static uint8 osal_alien2proxy(ICall_EntityID origid)
   1417          {
   1418            size_t i;
   1419          
   1420            for (i = 0; i < OSAL_MAX_NUM_PROXY_TASKS; i++)
   1421            {
   1422              if (osal_proxy_tasks[i] == OSAL_INVALID_DISPATCH_ID)
   1423              {
   1424                /* proxy not found. Create a new one */
   1425                osal_proxy_tasks[i] = (uint8) origid;
   1426                return (OSAL_PROXY_ID_FLAG | i);
   1427              }
   1428              else if ((ICall_EntityID) osal_proxy_tasks[i] == origid)
   1429              {
   1430                return (OSAL_PROXY_ID_FLAG | i);
   1431              }
   1432            }
   1433            /* abort */
   1434            ICall_abort();
   1435            return TASK_NO_TASK;
   1436          }
   1437          
   1438          /*********************************************************************
   1439           * @fn      osal_proxy2alien
   1440           *
   1441           * @brief
   1442           *
   1443           *   Retrieve the ICall entity id for a proxy OSAL task id
   1444           *
   1445           * @param   proxyid  Proxy OSAL task id
   1446           *
   1447           * @return  ICall entity id
   1448           */
   1449          static ICall_EntityID osal_proxy2alien(uint8 proxyid)
   1450          {
   1451            proxyid ^= OSAL_PROXY_ID_FLAG;
   1452            if (proxyid >= OSAL_MAX_NUM_PROXY_TASKS)
   1453            {
   1454              /* abort */
   1455              ICall_abort();
   1456            }
   1457            return (ICall_EntityID) osal_proxy_tasks[proxyid];
   1458          }
   1459          
   1460          /*********************************************************************
   1461           * @fn      osal_dispatch2id
   1462           *
   1463           * @brief
   1464           *
   1465           *   Retrieve OSAL task id mapped to a designated ICall entity id
   1466           *
   1467           * @param   entity  ICall entity id
   1468           *
   1469           * @return  OSAL task id
   1470           */
   1471          static uint8 osal_dispatch2id(ICall_EntityID entity)
   1472          {
   1473            size_t i;
   1474          
   1475            for (i = 0; i < tasksCnt; i++)
   1476            {
   1477              if ((ICall_EntityID) osal_dispatch_entities[i] == entity)
   1478              {
   1479                return i;
   1480              }
   1481            }
   1482            return TASK_NO_TASK;
   1483          }
   1484          
   1485          /*********************************************************************
   1486           * @fn      osal_msec_timer_cback
   1487           *
   1488           * @brief
   1489           *
   1490           *   This function is a callback function for ICall_setTimer() service
   1491           *   used to implement OSAL timer
   1492           *
   1493           * @param   arg  In this case, the timer sequence number is passed.
   1494           *
   1495           * @return  None
   1496           */
   1497          static void osal_msec_timer_cback(void *arg)
   1498          {
   1499            unsigned seq = (unsigned) arg;
   1500            halIntState_t intState;
   1501          
   1502            HAL_ENTER_CRITICAL_SECTION(intState);
   1503            if (seq == osal_msec_timer_seq)
   1504            {
   1505              ICall_signal(osal_semaphore);
   1506            }
   1507            HAL_EXIT_CRITICAL_SECTION(intState);
   1508          }
   1509          
   1510          /*********************************************************************
   1511           * @fn      osal_service_entry
   1512           *
   1513           * @brief
   1514           *
   1515           *   This function is service function for messaging service
   1516           *
   1517           * @param   args  arguments.
   1518           *
   1519           * @return  ICall error code
   1520           */
   1521          ICall_Errno osal_service_entry(ICall_FuncArgsHdr *args)
   1522          {
   1523            if (args->func == ICALL_MSG_FUNC_GET_LOCAL_MSG_ENTITY_ID)
   1524            {
   1525              /* Get proxy ID */
   1526              ((ICall_GetLocalMsgEntityIdArgs *)args)->localId =
   1527                osal_alien2proxy(((ICall_GetLocalMsgEntityIdArgs *)args)->entity);
   1528              if (((ICall_GetLocalMsgEntityIdArgs *)args)->localId == TASK_NO_TASK)
   1529              {
   1530                return ICALL_ERRNO_NO_RESOURCE;
   1531              }
   1532            }
   1533            else
   1534            {
   1535              return ICALL_ERRNO_INVALID_FUNCTION;
   1536            }
   1537            return ICALL_ERRNO_SUCCESS;
   1538          }
   1539          #endif /* USE_ICALL */
   1540          
   1541          /*********************************************************************
   1542           * @fn      osal_run_system
   1543           *
   1544           * @brief
   1545           *
   1546           *   This function will make one pass through the OSAL taskEvents table
   1547           *   and call the task_event_processor() function for the first task that
   1548           *   is found with at least one event pending. If there are no pending
   1549           *   events (all tasks), this function puts the processor into Sleep.
   1550           *
   1551           * @param   void
   1552           *
   1553           * @return  none
   1554           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1555          void osal_run_system( void )
   \                     osal_run_system:
   1556          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1557            uint8 idx = 0;
   \   000005   75..00       MOV       ?V0,#0x0
   1558          
   1559          #ifdef USE_ICALL
   1560            uint32 next_timeout_prior = osal_next_timeout();
   1561          #else /* USE_ICALL */
   1562          #ifndef HAL_BOARD_CC2538
   1563            osalTimeUpdate();
   \   000008                ; Setup parameters for call to function osalTimeUpdate
   \   000008   12....       LCALL     `??osalTimeUpdate::?relay`; Banked call to: osalTimeUpdate
   1564          #endif
   1565          
   1566            Hal_ProcessPoll();
   \   00000B                ; Setup parameters for call to function Hal_ProcessPoll
   \   00000B   12....       LCALL     `??Hal_ProcessPoll::?relay`; Banked call to: Hal_ProcessPoll
   1567          #endif /* USE_ICALL */
   1568          
   1569          #ifdef USE_ICALL
   1570            {
   1571              /* Update osal timers to the latest before running any OSAL processes
   1572               * regardless of wakeup callback from ICall because OSAL timers are added
   1573               * relative to the current time. */
   1574              unsigned long newtimestamp = ICall_getTicks();
   1575              uint32 milliseconds;
   1576          
   1577              if (osal_tickperiod == 1000)
   1578              {
   1579                milliseconds = newtimestamp - osal_last_timestamp;
   1580                osal_last_timestamp = newtimestamp;
   1581              }
   1582              else
   1583              {
   1584                unsigned long long delta = (unsigned long long)
   1585                  ((newtimestamp - osal_last_timestamp) & 0xfffffffful);
   1586                delta *= osal_tickperiod;
   1587                delta /= 1000;
   1588                milliseconds = (uint32) delta;
   1589                osal_last_timestamp += (uint32) (delta * 1000 / osal_tickperiod);
   1590              }
   1591              osalAdjustTimer(milliseconds);
   1592              /* Set a value that will never match osal_next_timeout()
   1593               * return value so that the next time can be scheduled.
   1594               */
   1595              next_timeout_prior = 0xfffffffful;
   1596            }
   1597            if (osal_eventloop_hook)
   1598            {
   1599              osal_eventloop_hook();
   1600            }
   1601          
   1602            for (;;)
   1603            {
   1604              void *msg;
   1605              ICall_EntityID src, dst;
   1606              osal_msg_hdr_t *hdr;
   1607              uint8 dest_id;
   1608          
   1609              if (ICall_fetchMsg(&src, &dst, &msg) != ICALL_ERRNO_SUCCESS)
   1610              {
   1611                break;
   1612              }
   1613              hdr = (osal_msg_hdr_t *) msg - 1;
   1614              dest_id = osal_dispatch2id(dst);
   1615              if (dest_id == TASK_NO_TASK)
   1616              {
   1617                /* Something wrong */
   1618                ICall_abort();
   1619              }
   1620              else
   1621              {
   1622                /* Message towards one of the tasks */
   1623                /* Create a proxy task ID if necessary and
   1624                 * queue the message to the OSAL internal queue.
   1625                 */
   1626                uint8 proxyid = osal_alien2proxy(hdr->srcentity);
   1627          
   1628                if (hdr->format == ICALL_MSG_FORMAT_1ST_CHAR_TASK_ID)
   1629                {
   1630                  uint8 *bytes = msg;
   1631                  *bytes = proxyid;
   1632                }
   1633                else if (hdr->format == ICALL_MSG_FORMAT_3RD_CHAR_TASK_ID)
   1634                {
   1635                  uint8 *bytes = msg;
   1636                  bytes[2] = proxyid;
   1637                }
   1638                /* now queue the message to the OSAL queue */
   1639                osal_msg_send(dest_id, msg);
   1640              }
   1641            }
   1642          #endif /* USE_ICALL */
   1643          
   1644            do {
   1645              if (tasksEvents[idx])  // Task is highest priority that is ready.
   \                     ??osal_run_system_0:
   \   00000E   A8..         MOV       R0,?V0
   \   000010   E8           MOV       A,R0
   \   000011   28           ADD       A,R0
   \   000012   12....       LCALL     ?Subroutine16 & 0xFFFF
   1646              {
   1647                break;
   1648              }
   1649            } while (++idx < tasksCnt);
   \                     ??CrossCallReturnLabel_16:
   \   000015   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000018   700D         JNZ       ??osal_run_system_1
   \   00001A   05..         INC       ?V0
   \   00001C   90....       MOV       DPTR,#tasksCnt
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F8           MOV       R0,A
   \   000021   E5..         MOV       A,?V0
   \   000023   C3           CLR       C
   \   000024   98           SUBB      A,R0
   \   000025   40E7         JC        ??osal_run_system_0
   1650          
   1651            if (idx < tasksCnt)
   \                     ??osal_run_system_1:
   \   000027   90....       MOV       DPTR,#tasksCnt
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   F8           MOV       R0,A
   \   00002C   E5..         MOV       A,?V0
   \   00002E   C3           CLR       C
   \   00002F   98           SUBB      A,R0
   \   000030   5064         JNC       ??osal_run_system_2
   1652            {
   1653              uint16 events;
   1654              halIntState_t intState;
   1655          
   1656              HAL_ENTER_CRITICAL_SECTION(intState);
   \   000032   ACA8         MOV       R4,0xa8+0x0
   \   000034   C2AF         CLR       0xa8.7
   1657              events = tasksEvents[idx];
   \   000036   AE..         MOV       R6,?V0
   \   000038   EE           MOV       A,R6
   \   000039   2E           ADD       A,R6
   \   00003A   FE           MOV       R6,A
   \   00003B   E4           CLR       A
   \   00003C   33           RLC       A
   \   00003D   FF           MOV       R7,A
   \   00003E   90....       MOV       DPTR,#tasksEvents
   \   000041   E0           MOVX      A,@DPTR
   \   000042   2E           ADD       A,R6
   \   000043   F8           MOV       R0,A
   \   000044   A3           INC       DPTR
   \   000045   E0           MOVX      A,@DPTR
   \   000046   3F           ADDC      A,R7
   \   000047   F9           MOV       R1,A
   \   000048   8882         MOV       DPL,R0
   \   00004A   F583         MOV       DPH,A
   \   00004C   12....       LCALL     ??Subroutine37_0 & 0xFFFF
   1658              tasksEvents[idx] = 0;  // Clear the Events for this task.
   \                     ??CrossCallReturnLabel_72:
   \   00004F   8882         MOV       DPL,R0
   \   000051   8983         MOV       DPH,R1
   \   000053   E4           CLR       A
   \   000054   F0           MOVX      @DPTR,A
   \   000055   A3           INC       DPTR
   \   000056   F0           MOVX      @DPTR,A
   1659              HAL_EXIT_CRITICAL_SECTION(intState);
   \   000057   EC           MOV       A,R4
   \   000058   A2E7         MOV       C,0xE0 /* A   */.7
   \   00005A   92AF         MOV       0xa8.7,C
   1660          
   1661              activeTaskID = idx;
   \   00005C   E5..         MOV       A,?V0
   \   00005E   90....       MOV       DPTR,#activeTaskID
   \   000061   F0           MOVX      @DPTR,A
   1662              events = (tasksArr[idx])( idx, events );
   \   000062                ; Setup parameters for indirect call
   \   000062   F9           MOV       R1,A
   \   000063   74..         MOV       A,#tasksArr & 0xff
   \   000065   2E           ADD       A,R6
   \   000066   F582         MOV       DPL,A
   \   000068   74..         MOV       A,#(tasksArr >> 8) & 0xff
   \   00006A   3F           ADDC      A,R7
   \   00006B   F583         MOV       DPH,A
   \   00006D   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000070   12....       LCALL     ?CALL_IND
   1663              activeTaskID = TASK_NO_TASK;
   \   000073   90....       MOV       DPTR,#activeTaskID
   \   000076   74FF         MOV       A,#-0x1
   \   000078   F0           MOVX      @DPTR,A
   1664          
   1665              HAL_ENTER_CRITICAL_SECTION(intState);
   \   000079   A8A8         MOV       R0,0xa8+0x0
   \   00007B   C2AF         CLR       0xa8.7
   1666              tasksEvents[idx] |= events;  // Add back unprocessed events to the current task.
   \   00007D   90....       MOV       DPTR,#tasksEvents
   \   000080   E0           MOVX      A,@DPTR
   \   000081   2E           ADD       A,R6
   \   000082   F9           MOV       R1,A
   \   000083   A3           INC       DPTR
   \   000084   E0           MOVX      A,@DPTR
   \   000085   3F           ADDC      A,R7
   \   000086   8982         MOV       DPL,R1
   \   000088   F583         MOV       DPH,A
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   4A           ORL       A,R2
   \   00008C   F0           MOVX      @DPTR,A
   \   00008D   A3           INC       DPTR
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   4B           ORL       A,R3
   \   000090   F0           MOVX      @DPTR,A
   1667              HAL_EXIT_CRITICAL_SECTION(intState);
   \   000091   E8           MOV       A,R0
   \   000092   A2E7         MOV       C,0xE0 /* A   */.7
   \   000094   92AF         MOV       0xa8.7,C
   1668            }
   1669          #if defined( POWER_SAVING ) && !defined(USE_ICALL)
   1670            else  // Complete pass through all task events with no activity?
   1671            {
   1672              osal_pwrmgr_powerconserve();  // Put the processor/system into sleep
   1673            }
   1674          #endif
   1675          
   1676            /* Yield in case cooperative scheduling is being used. */
   1677          #if defined (configUSE_PREEMPTION) && (configUSE_PREEMPTION == 0)
   1678            {
   1679              osal_task_yield();
   1680            }
   1681          #endif
   1682          
   1683          #if defined USE_ICALL
   1684            /* Note that scheduling wakeup at this point instead of
   1685             * scheduling it upon ever OSAL start timer request,
   1686             * would only work if OSAL start timer call is made
   1687             * from OSAL tasks, but not from either ISR or
   1688             * non-OSAL application thread.
   1689             * In case, OSAL start timer is called from non-OSAL
   1690             * task, the scheduling should be part of OSAL_Timers
   1691             * module.
   1692             * Such a change to OSAL_Timers module was not made
   1693             * in order not to diverge the OSAL implementations
   1694             * too drastically between pure OSAL solution vs.
   1695             * OSAL upon service dispatcher (RTOS).
   1696             * TODO: reconsider the above statement.
   1697             */
   1698            {
   1699              halIntState_t intState;
   1700          
   1701              uint32 next_timeout_post = osal_next_timeout();
   1702              if (next_timeout_post != next_timeout_prior)
   1703              {
   1704                /* Next wakeup time has to be scheduled */
   1705                if (next_timeout_post == 0)
   1706                {
   1707                  /* No timer. Set time to the max */
   1708                  next_timeout_post = OSAL_TIMERS_MAX_TIMEOUT;
   1709                }
   1710                if (next_timeout_post > osal_max_msecs)
   1711                {
   1712                  next_timeout_post = osal_max_msecs;
   1713                }
   1714                /* Restart timer */
   1715                HAL_ENTER_CRITICAL_SECTION(intState);
   1716                ICall_stopTimer(osal_timerid_msec_timer);
   1717                ICall_setTimerMSecs(next_timeout_post, osal_msec_timer_cback,
   1718                                    (void *) (++osal_msec_timer_seq),
   1719                                    &osal_timerid_msec_timer);
   1720                HAL_EXIT_CRITICAL_SECTION(intState);
   1721              }
   1722            }
   1723          #endif /* USE_ICALL */
   1724          }
   \                     ??osal_run_system_2:
   \   000096   02....       LJMP      ?Subroutine2 & 0xFFFF
   \   000099                REQUIRE _A_IEN0
   1725          
   1726          /*********************************************************************
   1727           * @fn      osal_buffer_uint32
   1728           *
   1729           * @brief
   1730           *
   1731           *   Buffer an uint32 value - LSB first.
   1732           *
   1733           * @param   buf - buffer
   1734           * @param   val - uint32 value
   1735           *
   1736           * @return  pointer to end of destination buffer
   1737           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1738          uint8* osal_buffer_uint32( uint8 *buf, uint32 val )
   \                     osal_buffer_uint32:
   1739          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   7410         MOV       A,#0x10
   \   000007   12....       LCALL     ?XSTACK_DISP0_8
   \   00000A   78..         MOV       R0,#?V4
   \   00000C   12....       LCALL     ?L_MOV_X
   1740            *buf++ = BREAK_UINT32( val, 0 );
   \   00000F   8A82         MOV       DPL,R2
   \   000011   8B83         MOV       DPH,R3
   \   000013   E5..         MOV       A,?V4
   \   000015   12....       LCALL     ?Subroutine21 & 0xFFFF
   1741            *buf++ = BREAK_UINT32( val, 1 );
   1742            *buf++ = BREAK_UINT32( val, 2 );
   \                     ??CrossCallReturnLabel_19:
   \   000018   85....       MOV       ?V0,?V4
   \   00001B   85....       MOV       ?V2,?V6
   \   00001E   85....       MOV       ?V3,?V7
   \   000021   7410         MOV       A,#0x10
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?UL_SHR
   \   000028   8A82         MOV       DPL,R2
   \   00002A   8B83         MOV       DPH,R3
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   E5..         MOV       A,?V0
   \   000030   F0           MOVX      @DPTR,A
   1743            *buf++ = BREAK_UINT32( val, 3 );
   \   000031   7418         MOV       A,#0x18
   \   000033   78..         MOV       R0,#?V4
   \   000035   12....       LCALL     ?UL_SHR
   \   000038   8A82         MOV       DPL,R2
   \   00003A   8B83         MOV       DPH,R3
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   E5..         MOV       A,?V4
   \   000041   F0           MOVX      @DPTR,A
   1744          
   1745            return buf;
   \   000042   EA           MOV       A,R2
   \   000043   2404         ADD       A,#0x4
   \   000045   FA           MOV       R2,A
   \   000046   5001         JNC       ??osal_buffer_uint32_0
   \   000048   0B           INC       R3
   \                     ??osal_buffer_uint32_0:
   \   000049   02....       LJMP      ?Subroutine3 & 0xFFFF
   1746          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85....       MOV       ?V1,?V5
   \   000004   E5..         MOV       A,?V1
   \   000006   A3           INC       DPTR
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET
   1747          
   1748          /*********************************************************************
   1749           * @fn      osal_buffer_uint24
   1750           *
   1751           * @brief
   1752           *
   1753           *   Buffer an uint24 value - LSB first. Note that type uint24 is
   1754           *   typedef to uint32 in comdef.h
   1755           *
   1756           * @param   buf - buffer
   1757           * @param   val - uint24 value
   1758           *
   1759           * @return  pointer to end of destination buffer
   1760           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1761          uint8* osal_buffer_uint24( uint8 *buf, uint24 val )
   \                     osal_buffer_uint24:
   1762          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   7410         MOV       A,#0x10
   \   000007   12....       LCALL     ?XSTACK_DISP0_8
   \   00000A   78..         MOV       R0,#?V4
   \   00000C   12....       LCALL     ?L_MOV_X
   1763            *buf++ = BREAK_UINT32( val, 0 );
   \   00000F   85....       MOV       ?V0,?V4
   \   000012   8A82         MOV       DPL,R2
   \   000014   8B83         MOV       DPH,R3
   \   000016   E5..         MOV       A,?V0
   \   000018   12....       LCALL     ?Subroutine21 & 0xFFFF
   1764            *buf++ = BREAK_UINT32( val, 1 );
   1765            *buf++ = BREAK_UINT32( val, 2 );
   \                     ??CrossCallReturnLabel_20:
   \   00001B   7410         MOV       A,#0x10
   \   00001D   78..         MOV       R0,#?V4
   \   00001F   12....       LCALL     ?UL_SHR
   \   000022   8A82         MOV       DPL,R2
   \   000024   8B83         MOV       DPH,R3
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   E5..         MOV       A,?V4
   \   00002A   F0           MOVX      @DPTR,A
   1766          
   1767            return buf;
   \   00002B   EA           MOV       A,R2
   \   00002C   2403         ADD       A,#0x3
   \   00002E   FA           MOV       R2,A
   \   00002F   5001         JNC       ??osal_buffer_uint24_0
   \   000031   0B           INC       R3
   \                     ??osal_buffer_uint24_0:
   \   000032   02....       LJMP      ?Subroutine3 & 0xFFFF
   1768          }
   1769          
   1770          /*********************************************************************
   1771           * @fn      osal_isbufset
   1772           *
   1773           * @brief
   1774           *
   1775           *   Is all of the array elements set to a value?
   1776           *
   1777           * @param   buf - buffer to check
   1778           * @param   val - value to check each array element for
   1779           * @param   len - length to check
   1780           *
   1781           * @return  TRUE if all "val"
   1782           *          FALSE otherwise
   1783           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1784          uint8 osal_isbufset( uint8 *buf, uint8 val, uint8 len )
   \                     osal_isbufset:
   1785          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FD           MOV       R5,A
   1786            uint8 x;
   1787          
   1788            if ( buf == NULL )
   \   000007   EA           MOV       A,R2
   \   000008   4B           ORL       A,R3
   \   000009   6018         JZ        ??osal_isbufset_0
   1789            {
   1790              return ( FALSE );
   1791            }
   1792          
   1793            for ( x = 0; x < len; x++ )
   \   00000B   7800         MOV       R0,#0x0
   \   00000D   8001         SJMP      ??osal_isbufset_1
   \                     ??osal_isbufset_2:
   \   00000F   08           INC       R0
   \                     ??osal_isbufset_1:
   \   000010   E8           MOV       A,R0
   \   000011   C3           CLR       C
   \   000012   9C           SUBB      A,R4
   \   000013   5012         JNC       ??osal_isbufset_3
   1794            {
   1795              // Check for non-initialized value
   1796              if ( buf[x] != val )
   \   000015   E8           MOV       A,R0
   \   000016   FE           MOV       R6,A
   \   000017   EA           MOV       A,R2
   \   000018   2E           ADD       A,R6
   \   000019   F582         MOV       DPL,A
   \   00001B   E4           CLR       A
   \   00001C   3B           ADDC      A,R3
   \   00001D   F583         MOV       DPH,A
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6D           XRL       A,R5
   \   000021   60EC         JZ        ??osal_isbufset_2
   1797              {
   1798                return ( FALSE );
   \                     ??osal_isbufset_0:
   \   000023   7900         MOV       R1,#0x0
   \   000025   8002         SJMP      ??osal_isbufset_4
   1799              }
   1800            }
   1801            return ( TRUE );
   \                     ??osal_isbufset_3:
   \   000027   7901         MOV       R1,#0x1
   \                     ??osal_isbufset_4:
   \   000029   02....       LJMP      ??Subroutine29_0 & 0xFFFF
   1802          }
   1803          
   1804          /*********************************************************************
   1805           * @fn      osal_self
   1806           *
   1807           * @brief
   1808           *
   1809           *   This function returns the task ID of the current (active) task.
   1810           *
   1811           * @param   void
   1812           *
   1813           * @return   active task ID or TASK_NO_TASK if no task is active
   1814           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1815          uint8 osal_self( void )
   \                     osal_self:
   1816          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1817            return ( activeTaskID );
   \   000004   90....       MOV       DPTR,#activeTaskID
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   02....       LJMP      ?Subroutine0 & 0xFFFF
   1818          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for activeTaskID>`:
   \   000000   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">`:
   \   000000   00           DB ""
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">_1`:
   \   000000   00           DB ""
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">_2`:
   \   000000   00           DB ""
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "0">`:
   \   000000   3000         DB "0"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2710:
   \   000000   10270000     DD 10000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_5f5e100:
   \   000000   00E1F505     DD 100000000
   1819          
   1820          /*********************************************************************
   1821           */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     57   _ltoa
        0     55   -> _itoa
        0     55   -> strcat
        0     55   -> strcpy
        0     55   -> strlen
      1     20   osal_buffer_uint24
      1     20   osal_buffer_uint32
      2      0   osal_build_uint16
      0     16   osal_build_uint32
      0     23   osal_clear_event
      2      0   osal_init_system
        2      0   -> osalInitTasks
        2      0   -> osalTimerInit
        2      0   -> osal_mem_init
        2      0   -> osal_mem_kick
        2      0   -> osal_pwrmgr_init
      0      0   osal_int_disable
      0      0   osal_int_enable
      0      9   osal_isbufset
      0      0   osal_isr_register
      0     22   osal_memcmp
      1     27   osal_memcpy
      0     18   osal_memdup
        0     15   -> osal_mem_alloc
        0     18   -> osal_memcpy
      0     12   osal_memset
        0     12   -> memset
      0     10   osal_msg_allocate
        0     10   -> osal_mem_alloc
      0      9   osal_msg_count
      2      9   osal_msg_deallocate
        2      0   -> osal_mem_free
      0     10   osal_msg_dequeue
      0     18   osal_msg_enqueue
      0      9   osal_msg_enqueue_max
      1     18   osal_msg_enqueue_push
        0      9   -> osal_msg_deallocate
        0      9   -> osal_msg_enqueue
        0      9   -> osal_msg_push
        0      9   -> osal_set_event
      0     25   osal_msg_extract
      2      0   osal_msg_find
      0     18   osal_msg_push
      0      9   osal_msg_push_front
        0      9   -> osal_msg_enqueue_push
      0     16   osal_msg_receive
        0     14   -> osal_clear_event
        0     16   -> osal_msg_extract
        0     14   -> osal_set_event
      0      9   osal_msg_send
        0      9   -> osal_msg_enqueue_push
      2      0   osal_rand
        2      0   -> Onboard_rand
      1     12   osal_revmemcpy
      0     10   osal_run_system
        0     10   -> Hal_ProcessPoll
        0     10   -> osalTimeUpdate
      2      0   osal_self
      0     23   osal_set_event
      2      0   osal_start_system
        2      0   -> osal_run_system
      2      0   osal_strlen
        2      0   -> strlen


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?<Constant "">
      10  ?<Constant "">_1
      10  ?<Constant "">_2
       2  ?<Constant "0">
       1  ?<Initializer for activeTaskID>
       6  ??Subroutine26_0
       2  ??Subroutine27_0
       2  ??Subroutine28_0
       5  ??Subroutine29_0
       5  ??Subroutine30_0
       8  ??Subroutine31_0
       6  ??Subroutine32_0
       4  ??Subroutine33_0
       6  ??Subroutine34_0
       3  ??Subroutine35_0
       5  ??Subroutine36_0
       6  ??Subroutine37_0
       7  ?Subroutine0
       2  ?Subroutine1
       6  ?Subroutine10
       8  ?Subroutine11
      12  ?Subroutine12
       3  ?Subroutine13
      15  ?Subroutine14
       9  ?Subroutine15
      16  ?Subroutine16
       6  ?Subroutine17
       4  ?Subroutine18
       3  ?Subroutine19
       5  ?Subroutine2
      15  ?Subroutine20
       9  ?Subroutine21
       7  ?Subroutine22
       1  ?Subroutine23
      24  ?Subroutine24
       9  ?Subroutine25
       5  ?Subroutine3
       7  ?Subroutine4
       5  ?Subroutine5
      24  ?Subroutine6
       6  ?Subroutine7
       6  ?Subroutine8
       2  ?Subroutine9
       1  _A_IEN0
       4  __Constant_2710
       4  __Constant_5f5e100
     553  _ltoa
       1  activeTaskID
      53  osal_buffer_uint24
      76  osal_buffer_uint32
      25  osal_build_uint16
     128  osal_build_uint32
      53  osal_clear_event
      31  osal_init_system
      18  osal_int_disable
      18  osal_int_enable
      44  osal_isbufset
       5  osal_isr_register
     105  osal_memcmp
      40  osal_memcpy
      56  osal_memdup
      29  osal_memset
      69  osal_msg_allocate
      63  osal_msg_count
      35  osal_msg_deallocate
      95  osal_msg_dequeue
      61  osal_msg_enqueue
      85  osal_msg_enqueue_max
      98  osal_msg_enqueue_push
      89  osal_msg_extract
      54  osal_msg_find
      35  osal_msg_push
       9  osal_msg_push_front
     141  osal_msg_receive
       7  osal_msg_send
       2  osal_qHead
       9  osal_rand
      57  osal_revmemcpy
     153  osal_run_system
      12  osal_self
      59  osal_set_event
       9  osal_start_system
      10  osal_strlen
     210  -- Other

 
 2 658 bytes in segment BANKED_CODE
   210 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
    40 bytes in segment XDATA_ROM_C
     2 bytes in segment XDATA_Z
 
   211 bytes of CODE     memory
    32 bytes of CONST    memory (+ 8 bytes shared)
     0 bytes of DATA     memory (+ 1 byte  shared)
 2 658 bytes of HUGECODE memory
     3 bytes of XDATA    memory

Errors: none
Warnings: none
