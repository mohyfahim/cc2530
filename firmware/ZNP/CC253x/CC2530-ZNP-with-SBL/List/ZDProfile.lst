###############################################################################
#
# IAR C/C++ Compiler V10.40.1.7397 for 8051               01/May/2021  16:40:14
# Copyright 2004-2021 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\Texas Instruments\Z-Stack 3.0.2\Components\stack\zdo\ZDProfile.c
#    Command line       =  
#        -f C:\Users\asus\AppData\Local\Temp\EW34C7.tmp ("E:\Texas
#        Instruments\Z-Stack 3.0.2\Components\stack\zdo\ZDProfile.c" -D
#        BDB_FINDING_BINDING_CAPABILITY_ENABLED=0 -D TC_LINKKEY_JOIN -D
#        HAL_UART_DMA_RX_MAX=128 -D MAXMEMHEAP=2765 -D NWK_MAX_DEVICE_LIST=10
#        -D ZDSECMGR_TC_DEVICE_MAX=30 -D DISABLE_GREENPOWER_BASIC_PROXY -D
#        FEATURE_SYSTEM_STATS -D MT_GP_CB_FUNC -D ASSERT_RESET -D FAKE_CRC_SHDW
#        -lC "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-with-SBL\List" -lA
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-with-SBL\List"
#        --diag_suppress Pe001,Pa010 -o "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-with-SBL\Obj" -e --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_GP_CB_FUNC -DMT_APP_FUNC -DMT_APP_CNF_FUNC
#        -DZNP_ALT) -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg" -I
#        "E:\Texas Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\Source\" -I "E:\Texas
#        Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\..\Source\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Utilities\BootLoad\Source\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\gp\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\bdb\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  English_USA.1252
#    List file          =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-with-SBL\List\ZDProfile.lst
#    Object file        =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-with-SBL\Obj\ZDProfile.r51
#
###############################################################################

E:\Texas Instruments\Z-Stack 3.0.2\Components\stack\zdo\ZDProfile.c
      1          /**************************************************************************************************
      2            Filename:       ZDProfile.c
      3            Revised:        $Date: 2015-10-14 11:48:06 -0700 (Wed, 14 Oct 2015) $
      4            Revision:       $Revision: 44530 $
      5          
      6            Description:    This is the Zigbee Device Profile.
      7          
      8          
      9            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "NLMEDE.h"
     47          #include "nwk_util.h"
     48          #include "APS.h"
     49          
     50          #include "AddrMgr.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDNwkMgr.h"
     55          
     56          #if defined( LCD_SUPPORTED )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          #include "nwk_util.h"
     61          
     62          #if defined( MT_ZDO_FUNC )
     63            #include "MT_ZDO.h"
     64          #endif
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \
     71            (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \
     72            (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \
     73            (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \
     74          }
     75          
     76          #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \
     77            afStatus_t stat;                                    \
     78            ZDP_TmpBuf = (BUF)+1;                               \
     79            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     80            osal_mem_free( (BUF) );                             \
     81            ZDP_TmpBuf = ZDP_Buf+1;                             \
     82            return stat;                                        \
     83          }
     84          
     85          #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \
     86            afStatus_t stat;                                    \
     87            ZDP_TxOptions = (TxO);                              \
     88            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     89            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
     90            return stat;                                        \
     91          }
     92          
     93          #define FillAndSendBufferTxOptions( TRANSSEQ, ADDR, ID, LEN, BUF, TxO ) { \
     94            afStatus_t stat;                                    \
     95            ZDP_TmpBuf = (BUF)+1;                               \
     96            ZDP_TxOptions = (TxO);                              \
     97            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     98            osal_mem_free( (BUF) );                             \
     99            ZDP_TmpBuf = ZDP_Buf+1;                             \
    100            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
    101            return stat;                                        \
    102          }
    103          
    104          /*********************************************************************
    105           * CONSTANTS
    106           */
    107          
    108          #define ZDP_BUF_SZ          80
    109          

   \                                 In  segment CODE_C, align 1
    110          CONST byte ZDP_AF_ENDPOINT = 0;
   \                     ZDP_AF_ENDPOINT:
   \   000000   00           DB 0
    111          
    112          // Routing table options
    113          #define ZP_RTG_RECORD       0x04       // Routing table indication that a route record is needed
    114          #define ZP_MTO_ROUTE_RC     0x08       // Concentrator with routing cache
    115          #define ZP_MTO_ROUTE_NRC    0x10       // Concentrator with limited cache
    116          
    117          
    118          /*********************************************************************
    119           * TYPEDEFS
    120           */
    121          typedef struct
    122          {
    123            void *next;
    124            uint8 taskID;
    125            uint16 clusterID;
    126          } ZDO_MsgCB_t;
    127          
    128          
    129          /*********************************************************************
    130           * GLOBAL VARIABLES
    131           */
    132          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          byte ZDP_TransID = 0;
   \                     ZDP_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          uint8 childIndex = 0;
   \                     childIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135          
    136          /*********************************************************************
    137           * EXTERNAL VARIABLES
    138           */
    139          
    140          extern endPointDesc_t ZDApp_epDesc;
    141          
    142          /*********************************************************************
    143           * EXTERNAL FUNCTIONS
    144           */
    145          extern void ZDApp_SetParentAnnceTimer( void );
    146          
    147          /*********************************************************************
    148           * LOCAL FUNCTIONS
    149           */
    150          
    151          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
    152          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg );
    153          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg );
    154          
    155          /*********************************************************************
    156           * LOCAL VARIABLES
    157           */
    158          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          static uint8  ZDP_Buf[ ZDP_BUF_SZ ];
   \                     ZDP_Buf:
   \   000000                DS 80
   \   000050                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    160          static uint8 *ZDP_TmpBuf = ZDP_Buf+1;
   \                     ZDP_TmpBuf:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDP_TmpBuf>`
   \   000002                REQUIRE __INIT_XDATA_I
    161          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \                     ZDP_TxOptions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    163          ZDO_MsgCB_t *zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   \                     zdoMsgCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    164          
    165          /*********************************************************************
    166           * ZDO Message Processing table
    167           */
    168          
    169          typedef void (*pfnZDPMsgProcessor)( zdoIncomingMsg_t *inMsg );
    170          
    171          typedef struct
    172          {
    173            uint16                clusterID;
    174            pfnZDPMsgProcessor    pFn;
    175          } zdpMsgProcItem_t;
    176          

   \                                 In  segment CODE_C, align 1
    177          CONST zdpMsgProcItem_t zdpMsgProcs[] =
   \                     zdpMsgProcs:
   \   000000   1300         DW 19
   \   000002   ....         DW `??ZDO_ProcessDeviceAnnce::?relay`
   \   000004   1F00         DW 31
   \   000006   ....         DW `??ZDO_ProcessParentAnnce::?relay`
   \   000008   1F80         DW 32799
   \   00000A   ....         DW `??ZDO_ProcessParentAnnceRsp::?relay`
   \   00000C   0000         DW 0
   \   00000E   ....         DW `??zdpProcessAddrReq::?relay`
   \   000010   0100         DW 1
   \   000012   ....         DW `??zdpProcessAddrReq::?relay`
   \   000014   0200         DW 2
   \   000016   ....         DW `??ZDO_ProcessNodeDescReq::?relay`
   \   000018   0280         DW 32770
   \   00001A   ....         DW `??ZDO_ProcessNodeDescRsp::?relay`
   \   00001C   0300         DW 3
   \   00001E   ....         DW `??ZDO_ProcessPowerDescReq::?relay`
   \   000020   0400         DW 4
   \   000022   ....         DW `??ZDO_ProcessSimpleDescReq::?relay`
   \   000024   0480         DW 32772
   \   000026   ....         DW `??ZDO_ProcessSimpleDescRsp::?relay`
   \   000028   0500         DW 5
   \   00002A   ....         DW `??ZDO_ProcessActiveEPReq::?relay`
   \   00002C   0600         DW 6
   \   00002E   ....         DW `??ZDO_ProcessMatchDescReq::?relay`
   \   000030   3000         DW 48
   \   000032   ....         DW `??ZDO_ProcessMgmtNwkDiscReq::?relay`
   \   000034   3100         DW 49
   \   000036   ....         DW `??ZDO_ProcessMgmtLqiReq::?relay`
   \   000038   3200         DW 50
   \   00003A   ....         DW `??ZDO_ProcessMgmtRtgReq::?relay`
   \   00003C   3300         DW 51
   \   00003E   ....         DW `??ZDO_ProcessMgmtBindReq::?relay`
   \   000040   3500         DW 53
   \   000042   ....         DW `??ZDO_ProcessMgmtDirectJoinReq::?relay`
   \   000044   3400         DW 52
   \   000046   ....         DW `??ZDO_ProcessMgmtLeaveReq::?relay`
   \   000048   3600         DW 54
   \   00004A   ....         DW `??ZDO_ProcessMgmtPermitJoinReq::?relay`
   \   00004C   1100         DW 17
   \   00004E   ....         DW `??ZDO_ProcessUserDescReq::?relay`
   \   000050   1400         DW 20
   \   000052   ....         DW `??ZDO_ProcessUserDescSet::?relay`
   \   000054   1500         DW 21
   \   000056   ....         DW `??ZDO_ProcessServerDiscReq::?relay`
   \   000058   FFFF         DW 65535
   \   00005A   0000         DW 0H
    178          {
    179          #if ( RFD_RCVC_ALWAYS_ON==TRUE ) || ( ZG_BUILD_RTR_TYPE )
    180            // These aren't processed by sleeping end devices.
    181            { Device_annce,           ZDO_ProcessDeviceAnnce },
    182          #endif
    183          #if ( ZG_BUILD_RTR_TYPE )
    184            // These aren't processed by end devices.
    185            { Parent_annce,           ZDO_ProcessParentAnnce },
    186            { Parent_annce_rsp,       ZDO_ProcessParentAnnceRsp },
    187          #endif
    188            { NWK_addr_req,           zdpProcessAddrReq },
    189            { IEEE_addr_req,          zdpProcessAddrReq },
    190            { Node_Desc_req,          ZDO_ProcessNodeDescReq },
    191            { Node_Desc_rsp,          ZDO_ProcessNodeDescRsp },
    192            { Power_Desc_req,         ZDO_ProcessPowerDescReq },
    193            { Simple_Desc_req,        ZDO_ProcessSimpleDescReq },
    194            { Simple_Desc_rsp,        ZDO_ProcessSimpleDescRsp },
    195            { Active_EP_req,          ZDO_ProcessActiveEPReq },
    196            { Match_Desc_req,         ZDO_ProcessMatchDescReq },
    197          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
    198            { Mgmt_NWK_Disc_req,      ZDO_ProcessMgmtNwkDiscReq },
    199          #endif
    200          #if defined ( ZDO_MGMT_LQI_RESPONSE ) && ( ZG_BUILD_RTR_TYPE || ZG_BUILD_ENDDEVICE_TYPE )
    201            { Mgmt_Lqi_req,           ZDO_ProcessMgmtLqiReq },
    202          #endif
    203          #if defined ( ZDO_MGMT_RTG_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    204            { Mgmt_Rtg_req,           ZDO_ProcessMgmtRtgReq },
    205          #endif
    206          #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
    207            { Mgmt_Bind_req,          ZDO_ProcessMgmtBindReq },
    208          #endif
    209          #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    210            { Mgmt_Direct_Join_req,   ZDO_ProcessMgmtDirectJoinReq },
    211          #endif
    212          #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
    213            { Mgmt_Leave_req,         ZDO_ProcessMgmtLeaveReq },
    214          #endif
    215          #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && ( ZG_BUILD_RTR_TYPE )
    216            { Mgmt_Permit_Join_req,   ZDO_ProcessMgmtPermitJoinReq },
    217          #endif
    218          #if defined ( ZDO_USERDESC_RESPONSE )
    219            { User_Desc_req,          ZDO_ProcessUserDescReq },
    220          #endif
    221          #if defined ( ZDO_USERDESCSET_RESPONSE )
    222            { User_Desc_set,          ZDO_ProcessUserDescSet },
    223          #endif
    224          #if defined ( ZDO_SERVERDISC_RESPONSE )
    225            { Server_Discovery_req,   ZDO_ProcessServerDiscReq },
    226          #endif
    227            {0xFFFF, NULL} // Last
    228          };
    229          
    230          /*********************************************************************
    231           * @fn          fillAndSend
    232           *
    233           * @brief       Combined to reduce space
    234           *
    235           * @param
    236           * @param
    237           *
    238           * @return      afStatus_t
    239           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    240          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
   \                     fillAndSend:
    241          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   \   000012   89..         MOV       ?V4,R1
    242            afAddrType_t afAddr;
    243          
    244            osal_memset( &afAddr, 0, sizeof(afAddrType_t) );
   \   000014                ; Setup parameters for call to function osal_memset
   \   000014   7C0C         MOV       R4,#0xc
   \   000016   7D00         MOV       R5,#0x0
   \   000018   7900         MOV       R1,#0x0
   \   00001A   AA..         MOV       R2,?XSP + 0
   \   00001C   AB..         MOV       R3,?XSP + 1
   \   00001E   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    245            ZADDR_TO_AFADDR( addr, afAddr );
   \   000021   7409         MOV       A,#0x9
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   E4           CLR       A
   \   000027   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   C0E0         PUSH      A
   \   00002D   7408         MOV       A,#0x8
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   D0E0         POP       A
   \   000034   F0           MOVX      @DPTR,A
   \   000035   8E82         MOV       DPL,R6
   \   000037   8F83         MOV       DPH,R7
   \   000039   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00003C   12....       LCALL     ??Subroutine133_0 & 0xFFFF
    246          
    247            *(ZDP_TmpBuf-1) = *transSeq;
   \                     ??CrossCallReturnLabel_229:
   \   00003F   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000042   E0           MOVX      A,@DPTR
   \   000043   24FF         ADD       A,#-0x1
   \   000045   F5..         MOV       ?V2,A
   \   000047   A3           INC       DPTR
   \   000048   E0           MOVX      A,@DPTR
   \   000049   34FF         ADDC      A,#-0x1
   \   00004B   F5..         MOV       ?V3,A
   \   00004D   85..82       MOV       DPL,?V0
   \   000050   85..83       MOV       DPH,?V1
   \   000053   E0           MOVX      A,@DPTR
   \   000054   85..82       MOV       DPL,?V2
   \   000057   85..83       MOV       DPH,?V3
   \   00005A   F0           MOVX      @DPTR,A
    248          
    249            return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
    250                                     (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
    251                                     transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
   \   00005B                ; Setup parameters for call to function AF_DataRequest
   \   00005B   75..1E       MOV       ?V5,#0x1e
   \   00005E   78..         MOV       R0,#?V5
   \   000060   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000063   78..         MOV       R0,#?V0
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000068   78..         MOV       R0,#?V2
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006D   E5..         MOV       A,?V4
   \   00006F   2401         ADD       A,#0x1
   \   000071   F5..         MOV       ?V0,A
   \   000073   E4           CLR       A
   \   000074   3400         ADDC      A,#0x0
   \   000076   F5..         MOV       ?V1,A
   \   000078   78..         MOV       R0,#?V0
   \   00007A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007D   7421         MOV       A,#0x21
   \   00007F   12....       LCALL     ?XSTACK_DISP0_8
   \   000082   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000085   90....       MOV       DPTR,#ZDP_TxOptions
   \   000088   E0           MOVX      A,@DPTR
   \   000089   F9           MOV       R1,A
   \   00008A   7C..         MOV       R4,#ZDApp_epDesc & 0xff
   \   00008C   7D..         MOV       R5,#(ZDApp_epDesc >> 8) & 0xff
   \   00008E   7409         MOV       A,#0x9
   \   000090   12....       LCALL     ?XSTACK_DISP101_8
   \   000093   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000096   7409         MOV       A,#0x9
   \   000098   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009B   740C         MOV       A,#0xc
   \   00009D   02....       LJMP      ?Subroutine0 & 0xFFFF
    252          
    253          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine116_0
   \   000003                ; // Fall through to label ??Subroutine116_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine116_0:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine133_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   12....       LCALL     ??Subroutine147_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine147_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    254          
    255          /*********************************************************************
    256           * @fn          ZDP_SendData
    257           *
    258           * @brief       This builds and send a request message that has
    259           *              NWKAddrOfInterest as its only parameter.
    260           *
    261           * @param       dstAddr - destination address
    262           * @param       cmd - clusterID
    263           * @param       dataLen - number of bytes of data
    264           * @param       data - pointer to the data
    265           * @param       SecurityEnable - Security Options
    266           *
    267           * @return      afStatus_t
    268           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    269          afStatus_t ZDP_SendData( uint8 *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
   \                     ZDP_SendData:
    270                                  byte len, uint8 *buf, byte SecurityEnable )
    271          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
    272            uint8 *pBuf = ZDP_TmpBuf;
   \   000007   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00000A   12....       LCALL     ?Subroutine41 & 0xFFFF
    273            byte cnt = len;
   \                     ??CrossCallReturnLabel_52:
   \   00000D   E9           MOV       A,R1
   \   00000E   FE           MOV       R6,A
   \   00000F   740E         MOV       A,#0xe
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   12....       LCALL     ??Subroutine146_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   000017   801F         SJMP      ??ZDP_SendData_0
    274          
    275            while ( cnt-- )
    276            {
    277              *pBuf++ = *buf++;
   \                     ??ZDP_SendData_1:
   \   000019   8882         MOV       DPL,R0
   \   00001B   8983         MOV       DPH,R1
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   85..82       MOV       DPL,?V2
   \   000021   85..83       MOV       DPH,?V3
   \   000024   12....       LCALL     ?Subroutine31 & 0xFFFF
    278            }
   \                     ??CrossCallReturnLabel_37:
   \   000027   A882         MOV       R0,DPL
   \   000029   A983         MOV       R1,DPH
   \   00002B   85..82       MOV       DPL,?V2
   \   00002E   85..83       MOV       DPH,?V3
   \   000031   A3           INC       DPTR
   \   000032   8582..       MOV       ?V2,DPL
   \   000035   8583..       MOV       ?V3,DPH
   \                     ??ZDP_SendData_0:
   \   000038   74FF         MOV       A,#-0x1
   \   00003A   2E           ADD       A,R6
   \   00003B   FE           MOV       R6,A
   \   00003C   04           INC       A
   \   00003D   70DA         JNZ       ??ZDP_SendData_1
    279          
    280            FillAndSendTxOptions( TransSeq, dstAddr, cmd, len, ((SecurityEnable) ? AF_EN_SECURITY : 0) );
   \   00003F   7410         MOV       A,#0x10
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   E0           MOVX      A,@DPTR
   \   000045   90....       MOV       DPTR,#ZDP_TxOptions
   \   000048   6004         JZ        ??ZDP_SendData_2
   \   00004A   7440         MOV       A,#0x40
   \   00004C   8001         SJMP      ??ZDP_SendData_3
   \                     ??ZDP_SendData_2:
   \   00004E   E4           CLR       A
   \                     ??ZDP_SendData_3:
   \   00004F   F0           MOVX      @DPTR,A
   \   000050                ; Setup parameters for call to function fillAndSend
   \   000050   740C         MOV       A,#0xc
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000058   EF           MOV       A,R7
   \   000059   F9           MOV       R1,A
   \   00005A   12....       LCALL     ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   00005D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000060   E9           MOV       A,R1
   \   000061   F9           MOV       R1,A
   \   000062   90....       MOV       DPTR,#ZDP_TxOptions
   \   000065   E4           CLR       A
   \   000066   F0           MOVX      @DPTR,A
   \   000067   02....       LJMP      ??Subroutine115_0 & 0xFFFF
    281          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine115_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V2,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine139_0:
   \   000000   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine146_0:
   \   000000   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   000003   22           RET
    282          
    283          /*********************************************************************
    284           * @fn          ZDP_NWKAddrOfInterestReq
    285           *
    286           * @brief       This builds and send a request message that has
    287           *              NWKAddrOfInterest as its only parameter.
    288           *
    289           * @param       dstAddr - destination address
    290           * @param       nwkAddr - 16 bit address
    291           * @param       SecurityEnable - Security Options
    292           *
    293           * @return      afStatus_t
    294           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    295          afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_NWKAddrOfInterestReq:
    296                                               byte cmd, byte SecurityEnable )
    297          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    298            (void)SecurityEnable;  // Intentionally unreferenced parameter
    299          
    300            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000005   12....       LCALL     ?Subroutine18 & 0xFFFF
    301            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_15:
   \   000008   F0           MOVX      @DPTR,A
    302          
    303            return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
   \   000009                ; Setup parameters for call to function fillAndSend
   \   000009   E9           MOV       A,R1
   \   00000A   F5..         MOV       ?V0,A
   \   00000C   75..00       MOV       ?V1,#0x0
   \   00000F   78..         MOV       R0,#?V0
   \   000011   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000014   7902         MOV       R1,#0x2
   \   000016   02....       LJMP      ?Subroutine8 & 0xFFFF
    304          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000006   EC           MOV       A,R4
   \   000007   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   00000A   ED           MOV       A,R5
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine118_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F02         MOV       R7,#0x2
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   EA           MOV       A,R2
   \   000001   FC           MOV       R4,A
   \   000002   EB           MOV       A,R3
   \   000003   FD           MOV       R5,A
   \   000004   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000006   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000008                REQUIRE ??Subroutine125_0
   \   000008                ; // Fall through to label ??Subroutine125_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine125_0:
   \   000000   12....       LCALL     ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000003   02....       LJMP      ??Subroutine118_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   12....       LCALL     ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000004   12....       LCALL     ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000007   A3           INC       DPTR
   \   000008   22           RET
    305          
    306          /*********************************************************************
    307           * Address Requests
    308           */
    309          
    310          /*********************************************************************
    311           * @fn          ZDP_NwkAddrReq
    312           *
    313           * @brief       This builds and send a NWK_addr_req message.  This
    314           *              function sends a broadcast message looking for a 16
    315           *              bit address with a 64 bit address as bait.
    316           *
    317           * @param       IEEEAddress - looking for this device
    318           * @param       SecurityEnable - Security Options
    319           *
    320           * @return      afStatus_t
    321           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    322          afStatus_t ZDP_NwkAddrReq( uint8 *IEEEAddress, byte ReqType,
   \                     ZDP_NwkAddrReq:
    323                                     byte StartIndex, byte SecurityEnable )
    324          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   89..         MOV       ?V2,R1
   \   000010   8C..         MOV       ?V3,R4
    325            uint8 *pBuf = ZDP_TmpBuf;
   \   000012   12....       LCALL     ?Subroutine42 & 0xFFFF
    326            byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
    327            zAddrType_t dstAddr;
    328          
    329            (void)SecurityEnable;  // Intentionally unreferenced parameter
    330          
    331            if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
   \                     ??CrossCallReturnLabel_173:
   \   000015                ; Setup parameters for call to function sAddrExtCmp
   \   000015   EA           MOV       A,R2
   \   000016   FC           MOV       R4,A
   \   000017   EB           MOV       A,R3
   \   000018   FD           MOV       R5,A
   \   000019   7A..         MOV       R2,#saveExtAddr & 0xff
   \   00001B   7B..         MOV       R3,#(saveExtAddr >> 8) & 0xff
   \   00001D   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000020   E9           MOV       A,R1
   \   000021   700A         JNZ       ??ZDP_NwkAddrReq_0
    332            {
    333              dstAddr.addrMode = AddrBroadcast;
   \   000023   7408         MOV       A,#0x8
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   12....       LCALL     ?Subroutine93 & 0xFFFF
    334              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    335            }
   \                     ??CrossCallReturnLabel_146:
   \   00002B   8012         SJMP      ??ZDP_NwkAddrReq_1
    336            else
    337            {
    338              dstAddr.addrMode = Addr16Bit;
   \                     ??ZDP_NwkAddrReq_0:
   \   00002D   7408         MOV       A,#0x8
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   7402         MOV       A,#0x2
   \   000034   F0           MOVX      @DPTR,A
    339              dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
   \   000035   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000038   12....       LCALL     ?Subroutine51 & 0xFFFF
    340            }
   \                     ??CrossCallReturnLabel_68:
   \   00003B   E8           MOV       A,R0
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   A3           INC       DPTR
   \   00003E   E9           MOV       A,R1
   \                     ??ZDP_NwkAddrReq_1:
   \   00003F   F0           MOVX      @DPTR,A
    341          
    342            pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
   \   000040                ; Setup parameters for call to function sAddrExtCpy
   \   000040   EE           MOV       A,R6
   \   000041   FC           MOV       R4,A
   \   000042   EF           MOV       A,R7
   \   000043   FD           MOV       R5,A
   \   000044   AA..         MOV       R2,?V0
   \   000046   AB..         MOV       R3,?V1
   \   000048   12....       LCALL     ?Subroutine71 & 0xFFFF
    343          
    344            *pBuf++ = ReqType;
   \                     ??CrossCallReturnLabel_108:
   \   00004B   E5..         MOV       A,?V2
   \   00004D   F0           MOVX      @DPTR,A
    345            *pBuf++ = StartIndex;
   \   00004E   A3           INC       DPTR
   \   00004F   E5..         MOV       A,?V3
   \   000051   F0           MOVX      @DPTR,A
    346          
    347            return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
   \   000052                ; Setup parameters for call to function fillAndSend
   \   000052   E4           CLR       A
   \   000053   F5..         MOV       ?V0,A
   \   000055   F5..         MOV       ?V1,A
   \   000057   78..         MOV       R0,#?V0
   \   000059   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005C   790A         MOV       R1,#0xa
   \   00005E   7402         MOV       A,#0x2
   \   000060   12....       LCALL     ?XSTACK_DISP102_8
   \   000063                REQUIRE ?Subroutine9
   \   000063                ; // Fall through to label ?Subroutine9
    348          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL     ??Subroutine138_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   000003   12....       LCALL     ?DEALLOC_XSTACK8
   \   000006   7409         MOV       A,#0x9
   \   000008   80..         SJMP      ??Subroutine114_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine112_0
   \   000003                ; // Fall through to label ??Subroutine112_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine112_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine114_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine115_0
   \   000003                ; // Fall through to label ??Subroutine115_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   740F         MOV       A,#0xf
   \   000002   F0           MOVX      @DPTR,A
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   74FD         MOV       A,#-0x3
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   A3           INC       DPTR
   \   00000D   74FF         MOV       A,#-0x1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine138_0:
   \   000000   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000002   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine139_0
   \   000004                ; // Fall through to label ??Subroutine139_0
    349          
    350          /*********************************************************************
    351           * @fn          ZDP_IEEEAddrReq
    352           *
    353           * @brief       This builds and send a IEEE_addr_req message.  This
    354           *              function sends a unicast message looking for a 64
    355           *              bit IEEE address with a 16 bit address as bait.
    356           *
    357           * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
    358           *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
    359           * @param       SecurityEnable - Security Options
    360           *
    361           * @return      afStatus_t
    362           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    363          afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
   \                     ZDP_IEEEAddrReq:
    364                                      byte StartIndex, byte SecurityEnable )
    365          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine52 & 0xFFFF
    366            uint8 *pBuf = ZDP_TmpBuf;
    367            byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
    368            zAddrType_t dstAddr;
    369          
    370            (void)SecurityEnable;  // Intentionally unreferenced parameter
    371          
    372            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \                     ??CrossCallReturnLabel_319:
   \   00000D   7408         MOV       A,#0x8
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   7402         MOV       A,#0x2
   \   000014   F0           MOVX      @DPTR,A
    373            dstAddr.addr.shortAddr = shortAddr;
   \   000015   85..82       MOV       DPL,?XSP + 0
   \   000018   85..83       MOV       DPH,?XSP + 1
   \   00001B   EA           MOV       A,R2
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   A3           INC       DPTR
   \   00001E   EB           MOV       A,R3
   \   00001F   F0           MOVX      @DPTR,A
    374          
    375            *pBuf++ = LO_UINT16( shortAddr );
   \   000020   EA           MOV       A,R2
   \   000021   8882         MOV       DPL,R0
   \   000023   8983         MOV       DPH,R1
   \   000025   F0           MOVX      @DPTR,A
    376            *pBuf++ = HI_UINT16( shortAddr );
   \   000026   EB           MOV       A,R3
   \   000027   12....       LCALL     ?Subroutine36 & 0xFFFF
    377          
    378            *pBuf++ = ReqType;
   \                     ??CrossCallReturnLabel_44:
   \   00002A   F0           MOVX      @DPTR,A
    379            *pBuf++ = StartIndex;
   \   00002B   EC           MOV       A,R4
   \   00002C   8882         MOV       DPL,R0
   \   00002E   8983         MOV       DPH,R1
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   F0           MOVX      @DPTR,A
    380          
    381            return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
   \   000034                ; Setup parameters for call to function fillAndSend
   \   000034   75..01       MOV       ?V0,#0x1
   \   000037   75..00       MOV       ?V1,#0x0
   \   00003A   78..         MOV       R0,#?V0
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003F   7904         MOV       R1,#0x4
   \   000041   02....       LJMP      ?Subroutine2 & 0xFFFF
    382          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   A3           INC       DPTR
   \   000001   F0           MOVX      @DPTR,A
   \   000002   EE           MOV       A,R6
   \   000003   8882         MOV       DPL,R0
   \   000005   8983         MOV       DPH,R1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7402         MOV       A,#0x2
   \   000002   12....       LCALL     ?XSTACK_DISP102_8
   \   000005   12....       LCALL     ??Subroutine138_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000008   12....       LCALL     ?DEALLOC_XSTACK8
   \   00000B                REQUIRE ??Subroutine117_0
   \   00000B                ; // Fall through to label ??Subroutine117_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine117_0:
   \   000000   7409         MOV       A,#0x9
   \   000002                REQUIRE ??Subroutine118_0
   \   000002                ; // Fall through to label ??Subroutine118_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   E9           MOV       A,R1
   \   000001   FE           MOV       R6,A
   \   000002   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000005                REQUIRE ??Subroutine146_0
   \   000005                ; // Fall through to label ??Subroutine146_0
    383          
    384          /*********************************************************************
    385           * @fn          ZDP_MatchDescReq
    386           *
    387           * @brief       This builds and send a Match_Desc_req message.  This
    388           *              function sends a broadcast or unicast message
    389           *              requesting the list of endpoint/interfaces that
    390           *              match profile ID and cluster IDs.
    391           *
    392           * @param       dstAddr - destination address
    393           * @param       nwkAddr - network address of interest
    394           * @param       ProfileID - Profile ID
    395           * @param       NumInClusters - number of input clusters
    396           * @param       InClusterList - input cluster ID list
    397           * @param       NumOutClusters - number of output clusters
    398           * @param       OutClusterList - output cluster ID list
    399           * @param       SecurityEnable - Security Options
    400           *
    401           * @return      afStatus_t
    402           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    403          afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_MatchDescReq:
    404                                          uint16 ProfileID,
    405                                          byte NumInClusters, cId_t *InClusterList,
    406                                          byte NumOutClusters, cId_t *OutClusterList,
    407                                          byte SecurityEnable )
    408          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine52 & 0xFFFF
    409            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_320:
   \   000008   7412         MOV       A,#0x12
   \   00000A   12....       LCALL     ?XSTACK_DISP0_8
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F5..         MOV       ?V0,A
    410            // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    411            byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    412          
    413            (void)SecurityEnable;  // Intentionally unreferenced parameter
    414          
    415            len += (NumInClusters + NumOutClusters) * sizeof(uint16);
   \   000010   EE           MOV       A,R6
   \   000011   25..         ADD       A,?V0
   \   000013   C3           CLR       C
   \   000014   33           RLC       A
   \   000015   2406         ADD       A,#0x6
   \   000017   FF           MOV       R7,A
    416          
    417            if ( len >= ZDP_BUF_SZ-1 )
   \   000018   C3           CLR       C
   \   000019   944F         SUBB      A,#0x4f
   \   00001B   4005         JC        ??ZDP_MatchDescReq_0
    418            {
    419              return afStatus_MEM_FAIL;
   \   00001D   7910         MOV       R1,#0x10
   \   00001F   02....       LJMP      ??ZDP_MatchDescReq_1 & 0xFFFF
    420            }
    421          
    422            // The spec changed in Zigbee 2007 (2.4.3.1.7.1) to not allow sending
    423            // this command to 0xFFFF.  So, here we will filter this and replace
    424            // with 0xFFFD to only send to devices with RX ON.  This includes the
    425            // network address of interest.
    426            if ( ((dstAddr->addrMode == AddrBroadcast) || (dstAddr->addrMode == Addr16Bit))
    427                && (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL) )
   \                     ??ZDP_MatchDescReq_0:
   \   000022   8A82         MOV       DPL,R2
   \   000024   8B83         MOV       DPH,R3
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   640F         XRL       A,#0xf
   \   000031   6011         JZ        ??ZDP_MatchDescReq_2
   \   000033   8A82         MOV       DPL,R2
   \   000035   8B83         MOV       DPH,R3
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   6402         XRL       A,#0x2
   \   000042   7018         JNZ       ??ZDP_MatchDescReq_3
   \                     ??ZDP_MatchDescReq_2:
   \   000044   8A82         MOV       DPL,R2
   \   000046   8B83         MOV       DPH,R3
   \   000048   E0           MOVX      A,@DPTR
   \   000049   F4           CPL       A
   \   00004A   7003         JNZ       ??ZDP_MatchDescReq_4
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   F4           CPL       A
   \                     ??ZDP_MatchDescReq_4:
   \   00004F   700B         JNZ       ??ZDP_MatchDescReq_3
    428            {
    429              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000051   8A82         MOV       DPL,R2
   \   000053   8B83         MOV       DPH,R3
   \   000055   74FD         MOV       A,#-0x3
   \   000057   F0           MOVX      @DPTR,A
   \   000058   A3           INC       DPTR
   \   000059   74FF         MOV       A,#-0x1
   \   00005B   F0           MOVX      @DPTR,A
    430            }
    431            if ( nwkAddr == NWK_BROADCAST_SHORTADDR_DEVALL )
   \                     ??ZDP_MatchDescReq_3:
   \   00005C   74FF         MOV       A,#-0x1
   \   00005E   6C           XRL       A,R4
   \   00005F   7003         JNZ       ??ZDP_MatchDescReq_5
   \   000061   74FF         MOV       A,#-0x1
   \   000063   6D           XRL       A,R5
   \                     ??ZDP_MatchDescReq_5:
   \   000064   7004         JNZ       ??ZDP_MatchDescReq_6
    432            {
    433              nwkAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000066   7CFD         MOV       R4,#-0x3
   \   000068   7DFF         MOV       R5,#-0x1
    434            }
    435          
    436            *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
   \                     ??ZDP_MatchDescReq_6:
   \   00006A   EC           MOV       A,R4
   \   00006B   8882         MOV       DPL,R0
   \   00006D   8983         MOV       DPH,R1
   \   00006F   F0           MOVX      @DPTR,A
    437            *pBuf++ = HI_UINT16( nwkAddr );
   \   000070   ED           MOV       A,R5
   \   000071   A3           INC       DPTR
   \   000072   F0           MOVX      @DPTR,A
   \   000073   740E         MOV       A,#0xe
   \   000075   12....       LCALL     ?XSTACK_DISP0_8
   \   000078   12....       LCALL     ?Subroutine53 & 0xFFFF
    438          
    439            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \                     ??CrossCallReturnLabel_69:
   \   00007B   EC           MOV       A,R4
   \   00007C   8882         MOV       DPL,R0
   \   00007E   8983         MOV       DPH,R1
   \   000080   A3           INC       DPTR
   \   000081   12....       LCALL     ?Subroutine38 & 0xFFFF
    440            *pBuf++ = HI_UINT16( ProfileID );
   \                     ??CrossCallReturnLabel_48:
   \   000084   12....       LCALL     ?Subroutine36 & 0xFFFF
    441          
    442            *pBuf++ = NumInClusters; // Input cluster list
   \                     ??CrossCallReturnLabel_45:
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   F0           MOVX      @DPTR,A
   \   00008A   E8           MOV       A,R0
   \   00008B   2405         ADD       A,#0x5
   \   00008D   F8           MOV       R0,A
   \   00008E   5001         JNC       ??ZDP_MatchDescReq_7
   \   000090   09           INC       R1
    443            if ( NumInClusters )
   \                     ??ZDP_MatchDescReq_7:
   \   000091   EE           MOV       A,R6
   \   000092   6019         JZ        ??ZDP_MatchDescReq_8
    444            {
    445              for (i=0; i<NumInClusters; ++i)  {
   \   000094   75..00       MOV       ?V1,#0x0
   \   000097   7410         MOV       A,#0x10
   \   000099   12....       LCALL     ?XSTACK_DISP0_8
   \   00009C   12....       LCALL     ?Subroutine53 & 0xFFFF
    446                *pBuf++ = LO_UINT16( InClusterList[i] );
   \                     ??CrossCallReturnLabel_70:
   \   00009F   12....       LCALL     ?Subroutine12 & 0xFFFF
    447                *pBuf++ = HI_UINT16( InClusterList[i] );
    448              }
   \                     ??CrossCallReturnLabel_4:
   \   0000A2   5001         JNC       ??ZDP_MatchDescReq_9
   \   0000A4   09           INC       R1
   \                     ??ZDP_MatchDescReq_9:
   \   0000A5   05..         INC       ?V1
   \   0000A7   E5..         MOV       A,?V1
   \   0000A9   C3           CLR       C
   \   0000AA   9E           SUBB      A,R6
   \   0000AB   40F2         JC        ??CrossCallReturnLabel_70
    449            }
    450          
    451            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_MatchDescReq_8:
   \   0000AD   8882         MOV       DPL,R0
   \   0000AF   8983         MOV       DPH,R1
   \   0000B1   E5..         MOV       A,?V0
   \   0000B3   F0           MOVX      @DPTR,A
   \   0000B4   A3           INC       DPTR
   \   0000B5   A882         MOV       R0,DPL
   \   0000B7   A983         MOV       R1,DPH
    452            if ( NumOutClusters )
   \   0000B9   601A         JZ        ??ZDP_MatchDescReq_10
    453            {
    454              for (i=0; i<NumOutClusters; ++i)  {
   \   0000BB   75..00       MOV       ?V1,#0x0
   \   0000BE   7413         MOV       A,#0x13
   \   0000C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C3   12....       LCALL     ?Subroutine53 & 0xFFFF
    455                *pBuf++ = LO_UINT16( OutClusterList[i] );
   \                     ??CrossCallReturnLabel_71:
   \   0000C6   12....       LCALL     ?Subroutine12 & 0xFFFF
    456                *pBuf++ = HI_UINT16( OutClusterList[i] );
    457              }
   \                     ??CrossCallReturnLabel_5:
   \   0000C9   5001         JNC       ??ZDP_MatchDescReq_11
   \   0000CB   09           INC       R1
   \                     ??ZDP_MatchDescReq_11:
   \   0000CC   05..         INC       ?V1
   \   0000CE   E5..         MOV       A,?V1
   \   0000D0   C3           CLR       C
   \   0000D1   95..         SUBB      A,?V0
   \   0000D3   40F1         JC        ??CrossCallReturnLabel_71
    458            }
    459          
    460            return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
   \                     ??ZDP_MatchDescReq_10:
   \   0000D5                ; Setup parameters for call to function fillAndSend
   \   0000D5   75..06       MOV       ?V0,#0x6
   \   0000D8   75..00       MOV       ?V1,#0x0
   \   0000DB   78..         MOV       R0,#?V0
   \   0000DD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E0   EF           MOV       A,R7
   \   0000E1   F9           MOV       R1,A
   \   0000E2   EA           MOV       A,R2
   \   0000E3   FC           MOV       R4,A
   \   0000E4   EB           MOV       A,R3
   \   0000E5   12....       LCALL     ??Subroutine137_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   0000E8   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDP_MatchDescReq_1:
   \   0000EB   80..         SJMP      ??Subroutine116_0
    461          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E5..         MOV       A,?V1
   \   000002   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000005   25..         ADD       A,?V2
   \   000007   F5..         MOV       ?V2,A
   \   000009   ED           MOV       A,R5
   \   00000A   35..         ADDC      A,?V3
   \   00000C   F5..         MOV       ?V3,A
   \   00000E   85..82       MOV       DPL,?V2
   \   000011   F583         MOV       DPH,A
   \   000013   12....       LCALL     ??Subroutine135_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000016   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000019   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   00001C   A3           INC       DPTR
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   E8           MOV       A,R0
   \   00001F   2402         ADD       A,#0x2
   \   000021   F8           MOV       R0,A
   \   000022   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   A3           INC       DPTR
   \   000001   F0           MOVX      @DPTR,A
   \   000002   ED           MOV       A,R5
   \   000003   8882         MOV       DPL,R0
   \   000005   8983         MOV       DPH,R1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002   F5..         MOV       ?V2,A
   \   000004   E4           CLR       A
   \   000005   33           RLC       A
   \   000006   F5..         MOV       ?V3,A
   \   000008   EC           MOV       A,R4
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine135_0
   \   000001                ; // Fall through to label ??Subroutine135_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine135_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine137_0:
   \   000000   FD           MOV       R5,A
   \   000001                REQUIRE ??Subroutine138_0
   \   000001                ; // Fall through to label ??Subroutine138_0
    462          
    463          /*********************************************************************
    464           * @fn          ZDP_SimpleDescReq
    465           *
    466           * @brief       This builds and send a NWK_Simple_Desc_req
    467           *              message.  This function sends unicast message to the
    468           *              destination device.
    469           *
    470           * @param       dstAddr - destination address
    471           * @param       nwkAddr - 16 bit address
    472           * @param       epIntf - endpoint/interface
    473           * @param       SecurityEnable - Security Options
    474           *
    475           * @return      afStatus_t
    476           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    477          afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_SimpleDescReq:
    478                                              byte endPoint, byte SecurityEnable )
    479          
    480          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    481            (void)SecurityEnable;  // Intentionally unreferenced parameter
    482          
    483            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000005   12....       LCALL     ?Subroutine18 & 0xFFFF
    484            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_16:
   \   000008   12....       LCALL     ?Subroutine14 & 0xFFFF
    485            ZDP_TmpBuf[2] = endPoint;
    486          
    487            return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
   \                     ??CrossCallReturnLabel_8:
   \   00000B                ; Setup parameters for call to function fillAndSend
   \   00000B   75..04       MOV       ?V0,#0x4
   \   00000E   75..00       MOV       ?V1,#0x0
   \   000011   78..         MOV       R0,#?V0
   \   000013   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000016   7903         MOV       R1,#0x3
   \   000018   02....       LJMP      ?Subroutine8 & 0xFFFF
    488          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000003   A3           INC       DPTR
   \   000004   E9           MOV       A,R1
   \   000005   F0           MOVX      @DPTR,A
   \   000006   22           RET
    489          
    490          /*********************************************************************
    491           * @fn          ZDP_UserDescSet
    492           *
    493           * @brief       This builds and send a User_Desc_set message to set
    494           *              the user descriptor.  This function sends unicast
    495           *              message to the destination device.
    496           *
    497           * @param       dstAddr - destination address
    498           * @param       nwkAddr - 16 bit address
    499           * @param       UserDescriptor - user descriptor
    500           * @param       SecurityEnable - Security Options
    501           *
    502           * @return      afStatus_t
    503           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    504          afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_UserDescSet:
    505                                    UserDescriptorFormat_t *UserDescriptor,
    506                                    byte SecurityEnable )
    507          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine62 & 0xFFFF
    508            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_89:
   \   000008   740F         MOV       A,#0xf
   \   00000A   12....       LCALL     ?XSTACK_DISP0_8
   \   00000D   12....       LCALL     ?Subroutine43 & 0xFFFF
    509            byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
    510                        UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
   \                     ??CrossCallReturnLabel_58:
   \   000010   C3           CLR       C
   \   000011   9410         SUBB      A,#0x10
   \   000013   5005         JNC       ??ZDP_UserDescSet_0
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F5..         MOV       ?V2,A
   \   000018   8003         SJMP      ??ZDP_UserDescSet_1
   \                     ??ZDP_UserDescSet_0:
   \   00001A   75..10       MOV       ?V2,#0x10
    511            byte addrLen = 2;
    512          
    513            (void)SecurityEnable;  // Intentionally unreferenced parameter
    514          
    515            *pBuf++ = LO_UINT16( nwkAddr );
   \                     ??ZDP_UserDescSet_1:
   \   00001D   EC           MOV       A,R4
   \   00001E   85..82       MOV       DPL,?V0
   \   000021   85..83       MOV       DPH,?V1
   \   000024   F0           MOVX      @DPTR,A
    516            *pBuf++ = HI_UINT16( nwkAddr );
   \   000025   ED           MOV       A,R5
   \   000026   12....       LCALL     ?Subroutine32 & 0xFFFF
    517          
    518            *pBuf++ = len;
   \                     ??CrossCallReturnLabel_38:
   \   000029   E5..         MOV       A,?V2
   \   00002B   12....       LCALL     ?Subroutine31 & 0xFFFF
    519            addrLen = 3;
    520          
    521            pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
   \                     ??CrossCallReturnLabel_35:
   \   00002E   A982         MOV       R1,DPL
   \   000030   AA83         MOV       R2,DPH
   \   000032   89..         MOV       ?V4,R1
   \   000034   8A..         MOV       ?V5,R2
   \   000036   75..00       MOV       ?V6,#0x0
   \   000039   78..         MOV       R0,#?V4
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00003E   AC..         MOV       R4,?V2
   \   000040   7D00         MOV       R5,#0x0
   \   000042   E5..         MOV       A,?V0
   \   000044   2403         ADD       A,#0x3
   \   000046   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   000049   12....       LCALL     ?DEALLOC_XSTACK8
    522            osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
   \   00004C                ; Setup parameters for call to function osal_memset
   \   00004C   A8..         MOV       R0,?V2
   \   00004E   7410         MOV       A,#0x10
   \   000050   C3           CLR       C
   \   000051   98           SUBB      A,R0
   \   000052   FC           MOV       R4,A
   \   000053   95E0         SUBB      A,0xE0 /* A   */
   \   000055   FD           MOV       R5,A
   \   000056   7920         MOV       R1,#0x20
   \   000058   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    523          
    524            return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
   \   00005B                ; Setup parameters for call to function fillAndSend
   \   00005B   75..14       MOV       ?V0,#0x14
   \   00005E   75..00       MOV       ?V1,#0x0
   \   000061   78..         MOV       R0,#?V0
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000066   7913         MOV       R1,#0x13
   \   000068   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   00006B                REQUIRE ?Subroutine3
   \   00006B                ; // Fall through to label ?Subroutine3
    525          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F07         MOV       R7,#0x7
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   000003   8882         MOV       DPL,R0
   \   000005   F583         MOV       DPH,A
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_340:
   \   000007   88..         MOV       ?V0,R0
   \   000009   F5..         MOV       ?V1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   EE           MOV       A,R6
   \   000001   FC           MOV       R4,A
   \   000002   EF           MOV       A,R7
   \   000003                REQUIRE ??Subroutine137_0
   \   000003                ; // Fall through to label ??Subroutine137_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   FA           MOV       R2,A
   \   000001   E4           CLR       A
   \   000002   35..         ADDC      A,?V1
   \   000004   FB           MOV       R3,A
   \   000005                REQUIRE ??Subroutine145_0
   \   000005                ; // Fall through to label ??Subroutine145_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine145_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine147_0
   \   000003                ; // Fall through to label ??Subroutine147_0
    526          
    527          /*********************************************************************
    528           * @fn          ZDP_ServerDiscReq
    529           *
    530           * @brief       Build and send a Server_Discovery_req request message.
    531           *
    532           * @param       serverMask - 16-bit bit-mask of server services being sought.
    533           * @param       SecurityEnable - Security Options
    534           *
    535           * @return      afStatus_t
    536           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    537          afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
   \                     ZDP_ServerDiscReq:
    538          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine52 & 0xFFFF
    539            uint8 *pBuf = ZDP_TmpBuf;
    540            zAddrType_t dstAddr;
    541          
    542            dstAddr.addrMode = AddrBroadcast;
   \                     ??CrossCallReturnLabel_321:
   \   00000D   7408         MOV       A,#0x8
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   12....       LCALL     ?Subroutine19 & 0xFFFF
    543            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    544          
    545            *pBuf++ = LO_UINT16( serverMask );
   \                     ??CrossCallReturnLabel_17:
   \   000015   EA           MOV       A,R2
   \   000016   8882         MOV       DPL,R0
   \   000018   8983         MOV       DPH,R1
   \   00001A   F0           MOVX      @DPTR,A
    546            *pBuf = HI_UINT16( serverMask );
   \   00001B   EB           MOV       A,R3
   \   00001C   A3           INC       DPTR
   \   00001D   F0           MOVX      @DPTR,A
    547          
    548            FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
    549                       ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
   \   00001E   EE           MOV       A,R6
   \   00001F   90....       MOV       DPTR,#ZDP_TxOptions
   \   000022   6004         JZ        ??ZDP_ServerDiscReq_0
   \   000024   7440         MOV       A,#0x40
   \   000026   8001         SJMP      ??ZDP_ServerDiscReq_1
   \                     ??ZDP_ServerDiscReq_0:
   \   000028   E4           CLR       A
   \                     ??ZDP_ServerDiscReq_1:
   \   000029   F0           MOVX      @DPTR,A
   \   00002A                ; Setup parameters for call to function fillAndSend
   \   00002A   75..15       MOV       ?V0,#0x15
   \   00002D   75..00       MOV       ?V1,#0x0
   \   000030   78..         MOV       R0,#?V0
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   7902         MOV       R1,#0x2
   \   000037   E9           MOV       A,R1
   \   000038   12....       LCALL     ?XSTACK_DISP102_8
   \   00003B   12....       LCALL     ??Subroutine138_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000041   E9           MOV       A,R1
   \   000042   F9           MOV       R1,A
   \   000043   90....       MOV       DPTR,#ZDP_TxOptions
   \   000046   E4           CLR       A
   \   000047   F0           MOVX      @DPTR,A
   \   000048   02....       LJMP      ??Subroutine117_0 & 0xFFFF
    550          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET
    551          
    552          /*********************************************************************
    553           * @fn          ZDP_DeviceAnnce
    554           *
    555           * @brief       This builds and send a Device_Annce message.  This
    556           *              function sends a broadcast message.
    557           *
    558           * @param       nwkAddr - 16 bit address of the device
    559           * @param       IEEEAddr - 64 bit address of the device
    560           * @param       capabilities - device capabilities.  This field is only
    561           *                 sent for v1.1 networks.
    562           * @param       SecurityEnable - Security Options
    563           *
    564           * @return      afStatus_t
    565           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    566          afStatus_t ZDP_DeviceAnnce( uint16 nwkAddr, uint8 *IEEEAddr,
   \                     ZDP_DeviceAnnce:
    567                                        byte capabilities, byte SecurityEnable )
    568          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    569            zAddrType_t dstAddr;
    570            uint8 len;
    571          
    572            (void)SecurityEnable;  // Intentionally unreferenced parameter
    573          
    574            dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00000C   7408         MOV       A,#0x8
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ?Subroutine19 & 0xFFFF
    575            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    576          
    577            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_18:
   \   000014   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000017   EA           MOV       A,R2
   \   000018   12....       LCALL     ?Subroutine21 & 0xFFFF
    578            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_21:
   \   00001B   EB           MOV       A,R3
   \   00001C   F0           MOVX      @DPTR,A
    579            osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
   \   00001D                ; Setup parameters for call to function sAddrExtCpy
   \   00001D   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000020   E0           MOVX      A,@DPTR
   \   000021   2402         ADD       A,#0x2
   \   000023   FA           MOV       R2,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   3400         ADDC      A,#0x0
   \   000028   FB           MOV       R3,A
   \   000029   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    580            len = 2 + Z_EXTADDR_LEN;
    581          
    582            ZDP_TmpBuf[10] = capabilities;
   \   00002C   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   00002F   C8           XCH       A,R0
   \   000030   240A         ADD       A,#0xa
   \   000032   F582         MOV       DPL,A
   \   000034   E4           CLR       A
   \   000035   38           ADDC      A,R0
   \   000036   F583         MOV       DPH,A
   \   000038   EE           MOV       A,R6
   \   000039   F0           MOVX      @DPTR,A
    583            len++;
    584          
    585            return fillAndSend( &ZDP_TransID, &dstAddr, Device_annce, len );
   \   00003A                ; Setup parameters for call to function fillAndSend
   \   00003A   75..13       MOV       ?V0,#0x13
   \   00003D   75..00       MOV       ?V1,#0x0
   \   000040   78..         MOV       R0,#?V0
   \   000042   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000045   790B         MOV       R1,#0xb
   \   000047   02....       LJMP      ?Subroutine2 & 0xFFFF
    586          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine128_0
   \   000003                ; // Fall through to label ??Subroutine128_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine128_0:
   \   000000   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000003   22           RET
    587          
    588          /*********************************************************************
    589           * @fn          ZDP_ParentAnnce
    590           *
    591           * @brief       This builds and send a Parent_Annce and Parent_Annce_Rsp
    592           *              messages, it will depend on the clusterID parameter.
    593           *
    594           * @param       TransSeq - ZDP Transaction Sequence Number
    595           * @param       dstAddr - destination address
    596           * @param       numberOfChildren - 8 bit number of children
    597           * @param       childInfo - list of children information (ExtAddr and Age)
    598           * @param       clusterID - Parent_annce or Parent_annce_rsp
    599           * @param       SecurityEnable - Security Options
    600           *
    601           * @return      afStatus_t
    602           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    603          afStatus_t ZDP_ParentAnnce( uint8 *TransSeq,
   \                     ZDP_ParentAnnce:
    604                                      zAddrType_t *dstAddr,
    605                                      uint8 numberOfChildren,
    606                                      uint8 *childInfo,
    607                                      cId_t clusterID,
    608                                      uint8 SecurityEnable )
    609          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   \   00000D   89..         MOV       ?V8,R1
    610            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   12....       LCALL     ?Subroutine55 & 0xFFFF
    611            ZDO_ChildInfo_t *pChildInfo;
    612            uint8 i, len;
    613            uint8 *numOfChild;
    614          
    615            (void)SecurityEnable;  // Intentionally unreferenced parameter
    616          
    617            pChildInfo = (ZDO_ChildInfo_t *)childInfo;
    618          
    619            if ( dstAddr->addrMode == AddrBroadcast )
   \                     ??CrossCallReturnLabel_302:
   \   000012   8C82         MOV       DPL,R4
   \   000014   8D83         MOV       DPH,R5
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   640F         XRL       A,#0xf
   \   000021   700B         JNZ       ??ZDP_ParentAnnce_0
    620            {
    621              // Make sure is sent to 0xFFFC
    622              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
   \   000023   8C82         MOV       DPL,R4
   \   000025   8D83         MOV       DPH,R5
   \   000027   74FC         MOV       A,#-0x4
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   74FF         MOV       A,#-0x1
   \   00002D   F0           MOVX      @DPTR,A
    623            }
    624            len = 1;
   \                     ??ZDP_ParentAnnce_0:
   \   00002E   75..01       MOV       ?V6,#0x1
   \   000031   7418         MOV       A,#0x18
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   12....       LCALL     ?Subroutine41 & 0xFFFF
    625            if ( clusterID == Parent_annce_rsp )
   \                     ??CrossCallReturnLabel_53:
   \   000039   741F         MOV       A,#0x1f
   \   00003B   65..         XRL       A,?V2
   \   00003D   7004         JNZ       ??ZDP_ParentAnnce_1
   \   00003F   7480         MOV       A,#-0x80
   \   000041   65..         XRL       A,?V3
   \                     ??ZDP_ParentAnnce_1:
   \   000043   700B         JNZ       ??CrossCallReturnLabel_25
    626            {
    627              // + Status Byte
    628              len += 1;
   \   000045   75..02       MOV       ?V6,#0x2
    629              // Set the status bit to success
    630              *pBuf++ = 0;
   \   000048   8A82         MOV       DPL,R2
   \   00004A   8B83         MOV       DPH,R3
   \   00004C   E4           CLR       A
   \   00004D   12....       LCALL     ?Subroutine23 & 0xFFFF
    631            }
    632            
    633            numOfChild = pBuf;
   \                     ??CrossCallReturnLabel_25:
   \   000050   8A..         MOV       ?V0,R2
   \   000052   8B..         MOV       ?V1,R3
    634            *pBuf++ = numberOfChildren;
   \   000054   8A82         MOV       DPL,R2
   \   000056   8B83         MOV       DPH,R3
   \   000058   E9           MOV       A,R1
   \   000059   12....       LCALL     ?Subroutine23 & 0xFFFF
    635          
    636            for ( i = 0; i < MAX_PARENT_ANNCE_CHILD; i++ )
   \                     ??CrossCallReturnLabel_26:
   \   00005C   75..00       MOV       ?V7,#0x0
   \   00005F   7416         MOV       A,#0x16
   \   000061   12....       LCALL     ?XSTACK_DISP0_8
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F5..         MOV       ?V12,A
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   F5..         MOV       ?V13,A
    637            {
    638              pBuf = osal_cpyExtAddr( pBuf, pChildInfo[childIndex].extAddr );
   \                     ??ZDP_ParentAnnce_2:
   \   00006B                ; Setup parameters for call to function sAddrExtCpy
   \   00006B   90....       MOV       DPTR,#childIndex
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   F5..         MOV       ?V10,A
   \   000071   75..00       MOV       ?V11,#0x0
   \   000074   7403         MOV       A,#0x3
   \   000076   78..         MOV       R0,#?V10
   \   000078   12....       LCALL     ?S_SHL
   \   00007B   E5..         MOV       A,?V12
   \   00007D   25..         ADD       A,?V10
   \   00007F   FC           MOV       R4,A
   \   000080   E5..         MOV       A,?V13
   \   000082   35..         ADDC      A,?V11
   \   000084   FD           MOV       R5,A
   \   000085   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    639              childIndex++;
   \   000088   90....       MOV       DPTR,#childIndex
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   04           INC       A
   \   00008D   F0           MOVX      @DPTR,A
    640              
    641              len += Z_EXTADDR_LEN;
   \   00008E   7408         MOV       A,#0x8
   \   000090   25..         ADD       A,?V6
   \   000092   F5..         MOV       ?V6,A
    642              
    643              if ( childIndex == numberOfChildren )
   \   000094   E0           MOVX      A,@DPTR
   \   000095   65..         XRL       A,?V8
   \   000097   7012         JNZ       ??ZDP_ParentAnnce_3
    644              {
    645                pBuf = numOfChild;
    646                *pBuf = i + 1;
   \   000099   7401         MOV       A,#0x1
   \   00009B   25..         ADD       A,?V7
   \   00009D   85..82       MOV       DPL,?V0
   \   0000A0   85..83       MOV       DPH,?V1
   \   0000A3   F0           MOVX      @DPTR,A
    647                // All childs are taken, restart index and go out
    648                childIndex = 0;
   \   0000A4   90....       MOV       DPTR,#childIndex
   \   0000A7   E4           CLR       A
   \   0000A8   F0           MOVX      @DPTR,A
    649                return fillAndSend( TransSeq, dstAddr, clusterID, len );
   \   0000A9                ; Setup parameters for call to function fillAndSend
   \   0000A9   804B         SJMP      ??ZDP_ParentAnnce_4
    650              }
    651            }
   \                     ??ZDP_ParentAnnce_3:
   \   0000AB   05..         INC       ?V7
   \   0000AD   E5..         MOV       A,?V7
   \   0000AF   C3           CLR       C
   \   0000B0   940A         SUBB      A,#0xa
   \   0000B2   40B7         JC        ??ZDP_ParentAnnce_2
    652            
    653            pBuf = numOfChild;
    654            *pBuf = MAX_PARENT_ANNCE_CHILD;
   \   0000B4   85..82       MOV       DPL,?V0
   \   0000B7   85..83       MOV       DPH,?V1
   \   0000BA   740A         MOV       A,#0xa
   \   0000BC   F0           MOVX      @DPTR,A
    655            if ( childIndex < numberOfChildren )
   \   0000BD   90....       MOV       DPTR,#childIndex
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   C3           CLR       C
   \   0000C2   95..         SUBB      A,?V8
   \   0000C4   5030         JNC       ??ZDP_ParentAnnce_4
    656            {
    657              if ( clusterID == Parent_annce )
   \   0000C6   741F         MOV       A,#0x1f
   \   0000C8   65..         XRL       A,?V2
   \   0000CA   45..         ORL       A,?V3
   \   0000CC   7005         JNZ       ??ZDP_ParentAnnce_5
    658              {
    659                ZDApp_SetParentAnnceTimer();
   \   0000CE                ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
   \   0000CE   12....       LCALL     `??ZDApp_SetParentAnnceTimer::?relay`; Banked call to: ZDApp_SetParentAnnceTimer
   \   0000D1   8023         SJMP      ??ZDP_ParentAnnce_4
    660              }
    661              if ( clusterID == Parent_annce_rsp )
   \                     ??ZDP_ParentAnnce_5:
   \   0000D3   741F         MOV       A,#0x1f
   \   0000D5   65..         XRL       A,?V2
   \   0000D7   7004         JNZ       ??ZDP_ParentAnnce_6
   \   0000D9   7480         MOV       A,#-0x80
   \   0000DB   65..         XRL       A,?V3
   \                     ??ZDP_ParentAnnce_6:
   \   0000DD   7017         JNZ       ??ZDP_ParentAnnce_4
    662              {
    663                osal_start_timerEx( ZDAppTaskID, ZDO_PARENT_ANNCE_EVT, 10 );
   \   0000DF                ; Setup parameters for call to function osal_start_timerEx
   \   0000DF   90....       MOV       DPTR,#__Constant_a
   \   0000E2   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000E5   7A00         MOV       R2,#0x0
   \   0000E7   7B40         MOV       R3,#0x40
   \   0000E9   90....       MOV       DPTR,#ZDAppTaskID
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   F9           MOV       R1,A
   \   0000EE   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000F1   7404         MOV       A,#0x4
   \   0000F3   12....       LCALL     ?DEALLOC_XSTACK8
    664              }
    665            }
    666          
    667            return fillAndSend( TransSeq, dstAddr, clusterID, len );
   \                     ??ZDP_ParentAnnce_4:
   \   0000F6                ; Setup parameters for call to function fillAndSend
   \   0000F6   78..         MOV       R0,#?V2
   \   0000F8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FB   A9..         MOV       R1,?V6
   \   0000FD   EE           MOV       A,R6
   \   0000FE   FC           MOV       R4,A
   \   0000FF   EF           MOV       A,R7
   \   000100   FD           MOV       R5,A
   \   000101   AA..         MOV       R2,?V4
   \   000103   AB..         MOV       R3,?V5
   \   000105   12....       LCALL     ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000108   12....       LCALL     ?DEALLOC_XSTACK8
   \   00010B   7F0E         MOV       R7,#0xe
   \   00010D   02....       LJMP      ?BANKED_LEAVE_XDATA
    668          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   AA82         MOV       R2,DPL
   \   000004   AB83         MOV       R3,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine143_0
   \   000003                ; // Fall through to label ??Subroutine143_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine143_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET
    669          
    670          /*********************************************************************
    671           * Address Responses
    672           */
    673          
    674          /*********************************************************************
    675           * @fn      zdpProcessAddrReq
    676           *
    677           * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
    678           *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
    679           *
    680           * @param   inMsg - incoming message
    681           *
    682           * @return  none
    683           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    684          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg )
   \                     zdpProcessAddrReq:
    685          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 22
   \   000005   74EA         MOV       A,#-0x16
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
    686            associated_devices_t *pAssoc;
    687            uint8 reqType;
    688            uint16 aoi = INVALID_NODE_ADDR;
   \   00000E   75..FE       MOV       ?V2,#-0x2
   \   000011   75..FF       MOV       ?V3,#-0x1
    689            uint8 *ieee = NULL;
   \   000014   7E00         MOV       R6,#0x0
   \   000016   7F00         MOV       R7,#0x0
    690          
    691            reqType = inMsg->asdu[(inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
   \   000018   EA           MOV       A,R2
   \   000019   12....       LCALL     ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   00001C   7004         JNZ       ??zdpProcessAddrReq_0
   \   00001E   7808         MOV       R0,#0x8
   \   000020   8002         SJMP      ??zdpProcessAddrReq_1
   \                     ??zdpProcessAddrReq_0:
   \   000022   7802         MOV       R0,#0x2
   \                     ??zdpProcessAddrReq_1:
   \   000024   EA           MOV       A,R2
   \   000025   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000028   28           ADD       A,R0
   \   000029   FA           MOV       R2,A
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   3400         ADDC      A,#0x0
   \   00002E   8A82         MOV       DPL,R2
   \   000030   F583         MOV       DPH,A
   \   000032   E0           MOVX      A,@DPTR
   \   000033   F5..         MOV       ?V7,A
    692          
    693            if ( inMsg->clusterID == NWK_addr_req )
   \   000035   E5..         MOV       A,?V4
   \   000037   240C         ADD       A,#0xc
   \   000039   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   00003C   49           ORL       A,R1
   \   00003D   7072         JNZ       ??zdpProcessAddrReq_2
    694          
    695            {
    696              ieee = inMsg->asdu;
   \   00003F   E5..         MOV       A,?V4
   \   000041   2413         ADD       A,#0x13
   \   000043   F582         MOV       DPL,A
   \   000045   E4           CLR       A
   \   000046   35..         ADDC      A,?V5
   \   000048   F583         MOV       DPH,A
   \   00004A   12....       LCALL     ??Subroutine142_0 & 0xFFFF
    697          
    698              if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
   \                     ??CrossCallReturnLabel_293:
   \   00004D                ; Setup parameters for call to function sAddrExtCmp
   \   00004D   EE           MOV       A,R6
   \   00004E   FC           MOV       R4,A
   \   00004F   EF           MOV       A,R7
   \   000050   FD           MOV       R5,A
   \   000051   7A..         MOV       R2,#saveExtAddr & 0xff
   \   000053   7B..         MOV       R3,#(saveExtAddr >> 8) & 0xff
   \   000055   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000058   E9           MOV       A,R1
   \   000059   6009         JZ        ??zdpProcessAddrReq_3
    699              {
    700                aoi = ZDAppNwkAddr.addr.shortAddr;
   \   00005B   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00005E   12....       LCALL     ?Subroutine41 & 0xFFFF
    701              }
   \                     ??CrossCallReturnLabel_54:
   \   000061   02....       LJMP      ??zdpProcessAddrReq_4 & 0xFFFF
    702              // Handle response for sleeping end devices
    703              else if ( (ZSTACK_ROUTER_BUILD)
    704                && (((pAssoc = AssocGetWithExt( ieee )) != NULL)
    705                       && ((pAssoc->nodeRelation == CHILD_RFD) || (pAssoc->nodeRelation == CHILD_RFD_RX_IDLE)) ) )
   \                     ??zdpProcessAddrReq_3:
   \   000064   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000067   E0           MOVX      A,@DPTR
   \   000068   6007         JZ        ??zdpProcessAddrReq_5
   \   00006A   6401         XRL       A,#0x1
   \   00006C   6003         JZ        $+5
   \   00006E   02....       LJMP      ??zdpProcessAddrReq_6 & 0xFFFF
   \                     ??zdpProcessAddrReq_5:
   \   000071                ; Setup parameters for call to function AssocGetWithExt
   \   000071   EE           MOV       A,R6
   \   000072   FA           MOV       R2,A
   \   000073   EF           MOV       A,R7
   \   000074   FB           MOV       R3,A
   \   000075   12....       LCALL     `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   000078   8B..         MOV       ?V1,R3
   \   00007A   A9..         MOV       R1,?V1
   \   00007C   EA           MOV       A,R2
   \   00007D   49           ORL       A,R1
   \   00007E   7003         JNZ       $+5
   \   000080   02....       LJMP      ??zdpProcessAddrReq_6 & 0xFFFF
   \   000083   8A82         MOV       DPL,R2
   \   000085   8B83         MOV       DPH,R3
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   6401         XRL       A,#0x1
   \   00008E   6010         JZ        ??zdpProcessAddrReq_7
   \   000090   8A82         MOV       DPL,R2
   \   000092   8B83         MOV       DPH,R3
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   E0           MOVX      A,@DPTR
   \   000099   6402         XRL       A,#0x2
   \   00009B   6003         JZ        $+5
   \   00009D   02....       LJMP      ??zdpProcessAddrReq_6 & 0xFFFF
    706              {
    707                aoi = pAssoc->shortAddr;
   \                     ??zdpProcessAddrReq_7:
   \   0000A0   8A82         MOV       DPL,R2
   \   0000A2   8B83         MOV       DPH,R3
   \   0000A4   12....       LCALL     ?Subroutine41 & 0xFFFF
    708                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
   \                     ??CrossCallReturnLabel_55:
   \   0000A7   E5..         MOV       A,?V7
   \   0000A9   6003         JZ        $+5
   \   0000AB   02....       LJMP      ??zdpProcessAddrReq_8 & 0xFFFF
   \   0000AE   02....       LJMP      ??zdpProcessAddrReq_4 & 0xFFFF
    709                  reqType = 0xFF; // Force Invalid
    710              }
    711            }
   \                     ??zdpProcessAddrReq_2:
   \   0000B1   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   0000B4   F8           MOV       R0,A
   \   0000B5   A3           INC       DPTR
   \   0000B6   E0           MOVX      A,@DPTR
   \   0000B7   8882         MOV       DPL,R0
   \   0000B9   F583         MOV       DPH,A
   \   0000BB   E0           MOVX      A,@DPTR
   \   0000BC   FA           MOV       R2,A
   \   0000BD   A3           INC       DPTR
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   F9           MOV       R1,A
   \   0000C0   EA           MOV       A,R2
   \   0000C1   2E           ADD       A,R6
   \   0000C2   F5..         MOV       ?V2,A
   \   0000C4   E4           CLR       A
   \   0000C5   39           ADDC      A,R1
   \   0000C6   F5..         MOV       ?V3,A
    712            else  // if ( inMsg->clusterID == IEEE_addr_req )
    713            {
    714              aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    715          
    716              if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   0000C8   90....       MOV       DPTR,#ZDAppNwkAddr
   \   0000CB   E0           MOVX      A,@DPTR
   \   0000CC   6A           XRL       A,R2
   \   0000CD   7003         JNZ       ??zdpProcessAddrReq_9
   \   0000CF   A3           INC       DPTR
   \   0000D0   E0           MOVX      A,@DPTR
   \   0000D1   69           XRL       A,R1
   \                     ??zdpProcessAddrReq_9:
   \   0000D2   7006         JNZ       ??zdpProcessAddrReq_10
    717              {
    718                ieee = saveExtAddr;
   \   0000D4   7E..         MOV       R6,#saveExtAddr & 0xff
   \   0000D6   7F..         MOV       R7,#(saveExtAddr >> 8) & 0xff
   \   0000D8   8057         SJMP      ??zdpProcessAddrReq_4
    719              }
    720              else if ( (ZSTACK_ROUTER_BUILD)
    721                && (((pAssoc = AssocGetWithShort( aoi )) != NULL)
    722                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \                     ??zdpProcessAddrReq_10:
   \   0000DA   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   6004         JZ        ??zdpProcessAddrReq_11
   \   0000E0   6401         XRL       A,#0x1
   \   0000E2   705D         JNZ       ??zdpProcessAddrReq_6
   \                     ??zdpProcessAddrReq_11:
   \   0000E4                ; Setup parameters for call to function AssocGetWithShort
   \   0000E4   AB..         MOV       R3,?V3
   \   0000E6   12....       LCALL     `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   0000E9   8B..         MOV       ?V1,R3
   \   0000EB   A9..         MOV       R1,?V1
   \   0000ED   EA           MOV       A,R2
   \   0000EE   49           ORL       A,R1
   \   0000EF   6050         JZ        ??zdpProcessAddrReq_6
   \   0000F1   8A82         MOV       DPL,R2
   \   0000F3   8B83         MOV       DPH,R3
   \   0000F5   A3           INC       DPTR
   \   0000F6   A3           INC       DPTR
   \   0000F7   A3           INC       DPTR
   \   0000F8   A3           INC       DPTR
   \   0000F9   E0           MOVX      A,@DPTR
   \   0000FA   6401         XRL       A,#0x1
   \   0000FC   7043         JNZ       ??zdpProcessAddrReq_6
    723              {
    724                AddrMgrEntry_t addrEntry;
    725                addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   0000FE   7409         MOV       A,#0x9
   \   000100   12....       LCALL     ?XSTACK_DISP0_8
   \   000103   E4           CLR       A
   \   000104   F0           MOVX      @DPTR,A
    726                addrEntry.index = pAssoc->addrIdx;
   \   000105   8A82         MOV       DPL,R2
   \   000107   8B83         MOV       DPH,R3
   \   000109   A3           INC       DPTR
   \   00010A   A3           INC       DPTR
   \   00010B   12....       LCALL     ??Subroutine146_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   00010E   7414         MOV       A,#0x14
   \   000110   12....       LCALL     ?XSTACK_DISP0_8
   \   000113   12....       LCALL     ??Subroutine133_0 & 0xFFFF
    727                if ( AddrMgrEntryGet( &addrEntry ) )
   \                     ??CrossCallReturnLabel_230:
   \   000116                ; Setup parameters for call to function AddrMgrEntryGet
   \   000116   7409         MOV       A,#0x9
   \   000118   12....       LCALL     ?XSTACK_DISP101_8
   \   00011B   12....       LCALL     `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   \   00011E   E9           MOV       A,R1
   \   00011F   6009         JZ        ??zdpProcessAddrReq_12
    728                {
    729                  ieee = addrEntry.extAddr;
   \   000121   740C         MOV       A,#0xc
   \   000123   12....       LCALL     ?XSTACK_DISP0_8
   \   000126   AE82         MOV       R6,DPL
   \   000128   AF83         MOV       R7,DPH
    730                }
    731          
    732                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
   \                     ??zdpProcessAddrReq_12:
   \   00012A   E5..         MOV       A,?V7
   \   00012C   6003         JZ        ??zdpProcessAddrReq_4
    733                  reqType = 0xFF; // Force Invalid
   \                     ??zdpProcessAddrReq_8:
   \   00012E   75..FF       MOV       ?V7,#-0x1
    734              }
    735            }
    736          
    737            if ( ((aoi != INVALID_NODE_ADDR) && (ieee != NULL)) || (inMsg->wasBroadcast == FALSE) )
   \                     ??zdpProcessAddrReq_4:
   \   000131   74FE         MOV       A,#-0x2
   \   000133   65..         XRL       A,?V2
   \   000135   7004         JNZ       ??zdpProcessAddrReq_13
   \   000137   74FF         MOV       A,#-0x1
   \   000139   65..         XRL       A,?V3
   \                     ??zdpProcessAddrReq_13:
   \   00013B   6004         JZ        ??zdpProcessAddrReq_6
   \   00013D   EE           MOV       A,R6
   \   00013E   4F           ORL       A,R7
   \   00013F   700C         JNZ       ??zdpProcessAddrReq_14
   \                     ??zdpProcessAddrReq_6:
   \   000141   E5..         MOV       A,?V4
   \   000143   240B         ADD       A,#0xb
   \   000145   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000148   6003         JZ        $+5
   \   00014A   02....       LJMP      ??zdpProcessAddrReq_15 & 0xFFFF
    738            {
    739              uint8 stat;
    740              uint8 *pBuf = ZDP_TmpBuf;
   \                     ??zdpProcessAddrReq_14:
   \   00014D   12....       LCALL     ?Subroutine42 & 0xFFFF
    741              // Status + IEEE-Addr + Nwk-Addr.
    742              uint8 len = 1 + Z_EXTADDR_LEN + 2;
   \                     ??CrossCallReturnLabel_174:
   \   000150   75..0B       MOV       ?V8,#0xb
    743          
    744              // If aoi and iee are both setup, we found results
    745              if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
   \   000153   74FE         MOV       A,#-0x2
   \   000155   65..         XRL       A,?V2
   \   000157   7004         JNZ       ??zdpProcessAddrReq_16
   \   000159   74FF         MOV       A,#-0x1
   \   00015B   65..         XRL       A,?V3
   \                     ??zdpProcessAddrReq_16:
   \   00015D   6024         JZ        ??zdpProcessAddrReq_17
   \   00015F   EE           MOV       A,R6
   \   000160   4F           ORL       A,R7
   \   000161   6020         JZ        ??zdpProcessAddrReq_17
    746              {
    747                stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) || (reqType == ZDP_ADDR_REQTYPE_EXTENDED))
    748                              ? ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
   \   000163   E5..         MOV       A,?V7
   \   000165   6006         JZ        ??zdpProcessAddrReq_18
   \   000167   7401         MOV       A,#0x1
   \   000169   65..         XRL       A,?V7
   \   00016B   7005         JNZ       ??zdpProcessAddrReq_19
   \                     ??zdpProcessAddrReq_18:
   \   00016D   75..00       MOV       ?V6,#0x0
   \   000170   803C         SJMP      ??zdpProcessAddrReq_20
   \                     ??zdpProcessAddrReq_19:
   \   000172   75..80       MOV       ?V6,#-0x80
    749                        
    750                if(stat == ZDP_INVALID_REQTYPE)
    751                {
    752                  //R21 Errata update CCB 2111 
    753                  if(inMsg->wasBroadcast == TRUE)
   \   000175   E5..         MOV       A,?V4
   \   000177   240B         ADD       A,#0xb
   \   000179   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   00017C   6401         XRL       A,#0x1
   \   00017E   702E         JNZ       ??zdpProcessAddrReq_20
    754                  {
    755                    return;
   \   000180   02....       LJMP      ??zdpProcessAddrReq_15 & 0xFFFF
    756                  }
    757                  
    758                  stat = ZDP_INVALID_REQTYPE;
    759                }
    760              }
    761              else
    762              {
    763                // not found and the req was unicast to this device
    764                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??zdpProcessAddrReq_17:
   \   000183   75..81       MOV       ?V6,#-0x7f
    765          
    766                // Fill in the missing field with this device's address
    767                if ( inMsg->clusterID == NWK_addr_req )
   \   000186   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000189   7008         JNZ       ??zdpProcessAddrReq_21
    768                {
    769                  //CCB 2112 Zigbee Core spec
    770                  aoi = 0xFFFF;
   \   00018B   75..FF       MOV       ?V2,#-0x1
   \   00018E   75..FF       MOV       ?V3,#-0x1
   \   000191   801B         SJMP      ??zdpProcessAddrReq_20
    771                }
    772                else
    773                {
    774                  //CCB 2113 Zigbee Core spec
    775                  uint8 invalidIEEEAddr[Z_EXTADDR_LEN];
    776                  osal_memset(invalidIEEEAddr,0xFF,Z_EXTADDR_LEN);
   \                     ??zdpProcessAddrReq_21:
   \   000193                ; Setup parameters for call to function osal_memset
   \   000193   7C08         MOV       R4,#0x8
   \   000195   7D00         MOV       R5,#0x0
   \   000197   79FF         MOV       R1,#-0x1
   \   000199   7401         MOV       A,#0x1
   \   00019B   12....       LCALL     ?XSTACK_DISP101_8
   \   00019E   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    777                  ieee = invalidIEEEAddr;
   \   0001A1   7401         MOV       A,#0x1
   \   0001A3   12....       LCALL     ?XSTACK_DISP100_8
   \   0001A6   88..         MOV       ?V10,R0
   \   0001A8   89..         MOV       ?V11,R1
   \   0001AA   AE..         MOV       R6,?V10
   \   0001AC   AF..         MOV       R7,?V11
    778                }
    779              }
    780          
    781              *pBuf++ = stat;
   \                     ??zdpProcessAddrReq_20:
   \   0001AE   85..82       MOV       DPL,?V0
   \   0001B1   85..83       MOV       DPH,?V1
   \   0001B4   E5..         MOV       A,?V6
   \   0001B6   12....       LCALL     ?Subroutine35 & 0xFFFF
    782          
    783              pBuf = osal_cpyExtAddr( pBuf, ieee );
   \                     ??CrossCallReturnLabel_42:
   \   0001B9                ; Setup parameters for call to function sAddrExtCpy
   \   0001B9   EE           MOV       A,R6
   \   0001BA   FC           MOV       R4,A
   \   0001BB   EF           MOV       A,R7
   \   0001BC   FD           MOV       R5,A
   \   0001BD   AA..         MOV       R2,?V0
   \   0001BF   AB..         MOV       R3,?V1
   \   0001C1   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0001C4   8A..         MOV       ?V0,R2
   \   0001C6   8B..         MOV       ?V1,R3
   \   0001C8   AE..         MOV       R6,?V0
   \   0001CA   AF..         MOV       R7,?V1
    784          
    785              *pBuf++ = LO_UINT16( aoi );
   \   0001CC   8A82         MOV       DPL,R2
   \   0001CE   8B83         MOV       DPH,R3
   \   0001D0   E5..         MOV       A,?V2
   \   0001D2   F0           MOVX      @DPTR,A
    786              *pBuf++ = HI_UINT16( aoi );
   \   0001D3   A3           INC       DPTR
   \   0001D4   E5..         MOV       A,?V3
   \   0001D6   F0           MOVX      @DPTR,A
    787          
    788              if ( ZSTACK_ROUTER_BUILD )
   \   0001D7   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0001DA   E0           MOVX      A,@DPTR
   \   0001DB   6007         JZ        ??zdpProcessAddrReq_22
   \   0001DD   6401         XRL       A,#0x1
   \   0001DF   6003         JZ        $+5
   \   0001E1   02....       LJMP      ??zdpProcessAddrReq_23 & 0xFFFF
    789              {
    790                if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) && (aoi == ZDAppNwkAddr.addr.shortAddr)
    791                     && (stat == ZDP_SUCCESS) )
   \                     ??zdpProcessAddrReq_22:
   \   0001E4   7401         MOV       A,#0x1
   \   0001E6   65..         XRL       A,?V7
   \   0001E8   6003         JZ        $+5
   \   0001EA   02....       LJMP      ??zdpProcessAddrReq_23 & 0xFFFF
   \   0001ED   90....       MOV       DPTR,#ZDAppNwkAddr
   \   0001F0   E0           MOVX      A,@DPTR
   \   0001F1   65..         XRL       A,?V2
   \   0001F3   7004         JNZ       ??zdpProcessAddrReq_24
   \   0001F5   A3           INC       DPTR
   \   0001F6   E0           MOVX      A,@DPTR
   \   0001F7   65..         XRL       A,?V3
   \                     ??zdpProcessAddrReq_24:
   \   0001F9   6003         JZ        $+5
   \   0001FB   02....       LJMP      ??zdpProcessAddrReq_23 & 0xFFFF
   \   0001FE   E5..         MOV       A,?V6
   \   000200   6003         JZ        $+5
   \   000202   02....       LJMP      ??zdpProcessAddrReq_23 & 0xFFFF
    792                {
    793                  uint8  cnt = 0;
   \   000205   85..82       MOV       DPL,?XSP + 0
   \   000208   85..83       MOV       DPH,?XSP + 1
   \   00020B   E4           CLR       A
   \   00020C   F0           MOVX      @DPTR,A
    794                  
    795                  //Updated to only search for ZED devices as per R21 spec (2.4.3.1.1.2)
    796                  uint16 *list = AssocMakeList( &cnt );
   \   00020D                ; Setup parameters for call to function AssocMakeList
   \   00020D   AA..         MOV       R2,?XSP + 0
   \   00020F   AB..         MOV       R3,?XSP + 1
   \   000211   12....       LCALL     `??AssocMakeList::?relay`; Banked call to: AssocMakeList
    797          
    798                  if ( list != NULL )
   \   000214   EA           MOV       A,R2
   \   000215   4B           ORL       A,R3
   \   000216   7003         JNZ       $+5
   \   000218   02....       LJMP      ??zdpProcessAddrReq_25 & 0xFFFF
    799                  {
    800                    byte idx = inMsg->asdu[(((inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
   \   00021B   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   00021E   7004         JNZ       ??zdpProcessAddrReq_26
   \   000220   7809         MOV       R0,#0x9
   \   000222   8002         SJMP      ??zdpProcessAddrReq_27
   \                     ??zdpProcessAddrReq_26:
   \   000224   7803         MOV       R0,#0x3
   \                     ??zdpProcessAddrReq_27:
   \   000226   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000229   28           ADD       A,R0
   \   00022A   FC           MOV       R4,A
   \   00022B   A3           INC       DPTR
   \   00022C   E0           MOVX      A,@DPTR
   \   00022D   3400         ADDC      A,#0x0
   \   00022F   8C82         MOV       DPL,R4
   \   000231   F583         MOV       DPH,A
   \   000233   E0           MOVX      A,@DPTR
   \   000234   FC           MOV       R4,A
    801                    uint16 *pList = list + idx;
   \   000235   25E0         ADD       A,0xE0 /* A   */
   \   000237   F8           MOV       R0,A
   \   000238   E4           CLR       A
   \   000239   33           RLC       A
   \   00023A   F9           MOV       R1,A
   \   00023B   EA           MOV       A,R2
   \   00023C   28           ADD       A,R0
   \   00023D   F8           MOV       R0,A
   \   00023E   EB           MOV       A,R3
   \   00023F   39           ADDC      A,R1
   \   000240   F9           MOV       R1,A
    802          
    803                    // NumAssocDev field is only present on success.
    804                    if ( cnt > idx )
   \   000241   85..82       MOV       DPL,?XSP + 0
   \   000244   85..83       MOV       DPH,?XSP + 1
   \   000247   E0           MOVX      A,@DPTR
   \   000248   FD           MOV       R5,A
   \   000249   EC           MOV       A,R4
   \   00024A   C3           CLR       C
   \   00024B   9D           SUBB      A,R5
   \   00024C   500C         JNC       ??zdpProcessAddrReq_28
    805                    {
    806                      cnt -= idx;
   \   00024E   E0           MOVX      A,@DPTR
   \   00024F   C3           CLR       C
   \   000250   9C           SUBB      A,R4
   \   000251   F0           MOVX      @DPTR,A
    807                      len += (cnt * sizeof( uint16 ));
   \   000252   C3           CLR       C
   \   000253   33           RLC       A
   \   000254   240B         ADD       A,#0xb
   \   000256   F5..         MOV       ?V8,A
   \   000258   8002         SJMP      ??zdpProcessAddrReq_29
    808                    }
    809                    else
    810                    {
    811                      cnt = 0;
   \                     ??zdpProcessAddrReq_28:
   \   00025A   E4           CLR       A
   \   00025B   F0           MOVX      @DPTR,A
    812                    }
    813                    *pBuf++ = cnt;
   \                     ??zdpProcessAddrReq_29:
   \   00025C   12....       LCALL     ?Subroutine64 & 0xFFFF
    814                    len++;
    815          
    816                    // StartIndex field is only present if NumAssocDev field is non-zero.
    817                    *pBuf++ = idx;
   \                     ??CrossCallReturnLabel_93:
   \   00025F   EC           MOV       A,R4
   \   000260   8E82         MOV       DPL,R6
   \   000262   8F83         MOV       DPH,R7
   \   000264   A3           INC       DPTR
   \   000265   A3           INC       DPTR
   \   000266   A3           INC       DPTR
   \   000267   F0           MOVX      @DPTR,A
   \   000268   EE           MOV       A,R6
   \   000269   2404         ADD       A,#0x4
   \   00026B   F5..         MOV       ?V0,A
   \   00026D   E4           CLR       A
   \   00026E   3F           ADDC      A,R7
   \   00026F   F5..         MOV       ?V1,A
    818                    len++;
   \   000271   05..         INC       ?V8
   \   000273   05..         INC       ?V8
   \   000275   802C         SJMP      ??zdpProcessAddrReq_30
    819          
    820                    while ( cnt != 0 )
    821                    {
    822                      *pBuf++ = LO_UINT16( *pList );
   \                     ??zdpProcessAddrReq_31:
   \   000277   8882         MOV       DPL,R0
   \   000279   8983         MOV       DPH,R1
   \   00027B   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   00027E   12....       LCALL     ??Subroutine124_0 & 0xFFFF
    823                      *pBuf++ = HI_UINT16( *pList );
   \                     ??CrossCallReturnLabel_192:
   \   000281   85..82       MOV       DPL,?V0
   \   000284   85..83       MOV       DPH,?V1
   \   000287   A3           INC       DPTR
   \   000288   F0           MOVX      @DPTR,A
   \   000289   E5..         MOV       A,?V0
   \   00028B   2402         ADD       A,#0x2
   \   00028D   F5..         MOV       ?V0,A
   \   00028F   5002         JNC       ??zdpProcessAddrReq_32
   \   000291   05..         INC       ?V1
    824                      pList++;
   \                     ??zdpProcessAddrReq_32:
   \   000293   E8           MOV       A,R0
   \   000294   2402         ADD       A,#0x2
   \   000296   F8           MOV       R0,A
   \   000297   5001         JNC       ??zdpProcessAddrReq_33
   \   000299   09           INC       R1
    825                      cnt--;
   \                     ??zdpProcessAddrReq_33:
   \   00029A   85..82       MOV       DPL,?XSP + 0
   \   00029D   85..83       MOV       DPH,?XSP + 1
   \   0002A0   E0           MOVX      A,@DPTR
   \   0002A1   14           DEC       A
   \   0002A2   F0           MOVX      @DPTR,A
    826                    }
   \                     ??zdpProcessAddrReq_30:
   \   0002A3   85..82       MOV       DPL,?XSP + 0
   \   0002A6   85..83       MOV       DPH,?XSP + 1
   \   0002A9   E0           MOVX      A,@DPTR
   \   0002AA   70CB         JNZ       ??zdpProcessAddrReq_31
    827          
    828                    osal_mem_free( (uint8 *)list );
   \   0002AC                ; Setup parameters for call to function osal_mem_free
   \   0002AC   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0002AF   800B         SJMP      ??zdpProcessAddrReq_23
    829                  }
    830                  else
    831                  {
    832                    // NumAssocDev field is only present on success.
    833                    *pBuf++ = 0;
   \                     ??zdpProcessAddrReq_25:
   \   0002B1   8E82         MOV       DPL,R6
   \   0002B3   8F83         MOV       DPH,R7
   \   0002B5   A3           INC       DPTR
   \   0002B6   A3           INC       DPTR
   \   0002B7   E4           CLR       A
   \   0002B8   F0           MOVX      @DPTR,A
    834                    len++;
   \   0002B9   75..0C       MOV       ?V8,#0xc
    835                  }
    836                }
    837              }
    838          
    839              ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \                     ??zdpProcessAddrReq_23:
   \   0002BC   90....       MOV       DPTR,#ZDP_TxOptions
   \   0002BF   7410         MOV       A,#0x10
   \   0002C1   F0           MOVX      @DPTR,A
    840              fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), (cId_t)(inMsg->clusterID | ZDO_RESPONSE_BIT), len );
   \   0002C2                ; Setup parameters for call to function fillAndSend
   \   0002C2   E5..         MOV       A,?V4
   \   0002C4   240C         ADD       A,#0xc
   \   0002C6   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   0002C9   F5..         MOV       ?V0,A
   \   0002CB   A3           INC       DPTR
   \   0002CC   E0           MOVX      A,@DPTR
   \   0002CD   4480         ORL       A,#0x80
   \   0002CF   F5..         MOV       ?V1,A
   \   0002D1   78..         MOV       R0,#?V0
   \   0002D3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002D6   A9..         MOV       R1,?V8
   \   0002D8   E5..         MOV       A,?V4
   \   0002DA   2402         ADD       A,#0x2
   \   0002DC   FC           MOV       R4,A
   \   0002DD   E4           CLR       A
   \   0002DE   35..         ADDC      A,?V5
   \   0002E0   FD           MOV       R5,A
   \   0002E1   E5..         MOV       A,?V4
   \   0002E3   240F         ADD       A,#0xf
   \   0002E5   FA           MOV       R2,A
   \   0002E6   E4           CLR       A
   \   0002E7   35..         ADDC      A,?V5
   \   0002E9   FB           MOV       R3,A
   \   0002EA   12....       LCALL     ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   0002ED   12....       LCALL     ?DEALLOC_XSTACK8
    841              ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   0002F0   90....       MOV       DPTR,#ZDP_TxOptions
   \   0002F3   E4           CLR       A
   \   0002F4   F0           MOVX      @DPTR,A
    842            }
    843          }
   \                     ??zdpProcessAddrReq_15:
   \   0002F5   7416         MOV       A,#0x16
   \   0002F7   02....       LJMP      ??Subroutine130_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   E5..         MOV       A,?V4
   \   000002                REQUIRE ??Subroutine119_0
   \   000002                ; // Fall through to label ??Subroutine119_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine119_0:
   \   000000   2413         ADD       A,#0x13
   \   000002                REQUIRE ??Subroutine120_0
   \   000002                ; // Fall through to label ??Subroutine120_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine120_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V5
   \   000005   F583         MOV       DPH,A
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   E5..         MOV       A,?V4
   \   000002                REQUIRE ??Subroutine121_0
   \   000002                ; // Fall through to label ??Subroutine121_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine121_0:
   \   000000   240C         ADD       A,#0xc
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   35..         ADDC      A,?V5
   \   000007   F583         MOV       DPH,A
   \   000009                REQUIRE ??Subroutine122_0
   \   000009                ; // Fall through to label ??Subroutine122_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine122_0:
   \   000000   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine124_0:
   \   000000   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   8582..       MOV       ?V0,DPL
   \   000005   8583..       MOV       ?V1,DPH
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine130_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F0C         MOV       R7,#0xc
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   12....       LCALL     ??Subroutine131_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine131_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine142_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET
    844          
    845          /*********************************************************************
    846           * @fn          ZDP_NodeDescMsg
    847           *
    848           * @brief       Builds and sends a Node Descriptor message, unicast to the
    849           *              specified device.
    850           *
    851           * @param       inMsg - incoming message
    852           * @param       nwkAddr - 16 bit network address for device
    853           * @param       pNodeDesc - pointer to the node descriptor
    854           *
    855           * @return      afStatus_t
    856           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    857          afStatus_t ZDP_NodeDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_NodeDescMsg:
    858                                     uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc )
    859          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    860            uint8 *pBuf = ZDP_TmpBuf;
   \   000005   12....       LCALL     ?Subroutine48 & 0xFFFF
    861            byte len;
    862          
    863            len = 1 + 2 + 13;  // Status + nwkAddr + Node descriptor
    864          
    865            *pBuf++ = ZDP_SUCCESS;
   \                     ??CrossCallReturnLabel_297:
   \   000008   8E82         MOV       DPL,R6
   \   00000A   F583         MOV       DPH,A
   \   00000C   E4           CLR       A
   \   00000D   F0           MOVX      @DPTR,A
    866          
    867            *pBuf++ = LO_UINT16( nwkAddr );
   \   00000E   EC           MOV       A,R4
   \   00000F   A3           INC       DPTR
   \   000010   F0           MOVX      @DPTR,A
    868            *pBuf++ = HI_UINT16( nwkAddr );
   \   000011   ED           MOV       A,R5
   \   000012   8E82         MOV       DPL,R6
   \   000014   8F83         MOV       DPH,R7
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   F0           MOVX      @DPTR,A
   \   000019   740A         MOV       A,#0xa
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   12....       LCALL     ?Subroutine43 & 0xFFFF
    869          
    870            *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
    871                               (pNodeDesc->UserDescAvail << 4) |
    872                               (pNodeDesc->LogicalType & 0x07));
   \                     ??CrossCallReturnLabel_59:
   \   000021   541F         ANL       A,#0x1f
   \   000023   8E82         MOV       DPL,R6
   \   000025   8F83         MOV       DPH,R7
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   12....       LCALL     ?Subroutine27 & 0xFFFF
    873          
    874            *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
   \                     ??CrossCallReturnLabel_190:
   \   00002C   8E82         MOV       DPL,R6
   \   00002E   8F83         MOV       DPH,R7
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   12....       LCALL     ?Subroutine31 & 0xFFFF
    875            *pBuf++ = pNodeDesc->CapabilityFlags;
   \                     ??CrossCallReturnLabel_36:
   \   000037   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   00003A   12....       LCALL     ?Subroutine30 & 0xFFFF
    876            *pBuf++ = pNodeDesc->ManufacturerCode[0];
   \                     ??CrossCallReturnLabel_187:
   \   00003D   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000040   12....       LCALL     ?Subroutine30 & 0xFFFF
    877            *pBuf++ = pNodeDesc->ManufacturerCode[1];
   \                     ??CrossCallReturnLabel_188:
   \   000043   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000046   12....       LCALL     ?Subroutine29 & 0xFFFF
    878            *pBuf++ = pNodeDesc->MaxBufferSize;
   \                     ??CrossCallReturnLabel_33:
   \   000049   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00004C   12....       LCALL     ?Subroutine29 & 0xFFFF
    879            *pBuf++ = pNodeDesc->MaxInTransferSize[0];
   \                     ??CrossCallReturnLabel_34:
   \   00004F   A3           INC       DPTR
   \   000050   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000053   12....       LCALL     ?Subroutine22 & 0xFFFF
    880            *pBuf++ = pNodeDesc->MaxInTransferSize[1];
   \                     ??CrossCallReturnLabel_23:
   \   000056   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000059   A3           INC       DPTR
   \   00005A   F0           MOVX      @DPTR,A
    881          
    882            *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
   \   00005B   E8           MOV       A,R0
   \   00005C   2408         ADD       A,#0x8
   \   00005E   FC           MOV       R4,A
   \   00005F   E4           CLR       A
   \   000060   39           ADDC      A,R1
   \   000061   FD           MOV       R5,A
   \   000062   8C82         MOV       DPL,R4
   \   000064   F583         MOV       DPH,A
   \   000066   E0           MOVX      A,@DPTR
   \   000067   F5..         MOV       ?V0,A
   \   000069   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   00006C   E5..         MOV       A,?V0
   \   00006E   12....       LCALL     ??Subroutine127_0 & 0xFFFF
    883            *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
   \                     ??CrossCallReturnLabel_208:
   \   000071   E0           MOVX      A,@DPTR
   \   000072   C0E0         PUSH      A
   \   000074   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000077   D0E0         POP       A
   \   000079   12....       LCALL     ?Subroutine22 & 0xFFFF
    884            *pBuf++ = pNodeDesc->MaxOutTransferSize[0];
   \                     ??CrossCallReturnLabel_24:
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   C0E0         PUSH      A
   \   000082   EE           MOV       A,R6
   \   000083   240D         ADD       A,#0xd
   \   000085   F582         MOV       DPL,A
   \   000087   E4           CLR       A
   \   000088   3F           ADDC      A,R7
   \   000089   F583         MOV       DPH,A
   \   00008B   D0E0         POP       A
   \   00008D   F0           MOVX      @DPTR,A
    885            *pBuf++ = pNodeDesc->MaxOutTransferSize[1];
   \   00008E   E8           MOV       A,R0
   \   00008F   240B         ADD       A,#0xb
   \   000091   F582         MOV       DPL,A
   \   000093   E4           CLR       A
   \   000094   39           ADDC      A,R1
   \   000095   F583         MOV       DPH,A
   \   000097   E0           MOVX      A,@DPTR
   \   000098   C0E0         PUSH      A
   \   00009A   EE           MOV       A,R6
   \   00009B   240E         ADD       A,#0xe
   \   00009D   F582         MOV       DPL,A
   \   00009F   E4           CLR       A
   \   0000A0   3F           ADDC      A,R7
   \   0000A1   F583         MOV       DPH,A
   \   0000A3   D0E0         POP       A
   \   0000A5   F0           MOVX      @DPTR,A
    886            *pBuf = pNodeDesc->DescriptorCapability;
   \   0000A6   E8           MOV       A,R0
   \   0000A7   240C         ADD       A,#0xc
   \   0000A9   F582         MOV       DPL,A
   \   0000AB   E4           CLR       A
   \   0000AC   39           ADDC      A,R1
   \   0000AD   F583         MOV       DPH,A
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   C0E0         PUSH      A
   \   0000B2   EE           MOV       A,R6
   \   0000B3   240F         ADD       A,#0xf
   \   0000B5   F582         MOV       DPL,A
   \   0000B7   E4           CLR       A
   \   0000B8   3F           ADDC      A,R7
   \   0000B9   F583         MOV       DPH,A
   \   0000BB   D0E0         POP       A
   \   0000BD   F0           MOVX      @DPTR,A
    887          
    888            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Node_Desc_rsp, len );
   \   0000BE                ; Setup parameters for call to function fillAndSend
   \   0000BE   75..02       MOV       ?V0,#0x2
   \   0000C1   75..80       MOV       ?V1,#-0x80
   \   0000C4   78..         MOV       R0,#?V0
   \   0000C6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C9   7910         MOV       R1,#0x10
   \   0000CB   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   0000CE   5001         JNC       ??ZDP_NodeDescMsg_0
   \   0000D0   0B           INC       R3
   \                     ??ZDP_NodeDescMsg_0:
   \   0000D1   80..         SJMP      ??Subroutine125_0
    889          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine123_0
   \   000003                ; // Fall through to label ??Subroutine123_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine123_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine124_0
   \   000001                ; // Fall through to label ??Subroutine124_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   EA           MOV       A,R2
   \   000001   2402         ADD       A,#0x2
   \   000003   FC           MOV       R4,A
   \   000004   E4           CLR       A
   \   000005   3B           ADDC      A,R3
   \   000006   FD           MOV       R5,A
   \   000007   EA           MOV       A,R2
   \   000008   240F         ADD       A,#0xf
   \   00000A   FA           MOV       R2,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine127_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   EE           MOV       A,R6
   \   000001   240B         ADD       A,#0xb
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine131_0
   \   000001                ; // Fall through to label ??Subroutine131_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine142_0
   \   000003                ; // Fall through to label ??Subroutine142_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   EE           MOV       A,R6
   \   000001   240C         ADD       A,#0xc
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET
    890          
    891          /*********************************************************************
    892           * @fn          ZDP_PowerDescMsg
    893           *
    894           * @brief       Builds and sends a Power Descriptor message, unicast to the
    895           *              specified device.
    896           *
    897           * @param       inMsg - incoming message (request)
    898           * @param       nwkAddr - 16 bit network address for device
    899           * @param       pPowerDesc - pointer to the node descriptor
    900           *
    901           * @return      afStatus_t
    902           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    903          afStatus_t ZDP_PowerDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_PowerDescMsg:
    904                               uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc )
    905          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    906            uint8 *pBuf = ZDP_TmpBuf;
   \   000005   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000008   FE           MOV       R6,A
   \   000009   E9           MOV       A,R1
   \   00000A   FF           MOV       R7,A
    907            byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
    908          
    909            *pBuf++ = ZDP_SUCCESS;
   \   00000B   8882         MOV       DPL,R0
   \   00000D   F583         MOV       DPH,A
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
    910          
    911            *pBuf++ = LO_UINT16( nwkAddr );
   \   000011   EC           MOV       A,R4
   \   000012   12....       LCALL     ?Subroutine38 & 0xFFFF
    912            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_49:
   \   000015   F0           MOVX      @DPTR,A
   \   000016   740A         MOV       A,#0xa
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine43 & 0xFFFF
    913          
    914            *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
    915                              | (pPowerDesc->PowerMode & 0x0F));
   \                     ??CrossCallReturnLabel_60:
   \   00001E   8E82         MOV       DPL,R6
   \   000020   8F83         MOV       DPH,R7
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   12....       LCALL     ?Subroutine109 & 0xFFFF
    916            *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
    917                              | (pPowerDesc->CurrentPowerSource & 0x0F));
   \                     ??CrossCallReturnLabel_199:
   \   000028   12....       LCALL     ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   00002B   540F         ANL       A,#0xf
   \   00002D   F9           MOV       R1,A
   \   00002E   740C         MOV       A,#0xc
   \   000030   78..         MOV       R0,#?V0
   \   000032   12....       LCALL     ?US_SHR
   \   000035   E5..         MOV       A,?V0
   \   000037   C4           SWAP      A
   \   000038   49           ORL       A,R1
   \   000039   8E82         MOV       DPL,R6
   \   00003B   8F83         MOV       DPH,R7
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   F0           MOVX      @DPTR,A
    918          
    919            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Power_Desc_rsp, len );
   \   000042                ; Setup parameters for call to function fillAndSend
   \   000042   75..03       MOV       ?V0,#0x3
   \   000045   75..80       MOV       ?V1,#-0x80
   \   000048   78..         MOV       R0,#?V0
   \   00004A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004D   7905         MOV       R1,#0x5
   \   00004F   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000052   5001         JNC       ??ZDP_PowerDescMsg_0
   \   000054   0B           INC       R3
   \                     ??ZDP_PowerDescMsg_0:
   \   000055   80..         SJMP      ??Subroutine125_0
    920          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine126_0
   \   000003                ; // Fall through to label ??Subroutine126_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine126_0:
   \   000000   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   000003   E8           MOV       A,R0
   \   000004   22           RET
    921          
    922          /*********************************************************************
    923           * @fn          ZDP_SimpleDescMsg
    924           *
    925           * @brief       Builds and sends a Simple Descriptor message, unicast to the
    926           *              specified device.
    927           *
    928           * @param       inMsg - incoming message (request)
    929           * @param       Status - message status (ZDP_SUCCESS or other)
    930           * @param       pSimpleDesc - pointer to the node descriptor
    931           *
    932           * @return      afStatus_t
    933           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    934          afStatus_t ZDP_SimpleDescMsg( zdoIncomingMsg_t *inMsg, byte Status,
   \                     ZDP_SimpleDescMsg:
    935                                        SimpleDescriptionFormat_t *pSimpleDesc )
    936          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    937            uint8 *pBuf = ZDP_TmpBuf;
   \   000007   12....       LCALL     ?Subroutine42 & 0xFFFF
    938            uint8 i, len;
    939          
    940            if ( Status == ZDP_SUCCESS && pSimpleDesc )
   \                     ??CrossCallReturnLabel_175:
   \   00000A   E9           MOV       A,R1
   \   00000B   702E         JNZ       ??ZDP_SimpleDescMsg_0
   \   00000D   EC           MOV       A,R4
   \   00000E   4D           ORL       A,R5
   \   00000F   602A         JZ        ??ZDP_SimpleDescMsg_0
    941            {
    942              // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
    943              len = 1 + 2 + 1 + 8;
    944              len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters) * sizeof ( uint16 );
   \   000011   8C82         MOV       DPL,R4
   \   000013   8D83         MOV       DPH,R5
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F8           MOV       R0,A
   \   000020   8C82         MOV       DPL,R4
   \   000022   8D83         MOV       DPH,R5
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   28           ADD       A,R0
   \   00002C   C3           CLR       C
   \   00002D   33           RLC       A
   \   00002E   240C         ADD       A,#0xc
   \   000030   F9           MOV       R1,A
    945            }
    946            else
    947            {
    948              len = 1 + 2 + 1; // Status + desc length
    949            }
    950            if ( len >= ZDP_BUF_SZ-1 )
   \   000031   C3           CLR       C
   \   000032   944F         SUBB      A,#0x4f
   \   000034   4007         JC        ??ZDP_SimpleDescMsg_1
    951            {
    952              return afStatus_MEM_FAIL;
   \   000036   7910         MOV       R1,#0x10
   \   000038   02....       LJMP      ??ZDP_SimpleDescMsg_2 & 0xFFFF
    953            }
   \                     ??ZDP_SimpleDescMsg_0:
   \   00003B   7904         MOV       R1,#0x4
    954          
    955            *pBuf++ = Status;
   \                     ??ZDP_SimpleDescMsg_1:
   \   00003D   EE           MOV       A,R6
   \   00003E   85..82       MOV       DPL,?V0
   \   000041   85..83       MOV       DPH,?V1
   \   000044   F0           MOVX      @DPTR,A
    956            
    957            //From spec 2.4.3.1.5 The NWKAddrOfInterest field shall match 
    958            //that specified in the original Simple_Desc_req command
    959            *pBuf++ = inMsg->asdu[0];  
   \   000045   EA           MOV       A,R2
   \   000046   2413         ADD       A,#0x13
   \   000048   F5..         MOV       ?V2,A
   \   00004A   E4           CLR       A
   \   00004B   3B           ADDC      A,R3
   \   00004C   F5..         MOV       ?V3,A
   \   00004E   85..82       MOV       DPL,?V2
   \   000051   F583         MOV       DPH,A
   \   000053   12....       LCALL     ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000056   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000059   12....       LCALL     ?Subroutine108 & 0xFFFF
    960            *pBuf++ = inMsg->asdu[1];
   \                     ??CrossCallReturnLabel_165:
   \   00005C   12....       LCALL     ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   00005F   A3           INC       DPTR
   \   000060   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000063   F0           MOVX      @DPTR,A
    961          
    962            if ( len > 4 )
   \   000064   E9           MOV       A,R1
   \   000065   C3           CLR       C
   \   000066   9405         SUBB      A,#0x5
   \   000068   5003         JNC       $+5
   \   00006A   02....       LJMP      ??ZDP_SimpleDescMsg_3 & 0xFFFF
    963            {
    964              *pBuf++ = len - 4;   // Simple descriptor length
   \   00006D   74FC         MOV       A,#-0x4
   \   00006F   29           ADD       A,R1
   \   000070   85..82       MOV       DPL,?V0
   \   000073   85..83       MOV       DPH,?V1
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   F0           MOVX      @DPTR,A
    965          
    966              *pBuf++ = pSimpleDesc->EndPoint;
   \   00007A   8C82         MOV       DPL,R4
   \   00007C   8D83         MOV       DPH,R5
   \   00007E   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000081   12....       LCALL     ?Subroutine33 & 0xFFFF
    967              *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_206:
   \   000084   8582..       MOV       ?V2,DPL
   \   000087   8583..       MOV       ?V3,DPH
   \   00008A   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   00008D   12....       LCALL     ?Subroutine11 & 0xFFFF
    968              *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_2:
   \   000090   F0           MOVX      @DPTR,A
    969              *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
   \   000091   EC           MOV       A,R4
   \   000092   2403         ADD       A,#0x3
   \   000094   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000097   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00009A   12....       LCALL     ?Subroutine11 & 0xFFFF
    970              *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
   \                     ??CrossCallReturnLabel_3:
   \   00009D   12....       LCALL     ?Subroutine33 & 0xFFFF
    971          
    972              *pBuf++ = (byte)(pSimpleDesc->AppDevVer & 0x0F);
   \                     ??CrossCallReturnLabel_207:
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   540F         ANL       A,#0xf
   \   0000A7   85..82       MOV       DPL,?V0
   \   0000AA   85..83       MOV       DPH,?V1
   \   0000AD   A3           INC       DPTR
   \   0000AE   A3           INC       DPTR
   \   0000AF   A3           INC       DPTR
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   A3           INC       DPTR
   \   0000B3   A3           INC       DPTR
   \   0000B4   A3           INC       DPTR
   \   0000B5   A3           INC       DPTR
   \   0000B6   F0           MOVX      @DPTR,A
    973          
    974              *pBuf++ = pSimpleDesc->AppNumInClusters;
   \   0000B7   EC           MOV       A,R4
   \   0000B8   2406         ADD       A,#0x6
   \   0000BA   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   0000BD   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0000C0   A3           INC       DPTR
   \   0000C1   A3           INC       DPTR
   \   0000C2   A3           INC       DPTR
   \   0000C3   A3           INC       DPTR
   \   0000C4   A3           INC       DPTR
   \   0000C5   A3           INC       DPTR
   \   0000C6   A3           INC       DPTR
   \   0000C7   F0           MOVX      @DPTR,A
   \   0000C8   E5..         MOV       A,?V0
   \   0000CA   240B         ADD       A,#0xb
   \   0000CC   F5..         MOV       ?V0,A
   \   0000CE   5002         JNC       ??ZDP_SimpleDescMsg_4
   \   0000D0   05..         INC       ?V1
    975              if ( pSimpleDesc->AppNumInClusters )
   \                     ??ZDP_SimpleDescMsg_4:
   \   0000D2   85..82       MOV       DPL,?V2
   \   0000D5   85..83       MOV       DPH,?V3
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   6022         JZ        ??ZDP_SimpleDescMsg_5
    976              {
    977                for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
   \   0000DB   7800         MOV       R0,#0x0
   \   0000DD   800D         SJMP      ??ZDP_SimpleDescMsg_6
    978                {
    979                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??ZDP_SimpleDescMsg_7:
   \   0000DF   12....       LCALL     ?Subroutine72 & 0xFFFF
    980                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
    981                }
   \                     ??CrossCallReturnLabel_111:
   \   0000E2   2407         ADD       A,#0x7
   \   0000E4   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000E7   5002         JNC       ??ZDP_SimpleDescMsg_8
   \   0000E9   05..         INC       ?V1
   \                     ??ZDP_SimpleDescMsg_8:
   \   0000EB   08           INC       R0
   \                     ??ZDP_SimpleDescMsg_6:
   \   0000EC   8C82         MOV       DPL,R4
   \   0000EE   8D83         MOV       DPH,R5
   \   0000F0   A3           INC       DPTR
   \   0000F1   A3           INC       DPTR
   \   0000F2   A3           INC       DPTR
   \   0000F3   A3           INC       DPTR
   \   0000F4   A3           INC       DPTR
   \   0000F5   A3           INC       DPTR
   \   0000F6   E0           MOVX      A,@DPTR
   \   0000F7   FF           MOV       R7,A
   \   0000F8   E8           MOV       A,R0
   \   0000F9   C3           CLR       C
   \   0000FA   9F           SUBB      A,R7
   \   0000FB   40E2         JC        ??ZDP_SimpleDescMsg_7
    982              }
    983          
    984              *pBuf++ = pSimpleDesc->AppNumOutClusters;
   \                     ??ZDP_SimpleDescMsg_5:
   \   0000FD   EC           MOV       A,R4
   \   0000FE   2409         ADD       A,#0x9
   \   000100   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000103   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000106   12....       LCALL     ?Subroutine35 & 0xFFFF
    985              if ( pSimpleDesc->AppNumOutClusters )
   \                     ??CrossCallReturnLabel_43:
   \   000109   85..82       MOV       DPL,?V2
   \   00010C   85..83       MOV       DPH,?V3
   \   00010F   E0           MOVX      A,@DPTR
   \   000110   6030         JZ        ??ZDP_SimpleDescMsg_9
    986              {
    987                for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
   \   000112   7800         MOV       R0,#0x0
   \                     ??ZDP_SimpleDescMsg_10:
   \   000114   8C82         MOV       DPL,R4
   \   000116   8D83         MOV       DPH,R5
   \   000118   A3           INC       DPTR
   \   000119   A3           INC       DPTR
   \   00011A   A3           INC       DPTR
   \   00011B   A3           INC       DPTR
   \   00011C   A3           INC       DPTR
   \   00011D   A3           INC       DPTR
   \   00011E   A3           INC       DPTR
   \   00011F   A3           INC       DPTR
   \   000120   A3           INC       DPTR
   \   000121   E0           MOVX      A,@DPTR
   \   000122   FF           MOV       R7,A
   \   000123   E8           MOV       A,R0
   \   000124   C3           CLR       C
   \   000125   9F           SUBB      A,R7
   \   000126   501A         JNC       ??ZDP_SimpleDescMsg_9
    988                {
    989                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   000128   12....       LCALL     ?Subroutine72 & 0xFFFF
    990                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
    991                }
   \                     ??CrossCallReturnLabel_112:
   \   00012B   240A         ADD       A,#0xa
   \   00012D   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000130   5002         JNC       ??ZDP_SimpleDescMsg_11
   \   000132   05..         INC       ?V1
   \                     ??ZDP_SimpleDescMsg_11:
   \   000134   08           INC       R0
   \   000135   80DD         SJMP      ??ZDP_SimpleDescMsg_10
    992              }
    993            }
    994          
    995            else
    996            {
    997              *pBuf = 0; // Description Length = 0;
   \                     ??ZDP_SimpleDescMsg_3:
   \   000137   85..82       MOV       DPL,?V0
   \   00013A   85..83       MOV       DPH,?V1
   \   00013D   A3           INC       DPTR
   \   00013E   A3           INC       DPTR
   \   00013F   A3           INC       DPTR
   \   000140   E4           CLR       A
   \   000141   F0           MOVX      @DPTR,A
    998            }
    999          
   1000            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Simple_Desc_rsp, len );
   \                     ??ZDP_SimpleDescMsg_9:
   \   000142                ; Setup parameters for call to function fillAndSend
   \   000142   75..04       MOV       ?V0,#0x4
   \   000145   75..80       MOV       ?V1,#-0x80
   \   000148   78..         MOV       R0,#?V0
   \   00014A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00014D   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000150   5001         JNC       ??ZDP_SimpleDescMsg_12
   \   000152   0B           INC       R3
   \                     ??ZDP_SimpleDescMsg_12:
   \   000153   12....       LCALL     ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000156   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDP_SimpleDescMsg_2:
   \   000159                REQUIRE ?Subroutine5
   \   000159                ; // Fall through to label ?Subroutine5
   1001          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   F5..         MOV       ?V2,A
   \   000002   E4           CLR       A
   \   000003   3D           ADDC      A,R5
   \   000004   F5..         MOV       ?V3,A
   \   000006   85..82       MOV       DPL,?V2
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   E8           MOV       A,R0
   \   000001   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine127_0
   \   000002                ; // Fall through to label ??Subroutine127_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000008   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F5..         MOV       ?V4,A
   \   000002   E4           CLR       A
   \   000003   3D           ADDC      A,R5
   \   000004   F5..         MOV       ?V5,A
   \   000006   85..82       MOV       DPL,?V4
   \   000009   F583         MOV       DPH,A
   \   00000B   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   00000E   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000011   F0           MOVX      @DPTR,A
   \   000012   85..82       MOV       DPL,?V4
   \   000015   85..83       MOV       DPH,?V5
   \   000018   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   00001B   A3           INC       DPTR
   \   00001C   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   E5..         MOV       A,?V0
   \   000022   2402         ADD       A,#0x2
   \   000024   F5..         MOV       ?V0,A
   \   000026   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   25..         ADD       A,?V2
   \   000003   FF           MOV       R7,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   35..         ADDC      A,?V3
   \   000008   8F82         MOV       DPL,R7
   \   00000A   F583         MOV       DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   12....       LCALL     ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   12....       LCALL     ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000003   A3           INC       DPTR
   \   000004   22           RET
   1002          
   1003          /*********************************************************************
   1004           * @fn          ZDP_EPRsp
   1005           *
   1006           * @brief       This builds and send an endpoint list. Used in
   1007           *              Active_EP_rsp and Match_Desc_Rsp
   1008           *              message.  This function sends unicast message to the
   1009           *              requesting device.
   1010           *
   1011           * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
   1012           * @param       dstAddr - destination address
   1013           * @param       Status - message status (ZDP_SUCCESS or other)
   1014           * @param       nwkAddr - Device's short address that this response describes
   1015           * @param       Count - number of endpoint/interfaces in list
   1016           * @param       pEPIntfList - Array of Endpoint/Interfaces
   1017           * @param       SecurityEnable - Security Options
   1018           *
   1019           * @return      afStatus_t
   1020           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1021          afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_EPRsp:
   1022                                  byte Status, uint16 nwkAddr, byte Count,
   1023                                  uint8 *pEPList,
   1024                                  byte SecurityEnable )
   1025          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V2,R2
   \   000014   8B..         MOV       ?V3,R3
   \   000016   EC           MOV       A,R4
   \   000017   FE           MOV       R6,A
   \   000018   ED           MOV       A,R5
   \   000019   FF           MOV       R7,A
   1026            uint8 *pBuf = ZDP_TmpBuf;
   \   00001A   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   00001D   FA           MOV       R2,A
   \   00001E   E9           MOV       A,R1
   \   00001F   FB           MOV       R3,A
   1027            byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
   \   000020   75..04       MOV       ?V0,#0x4
   1028            byte txOptions;
   1029          
   1030            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1031          
   1032            if ( MsgType == Match_Desc_rsp )
   \   000023   7406         MOV       A,#0x6
   \   000025   65..         XRL       A,?V2
   \   000027   7004         JNZ       ??ZDP_EPRsp_0
   \   000029   7480         MOV       A,#-0x80
   \   00002B   65..         XRL       A,?V3
   \                     ??ZDP_EPRsp_0:
   \   00002D   7005         JNZ       ??ZDP_EPRsp_1
   1033              txOptions = AF_MSG_ACK_REQUEST;
   \   00002F   75..10       MOV       ?V1,#0x10
   \   000032   8003         SJMP      ??ZDP_EPRsp_2
   1034            else
   1035              txOptions = 0;
   \                     ??ZDP_EPRsp_1:
   \   000034   75..00       MOV       ?V1,#0x0
   1036          
   1037              *pBuf++ = Status;
   \                     ??ZDP_EPRsp_2:
   \   000037   7410         MOV       A,#0x10
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   00003F   7411         MOV       A,#0x11
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   12....       LCALL     ?Subroutine16 & 0xFFFF
   1038            *pBuf++ = LO_UINT16( nwkAddr );
   1039            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_12:
   \   000047   7413         MOV       A,#0x13
   \   000049   12....       LCALL     ?XSTACK_DISP0_8
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   F9           MOV       R1,A
   1040          
   1041            *pBuf++ = Count;   // Endpoint/Interface count
   \   00004E   8A82         MOV       DPL,R2
   \   000050   8B83         MOV       DPH,R3
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   F0           MOVX      @DPTR,A
   1042          
   1043            if ( Count )
   \   000056   6021         JZ        ??ZDP_EPRsp_3
   1044            {
   1045              len += Count;
   \   000058   7404         MOV       A,#0x4
   \   00005A   29           ADD       A,R1
   \   00005B   F5..         MOV       ?V0,A
   1046              osal_memcpy( pBuf, pEPList, Count );
   \   00005D                ; Setup parameters for call to function osal_memcpy
   \   00005D   7414         MOV       A,#0x14
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   12....       LCALL     ?Subroutine50 & 0xFFFF
   1047            }
   \                     ??CrossCallReturnLabel_65:
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000068   E9           MOV       A,R1
   \   000069   FC           MOV       R4,A
   \   00006A   7D00         MOV       R5,#0x0
   \   00006C   EA           MOV       A,R2
   \   00006D   2404         ADD       A,#0x4
   \   00006F   FA           MOV       R2,A
   \   000070   5001         JNC       ??ZDP_EPRsp_4
   \   000072   0B           INC       R3
   \                     ??ZDP_EPRsp_4:
   \   000073   12....       LCALL     ??Subroutine145_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   000076   12....       LCALL     ?DEALLOC_XSTACK8
   1048          
   1049            FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
   \                     ??ZDP_EPRsp_3:
   \   000079   E5..         MOV       A,?V1
   \   00007B   90....       MOV       DPTR,#ZDP_TxOptions
   \   00007E   F0           MOVX      @DPTR,A
   \   00007F                ; Setup parameters for call to function fillAndSend
   \   00007F   78..         MOV       R0,#?V2
   \   000081   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000084   A9..         MOV       R1,?V0
   \   000086   EE           MOV       A,R6
   \   000087   FC           MOV       R4,A
   \   000088   EF           MOV       A,R7
   \   000089   FD           MOV       R5,A
   \   00008A   7402         MOV       A,#0x2
   \   00008C   12....       LCALL     ?XSTACK_DISP101_8
   \   00008F   12....       LCALL     ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000092   12....       LCALL     ?DEALLOC_XSTACK8
   \   000095   E9           MOV       A,R1
   \   000096   F9           MOV       R1,A
   \   000097   90....       MOV       DPTR,#ZDP_TxOptions
   \   00009A   E4           CLR       A
   \   00009B   F0           MOVX      @DPTR,A
   \   00009C   04           INC       A
   \   00009D   02....       LJMP      ?Subroutine3 & 0xFFFF
   1050          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000003   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000006   F0           MOVX      @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL     ??Subroutine135_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   75..00       MOV       ?V6,#0x0
   \   00000A   78..         MOV       R0,#?V4
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   E9           MOV       A,R1
   \   000002   8A82         MOV       DPL,R2
   \   000004   8B83         MOV       DPH,R3
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   12....       LCALL     ??Subroutine147_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   22           RET
   1051          
   1052          /*********************************************************************
   1053           * @fn          ZDP_UserDescRsp
   1054           *
   1055           * @brief       Build and send the User Decriptor Response.
   1056           *
   1057           *
   1058           * @param       dstAddr - destination address
   1059           * @param       nwkAddrOfInterest -
   1060           * @param       userDesc -
   1061           * @param       SecurityEnable - Security Options
   1062           *
   1063           * @return      ZStatus_t
   1064           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1065          ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_UserDescRsp:
   1066                          uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
   1067                          byte SecurityEnable )
   1068          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   12....       LCALL     ?Subroutine62 & 0xFFFF
   1069            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_90:
   \   000015   7413         MOV       A,#0x13
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   12....       LCALL     ??Subroutine147_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_336:
   \   00001D   88..         MOV       ?V8,R0
   \   00001F   F5..         MOV       ?V9,A
   1070            byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
   1071          
   1072            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1073          
   1074            len += userDesc->len;
   \   000021   8882         MOV       DPL,R0
   \   000023   F583         MOV       DPH,A
   \   000025   E0           MOVX      A,@DPTR
   \   000026   2404         ADD       A,#0x4
   \   000028   F5..         MOV       ?V2,A
   1075          
   1076            *pBuf++ = ZSUCCESS;
   \   00002A   85..82       MOV       DPL,?V0
   \   00002D   85..83       MOV       DPH,?V1
   \   000030   E4           CLR       A
   \   000031   F0           MOVX      @DPTR,A
   1077          
   1078            *pBuf++ = LO_UINT16( nwkAddrOfInterest );
   \   000032   EC           MOV       A,R4
   \   000033   A3           INC       DPTR
   \   000034   F0           MOVX      @DPTR,A
   1079            *pBuf++ = HI_UINT16( nwkAddrOfInterest );
   \   000035   ED           MOV       A,R5
   \   000036   85..82       MOV       DPL,?V0
   \   000039   85..83       MOV       DPH,?V1
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   F0           MOVX      @DPTR,A
   1080          
   1081            *pBuf++ = userDesc->len;
   \   00003F   8882         MOV       DPL,R0
   \   000041   85..83       MOV       DPH,?V9
   \   000044   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000047   F0           MOVX      @DPTR,A
   1082            osal_memcpy( pBuf, userDesc->desc, userDesc->len );
   \   000048                ; Setup parameters for call to function osal_memcpy
   \   000048   8882         MOV       DPL,R0
   \   00004A   85..83       MOV       DPH,?V9
   \   00004D   A3           INC       DPTR
   \   00004E   A982         MOV       R1,DPL
   \   000050   AA83         MOV       R2,DPH
   \   000052   89..         MOV       ?V4,R1
   \   000054   8A..         MOV       ?V5,R2
   \   000056   75..00       MOV       ?V6,#0x0
   \   000059   78..         MOV       R0,#?V4
   \   00005B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00005E   85..82       MOV       DPL,?V8
   \   000061   85..83       MOV       DPH,?V9
   \   000064   E0           MOVX      A,@DPTR
   \   000065   FC           MOV       R4,A
   \   000066   7D00         MOV       R5,#0x0
   \   000068   E5..         MOV       A,?V0
   \   00006A   2404         ADD       A,#0x4
   \   00006C   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   00006F   12....       LCALL     ?DEALLOC_XSTACK8
   1083          
   1084            return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
   \   000072                ; Setup parameters for call to function fillAndSend
   \   000072   75..11       MOV       ?V0,#0x11
   \   000075   75..80       MOV       ?V1,#-0x80
   \   000078   78..         MOV       R0,#?V0
   \   00007A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007D   A9..         MOV       R1,?V2
   \   00007F   EE           MOV       A,R6
   \   000080   FC           MOV       R4,A
   \   000081   EF           MOV       A,R7
   \   000082   FD           MOV       R5,A
   \   000083   7402         MOV       A,#0x2
   \   000085   12....       LCALL     ?XSTACK_DISP101_8
   \   000088   12....       LCALL     ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   00008B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008E   02....       LJMP      ?Subroutine6 & 0xFFFF
   1085          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7401         MOV       A,#0x1
   \   000002   12....       LCALL     ?DEALLOC_XSTACK8
   \   000005                REQUIRE ??Subroutine141_0
   \   000005                ; // Fall through to label ??Subroutine141_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine141_0:
   \   000000   7F0A         MOV       R7,#0xa
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1086          
   1087          /*********************************************************************
   1088           * @fn          ZDP_ServerDiscRsp
   1089           *
   1090           * @brief       Build and send the Server_Discovery_rsp response.
   1091           *
   1092           * @param       transID - Transaction sequence number of request.
   1093           * @param       dstAddr - Network Destination Address.
   1094           * @param       status - Status of response to request.
   1095           * @param       aoi - Network Address of Interest of request.
   1096           * @param       serverMask - Bit map of service(s) being sought.
   1097           * @param       SecurityEnable - Security Options
   1098           *
   1099           * @return      ZStatus_t
   1100           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1101          ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
   \                     ZDP_ServerDiscRsp:
   1102                                     uint16 aoi, uint16 serverMask, byte SecurityEnable )
   1103          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   EC           MOV       A,R4
   \   000013   FE           MOV       R6,A
   1104            const byte len = 1  + 2;  // status + aoi + mask.
   1105            uint8 *pBuf = ZDP_TmpBuf;
   \   000014   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000017   FC           MOV       R4,A
   \   000018   E9           MOV       A,R1
   \   000019   FD           MOV       R5,A
   1106            ZStatus_t stat;
   1107          
   1108            // Intentionally unreferenced parameters
   1109            (void)aoi;
   1110            (void)SecurityEnable;
   1111          
   1112            *pBuf++ = status;
   \   00001A   EE           MOV       A,R6
   \   00001B   8882         MOV       DPL,R0
   \   00001D   8983         MOV       DPH,R1
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   740D         MOV       A,#0xd
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   12....       LCALL     ??Subroutine126_0 & 0xFFFF
   1113          
   1114            *pBuf++ = LO_UINT16( serverMask );
   \                     ??CrossCallReturnLabel_201:
   \   000028   8C82         MOV       DPL,R4
   \   00002A   8D83         MOV       DPH,R5
   \   00002C   A3           INC       DPTR
   \   00002D   F0           MOVX      @DPTR,A
   1115            *pBuf++ = HI_UINT16( serverMask );
   \   00002E   E9           MOV       A,R1
   \   00002F   8C82         MOV       DPL,R4
   \   000031   8D83         MOV       DPH,R5
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   F0           MOVX      @DPTR,A
   1116          
   1117            ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \   000036   90....       MOV       DPTR,#ZDP_TxOptions
   \   000039   7410         MOV       A,#0x10
   \   00003B   F0           MOVX      @DPTR,A
   1118            stat = fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
   \   00003C                ; Setup parameters for call to function fillAndSend
   \   00003C   75..15       MOV       ?V0,#0x15
   \   00003F   75..80       MOV       ?V1,#-0x80
   \   000042   78..         MOV       R0,#?V0
   \   000044   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000047   7903         MOV       R1,#0x3
   \   000049   EA           MOV       A,R2
   \   00004A   FC           MOV       R4,A
   \   00004B   EB           MOV       A,R3
   \   00004C   FD           MOV       R5,A
   \   00004D   7402         MOV       A,#0x2
   \   00004F   12....       LCALL     ?XSTACK_DISP101_8
   \   000052   12....       LCALL     ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000055   12....       LCALL     ?DEALLOC_XSTACK8
   \   000058   E9           MOV       A,R1
   \   000059   F9           MOV       R1,A
   1119            ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   00005A   90....       MOV       DPTR,#ZDP_TxOptions
   \   00005D   E4           CLR       A
   \   00005E   F0           MOVX      @DPTR,A
   1120          
   1121            return ( stat );
   \   00005F   04           INC       A
   \   000060   02....       LJMP      ??Subroutine118_0 & 0xFFFF
   1122          }
   1123          
   1124          /*********************************************************************
   1125           * @fn          ZDP_GenericRsp
   1126           *
   1127           * @brief       Sends a response message with only the parameter status
   1128           *              byte and the addr of interest for data.
   1129           *              This function sends unicast message to the
   1130           *              requesting device.
   1131           *
   1132           * @param       dstAddr - destination address
   1133           * @param       status  - generic status for response
   1134           * @param       aoi     - address of interest
   1135           * @param       dstAddr - destination address
   1136           * @param       rspId   - response cluster ID
   1137           * @param       SecurityEnable - Security Options
   1138           *
   1139           * @return      afStatus_t
   1140           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1141          afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_GenericRsp:
   1142                               byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
   1143          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   1144            uint8 len;
   1145          
   1146            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1147          
   1148            ZDP_TmpBuf[0] = status;
   \   000012   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000015   EC           MOV       A,R4
   \   000016   F0           MOVX      @DPTR,A
   \   000017   740A         MOV       A,#0xa
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ??Subroutine146_0 & 0xFFFF
   1149            ZDP_TmpBuf[1] = LO_UINT16( aoi );
   \                     ??CrossCallReturnLabel_324:
   \   00001F   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000022   E0           MOVX      A,@DPTR
   \   000023   FC           MOV       R4,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F583         MOV       DPH,A
   \   000028   8C82         MOV       DPL,R4
   \   00002A   A3           INC       DPTR
   \   00002B   E8           MOV       A,R0
   \   00002C   12....       LCALL     ?Subroutine14 & 0xFFFF
   1150            ZDP_TmpBuf[2] = HI_UINT16( aoi );
   1151          
   1152            // Length byte
   1153            ZDP_TmpBuf[3] = 0;
   \                     ??CrossCallReturnLabel_9:
   \   00002F   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   E4           CLR       A
   \   000036   F0           MOVX      @DPTR,A
   1154            len = 4;
   1155          
   1156            return fillAndSend( &TransSeq, dstAddr, rspID, len );
   \   000037                ; Setup parameters for call to function fillAndSend
   \   000037   740C         MOV       A,#0xc
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00003F   7904         MOV       R1,#0x4
   \   000041   EA           MOV       A,R2
   \   000042   FC           MOV       R4,A
   \   000043   EB           MOV       A,R3
   \   000044   FD           MOV       R5,A
   \   000045   7402         MOV       A,#0x2
   \   000047   12....       LCALL     ?XSTACK_DISP101_8
   \   00004A   12....       LCALL     ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   00004D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000050   7401         MOV       A,#0x1
   \   000052   12....       LCALL     ?DEALLOC_XSTACK8
   \   000055                REQUIRE ?Subroutine7
   \   000055                ; // Fall through to label ?Subroutine7
   1157          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1158          
   1159          /*********************************************************************
   1160           * Binding
   1161           */
   1162          /*********************************************************************
   1163           * @fn          ZDP_EndDeviceBindReq
   1164           *
   1165           * @brief       This builds and sends a End_Device_Bind_req message.
   1166           *              This function sends a unicast message.
   1167           *
   1168           * @param       dstAddr - destination address
   1169           * @param       LocalCoordinator - short address of local coordinator
   1170           * @param       epIntf - Endpoint/Interface of Simple Desc
   1171           * @param       ProfileID - Profile ID
   1172           *
   1173           *   The Input cluster list is the opposite of what you would think.
   1174           *   This is the output cluster list of this device
   1175           * @param       NumInClusters - number of input clusters
   1176           * @param       InClusterList - input cluster ID list
   1177           *
   1178           *   The Output cluster list is the opposite of what you would think.
   1179           *   This is the input cluster list of this device
   1180           * @param       NumOutClusters - number of output clusters
   1181           * @param       OutClusterList - output cluster ID list
   1182           *
   1183           * @param       SecurityEnable - Security Options
   1184           *
   1185           * @return      afStatus_t
   1186           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1187          afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
   \                     ZDP_EndDeviceBindReq:
   1188                                           uint16 LocalCoordinator,
   1189                                           byte endPoint,
   1190                                           uint16 ProfileID,
   1191                                           byte NumInClusters, cId_t *InClusterList,
   1192                                           byte NumOutClusters, cId_t *OutClusterList,
   1193                                           byte SecurityEnable )
   1194          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   \   000009   8C..         MOV       ?V4,R4
   \   00000B   8D..         MOV       ?V5,R5
   \   00000D   89..         MOV       ?V3,R1
   1195            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   000012   7414         MOV       A,#0x14
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V2,A
   \   00001A   7417         MOV       A,#0x17
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V1,A
   1196            uint8 i, len;
   1197            uint8 *ieeeAddr;
   1198          
   1199            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1200          
   1201            // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
   1202            len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
   1203            len += (NumInClusters + NumOutClusters) * sizeof ( uint16 );
   \   000022   E5..         MOV       A,?V2
   \   000024   25..         ADD       A,?V1
   \   000026   C3           CLR       C
   \   000027   33           RLC       A
   \   000028   240F         ADD       A,#0xf
   \   00002A   F5..         MOV       ?V0,A
   1204          
   1205            if ( len >= ZDP_BUF_SZ-1 )
   \   00002C   C3           CLR       C
   \   00002D   944F         SUBB      A,#0x4f
   \   00002F   4005         JC        ??ZDP_EndDeviceBindReq_0
   1206            {
   1207              return afStatus_MEM_FAIL;
   \   000031   7910         MOV       R1,#0x10
   \   000033   02....       LJMP      ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1208            }
   1209          
   1210            if ( LocalCoordinator != NLME_GetShortAddr() )
   \                     ??ZDP_EndDeviceBindReq_0:
   \   000036                ; Setup parameters for call to function NLME_GetShortAddr
   \   000036   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000039   EA           MOV       A,R2
   \   00003A   65..         XRL       A,?V4
   \   00003C   7003         JNZ       ??ZDP_EndDeviceBindReq_2
   \   00003E   EB           MOV       A,R3
   \   00003F   65..         XRL       A,?V5
   \                     ??ZDP_EndDeviceBindReq_2:
   \   000041   6005         JZ        ??ZDP_EndDeviceBindReq_3
   1211            {
   1212              return afStatus_INVALID_PARAMETER;
   \   000043   7902         MOV       R1,#0x2
   \   000045   02....       LJMP      ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1213            }
   1214          
   1215            *pBuf++ = LO_UINT16( LocalCoordinator );
   \                     ??ZDP_EndDeviceBindReq_3:
   \   000048   8E82         MOV       DPL,R6
   \   00004A   8F83         MOV       DPH,R7
   \   00004C   E5..         MOV       A,?V4
   \   00004E   F0           MOVX      @DPTR,A
   1216            *pBuf++ = HI_UINT16( LocalCoordinator );
   \   00004F   E5..         MOV       A,?V5
   \   000051   A3           INC       DPTR
   \   000052   F0           MOVX      @DPTR,A
   1217          
   1218            ieeeAddr = NLME_GetExtAddr();
   \   000053                ; Setup parameters for call to function NLME_GetExtAddr
   \   000053   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000056   8A..         MOV       ?V4,R2
   \   000058   8B..         MOV       ?V5,R3
   \   00005A   AC..         MOV       R4,?V4
   \   00005C   AD..         MOV       R5,?V5
   1219            pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
   \   00005E                ; Setup parameters for call to function sAddrExtCpy
   \   00005E   EE           MOV       A,R6
   \   00005F   2402         ADD       A,#0x2
   \   000061   FA           MOV       R2,A
   \   000062   E4           CLR       A
   \   000063   3F           ADDC      A,R7
   \   000064   FB           MOV       R3,A
   \   000065   12....       LCALL     ?Subroutine71 & 0xFFFF
   1220          
   1221            *pBuf++ = endPoint;
   \                     ??CrossCallReturnLabel_109:
   \   000068   E5..         MOV       A,?V3
   \   00006A   F0           MOVX      @DPTR,A
   \   00006B   7412         MOV       A,#0x12
   \   00006D   12....       LCALL     ?XSTACK_DISP0_8
   \   000070   12....       LCALL     ?Subroutine16 & 0xFFFF
   1222          
   1223            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   1224            *pBuf++ = HI_UINT16( ProfileID );
   1225          
   1226            *pBuf++ = NumInClusters; // Input cluster list
   \                     ??CrossCallReturnLabel_13:
   \   000073   8A82         MOV       DPL,R2
   \   000075   8B83         MOV       DPH,R3
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   A3           INC       DPTR
   \   00007A   E5..         MOV       A,?V2
   \   00007C   F0           MOVX      @DPTR,A
   \   00007D   EA           MOV       A,R2
   \   00007E   2404         ADD       A,#0x4
   \   000080   FE           MOV       R6,A
   \   000081   E4           CLR       A
   \   000082   3B           ADDC      A,R3
   \   000083   FF           MOV       R7,A
   1227            for ( i = 0; i < NumInClusters; ++i )
   \   000084   7A00         MOV       R2,#0x0
   \   000086   7415         MOV       A,#0x15
   \   000088   12....       LCALL     ?XSTACK_DISP0_8
   \   00008B   12....       LCALL     ??Subroutine146_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   00008E   8007         SJMP      ??ZDP_EndDeviceBindReq_4
   1228            {
   1229              *pBuf++ = LO_UINT16(InClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_5:
   \   000090   12....       LCALL     ?Subroutine13 & 0xFFFF
   1230              *pBuf++ = HI_UINT16(InClusterList[i]);
   1231            }
   \                     ??CrossCallReturnLabel_6:
   \   000093   5001         JNC       ??ZDP_EndDeviceBindReq_6
   \   000095   0F           INC       R7
   \                     ??ZDP_EndDeviceBindReq_6:
   \   000096   0A           INC       R2
   \                     ??ZDP_EndDeviceBindReq_4:
   \   000097   EA           MOV       A,R2
   \   000098   C3           CLR       C
   \   000099   95..         SUBB      A,?V2
   \   00009B   40F3         JC        ??ZDP_EndDeviceBindReq_5
   1232          
   1233            *pBuf++ = NumOutClusters; // Output cluster list
   \   00009D   8E82         MOV       DPL,R6
   \   00009F   8F83         MOV       DPH,R7
   \   0000A1   E5..         MOV       A,?V1
   \   0000A3   F0           MOVX      @DPTR,A
   \   0000A4   A3           INC       DPTR
   \   0000A5   AE82         MOV       R6,DPL
   \   0000A7   AF83         MOV       R7,DPH
   1234            for ( i = 0; i < NumOutClusters; ++i )
   \   0000A9   7A00         MOV       R2,#0x0
   \   0000AB   7418         MOV       A,#0x18
   \   0000AD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B0   12....       LCALL     ??Subroutine146_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_326:
   \   0000B3   8007         SJMP      ??ZDP_EndDeviceBindReq_7
   1235            {
   1236              *pBuf++ = LO_UINT16(OutClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_8:
   \   0000B5   12....       LCALL     ?Subroutine13 & 0xFFFF
   1237              *pBuf++ = HI_UINT16(OutClusterList[i]);
   1238            }
   \                     ??CrossCallReturnLabel_7:
   \   0000B8   5001         JNC       ??ZDP_EndDeviceBindReq_9
   \   0000BA   0F           INC       R7
   \                     ??ZDP_EndDeviceBindReq_9:
   \   0000BB   0A           INC       R2
   \                     ??ZDP_EndDeviceBindReq_7:
   \   0000BC   EA           MOV       A,R2
   \   0000BD   C3           CLR       C
   \   0000BE   95..         SUBB      A,?V1
   \   0000C0   40F3         JC        ??ZDP_EndDeviceBindReq_8
   1239          
   1240            return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
   \   0000C2                ; Setup parameters for call to function fillAndSend
   \   0000C2   75..20       MOV       ?V4,#0x20
   \   0000C5   75..00       MOV       ?V5,#0x0
   \   0000C8   78..         MOV       R0,#?V4
   \   0000CA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000CD   A9..         MOV       R1,?V0
   \   0000CF   AC..         MOV       R4,?V6
   \   0000D1   AD..         MOV       R5,?V7
   \   0000D3   12....       LCALL     ??Subroutine138_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   0000D6   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDP_EndDeviceBindReq_1:
   \   0000D9   02....       LJMP      ??Subroutine141_0 & 0xFFFF
   1241          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   EA           MOV       A,R2
   \   000001   25E0         ADD       A,0xE0 /* A   */
   \   000003   FC           MOV       R4,A
   \   000004   E4           CLR       A
   \   000005   33           RLC       A
   \   000006   FD           MOV       R5,A
   \   000007   E8           MOV       A,R0
   \   000008   2C           ADD       A,R4
   \   000009   FC           MOV       R4,A
   \   00000A   E9           MOV       A,R1
   \   00000B   3D           ADDC      A,R5
   \   00000C   FD           MOV       R5,A
   \   00000D   8C82         MOV       DPL,R4
   \   00000F   F583         MOV       DPH,A
   \   000011   12....       LCALL     ??Subroutine131_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000014   F0           MOVX      @DPTR,A
   \   000015   8C82         MOV       DPL,R4
   \   000017   8D83         MOV       DPH,R5
   \   000019   A3           INC       DPTR
   \   00001A   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   EE           MOV       A,R6
   \   00001F   2402         ADD       A,#0x2
   \   000021   FE           MOV       R6,A
   \   000022   22           RET
   1242          
   1243          /*********************************************************************
   1244           * @fn          ZDP_BindUnbindReq
   1245           *
   1246           * @brief       This builds and send a Bind_req or Unbind_req message
   1247           *              Depending on the ClusterID. This function
   1248           *              sends a unicast message to the local coordinator.
   1249           *
   1250           * @param       BindOrUnbind - either Bind_req or Unbind_req
   1251           * @param       dstAddr - destination address of the message
   1252           * @param       SourceAddr - source 64 bit address of the binding
   1253           * @param       SrcEPIntf - Source endpoint/interface
   1254           * @param       ClusterID - Binding cluster ID
   1255           * @param       DestinationAddr - destination 64 bit addr of binding
   1256           * @param       DstEPIntf - destination endpoint/interface
   1257           * @param       SecurityEnable - Security Options
   1258           *
   1259           * @return      afStatus_t
   1260           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1261          afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
   \                     ZDP_BindUnbindReq:
   1262                                        uint8 *SourceAddr, byte SrcEndPoint,
   1263                                        cId_t ClusterID,
   1264                                        zAddrType_t *destinationAddr, byte DstEndPoint,
   1265                                        byte SecurityEnable )
   1266          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   \   00000D   E9           MOV       A,R1
   \   00000E   FF           MOV       R7,A
   1267            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   12....       LCALL     ?Subroutine55 & 0xFFFF
   1268            byte len;
   1269          
   1270            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1271          
   1272            // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
   1273            len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
   \                     ??CrossCallReturnLabel_303:
   \   000012   7E0C         MOV       R6,#0xc
   \   000014   7414         MOV       A,#0x14
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ??Subroutine112_0 & 0xFFFF
   1274            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_171:
   \   00001C   85..82       MOV       DPL,?V0
   \   00001F   F583         MOV       DPH,A
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   6403         XRL       A,#0x3
   \   00002C   7004         JNZ       ??ZDP_BindUnbindReq_0
   1275              len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
   \   00002E   7E15         MOV       R6,#0x15
   \   000030   8015         SJMP      ??ZDP_BindUnbindReq_1
   1276            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_0:
   \   000032   85..82       MOV       DPL,?V0
   \   000035   85..83       MOV       DPH,?V1
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   6401         XRL       A,#0x1
   \   000043   7002         JNZ       ??ZDP_BindUnbindReq_1
   1277              len += sizeof ( uint16 );
   \   000045   7E0E         MOV       R6,#0xe
   1278          
   1279            pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
   \                     ??ZDP_BindUnbindReq_1:
   \   000047                ; Setup parameters for call to function sAddrExtCpy
   \   000047   7410         MOV       A,#0x10
   \   000049   12....       LCALL     ?XSTACK_DISP0_8
   \   00004C   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   00004F   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1280            *pBuf++ = SrcEndPoint;
   \   000052   EF           MOV       A,R7
   \   000053   8A82         MOV       DPL,R2
   \   000055   8B83         MOV       DPH,R3
   \   000057   F0           MOVX      @DPTR,A
   \   000058   7412         MOV       A,#0x12
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   12....       LCALL     ?Subroutine16 & 0xFFFF
   1281          
   1282            *pBuf++ = LO_UINT16( ClusterID );
   1283          
   1284            *pBuf++ = HI_UINT16( ClusterID );
   1285            *pBuf++ = destinationAddr->addrMode;
   \                     ??CrossCallReturnLabel_14:
   \   000060   E5..         MOV       A,?V0
   \   000062   2408         ADD       A,#0x8
   \   000064   F8           MOV       R0,A
   \   000065   E4           CLR       A
   \   000066   35..         ADDC      A,?V1
   \   000068   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00006B   5001         JNC       ??ZDP_BindUnbindReq_2
   \   00006D   0B           INC       R3
   1286            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??ZDP_BindUnbindReq_2:
   \   00006E   8882         MOV       DPL,R0
   \   000070   8983         MOV       DPH,R1
   \   000072   E0           MOVX      A,@DPTR
   \   000073   6403         XRL       A,#0x3
   \   000075   7013         JNZ       ??ZDP_BindUnbindReq_3
   1287            {
   1288              pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
   1289              *pBuf = DstEndPoint;
   \   000077   7416         MOV       A,#0x16
   \   000079   12....       LCALL     ?XSTACK_DISP0_8
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   C0E0         PUSH      A
   \   00007F                ; Setup parameters for call to function sAddrExtCpy
   \   00007F   AC..         MOV       R4,?V0
   \   000081   AD..         MOV       R5,?V1
   \   000083   12....       LCALL     ?Subroutine71 & 0xFFFF
   1290            }
   \                     ??CrossCallReturnLabel_110:
   \   000086   D0E0         POP       A
   \   000088   8022         SJMP      ??CrossCallReturnLabel_86
   1291            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_3:
   \   00008A   85..82       MOV       DPL,?V0
   \   00008D   85..83       MOV       DPH,?V1
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   E0           MOVX      A,@DPTR
   \   000099   6401         XRL       A,#0x1
   \   00009B   7010         JNZ       ??ZDP_BindUnbindReq_4
   1292            {
   1293              *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
   \   00009D   85..82       MOV       DPL,?V0
   \   0000A0   85..83       MOV       DPH,?V1
   \   0000A3   12....       LCALL     ??Subroutine140_0 & 0xFFFF
   1294              *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
   1295            }
   \                     ??CrossCallReturnLabel_285:
   \   0000A6   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   0000A9   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   0000AC   F0           MOVX      @DPTR,A
   1296          
   1297            FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
   \                     ??ZDP_BindUnbindReq_4:
   \   0000AD   90....       MOV       DPTR,#ZDP_TxOptions
   \   0000B0   7410         MOV       A,#0x10
   \   0000B2   F0           MOVX      @DPTR,A
   \   0000B3                ; Setup parameters for call to function fillAndSend
   \   0000B3   78..         MOV       R0,#?V4
   \   0000B5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B8   EE           MOV       A,R6
   \   0000B9   F9           MOV       R1,A
   \   0000BA   AC..         MOV       R4,?V2
   \   0000BC   AD..         MOV       R5,?V3
   \   0000BE   12....       LCALL     ??Subroutine138_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   0000C1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C4   E9           MOV       A,R1
   \   0000C5   F9           MOV       R1,A
   \   0000C6   90....       MOV       DPTR,#ZDP_TxOptions
   \   0000C9   E4           CLR       A
   \   0000CA   F0           MOVX      @DPTR,A
   \   0000CB   02....       LJMP      ?Subroutine5 & 0xFFFF
   1298          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine140_0:
   \   000000   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   F9           MOV       R1,A
   \   000001   8882         MOV       DPL,R0
   \   000003   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000006   F0           MOVX      @DPTR,A
   \   000007   EA           MOV       A,R2
   \   000008   2404         ADD       A,#0x4
   \   00000A   FA           MOV       R2,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   F583         MOV       DPH,A
   \   000002   E0           MOVX      A,@DPTR
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET
   1299          
   1300          /*********************************************************************
   1301           * Network Management
   1302           */
   1303          
   1304          /*********************************************************************
   1305           * @fn          ZDP_MgmtNwkDiscReq
   1306           *
   1307           * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
   1308           *              function sends a unicast message.
   1309           *
   1310           * @param       dstAddr - destination address of the message
   1311           * @param       ScanChannels - 32 bit address bit map
   1312           * @param       StartIndex - Starting index within the reporting network
   1313           *                           list
   1314           * @param       SecurityEnable - Security Options
   1315           *
   1316           * @return      afStatus_t
   1317           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine113_0:
   \   000000   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000003                REQUIRE ??Subroutine114_0
   \   000003                ; // Fall through to label ??Subroutine114_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1318          afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscReq:
   1319                                         uint32 ScanChannels,
   1320                                         byte ScanDuration,
   1321                                         byte StartIndex,
   1322                                         byte SecurityEnable )
   1323          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V0,R1
   \   00000B   8C..         MOV       ?V1,R4
   1324            uint8 *pBuf = ZDP_TmpBuf;
   1325            byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
   1326          
   1327            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1328          
   1329            pBuf = osal_buffer_uint32( pBuf, ScanChannels );
   \   00000D                ; Setup parameters for call to function osal_buffer_uint32
   \   00000D   740C         MOV       A,#0xc
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000015   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000018   12....       LCALL     ?DEALLOC_XSTACK8
   \   00001B   8A82         MOV       DPL,R2
   \   00001D   8B83         MOV       DPH,R3
   1330          
   1331            *pBuf++ = ScanDuration;
   \   00001F   E5..         MOV       A,?V0
   \   000021   F0           MOVX      @DPTR,A
   1332            *pBuf = StartIndex;
   \   000022   A3           INC       DPTR
   \   000023   E5..         MOV       A,?V1
   \   000025   F0           MOVX      @DPTR,A
   1333          
   1334            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
   \   000026                ; Setup parameters for call to function fillAndSend
   \   000026   75..30       MOV       ?V2,#0x30
   \   000029   75..00       MOV       ?V3,#0x0
   \   00002C   78..         MOV       R0,#?V2
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   7906         MOV       R1,#0x6
   \   000033   02....       LJMP      ??Subroutine113_0 & 0xFFFF
   1335          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FA           MOV       R2,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FB           MOV       R3,A
   \   000008   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00000B   7404         MOV       A,#0x4
   \   00000D   22           RET
   1336          
   1337          /*********************************************************************
   1338           * @fn          ZDP_MgmtDirectJoinReq
   1339           *
   1340           * @brief       This builds and send a Mgmt_Direct_Join_req message. This
   1341           *              function sends a unicast message.
   1342           *
   1343           * @param       dstAddr - destination address of the message
   1344           * @param       deviceAddr - 64 bit IEEE Address
   1345           * @param       SecurityEnable - Security Options
   1346           *
   1347           * @return      afStatus_t
   1348           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   75..00       MOV       ?V3,#0x0
   \   000003   78..         MOV       R0,#?V2
   \   000005   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000008   7909         MOV       R1,#0x9
   \   00000A                REQUIRE ??Subroutine113_0
   \   00000A                ; // Fall through to label ??Subroutine113_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1349          afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtDirectJoinReq:
   1350                                         uint8 *deviceAddr,
   1351                                         byte capInfo,
   1352                                         byte SecurityEnable )
   1353          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine40 & 0xFFFF
   1354            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1355          
   1356            osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
   1357            ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
   \                     ??CrossCallReturnLabel_221:
   \   000008   E5..         MOV       A,?V0
   \   00000A   F0           MOVX      @DPTR,A
   1358          
   1359            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
   \   00000B                ; Setup parameters for call to function fillAndSend
   \   00000B   75..35       MOV       ?V2,#0x35
   \   00000E   02....       LJMP      ?Subroutine1 & 0xFFFF
   1360          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004   89..         MOV       ?V0,R1
   \   000006                ; Setup parameters for call to function sAddrExtCpy
   \   000006                ; Setup parameters for call to function sAddrExtCpy
   \   000006   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   FA           MOV       R2,A
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   FB           MOV       R3,A
   \   00000E   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000011                REQUIRE ??Subroutine129_0
   \   000011                ; // Fall through to label ??Subroutine129_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine129_0:
   \   000000   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   000003   C8           XCH       A,R0
   \   000004   2408         ADD       A,#0x8
   \   000006   F582         MOV       DPL,A
   \   000008   E4           CLR       A
   \   000009   38           ADDC      A,R0
   \   00000A   F583         MOV       DPH,A
   \   00000C   22           RET
   1361          
   1362          /*********************************************************************
   1363           * @fn          ZDP_MgmtPermitJoinReq
   1364           *
   1365           * @brief       This builds and send a Mgmt_Permit_Join_req message.
   1366           *
   1367           * @param       dstAddr - destination address of the message
   1368           * @param       duration - Permit duration
   1369           * @param       TcSignificance - Trust Center Significance
   1370           *
   1371           * @return      afStatus_t
   1372           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1373          afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
   \                     ZDP_MgmtPermitJoinReq:
   1374                                            byte TcSignificance, byte SecurityEnable )
   1375          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1376            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1377          
   1378            // Build buffer
   1379            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
   \   00000E   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000011   E9           MOV       A,R1
   \   000012   12....       LCALL     ?Subroutine21 & 0xFFFF
   1380            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
   \                     ??CrossCallReturnLabel_22:
   \   000015   EC           MOV       A,R4
   \   000016   F0           MOVX      @DPTR,A
   1381          
   1382            // Check of this is a broadcast message
   1383            if ( (dstAddr) && ((dstAddr->addrMode == Addr16Bit) || (dstAddr->addrMode == AddrBroadcast))
   1384                && ((dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL)
   1385                    || (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR)
   1386                    || (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVRXON)) )
   \   000017   EA           MOV       A,R2
   \   000018   4F           ORL       A,R7
   \   000019   6078         JZ        ??ZDP_MgmtPermitJoinReq_0
   \   00001B   8A82         MOV       DPL,R2
   \   00001D   8B83         MOV       DPH,R3
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   6402         XRL       A,#0x2
   \   00002A   6011         JZ        ??ZDP_MgmtPermitJoinReq_1
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   640F         XRL       A,#0xf
   \   00003B   7056         JNZ       ??ZDP_MgmtPermitJoinReq_0
   \                     ??ZDP_MgmtPermitJoinReq_1:
   \   00003D   8A82         MOV       DPL,R2
   \   00003F   8B83         MOV       DPH,R3
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F4           CPL       A
   \   000043   7003         JNZ       ??ZDP_MgmtPermitJoinReq_2
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F4           CPL       A
   \                     ??ZDP_MgmtPermitJoinReq_2:
   \   000048   601C         JZ        ??ZDP_MgmtPermitJoinReq_3
   \   00004A   8A82         MOV       DPL,R2
   \   00004C   8B83         MOV       DPH,R3
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   64FC         XRL       A,#0xfc
   \   000051   7003         JNZ       ??ZDP_MgmtPermitJoinReq_4
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   F4           CPL       A
   \                     ??ZDP_MgmtPermitJoinReq_4:
   \   000056   600E         JZ        ??ZDP_MgmtPermitJoinReq_3
   \   000058   8A82         MOV       DPL,R2
   \   00005A   8B83         MOV       DPH,R3
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   64FD         XRL       A,#0xfd
   \   00005F   7003         JNZ       ??ZDP_MgmtPermitJoinReq_5
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F4           CPL       A
   \                     ??ZDP_MgmtPermitJoinReq_5:
   \   000064   702D         JNZ       ??ZDP_MgmtPermitJoinReq_0
   1387            {
   1388              // Send this to our self as well as broadcast to network
   1389              zAddrType_t tmpAddr;
   1390          
   1391              tmpAddr.addrMode = Addr16Bit;
   \                     ??ZDP_MgmtPermitJoinReq_3:
   \   000066   7408         MOV       A,#0x8
   \   000068   12....       LCALL     ?XSTACK_DISP0_8
   \   00006B   7402         MOV       A,#0x2
   \   00006D   F0           MOVX      @DPTR,A
   1392              tmpAddr.addr.shortAddr = NLME_GetShortAddr();
   \   00006E                ; Setup parameters for call to function NLME_GetShortAddr
   \   00006E   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000071   85..82       MOV       DPL,?XSP + 0
   \   000074   85..83       MOV       DPH,?XSP + 1
   \   000077   EA           MOV       A,R2
   \   000078   F0           MOVX      @DPTR,A
   \   000079   A3           INC       DPTR
   \   00007A   EB           MOV       A,R3
   \   00007B   F0           MOVX      @DPTR,A
   1393          
   1394              fillAndSend( &ZDP_TransID, &tmpAddr, Mgmt_Permit_Join_req,
   1395                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \   00007C                ; Setup parameters for call to function fillAndSend
   \   00007C   75..36       MOV       ?V2,#0x36
   \   00007F   75..00       MOV       ?V3,#0x0
   \   000082   78..         MOV       R0,#?V2
   \   000084   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000087   7902         MOV       R1,#0x2
   \   000089   E9           MOV       A,R1
   \   00008A   12....       LCALL     ?XSTACK_DISP102_8
   \   00008D   12....       LCALL     ??Subroutine138_0 & 0xFFFF
   1396            }
   \                     ??CrossCallReturnLabel_268:
   \   000090   12....       LCALL     ?DEALLOC_XSTACK8
   1397          
   1398            // Send the message
   1399            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
   1400                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \                     ??ZDP_MgmtPermitJoinReq_0:
   \   000093                ; Setup parameters for call to function fillAndSend
   \   000093   75..36       MOV       ?V2,#0x36
   \   000096   75..00       MOV       ?V3,#0x0
   \   000099   78..         MOV       R0,#?V2
   \   00009B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009E   7902         MOV       R1,#0x2
   \   0000A0   EE           MOV       A,R6
   \   0000A1   FC           MOV       R4,A
   \   0000A2   EF           MOV       A,R7
   \   0000A3   FD           MOV       R5,A
   \   0000A4   02....       LJMP      ?Subroutine9 & 0xFFFF
   1401          }
   1402          
   1403          /*********************************************************************
   1404           * @fn          ZDP_MgmtLeaveReq
   1405           *
   1406           * @brief       This builds and send a Mgmt_Leave_req message.
   1407           *
   1408           * @param       dstAddr - destination address of the message
   1409           *              IEEEAddr - IEEE adddress of device that is removed
   1410           *              RemoveChildren - set to 1 to remove the children of the
   1411           *                                device as well. 0 otherwise.
   1412           *              Rejoin - set to 1 if the removed device should rejoin
   1413                                   afterwards. 0 otherwise.
   1414           *
   1415           * @return      afStatus_t
   1416           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1417          afStatus_t ZDP_MgmtLeaveReq( zAddrType_t *dstAddr, uint8 *IEEEAddr, uint8 RemoveChildren,
   \                     ZDP_MgmtLeaveReq:
   1418                           uint8 Rejoin, uint8 SecurityEnable )
   1419          
   1420          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine40 & 0xFFFF
   1421            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1422          
   1423            osal_cpyExtAddr( ZDP_TmpBuf, IEEEAddr );
   1424            ZDP_TmpBuf[Z_EXTADDR_LEN] = 0;
   \                     ??CrossCallReturnLabel_222:
   \   000008   E4           CLR       A
   \   000009   F0           MOVX      @DPTR,A
   1425          
   1426            if ( RemoveChildren == TRUE )
   \   00000A   04           INC       A
   \   00000B   65..         XRL       A,?V0
   \   00000D   7006         JNZ       ??ZDP_MgmtLeaveReq_0
   1427            {
   1428              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_RC;
   \   00000F   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   1429            }
   \                     ??CrossCallReturnLabel_223:
   \   000012   7440         MOV       A,#0x40
   \   000014   F0           MOVX      @DPTR,A
   1430            if ( Rejoin == TRUE )
   \                     ??ZDP_MgmtLeaveReq_0:
   \   000015   740C         MOV       A,#0xc
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   6401         XRL       A,#0x1
   \   00001D   7007         JNZ       ??ZDP_MgmtLeaveReq_1
   1431            {
   1432              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_REJOIN;
   \   00001F   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   1433            }
   \                     ??CrossCallReturnLabel_224:
   \   000022   E0           MOVX      A,@DPTR
   \   000023   D2E7         SETB      0xE0 /* A   */.7
   \   000025   F0           MOVX      @DPTR,A
   1434          
   1435            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Leave_req, (Z_EXTADDR_LEN + 1) );
   \                     ??ZDP_MgmtLeaveReq_1:
   \   000026                ; Setup parameters for call to function fillAndSend
   \   000026   75..34       MOV       ?V2,#0x34
   \   000029   02....       LJMP      ?Subroutine1 & 0xFFFF
   1436          }
   1437          
   1438          /*********************************************************************
   1439           * @fn          ZDP_MgmtNwkUpdateReq
   1440           *
   1441           * @brief       This builds and send a Mgmt_NWK_Update_req message. This
   1442           *              function sends a unicast or broadcast message.
   1443           *
   1444           * @param       dstAddr - destination address of the message
   1445           * @param       ChannelMask - 32 bit address bit map
   1446           * @param       ScanDuration - length of time to spend scanning each channel
   1447           * @param       ScanCount - number of energy scans to be conducted
   1448           * @param       NwkUpdateId - NWk Update Id value
   1449           * @param       NwkManagerAddr - NWK address for device with Network Manager
   1450           *                               bit set in its Node Descriptor
   1451           *
   1452           * @return      afStatus_t
   1453           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1454          afStatus_t ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateReq:
   1455                                           uint32 ChannelMask,
   1456                                           uint8 ScanDuration,
   1457                                           uint8 ScanCount,
   1458                                           uint8 NwkUpdateId,
   1459                                           uint16 NwkManagerAddr )
   1460          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   E9           MOV       A,R1
   \   00000A   FF           MOV       R7,A
   \   00000B   8C..         MOV       ?V2,R4
   \   00000D   8D..         MOV       ?V3,R5
   1461            uint8 *pBuf = ZDP_TmpBuf;
   1462            byte len = sizeof( uint32 ) + 1;  // ChannelMask + ScanDuration
   \   00000F   7E05         MOV       R6,#0x5
   1463          
   1464            pBuf = osal_buffer_uint32( pBuf, ChannelMask );
   \   000011                ; Setup parameters for call to function osal_buffer_uint32
   \   000011   740E         MOV       A,#0xe
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000019   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   00001C   12....       LCALL     ?DEALLOC_XSTACK8
   1465          
   1466            *pBuf++ = ScanDuration;
   \   00001F   EF           MOV       A,R7
   \   000020   8A82         MOV       DPL,R2
   \   000022   8B83         MOV       DPH,R3
   \   000024   F0           MOVX      @DPTR,A
   1467          
   1468            if ( ScanDuration <= 0x05 )
   \   000025   C3           CLR       C
   \   000026   9406         SUBB      A,#0x6
   \   000028   500D         JNC       ??ZDP_MgmtNwkUpdateReq_0
   1469            {
   1470              // Request is to scan over channelMask
   1471              len += sizeof( uint8 );
   \   00002A   7E06         MOV       R6,#0x6
   1472          
   1473              *pBuf++ = ScanCount;
   \   00002C   A3           INC       DPTR
   \   00002D   E5..         MOV       A,?V2
   \   00002F   F0           MOVX      @DPTR,A
   \   000030   EA           MOV       A,R2
   \   000031   2402         ADD       A,#0x2
   \   000033   5026         JNC       ??ZDP_MgmtNwkUpdateReq_1
   \   000035   8024         SJMP      ??ZDP_MgmtNwkUpdateReq_1
   1474            }
   1475            else if ( ( ScanDuration == 0xFE ) || ( ScanDuration == 0xFF ) )
   \                     ??ZDP_MgmtNwkUpdateReq_0:
   \   000037   74FE         MOV       A,#-0x2
   \   000039   6F           XRL       A,R7
   \   00003A   6005         JZ        ??ZDP_MgmtNwkUpdateReq_2
   \   00003C   74FF         MOV       A,#-0x1
   \   00003E   6F           XRL       A,R7
   \   00003F   701A         JNZ       ??ZDP_MgmtNwkUpdateReq_1
   1476            {
   1477              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   1478              len += sizeof( uint8 );
   \                     ??ZDP_MgmtNwkUpdateReq_2:
   \   000041   7E06         MOV       R6,#0x6
   1479          
   1480              *pBuf++ = NwkUpdateId;
   \   000043   A3           INC       DPTR
   \   000044   E5..         MOV       A,?V3
   \   000046   F0           MOVX      @DPTR,A
   1481          
   1482              if ( ScanDuration == 0xFF )
   \   000047   74FF         MOV       A,#-0x1
   \   000049   6F           XRL       A,R7
   \   00004A   700F         JNZ       ??ZDP_MgmtNwkUpdateReq_1
   1483              {
   1484                len += sizeof( uint16 );
   \   00004C   7E08         MOV       R6,#0x8
   \   00004E   7412         MOV       A,#0x12
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   12....       LCALL     ?Subroutine34 & 0xFFFF
   1485          
   1486                *pBuf++  = LO_UINT16( NwkManagerAddr );
   1487                *pBuf++  = HI_UINT16( NwkManagerAddr );
   1488              }
   1489            }
   \                     ??CrossCallReturnLabel_40:
   \   000056   A3           INC       DPTR
   \   000057   F0           MOVX      @DPTR,A
   \   000058   EA           MOV       A,R2
   \   000059   2404         ADD       A,#0x4
   1490          
   1491            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Update_req, len );
   \                     ??ZDP_MgmtNwkUpdateReq_1:
   \   00005B                ; Setup parameters for call to function fillAndSend
   \   00005B   75..38       MOV       ?V4,#0x38
   \   00005E   75..00       MOV       ?V5,#0x0
   \   000061   78..         MOV       R0,#?V4
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000066   EE           MOV       A,R6
   \   000067   F9           MOV       R1,A
   \   000068   AC..         MOV       R4,?V0
   \   00006A   AD..         MOV       R5,?V1
   \   00006C   12....       LCALL     ??Subroutine138_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   00006F   02....       LJMP      ?Subroutine0 & 0xFFFF
   1492          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000003   A3           INC       DPTR
   \   000004   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000007   22           RET
   1493          
   1494          
   1495          /*********************************************************************
   1496           * Network Management Responses
   1497           */
   1498          
   1499          /*********************************************************************
   1500           * @fn          ZDP_MgmtNwkDiscRsp
   1501           *
   1502           * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
   1503           *              function sends a unicast message.
   1504           *
   1505           * @param       dstAddr - destination address of the message
   1506           * @param       Status - message status (ZDP_SUCCESS or other)
   1507           * @param       NetworkCount - Total number of networks found
   1508           * @param       StartIndex - Starting index within the reporting network
   1509           *                           list
   1510           * @param       NetworkListCount - number of network lists included
   1511           *                                 in this message
   1512           * @param       NetworkList - List of network descriptors
   1513           * @param       SecurityEnable - Security Options
   1514           *
   1515           * @return      afStatus_t
   1516           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1517          afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscRsp:
   1518                                      byte Status,
   1519                                      byte NetworkCount,
   1520                                      byte StartIndex,
   1521                                      byte NetworkListCount,
   1522                                      networkDesc_t *NetworkList,
   1523                                      byte SecurityEnable )
   1524          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V10,R2
   \   000014   8B..         MOV       ?V11,R3
   \   000016   8C..         MOV       ?V8,R4
   \   000018   8D..         MOV       ?V6,R5
   \   00001A   7416         MOV       A,#0x16
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V4,A
   1525            uint8 *buf;
   1526            uint8 *pBuf;
   1527            byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
   1528            byte idx;
   1529          
   1530            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1531          
   1532            len += (NetworkListCount * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
   \   000022   75..0C       MOV       ?B,#0xc
   \   000025   A4           MUL       AB
   \   000026   2404         ADD       A,#0x4
   \   000028   F5..         MOV       ?V5,A
   1533          
   1534            buf = osal_mem_alloc( len+1 );
   \   00002A                ; Setup parameters for call to function osal_mem_alloc
   \   00002A   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   00002D   8A..         MOV       ?V0,R2
   \   00002F   8B..         MOV       ?V1,R3
   1535            if ( buf == NULL )
   \   000031   EA           MOV       A,R2
   \   000032   4B           ORL       A,R3
   \   000033   7005         JNZ       ??ZDP_MgmtNwkDiscRsp_0
   1536            {
   1537              return afStatus_MEM_FAIL;
   \   000035   7910         MOV       R1,#0x10
   \   000037   02....       LJMP      ??CrossCallReturnLabel_243 & 0xFFFF
   1538            }
   1539          
   1540            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkDiscRsp_0:
   \   00003A   8A82         MOV       DPL,R2
   \   00003C   8B83         MOV       DPH,R3
   \   00003E   A3           INC       DPTR
   \   00003F   AE82         MOV       R6,DPL
   \   000041   AF83         MOV       R7,DPH
   1541          
   1542            *pBuf++ = Status;
   \   000043   E5..         MOV       A,?V8
   \   000045   F0           MOVX      @DPTR,A
   1543            *pBuf++ = NetworkCount;
   \   000046   A3           INC       DPTR
   \   000047   E5..         MOV       A,?V6
   \   000049   F0           MOVX      @DPTR,A
   1544            *pBuf++ = StartIndex;
   \   00004A   7415         MOV       A,#0x15
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   12....       LCALL     ?Subroutine64 & 0xFFFF
   1545            *pBuf++ = NetworkListCount;
   \                     ??CrossCallReturnLabel_94:
   \   000052   8E82         MOV       DPL,R6
   \   000054   8F83         MOV       DPH,R7
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   E5..         MOV       A,?V4
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   EE           MOV       A,R6
   \   00005D   2404         ADD       A,#0x4
   \   00005F   FE           MOV       R6,A
   \   000060   5001         JNC       ??ZDP_MgmtNwkDiscRsp_1
   \   000062   0F           INC       R7
   1546          
   1547            for ( idx = 0; idx < NetworkListCount; idx++ )
   \                     ??ZDP_MgmtNwkDiscRsp_1:
   \   000063   75..00       MOV       ?V7,#0x0
   \   000066   7417         MOV       A,#0x17
   \   000068   12....       LCALL     ?XSTACK_DISP0_8
   \   00006B   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   00006E   801C         SJMP      ??ZDP_MgmtNwkDiscRsp_2
   1548            {
   1549              osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
   1550              pBuf += Z_EXTADDR_LEN;
   1551          
   1552              *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
   1553              *pBuf    = NetworkList->stackProfile;                  // Stack profile
   1554              *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
   1555              *pBuf    = BEACON_ORDER_NO_BEACONS;                    // Beacon Order
   1556              *pBuf++ |= (uint8)(BEACON_ORDER_NO_BEACONS << 4);      // Superframe Order
   1557          
   1558              if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
   1559              {
   1560                *pBuf++ = TRUE;                         // Permit Joining
   1561              }
   1562              else
   1563              {
   1564                *pBuf++ = FALSE;
   \                     ??ZDP_MgmtNwkDiscRsp_3:
   \   000070   12....       LCALL     ?Subroutine78 & 0xFFFF
   1565              }
   \                     ??CrossCallReturnLabel_121:
   \   000073   E4           CLR       A
   \   000074   F0           MOVX      @DPTR,A
   \   000075   EE           MOV       A,R6
   \   000076   240C         ADD       A,#0xc
   \   000078   FE           MOV       R6,A
   \   000079   5001         JNC       ??ZDP_MgmtNwkDiscRsp_4
   \   00007B   0F           INC       R7
   1566          
   1567              NetworkList = NetworkList->nextDesc;    // Move to next list entry
   \                     ??ZDP_MgmtNwkDiscRsp_4:
   \   00007C   E5..         MOV       A,?V2
   \   00007E   2414         ADD       A,#0x14
   \   000080   F582         MOV       DPL,A
   \   000082   E4           CLR       A
   \   000083   35..         ADDC      A,?V3
   \   000085   F583         MOV       DPH,A
   \   000087   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00008A   05..         INC       ?V7
   \                     ??ZDP_MgmtNwkDiscRsp_2:
   \   00008C   E5..         MOV       A,?V7
   \   00008E   C3           CLR       C
   \   00008F   95..         SUBB      A,?V4
   \   000091   5066         JNC       ??ZDP_MgmtNwkDiscRsp_5
   \   000093                ; Setup parameters for call to function sAddrExtCpy
   \   000093   E5..         MOV       A,?V2
   \   000095   240B         ADD       A,#0xb
   \   000097   FC           MOV       R4,A
   \   000098   E4           CLR       A
   \   000099   35..         ADDC      A,?V3
   \   00009B   FD           MOV       R5,A
   \   00009C   EE           MOV       A,R6
   \   00009D   FA           MOV       R2,A
   \   00009E   EF           MOV       A,R7
   \   00009F   FB           MOV       R3,A
   \   0000A0   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000A3   85..82       MOV       DPL,?V2
   \   0000A6   85..83       MOV       DPH,?V3
   \   0000A9   A3           INC       DPTR
   \   0000AA   A3           INC       DPTR
   \   0000AB   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   0000AE   A3           INC       DPTR
   \   0000AF   A3           INC       DPTR
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   A3           INC       DPTR
   \   0000B3   A3           INC       DPTR
   \   0000B4   A3           INC       DPTR
   \   0000B5   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0000B8   85..82       MOV       DPL,?V2
   \   0000BB   85..83       MOV       DPH,?V3
   \   0000BE   A3           INC       DPTR
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   A3           INC       DPTR
   \   0000C2   A3           INC       DPTR
   \   0000C3   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   0000C6   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0000C9   E0           MOVX      A,@DPTR
   \   0000CA   C4           SWAP      A
   \   0000CB   54F0         ANL       A,#0xf0
   \   0000CD   FA           MOV       R2,A
   \   0000CE   8882         MOV       DPL,R0
   \   0000D0   8983         MOV       DPH,R1
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   4A           ORL       A,R2
   \   0000D4   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000D7   A3           INC       DPTR
   \   0000D8   A3           INC       DPTR
   \   0000D9   74FF         MOV       A,#-0x1
   \   0000DB   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0000DE   A3           INC       DPTR
   \   0000DF   A3           INC       DPTR
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   64FE         XRL       A,#0xfe
   \   0000E3   7003         JNZ       ??ZDP_MgmtNwkDiscRsp_6
   \   0000E5   A3           INC       DPTR
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   F4           CPL       A
   \                     ??ZDP_MgmtNwkDiscRsp_6:
   \   0000E8   6086         JZ        ??ZDP_MgmtNwkDiscRsp_3
   \   0000EA   12....       LCALL     ?Subroutine78 & 0xFFFF
   1568            }
   \                     ??CrossCallReturnLabel_122:
   \   0000ED   7401         MOV       A,#0x1
   \   0000EF   F0           MOVX      @DPTR,A
   \   0000F0   EE           MOV       A,R6
   \   0000F1   240C         ADD       A,#0xc
   \   0000F3   FE           MOV       R6,A
   \   0000F4   5086         JNC       ??ZDP_MgmtNwkDiscRsp_4
   \   0000F6   0F           INC       R7
   \                     ??ZDP_MgmtNwkDiscRsp_7:
   \   0000F7   8083         SJMP      ??ZDP_MgmtNwkDiscRsp_4
   1569          
   1570            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
   \                     ??ZDP_MgmtNwkDiscRsp_5:
   \   0000F9   85..82       MOV       DPL,?V0
   \   0000FC   85..83       MOV       DPH,?V1
   \   0000FF   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000102                ; Setup parameters for call to function fillAndSend
   \   000102   75..30       MOV       ?V2,#0x30
   \   000105   75..80       MOV       ?V3,#-0x80
   \   000108   78..         MOV       R0,#?V2
   \   00010A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010D   A9..         MOV       R1,?V5
   \   00010F   AC..         MOV       R4,?V10
   \   000111   AD..         MOV       R5,?V11
   \   000113   7402         MOV       A,#0x2
   \   000115   12....       LCALL     ?XSTACK_DISP101_8
   \   000118   12....       LCALL     ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   00011B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00011E   E9           MOV       A,R1
   \   00011F   FE           MOV       R6,A
   \   000120                ; Setup parameters for call to function osal_mem_free
   \   000120   AA..         MOV       R2,?V0
   \   000122   AB..         MOV       R3,?V1
   \   000124   12....       LCALL     ??Subroutine134_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000127                REQUIRE ?Subroutine4
   \   000127                ; // Fall through to label ?Subroutine4
   1571          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7401         MOV       A,#0x1
   \   000002                REQUIRE ??Subroutine130_0
   \   000002                ; // Fall through to label ??Subroutine130_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine132_0:
   \   000000   A3           INC       DPTR
   \   000001   A882         MOV       R0,DPL
   \   000003   A983         MOV       R1,DPH
   \   000005   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000008                REQUIRE ??Subroutine133_0
   \   000008                ; // Fall through to label ??Subroutine133_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine134_0:
   \   000000   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000003   EE           MOV       A,R6
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   2401         ADD       A,#0x1
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   3400         ADDC      A,#0x0
   \   000006   FB           MOV       R3,A
   \   000007   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   EE           MOV       A,R6
   \   000002   2409         ADD       A,#0x9
   \   000004   F8           MOV       R0,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F9           MOV       R1,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000003   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000006   74..         MOV       A,#(ZDP_Buf + 1) & 0xff
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   74..         MOV       A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   22           RET
   1572          
   1573          /*********************************************************************
   1574           * @fn          ZDP_MgmtLqiRsp
   1575           *
   1576           * @brief       This builds and send a Mgmt_Lqi_rsp message. This
   1577           *              function sends a unicast message.
   1578           *
   1579           * @param       dstAddr - destination address of the message
   1580           * @param       Status - message status (ZDP_SUCCESS or other)
   1581           * @param       NeighborLqiEntries - Total number of entries found
   1582           * @param       StartIndex - Starting index within the reporting list
   1583           * @param       NeighborLqiCount - number of lists included
   1584           *                                 in this message
   1585           * @param       NeighborLqiList - List of NeighborLqiItems.  This list
   1586           *                is the list to be sent, not the entire list
   1587           * @param       SecurityEnable - true if secure
   1588           *
   1589           * @return      ZStatus_t
   1590           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006                REQUIRE ??Subroutine132_0
   \   000006                ; // Fall through to label ??Subroutine132_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1591          ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtLqiRsp:
   1592                                    byte Status,
   1593                                    byte NeighborLqiEntries,
   1594                                    byte StartIndex,
   1595                                    byte NeighborLqiCount,
   1596                                    ZDP_MgmtLqiItem_t* NeighborList,
   1597                                    byte SecurityEnable )
   1598          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V8,R2
   \   000014   8B..         MOV       ?V9,R3
   \   000016   8D..         MOV       ?V10,R5
   1599            ZDP_MgmtLqiItem_t* list = NeighborList;
   \   000018   7416         MOV       A,#0x16
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   12....       LCALL     ??Subroutine142_0 & 0xFFFF
   1600            uint8 *buf, *pBuf;
   1601            byte len, x;
   1602          
   1603            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1604          
   1605            if ( ZSuccess != Status )
   \                     ??CrossCallReturnLabel_294:
   \   000020   EC           MOV       A,R4
   \   000021   6024         JZ        ??ZDP_MgmtLqiRsp_0
   1606            {
   1607              ZDP_TmpBuf[0] = Status;
   \   000023   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000026   EC           MOV       A,R4
   \   000027   F0           MOVX      @DPTR,A
   1608              return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
   \   000028                ; Setup parameters for call to function fillAndSend
   \   000028   75..31       MOV       ?V0,#0x31
   \   00002B   75..80       MOV       ?V1,#-0x80
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   7901         MOV       R1,#0x1
   \   000035   AC..         MOV       R4,?V8
   \   000037   AD..         MOV       R5,?V9
   \   000039   7402         MOV       A,#0x2
   \   00003B   12....       LCALL     ?XSTACK_DISP101_8
   \   00003E   12....       LCALL     ??Subroutine139_0 & 0xFFFF
   1609            }
   \                     ??CrossCallReturnLabel_280:
   \   000041   12....       LCALL     ?DEALLOC_XSTACK8
   \   000044   02....       LJMP      ??CrossCallReturnLabel_241 & 0xFFFF
   \                     ??ZDP_MgmtLqiRsp_0:
   \   000047   7415         MOV       A,#0x15
   \   000049   12....       LCALL     ?XSTACK_DISP0_8
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   F5..         MOV       ?V5,A
   1610          
   1611            // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
   1612            //  neighbor LQI data.
   1613            len = (1 + 1 + 1 + 1) + (NeighborLqiCount * ZDP_MGMTLQI_EXTENDED_SIZE);
   \   00004F   75..16       MOV       ?B,#0x16
   \   000052   A4           MUL       AB
   \   000053   2404         ADD       A,#0x4
   \   000055   F5..         MOV       ?V6,A
   1614          
   1615            buf = osal_mem_alloc( len+1 );
   \   000057                ; Setup parameters for call to function osal_mem_alloc
   \   000057   12....       LCALL     ?Subroutine69 & 0xFFFF
   1616            if ( buf == NULL )
   \                     ??CrossCallReturnLabel_103:
   \   00005A   7005         JNZ       ??ZDP_MgmtLqiRsp_1
   1617            {
   1618              return afStatus_MEM_FAIL;
   \   00005C   7910         MOV       R1,#0x10
   \   00005E   02....       LJMP      ??CrossCallReturnLabel_241 & 0xFFFF
   1619            }
   1620          
   1621            pBuf = buf+1;
   \                     ??ZDP_MgmtLqiRsp_1:
   \   000061   8A82         MOV       DPL,R2
   \   000063   8B83         MOV       DPH,R3
   \   000065   A3           INC       DPTR
   \   000066   8582..       MOV       ?V0,DPL
   \   000069   8583..       MOV       ?V1,DPH
   1622          
   1623            *pBuf++ = Status;
   \   00006C   E4           CLR       A
   \   00006D   F0           MOVX      @DPTR,A
   1624            *pBuf++ = NeighborLqiEntries;
   \   00006E   A3           INC       DPTR
   \   00006F   E5..         MOV       A,?V10
   \   000071   F0           MOVX      @DPTR,A
   1625            *pBuf++ = StartIndex;
   \   000072   7414         MOV       A,#0x14
   \   000074   12....       LCALL     ?XSTACK_DISP0_8
   \   000077   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   00007A   12....       LCALL     ?Subroutine32 & 0xFFFF
   1626            *pBuf++ = NeighborLqiCount;
   \                     ??CrossCallReturnLabel_39:
   \   00007D   A3           INC       DPTR
   \   00007E   E5..         MOV       A,?V5
   \   000080   F0           MOVX      @DPTR,A
   \   000081   E5..         MOV       A,?V0
   \   000083   2404         ADD       A,#0x4
   \   000085   F5..         MOV       ?V0,A
   \   000087   5002         JNC       ??ZDP_MgmtLqiRsp_2
   \   000089   05..         INC       ?V1
   1627          
   1628            for ( x = 0; x < NeighborLqiCount; x++ )
   \                     ??ZDP_MgmtLqiRsp_2:
   \   00008B   75..00       MOV       ?V4,#0x0
   \   00008E   02....       LJMP      ??ZDP_MgmtLqiRsp_3 & 0xFFFF
   1629            {
   1630              osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
   \                     ??ZDP_MgmtLqiRsp_4:
   \   000091                ; Setup parameters for call to function sAddrExtCpy
   \   000091   EE           MOV       A,R6
   \   000092   2402         ADD       A,#0x2
   \   000094   FC           MOV       R4,A
   \   000095   E4           CLR       A
   \   000096   3F           ADDC      A,R7
   \   000097   FD           MOV       R5,A
   \   000098   AA..         MOV       R2,?V0
   \   00009A   AB..         MOV       R3,?V1
   \   00009C   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1631              pBuf += Z_EXTADDR_LEN;
   1632          
   1633              // EXTADDR
   1634              pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
   \   00009F                ; Setup parameters for call to function sAddrExtCpy
   \   00009F   EE           MOV       A,R6
   \   0000A0   240A         ADD       A,#0xa
   \   0000A2   FC           MOV       R4,A
   \   0000A3   E4           CLR       A
   \   0000A4   3F           ADDC      A,R7
   \   0000A5   FD           MOV       R5,A
   \   0000A6   E5..         MOV       A,?V0
   \   0000A8   2408         ADD       A,#0x8
   \   0000AA   FA           MOV       R2,A
   \   0000AB   E4           CLR       A
   \   0000AC   35..         ADDC      A,?V1
   \   0000AE   FB           MOV       R3,A
   \   0000AF   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1635          
   1636              // NWKADDR
   1637              *pBuf++ = LO_UINT16( list->nwkAddr );
   \   0000B2   EE           MOV       A,R6
   \   0000B3   2412         ADD       A,#0x12
   \   0000B5   12....       LCALL     ?Subroutine15 & 0xFFFF
   1638              *pBuf++ = HI_UINT16( list->nwkAddr );
   1639          
   1640              // DEVICETYPE
   1641              *pBuf = list->devType;
   \                     ??CrossCallReturnLabel_10:
   \   0000B8   F8           MOV       R0,A
   \   0000B9   E4           CLR       A
   \   0000BA   3B           ADDC      A,R3
   \   0000BB   F9           MOV       R1,A
   \   0000BC   EE           MOV       A,R6
   \   0000BD   2414         ADD       A,#0x14
   \   0000BF   F582         MOV       DPL,A
   \   0000C1   E4           CLR       A
   \   0000C2   3F           ADDC      A,R7
   \   0000C3   F583         MOV       DPH,A
   \   0000C5   12....       LCALL     ?Subroutine58 & 0xFFFF
   1642          
   1643              // RXONIDLE
   1644              *pBuf |= (uint8)(list->rxOnIdle << 2);
   \                     ??CrossCallReturnLabel_82:
   \   0000C8   EE           MOV       A,R6
   \   0000C9   2415         ADD       A,#0x15
   \   0000CB   12....       LCALL     ??Subroutine144_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   0000CE   33           RLC       A
   \   0000CF   33           RLC       A
   \   0000D0   54FC         ANL       A,#0xfc
   \   0000D2   FC           MOV       R4,A
   \   0000D3   8882         MOV       DPL,R0
   \   0000D5   8983         MOV       DPH,R1
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   4C           ORL       A,R4
   \   0000D9   F0           MOVX      @DPTR,A
   1645          
   1646              // RELATIONSHIP
   1647              *pBuf++ |= (uint8)(list->relation << 4);
   \   0000DA   EE           MOV       A,R6
   \   0000DB   2416         ADD       A,#0x16
   \   0000DD   12....       LCALL     ??Subroutine144_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   0000E0   C4           SWAP      A
   \   0000E1   54F0         ANL       A,#0xf0
   \   0000E3   FC           MOV       R4,A
   \   0000E4   8882         MOV       DPL,R0
   \   0000E6   8983         MOV       DPH,R1
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   4C           ORL       A,R4
   \   0000EA   F0           MOVX      @DPTR,A
   1648          
   1649              // PERMITJOINING
   1650              *pBuf++ = (uint8)(list->permit);
   \   0000EB   EE           MOV       A,R6
   \   0000EC   2417         ADD       A,#0x17
   \   0000EE   F582         MOV       DPL,A
   \   0000F0   E4           CLR       A
   \   0000F1   3F           ADDC      A,R7
   \   0000F2   F583         MOV       DPH,A
   \   0000F4   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0000F7   A3           INC       DPTR
   \   0000F8   A3           INC       DPTR
   \   0000F9   F0           MOVX      @DPTR,A
   1651          
   1652              // DEPTH
   1653              *pBuf++ = list->depth;
   \   0000FA   EE           MOV       A,R6
   \   0000FB   2418         ADD       A,#0x18
   \   0000FD   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000100   F0           MOVX      @DPTR,A
   1654          
   1655              // LQI
   1656              *pBuf++ = list->lqi;
   \   000101   EE           MOV       A,R6
   \   000102   2419         ADD       A,#0x19
   \   000104   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000107   A3           INC       DPTR
   \   000108   F0           MOVX      @DPTR,A
   \   000109   EA           MOV       A,R2
   \   00010A   2406         ADD       A,#0x6
   \   00010C   F5..         MOV       ?V0,A
   \   00010E   E4           CLR       A
   \   00010F   3B           ADDC      A,R3
   \   000110   F5..         MOV       ?V1,A
   1657          
   1658              list++; // next list entry
   \   000112   EE           MOV       A,R6
   \   000113   241A         ADD       A,#0x1a
   \   000115   FE           MOV       R6,A
   \   000116   5001         JNC       ??ZDP_MgmtLqiRsp_5
   \   000118   0F           INC       R7
   1659            }
   \                     ??ZDP_MgmtLqiRsp_5:
   \   000119   05..         INC       ?V4
   \                     ??ZDP_MgmtLqiRsp_3:
   \   00011B   E5..         MOV       A,?V4
   \   00011D   C3           CLR       C
   \   00011E   95..         SUBB      A,?V5
   \   000120   5003         JNC       $+5
   \   000122   02....       LJMP      ??ZDP_MgmtLqiRsp_4 & 0xFFFF
   1660          
   1661            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
   \   000125   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000128                ; Setup parameters for call to function fillAndSend
   \   000128   75..31       MOV       ?V0,#0x31
   \   00012B   75..80       MOV       ?V1,#-0x80
   \   00012E   78..         MOV       R0,#?V0
   \   000130   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000133   A9..         MOV       R1,?V6
   \   000135   AC..         MOV       R4,?V8
   \   000137   AD..         MOV       R5,?V9
   \   000139   7402         MOV       A,#0x2
   \   00013B   12....       LCALL     ?XSTACK_DISP101_8
   \   00013E   12....       LCALL     ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   000141   12....       LCALL     ?DEALLOC_XSTACK8
   \   000144   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000147   7401         MOV       A,#0x1
   \   000149   12....       LCALL     ?DEALLOC_XSTACK8
   \   00014C   7F0B         MOV       R7,#0xb
   \   00014E   02....       LJMP      ?BANKED_LEAVE_XDATA
   1662          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E9           MOV       A,R1
   \   000001   FE           MOV       R6,A
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002   AA..         MOV       R2,?V2
   \   000004   AB..         MOV       R3,?V3
   \   000006                REQUIRE ??Subroutine134_0
   \   000006                ; // Fall through to label ??Subroutine134_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000003   8A..         MOV       ?V2,R2
   \   000005   8B..         MOV       ?V3,R3
   \   000007   EA           MOV       A,R2
   \   000008   4B           ORL       A,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   3F           ADDC      A,R7
   \   000003   F9           MOV       R1,A
   \   000004   8882         MOV       DPL,R0
   \   000006   F583         MOV       DPH,A
   \   000008   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   00000B   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   00000E   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000011   A3           INC       DPTR
   \   000012   F0           MOVX      @DPTR,A
   \   000013   EA           MOV       A,R2
   \   000014   2402         ADD       A,#0x2
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine144_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006   E0           MOVX      A,@DPTR
   \   000007   22           RET
   1663          
   1664          /*********************************************************************
   1665           * @fn          ZDP_MgmtRtgRsp
   1666           *
   1667           * @brief       This builds and send a Mgmt_Rtg_rsp message. This
   1668           *              function sends a unicast message.
   1669           *
   1670           * @param       dstAddr - destination address of the message
   1671           * @param       Status - message status (ZDP_SUCCESS or other)
   1672           * @param       RoutingTableEntries - Total number of entries
   1673           * @param       StartIndex - Starting index within the reporting list
   1674           * @param       RoutingTableListCount - number of entries included
   1675           *                                      in this message
   1676           * @param       RoutingTableList - List of Routing Table entries
   1677           * @param       SecurityEnable - true to enable security for this message
   1678           *
   1679           * @return      ZStatus_t
   1680           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1681          ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtRtgRsp:
   1682                                      byte Status,
   1683                                      byte RoutingTableEntries,
   1684                                      byte StartIndex,
   1685                                      byte RoutingListCount,
   1686                                      rtgItem_t *RoutingTableList,
   1687                                      byte SecurityEnable )
   1688          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V2,R2
   \   000014   8B..         MOV       ?V3,R3
   \   000016   8C..         MOV       ?V1,R4
   \   000018   8D..         MOV       ?V0,R5
   \   00001A   7414         MOV       A,#0x14
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V5,A
   1689            uint8 *buf;
   1690            uint8 *pBuf;
   1691            // Status + RoutingTableEntries + StartIndex + RoutingListCount.
   1692            byte len = 1 + 1 + 1 + 1;
   1693            byte x;
   1694          
   1695            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1696          
   1697            // Add an array for Routing List data
   1698            len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
   \   000022   75..05       MOV       ?B,#0x5
   \   000025   A4           MUL       AB
   \   000026   2404         ADD       A,#0x4
   \   000028   F5..         MOV       ?V4,A
   1699          
   1700            buf = osal_mem_alloc( (short)(len+1) );
   \   00002A                ; Setup parameters for call to function osal_mem_alloc
   \   00002A   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00002D   8A..         MOV       ?V6,R2
   \   00002F   8B..         MOV       ?V7,R3
   \   000031   AE..         MOV       R6,?V6
   \   000033   AF..         MOV       R7,?V7
   1701            if ( buf == NULL )
   \   000035   EA           MOV       A,R2
   \   000036   4F           ORL       A,R7
   \   000037   7005         JNZ       ??ZDP_MgmtRtgRsp_0
   1702            {
   1703              return afStatus_MEM_FAIL;
   \   000039   7910         MOV       R1,#0x10
   \   00003B   02....       LJMP      ??ZDP_MgmtRtgRsp_1 & 0xFFFF
   1704            }
   1705          
   1706            pBuf = buf+1;
   \                     ??ZDP_MgmtRtgRsp_0:
   \   00003E   8A82         MOV       DPL,R2
   \   000040   8B83         MOV       DPH,R3
   \   000042   A3           INC       DPTR
   \   000043   A882         MOV       R0,DPL
   \   000045   A983         MOV       R1,DPH
   1707          
   1708            *pBuf++ = Status;
   \   000047   E5..         MOV       A,?V1
   \   000049   F0           MOVX      @DPTR,A
   1709            *pBuf++ = RoutingTableEntries;
   \   00004A   A3           INC       DPTR
   \   00004B   E5..         MOV       A,?V0
   \   00004D   F0           MOVX      @DPTR,A
   1710            *pBuf++ = StartIndex;
   \   00004E   7413         MOV       A,#0x13
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   12....       LCALL     ??Subroutine135_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000056   12....       LCALL     ??Subroutine123_0 & 0xFFFF
   1711            *pBuf++ = RoutingListCount;
   \                     ??CrossCallReturnLabel_189:
   \   000059   E5..         MOV       A,?V5
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   E8           MOV       A,R0
   \   00005D   2404         ADD       A,#0x4
   \   00005F   F8           MOV       R0,A
   \   000060   5001         JNC       ??ZDP_MgmtRtgRsp_2
   \   000062   09           INC       R1
   1712          
   1713            for ( x = 0; x < RoutingListCount; x++ )
   \                     ??ZDP_MgmtRtgRsp_2:
   \   000063   7C00         MOV       R4,#0x0
   \   000065   7415         MOV       A,#0x15
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   12....       LCALL     ??Subroutine143_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   00006D   807B         SJMP      ??ZDP_MgmtRtgRsp_3
   1714            {
   1715              *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
   \                     ??ZDP_MgmtRtgRsp_4:
   \   00006F   8A82         MOV       DPL,R2
   \   000071   8B83         MOV       DPH,R3
   \   000073   12....       LCALL     ?Subroutine58 & 0xFFFF
   1716              *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
   \                     ??CrossCallReturnLabel_83:
   \   000076   8A82         MOV       DPL,R2
   \   000078   8B83         MOV       DPH,R3
   \   00007A   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   00007D   12....       LCALL     ?Subroutine25 & 0xFFFF
   1717          
   1718              *pBuf = (RoutingTableList->status & 0x07);
   \                     ??CrossCallReturnLabel_253:
   \   000080   A3           INC       DPTR
   \   000081   E0           MOVX      A,@DPTR
   \   000082   5407         ANL       A,#0x7
   \   000084   8882         MOV       DPL,R0
   \   000086   8983         MOV       DPH,R1
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   12....       LCALL     ?Subroutine24 & 0xFFFF
   1719              if ( RoutingTableList->options & (ZP_MTO_ROUTE_RC | ZP_MTO_ROUTE_NRC) )
   \                     ??CrossCallReturnLabel_29:
   \   00008D   5418         ANL       A,#0x18
   \   00008F   602C         JZ        ??ZDP_MgmtRtgRsp_5
   1720              {
   1721                uint8 options = 0;
   1722                options |= ZDO_MGMT_RTG_ENTRY_MANYTOONE;
   \   000091   7D02         MOV       R5,#0x2
   1723          
   1724                if ( RoutingTableList->options & ZP_RTG_RECORD )
   \   000093   8A82         MOV       DPL,R2
   \   000095   8B83         MOV       DPH,R3
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   A2E2         MOV       C,0xE0 /* A   */.2
   \   0000A0   5002         JNC       ??ZDP_MgmtRtgRsp_6
   1725                {
   1726                  options |= ZDO_MGMT_RTG_ENTRY_ROUTE_RECORD_REQUIRED;
   \   0000A2   7D06         MOV       R5,#0x6
   1727                }
   1728          
   1729                if ( RoutingTableList->options & ZP_MTO_ROUTE_NRC )
   \                     ??ZDP_MgmtRtgRsp_6:
   \   0000A4   A2E4         MOV       C,0xE0 /* A   */.4
   \   0000A6   5005         JNC       ??ZDP_MgmtRtgRsp_7
   1730                {
   1731                  options |= ZDO_MGMT_RTG_ENTRY_MEMORY_CONSTRAINED;
   \   0000A8   D3           SETB      C
   \   0000A9   ED           MOV       A,R5
   \   0000AA   D2E0         SETB      0xE0 /* A   */.0
   \   0000AC   FD           MOV       R5,A
   1732                }
   1733          
   1734                *pBuf |= (options << 3);
   \                     ??ZDP_MgmtRtgRsp_7:
   \   0000AD   ED           MOV       A,R5
   \   0000AE   33           RLC       A
   \   0000AF   33           RLC       A
   \   0000B0   33           RLC       A
   \   0000B1   54F8         ANL       A,#0xf8
   \   0000B3   FD           MOV       R5,A
   \   0000B4   8882         MOV       DPL,R0
   \   0000B6   8983         MOV       DPH,R1
   \   0000B8   A3           INC       DPTR
   \   0000B9   A3           INC       DPTR
   \   0000BA   E0           MOVX      A,@DPTR
   \   0000BB   4D           ORL       A,R5
   \   0000BC   F0           MOVX      @DPTR,A
   1735              }
   1736              pBuf++;
   1737          
   1738              *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
   \                     ??ZDP_MgmtRtgRsp_5:
   \   0000BD   EA           MOV       A,R2
   \   0000BE   2402         ADD       A,#0x2
   \   0000C0   F5..         MOV       ?V6,A
   \   0000C2   E4           CLR       A
   \   0000C3   3B           ADDC      A,R3
   \   0000C4   F5..         MOV       ?V7,A
   \   0000C6   85..82       MOV       DPL,?V6
   \   0000C9   F583         MOV       DPH,A
   \   0000CB   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   0000CE   F0           MOVX      @DPTR,A
   1739              *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
   \   0000CF   85..82       MOV       DPL,?V6
   \   0000D2   85..83       MOV       DPH,?V7
   \   0000D5   A3           INC       DPTR
   \   0000D6   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   0000D9   A3           INC       DPTR
   \   0000DA   F0           MOVX      @DPTR,A
   \   0000DB   E8           MOV       A,R0
   \   0000DC   2405         ADD       A,#0x5
   \   0000DE   F8           MOV       R0,A
   \   0000DF   5001         JNC       ??ZDP_MgmtRtgRsp_8
   \   0000E1   09           INC       R1
   1740              RoutingTableList++;    // Move to next list entry
   \                     ??ZDP_MgmtRtgRsp_8:
   \   0000E2   EA           MOV       A,R2
   \   0000E3   2407         ADD       A,#0x7
   \   0000E5   FA           MOV       R2,A
   \   0000E6   5001         JNC       ??ZDP_MgmtRtgRsp_9
   \   0000E8   0B           INC       R3
   1741            }
   \                     ??ZDP_MgmtRtgRsp_9:
   \   0000E9   0C           INC       R4
   \                     ??ZDP_MgmtRtgRsp_3:
   \   0000EA   EC           MOV       A,R4
   \   0000EB   C3           CLR       C
   \   0000EC   95..         SUBB      A,?V5
   \   0000EE   5003         JNC       $+5
   \   0000F0   02....       LJMP      ??ZDP_MgmtRtgRsp_4 & 0xFFFF
   1742          
   1743            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
   \   0000F3   8E82         MOV       DPL,R6
   \   0000F5   8F83         MOV       DPH,R7
   \   0000F7   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   0000FA                ; Setup parameters for call to function fillAndSend
   \   0000FA   75..32       MOV       ?V6,#0x32
   \   0000FD   75..80       MOV       ?V7,#-0x80
   \   000100   78..         MOV       R0,#?V6
   \   000102   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000105   A9..         MOV       R1,?V4
   \   000107   AC..         MOV       R4,?V2
   \   000109   AD..         MOV       R5,?V3
   \   00010B   7402         MOV       A,#0x2
   \   00010D   12....       LCALL     ?XSTACK_DISP101_8
   \   000110   12....       LCALL     ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   000113   12....       LCALL     ?DEALLOC_XSTACK8
   \   000116   E9           MOV       A,R1
   \   000117   F5..         MOV       ?V2,A
   \   000119                ; Setup parameters for call to function osal_mem_free
   \   000119   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   00011C   A9..         MOV       R1,?V2
   \                     ??ZDP_MgmtRtgRsp_1:
   \   00011E   02....       LJMP      ?Subroutine6 & 0xFFFF
   1744          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   12....       LCALL     ??Subroutine135_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine136_0
   \   000001                ; // Fall through to label ??Subroutine136_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine136_0:
   \   000000   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   EE           MOV       A,R6
   \   000001   FA           MOV       R2,A
   \   000002   EF           MOV       A,R7
   \   000003   FB           MOV       R3,A
   \   000004   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET
   1745          
   1746          /*********************************************************************
   1747           * @fn          ZDP_MgmtBindRsp
   1748           *
   1749           * @brief       This builds and send a Mgmt_Bind_rsp message. This
   1750           *              function sends a unicast message.
   1751           *
   1752           * @param       dstAddr - destination address of the message
   1753           * @param       Status - message status (ZDP_SUCCESS or other)
   1754           * @param       BindingTableEntries - Total number of entries
   1755           * @param       StartIndex - Starting index within the reporting list
   1756           * @param       BindingTableListCount - number of entries included
   1757           *                                 in this message
   1758           * @param       BindingTableList - List of Binding Table entries
   1759           * @param       SecurityEnable - Security Options
   1760           *
   1761           * @return      ZStatus_t
   1762           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1763          ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtBindRsp:
   1764                                      byte Status,
   1765                                      byte BindingTableEntries,
   1766                                      byte StartIndex,
   1767                                      byte BindingTableListCount,
   1768                                      apsBindingItem_t *BindingTableList,
   1769                                      byte SecurityEnable )
   1770          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V10,R2
   \   000014   8B..         MOV       ?V11,R3
   \   000016   8C..         MOV       ?V6,R4
   \   000018   8D..         MOV       ?V5,R5
   \   00001A   7416         MOV       A,#0x16
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V4,A
   1771            uint8 *buf;
   1772            uint8 *pBuf;
   1773            uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
   1774            uint8 len;    // Actual length varies due to different addrMode
   1775            uint8 x;
   1776            byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
   1777            byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
   1778          
   1779            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1780          
   1781            // Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1782            maxLen = 1 + 1 + 1 + 1;
   1783            maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
   1784            buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
   \   000022                ; Setup parameters for call to function osal_mem_alloc
   \   000022   75..15       MOV       ?B,#0x15
   \   000025   A4           MUL       AB
   \   000026   2404         ADD       A,#0x4
   \   000028   12....       LCALL     ?Subroutine69 & 0xFFFF
   1785          
   1786            if ( buf == NULL )
   \                     ??CrossCallReturnLabel_104:
   \   00002B   7005         JNZ       ??ZDP_MgmtBindRsp_0
   1787            {
   1788              return afStatus_MEM_FAIL;
   \   00002D   7910         MOV       R1,#0x10
   \   00002F   02....       LJMP      ??CrossCallReturnLabel_242 & 0xFFFF
   1789            }
   1790          
   1791            pBuf = buf+1;
   \                     ??ZDP_MgmtBindRsp_0:
   \   000032   8A82         MOV       DPL,R2
   \   000034   8B83         MOV       DPH,R3
   \   000036   A3           INC       DPTR
   \   000037   AA82         MOV       R2,DPL
   \   000039   AB83         MOV       R3,DPH
   1792          
   1793            *pBuf++ = Status;
   \   00003B   E5..         MOV       A,?V6
   \   00003D   F0           MOVX      @DPTR,A
   1794            *pBuf++ = BindingTableEntries;
   \   00003E   A3           INC       DPTR
   \   00003F   E5..         MOV       A,?V5
   \   000041   F0           MOVX      @DPTR,A
   1795            *pBuf++ = StartIndex;
   \   000042   7415         MOV       A,#0x15
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00004A   A3           INC       DPTR
   \   00004B   12....       LCALL     ?Subroutine39 & 0xFFFF
   1796            *pBuf++ = BindingTableListCount;
   \                     ??CrossCallReturnLabel_50:
   \   00004E   E5..         MOV       A,?V4
   \   000050   F0           MOVX      @DPTR,A
   \   000051   EA           MOV       A,R2
   \   000052   2404         ADD       A,#0x4
   \   000054   FA           MOV       R2,A
   \   000055   5001         JNC       ??ZDP_MgmtBindRsp_1
   \   000057   0B           INC       R3
   1797          
   1798            // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1799            // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
   1800            //           extZdpBindEntrySize     -- Version 1.1 extended address mode
   1801            //           shortZdpBindEntrySize   -- Version 1.1 group address mode
   1802          
   1803            len = 1 + 1 + 1 + 1;
   \                     ??ZDP_MgmtBindRsp_1:
   \   000058   75..04       MOV       ?V0,#0x4
   1804            for ( x = 0; x < BindingTableListCount; x++ )
   \   00005B   75..00       MOV       ?V1,#0x0
   \   00005E   7417         MOV       A,#0x17
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   12....       LCALL     ??Subroutine142_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000066   8019         SJMP      ??ZDP_MgmtBindRsp_2
   1805            {
   1806              pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
   1807              *pBuf++ = BindingTableList->srcEP;
   1808          
   1809              // Cluster ID
   1810              *pBuf++ = LO_UINT16( BindingTableList->clusterID );
   1811              *pBuf++ = HI_UINT16( BindingTableList->clusterID );
   1812          
   1813              *pBuf++ = BindingTableList->dstAddr.addrMode;
   1814              if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
   1815              {
   1816                len += extZdpBindEntrySize;
   1817                pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
   1818                *pBuf++ = BindingTableList->dstEP;
   1819              }
   1820              else
   1821              {
   1822                len += shortZdpBindEntrySize;
   \                     ??ZDP_MgmtBindRsp_3:
   \   000068   740E         MOV       A,#0xe
   \   00006A   25..         ADD       A,?V0
   \   00006C   F5..         MOV       ?V0,A
   1823                *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   00006E   EE           MOV       A,R6
   \   00006F   240B         ADD       A,#0xb
   \   000071   12....       LCALL     ?Subroutine15 & 0xFFFF
   1824                *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   1825              }
   \                     ??CrossCallReturnLabel_11:
   \   000074   FA           MOV       R2,A
   \   000075   5001         JNC       ??ZDP_MgmtBindRsp_4
   \   000077   0B           INC       R3
   1826              BindingTableList++;    // Move to next list entry
   \                     ??ZDP_MgmtBindRsp_4:
   \   000078   EE           MOV       A,R6
   \   000079   2415         ADD       A,#0x15
   \   00007B   FE           MOV       R6,A
   \   00007C   5001         JNC       ??ZDP_MgmtBindRsp_5
   \   00007E   0F           INC       R7
   \                     ??ZDP_MgmtBindRsp_5:
   \   00007F   05..         INC       ?V1
   \                     ??ZDP_MgmtBindRsp_2:
   \   000081   E5..         MOV       A,?V1
   \   000083   C3           CLR       C
   \   000084   95..         SUBB      A,?V4
   \   000086   505C         JNC       ??ZDP_MgmtBindRsp_6
   \   000088                ; Setup parameters for call to function sAddrExtCpy
   \   000088   EE           MOV       A,R6
   \   000089   FC           MOV       R4,A
   \   00008A   EF           MOV       A,R7
   \   00008B   FD           MOV       R5,A
   \   00008C   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00008F   8E82         MOV       DPL,R6
   \   000091   8F83         MOV       DPH,R7
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   12....       LCALL     ??Subroutine140_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   00009E   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0000A1   8882         MOV       DPL,R0
   \   0000A3   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   0000A6   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   0000A9   8A82         MOV       DPL,R2
   \   0000AB   8B83         MOV       DPH,R3
   \   0000AD   A3           INC       DPTR
   \   0000AE   A3           INC       DPTR
   \   0000AF   F0           MOVX      @DPTR,A
   \   0000B0   EE           MOV       A,R6
   \   0000B1   2413         ADD       A,#0x13
   \   0000B3   F8           MOV       R0,A
   \   0000B4   E4           CLR       A
   \   0000B5   3F           ADDC      A,R7
   \   0000B6   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0000B9   5001         JNC       ??ZDP_MgmtBindRsp_7
   \   0000BB   0B           INC       R3
   \                     ??ZDP_MgmtBindRsp_7:
   \   0000BC   8882         MOV       DPL,R0
   \   0000BE   8983         MOV       DPH,R1
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   6403         XRL       A,#0x3
   \   0000C3   70A3         JNZ       ??ZDP_MgmtBindRsp_3
   \   0000C5   7415         MOV       A,#0x15
   \   0000C7   25..         ADD       A,?V0
   \   0000C9   F5..         MOV       ?V0,A
   \   0000CB                ; Setup parameters for call to function sAddrExtCpy
   \   0000CB   EE           MOV       A,R6
   \   0000CC   240B         ADD       A,#0xb
   \   0000CE   FC           MOV       R4,A
   \   0000CF   E4           CLR       A
   \   0000D0   3F           ADDC      A,R7
   \   0000D1   FD           MOV       R5,A
   \   0000D2   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000D5   EE           MOV       A,R6
   \   0000D6   2414         ADD       A,#0x14
   \   0000D8   F582         MOV       DPL,A
   \   0000DA   E4           CLR       A
   \   0000DB   3F           ADDC      A,R7
   \   0000DC   12....       LCALL     ?Subroutine61 & 0xFFFF
   1827            }
   \                     ??CrossCallReturnLabel_288:
   \   0000DF   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000E2   8094         SJMP      ??ZDP_MgmtBindRsp_4
   1828          
   1829            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
   \                     ??ZDP_MgmtBindRsp_6:
   \   0000E4   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   0000E7                ; Setup parameters for call to function fillAndSend
   \   0000E7   75..33       MOV       ?V8,#0x33
   \   0000EA   75..80       MOV       ?V9,#-0x80
   \   0000ED   78..         MOV       R0,#?V8
   \   0000EF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F2   A9..         MOV       R1,?V0
   \   0000F4   AC..         MOV       R4,?V10
   \   0000F6   AD..         MOV       R5,?V11
   \   0000F8   7402         MOV       A,#0x2
   \   0000FA   12....       LCALL     ?XSTACK_DISP101_8
   \   0000FD   12....       LCALL     ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000100   12....       LCALL     ?DEALLOC_XSTACK8
   \   000103   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000106   02....       LJMP      ?Subroutine4 & 0xFFFF
   1830          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine140_0
   \   000002                ; // Fall through to label ??Subroutine140_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000003   22           RET
   1831          
   1832          /*********************************************************************
   1833           * @fn          ZDP_MgmtNwkUpdateNotify
   1834           *
   1835           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
   1836           *              function sends a unicast message.
   1837           *
   1838           * @param       dstAddr - destination address of the message
   1839           * @param       status - message status (ZDP_SUCCESS or other)
   1840           * @param       scannedChannels - List of channels scanned by the request
   1841           * @param       totalTransmissions - Total transmissions
   1842           * @param       transmissionFailures - Sum of transmission failures
   1843           * @param       listCount - Number of records contained in the energyValues list
   1844           * @param       energyValues - List of descriptors, one for each of ListCount,
   1845           *                             of the enegry detect descriptors
   1846           * @param       txOptions - Transmit options
   1847           * @param       securityEnable - Security options
   1848           *
   1849           * @return      afStatus_t
   1850           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1851          afStatus_t ZDP_MgmtNwkUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateNotify:
   1852                                              uint8 status, uint32 scannedChannels,
   1853                                              uint16 totalTransmissions, uint16 transmissionFailures,
   1854                                              uint8 listCount, uint8 *energyValues, uint8 txOptions,
   1855                                              uint8 securityEnable )
   1856          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V8,R2
   \   000014   8B..         MOV       ?V9,R3
   \   000016   8C..         MOV       ?V2,R4
   \   000018   8D..         MOV       ?V0,R5
   1857            uint8 *buf;
   1858            uint8 *pBuf;
   1859            uint8 len;
   1860          
   1861            (void)securityEnable;  // Intentionally unreferenced parameter
   1862          
   1863            // Status + ScannedChannels + totalTransmissions + transmissionFailures + ListCount + energyValues
   1864            len = 1 + 4 + 2 + 2 + 1 + listCount;
   \   00001A   740A         MOV       A,#0xa
   \   00001C   2D           ADD       A,R5
   \   00001D   F5..         MOV       ?V1,A
   1865          
   1866            buf = osal_mem_alloc( len+1 ); // +1 for transaction ID
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000022   8A..         MOV       ?V4,R2
   \   000024   8B..         MOV       ?V5,R3
   \   000026   AE..         MOV       R6,?V4
   \   000028   AF..         MOV       R7,?V5
   1867            if ( buf == NULL )
   \   00002A   EA           MOV       A,R2
   \   00002B   4F           ORL       A,R7
   \   00002C   7005         JNZ       ??ZDP_MgmtNwkUpdateNotify_0
   1868            {
   1869              return afStatus_MEM_FAIL;
   \   00002E   7910         MOV       R1,#0x10
   \   000030   02....       LJMP      ??ZDP_MgmtNwkUpdateNotify_1 & 0xFFFF
   1870            }
   1871          
   1872            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkUpdateNotify_0:
   \   000033   8A82         MOV       DPL,R2
   \   000035   8B83         MOV       DPH,R3
   \   000037   A3           INC       DPTR
   1873          
   1874            *pBuf++ = status;
   \   000038   E5..         MOV       A,?V2
   \   00003A   12....       LCALL     ?Subroutine23 & 0xFFFF
   1875          
   1876            pBuf = osal_buffer_uint32( pBuf, scannedChannels );
   \                     ??CrossCallReturnLabel_28:
   \   00003D                ; Setup parameters for call to function osal_buffer_uint32
   \   00003D   7413         MOV       A,#0x13
   \   00003F   12....       LCALL     ?XSTACK_DISP0_8
   \   000042   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000045   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000048   7404         MOV       A,#0x4
   \   00004A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004D   7417         MOV       A,#0x17
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   12....       LCALL     ??Subroutine126_0 & 0xFFFF
   1877          
   1878            *pBuf++ = LO_UINT16( totalTransmissions );
   \                     ??CrossCallReturnLabel_202:
   \   000055   8A82         MOV       DPL,R2
   \   000057   8B83         MOV       DPH,R3
   \   000059   F0           MOVX      @DPTR,A
   1879            *pBuf++ = HI_UINT16( totalTransmissions );
   \   00005A   E9           MOV       A,R1
   \   00005B   A3           INC       DPTR
   \   00005C   F0           MOVX      @DPTR,A
   \   00005D   7419         MOV       A,#0x19
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   12....       LCALL     ?Subroutine34 & 0xFFFF
   1880          
   1881            *pBuf++ = LO_UINT16( transmissionFailures );
   1882            *pBuf++ = HI_UINT16( transmissionFailures );
   \                     ??CrossCallReturnLabel_41:
   \   000065   12....       LCALL     ?Subroutine25 & 0xFFFF
   1883          
   1884            *pBuf++ = listCount;
   \                     ??CrossCallReturnLabel_254:
   \   000068   E5..         MOV       A,?V0
   \   00006A   F0           MOVX      @DPTR,A
   1885          
   1886            if ( listCount > 0 )
   \   00006B   601C         JZ        ??ZDP_MgmtNwkUpdateNotify_2
   1887              osal_memcpy( pBuf, energyValues, listCount );
   \   00006D                ; Setup parameters for call to function osal_memcpy
   \   00006D   741B         MOV       A,#0x1b
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000075   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000078   AC..         MOV       R4,?V0
   \   00007A   7D00         MOV       R5,#0x0
   \   00007C   EA           MOV       A,R2
   \   00007D   2405         ADD       A,#0x5
   \   00007F   FA           MOV       R2,A
   \   000080   5001         JNC       ??ZDP_MgmtNwkUpdateNotify_3
   \   000082   0B           INC       R3
   \                     ??ZDP_MgmtNwkUpdateNotify_3:
   \   000083   12....       LCALL     ??Subroutine145_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   000086   12....       LCALL     ?DEALLOC_XSTACK8
   1888          
   1889            FillAndSendBufferTxOptions( &TransSeq, dstAddr, Mgmt_NWK_Update_notify, len, buf, txOptions );
   \                     ??ZDP_MgmtNwkUpdateNotify_2:
   \   000089   8E82         MOV       DPL,R6
   \   00008B   8F83         MOV       DPH,R7
   \   00008D   12....       LCALL     ??Subroutine132_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000090   741D         MOV       A,#0x1d
   \   000092   12....       LCALL     ?XSTACK_DISP0_8
   \   000095   E0           MOVX      A,@DPTR
   \   000096   90....       MOV       DPTR,#ZDP_TxOptions
   \   000099   F0           MOVX      @DPTR,A
   \   00009A                ; Setup parameters for call to function fillAndSend
   \   00009A   75..38       MOV       ?V4,#0x38
   \   00009D   75..80       MOV       ?V5,#-0x80
   \   0000A0   78..         MOV       R0,#?V4
   \   0000A2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A5   A9..         MOV       R1,?V1
   \   0000A7   AC..         MOV       R4,?V8
   \   0000A9   AD..         MOV       R5,?V9
   \   0000AB   7402         MOV       A,#0x2
   \   0000AD   12....       LCALL     ?XSTACK_DISP101_8
   \   0000B0   12....       LCALL     ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   0000B3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B6   E9           MOV       A,R1
   \   0000B7   F5..         MOV       ?V1,A
   \   0000B9                ; Setup parameters for call to function osal_mem_free
   \   0000B9   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   0000BC   90....       MOV       DPTR,#ZDP_TxOptions
   \   0000BF   E4           CLR       A
   \   0000C0   F0           MOVX      @DPTR,A
   \   0000C1   A9..         MOV       R1,?V1
   \                     ??ZDP_MgmtNwkUpdateNotify_1:
   \   0000C3                REQUIRE ?Subroutine6
   \   0000C3                ; // Fall through to label ?Subroutine6
   1890          }
   1891          
   1892          /*********************************************************************
   1893           * Functions to register for ZDO Over-the-air messages
   1894           */
   1895          
   1896          /*********************************************************************
   1897           * @fn          ZDO_RegisterForZDOMsg
   1898           *
   1899           * @brief       Call this function to register of an incoming over
   1900           *              the air ZDO message - probably a response message
   1901           *              but requests can also be received.
   1902           *              Messages are delivered to the task with ZDO_CB_MSG
   1903           *              as the message ID.
   1904           *
   1905           * @param       taskID - Where you would like the message delivered
   1906           * @param       clusterID - What message?
   1907           *                          ZDO_ALL_MSGS_CLUSTERID - all responses
   1908           *                          and device announce
   1909           *
   1910           * @return      ZSuccess - successful, ZMemError if not
   1911           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1912          ZStatus_t ZDO_RegisterForZDOMsg( uint8 taskID, uint16 clusterID )
   \                     ZDO_RegisterForZDOMsg:
   1913          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   1914            ZDO_MsgCB_t *pList;
   1915            ZDO_MsgCB_t *pLast;
   1916            ZDO_MsgCB_t *pNew;
   1917          
   1918            // Look for duplicate
   1919            pList = pLast = zdoMsgCBs;
   \   00000B   90....       MOV       DPTR,#zdoMsgCBs
   \   00000E   12....       LCALL     ??Subroutine142_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   000011   EE           MOV       A,R6
   \   000012   F8           MOV       R0,A
   \   000013   EF           MOV       A,R7
   \   000014   8026         SJMP      ??CrossCallReturnLabel_337
   1920            while ( pList )
   1921            {
   1922              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   \                     ??ZDO_RegisterForZDOMsg_0:
   \   000016   8882         MOV       DPL,R0
   \   000018   8983         MOV       DPH,R1
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   65..         XRL       A,?V2
   \   00001F   7010         JNZ       ??ZDO_RegisterForZDOMsg_1
   \   000021   8882         MOV       DPL,R0
   \   000023   8983         MOV       DPH,R1
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   6A           XRL       A,R2
   \   00002A   7003         JNZ       ??ZDO_RegisterForZDOMsg_2
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   6B           XRL       A,R3
   \                     ??ZDO_RegisterForZDOMsg_2:
   \   00002F   6053         JZ        ??CrossCallReturnLabel_231
   1923                return ( ZSuccess );
   1924              pLast = pList;
   \                     ??ZDO_RegisterForZDOMsg_1:
   \   000031   E8           MOV       A,R0
   \   000032   FE           MOV       R6,A
   \   000033   E9           MOV       A,R1
   \   000034   FF           MOV       R7,A
   1925              pList = (ZDO_MsgCB_t *)pList->next;
   \   000035   8882         MOV       DPL,R0
   \   000037   8983         MOV       DPH,R1
   \   000039   12....       LCALL     ??Subroutine147_0 & 0xFFFF
   1926            }
   \                     ??CrossCallReturnLabel_337:
   \   00003C   F9           MOV       R1,A
   \   00003D   E8           MOV       A,R0
   \   00003E   49           ORL       A,R1
   \   00003F   70D5         JNZ       ??ZDO_RegisterForZDOMsg_0
   1927          
   1928            // Add to the list
   1929            pNew = (ZDO_MsgCB_t *)osal_mem_alloc( sizeof ( ZDO_MsgCB_t ) );
   \   000041                ; Setup parameters for call to function osal_mem_alloc
   \   000041   7A05         MOV       R2,#0x5
   \   000043   7B00         MOV       R3,#0x0
   \   000045   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000048   8A..         MOV       ?V4,R2
   \   00004A   8B..         MOV       ?V5,R3
   \   00004C   A8..         MOV       R0,?V4
   \   00004E   A9..         MOV       R1,?V5
   1930            if ( pNew )
   \   000050   EA           MOV       A,R2
   \   000051   49           ORL       A,R1
   \   000052   6034         JZ        ??ZDO_RegisterForZDOMsg_3
   1931            {
   1932              pNew->taskID = taskID;
   \   000054   8A82         MOV       DPL,R2
   \   000056   8B83         MOV       DPH,R3
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   E5..         MOV       A,?V2
   \   00005C   12....       LCALL     ?Subroutine39 & 0xFFFF
   1933              pNew->clusterID = clusterID;
   \                     ??CrossCallReturnLabel_51:
   \   00005F   E5..         MOV       A,?V0
   \   000061   F0           MOVX      @DPTR,A
   \   000062   A3           INC       DPTR
   \   000063   E5..         MOV       A,?V1
   \   000065   F0           MOVX      @DPTR,A
   1934              pNew->next = NULL;
   \   000066   8A82         MOV       DPL,R2
   \   000068   8B83         MOV       DPH,R3
   \   00006A   E4           CLR       A
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   A3           INC       DPTR
   \   00006D   F0           MOVX      @DPTR,A
   1935              if ( zdoMsgCBs )
   \   00006E   90....       MOV       DPTR,#zdoMsgCBs
   \   000071   12....       LCALL     ??Subroutine143_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   000074   EA           MOV       A,R2
   \   000075   4B           ORL       A,R3
   \   000076   6006         JZ        ??ZDO_RegisterForZDOMsg_4
   1936              {
   1937                pLast->next = pNew;
   \   000078   8E82         MOV       DPL,R6
   \   00007A   8F83         MOV       DPH,R7
   \   00007C   8003         SJMP      ??ZDO_RegisterForZDOMsg_5
   1938              }
   1939              else
   1940                zdoMsgCBs = pNew;
   \                     ??ZDO_RegisterForZDOMsg_4:
   \   00007E   90....       MOV       DPTR,#zdoMsgCBs
   \                     ??ZDO_RegisterForZDOMsg_5:
   \   000081   12....       LCALL     ??Subroutine133_0 & 0xFFFF
   1941              return ( ZSuccess );
   \                     ??CrossCallReturnLabel_231:
   \   000084   7900         MOV       R1,#0x0
   \   000086   8002         SJMP      ??ZDO_RegisterForZDOMsg_6
   1942            }
   1943            else
   1944              return ( ZMemError );
   \                     ??ZDO_RegisterForZDOMsg_3:
   \   000088   7910         MOV       R1,#0x10
   \                     ??ZDO_RegisterForZDOMsg_6:
   \   00008A   02....       LJMP      ??Subroutine116_0 & 0xFFFF
   1945          }
   1946          
   1947          /*********************************************************************
   1948           * @fn          ZDO_RemoveRegisteredCB
   1949           *
   1950           * @brief       Call this function if you don't want to receive the
   1951           *              incoming message.
   1952           *
   1953           * @param       taskID - Where the messages are being delivered.
   1954           * @param       clusterID - What message?
   1955           *
   1956           * @return      ZSuccess - successful, ZFailure if not found
   1957           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1958          ZStatus_t ZDO_RemoveRegisteredCB( uint8 taskID, uint16 clusterID )
   \                     ZDO_RemoveRegisteredCB:
   1959          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FC           MOV       R4,A
   \   000009   EB           MOV       A,R3
   \   00000A   FD           MOV       R5,A
   1960            ZDO_MsgCB_t *pList;
   1961            ZDO_MsgCB_t *pLast = NULL;
   \   00000B   7800         MOV       R0,#0x0
   \   00000D   7900         MOV       R1,#0x0
   1962          
   1963            pList = zdoMsgCBs;
   \   00000F   90....       MOV       DPTR,#zdoMsgCBs
   \   000012   8008         SJMP      ??ZDO_RemoveRegisteredCB_0
   1964            while ( pList )
   1965            {
   1966              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   1967              {
   1968                if ( pLast )
   1969                {
   1970                  // remove this one from the linked list
   1971                  pLast->next = pList->next;
   1972                }
   1973                else if ( pList->next )
   1974                {
   1975                  // remove the first one from the linked list
   1976                  zdoMsgCBs = pList->next;
   1977                }
   1978                else
   1979                {
   1980                  // remove the only item from the list
   1981                  zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   1982                }
   1983                osal_mem_free( pList );
   1984                return ( ZSuccess );
   1985              }
   1986              pLast = pList;
   \                     ??ZDO_RemoveRegisteredCB_1:
   \   000014   EA           MOV       A,R2
   \   000015   F8           MOV       R0,A
   \   000016   EB           MOV       A,R3
   \   000017   F9           MOV       R1,A
   1987              pList = pList->next;
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   \                     ??ZDO_RemoveRegisteredCB_0:
   \   00001C   12....       LCALL     ??Subroutine143_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   00001F   EA           MOV       A,R2
   \   000020   4B           ORL       A,R3
   \   000021   6048         JZ        ??ZDO_RemoveRegisteredCB_2
   \   000023   8A82         MOV       DPL,R2
   \   000025   8B83         MOV       DPH,R3
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   6E           XRL       A,R6
   \   00002B   70E7         JNZ       ??ZDO_RemoveRegisteredCB_1
   \   00002D   8A82         MOV       DPL,R2
   \   00002F   8B83         MOV       DPH,R3
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   6C           XRL       A,R4
   \   000036   7003         JNZ       ??ZDO_RemoveRegisteredCB_3
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   6D           XRL       A,R5
   \                     ??ZDO_RemoveRegisteredCB_3:
   \   00003B   70D7         JNZ       ??ZDO_RemoveRegisteredCB_1
   \   00003D   E8           MOV       A,R0
   \   00003E   49           ORL       A,R1
   \   00003F   8A82         MOV       DPL,R2
   \   000041   8B83         MOV       DPH,R3
   \   000043   600D         JZ        ??ZDO_RemoveRegisteredCB_4
   \   000045   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000048   8882         MOV       DPL,R0
   \   00004A   8983         MOV       DPH,R1
   \   00004C   EC           MOV       A,R4
   \   00004D   F0           MOVX      @DPTR,A
   \   00004E   A3           INC       DPTR
   \   00004F   ED           MOV       A,R5
   \   000050   8011         SJMP      ??ZDO_RemoveRegisteredCB_5
   \                     ??ZDO_RemoveRegisteredCB_4:
   \   000052   12....       LCALL     ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000055   90....       MOV       DPTR,#zdoMsgCBs
   \   000058   6006         JZ        ??ZDO_RemoveRegisteredCB_6
   \   00005A   E8           MOV       A,R0
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   A3           INC       DPTR
   \   00005D   E9           MOV       A,R1
   \   00005E   8003         SJMP      ??ZDO_RemoveRegisteredCB_5
   \                     ??ZDO_RemoveRegisteredCB_6:
   \   000060   E4           CLR       A
   \   000061   F0           MOVX      @DPTR,A
   \   000062   A3           INC       DPTR
   \                     ??ZDO_RemoveRegisteredCB_5:
   \   000063   F0           MOVX      @DPTR,A
   \   000064                ; Setup parameters for call to function osal_mem_free
   \   000064   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000067   7900         MOV       R1,#0x0
   \   000069   8002         SJMP      ??ZDO_RemoveRegisteredCB_7
   1988            }
   1989          
   1990            return ( ZFailure );
   \                     ??ZDO_RemoveRegisteredCB_2:
   \   00006B   7901         MOV       R1,#0x1
   \                     ??ZDO_RemoveRegisteredCB_7:
   \   00006D   02....       LJMP      ?Subroutine7 & 0xFFFF
   1991          }
   1992          
   1993          /*********************************************************************
   1994           * @fn          ZDO_SendMsgCBs
   1995           *
   1996           * @brief       This function sends messages to registered tasks.
   1997           *              Local to ZDO and shouldn't be called outside of ZDO.
   1998           *
   1999           * @param       inMsg - incoming message
   2000           *
   2001           * @return      TRUE if sent to at least 1 task, FALSE if not
   2002           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2003          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDO_SendMsgCBs:
   2004          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2005            uint8 ret = FALSE;
   \   000009   75..00       MOV       ?V4,#0x0
   2006            ZDO_MsgCB_t *pList = zdoMsgCBs;
   \   00000C   90....       MOV       DPTR,#zdoMsgCBs
   \   00000F   02....       LJMP      ??ZDO_SendMsgCBs_0 & 0xFFFF
   2007            while ( pList )
   2008            {
   2009              if ( (pList->clusterID == inMsg->clusterID)
   2010                 || ((pList->clusterID == ZDO_ALL_MSGS_CLUSTERID)
   2011                     && ((inMsg->clusterID & ZDO_RESPONSE_BIT) || (inMsg->clusterID == Device_annce))) )
   \                     ??ZDO_SendMsgCBs_1:
   \   000012   85..82       MOV       DPL,?V0
   \   000015   85..83       MOV       DPH,?V1
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   12....       LCALL     ??Subroutine146_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_327:
   \   00001E   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000021   68           XRL       A,R0
   \   000022   7003         JNZ       ??ZDO_SendMsgCBs_2
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   69           XRL       A,R1
   \                     ??ZDO_SendMsgCBs_2:
   \   000027   602C         JZ        ??ZDO_SendMsgCBs_3
   \   000029   85..82       MOV       DPL,?V0
   \   00002C   85..83       MOV       DPH,?V1
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   F4           CPL       A
   \   000034   7003         JNZ       ??ZDO_SendMsgCBs_4
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F4           CPL       A
   \                     ??ZDO_SendMsgCBs_4:
   \   000039   6003         JZ        $+5
   \   00003B   02....       LJMP      ??ZDO_SendMsgCBs_5 & 0xFFFF
   \   00003E   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   5480         ANL       A,#0x80
   \   000045   700E         JNZ       ??ZDO_SendMsgCBs_3
   \   000047   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   00004A   6413         XRL       A,#0x13
   \   00004C   7002         JNZ       ??ZDO_SendMsgCBs_6
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \                     ??ZDO_SendMsgCBs_6:
   \   000050   6003         JZ        $+5
   \   000052   02....       LJMP      ??ZDO_SendMsgCBs_5 & 0xFFFF
   2012              {
   2013                zdoIncomingMsg_t *msgPtr;
   2014          
   2015                // Send the address to the task
   2016                msgPtr = (zdoIncomingMsg_t *)osal_msg_allocate( sizeof( zdoIncomingMsg_t ) + inMsg->asduLen );
   \                     ??ZDO_SendMsgCBs_3:
   \   000055                ; Setup parameters for call to function osal_msg_allocate
   \   000055   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   000058   2417         ADD       A,#0x17
   \   00005A   FA           MOV       R2,A
   \   00005B   E4           CLR       A
   \   00005C   3400         ADDC      A,#0x0
   \   00005E   FB           MOV       R3,A
   \   00005F   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000062   8A..         MOV       ?V2,R2
   \   000064   8B..         MOV       ?V3,R3
   2017                if ( msgPtr )
   \   000066   EA           MOV       A,R2
   \   000067   4B           ORL       A,R3
   \   000068   606E         JZ        ??ZDO_SendMsgCBs_5
   2018                {
   2019                  // copy struct
   2020                  osal_memcpy( msgPtr, inMsg, sizeof( zdoIncomingMsg_t ));
   \   00006A                ; Setup parameters for call to function osal_memcpy
   \   00006A   8E..         MOV       ?V4,R6
   \   00006C   8F..         MOV       ?V5,R7
   \   00006E   75..00       MOV       ?V6,#0x0
   \   000071   78..         MOV       R0,#?V4
   \   000073   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000076   7C17         MOV       R4,#0x17
   \   000078   7D00         MOV       R5,#0x0
   \   00007A   12....       LCALL     ??Subroutine145_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   00007D   12....       LCALL     ?DEALLOC_XSTACK8
   2021          
   2022                  if ( inMsg->asduLen )
   \   000080   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   000083   6036         JZ        ??ZDO_SendMsgCBs_7
   2023                  {
   2024                    msgPtr->asdu = (byte*)(((byte*)msgPtr) + sizeof( zdoIncomingMsg_t ));
   \   000085   E5..         MOV       A,?V2
   \   000087   2417         ADD       A,#0x17
   \   000089   FA           MOV       R2,A
   \   00008A   E4           CLR       A
   \   00008B   35..         ADDC      A,?V3
   \   00008D   FB           MOV       R3,A
   \   00008E   E5..         MOV       A,?V2
   \   000090   2413         ADD       A,#0x13
   \   000092   F582         MOV       DPL,A
   \   000094   E4           CLR       A
   \   000095   35..         ADDC      A,?V3
   \   000097   F583         MOV       DPH,A
   \   000099   EA           MOV       A,R2
   \   00009A   F0           MOVX      @DPTR,A
   \   00009B   A3           INC       DPTR
   \   00009C   EB           MOV       A,R3
   \   00009D   F0           MOVX      @DPTR,A
   2025                    osal_memcpy( msgPtr->asdu, inMsg->asdu, inMsg->asduLen );
   \   00009E                ; Setup parameters for call to function osal_memcpy
   \   00009E   EE           MOV       A,R6
   \   00009F   2413         ADD       A,#0x13
   \   0000A1   12....       LCALL     ??Subroutine144_0 & 0xFFFF
   2026                  }
   \                     ??CrossCallReturnLabel_306:
   \   0000A4   F5..         MOV       ?V4,A
   \   0000A6   A3           INC       DPTR
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   F5..         MOV       ?V5,A
   \   0000AA   78..         MOV       R0,#?V4
   \   0000AC   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000AF   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   0000B2   FC           MOV       R4,A
   \   0000B3   7D00         MOV       R5,#0x0
   \   0000B5   12....       LCALL     ??Subroutine145_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   0000B8   12....       LCALL     ?DEALLOC_XSTACK8
   2027          
   2028                  msgPtr->hdr.event = ZDO_CB_MSG;
   \                     ??ZDO_SendMsgCBs_7:
   \   0000BB   85..82       MOV       DPL,?V2
   \   0000BE   85..83       MOV       DPH,?V3
   \   0000C1   74D3         MOV       A,#-0x2d
   \   0000C3   F0           MOVX      @DPTR,A
   2029                  osal_msg_send( pList->taskID, (uint8 *)msgPtr );
   \   0000C4                ; Setup parameters for call to function osal_msg_send
   \   0000C4   AA..         MOV       R2,?V2
   \   0000C6   AB..         MOV       R3,?V3
   \   0000C8   85..82       MOV       DPL,?V0
   \   0000CB   85..83       MOV       DPH,?V1
   \   0000CE   A3           INC       DPTR
   \   0000CF   A3           INC       DPTR
   \   0000D0   E0           MOVX      A,@DPTR
   \   0000D1   F9           MOV       R1,A
   \   0000D2   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2030                  ret = TRUE;
   \   0000D5   75..01       MOV       ?V4,#0x1
   2031                }
   2032              }
   2033              pList = (ZDO_MsgCB_t *)pList->next;
   \                     ??ZDO_SendMsgCBs_5:
   \   0000D8   85..82       MOV       DPL,?V0
   \   0000DB   85..83       MOV       DPH,?V1
   2034            }
   \                     ??ZDO_SendMsgCBs_0:
   \   0000DE   12....       LCALL     ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   0000E1   E5..         MOV       A,?V0
   \   0000E3   45..         ORL       A,?V1
   \   0000E5   6003         JZ        $+5
   \   0000E7   02....       LJMP      ??ZDO_SendMsgCBs_1 & 0xFFFF
   2035            return ( ret );
   \   0000EA   A9..         MOV       R1,?V4
   \   0000EC   02....       LJMP      ?Subroutine5 & 0xFFFF
   2036          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   EE           MOV       A,R6
   \   000001   2410         ADD       A,#0x10
   \   000003                REQUIRE ??Subroutine144_0
   \   000003                ; // Fall through to label ??Subroutine144_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
   2037          
   2038          /*********************************************************************
   2039           * Incoming message processor
   2040           */
   2041          
   2042          /*********************************************************************
   2043           * @fn          ZDP_IncomingData
   2044           *
   2045           * @brief       This function indicates the transfer of a data PDU (ASDU)
   2046           *              from the APS sub-layer to the ZDO.
   2047           *
   2048           * @param       pData - Incoming Message
   2049           *
   2050           * @return      none
   2051           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2052          void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
   \                     ZDP_IncomingData:
   2053          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV       A,#-0x17
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2054            uint8 x = 0;
   \   00000E   75..00       MOV       ?V0,#0x0
   2055            uint8 handled;
   2056            zdoIncomingMsg_t inMsg;
   2057          
   2058            inMsg.srcAddr.addrMode = Addr16Bit;
   \   000011   740A         MOV       A,#0xa
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   7402         MOV       A,#0x2
   \   000018   12....       LCALL     ?Subroutine24 & 0xFFFF
   2059            inMsg.srcAddr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_30:
   \   00001B   F8           MOV       R0,A
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F9           MOV       R1,A
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   12....       LCALL     ??Subroutine133_0 & 0xFFFF
   2060            inMsg.wasBroadcast = pData->wasBroadcast;
   \                     ??CrossCallReturnLabel_232:
   \   000027   EA           MOV       A,R2
   \   000028   2415         ADD       A,#0x15
   \   00002A   12....       LCALL     ??Subroutine144_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   00002D   C0E0         PUSH      A
   \   00002F   740B         MOV       A,#0xb
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   D0E0         POP       A
   \   000036   12....       LCALL     ??Subroutine136_0 & 0xFFFF
   2061            inMsg.clusterID = pData->clusterId;
   \                     ??CrossCallReturnLabel_255:
   \   000039   12....       LCALL     ??Subroutine146_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   00003C   740C         MOV       A,#0xc
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   12....       LCALL     ??Subroutine133_0 & 0xFFFF
   2062            inMsg.SecurityUse = pData->SecurityUse;
   \                     ??CrossCallReturnLabel_233:
   \   000044   EA           MOV       A,R2
   \   000045   2419         ADD       A,#0x19
   \   000047   12....       LCALL     ??Subroutine144_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   00004A   C0E0         PUSH      A
   \   00004C   740E         MOV       A,#0xe
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   D0E0         POP       A
   \   000053   F0           MOVX      @DPTR,A
   2063          
   2064            inMsg.asduLen = pData->cmd.DataLength-1;
   \   000054   EA           MOV       A,R2
   \   000055   2420         ADD       A,#0x20
   \   000057   12....       LCALL     ??Subroutine144_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   00005A   14           DEC       A
   \   00005B   C0E0         PUSH      A
   \   00005D   7410         MOV       A,#0x10
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   D0E0         POP       A
   \   000064   F0           MOVX      @DPTR,A
   2065            inMsg.asdu = pData->cmd.Data+1;
   \   000065   EA           MOV       A,R2
   \   000066   2422         ADD       A,#0x22
   \   000068   F8           MOV       R0,A
   \   000069   E4           CLR       A
   \   00006A   3F           ADDC      A,R7
   \   00006B   F9           MOV       R1,A
   \   00006C   8882         MOV       DPL,R0
   \   00006E   F583         MOV       DPH,A
   \   000070   E0           MOVX      A,@DPTR
   \   000071   2401         ADD       A,#0x1
   \   000073   FA           MOV       R2,A
   \   000074   A3           INC       DPTR
   \   000075   E0           MOVX      A,@DPTR
   \   000076   3400         ADDC      A,#0x0
   \   000078   FB           MOV       R3,A
   \   000079   7413         MOV       A,#0x13
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   EA           MOV       A,R2
   \   00007F   F0           MOVX      @DPTR,A
   \   000080   A3           INC       DPTR
   \   000081   EB           MOV       A,R3
   \   000082   12....       LCALL     ?Subroutine109 & 0xFFFF
   2066            inMsg.TransSeq = pData->cmd.Data[0];
   \                     ??CrossCallReturnLabel_200:
   \   000085   12....       LCALL     ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000088   E0           MOVX      A,@DPTR
   \   000089   C0E0         PUSH      A
   \   00008B   740F         MOV       A,#0xf
   \   00008D   12....       LCALL     ?XSTACK_DISP0_8
   \   000090   D0E0         POP       A
   \   000092   F0           MOVX      @DPTR,A
   2067            inMsg.macDestAddr = pData->macDestAddr;
   \   000093   EE           MOV       A,R6
   \   000094   2412         ADD       A,#0x12
   \   000096   F582         MOV       DPL,A
   \   000098   E4           CLR       A
   \   000099   3F           ADDC      A,R7
   \   00009A   F583         MOV       DPH,A
   \   00009C   12....       LCALL     ??Subroutine146_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   00009F   7411         MOV       A,#0x11
   \   0000A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A4   12....       LCALL     ??Subroutine133_0 & 0xFFFF
   2068            inMsg.macSrcAddr = pData->macSrcAddr;
   \                     ??CrossCallReturnLabel_234:
   \   0000A7   EE           MOV       A,R6
   \   0000A8   2424         ADD       A,#0x24
   \   0000AA   F582         MOV       DPL,A
   \   0000AC   E4           CLR       A
   \   0000AD   3F           ADDC      A,R7
   \   0000AE   F583         MOV       DPH,A
   \   0000B0   12....       LCALL     ??Subroutine146_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   0000B3   7415         MOV       A,#0x15
   \   0000B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B8   12....       LCALL     ??Subroutine133_0 & 0xFFFF
   2069          
   2070            handled = ZDO_SendMsgCBs( &inMsg );
   \                     ??CrossCallReturnLabel_235:
   \   0000BB                ; Setup parameters for call to function ZDO_SendMsgCBs
   \   0000BB   AA..         MOV       R2,?XSP + 0
   \   0000BD   AB..         MOV       R3,?XSP + 1
   \   0000BF   12....       LCALL     `??ZDO_SendMsgCBs::?relay`; Banked call to: ZDO_SendMsgCBs
   \   0000C2   E9           MOV       A,R1
   \   0000C3   F5..         MOV       ?V1,A
   2071          
   2072          #if (defined MT_ZDO_CB_FUNC)
   2073          #if !defined MT_TASK
   2074            if (zgZdoDirectCB)
   \   0000C5   90....       MOV       DPTR,#zgZdoDirectCB
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   600F         JZ        ??ZDP_IncomingData_0
   2075          #endif
   2076            {
   2077              MT_ZdoDirectCB( pData, &inMsg );
   \   0000CB                ; Setup parameters for call to function MT_ZdoDirectCB
   \   0000CB   AC..         MOV       R4,?XSP + 0
   \   0000CD   AD..         MOV       R5,?XSP + 1
   \   0000CF   EE           MOV       A,R6
   \   0000D0   FA           MOV       R2,A
   \   0000D1   EF           MOV       A,R7
   \   0000D2   FB           MOV       R3,A
   \   0000D3   12....       LCALL     `??MT_ZdoDirectCB::?relay`; Banked call to: MT_ZdoDirectCB
   \   0000D6   8002         SJMP      ??ZDP_IncomingData_0
   2078            }
   2079          #endif
   2080          
   2081            while ( zdpMsgProcs[x].clusterID != 0xFFFF )
   2082            {
   2083              if ( zdpMsgProcs[x].clusterID == inMsg.clusterID )
   2084              {
   2085                zdpMsgProcs[x].pFn( &inMsg );
   2086                return;
   2087              }
   2088              x++;
   \                     ??ZDP_IncomingData_1:
   \   0000D8   05..         INC       ?V0
   \                     ??ZDP_IncomingData_0:
   \   0000DA   E5..         MOV       A,?V0
   \   0000DC   F5..         MOV       ?V2,A
   \   0000DE   75..00       MOV       ?V3,#0x0
   \   0000E1   7402         MOV       A,#0x2
   \   0000E3   78..         MOV       R0,#?V2
   \   0000E5   12....       LCALL     ?S_SHL
   \   0000E8   74..         MOV       A,#zdpMsgProcs & 0xff
   \   0000EA   25..         ADD       A,?V2
   \   0000EC   F582         MOV       DPL,A
   \   0000EE   74..         MOV       A,#(zdpMsgProcs >> 8) & 0xff
   \   0000F0   35..         ADDC      A,?V3
   \   0000F2   F583         MOV       DPH,A
   \   0000F4   E4           CLR       A
   \   0000F5   93           MOVC      A,@A+DPTR
   \   0000F6   F8           MOV       R0,A
   \   0000F7   7401         MOV       A,#0x1
   \   0000F9   93           MOVC      A,@A+DPTR
   \   0000FA   F9           MOV       R1,A
   \   0000FB   74FF         MOV       A,#-0x1
   \   0000FD   68           XRL       A,R0
   \   0000FE   7003         JNZ       ??ZDP_IncomingData_2
   \   000100   74FF         MOV       A,#-0x1
   \   000102   69           XRL       A,R1
   \                     ??ZDP_IncomingData_2:
   \   000103   603F         JZ        ??ZDP_IncomingData_3
   \   000105   E4           CLR       A
   \   000106   93           MOVC      A,@A+DPTR
   \   000107   F8           MOV       R0,A
   \   000108   7401         MOV       A,#0x1
   \   00010A   93           MOVC      A,@A+DPTR
   \   00010B   F9           MOV       R1,A
   \   00010C   740C         MOV       A,#0xc
   \   00010E   12....       LCALL     ?XSTACK_DISP0_8
   \   000111   E0           MOVX      A,@DPTR
   \   000112   68           XRL       A,R0
   \   000113   7003         JNZ       ??ZDP_IncomingData_4
   \   000115   A3           INC       DPTR
   \   000116   E0           MOVX      A,@DPTR
   \   000117   69           XRL       A,R1
   \                     ??ZDP_IncomingData_4:
   \   000118   70BE         JNZ       ??ZDP_IncomingData_1
   \   00011A                ; Setup parameters for indirect call
   \   00011A   AA..         MOV       R2,?XSP + 0
   \   00011C   AB..         MOV       R3,?XSP + 1
   \   00011E   75..00       MOV       ?V1,#0x0
   \   000121   7402         MOV       A,#0x2
   \   000123   78..         MOV       R0,#?V0
   \   000125   12....       LCALL     ?S_SHL
   \   000128   74..         MOV       A,#(zdpMsgProcs + 2) & 0xff
   \   00012A   25..         ADD       A,?V0
   \   00012C   F582         MOV       DPL,A
   \   00012E   74..         MOV       A,#((zdpMsgProcs + 2) >> 8) & 0xff
   \   000130   35..         ADDC      A,?V1
   \   000132   F583         MOV       DPH,A
   \   000134   E4           CLR       A
   \   000135   93           MOVC      A,@A+DPTR
   \   000136   C0E0         PUSH      A
   \   000138   7401         MOV       A,#0x1
   \   00013A   93           MOVC      A,@A+DPTR
   \   00013B   F583         MOV       DPH,A
   \   00013D   D082         POP       DPL
   \   00013F   12....       LCALL     ?CALL_IND
   \   000142   800B         SJMP      ??ZDP_IncomingData_5
   2089            }
   2090          
   2091            // Handle unhandled messages
   2092            if ( !handled )
   \                     ??ZDP_IncomingData_3:
   \   000144   E5..         MOV       A,?V1
   \   000146   7007         JNZ       ??ZDP_IncomingData_5
   2093              ZDApp_InMsgCB( &inMsg );
   \   000148                ; Setup parameters for call to function ZDApp_InMsgCB
   \   000148   AA..         MOV       R2,?XSP + 0
   \   00014A   AB..         MOV       R3,?XSP + 1
   \   00014C   12....       LCALL     `??ZDApp_InMsgCB::?relay`; Banked call to: ZDApp_InMsgCB
   2094          }
   \                     ??ZDP_IncomingData_5:
   \   00014F   7417         MOV       A,#0x17
   \   000151   02....       LJMP      ??Subroutine114_0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDP_TmpBuf>`:
   \   000000   ....         DW ZDP_Buf + 1H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_a:
   \   000000   0A000000     DD 10
   2095          
   2096          /*********************************************************************
   2097          *********************************************************************/
   2098          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     14   ZDO_RegisterForZDOMsg
        0     14   -> osal_mem_alloc
      0      9   ZDO_RemoveRegisteredCB
        0      9   -> osal_mem_free
      0     54   ZDO_SendMsgCBs
        0     19   -> osal_memcpy
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      1     26   ZDP_BindUnbindReq
        0     18   -> fillAndSend
        0     16   -> sAddrExtCpy
        1     16   -> sAddrExtCpy
      1     22   ZDP_DeviceAnnce
        0     21   -> fillAndSend
        0     19   -> sAddrExtCpy
      1     26   ZDP_EPRsp
        0     18   -> fillAndSend
        0     19   -> osal_memcpy
      1     29   ZDP_EndDeviceBindReq
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_GetShortAddr
        0     20   -> fillAndSend
        0     18   -> sAddrExtCpy
      1     16   ZDP_GenericRsp
        0     12   -> fillAndSend
      1     21   ZDP_IEEEAddrReq
        0     21   -> fillAndSend
      1     35   ZDP_IncomingData
        0     35   -> MT_ZdoDirectCB
        0     35   -> ZDApp_InMsgCB
        0     35   -> ZDO_SendMsgCBs
      1     24   ZDP_MatchDescReq
        0     16   -> fillAndSend
      1     28   ZDP_MgmtBindRsp
        0     23   -> fillAndSend
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     21   -> sAddrExtCpy
      1     15   ZDP_MgmtDirectJoinReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      0     16   ZDP_MgmtLeaveReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      1     27   ZDP_MgmtLqiRsp
        0     22   -> fillAndSend
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     20   -> sAddrExtCpy
      1     20   ZDP_MgmtNwkDiscReq
        0     14   -> fillAndSend
        0     16   -> osal_buffer_uint32
      1     28   ZDP_MgmtNwkDiscRsp
        0     23   -> fillAndSend
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     21   -> sAddrExtCpy
      1     35   ZDP_MgmtNwkUpdateNotify
        0     21   -> fillAndSend
        0     23   -> osal_buffer_uint32
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     22   -> osal_memcpy
      1     24   ZDP_MgmtNwkUpdateReq
        0     16   -> fillAndSend
        0     18   -> osal_buffer_uint32
      1     23   ZDP_MgmtPermitJoinReq
        0     21   -> NLME_GetShortAddr
        0     23   -> fillAndSend
      1     26   ZDP_MgmtRtgRsp
        0     21   -> fillAndSend
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
      1     13   ZDP_NWKAddrOfInterestReq
        0     12   -> fillAndSend
      1     14   ZDP_NodeDescMsg
        0     12   -> fillAndSend
      1     23   ZDP_NwkAddrReq
        0     23   -> fillAndSend
        0     21   -> sAddrExtCmp
        0     21   -> sAddrExtCpy
      1     31   ZDP_ParentAnnce
        0     22   -> ZDApp_SetParentAnnceTimer
        0     24   -> fillAndSend
        0     26   -> osal_start_timerEx
        0     22   -> sAddrExtCpy
      1     14   ZDP_PowerDescMsg
        0     12   -> fillAndSend
      1     19   ZDP_SendData
        0     14   -> fillAndSend
      1     21   ZDP_ServerDiscReq
        0     21   -> fillAndSend
      1     17   ZDP_ServerDiscRsp
        0     13   -> fillAndSend
      1     18   ZDP_SimpleDescMsg
        0     18   -> fillAndSend
      1     13   ZDP_SimpleDescReq
        0     12   -> fillAndSend
      1     25   ZDP_UserDescRsp
        0     21   -> fillAndSend
        0     22   -> osal_memcpy
      1     20   ZDP_UserDescSet
        0     17   -> fillAndSend
        0     18   -> osal_memcpy
        0     15   -> osal_memset
      1     79   fillAndSend
        0     35   -> AF_DataRequest
        0     26   -> osal_memset
      1     44   zdpProcessAddrReq
        0     42   -> AddrMgrEntryGet
        0     42   -> AssocGetWithExt
        0     42   -> AssocGetWithShort
        0     42   -> AssocMakeList
        0     44   -> fillAndSend
        0     42   -> osal_mem_free
        0     42   -> osal_memset
        0     42   -> sAddrExtCmp
        0     42   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDP_TmpBuf>
       8  ??Subroutine112_0
       3  ??Subroutine113_0
       3  ??Subroutine114_0
       5  ??Subroutine115_0
       5  ??Subroutine116_0
       2  ??Subroutine117_0
       8  ??Subroutine118_0
       2  ??Subroutine119_0
       9  ??Subroutine120_0
       9  ??Subroutine121_0
       6  ??Subroutine122_0
       8  ??Subroutine123_0
       5  ??Subroutine124_0
       6  ??Subroutine125_0
       5  ??Subroutine126_0
       7  ??Subroutine127_0
       4  ??Subroutine128_0
      13  ??Subroutine129_0
       8  ??Subroutine130_0
       6  ??Subroutine131_0
       8  ??Subroutine132_0
       6  ??Subroutine133_0
       6  ??Subroutine134_0
       6  ??Subroutine135_0
       4  ??Subroutine136_0
       1  ??Subroutine137_0
       4  ??Subroutine138_0
       6  ??Subroutine139_0
       4  ??Subroutine140_0
       5  ??Subroutine141_0
       6  ??Subroutine142_0
       6  ??Subroutine143_0
       8  ??Subroutine144_0
       6  ??Subroutine145_0
       4  ??Subroutine146_0
       5  ??Subroutine147_0
       3  ?Subroutine0
      10  ?Subroutine1
      39  ?Subroutine10
      11  ?Subroutine100
      10  ?Subroutine101
      10  ?Subroutine102
      14  ?Subroutine103
       1  ?Subroutine104
       9  ?Subroutine105
       3  ?Subroutine106
       5  ?Subroutine107
       8  ?Subroutine108
       6  ?Subroutine109
      15  ?Subroutine11
       9  ?Subroutine110
       8  ?Subroutine111
      35  ?Subroutine12
      35  ?Subroutine13
       7  ?Subroutine14
      23  ?Subroutine15
       8  ?Subroutine16
       6  ?Subroutine17
      12  ?Subroutine18
       5  ?Subroutine19
      11  ?Subroutine2
      14  ?Subroutine20
       4  ?Subroutine21
       6  ?Subroutine22
       7  ?Subroutine23
       7  ?Subroutine24
       1  ?Subroutine25
       8  ?Subroutine26
       1  ?Subroutine27
       6  ?Subroutine28
      11  ?Subroutine29
       8  ?Subroutine3
       3  ?Subroutine30
       4  ?Subroutine31
       6  ?Subroutine32
       2  ?Subroutine33
       8  ?Subroutine34
       9  ?Subroutine35
      10  ?Subroutine36
       9  ?Subroutine37
      10  ?Subroutine38
       4  ?Subroutine39
       2  ?Subroutine4
      17  ?Subroutine40
       8  ?Subroutine41
       3  ?Subroutine42
       9  ?Subroutine43
       3  ?Subroutine44
       2  ?Subroutine45
       3  ?Subroutine46
      12  ?Subroutine47
       3  ?Subroutine48
      12  ?Subroutine49
       5  ?Subroutine5
      13  ?Subroutine50
      10  ?Subroutine51
       5  ?Subroutine52
       6  ?Subroutine53
      14  ?Subroutine54
       3  ?Subroutine55
       4  ?Subroutine56
       5  ?Subroutine57
       5  ?Subroutine58
       9  ?Subroutine59
       5  ?Subroutine6
       5  ?Subroutine60
       2  ?Subroutine61
      12  ?Subroutine62
       7  ?Subroutine63
       6  ?Subroutine64
       4  ?Subroutine65
       4  ?Subroutine66
       4  ?Subroutine67
       3  ?Subroutine68
      10  ?Subroutine69
       5  ?Subroutine7
       4  ?Subroutine70
       8  ?Subroutine71
       5  ?Subroutine72
      12  ?Subroutine73
       2  ?Subroutine74
       5  ?Subroutine75
       5  ?Subroutine76
       4  ?Subroutine77
      10  ?Subroutine78
       8  ?Subroutine79
       8  ?Subroutine8
      12  ?Subroutine80
       3  ?Subroutine81
       9  ?Subroutine82
       1  ?Subroutine83
       5  ?Subroutine84
      13  ?Subroutine85
      11  ?Subroutine86
       5  ?Subroutine87
       6  ?Subroutine88
       4  ?Subroutine89
      10  ?Subroutine9
       4  ?Subroutine90
      11  ?Subroutine91
       6  ?Subroutine92
      16  ?Subroutine93
       9  ?Subroutine94
       5  ?Subroutine95
       5  ?Subroutine96
       9  ?Subroutine97
       5  ?Subroutine98
       9  ?Subroutine99
     141  ZDO_RegisterForZDOMsg
     112  ZDO_RemoveRegisteredCB
     239  ZDO_SendMsgCBs
       1  ZDP_AF_ENDPOINT
     206  ZDP_BindUnbindReq
      80  ZDP_Buf
      74  ZDP_DeviceAnnce
     160  ZDP_EPRsp
     220  ZDP_EndDeviceBindReq
      85  ZDP_GenericRsp
      68  ZDP_IEEEAddrReq
     340  ZDP_IncomingData
     237  ZDP_MatchDescReq
     265  ZDP_MgmtBindRsp
      17  ZDP_MgmtDirectJoinReq
      44  ZDP_MgmtLeaveReq
     337  ZDP_MgmtLqiRsp
      54  ZDP_MgmtNwkDiscReq
     295  ZDP_MgmtNwkDiscRsp
     195  ZDP_MgmtNwkUpdateNotify
     114  ZDP_MgmtNwkUpdateReq
     167  ZDP_MgmtPermitJoinReq
     289  ZDP_MgmtRtgRsp
      25  ZDP_NWKAddrOfInterestReq
     211  ZDP_NodeDescMsg
      99  ZDP_NwkAddrReq
     272  ZDP_ParentAnnce
      87  ZDP_PowerDescMsg
     106  ZDP_SendData
      75  ZDP_ServerDiscReq
      99  ZDP_ServerDiscRsp
     345  ZDP_SimpleDescMsg
      27  ZDP_SimpleDescReq
       2  ZDP_TmpBuf
       1  ZDP_TransID
       1  ZDP_TxOptions
     145  ZDP_UserDescRsp
     107  ZDP_UserDescSet
       4  __Constant_a
       1  childIndex
     160  fillAndSend
       2  zdoMsgCBs
      92  zdpMsgProcs
     762  zdpProcessAddrReq
     210  -- Other

 
 7 276 bytes in segment BANKED_CODE
   210 bytes in segment BANK_RELAYS
    93 bytes in segment CODE_C
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
     4 bytes in segment XDATA_ROM_C
    85 bytes in segment XDATA_Z
 
   305 bytes of CODE     memory
     0 bytes of CONST    memory (+ 4 bytes shared)
 7 276 bytes of HUGECODE memory
    87 bytes of XDATA    memory

Errors: none
Warnings: none
