###############################################################################
#
# IAR C/C++ Compiler V10.40.1.7397 for 8051               01/May/2021  16:40:08
# Copyright 2004-2021 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\Source\OSAL_ZNP.c
#    Command line       =  
#        -f C:\Users\asus\AppData\Local\Temp\EW2470.tmp ("E:\Texas
#        Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\Source\OSAL_ZNP.c" -D
#        BDB_FINDING_BINDING_CAPABILITY_ENABLED=0 -D TC_LINKKEY_JOIN -D
#        HAL_UART_DMA_RX_MAX=128 -D MAXMEMHEAP=2765 -D NWK_MAX_DEVICE_LIST=10
#        -D ZDSECMGR_TC_DEVICE_MAX=30 -D DISABLE_GREENPOWER_BASIC_PROXY -D
#        FEATURE_SYSTEM_STATS -D MT_GP_CB_FUNC -D ASSERT_RESET -D FAKE_CRC_SHDW
#        -lC "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-with-SBL\List" -lA
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-with-SBL\List"
#        --diag_suppress Pe001,Pa010 -o "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-with-SBL\Obj" -e --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_GP_CB_FUNC -DMT_APP_FUNC -DMT_APP_CNF_FUNC
#        -DZNP_ALT) -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg" -I
#        "E:\Texas Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\Source\" -I "E:\Texas
#        Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\..\Source\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Utilities\BootLoad\Source\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\gp\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\bdb\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  English_USA.1252
#    List file          =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-with-SBL\List\OSAL_ZNP.lst
#    Object file        =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-with-SBL\Obj\OSAL_ZNP.r51
#
###############################################################################

E:\Texas Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\Source\OSAL_ZNP.c
      1          /**************************************************************************************************
      2            Filename:       OSAL_ZNP.c
      3            Revised:        $Date: 2014-11-06 23:59:26 -0800 (Thu, 06 Nov 2014) $
      4            Revision:       $Revision: 41038 $
      5          
      6            Description:    This file is the Application-specific mandatory OSAL file.
      7          
      8          
      9            Copyright 2009-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com. 
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "ZComDef.h"
     45          #include "hal_drivers.h"
     46          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     47          #include "OSAL.h"
     48          #include "OSAL_Clock.h"
     49          #include "OSAL_PwrMgr.h"
     50          #include "OSAL_Tasks.h"
     51          #include "hal_board.h"
     52          #include "MT.h"
     53          #include "MT_TASK.h"
     54          #if defined ( MT_SYS_JAMMER_FEATURE )
     55            #include "MT_SYS.h"
     56          #endif
     57          
     58          #include "nwk.h"
     59          #include "APS.h"
     60          #include "ZDApp.h"
     61          #if defined ( ZIGBEE_FREQ_AGILITY ) || defined ( ZIGBEE_PANID_CONFLICT )
     62          #include "ZDNwkMgr.h"
     63          #endif
     64          #if defined ( ZIGBEE_FRAGMENTATION )
     65          #include "aps_frag.h"
     66          #endif
     67          #if defined ( INTER_PAN )
     68          #include "stub_aps.h"
     69          #endif
     70          #include "sapi.h"
     71          #include "znp_app.h"
     72          #if defined ( ZCL_KEY_ESTABLISH )
     73            #include "zcl_key_establish.h"
     74          #endif
     75          
     76          #if defined ( INTER_PAN )
     77            #include "stub_aps.h"
     78          #if defined ( BDB_TL_INITIATOR )
     79            #include "bdb_touchlink_initiator.h"
     80          #endif // BDB_TL_INITIATOR
     81          #if defined ( BDB_TL_TARGET )
     82            #include "bdb_touchlink_target.h"
     83          #endif // BDB_TL_TARGET
     84          #endif // INTER_PAN
     85          
     86          
     87          #include "bdb_interface.h"
     88          #if (ZG_BUILD_RTR_TYPE)
     89            #include "gp_common.h"
     90          #endif
     91          
     92          /*********************************************************************
     93           * GLOBAL VARIABLES
     94           */
     95          
     96          // The order in this table must be identical to the task initialization calls below in osalInitTask.

   \                                 In  segment XDATA_ROM_C, align 1
     97          const pTaskEventHandlerFn tasksArr[] = {
   \                     tasksArr:
   \   000000   ....         DW `??znpEventLoop::?relay`
   \   000002   ....         DW `??macEventLoop::?relay`
   \   000004   ....         DW `??nwk_event_loop::?relay`
   \   000006   ....         DW `??gp_event_loop::?relay`
   \   000008   ....         DW `??APS_event_loop::?relay`
   \   00000A   ....         DW `??APSF_ProcessEvent::?relay`
   \   00000C   ....         DW `??ZDApp_event_loop::?relay`
   \   00000E   ....         DW `??ZDNwkMgr_event_loop::?relay`
   \   000010   ....         DW `??StubAPS_ProcessEvent::?relay`
   \   000012   ....         DW `??bdb_event_loop::?relay`
   \   000014   ....         DW `??SAPI_ProcessEvent::?relay`
   \   000016   ....         DW `??Hal_ProcessEvent::?relay`
     98            znpEventLoop,
     99            macEventLoop,
    100            nwk_event_loop,
    101          #if (ZG_BUILD_RTR_TYPE)
    102            gp_event_loop,
    103          #endif
    104            APS_event_loop,
    105          #if defined ( ZIGBEE_FRAGMENTATION )
    106            APSF_ProcessEvent,
    107          #endif
    108            ZDApp_event_loop,
    109          #if defined ( ZIGBEE_FREQ_AGILITY ) || defined ( ZIGBEE_PANID_CONFLICT )
    110            ZDNwkMgr_event_loop,
    111          #endif
    112          #if defined( INTER_PAN )
    113            StubAPS_ProcessEvent,
    114          #endif
    115            // Added to include TouchLink initiator functionality
    116            #if defined ( BDB_TL_INITIATOR )
    117              touchLinkInitiator_event_loop,
    118            #endif
    119            // Added to include TouchLink target functionality
    120            #if defined ( BDB_TL_TARGET )
    121              touchLinkTarget_event_loop,
    122            #endif
    123            bdb_event_loop,    
    124            SAPI_ProcessEvent,
    125          #if defined ( ZCL_KEY_ESTABLISH )
    126            zclKE_ProcessEvent,
    127          #endif
    128            Hal_ProcessEvent,
    129          #if defined ( MT_SYS_JAMMER_FEATURE )
    130            jammerEventLoop,
    131          #endif
    132          };
    133          

   \                                 In  segment XDATA_ROM_C, align 1
    134          const uint8 tasksCnt = sizeof( tasksArr ) / sizeof( tasksArr[0] );
   \                     tasksCnt:
   \   000000   0C           DB 12

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          uint16 *tasksEvents;
   \                     tasksEvents:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    136          
    137          /*********************************************************************
    138           * FUNCTIONS
    139           *********************************************************************/
    140          
    141          void osal_start_znp(void);
    142          static void osal_run_task(uint8 idx);
    143          
    144          /*********************************************************************
    145           * @fn      osalInitTasks
    146           *
    147           * @brief   This function invokes the initialization function for each task.
    148           *
    149           * @param   void
    150           *
    151           * @return  none
    152           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    153          void osalInitTasks( void )
   \                     osalInitTasks:
    154          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    155            uint8 taskID = 0;
    156          
    157            tasksEvents = (uint16 *)osal_mem_alloc( sizeof( uint16 ) * tasksCnt);
   \   000004                ; Setup parameters for call to function osal_mem_alloc
   \   000004   7A18         MOV       R2,#0x18
   \   000006   7B00         MOV       R3,#0x0
   \   000008   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00000B   90....       MOV       DPTR,#tasksEvents
   \   00000E   EA           MOV       A,R2
   \   00000F   F0           MOVX      @DPTR,A
   \   000010   A3           INC       DPTR
   \   000011   EB           MOV       A,R3
   \   000012   F0           MOVX      @DPTR,A
    158            osal_memset( tasksEvents, 0, (sizeof( uint16 ) * tasksCnt));
   \   000013                ; Setup parameters for call to function osal_memset
   \   000013   7C18         MOV       R4,#0x18
   \   000015   7D00         MOV       R5,#0x0
   \   000017   7900         MOV       R1,#0x0
   \   000019   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    159          
    160            znpInit( taskID++ );
   \   00001C                ; Setup parameters for call to function znpInit
   \   00001C   7900         MOV       R1,#0x0
   \   00001E   12....       LCALL     `??znpInit::?relay`; Banked call to: znpInit
    161            macTaskInit( taskID++ );
   \   000021                ; Setup parameters for call to function macTaskInit
   \   000021   7901         MOV       R1,#0x1
   \   000023   12....       LCALL     `??macTaskInit::?relay`; Banked call to: macTaskInit
    162            nwk_init( taskID++ );
   \   000026                ; Setup parameters for call to function nwk_init
   \   000026   7902         MOV       R1,#0x2
   \   000028   12....       LCALL     `??nwk_init::?relay`; Banked call to: nwk_init
    163          #if (ZG_BUILD_RTR_TYPE)
    164            gp_Init( taskID++ );
   \   00002B                ; Setup parameters for call to function gp_Init
   \   00002B   7903         MOV       R1,#0x3
   \   00002D   12....       LCALL     `??gp_Init::?relay`; Banked call to: gp_Init
    165          #endif
    166            APS_Init( taskID++ );
   \   000030                ; Setup parameters for call to function APS_Init
   \   000030   7904         MOV       R1,#0x4
   \   000032   12....       LCALL     `??APS_Init::?relay`; Banked call to: APS_Init
    167          #if defined ( ZIGBEE_FRAGMENTATION )
    168            APSF_Init( taskID++ );
   \   000035                ; Setup parameters for call to function APSF_Init
   \   000035   7905         MOV       R1,#0x5
   \   000037   12....       LCALL     `??APSF_Init::?relay`; Banked call to: APSF_Init
    169          #endif
    170            ZDApp_Init( taskID++ );
   \   00003A                ; Setup parameters for call to function ZDApp_Init
   \   00003A   7906         MOV       R1,#0x6
   \   00003C   12....       LCALL     `??ZDApp_Init::?relay`; Banked call to: ZDApp_Init
    171          #if defined ( ZIGBEE_FREQ_AGILITY ) || defined ( ZIGBEE_PANID_CONFLICT )
    172            ZDNwkMgr_Init( taskID++ );
   \   00003F                ; Setup parameters for call to function ZDNwkMgr_Init
   \   00003F   7907         MOV       R1,#0x7
   \   000041   12....       LCALL     `??ZDNwkMgr_Init::?relay`; Banked call to: ZDNwkMgr_Init
    173          #endif
    174          #if defined( INTER_PAN )
    175            StubAPS_Init( taskID++ );
   \   000044                ; Setup parameters for call to function StubAPS_Init
   \   000044   7908         MOV       R1,#0x8
   \   000046   12....       LCALL     `??StubAPS_Init::?relay`; Banked call to: StubAPS_Init
    176          #endif
    177            // Added to include TouchLink initiator functionality 
    178            #if defined( BDB_TL_INITIATOR )
    179              touchLinkInitiator_Init( taskID++ );
    180            #endif
    181            // Added to include TouchLink target functionality 
    182            #if defined ( BDB_TL_TARGET )
    183              touchLinkTarget_Init( taskID++ );
    184            #endif
    185              bdb_Init( taskID++ );
   \   000049                ; Setup parameters for call to function bdb_Init
   \   000049   7909         MOV       R1,#0x9
   \   00004B   12....       LCALL     `??bdb_Init::?relay`; Banked call to: bdb_Init
    186            SAPI_Init( taskID++ );
   \   00004E                ; Setup parameters for call to function SAPI_Init
   \   00004E   790A         MOV       R1,#0xa
   \   000050   12....       LCALL     `??SAPI_Init::?relay`; Banked call to: SAPI_Init
    187          #if defined ( ZCL_KEY_ESTABLISH )
    188            zclKE_Init( taskID++ );
    189          #endif
    190            Hal_Init( taskID++ );
   \   000053                ; Setup parameters for call to function Hal_Init
   \   000053   790B         MOV       R1,#0xb
   \   000055   12....       LCALL     `??Hal_Init::?relay`; Banked call to: Hal_Init
    191          #if defined ( MT_SYS_JAMMER_FEATURE )
    192            jammerInit( taskID++ );
    193          #endif
    194          }
   \   000058   D083         POP       DPH
   \   00005A   D082         POP       DPL
   \   00005C   02....       LJMP      ?BRET
    195          
    196          /*********************************************************************
    197           * @fn      osal_start_znp
    198           *
    199           * @brief
    200           *
    201           *   This function is the main loop function of the task system.  It
    202           *   will look through all task events and call the task_event_processor()
    203           *   function for the task with the event.  If there are no events (for
    204           *   all tasks), this function puts the processor into Sleep.
    205           *   This Function doesn't return.
    206           *
    207           * @param   void
    208           *
    209           * @return  none
    210           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    211          void osal_start_znp( void )
   \                     osal_start_znp:
    212          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   801B         SJMP      ??osal_start_znp_0
    213          #if !defined ( ZBIT ) && !defined ( UBIT )
    214            for(;;)  // Forever Loop
    215          #endif
    216            {
    217          #if defined( POWER_SAVING )
    218              uint8 busy = FALSE;
    219          #endif
    220              uint8 idx;
    221          
    222          #ifndef HAL_BOARD_CC2538
    223              osalTimeUpdate();
    224          #endif
    225              Hal_ProcessPoll();
    226          
    227              for (idx = 1; idx < tasksCnt; idx++)
   \                     ??osal_start_znp_1:
   \   000006   09           INC       R1
   \   000007   E9           MOV       A,R1
   \   000008   C3           CLR       C
   \   000009   940C         SUBB      A,#0xc
   \   00000B   401C         JC        ??osal_start_znp_2
    228              {
    229                if (tasksEvents[idx])
    230                {
    231                  osal_run_task(idx);
    232          #if defined( POWER_SAVING )
    233                  busy = TRUE;
    234          #endif
    235                  break;
    236                }
    237              }
    238          
    239              if (tasksEvents[0])  // Always run the ZNP task.
   \                     ??osal_start_znp_3:
   \   00000D   90....       MOV       DPTR,#tasksEvents
   \   000010   12....       LCALL     ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F8           MOV       R0,A
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F9           MOV       R1,A
   \   000018   E8           MOV       A,R0
   \   000019   49           ORL       A,R1
   \   00001A   6005         JZ        ??osal_start_znp_0
    240              {
    241                osal_run_task(0);
   \   00001C                ; Setup parameters for call to function osal_run_task
   \   00001C   7900         MOV       R1,#0x0
   \   00001E   12....       LCALL     `??osal_run_task::?relay`; Banked call to: osal_run_task
    242          #if defined( POWER_SAVING )
    243                busy = TRUE;
    244          #endif
    245              }
   \                     ??osal_start_znp_0:
   \   000021                ; Setup parameters for call to function osalTimeUpdate
   \   000021   12....       LCALL     `??osalTimeUpdate::?relay`; Banked call to: osalTimeUpdate
   \   000024                ; Setup parameters for call to function Hal_ProcessPoll
   \   000024   12....       LCALL     `??Hal_ProcessPoll::?relay`; Banked call to: Hal_ProcessPoll
   \   000027   7901         MOV       R1,#0x1
   \                     ??osal_start_znp_2:
   \   000029   E9           MOV       A,R1
   \   00002A   25E0         ADD       A,0xE0 /* A   */
   \   00002C   FA           MOV       R2,A
   \   00002D   E4           CLR       A
   \   00002E   33           RLC       A
   \   00002F   FB           MOV       R3,A
   \   000030   90....       MOV       DPTR,#tasksEvents
   \   000033   E0           MOVX      A,@DPTR
   \   000034   2A           ADD       A,R2
   \   000035   F8           MOV       R0,A
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   3B           ADDC      A,R3
   \   000039   8882         MOV       DPL,R0
   \   00003B   F583         MOV       DPH,A
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   FA           MOV       R2,A
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   FB           MOV       R3,A
   \   000042   EA           MOV       A,R2
   \   000043   4B           ORL       A,R3
   \   000044   60C0         JZ        ??osal_start_znp_1
   \   000046                ; Setup parameters for call to function osal_run_task
   \   000046   12....       LCALL     `??osal_run_task::?relay`; Banked call to: osal_run_task
   \   000049   80C2         SJMP      ??osal_start_znp_3
    246          
    247          #if defined( POWER_SAVING )
    248              if (!busy)  // Complete pass through all task events with no activity?
    249              {
    250                osal_pwrmgr_powerconserve();  // Put the processor/system into sleep.
    251              }
    252          #endif
    253            }
    254          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET
    255          
    256          /*********************************************************************
    257           * @fn      osal_run_task
    258           *
    259           * @brief
    260           *
    261           *   This function is the main loop function of the task system.  It
    262           *   will look through all task events and call the task_event_processor()
    263           *   function for the task with the event.  If there are no events (for
    264           *   all tasks), this function puts the processor into Sleep.
    265           *   This Function doesn't return.
    266           *
    267           * @param   void
    268           *
    269           * @return  none
    270           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    271          static void osal_run_task(uint8 idx)
   \                     osal_run_task:
    272          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
    273            uint16 events;
    274            halIntState_t intState;
    275          
    276            HAL_ENTER_CRITICAL_SECTION(intState);
   \   000007   ACA8         MOV       R4,0xa8+0x0
   \   000009   C2AF         CLR       0xa8.7
    277            events = tasksEvents[idx];
   \   00000B   E9           MOV       A,R1
   \   00000C   29           ADD       A,R1
   \   00000D   FE           MOV       R6,A
   \   00000E   E4           CLR       A
   \   00000F   33           RLC       A
   \   000010   FF           MOV       R7,A
   \   000011   90....       MOV       DPTR,#tasksEvents
   \   000014   E0           MOVX      A,@DPTR
   \   000015   2E           ADD       A,R6
   \   000016   F8           MOV       R0,A
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   3F           ADDC      A,R7
   \   00001A   F9           MOV       R1,A
   \   00001B   8882         MOV       DPL,R0
   \   00001D   F583         MOV       DPH,A
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   FA           MOV       R2,A
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   FB           MOV       R3,A
    278            tasksEvents[idx] = 0;  // Clear the Events for this task.
   \   000024   8882         MOV       DPL,R0
   \   000026   8983         MOV       DPH,R1
   \   000028   E4           CLR       A
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   F0           MOVX      @DPTR,A
    279            HAL_EXIT_CRITICAL_SECTION(intState);
   \   00002C   EC           MOV       A,R4
   \   00002D   A2E7         MOV       C,0xE0 /* A   */.7
   \   00002F   92AF         MOV       0xa8.7,C
    280          
    281            events = (tasksArr[idx])( idx, events );
   \   000031                ; Setup parameters for indirect call
   \   000031   A9..         MOV       R1,?V0
   \   000033   74..         MOV       A,#tasksArr & 0xff
   \   000035   2E           ADD       A,R6
   \   000036   F582         MOV       DPL,A
   \   000038   74..         MOV       A,#(tasksArr >> 8) & 0xff
   \   00003A   3F           ADDC      A,R7
   \   00003B   F583         MOV       DPH,A
   \   00003D   12....       LCALL     ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000040   12....       LCALL     ?CALL_IND
    282          
    283            HAL_ENTER_CRITICAL_SECTION(intState);
   \   000043   A8A8         MOV       R0,0xa8+0x0
   \   000045   C2AF         CLR       0xa8.7
    284            tasksEvents[idx] |= events;  // Add back unprocessed events to the current task.
   \   000047   90....       MOV       DPTR,#tasksEvents
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   2E           ADD       A,R6
   \   00004C   F9           MOV       R1,A
   \   00004D   A3           INC       DPTR
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   3F           ADDC      A,R7
   \   000050   8982         MOV       DPL,R1
   \   000052   F583         MOV       DPH,A
   \   000054   E0           MOVX      A,@DPTR
   \   000055   4A           ORL       A,R2
   \   000056   F0           MOVX      @DPTR,A
   \   000057   A3           INC       DPTR
   \   000058   E0           MOVX      A,@DPTR
   \   000059   4B           ORL       A,R3
   \   00005A   F0           MOVX      @DPTR,A
    285            HAL_EXIT_CRITICAL_SECTION(intState);
   \   00005B   E8           MOV       A,R0
   \   00005C   A2E7         MOV       C,0xE0 /* A   */.7
   \   00005E   92AF         MOV       0xa8.7,C
    286          }
   \   000060   7F04         MOV       R7,#0x4
   \   000062   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000065                REQUIRE _A_IEN0
    287          
    288          /*********************************************************************
    289          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   osalInitTasks
        2      0   -> APSF_Init
        2      0   -> APS_Init
        2      0   -> Hal_Init
        2      0   -> SAPI_Init
        2      0   -> StubAPS_Init
        2      0   -> ZDApp_Init
        2      0   -> ZDNwkMgr_Init
        2      0   -> bdb_Init
        2      0   -> gp_Init
        2      0   -> macTaskInit
        2      0   -> nwk_init
        2      0   -> osal_mem_alloc
        2      0   -> osal_memset
        2      0   -> znpInit
      0     12   osal_run_task
      2      0   osal_start_znp
        2      0   -> Hal_ProcessPoll
        2      0   -> osalTimeUpdate
        2      0   -> osal_run_task


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       9  ?Subroutine0
       1  _A_IEN0
      95  osalInitTasks
     101  osal_run_task
      75  osal_start_znp
      24  tasksArr
       1  tasksCnt
       2  tasksEvents
      18  -- Other

 
 280 bytes in segment BANKED_CODE
  18 bytes in segment BANK_RELAYS
   1 byte  in segment SFR_AN
  25 bytes in segment XDATA_ROM_C
   2 bytes in segment XDATA_Z
 
  18 bytes of CODE     memory
  25 bytes of CONST    memory
   0 bytes of DATA     memory (+ 1 byte shared)
 280 bytes of HUGECODE memory
   2 bytes of XDATA    memory

Errors: none
Warnings: none
