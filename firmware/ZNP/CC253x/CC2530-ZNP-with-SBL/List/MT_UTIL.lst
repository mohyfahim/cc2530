###############################################################################
#
# IAR C/C++ Compiler V10.40.1.7397 for 8051               01/May/2021  16:40:04
# Copyright 2004-2021 IAR Systems AB.
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\Texas Instruments\Z-Stack 3.0.2\Components\mt\MT_UTIL.c
#    Command line       =  
#        -f C:\Users\asus\AppData\Local\Temp\EW136C.tmp ("E:\Texas
#        Instruments\Z-Stack 3.0.2\Components\mt\MT_UTIL.c" -D
#        BDB_FINDING_BINDING_CAPABILITY_ENABLED=0 -D TC_LINKKEY_JOIN -D
#        HAL_UART_DMA_RX_MAX=128 -D MAXMEMHEAP=2765 -D NWK_MAX_DEVICE_LIST=10
#        -D ZDSECMGR_TC_DEVICE_MAX=30 -D DISABLE_GREENPOWER_BASIC_PROXY -D
#        FEATURE_SYSTEM_STATS -D MT_GP_CB_FUNC -D ASSERT_RESET -D FAKE_CRC_SHDW
#        -lC "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-with-SBL\List" -lA
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-with-SBL\List"
#        --diag_suppress Pe001,Pa010 -o "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-with-SBL\Obj" -e --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_GP_CB_FUNC -DMT_APP_FUNC -DMT_APP_CNF_FUNC
#        -DZNP_ALT) -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg" -I
#        "E:\Texas Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\Source\" -I "E:\Texas
#        Instruments\Z-Stack 3.0.2\Projects\zstack\ZNP\CC253x\..\Source\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\Utilities\BootLoad\Source\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I "E:\Texas
#        Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\gp\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\bdb\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\" -I
#        "E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  English_USA.1252
#    List file          =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-with-SBL\List\MT_UTIL.lst
#    Object file        =  
#        E:\Texas Instruments\Z-Stack
#        3.0.2\Projects\zstack\ZNP\CC253x\CC2530-ZNP-with-SBL\Obj\MT_UTIL.r51
#
###############################################################################

E:\Texas Instruments\Z-Stack 3.0.2\Components\mt\MT_UTIL.c
      1          /***************************************************************************************************
      2            Filename:       MT_UTIL.c
      3            Revised:        $Date: 2015-01-26 08:25:50 -0800 (Mon, 26 Jan 2015) $
      4            Revision:       $Revision: 42025 $
      5          
      6            Description:    MonitorTest Utility Functions
      7          
      8            Copyright 2007-2015 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License"). You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product. Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          
     45          #include "AddrMgr.h"
     46          
     47          #include "OnBoard.h"   /* This is here because of the key reading */

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa0
   \   union <unnamed> volatile __sfr _A_P2
   \                     _A_P2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     48          #include "hal_key.h"
     49          #include "hal_led.h"
     50          #include "OSAL_Nv.h"
     51          #include "osal.h"
     52          #include "NLMEDE.h"
     53          #include "MT.h"
     54          #include "MT_UTIL.h"
     55          #include "MT_MAC.h"
     56          #include "ssp.h"
     57          #if defined ZCL_KEY_ESTABLISH
     58          #include "zcl_key_establish.h"
     59          #include "zcl_se.h"
     60          #endif
     61          
     62          #if !defined NONWK
     63          #include "MT_ZDO.h"
     64          #include "MT_SAPI.h"
     65          #include "MT_NWK.h"
     66          #include "MT_AF.h"
     67          #include "AssocList.h"
     68          #include "ZDApp.h"
     69          #include "ZDSecMgr.h"
     70          #endif
     71          
     72          #if defined MT_SRNG
     73          #include "hal_srng.h"
     74          #endif
     75          
     76          #if defined FEATURE_DUAL_MAC
     77          #include "dmmgr.h"
     78          #endif
     79          
     80          /***************************************************************************************************
     81           * CONSTANTS
     82           ***************************************************************************************************/
     83          #define MT_UTIL_DEVICE_INFO_RESPONSE_LEN 14
     84          #define MT_UTIL_STATUS_LEN    1
     85          #define MT_UTIL_FRM_CTR_LEN   4
     86          // Status + LinkKeyDataLen + Tx+Rx Frame counter.
     87          #define MT_APSME_LINKKEY_GET_RSP_LEN (MT_UTIL_STATUS_LEN + SEC_KEY_LEN + (MT_UTIL_FRM_CTR_LEN * 2))
     88          // Status + NV id
     89          #define MT_APSME_LINKKEY_NV_ID_GET_RSP_LEN (MT_UTIL_STATUS_LEN + 2)
     90          
     91          /***************************************************************************************************
     92           * LOCAL VARIABLES
     93           ***************************************************************************************************/
     94          #if defined ZCL_KEY_ESTABLISH
     95          uint8 zcl_key_establish_task_id;
     96          #endif
     97          
     98          #ifdef FEATURE_GET_PRIMARY_IEEE
     99          /* This feature is not compatible with MSP430 or ARM platforms. */
    100          __no_init const __xdata char ieeeMac[1] @ 0x780C;
    101          #endif
    102          
    103          /***************************************************************************************************
    104           * LOCAL FUNCTIONS
    105           ***************************************************************************************************/
    106          #ifdef AUTO_PEND
    107          static void MT_UtilRevExtCpy( uint8 *pDst, uint8 *pSrc );
    108          static void MT_UtilSpi2Addr( zAddrType_t *pDst, uint8 *pSrc );
    109          #endif
    110          
    111          #if defined (MT_UTIL_FUNC)
    112          static void MT_UtilGetDeviceInfo(void);
    113          static void MT_UtilGetNvInfo(void);
    114          static void MT_UtilSetPanID(uint8 *pBuf);
    115          static void MT_UtilSetChannels(uint8 *pBuf);
    116          static void MT_UtilSetSecLevel(uint8 *pBuf);
    117          static void MT_UtilSetPreCfgKey(uint8 *pBuf);
    118          static void MT_UtilCallbackSub(uint8 *pData);
    119          static void MT_UtilTimeAlive(void);
    120          static void MT_UtilSrcMatchEnable (uint8 *pBuf);
    121          static void MT_UtilSrcMatchAddEntry (uint8 *pBuf);
    122          static void MT_UtilSrcMatchDeleteEntry (uint8 *pBuf);
    123          static void MT_UtilSrcMatchCheckSrcAddr (uint8 *pBuf);
    124          static void MT_UtilSrcMatchAckAllPending (uint8 *pBuf);
    125          static void MT_UtilSrcMatchCheckAllPending (uint8 *pBuf);
    126          
    127          static void MT_UtilGpioSetDirection(uint8 *pBuf);
    128          static void MT_UtilGpioRead(uint8 *pBuf);
    129          static void MT_UtilGpioWrite(uint8 *pBuf);
    130          
    131          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    132          static void MT_UtilKeyEvent(uint8 *pBuf);
    133          #endif
    134          
    135          #if (defined HAL_LED) && (HAL_LED == TRUE)
    136          static void MT_UtilLedControl(uint8 *pBuf);
    137          #endif
    138          
    139          #ifdef MT_SRNG
    140          static void MT_UtilSrngGen(void);
    141          #endif
    142          
    143          #ifdef FEATURE_GET_PRIMARY_IEEE
    144          static void MT_UtilGetPrimaryIEEE(void);
    145          #endif
    146          
    147          #if !defined NONWK
    148          static void MT_UtilDataReq(uint8 *pBuf);
    149          static void MT_UtilAddrMgrEntryLookupExt(uint8 *pBuf);
    150          static void MT_UtilAddrMgrEntryLookupNwk(uint8 *pBuf);
    151          #if defined MT_SYS_KEY_MANAGEMENT
    152          static void MT_UtilAPSME_LinkKeyDataGet(uint8 *pBuf);
    153          static void MT_UtilAPSME_LinkKeyNvIdGet(uint8 *pBuf);
    154          #endif //MT_SYS_KEY_MANAGEMENT
    155          static void MT_UtilAPSME_RequestKeyCmd(uint8 *pBuf);
    156          static void MT_UtilAssocCount(uint8 *pBuf);
    157          static void MT_UtilAssocFindDevice(uint8 *pBuf);
    158          static void MT_UtilAssocGetWithAddress(uint8 *pBuf);
    159          static void MT_UtilBindAddEntry(uint8 *pBuf);
    160          static void packDev_t(uint8 *pBuf, associated_devices_t *pDev);
    161          static void packBindEntry_t(uint8 *pBuf, BindingEntry_t *pBind);
    162          #if defined ZCL_KEY_ESTABLISH
    163          static void MT_UtilzclGeneral_KeyEstablish_InitiateKeyEstablishment(uint8 *pBuf);
    164          static void MT_UtilzclGeneral_KeyEstablishment_ECDSASign(uint8 *pBuf);
    165          #endif // ZCL_KEY_ESTABLISH
    166          static void MT_UtilSync(void);
    167          static void MT_UtilGetDevNwkInfo( uint8 *pBuf );
    168          
    169          #endif // !defined NONWK
    170          #endif // MT_UTIL_FUNC
    171          
    172          #if defined (MT_UTIL_FUNC)
    173          /***************************************************************************************************
    174          * @fn      MT_UtilProcessing
    175          *
    176          * @brief   Process all the DEBUG commands that are issued by test tool
    177          *
    178          * @param   pBuf  - pointer to received SPI data message
    179          *
    180          * @return  status
    181          ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    182          uint8 MT_UtilCommandProcessing(uint8 *pBuf)
   \                     MT_UtilCommandProcessing:
    183          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 62
   \   000005   74C2         MOV       A,#-0x3e
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
    184            uint8 status = MT_RPC_SUCCESS;
   \   00000E   7F00         MOV       R7,#0x0
    185          
    186            switch (pBuf[MT_RPC_POS_CMD1])
   \   000010   8A82         MOV       DPL,R2
   \   000012   8B83         MOV       DPH,R3
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   7003         JNZ       $+5
   \   000019   02....       LJMP      ??MT_UtilCommandProcessing_0 & 0xFFFF
   \   00001C   14           DEC       A
   \   00001D   7003         JNZ       $+5
   \   00001F   02....       LJMP      ??MT_UtilCommandProcessing_1 & 0xFFFF
   \   000022   14           DEC       A
   \   000023   7003         JNZ       $+5
   \   000025   02....       LJMP      ??MT_UtilCommandProcessing_2 & 0xFFFF
   \   000028   14           DEC       A
   \   000029   7003         JNZ       $+5
   \   00002B   02....       LJMP      ??MT_UtilCommandProcessing_3 & 0xFFFF
   \   00002E   14           DEC       A
   \   00002F   7003         JNZ       $+5
   \   000031   02....       LJMP      ??MT_UtilCommandProcessing_4 & 0xFFFF
   \   000034   14           DEC       A
   \   000035   7003         JNZ       $+5
   \   000037   02....       LJMP      ??MT_UtilCommandProcessing_5 & 0xFFFF
   \   00003A   14           DEC       A
   \   00003B   7003         JNZ       $+5
   \   00003D   02....       LJMP      ??MT_UtilCommandProcessing_6 & 0xFFFF
   \   000040   14           DEC       A
   \   000041   7003         JNZ       $+5
   \   000043   02....       LJMP      ??MT_UtilCommandProcessing_7 & 0xFFFF
   \   000046   24FE         ADD       A,#-0x2
   \   000048   7003         JNZ       $+5
   \   00004A   02....       LJMP      ??MT_UtilCommandProcessing_8 & 0xFFFF
   \   00004D   14           DEC       A
   \   00004E   7003         JNZ       $+5
   \   000050   02....       LJMP      ??MT_UtilCommandProcessing_7 & 0xFFFF
   \   000053   24FA         ADD       A,#-0x6
   \   000055   7003         JNZ       $+5
   \   000057   02....       LJMP      ??MT_UtilCommandProcessing_9 & 0xFFFF
   \   00005A   14           DEC       A
   \   00005B   7003         JNZ       $+5
   \   00005D   02....       LJMP      ??MT_UtilCommandProcessing_10 & 0xFFFF
   \   000060   24FD         ADD       A,#-0x3
   \   000062   7003         JNZ       $+5
   \   000064   02....       LJMP      ??MT_UtilCommandProcessing_11 & 0xFFFF
   \   000067   14           DEC       A
   \   000068   7003         JNZ       $+5
   \   00006A   02....       LJMP      ??MT_UtilCommandProcessing_12 & 0xFFFF
   \   00006D   14           DEC       A
   \   00006E   7003         JNZ       $+5
   \   000070   02....       LJMP      ??MT_UtilCommandProcessing_13 & 0xFFFF
   \   000073   24F6         ADD       A,#-0xa
   \   000075   7003         JNZ       $+5
   \   000077   02....       LJMP      ??MT_UtilCommandProcessing_14 & 0xFFFF
   \   00007A   14           DEC       A
   \   00007B   7003         JNZ       $+5
   \   00007D   02....       LJMP      ??MT_UtilCommandProcessing_14 & 0xFFFF
   \   000080   14           DEC       A
   \   000081   7003         JNZ       $+5
   \   000083   02....       LJMP      ??MT_UtilCommandProcessing_14 & 0xFFFF
   \   000086   14           DEC       A
   \   000087   7003         JNZ       $+5
   \   000089   02....       LJMP      ??MT_UtilCommandProcessing_15 & 0xFFFF
   \   00008C   14           DEC       A
   \   00008D   7003         JNZ       $+5
   \   00008F   02....       LJMP      ??MT_UtilCommandProcessing_14 & 0xFFFF
   \   000092   14           DEC       A
   \   000093   7003         JNZ       $+5
   \   000095   02....       LJMP      ??MT_UtilCommandProcessing_16 & 0xFFFF
   \   000098   24E5         ADD       A,#-0x1b
   \   00009A   7003         JNZ       $+5
   \   00009C   02....       LJMP      ??MT_UtilCommandProcessing_17 & 0xFFFF
   \   00009F   14           DEC       A
   \   0000A0   7003         JNZ       $+5
   \   0000A2   02....       LJMP      ??MT_UtilCommandProcessing_18 & 0xFFFF
   \   0000A5   24F9         ADD       A,#-0x7
   \   0000A7   7003         JNZ       $+5
   \   0000A9   02....       LJMP      ??MT_UtilCommandProcessing_19 & 0xFFFF
   \   0000AC   14           DEC       A
   \   0000AD   7003         JNZ       $+5
   \   0000AF   02....       LJMP      ??MT_UtilCommandProcessing_20 & 0xFFFF
   \   0000B2   14           DEC       A
   \   0000B3   7003         JNZ       $+5
   \   0000B5   02....       LJMP      ??MT_UtilCommandProcessing_21 & 0xFFFF
   \   0000B8   14           DEC       A
   \   0000B9   7003         JNZ       $+5
   \   0000BB   02....       LJMP      ??MT_UtilCommandProcessing_22 & 0xFFFF
   \   0000BE   24FE         ADD       A,#-0x2
   \   0000C0   7003         JNZ       $+5
   \   0000C2   02....       LJMP      ??MT_UtilCommandProcessing_23 & 0xFFFF
   \   0000C5   24AD         ADD       A,#-0x53
   \   0000C7   7003         JNZ       $+5
   \   0000C9   02....       LJMP      ??MT_UtilCommandProcessing_24 & 0xFFFF
   \   0000CC   14           DEC       A
   \   0000CD   7003         JNZ       $+5
   \   0000CF   02....       LJMP      ??MT_UtilCommandProcessing_25 & 0xFFFF
   \   0000D2   24C1         ADD       A,#-0x3f
   \   0000D4   7003         JNZ       $+5
   \   0000D6   02....       LJMP      ??MT_UtilCommandProcessing_26 & 0xFFFF
   \   0000D9   02....       LJMP      ??MT_UtilCommandProcessing_27 & 0xFFFF
    187            {
    188              // CC253X MAC Network Processor does not have NV support
    189          #if !defined(CC253X_MACNP)
    190            case MT_UTIL_GET_DEVICE_INFO:
    191              MT_UtilGetDeviceInfo();
   \                     ??MT_UtilCommandProcessing_0:
   \   0000DC                ; Setup parameters for call to function MT_UtilGetDeviceInfo
   \   0000DC   12....       LCALL     `??MT_UtilGetDeviceInfo::?relay`; Banked call to: MT_UtilGetDeviceInfo
    192              break;
   \   0000DF   02....       LJMP      ??MT_UtilCommandProcessing_7 & 0xFFFF
    193          
    194            case MT_UTIL_GET_NV_INFO:
    195              MT_UtilGetNvInfo();
   \                     ??MT_UtilCommandProcessing_1:
   \   0000E2                ; Setup parameters for call to function MT_UtilGetNvInfo
   \   0000E2   12....       LCALL     `??MT_UtilGetNvInfo::?relay`; Banked call to: MT_UtilGetNvInfo
    196              break;
   \   0000E5   02....       LJMP      ??MT_UtilCommandProcessing_7 & 0xFFFF
    197          
    198            case MT_UTIL_SET_PANID:
    199              MT_UtilSetPanID(pBuf);
   \                     ??MT_UtilCommandProcessing_2:
   \   0000E8   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000EB   7401         MOV       A,#0x1
   \   0000ED   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F0   EA           MOV       A,R2
   \   0000F1   F0           MOVX      @DPTR,A
   \   0000F2   A3           INC       DPTR
   \   0000F3   EB           MOV       A,R3
   \   0000F4   F0           MOVX      @DPTR,A
   \   0000F5                ; Setup parameters for call to function osal_nv_item_len
   \   0000F5   7A83         MOV       R2,#-0x7d
   \   0000F7   7B00         MOV       R3,#0x0
   \   0000F9   12....       LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   0000FC   8A..         MOV       ?V0,R2
   \   0000FE   8B..         MOV       ?V1,R3
   \   000100                ; Setup parameters for call to function osal_nv_write
   \   000100   7401         MOV       A,#0x1
   \   000102   12....       LCALL     ?XSTACK_DISP100_8
   \   000105   88..         MOV       ?V2,R0
   \   000107   89..         MOV       ?V3,R1
   \   000109   78..         MOV       R0,#?V2
   \   00010B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010E   78..         MOV       R0,#?V0
   \   000110   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000113   7C00         MOV       R4,#0x0
   \   000115   7D00         MOV       R5,#0x0
   \   000117   7A83         MOV       R2,#-0x7d
   \   000119   02....       LJMP      ??MT_UtilCommandProcessing_28 & 0xFFFF
    200              break;
    201          
    202            case MT_UTIL_SET_CHANNELS:
    203              MT_UtilSetChannels(pBuf);
   \                     ??MT_UtilCommandProcessing_3:
   \   00011C   8A82         MOV       DPL,R2
   \   00011E   8B83         MOV       DPH,R3
   \   000120   A3           INC       DPTR
   \   000121   A3           INC       DPTR
   \   000122   E0           MOVX      A,@DPTR
   \   000123   FE           MOV       R6,A
   \   000124                ; Setup parameters for call to function osal_build_uint32
   \   000124   7904         MOV       R1,#0x4
   \   000126   EA           MOV       A,R2
   \   000127   2403         ADD       A,#0x3
   \   000129   FA           MOV       R2,A
   \   00012A   E4           CLR       A
   \   00012B   35..         ADDC      A,?V1
   \   00012D   FB           MOV       R3,A
   \   00012E   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000131   EA           MOV       A,R2
   \   000132   F8           MOV       R0,A
   \   000133   EB           MOV       A,R3
   \   000134   F9           MOV       R1,A
   \   000135   EC           MOV       A,R4
   \   000136   FA           MOV       R2,A
   \   000137   ED           MOV       A,R5
   \   000138   FB           MOV       R3,A
   \   000139   7409         MOV       A,#0x9
   \   00013B   12....       LCALL     ?XSTACK_DISP0_8
   \   00013E   12....       LCALL     ?XSTORE_R0123
   \   000141                ; Setup parameters for call to function osal_nv_item_len
   \   000141   7A84         MOV       R2,#-0x7c
   \   000143   7B00         MOV       R3,#0x0
   \   000145   12....       LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000148   8A..         MOV       ?V0,R2
   \   00014A   8B..         MOV       ?V1,R3
   \   00014C                ; Setup parameters for call to function osal_nv_write
   \   00014C   7409         MOV       A,#0x9
   \   00014E   12....       LCALL     ?XSTACK_DISP100_8
   \   000151   88..         MOV       ?V2,R0
   \   000153   89..         MOV       ?V3,R1
   \   000155   78..         MOV       R0,#?V2
   \   000157   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00015A   78..         MOV       R0,#?V0
   \   00015C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00015F   7C00         MOV       R4,#0x0
   \   000161   7D00         MOV       R5,#0x0
   \   000163   7A84         MOV       R2,#-0x7c
   \   000165   8044         SJMP      ??MT_UtilCommandProcessing_28
    204              break;
    205          
    206            case MT_UTIL_SET_SECLEVEL:
    207              MT_UtilSetSecLevel(pBuf);
   \                     ??MT_UtilCommandProcessing_4:
   \   000167   8A82         MOV       DPL,R2
   \   000169   8B83         MOV       DPH,R3
   \   00016B   A3           INC       DPTR
   \   00016C   A3           INC       DPTR
   \   00016D   E0           MOVX      A,@DPTR
   \   00016E   FE           MOV       R6,A
   \   00016F                ; Setup parameters for call to function osal_nv_item_len
   \   00016F   7A61         MOV       R2,#0x61
   \   000171   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000174   5002         JNC       ??MT_UtilCommandProcessing_29
   \   000176   05..         INC       ?V1
   \                     ??MT_UtilCommandProcessing_29:
   \   000178   78..         MOV       R0,#?V0
   \   00017A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00017D   78..         MOV       R0,#?V2
   \   00017F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000182   7C00         MOV       R4,#0x0
   \   000184   7D00         MOV       R5,#0x0
   \   000186   7A61         MOV       R2,#0x61
   \   000188   8021         SJMP      ??MT_UtilCommandProcessing_28
    208              break;
    209          
    210            case MT_UTIL_SET_PRECFGKEY:
    211              MT_UtilSetPreCfgKey(pBuf);
   \                     ??MT_UtilCommandProcessing_5:
   \   00018A   8A82         MOV       DPL,R2
   \   00018C   8B83         MOV       DPH,R3
   \   00018E   A3           INC       DPTR
   \   00018F   A3           INC       DPTR
   \   000190   E0           MOVX      A,@DPTR
   \   000191   FE           MOV       R6,A
   \   000192                ; Setup parameters for call to function osal_nv_item_len
   \   000192   7A62         MOV       R2,#0x62
   \   000194   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000197   5002         JNC       ??MT_UtilCommandProcessing_30
   \   000199   05..         INC       ?V1
   \                     ??MT_UtilCommandProcessing_30:
   \   00019B   78..         MOV       R0,#?V0
   \   00019D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A0   78..         MOV       R0,#?V2
   \   0001A2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A5   7C00         MOV       R4,#0x0
   \   0001A7   7D00         MOV       R5,#0x0
   \   0001A9   7A62         MOV       R2,#0x62
   \                     ??MT_UtilCommandProcessing_28:
   \   0001AB   7B00         MOV       R3,#0x0
   \   0001AD   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0001B0   7404         MOV       A,#0x4
   \   0001B2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001B5   02....       LJMP      ??MT_UtilCommandProcessing_31 & 0xFFFF
    212              break;
    213          #endif
    214          
    215          #ifdef FEATURE_GET_PRIMARY_IEEE
    216            case MT_UTIL_GET_PRIMARY_IEEE:
    217              MT_UtilGetPrimaryIEEE();
    218              break;
    219          #endif
    220          
    221            case MT_UTIL_CALLBACK_SUB_CMD:
    222              MT_UtilCallbackSub(pBuf);
   \                     ??MT_UtilCommandProcessing_6:
   \   0001B8   8A82         MOV       DPL,R2
   \   0001BA   8B83         MOV       DPH,R3
   \   0001BC   A3           INC       DPTR
   \   0001BD   A3           INC       DPTR
   \   0001BE   E0           MOVX      A,@DPTR
   \   0001BF   FE           MOV       R6,A
   \   0001C0   85..82       MOV       DPL,?XSP + 0
   \   0001C3   85..83       MOV       DPH,?XSP + 1
   \   0001C6   E4           CLR       A
   \   0001C7   F0           MOVX      @DPTR,A
   \   0001C8   EA           MOV       A,R2
   \   0001C9   2403         ADD       A,#0x3
   \   0001CB   F5..         MOV       ?V0,A
   \   0001CD   5002         JNC       ??MT_UtilCommandProcessing_32
   \   0001CF   05..         INC       ?V1
   \                     ??MT_UtilCommandProcessing_32:
   \   0001D1                ; Setup parameters for call to function osal_build_uint16
   \   0001D1   0A           INC       R2
   \   0001D2   0A           INC       R2
   \   0001D3   0A           INC       R2
   \   0001D4   AB..         MOV       R3,?V1
   \   0001D6   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0001D9   8A..         MOV       ?V2,R2
   \   0001DB   8B..         MOV       ?V3,R3
   \   0001DD   A8..         MOV       R0,?V2
   \   0001DF   A9..         MOV       R1,?V3
   \   0001E1   EB           MOV       A,R3
   \   0001E2   541F         ANL       A,#0x1f
   \   0001E4   FA           MOV       R2,A
   \   0001E5   85..82       MOV       DPL,?V0
   \   0001E8   85..83       MOV       DPH,?V1
   \   0001EB   A3           INC       DPTR
   \   0001EC   A3           INC       DPTR
   \   0001ED   E0           MOVX      A,@DPTR
   \   0001EE   6031         JZ        ??MT_UtilCommandProcessing_33
   \   0001F0   7405         MOV       A,#0x5
   \   0001F2   6A           XRL       A,R2
   \   0001F3   600A         JZ        ??MT_UtilCommandProcessing_34
   \   0001F5   74FF         MOV       A,#-0x1
   \   0001F7   68           XRL       A,R0
   \   0001F8   7003         JNZ       ??MT_UtilCommandProcessing_35
   \   0001FA   74FF         MOV       A,#-0x1
   \   0001FC   69           XRL       A,R1
   \                     ??MT_UtilCommandProcessing_35:
   \   0001FD   700C         JNZ       ??MT_UtilCommandProcessing_36
   \                     ??MT_UtilCommandProcessing_34:
   \   0001FF   90....       MOV       DPTR,#_zdoCallbackSub
   \   000202   74FF         MOV       A,#-0x1
   \   000204   F0           MOVX      @DPTR,A
   \   000205   A3           INC       DPTR
   \   000206   F0           MOVX      @DPTR,A
   \   000207   A3           INC       DPTR
   \   000208   F0           MOVX      @DPTR,A
   \   000209   A3           INC       DPTR
   \   00020A   F0           MOVX      @DPTR,A
   \                     ??MT_UtilCommandProcessing_36:
   \   00020B   7406         MOV       A,#0x6
   \   00020D   6A           XRL       A,R2
   \   00020E   600A         JZ        ??MT_UtilCommandProcessing_37
   \   000210   74FF         MOV       A,#-0x1
   \   000212   68           XRL       A,R0
   \   000213   7003         JNZ       ??MT_UtilCommandProcessing_38
   \   000215   74FF         MOV       A,#-0x1
   \   000217   69           XRL       A,R1
   \                     ??MT_UtilCommandProcessing_38:
   \   000218   7037         JNZ       ??MT_UtilCommandProcessing_39
   \                     ??MT_UtilCommandProcessing_37:
   \   00021A   90....       MOV       DPTR,#_sapiCallbackSub
   \   00021D   74FF         MOV       A,#-0x1
   \   00021F   802D         SJMP      ??MT_UtilCommandProcessing_40
   \                     ??MT_UtilCommandProcessing_33:
   \   000221   7405         MOV       A,#0x5
   \   000223   6A           XRL       A,R2
   \   000224   600A         JZ        ??MT_UtilCommandProcessing_41
   \   000226   74FF         MOV       A,#-0x1
   \   000228   68           XRL       A,R0
   \   000229   7003         JNZ       ??MT_UtilCommandProcessing_42
   \   00022B   74FF         MOV       A,#-0x1
   \   00022D   69           XRL       A,R1
   \                     ??MT_UtilCommandProcessing_42:
   \   00022E   700B         JNZ       ??MT_UtilCommandProcessing_43
   \                     ??MT_UtilCommandProcessing_41:
   \   000230   90....       MOV       DPTR,#_zdoCallbackSub
   \   000233   E4           CLR       A
   \   000234   F0           MOVX      @DPTR,A
   \   000235   A3           INC       DPTR
   \   000236   F0           MOVX      @DPTR,A
   \   000237   A3           INC       DPTR
   \   000238   F0           MOVX      @DPTR,A
   \   000239   A3           INC       DPTR
   \   00023A   F0           MOVX      @DPTR,A
   \                     ??MT_UtilCommandProcessing_43:
   \   00023B   7406         MOV       A,#0x6
   \   00023D   6A           XRL       A,R2
   \   00023E   600A         JZ        ??MT_UtilCommandProcessing_44
   \   000240   74FF         MOV       A,#-0x1
   \   000242   68           XRL       A,R0
   \   000243   7003         JNZ       ??MT_UtilCommandProcessing_45
   \   000245   74FF         MOV       A,#-0x1
   \   000247   69           XRL       A,R1
   \                     ??MT_UtilCommandProcessing_45:
   \   000248   7007         JNZ       ??MT_UtilCommandProcessing_39
   \                     ??MT_UtilCommandProcessing_44:
   \   00024A   90....       MOV       DPTR,#_sapiCallbackSub
   \   00024D   E4           CLR       A
   \                     ??MT_UtilCommandProcessing_40:
   \   00024E   F0           MOVX      @DPTR,A
   \   00024F   A3           INC       DPTR
   \   000250   F0           MOVX      @DPTR,A
   \                     ??MT_UtilCommandProcessing_39:
   \   000251                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000251   02....       LJMP      ??MT_UtilCommandProcessing_46 & 0xFFFF
    223              break;
    224          
    225            case MT_UTIL_KEY_EVENT:
    226          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    227              MT_UtilKeyEvent(pBuf);
    228          #endif
    229              break;
    230          
    231            case MT_UTIL_TIME_ALIVE:
    232              MT_UtilTimeAlive();
   \                     ??MT_UtilCommandProcessing_8:
   \   000254                ; Setup parameters for call to function osal_GetSystemClock
   \   000254   12....       LCALL     `??osal_GetSystemClock::?relay`; Banked call to: osal_GetSystemClock
   \   000257   8A..         MOV       ?V0,R2
   \   000259   8B..         MOV       ?V1,R3
   \   00025B   8C..         MOV       ?V2,R4
   \   00025D   8D..         MOV       ?V3,R5
   \   00025F                ; Setup parameters for call to function osal_buffer_uint32
   \   00025F   90....       MOV       DPTR,#__Constant_3e8
   \   000262   78..         MOV       R0,#?V4
   \   000264   12....       LCALL     ?L_MOV_X
   \   000267   78..         MOV       R0,#?V0
   \   000269   79..         MOV       R1,#?V4
   \   00026B   12....       LCALL     ?UL_DIV_MOD
   \   00026E   78..         MOV       R0,#?V0
   \   000270   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000273   740D         MOV       A,#0xd
   \   000275   12....       LCALL     ?XSTACK_DISP101_8
   \   000278   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00027B   7404         MOV       A,#0x4
   \   00027D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000280                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000280   7409         MOV       A,#0x9
   \   000282   12....       LCALL     ?XSTACK_DISP102_8
   \   000285   7B04         MOV       R3,#0x4
   \   000287   7A09         MOV       R2,#0x9
   \   000289   02....       LJMP      ??MT_UtilCommandProcessing_47 & 0xFFFF
    233              break;
    234          
    235            case MT_UTIL_LED_CONTROL:
    236          #if (defined HAL_LED) && (HAL_LED == TRUE)
    237              MT_UtilLedControl(pBuf);
    238          #endif
    239              break;
    240          
    241            case MT_UTIL_SRC_MATCH_ENABLE:
    242              MT_UtilSrcMatchEnable(pBuf);
    243              break;
    244          
    245            case MT_UTIL_SRC_MATCH_ADD_ENTRY:
    246              MT_UtilSrcMatchAddEntry(pBuf);
    247              break;
    248          
    249            case MT_UTIL_SRC_MATCH_DEL_ENTRY:
    250              MT_UtilSrcMatchDeleteEntry(pBuf);
    251              break;
    252          
    253            case MT_UTIL_SRC_MATCH_CHECK_SRC_ADDR:
    254              MT_UtilSrcMatchCheckSrcAddr(pBuf);
   \                     ??MT_UtilCommandProcessing_15:
   \   00028C   8A82         MOV       DPL,R2
   \   00028E   8B83         MOV       DPH,R3
   \   000290   A3           INC       DPTR
   \   000291   A3           INC       DPTR
   \   000292   E0           MOVX      A,@DPTR
   \   000293   FA           MOV       R2,A
   \   000294   7401         MOV       A,#0x1
   \   000296   12....       LCALL     ?XSTACK_DISP0_8
   \   000299   74F5         MOV       A,#-0xb
   \   00029B   F0           MOVX      @DPTR,A
   \   00029C   7402         MOV       A,#0x2
   \   00029E   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A1   74FF         MOV       A,#-0x1
   \   0002A3   F0           MOVX      @DPTR,A
   \   0002A4                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0002A4   7401         MOV       A,#0x1
   \   0002A6   802E         SJMP      ??MT_UtilCommandProcessing_48
    255              break;
    256          
    257            case MT_UTIL_SRC_MATCH_ACK_ALL_PENDING:
    258              MT_UtilSrcMatchAckAllPending(pBuf);
   \                     ??MT_UtilCommandProcessing_14:
   \   0002A8   8A82         MOV       DPL,R2
   \   0002AA   8B83         MOV       DPH,R3
   \   0002AC   A3           INC       DPTR
   \   0002AD   A3           INC       DPTR
   \   0002AE   E0           MOVX      A,@DPTR
   \   0002AF   FA           MOV       R2,A
   \   0002B0   85..82       MOV       DPL,?XSP + 0
   \   0002B3   85..83       MOV       DPH,?XSP + 1
   \   0002B6   74F5         MOV       A,#-0xb
   \   0002B8   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0002BB   02....       LJMP      ??MT_UtilCommandProcessing_47 & 0xFFFF
    259              break;
    260          
    261            case MT_UTIL_SRC_MATCH_CHECK_ALL_PENDING:
    262              MT_UtilSrcMatchCheckAllPending(pBuf);
   \                     ??MT_UtilCommandProcessing_16:
   \   0002BE   8A82         MOV       DPL,R2
   \   0002C0   8B83         MOV       DPH,R3
   \   0002C2   A3           INC       DPTR
   \   0002C3   A3           INC       DPTR
   \   0002C4   E0           MOVX      A,@DPTR
   \   0002C5   FA           MOV       R2,A
   \   0002C6   7401         MOV       A,#0x1
   \   0002C8   12....       LCALL     ?XSTACK_DISP0_8
   \   0002CB   74F5         MOV       A,#-0xb
   \   0002CD   F0           MOVX      @DPTR,A
   \   0002CE   7402         MOV       A,#0x2
   \   0002D0   12....       LCALL     ?XSTACK_DISP0_8
   \   0002D3   E4           CLR       A
   \   0002D4   F0           MOVX      @DPTR,A
   \   0002D5                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0002D5   04           INC       A
   \                     ??MT_UtilCommandProcessing_48:
   \   0002D6   12....       LCALL     ?XSTACK_DISP102_8
   \   0002D9   7B02         MOV       R3,#0x2
   \   0002DB   02....       LJMP      ??MT_UtilCommandProcessing_47 & 0xFFFF
    263              break;
    264          
    265            case MT_UTIL_TEST_LOOPBACK:
    266              MT_BuildAndSendZToolResponse((MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_UTIL), MT_UTIL_TEST_LOOPBACK,
    267                                           pBuf[MT_RPC_POS_LEN], (pBuf+MT_RPC_FRAME_HDR_SZ));
   \                     ??MT_UtilCommandProcessing_9:
   \   0002DE                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0002DE   EA           MOV       A,R2
   \   0002DF   2403         ADD       A,#0x3
   \   0002E1   FC           MOV       R4,A
   \   0002E2   E4           CLR       A
   \   0002E3   35..         ADDC      A,?V1
   \   0002E5   FD           MOV       R5,A
   \   0002E6   8A82         MOV       DPL,R2
   \   0002E8   8B83         MOV       DPH,R3
   \   0002EA   E0           MOVX      A,@DPTR
   \   0002EB   FB           MOV       R3,A
   \   0002EC   7A10         MOV       R2,#0x10
   \   0002EE   02....       LJMP      ??MT_UtilCommandProcessing_47 & 0xFFFF
    268              break;
    269          
    270            case MT_UTIL_GPIO_SET_DIRECTION:
    271              MT_UtilGpioSetDirection(pBuf);
   \                     ??MT_UtilCommandProcessing_11:
   \   0002F1                ; Setup parameters for call to function MT_UtilGpioSetDirection
   \   0002F1   12....       LCALL     `??MT_UtilGpioSetDirection::?relay`; Banked call to: MT_UtilGpioSetDirection
    272              break;
   \   0002F4   02....       LJMP      ??MT_UtilCommandProcessing_7 & 0xFFFF
    273          
    274            case MT_UTIL_GPIO_READ:
    275              MT_UtilGpioRead(pBuf);
   \                     ??MT_UtilCommandProcessing_12:
   \   0002F7   E580         MOV       A,0x80
   \   0002F9   C0E0         PUSH      A
   \   0002FB   7403         MOV       A,#0x3
   \   0002FD   12....       LCALL     ?XSTACK_DISP0_8
   \   000300   D0E0         POP       A
   \   000302   F0           MOVX      @DPTR,A
   \   000303   E590         MOV       A,0x90
   \   000305   C0E0         PUSH      A
   \   000307   7404         MOV       A,#0x4
   \   000309   12....       LCALL     ?XSTACK_DISP0_8
   \   00030C   D0E0         POP       A
   \   00030E   F0           MOVX      @DPTR,A
   \   00030F   E5A0         MOV       A,0xa0
   \   000311   C0E0         PUSH      A
   \   000313   7405         MOV       A,#0x5
   \   000315   12....       LCALL     ?XSTACK_DISP0_8
   \   000318   D0E0         POP       A
   \   00031A   F0           MOVX      @DPTR,A
   \   00031B   E5FD         MOV       A,0xfd
   \   00031D   C0E0         PUSH      A
   \   00031F   7406         MOV       A,#0x6
   \   000321   12....       LCALL     ?XSTACK_DISP0_8
   \   000324   D0E0         POP       A
   \   000326   F0           MOVX      @DPTR,A
   \   000327   E5FE         MOV       A,0xfe
   \   000329   C0E0         PUSH      A
   \   00032B   7407         MOV       A,#0x7
   \   00032D   12....       LCALL     ?XSTACK_DISP0_8
   \   000330   D0E0         POP       A
   \   000332   F0           MOVX      @DPTR,A
   \   000333   E5FF         MOV       A,0xff
   \   000335   C0E0         PUSH      A
   \   000337   7408         MOV       A,#0x8
   \   000339   12....       LCALL     ?XSTACK_DISP0_8
   \   00033C   D0E0         POP       A
   \   00033E   F0           MOVX      @DPTR,A
   \   00033F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00033F   7403         MOV       A,#0x3
   \   000341   12....       LCALL     ?XSTACK_DISP102_8
   \   000344   7B06         MOV       R3,#0x6
   \   000346   7A15         MOV       R2,#0x15
   \   000348   02....       LJMP      ??MT_UtilCommandProcessing_47 & 0xFFFF
    276              break;
    277          
    278            case MT_UTIL_GPIO_WRITE:
    279              MT_UtilGpioWrite(pBuf);
   \                     ??MT_UtilCommandProcessing_13:
   \   00034B                ; Setup parameters for call to function MT_UtilGpioWrite
   \   00034B   12....       LCALL     `??MT_UtilGpioWrite::?relay`; Banked call to: MT_UtilGpioWrite
    280              break;
   \   00034E   02....       LJMP      ??MT_UtilCommandProcessing_7 & 0xFFFF
    281          
    282          #if !defined NONWK
    283            case MT_UTIL_DATA_REQ:
    284              MT_UtilDataReq(pBuf);
   \                     ??MT_UtilCommandProcessing_10:
   \   000351                ; Setup parameters for call to function NwkPollReq
   \   000351   8A82         MOV       DPL,R2
   \   000353   8B83         MOV       DPH,R3
   \   000355   A3           INC       DPTR
   \   000356   A3           INC       DPTR
   \   000357   A3           INC       DPTR
   \   000358   E0           MOVX      A,@DPTR
   \   000359   F9           MOV       R1,A
   \   00035A   12....       LCALL     `??NwkPollReq::?relay`; Banked call to: NwkPollReq
   \   00035D   E9           MOV       A,R1
   \   00035E   85..82       MOV       DPL,?XSP + 0
   \   000361   85..83       MOV       DPH,?XSP + 1
   \   000364   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000367   7A11         MOV       R2,#0x11
   \   000369   02....       LJMP      ??MT_UtilCommandProcessing_47 & 0xFFFF
    285              break;
    286          
    287            case MT_UTIL_ADDRMGR_EXT_ADDR_LOOKUP:
    288              MT_UtilAddrMgrEntryLookupExt(pBuf);
   \                     ??MT_UtilCommandProcessing_17:
   \   00036C   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00036F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000372   7C08         MOV       R4,#0x8
   \   000374   7D00         MOV       R5,#0x0
   \   000376   7413         MOV       A,#0x13
   \   000378   12....       LCALL     ?XSTACK_DISP0_8
   \   00037B   AA82         MOV       R2,DPL
   \   00037D   AB83         MOV       R3,DPH
   \   00037F   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000382   12....       LCALL     ?DEALLOC_XSTACK8
   \   000385                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000385   740D         MOV       A,#0xd
   \   000387   12....       LCALL     ?XSTACK_DISP101_8
   \   00038A   12....       LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   00038D   740E         MOV       A,#0xe
   \   00038F   12....       LCALL     ?XSTACK_DISP0_8
   \   000392   E0           MOVX      A,@DPTR
   \   000393   F8           MOV       R0,A
   \   000394   A3           INC       DPTR
   \   000395   E0           MOVX      A,@DPTR
   \   000396   F9           MOV       R1,A
   \   000397   7401         MOV       A,#0x1
   \   000399   12....       LCALL     ?XSTACK_DISP0_8
   \   00039C   E8           MOV       A,R0
   \   00039D   F0           MOVX      @DPTR,A
   \   00039E   7402         MOV       A,#0x2
   \   0003A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0003A3   E9           MOV       A,R1
   \   0003A4   F0           MOVX      @DPTR,A
   \   0003A5                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0003A5   7401         MOV       A,#0x1
   \   0003A7   12....       LCALL     ?XSTACK_DISP102_8
   \   0003AA   02....       LJMP      ??MT_UtilCommandProcessing_49 & 0xFFFF
    289              break;
    290          
    291            case MT_UTIL_ADDRMGR_NWK_ADDR_LOOKUP:
    292              MT_UtilAddrMgrEntryLookupNwk(pBuf);
   \                     ??MT_UtilCommandProcessing_18:
   \   0003AD   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0003B0   740E         MOV       A,#0xe
   \   0003B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0003B5   EA           MOV       A,R2
   \   0003B6   F0           MOVX      @DPTR,A
   \   0003B7   A3           INC       DPTR
   \   0003B8   EB           MOV       A,R3
   \   0003B9   F0           MOVX      @DPTR,A
   \   0003BA                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   0003BA   740D         MOV       A,#0xd
   \   0003BC   12....       LCALL     ?XSTACK_DISP101_8
   \   0003BF   12....       LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   0003C2                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0003C2   7410         MOV       A,#0x10
   \   0003C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0003C7   AC82         MOV       R4,DPL
   \   0003C9   AD83         MOV       R5,DPH
   \   0003CB   7B08         MOV       R3,#0x8
   \   0003CD   02....       LJMP      ??MT_UtilCommandProcessing_50 & 0xFFFF
    293              break;
    294          
    295          #if defined MT_SYS_KEY_MANAGEMENT
    296            case MT_UTIL_APSME_LINK_KEY_DATA_GET:
    297              MT_UtilAPSME_LinkKeyDataGet(pBuf);
    298              break;
    299          
    300            case MT_UTIL_APSME_LINK_KEY_NV_ID_GET:
    301              MT_UtilAPSME_LinkKeyNvIdGet(pBuf);
    302              break;
    303          #endif // MT_SYS_KEY_MANAGEMENT
    304          
    305            case MT_UTIL_APSME_REQUEST_KEY_CMD:
    306              MT_UtilAPSME_RequestKeyCmd(pBuf);
   \                     ??MT_UtilCommandProcessing_22:
   \   0003D0   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0003D3   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0003D6   7C08         MOV       R4,#0x8
   \   0003D8   7D00         MOV       R5,#0x0
   \   0003DA   741D         MOV       A,#0x1d
   \   0003DC   12....       LCALL     ?XSTACK_DISP101_8
   \   0003DF   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0003E2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003E5                ; Setup parameters for call to function ZDSecMgrRequestAppKey
   \   0003E5   741A         MOV       A,#0x1a
   \   0003E7   12....       LCALL     ?XSTACK_DISP101_8
   \   0003EA   12....       LCALL     `??ZDSecMgrRequestAppKey::?relay`; Banked call to: ZDSecMgrRequestAppKey
   \                     ??MT_UtilCommandProcessing_31:
   \   0003ED   E9           MOV       A,R1
   \   0003EE   85..82       MOV       DPL,?XSP + 0
   \   0003F1   85..83       MOV       DPH,?XSP + 1
   \   0003F4   F0           MOVX      @DPTR,A
   \   0003F5                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \                     ??MT_UtilCommandProcessing_46:
   \   0003F5   AC..         MOV       R4,?XSP + 0
   \   0003F7   AD..         MOV       R5,?XSP + 1
   \   0003F9   7B01         MOV       R3,#0x1
   \   0003FB   02....       LJMP      ??MT_UtilCommandProcessing_50 & 0xFFFF
    307              break;
    308          
    309            case MT_UTIL_ASSOC_COUNT:
    310              MT_UtilAssocCount(pBuf);
   \                     ??MT_UtilCommandProcessing_19:
   \   0003FE   8A82         MOV       DPL,R2
   \   000400   8B83         MOV       DPH,R3
   \   000402   A3           INC       DPTR
   \   000403   A3           INC       DPTR
   \   000404   E0           MOVX      A,@DPTR
   \   000405   FE           MOV       R6,A
   \   000406   EA           MOV       A,R2
   \   000407   2403         ADD       A,#0x3
   \   000409   F5..         MOV       ?V0,A
   \   00040B   5002         JNC       ??MT_UtilCommandProcessing_51
   \   00040D   05..         INC       ?V1
   \                     ??MT_UtilCommandProcessing_51:
   \   00040F   F582         MOV       DPL,A
   \   000411   85..83       MOV       DPH,?V1
   \   000414   A3           INC       DPTR
   \   000415   8582..       MOV       ?V2,DPL
   \   000418   8583..       MOV       ?V3,DPH
   \   00041B                ; Setup parameters for call to function AssocCount
   \   00041B   E0           MOVX      A,@DPTR
   \   00041C   FA           MOV       R2,A
   \   00041D   85..82       MOV       DPL,?V0
   \   000420   85..83       MOV       DPH,?V1
   \   000423   E0           MOVX      A,@DPTR
   \   000424   F9           MOV       R1,A
   \   000425   12....       LCALL     `??AssocCount::?relay`; Banked call to: AssocCount
   \   000428   85..82       MOV       DPL,?V0
   \   00042B   85..83       MOV       DPH,?V1
   \   00042E   EA           MOV       A,R2
   \   00042F   F0           MOVX      @DPTR,A
   \   000430   85..82       MOV       DPL,?V2
   \   000433   85..83       MOV       DPH,?V3
   \   000436   EB           MOV       A,R3
   \   000437   F0           MOVX      @DPTR,A
   \   000438                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000438   AC..         MOV       R4,?V0
   \   00043A   AD..         MOV       R5,?V1
   \                     ??MT_UtilCommandProcessing_49:
   \   00043C   7B02         MOV       R3,#0x2
   \   00043E   8072         SJMP      ??MT_UtilCommandProcessing_50
    311              break;
    312          
    313            case MT_UTIL_ASSOC_FIND_DEVICE:
    314              MT_UtilAssocFindDevice(pBuf);
   \                     ??MT_UtilCommandProcessing_20:
   \   000440   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000443   E0           MOVX      A,@DPTR
   \   000444   FA           MOV       R2,A
   \   000445   7B00         MOV       R3,#0x0
   \   000447   12....       LCALL     `??AssocFindDevice::?relay`; Banked call to: AssocFindDevice
   \   00044A   804F         SJMP      ??MT_UtilCommandProcessing_52
    315              break;
    316          
    317            case MT_UTIL_ASSOC_GET_WITH_ADDRESS:
    318              MT_UtilAssocGetWithAddress(pBuf);
   \                     ??MT_UtilCommandProcessing_21:
   \   00044C   8A82         MOV       DPL,R2
   \   00044E   8B83         MOV       DPH,R3
   \   000450   A3           INC       DPTR
   \   000451   A3           INC       DPTR
   \   000452   E0           MOVX      A,@DPTR
   \   000453   FE           MOV       R6,A
   \   000454   EA           MOV       A,R2
   \   000455   2403         ADD       A,#0x3
   \   000457   F5..         MOV       ?V0,A
   \   000459   5002         JNC       ??MT_UtilCommandProcessing_53
   \   00045B   05..         INC       ?V1
   \                     ??MT_UtilCommandProcessing_53:
   \   00045D                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   00045D   0A           INC       R2
   \   00045E   0A           INC       R2
   \   00045F   0A           INC       R2
   \   000460   AB..         MOV       R3,?V1
   \   000462   12....       LCALL     `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   000465   E9           MOV       A,R1
   \   000466   6006         JZ        ??MT_UtilCommandProcessing_54
   \   000468   AA..         MOV       R2,?V0
   \   00046A   AB..         MOV       R3,?V1
   \   00046C   8004         SJMP      ??MT_UtilCommandProcessing_55
   \                     ??MT_UtilCommandProcessing_54:
   \   00046E   7A00         MOV       R2,#0x0
   \   000470   7B00         MOV       R3,#0x0
   \                     ??MT_UtilCommandProcessing_55:
   \   000472                ; Setup parameters for call to function AssocGetWithAddress
   \   000472   85..82       MOV       DPL,?V0
   \   000475   85..83       MOV       DPH,?V1
   \   000478   A3           INC       DPTR
   \   000479   A3           INC       DPTR
   \   00047A   A3           INC       DPTR
   \   00047B   A3           INC       DPTR
   \   00047C   A3           INC       DPTR
   \   00047D   A3           INC       DPTR
   \   00047E   A3           INC       DPTR
   \   00047F   A3           INC       DPTR
   \   000480   E0           MOVX      A,@DPTR
   \   000481   FC           MOV       R4,A
   \   000482   85..82       MOV       DPL,?V0
   \   000485   85..83       MOV       DPH,?V1
   \   000488   A3           INC       DPTR
   \   000489   A3           INC       DPTR
   \   00048A   A3           INC       DPTR
   \   00048B   A3           INC       DPTR
   \   00048C   A3           INC       DPTR
   \   00048D   A3           INC       DPTR
   \   00048E   A3           INC       DPTR
   \   00048F   A3           INC       DPTR
   \   000490   A3           INC       DPTR
   \   000491   E0           MOVX      A,@DPTR
   \   000492   F9           MOV       R1,A
   \   000493   EC           MOV       A,R4
   \   000494   2F           ADD       A,R7
   \   000495   E4           CLR       A
   \   000496   39           ADDC      A,R1
   \   000497   FD           MOV       R5,A
   \   000498   12....       LCALL     `??AssocGetWithAddress::?relay`; Banked call to: AssocGetWithAddress
   \                     ??MT_UtilCommandProcessing_52:
   \   00049B   8A..         MOV       ?V0,R2
   \   00049D   8B..         MOV       ?V1,R3
   \   00049F   AC..         MOV       R4,?V0
   \   0004A1   AD..         MOV       R5,?V1
   \   0004A3                ; Setup parameters for call to function packDev_t
   \   0004A3   7422         MOV       A,#0x22
   \   0004A5   12....       LCALL     ?XSTACK_DISP101_8
   \   0004A8   12....       LCALL     `??packDev_t::?relay`; Banked call to: packDev_t
   \   0004AB                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0004AB   7422         MOV       A,#0x22
   \   0004AD   12....       LCALL     ?XSTACK_DISP102_8
   \   0004B0   7B1C         MOV       R3,#0x1c
   \                     ??MT_UtilCommandProcessing_50:
   \   0004B2   EE           MOV       A,R6
   \   0004B3   FA           MOV       R2,A
   \   0004B4   8062         SJMP      ??MT_UtilCommandProcessing_47
    319              break;
    320          
    321            case MT_UTIL_BIND_ADD_ENTRY:
    322              MT_UtilBindAddEntry(pBuf);
   \                     ??MT_UtilCommandProcessing_23:
   \   0004B6                ; Setup parameters for call to function MT_UtilBindAddEntry
   \   0004B6   12....       LCALL     `??MT_UtilBindAddEntry::?relay`; Banked call to: MT_UtilBindAddEntry
    323              break;
   \   0004B9   806B         SJMP      ??MT_UtilCommandProcessing_7
    324          
    325          #if defined ZCL_KEY_ESTABLISH
    326            case MT_UTIL_ZCL_KEY_EST_INIT_EST:
    327              MT_UtilzclGeneral_KeyEstablish_InitiateKeyEstablishment(pBuf);
    328              break;
    329          
    330            case MT_UTIL_ZCL_KEY_EST_SIGN:
    331              MT_UtilzclGeneral_KeyEstablishment_ECDSASign(pBuf);
    332              break;
    333          #endif
    334          
    335            case MT_UTIL_SYNC_REQ:
    336              MT_UtilSync();
   \                     ??MT_UtilCommandProcessing_26:
   \   0004BB                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0004BB   7C00         MOV       R4,#0x0
   \   0004BD   7D00         MOV       R5,#0x0
   \   0004BF   7B00         MOV       R3,#0x0
   \   0004C1   7AE0         MOV       R2,#-0x20
   \   0004C3   7947         MOV       R1,#0x47
   \   0004C5   8053         SJMP      ??MT_UtilCommandProcessing_56
    337              break;
    338              
    339            case MT_UTIL_GET_DEV_NWK_INFO:
    340              MT_UtilGetDevNwkInfo(pBuf);
   \                     ??MT_UtilCommandProcessing_24:
   \   0004C7   90....       MOV       DPTR,#_NIB + 20
   \   0004CA   E0           MOVX      A,@DPTR
   \   0004CB   F8           MOV       R0,A
   \   0004CC   A3           INC       DPTR
   \   0004CD   E0           MOVX      A,@DPTR
   \   0004CE   F9           MOV       R1,A
   \   0004CF   7403         MOV       A,#0x3
   \   0004D1   12....       LCALL     ?XSTACK_DISP0_8
   \   0004D4   E8           MOV       A,R0
   \   0004D5   F0           MOVX      @DPTR,A
   \   0004D6   7404         MOV       A,#0x4
   \   0004D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0004DB   E9           MOV       A,R1
   \   0004DC   F0           MOVX      @DPTR,A
   \   0004DD   90....       MOV       DPTR,#_NIB + 33
   \   0004E0   E0           MOVX      A,@DPTR
   \   0004E1   F8           MOV       R0,A
   \   0004E2   A3           INC       DPTR
   \   0004E3   E0           MOVX      A,@DPTR
   \   0004E4   F9           MOV       R1,A
   \   0004E5   7405         MOV       A,#0x5
   \   0004E7   12....       LCALL     ?XSTACK_DISP0_8
   \   0004EA   E8           MOV       A,R0
   \   0004EB   F0           MOVX      @DPTR,A
   \   0004EC   7406         MOV       A,#0x6
   \   0004EE   12....       LCALL     ?XSTACK_DISP0_8
   \   0004F1   E9           MOV       A,R1
   \   0004F2   F0           MOVX      @DPTR,A
   \   0004F3   90....       MOV       DPTR,#_NIB
   \   0004F6   E0           MOVX      A,@DPTR
   \   0004F7   C0E0         PUSH      A
   \   0004F9   7407         MOV       A,#0x7
   \   0004FB   12....       LCALL     ?XSTACK_DISP0_8
   \   0004FE   D0E0         POP       A
   \   000500   F0           MOVX      @DPTR,A
   \   000501   90....       MOV       DPTR,#_NIB + 22
   \   000504   E0           MOVX      A,@DPTR
   \   000505   C0E0         PUSH      A
   \   000507   7408         MOV       A,#0x8
   \   000509   12....       LCALL     ?XSTACK_DISP0_8
   \   00050C   D0E0         POP       A
   \   00050E   F0           MOVX      @DPTR,A
   \   00050F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00050F   7403         MOV       A,#0x3
   \   000511   12....       LCALL     ?XSTACK_DISP102_8
   \   000514   7B06         MOV       R3,#0x6
   \   000516   7AA0         MOV       R2,#-0x60
   \                     ??MT_UtilCommandProcessing_47:
   \   000518   7967         MOV       R1,#0x67
   \                     ??MT_UtilCommandProcessing_56:
   \   00051A   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    341              break;
   \   00051D   8007         SJMP      ??MT_UtilCommandProcessing_7
    342              
    343            case MT_UTIL_SET_DEV_NWK_INFO:
    344              MT_UtilSetDevNwkInfo(pBuf);
   \                     ??MT_UtilCommandProcessing_25:
   \   00051F                ; Setup parameters for call to function MT_UtilSetDevNwkInfo
   \   00051F   12....       LCALL     `??MT_UtilSetDevNwkInfo::?relay`; Banked call to: MT_UtilSetDevNwkInfo
    345              break;
   \   000522   8002         SJMP      ??MT_UtilCommandProcessing_7
    346          #endif /* !defined NONWK */
    347          
    348          #ifdef MT_SRNG
    349            case MT_UTIL_SRNG_GENERATE:
    350              MT_UtilSrngGen();
    351              break;
    352          #endif
    353          
    354            default:
    355              status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_UtilCommandProcessing_27:
   \   000524   7F02         MOV       R7,#0x2
    356              break;
    357            }
    358          
    359            return status;
   \                     ??MT_UtilCommandProcessing_7:
   \   000526   EF           MOV       A,R7
   \   000527   F9           MOV       R1,A
   \   000528   743E         MOV       A,#0x3e
   \   00052A                REQUIRE ?Subroutine0
   \   00052A                REQUIRE _A_P0
   \   00052A                REQUIRE _A_P1
   \   00052A                REQUIRE _A_P2
   \   00052A                REQUIRE P0DIR
   \   00052A                REQUIRE P1DIR
   \   00052A                REQUIRE P2DIR
   \   00052A                ; // Fall through to label ?Subroutine0
    360          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F08         MOV       R7,#0x8
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA
    361          
    362          /***************************************************************************************************
    363          * @fn      MT_UtilGetDeviceInfo
    364          *
    365          * @brief   The Get Device Info serial message.
    366          *
    367          * @param   None.
    368          *
    369          * @return  void
    370          ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    371          static void MT_UtilGetDeviceInfo(void)
   \                     MT_UtilGetDeviceInfo:
    372          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    373            uint8  *buf;
    374            uint8  *pBuf;
    375            uint8  bufLen = MT_UTIL_DEVICE_INFO_RESPONSE_LEN;
   \   00000A   75..0E       MOV       ?V2,#0xe
    376            uint16 *assocList = NULL;
   \   00000D   7E00         MOV       R6,#0x0
   \   00000F   7F00         MOV       R7,#0x0
    377          
    378          #if !defined NONWK
    379            uint8  assocCnt = 0;
   \   000011   85..82       MOV       DPL,?XSP + 0
   \   000014   85..83       MOV       DPH,?XSP + 1
   \   000017   E4           CLR       A
   \   000018   F0           MOVX      @DPTR,A
    380          
    381            if (ZG_DEVICE_RTR_TYPE)
   \   000019   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   6004         JZ        ??MT_UtilGetDeviceInfo_0
   \   00001F   6401         XRL       A,#0x1
   \   000021   701C         JNZ       ??MT_UtilGetDeviceInfo_1
    382            {
    383              assocList = AssocMakeList( &assocCnt );
   \                     ??MT_UtilGetDeviceInfo_0:
   \   000023                ; Setup parameters for call to function AssocMakeList
   \   000023   AA..         MOV       R2,?XSP + 0
   \   000025   AB..         MOV       R3,?XSP + 1
   \   000027   12....       LCALL     `??AssocMakeList::?relay`; Banked call to: AssocMakeList
   \   00002A   8A..         MOV       ?V0,R2
   \   00002C   8B..         MOV       ?V1,R3
   \   00002E   AE..         MOV       R6,?V0
   \   000030   AF..         MOV       R7,?V1
    384              bufLen += (assocCnt * sizeof(uint16));
   \   000032   85..82       MOV       DPL,?XSP + 0
   \   000035   85..83       MOV       DPH,?XSP + 1
   \   000038   E0           MOVX      A,@DPTR
   \   000039   C3           CLR       C
   \   00003A   33           RLC       A
   \   00003B   240E         ADD       A,#0xe
   \   00003D   F5..         MOV       ?V2,A
    385            }
    386          #endif
    387          
    388            buf = osal_mem_alloc( bufLen );
   \                     ??MT_UtilGetDeviceInfo_1:
   \   00003F                ; Setup parameters for call to function osal_mem_alloc
   \   00003F   AA..         MOV       R2,?V2
   \   000041   12....       LCALL     ?Subroutine17 & 0xFFFF
    389            if ( buf )
   \                     ??CrossCallReturnLabel_46:
   \   000044   EA           MOV       A,R2
   \   000045   4B           ORL       A,R3
   \   000046   7003         JNZ       $+5
   \   000048   02....       LJMP      ??MT_UtilGetDeviceInfo_2 & 0xFFFF
    390            {
    391              pBuf = buf;
    392          
    393              *pBuf++ = ZSUCCESS; // Status
   \   00004B   8A82         MOV       DPL,R2
   \   00004D   8B83         MOV       DPH,R3
   \   00004F   E4           CLR       A
   \   000050   F0           MOVX      @DPTR,A
   \   000051   A3           INC       DPTR
   \   000052   8582..       MOV       ?V4,DPL
   \   000055   8583..       MOV       ?V5,DPH
    394          
    395              osal_nv_read( ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf );
   \   000058                ; Setup parameters for call to function osal_nv_read
   \   000058   78..         MOV       R0,#?V4
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   75..08       MOV       ?V6,#0x8
   \   000060   75..00       MOV       ?V7,#0x0
   \   000063   78..         MOV       R0,#?V6
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000068   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00006B   12....       LCALL     ?DEALLOC_XSTACK8
    396              pBuf += Z_EXTADDR_LEN;
    397          
    398          #if defined NONWK
    399              // Skip past ZStack only parameters for NONWK
    400              *pBuf++ = 0;
    401              *pBuf++ = 0;
    402              *pBuf++ = 0;
    403              *pBuf++ = 0;
    404              *pBuf = 0;
    405          #else
    406              {
    407                uint16 shortAddr = NLME_GetShortAddr();
   \   00006E                ; Setup parameters for call to function NLME_GetShortAddr
   \   00006E   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
    408                *pBuf++ = LO_UINT16( shortAddr );
   \   000071   85..82       MOV       DPL,?V4
   \   000074   85..83       MOV       DPH,?V5
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   A3           INC       DPTR
   \   00007A   A3           INC       DPTR
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   EA           MOV       A,R2
   \   000080   12....       LCALL     ?Subroutine10 & 0xFFFF
    409                *pBuf++ = HI_UINT16( shortAddr );
    410              }
   \                     ??CrossCallReturnLabel_16:
   \   000083   EB           MOV       A,R3
   \   000084   12....       LCALL     ?Subroutine10 & 0xFFFF
    411          
    412              /* Return device type */
    413              *pBuf++ = ZSTACK_DEVICE_BUILD;
   \                     ??CrossCallReturnLabel_17:
   \   000087   A3           INC       DPTR
   \   000088   7407         MOV       A,#0x7
   \   00008A   F0           MOVX      @DPTR,A
    414          
    415              /*Return device state */
    416              *pBuf++ = (uint8)devState;
   \   00008B   90....       MOV       DPTR,#devState
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   C0E0         PUSH      A
   \   000091   E5..         MOV       A,?V4
   \   000093   240B         ADD       A,#0xb
   \   000095   F582         MOV       DPL,A
   \   000097   E4           CLR       A
   \   000098   35..         ADDC      A,?V5
   \   00009A   F583         MOV       DPH,A
   \   00009C   D0E0         POP       A
   \   00009E   F0           MOVX      @DPTR,A
    417          
    418              if (ZG_DEVICE_RTR_TYPE)
   \   00009F   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   6004         JZ        ??MT_UtilGetDeviceInfo_3
   \   0000A5   6401         XRL       A,#0x1
   \   0000A7   7063         JNZ       ??MT_UtilGetDeviceInfo_4
    419              {
    420                *pBuf++ = assocCnt;
   \                     ??MT_UtilGetDeviceInfo_3:
   \   0000A9   85..82       MOV       DPL,?XSP + 0
   \   0000AC   85..83       MOV       DPH,?XSP + 1
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   C0E0         PUSH      A
   \   0000B2   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0000B5   D0E0         POP       A
   \   0000B7   F0           MOVX      @DPTR,A
   \   0000B8   E5..         MOV       A,?V4
   \   0000BA   240D         ADD       A,#0xd
   \   0000BC   F5..         MOV       ?V4,A
   \   0000BE   5002         JNC       ??MT_UtilGetDeviceInfo_5
   \   0000C0   05..         INC       ?V5
    421          
    422                if ( assocCnt )
   \                     ??MT_UtilGetDeviceInfo_5:
   \   0000C2   85..82       MOV       DPL,?XSP + 0
   \   0000C5   85..83       MOV       DPH,?XSP + 1
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   604A         JZ        ??MT_UtilGetDeviceInfo_6
    423                {
    424                  uint8 x;
    425                  uint16 *puint16 = assocList;
   \   0000CB   EE           MOV       A,R6
   \   0000CC   F8           MOV       R0,A
   \   0000CD   EF           MOV       A,R7
   \   0000CE   F9           MOV       R1,A
    426          
    427                  for ( x = 0; x < assocCnt; x++, puint16++ )
   \   0000CF   7C00         MOV       R4,#0x0
   \                     ??MT_UtilGetDeviceInfo_7:
   \   0000D1   85..82       MOV       DPL,?XSP + 0
   \   0000D4   85..83       MOV       DPH,?XSP + 1
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   FA           MOV       R2,A
   \   0000D9   EC           MOV       A,R4
   \   0000DA   C3           CLR       C
   \   0000DB   9A           SUBB      A,R2
   \   0000DC   5037         JNC       ??MT_UtilGetDeviceInfo_6
    428                  {
    429                    *pBuf++ = LO_UINT16( *puint16 );
   \   0000DE   8882         MOV       DPL,R0
   \   0000E0   8983         MOV       DPH,R1
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   85..82       MOV       DPL,?V4
   \   0000E6   85..83       MOV       DPH,?V5
   \   0000E9   F0           MOVX      @DPTR,A
    430                    *pBuf++ = HI_UINT16( *puint16 );
   \   0000EA   8882         MOV       DPL,R0
   \   0000EC   8983         MOV       DPH,R1
   \   0000EE   A3           INC       DPTR
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   85..82       MOV       DPL,?V4
   \   0000F3   85..83       MOV       DPH,?V5
   \   0000F6   A3           INC       DPTR
   \   0000F7   F0           MOVX      @DPTR,A
   \   0000F8   E5..         MOV       A,?V4
   \   0000FA   2402         ADD       A,#0x2
   \   0000FC   F5..         MOV       ?V4,A
   \   0000FE   5002         JNC       ??MT_UtilGetDeviceInfo_8
   \   000100   05..         INC       ?V5
    431                  }
   \                     ??MT_UtilGetDeviceInfo_8:
   \   000102   0C           INC       R4
   \   000103   E8           MOV       A,R0
   \   000104   2402         ADD       A,#0x2
   \   000106   F8           MOV       R0,A
   \   000107   50C8         JNC       ??MT_UtilGetDeviceInfo_7
   \   000109   09           INC       R1
   \   00010A   80C5         SJMP      ??MT_UtilGetDeviceInfo_7
    432                }
    433              }
    434              else
    435              {
    436                *pBuf++ = 0;
   \                     ??MT_UtilGetDeviceInfo_4:
   \   00010C   12....       LCALL     ?Subroutine19 & 0xFFFF
    437              }
   \                     ??CrossCallReturnLabel_32:
   \   00010F   E4           CLR       A
   \   000110   F0           MOVX      @DPTR,A
   \   000111   E5..         MOV       A,?V4
   \   000113   240D         ADD       A,#0xd
    438          #endif
    439          
    440              MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
    441                                           MT_UTIL_GET_DEVICE_INFO,
    442                                           bufLen, buf );
   \                     ??MT_UtilGetDeviceInfo_6:
   \   000115                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000115   AC..         MOV       R4,?V0
   \   000117   AD..         MOV       R5,?V1
   \   000119   AB..         MOV       R3,?V2
   \   00011B   7A00         MOV       R2,#0x0
   \   00011D   7967         MOV       R1,#0x67
   \   00011F   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    443          
    444              osal_mem_free( buf );
   \   000122                ; Setup parameters for call to function osal_mem_free
   \   000122   AA..         MOV       R2,?V0
   \   000124   AB..         MOV       R3,?V1
   \   000126   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    445            }
    446          
    447            if ( assocList )
   \                     ??MT_UtilGetDeviceInfo_2:
   \   000129   EE           MOV       A,R6
   \   00012A   4F           ORL       A,R7
   \   00012B   6007         JZ        ??MT_UtilGetDeviceInfo_9
    448            {
    449              osal_mem_free( assocList );
   \   00012D                ; Setup parameters for call to function osal_mem_free
   \   00012D   EE           MOV       A,R6
   \   00012E   FA           MOV       R2,A
   \   00012F   EF           MOV       A,R7
   \   000130   FB           MOV       R3,A
   \   000131   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    450            }
    451          }
   \                     ??MT_UtilGetDeviceInfo_9:
   \   000134   7401         MOV       A,#0x1
   \   000136   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E5..         MOV       A,?V4
   \   000002   240C         ADD       A,#0xc
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V5
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine27_0
   \   000002                ; // Fall through to label ??Subroutine27_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000003   8A..         MOV       ?V0,R2
   \   000005   8B..         MOV       ?V1,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   7C00         MOV       R4,#0x0
   \   000002   7D00         MOV       R5,#0x0
   \   000004   7A01         MOV       R2,#0x1
   \   000006                REQUIRE ??Subroutine28_0
   \   000006                ; // Fall through to label ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000005   7404         MOV       A,#0x4
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V4
   \   000004   85..83       MOV       DPH,?V5
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   22           RET
    452          
    453          #ifdef MT_SRNG
    454          /***************************************************************************************************
    455          * @fn      MT_UtilSrngGen
    456          *
    457          * @brief   Generate Secure Random Numbers
    458          *
    459          * @param   None.
    460          *
    461          * @return  void
    462          ***************************************************************************************************/
    463          static void MT_UtilSrngGen(void)
    464          {
    465            static uint32 count = 125000; /* 125000 * 8 bits = 1000000 bits */
    466            uint8 outrng[100];
    467            uint8 status;
    468          
    469            if(count > 0)
    470            {
    471              status = ssp_srng_generate((uint8 *)outrng, 100, NULL);
    472              if (status != SRNG_SUCCESS)
    473              {
    474                if(RNG_INIT_ERROR == status)
    475                {
    476                  ssp_srng_reseed();
    477                }
    478                else
    479                {
    480                  while(1)
    481                  {
    482                    ASM_NOP;
    483                  }
    484                } /* if(RNG_INIT_ERROR == status) */
    485              }/*if (status != SRNG_SUCCESS) */
    486          
    487              if(count >= 100)
    488              {
    489                count -= 100;
    490              }
    491              else
    492              {
    493                count = 0;
    494              }
    495              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ |
    496                                           (uint8)MT_RPC_SYS_DBG),
    497                                            MT_DEBUG_MSG,
    498                                            100,
    499                                            outrng);
    500              osal_start_timerEx(MT_TaskID, MT_SRNG_EVENT, 100);
    501            }
    502          }
    503          #endif
    504          
    505          /***************************************************************************************************
    506           * @fn      MT_UtilGetNvInfo
    507           *
    508           * @brief   The Get NV Info serial message.
    509           *
    510           * @param   None.
    511           *
    512           * @return  void
    513           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    514          static void MT_UtilGetNvInfo(void)
   \                     MT_UtilGetNvInfo:
    515          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    516            uint8 len;
    517            uint8 stat;
    518            uint8 *buf;
    519            uint8 *pBuf;
    520            uint16 tmp16;
    521            uint32 tmp32;
    522          
    523            /*
    524              Get required length of buffer
    525              Status + ExtAddr + ChanList + PanID  + SecLevel + PreCfgKey
    526            */
    527            len = 1 + Z_EXTADDR_LEN + 4 + 2 + 1 + SEC_KEY_LEN;
    528          
    529            buf = osal_mem_alloc( len );
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A20         MOV       R2,#0x20
   \   00000C   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00000F   AE..         MOV       R6,?V0
   \   000011   AF..         MOV       R7,?V1
    530            if ( buf )
   \   000013   EA           MOV       A,R2
   \   000014   4F           ORL       A,R7
   \   000015   7003         JNZ       $+5
   \   000017   02....       LJMP      ??MT_UtilGetNvInfo_0 & 0xFFFF
    531            {
    532              /* Assume NV not available */
    533              osal_memset( buf, 0xFF, len );
   \   00001A                ; Setup parameters for call to function osal_memset
   \   00001A   7C20         MOV       R4,#0x20
   \   00001C   7D00         MOV       R5,#0x0
   \   00001E   79FF         MOV       R1,#-0x1
   \   000020   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    534          
    535              /* Skip over status */
    536              pBuf = buf + 1;
   \   000023   8E82         MOV       DPL,R6
   \   000025   8F83         MOV       DPH,R7
   \   000027   A3           INC       DPTR
   \   000028   8582..       MOV       ?V2,DPL
   \   00002B   8583..       MOV       ?V3,DPH
    537          
    538              /* Start with 64-bit extended address */
    539              stat = osal_nv_read( ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf );
   \   00002E                ; Setup parameters for call to function osal_nv_read
   \   00002E   78..         MOV       R0,#?V2
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   75..08       MOV       ?V0,#0x8
   \   000036   75..00       MOV       ?V1,#0x0
   \   000039   78..         MOV       R0,#?V0
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003E   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000041   12....       LCALL     ?DEALLOC_XSTACK8
   \   000044   E9           MOV       A,R1
   \   000045   F5..         MOV       ?V0,A
    540              if ( stat ) stat = 0x01;
   \   000047   6003         JZ        ??MT_UtilGetNvInfo_1
   \   000049   75..01       MOV       ?V0,#0x1
    541              pBuf += Z_EXTADDR_LEN;
   \                     ??MT_UtilGetNvInfo_1:
   \   00004C   E5..         MOV       A,?V2
   \   00004E   2408         ADD       A,#0x8
   \   000050   F5..         MOV       ?V2,A
   \   000052   5002         JNC       ??MT_UtilGetNvInfo_2
   \   000054   05..         INC       ?V3
    542          
    543              /* Scan channel list (bit mask) */
    544              if (  osal_nv_read( ZCD_NV_CHANLIST, 0, sizeof( tmp32 ), &tmp32 ) )
   \                     ??MT_UtilGetNvInfo_2:
   \   000056                ; Setup parameters for call to function osal_nv_read
   \   000056   7402         MOV       A,#0x2
   \   000058   12....       LCALL     ?XSTACK_DISP100_8
   \   00005B   88..         MOV       ?V4,R0
   \   00005D   89..         MOV       ?V5,R1
   \   00005F   78..         MOV       R0,#?V4
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000064   75..04       MOV       ?V4,#0x4
   \   000067   75..00       MOV       ?V5,#0x0
   \   00006A   78..         MOV       R0,#?V4
   \   00006C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006F   7C00         MOV       R4,#0x0
   \   000071   7D00         MOV       R5,#0x0
   \   000073   7A84         MOV       R2,#-0x7c
   \   000075   12....       LCALL     ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000078   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007B   E9           MOV       A,R1
   \   00007C   6008         JZ        ??MT_UtilGetNvInfo_3
    545              {
    546                stat |= 0x02;
   \   00007E   E5..         MOV       A,?V0
   \   000080   D2E1         SETB      0xE0 /* A   */.1
   \   000082   F5..         MOV       ?V0,A
   \   000084   8060         SJMP      ??MT_UtilGetNvInfo_4
    547              }
    548              else
    549              {
    550                pBuf[0] = BREAK_UINT32( tmp32, 3 );
   \                     ??MT_UtilGetNvInfo_3:
   \   000086   7402         MOV       A,#0x2
   \   000088   12....       LCALL     ?XSTACK_DISP0_8
   \   00008B   78..         MOV       R0,#?V4
   \   00008D   12....       LCALL     ?L_MOV_X
   \   000090   7418         MOV       A,#0x18
   \   000092   78..         MOV       R0,#?V4
   \   000094   12....       LCALL     ?UL_SHR
   \   000097   85..82       MOV       DPL,?V2
   \   00009A   85..83       MOV       DPH,?V3
   \   00009D   E5..         MOV       A,?V4
   \   00009F   F0           MOVX      @DPTR,A
    551                pBuf[1] = BREAK_UINT32( tmp32, 2 );
   \   0000A0   7402         MOV       A,#0x2
   \   0000A2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A5   78..         MOV       R0,#?V4
   \   0000A7   12....       LCALL     ?L_MOV_X
   \   0000AA   7410         MOV       A,#0x10
   \   0000AC   78..         MOV       R0,#?V4
   \   0000AE   12....       LCALL     ?UL_SHR
   \   0000B1   85..82       MOV       DPL,?V2
   \   0000B4   85..83       MOV       DPH,?V3
   \   0000B7   A3           INC       DPTR
   \   0000B8   E5..         MOV       A,?V4
   \   0000BA   F0           MOVX      @DPTR,A
    552                pBuf[2] = BREAK_UINT32( tmp32, 1 );
   \   0000BB   7402         MOV       A,#0x2
   \   0000BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C0   78..         MOV       R0,#?V4
   \   0000C2   12....       LCALL     ?L_MOV_X
   \   0000C5   E5..         MOV       A,?V5
   \   0000C7   85..82       MOV       DPL,?V2
   \   0000CA   85..83       MOV       DPH,?V3
   \   0000CD   A3           INC       DPTR
   \   0000CE   A3           INC       DPTR
   \   0000CF   F0           MOVX      @DPTR,A
    553                pBuf[3] = BREAK_UINT32( tmp32, 0 );
   \   0000D0   7402         MOV       A,#0x2
   \   0000D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D5   78..         MOV       R0,#?V4
   \   0000D7   12....       LCALL     ?L_MOV_X
   \   0000DA   85..82       MOV       DPL,?V2
   \   0000DD   85..83       MOV       DPH,?V3
   \   0000E0   A3           INC       DPTR
   \   0000E1   A3           INC       DPTR
   \   0000E2   A3           INC       DPTR
   \   0000E3   E5..         MOV       A,?V4
   \   0000E5   F0           MOVX      @DPTR,A
    554              }
    555              pBuf += sizeof( tmp32 );
   \                     ??MT_UtilGetNvInfo_4:
   \   0000E6   E5..         MOV       A,?V2
   \   0000E8   2404         ADD       A,#0x4
   \   0000EA   F5..         MOV       ?V2,A
   \   0000EC   5002         JNC       ??MT_UtilGetNvInfo_5
   \   0000EE   05..         INC       ?V3
    556          
    557              /* ZigBee PanID */
    558              if ( osal_nv_read( ZCD_NV_PANID, 0, sizeof( tmp16 ), &tmp16 ) )
   \                     ??MT_UtilGetNvInfo_5:
   \   0000F0                ; Setup parameters for call to function osal_nv_read
   \   0000F0   A8..         MOV       R0,?XSP + 0
   \   0000F2   A9..         MOV       R1,?XSP + 1
   \   0000F4   88..         MOV       ?V4,R0
   \   0000F6   89..         MOV       ?V5,R1
   \   0000F8   78..         MOV       R0,#?V4
   \   0000FA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FD   75..02       MOV       ?V4,#0x2
   \   000100   75..00       MOV       ?V5,#0x0
   \   000103   78..         MOV       R0,#?V4
   \   000105   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000108   7C00         MOV       R4,#0x0
   \   00010A   7D00         MOV       R5,#0x0
   \   00010C   7A83         MOV       R2,#-0x7d
   \   00010E   12....       LCALL     ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000111   12....       LCALL     ?DEALLOC_XSTACK8
   \   000114   E9           MOV       A,R1
   \   000115   6008         JZ        ??MT_UtilGetNvInfo_6
    559              {
    560                stat |= 0x04;
   \   000117   E5..         MOV       A,?V0
   \   000119   D2E2         SETB      0xE0 /* A   */.2
   \   00011B   F5..         MOV       ?V0,A
   \   00011D   801E         SJMP      ??MT_UtilGetNvInfo_7
    561              }
    562              else
    563              {
    564                pBuf[0] = LO_UINT16( tmp16 );
   \                     ??MT_UtilGetNvInfo_6:
   \   00011F   85..82       MOV       DPL,?XSP + 0
   \   000122   85..83       MOV       DPH,?XSP + 1
   \   000125   E0           MOVX      A,@DPTR
   \   000126   85..82       MOV       DPL,?V2
   \   000129   85..83       MOV       DPH,?V3
   \   00012C   F0           MOVX      @DPTR,A
    565                pBuf[1] = HI_UINT16( tmp16 );
   \   00012D   85..82       MOV       DPL,?XSP + 0
   \   000130   85..83       MOV       DPH,?XSP + 1
   \   000133   A3           INC       DPTR
   \   000134   E0           MOVX      A,@DPTR
   \   000135   85..82       MOV       DPL,?V2
   \   000138   85..83       MOV       DPH,?V3
   \   00013B   A3           INC       DPTR
   \   00013C   F0           MOVX      @DPTR,A
    566              }
    567              pBuf += sizeof( tmp16 );
   \                     ??MT_UtilGetNvInfo_7:
   \   00013D   E5..         MOV       A,?V2
   \   00013F   2402         ADD       A,#0x2
   \   000141   F5..         MOV       ?V2,A
   \   000143   5002         JNC       ??MT_UtilGetNvInfo_8
   \   000145   05..         INC       ?V3
    568          
    569              /* Security level */
    570              if ( osal_nv_read( ZCD_NV_SECURITY_LEVEL, 0, sizeof( uint8 ), pBuf++ ) )
   \                     ??MT_UtilGetNvInfo_8:
   \   000147                ; Setup parameters for call to function osal_nv_read
   \   000147   78..         MOV       R0,#?V2
   \   000149   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00014C   75..01       MOV       ?V4,#0x1
   \   00014F   78..         MOV       R0,#?V4
   \   000151   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000154   7C00         MOV       R4,#0x0
   \   000156   7D00         MOV       R5,#0x0
   \   000158   7A61         MOV       R2,#0x61
   \   00015A   12....       LCALL     ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00015D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000160   E9           MOV       A,R1
   \   000161   F8           MOV       R0,A
   \   000162   85..82       MOV       DPL,?V2
   \   000165   85..83       MOV       DPH,?V3
   \   000168   A3           INC       DPTR
   \   000169   8582..       MOV       ?V2,DPL
   \   00016C   8583..       MOV       ?V3,DPH
   \   00016F   6006         JZ        ??MT_UtilGetNvInfo_9
    571              {
    572                stat |= 0x08;
   \   000171   E5..         MOV       A,?V0
   \   000173   D2E3         SETB      0xE0 /* A   */.3
   \   000175   F5..         MOV       ?V0,A
    573              }
    574              /* Pre-configured security key */
    575              if ( osal_nv_read( ZCD_NV_PRECFGKEY, 0, SEC_KEY_LEN, pBuf ) )
   \                     ??MT_UtilGetNvInfo_9:
   \   000177                ; Setup parameters for call to function osal_nv_read
   \   000177   78..         MOV       R0,#?V2
   \   000179   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00017C   75..10       MOV       ?V2,#0x10
   \   00017F   75..00       MOV       ?V3,#0x0
   \   000182   78..         MOV       R0,#?V2
   \   000184   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000187   7C00         MOV       R4,#0x0
   \   000189   7D00         MOV       R5,#0x0
   \   00018B   7A62         MOV       R2,#0x62
   \   00018D   12....       LCALL     ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000190   12....       LCALL     ?DEALLOC_XSTACK8
   \   000193   E9           MOV       A,R1
   \   000194   6006         JZ        ??MT_UtilGetNvInfo_10
    576              {
    577                stat |= 0x10;
   \   000196   E5..         MOV       A,?V0
   \   000198   D2E4         SETB      0xE0 /* A   */.4
   \   00019A   F5..         MOV       ?V0,A
    578              }
    579              /* Status bit mask - bit=1 indicates failure */
    580              *buf = stat;
   \                     ??MT_UtilGetNvInfo_10:
   \   00019C   8E82         MOV       DPL,R6
   \   00019E   8F83         MOV       DPH,R7
   \   0001A0   E5..         MOV       A,?V0
   \   0001A2   F0           MOVX      @DPTR,A
    581          
    582              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), MT_UTIL_GET_NV_INFO,
    583                                            len, buf );
   \   0001A3                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0001A3   EE           MOV       A,R6
   \   0001A4   FC           MOV       R4,A
   \   0001A5   EF           MOV       A,R7
   \   0001A6   FD           MOV       R5,A
   \   0001A7   7B20         MOV       R3,#0x20
   \   0001A9   7A01         MOV       R2,#0x1
   \   0001AB   7967         MOV       R1,#0x67
   \   0001AD   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    584          
    585              osal_mem_free( buf );
   \   0001B0                ; Setup parameters for call to function osal_mem_free
   \   0001B0   EE           MOV       A,R6
   \   0001B1   FA           MOV       R2,A
   \   0001B2   EF           MOV       A,R7
   \   0001B3   FB           MOV       R3,A
   \   0001B4   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    586            }
    587          }
   \                     ??MT_UtilGetNvInfo_0:
   \   0001B7   7406         MOV       A,#0x6
   \   0001B9   02....       LJMP      ?Subroutine0 & 0xFFFF
    588          
    589          /***************************************************************************************************
    590           * @fn      MT_UtilSetPanID
    591           *
    592           * @brief   Set PanID message
    593           *
    594           * @param   pBuf - pointer to the data
    595           *
    596           * @return  void
    597           ***************************************************************************************************/
    598          static void MT_UtilSetPanID(uint8 *pBuf)
    599          {
    600            uint16 temp16;
    601            uint8 retValue;
    602            uint8 cmdId;
    603          
    604            /* parse header */
    605            cmdId = pBuf[MT_RPC_POS_CMD1];
    606            pBuf += MT_RPC_FRAME_HDR_SZ;
    607          
    608            temp16 = osal_build_uint16( pBuf );
    609          
    610            retValue = osal_nv_write(ZCD_NV_PANID, 0, osal_nv_item_len( ZCD_NV_PANID ), &temp16);
    611          
    612            /* Build and send back the response */
    613            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue);
    614          }
    615          
    616          /***************************************************************************************************
    617           * @fn      MT_UtilSetChannels
    618           *
    619           * @brief   Set Channels
    620           *
    621           * @param   pBuf - pointer to the data
    622           *
    623           * @return  void
    624           ***************************************************************************************************/
    625          static void MT_UtilSetChannels(uint8 *pBuf)
    626          {
    627            uint32 tmp32;
    628            uint8 retValue;
    629            uint8 cmdId;
    630          
    631            /* parse header */
    632            cmdId = pBuf[MT_RPC_POS_CMD1];
    633            pBuf += MT_RPC_FRAME_HDR_SZ;
    634          
    635            tmp32 = osal_build_uint32( pBuf, 4 );
    636          
    637            retValue = osal_nv_write(ZCD_NV_CHANLIST, 0, osal_nv_item_len( ZCD_NV_CHANLIST ), &tmp32);
    638          
    639            /* Build and send back the response */
    640            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue);
    641          }
    642          
    643          /***************************************************************************************************
    644           * @fn      MT_UtilSetSecLevel
    645           *
    646           * @brief   Set Sec Level
    647           *
    648           * @param   byte *msg - pointer to the data
    649           *
    650           * @return  void
    651           ***************************************************************************************************/
    652          static void MT_UtilSetSecLevel(uint8 *pBuf)
    653          {
    654            uint8 retValue;
    655            uint8 cmdId;
    656          
    657            /* parse header */
    658            cmdId = pBuf[MT_RPC_POS_CMD1];
    659            pBuf += MT_RPC_FRAME_HDR_SZ;
    660          
    661            retValue = osal_nv_write( ZCD_NV_SECURITY_LEVEL, 0, osal_nv_item_len( ZCD_NV_SECURITY_LEVEL ), pBuf);
    662          
    663            /* Build and send back the response */
    664            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
    665          
    666          }
    667          
    668          /***************************************************************************************************
    669           * @fn      MT_UtilSetPreCfgKey
    670           *
    671           * @brief   Set Pre Cfg Key
    672           *
    673           * @param   pBuf - pointer to the data
    674           *
    675           * @return  void
    676           ***************************************************************************************************/
    677          static void MT_UtilSetPreCfgKey(uint8 *pBuf)
    678          {
    679            uint8 retValue;
    680            uint8 cmdId;
    681          
    682            /* parse header */
    683            cmdId = pBuf[MT_RPC_POS_CMD1];
    684            pBuf += MT_RPC_FRAME_HDR_SZ;
    685          
    686            retValue = osal_nv_write( ZCD_NV_PRECFGKEY, 0, osal_nv_item_len( ZCD_NV_PRECFGKEY ), pBuf);
    687          
    688            /* Build and send back the response */
    689            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
    690          
    691          }
    692          
    693          #ifdef FEATURE_GET_PRIMARY_IEEE
    694          /***************************************************************************************************
    695           * @fn      MT_UtilGetPrimaryIEEE
    696           *
    697           * @brief   Return a copy of the Primary IEEE address
    698           *
    699           * @param   none
    700           *
    701           * @return  void
    702           ***************************************************************************************************/
    703          static void MT_UtilGetPrimaryIEEE(void)
    704          {
    705            uint8 i;
    706            uint8 retBuf[Z_EXTADDR_LEN+1];
    707          
    708            retBuf[0] = SUCCESS;
    709          
    710            for(i = 1; i <= Z_EXTADDR_LEN; i++)
    711            {
    712              retBuf[i] = ieeeMac[i];
    713            }
    714          
    715            MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
    716                                            MT_UTIL_GET_PRIMARY_IEEE, Z_EXTADDR_LEN+1, retBuf );
    717          }
    718          #endif /* FEATURE_GET_PRIMARY_IEEE */
    719          
    720          /***************************************************************************************************
    721           * @fn      MT_UtilCallbackSub
    722           *
    723           * @brief   The Callback subscribe.
    724           *
    725           * @param   pBuf - pointer to the data
    726           *
    727           * @return  void
    728           ***************************************************************************************************/
    729          void MT_UtilCallbackSub(uint8 *pBuf)
    730          {
    731            uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
    732            uint8 retValue = ZFailure;
    733          
    734          #if defined(MT_MAC_CB_FUNC) || defined(MT_NWK_CB_FUNC) || defined(MT_ZDO_CB_FUNC) || defined(MT_AF_CB_FUNC) || defined(MT_SAPI_CB_FUNC)
    735            uint8 subSystem;
    736            uint16 subscribed_command;
    737          
    738            // Move past header
    739            retValue = ZSuccess;
    740            pBuf += MT_RPC_FRAME_HDR_SZ;
    741          
    742            /* Command */
    743            subscribed_command = osal_build_uint16( pBuf );
    744            pBuf += 2;
    745          
    746            /* Subsystem - 5 bits on the MSB of the command */
    747            subSystem = HI_UINT16(subscribed_command) & 0x1F ;
    748          
    749            /* What is the action - SUBSCRIBE or !SUBSCRIBE */
    750            if (*pBuf)
    751            {
    752              /* Turn ON */
    753            #if defined( MT_MAC_CB_FUNC )
    754              if ((subSystem == MT_RPC_SYS_MAC) || (subscribed_command == 0xFFFF))
    755              {
    756              #if !defined (FEATURE_DUAL_MAC)
    757                _macCallbackSub = 0xFFFF;
    758              #else
    759                DMMGR_SaveMacCbReg( 0xFFFF );
    760              #endif /* ! FEATURE_DUAL_MAC */
    761              }
    762            #endif
    763          
    764            #if defined( MT_NWK_CB_FUNC )
    765              if ((subSystem == MT_RPC_SYS_NWK) || (subscribed_command == 0xFFFF))
    766                _nwkCallbackSub = 0xFFFF;
    767            #endif
    768          
    769            #if defined( MT_ZDO_CB_FUNC )
    770              if ((subSystem == MT_RPC_SYS_ZDO) || (subscribed_command == 0xFFFF))
    771                _zdoCallbackSub = 0xFFFFFFFF;
    772            #endif
    773          
    774            #if defined( MT_AF_CB_FUNC )
    775              if ((subSystem == MT_RPC_SYS_AF) || (subscribed_command == 0xFFFF))
    776                _afCallbackSub = 0xFFFF;
    777            #endif
    778          
    779            #if defined( MT_SAPI_CB_FUNC )
    780              if ((subSystem == MT_RPC_SYS_SAPI) || (subscribed_command == 0xFFFF))
    781                _sapiCallbackSub = 0xFFFF;
    782            #endif
    783            }
    784            else
    785            {
    786              /* Turn OFF */
    787            #if defined( MT_MAC_CB_FUNC )
    788              if ((subSystem == MT_RPC_SYS_MAC) || (subscribed_command == 0xFFFF))
    789                _macCallbackSub = 0x0000;
    790          
    791            #if defined (FEATURE_DUAL_MAC )
    792              DMMGR_SaveMacCbReg( 0x0000 );
    793            #endif /* FEATURE_DUAL_MAC */
    794          
    795            #endif
    796          
    797            #if defined( MT_NWK_CB_FUNC )
    798              if ((subSystem == MT_RPC_SYS_NWK) || (subscribed_command == 0xFFFF))
    799                _nwkCallbackSub = 0x0000;
    800            #endif
    801          
    802            #if defined( MT_ZDO_CB_FUNC )
    803              if ((subSystem == MT_RPC_SYS_ZDO) || (subscribed_command == 0xFFFF))
    804                _zdoCallbackSub = 0x00000000;
    805            #endif
    806          
    807            #if defined( MT_AF_CB_FUNC )
    808              if ((subSystem == MT_RPC_SYS_AF) || (subscribed_command == 0xFFFF))
    809                _afCallbackSub = 0x0000;
    810            #endif
    811          
    812            #if defined( MT_SAPI_CB_FUNC )
    813              if ((subSystem == MT_RPC_SYS_SAPI) || (subscribed_command == 0xFFFF))
    814                  _sapiCallbackSub = 0x0000;
    815            #endif
    816            }
    817          #endif  // MT_MAC_CB_FUNC || MT_NWK_CB_FUNC || MT_ZDO_CB_FUNC || MT_AF_CB_FUNC || MT_SAPI_CB_FUNC || MT_SAPI_CB_FUNC
    818          
    819            /* Build and send back the response */
    820            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
    821          }
    822          
    823          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    824          /***************************************************************************************************
    825           * @fn      MT_UtilKeyEvent
    826           *
    827           * @brief   Process Key Event
    828           *
    829           * @param   pBuf - pointer to the data
    830           *
    831           * @return  void
    832           ***************************************************************************************************/
    833          static void MT_UtilKeyEvent(uint8 *pBuf)
    834          {
    835            uint8 x = 0;
    836            uint8 retValue;
    837            uint8 cmdId;
    838          
    839            /* parse header */
    840            cmdId = pBuf[MT_RPC_POS_CMD1];
    841            pBuf += MT_RPC_FRAME_HDR_SZ;
    842          
    843            /* Translate between SPI values to device values */
    844            if ( *pBuf & 0x01 )
    845              x |= HAL_KEY_SW_1;
    846            if ( *pBuf & 0x02 )
    847              x |= HAL_KEY_SW_2;
    848            if ( *pBuf & 0x04 )
    849              x |= HAL_KEY_SW_3;
    850            if ( *pBuf & 0x08 )
    851              x |= HAL_KEY_SW_4;
    852          #if defined ( HAL_KEY_SW_5 )
    853            if ( *pBuf & 0x10 )
    854              x |= HAL_KEY_SW_5;
    855          #endif
    856          #if defined ( HAL_KEY_SW_6 )
    857            if ( *pBuf & 0x20 )
    858              x |= HAL_KEY_SW_6;
    859          #endif
    860          #if defined ( HAL_KEY_SW_7 )
    861            if ( *pBuf & 0x40 )
    862              x |= HAL_KEY_SW_7;
    863          #endif
    864          #if defined ( HAL_KEY_SW_8 )
    865            if ( *pBuf & 0x80 )
    866              x |= HAL_KEY_SW_8;
    867          #endif
    868            pBuf++;
    869          
    870            retValue = OnBoard_SendKeys(x, *pBuf);
    871          
    872            /* Build and send back the response */
    873            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
    874          }
    875          #endif
    876          
    877          /***************************************************************************************************
    878           * @fn      MT_UtilTimeAlive
    879           *
    880           * @brief   Process Time Alive
    881           *
    882           * @param   None.
    883           *
    884           * @return  None
    885           ***************************************************************************************************/
    886          static void MT_UtilTimeAlive(void)
    887          {
    888            uint8 timeAlive[4];
    889            uint32 tmp32;
    890          
    891            /* Time since last reset (seconds) */
    892            tmp32 = osal_GetSystemClock() / 1000;
    893          
    894            /* Convert to high byte first into temp buffer */
    895            osal_buffer_uint32( timeAlive, tmp32 );
    896          
    897            /* Build and send back the response */
    898            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
    899                                                 MT_UTIL_TIME_ALIVE, sizeof(timeAlive), timeAlive);
    900          }
    901          
    902          #if (defined HAL_LED) && (HAL_LED == TRUE)
    903          /***************************************************************************************************
    904           * @fn      MT_UtilLedControl
    905           *
    906           * @brief   Process the LED Control Message
    907           *
    908           * @param   pBuf - pointer to the received data
    909           *
    910           * @return  None
    911           ***************************************************************************************************/
    912          static void MT_UtilLedControl(uint8 *pBuf)
    913          {
    914            uint8 iLed, Led, iMode, Mode, cmdId;
    915            uint8 retValue;
    916          
    917            /* parse header */
    918            cmdId = pBuf[MT_RPC_POS_CMD1];
    919            pBuf += MT_RPC_FRAME_HDR_SZ;
    920          
    921            /* LED and Mode */
    922            iLed = *pBuf++;
    923            iMode = *pBuf;
    924          
    925            if ( iLed == 1 )
    926              Led = HAL_LED_1;
    927            else if ( iLed == 2 )
    928              Led = HAL_LED_2;
    929            else if ( iLed == 3 )
    930              Led = HAL_LED_3;
    931            else if ( iLed == 4 )
    932              Led = HAL_LED_4;
    933            else if ( iLed == 0xFF )
    934              Led = HAL_LED_ALL;
    935            else
    936              Led = 0;
    937          
    938            if ( iMode == 0 )
    939              Mode = HAL_LED_MODE_OFF;
    940            else if ( iMode == 1 )
    941              Mode = HAL_LED_MODE_ON;
    942            else if ( iMode == 2 )
    943              Mode = HAL_LED_MODE_BLINK;
    944            else if ( iMode == 3 )
    945              Mode = HAL_LED_MODE_FLASH;
    946            else if ( iMode == 4 )
    947              Mode = HAL_LED_MODE_TOGGLE;
    948            else
    949              Led = 0;
    950          
    951            if ( Led != 0 )
    952            {
    953              HalLedSet (Led, Mode);
    954              retValue = ZSuccess;
    955            }
    956            else
    957            {
    958              retValue = ZFailure;
    959            }
    960          
    961            /* Build and send back the response */
    962            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
    963          }
    964          #endif /* HAL_LED */
    965          
    966          /***************************************************************************************************
    967           * @fn          MT_UtilSrcMatchEnable
    968           *
    969           * @brief      Enabled AUTOPEND and source address matching.
    970           *
    971           * @param      pBuf - Buffer contains the data
    972           *
    973           * @return     void
    974           ***************************************************************************************************/
    975          static void MT_UtilSrcMatchEnable (uint8 *pBuf)
    976          {
    977            uint8 retValue, cmdId;
    978          
    979            /* Parse header */
    980            cmdId = pBuf[MT_RPC_POS_CMD1];
    981            pBuf += MT_RPC_FRAME_HDR_SZ;
    982          
    983          #ifdef AUTO_PEND
    984            /* Call the routine */
    985            retValue = ZMacSrcMatchEnable();
    986          #else
    987            retValue = ZMacUnsupported;
    988          #endif
    989          
    990            /* Build and send back the response */
    991            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
    992          
    993          }
    994          
    995          /***************************************************************************************************
    996           * @fn          MT_UtilSrcMatchAddEntry
    997           *
    998           * @brief       Add a short or extended address to source address table.
    999           *
   1000           * @param       pBuf - Buffer contains the data
   1001           *
   1002           * @return      void
   1003           ***************************************************************************************************/
   1004          static void MT_UtilSrcMatchAddEntry (uint8 *pBuf)
   1005          {
   1006            uint8 retValue, cmdId;
   1007          
   1008            /* Parse header */
   1009            cmdId = pBuf[MT_RPC_POS_CMD1];
   1010            pBuf += MT_RPC_FRAME_HDR_SZ;
   1011          
   1012          #ifdef AUTO_PEND
   1013            uint16 panID;
   1014            zAddrType_t devAddr;
   1015          
   1016            /* Address mode */
   1017            devAddr.addrMode = *pBuf++;
   1018          
   1019            /* Address based on the address mode */
   1020            MT_UtilSpi2Addr( &devAddr, pBuf);
   1021            pBuf += Z_EXTADDR_LEN;
   1022          
   1023            /* PanID */
   1024            panID = osal_build_uint16( pBuf );
   1025          
   1026            /* Call the routine */
   1027            retValue =  ZMacSrcMatchAddEntry (&devAddr, panID);
   1028          #else
   1029            retValue = ZMacUnsupported;
   1030          #endif
   1031          
   1032            /* Build and send back the response */
   1033            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
   1034          }
   1035          
   1036          /***************************************************************************************************
   1037           * @fn          MT_UtilSrcMatchDeleteEntry
   1038           *
   1039           * @brief      Delete a short or extended address from source address table.
   1040           *
   1041           * @param      pBuf - Buffer contains the data
   1042           *
   1043           * @return     void
   1044           ***************************************************************************************************/
   1045          static void MT_UtilSrcMatchDeleteEntry (uint8 *pBuf)
   1046          {
   1047            uint8 retValue, cmdId;
   1048          
   1049            /* Parse header */
   1050            cmdId = pBuf[MT_RPC_POS_CMD1];
   1051            pBuf += MT_RPC_FRAME_HDR_SZ;
   1052          
   1053          #ifdef AUTO_PEND
   1054            uint16 panID;
   1055            zAddrType_t devAddr;
   1056          
   1057            /* Address mode */
   1058            devAddr.addrMode = *pBuf++;
   1059          
   1060            /* Address based on the address mode */
   1061            MT_UtilSpi2Addr( &devAddr, pBuf);
   1062            pBuf += Z_EXTADDR_LEN;
   1063          
   1064            /* PanID */
   1065            panID = osal_build_uint16( pBuf );
   1066          
   1067            /* Call the routine */
   1068            retValue =  ZMacSrcMatchDeleteEntry (&devAddr, panID);
   1069          #else
   1070            retValue = ZMacUnsupported;
   1071          #endif
   1072          
   1073            /* Build and send back the response */
   1074            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
   1075          }
   1076          
   1077          /***************************************************************************************************
   1078           * @fn          MT_UtilSrcMatchCheckSrcAddr
   1079           *
   1080           * @brief      Check if a short or extended address is in the source address table.
   1081           *
   1082           * @param      pBuf - Buffer contains the data
   1083           *
   1084           * @return     void
   1085           ***************************************************************************************************/
   1086          static void MT_UtilSrcMatchCheckSrcAddr (uint8 *pBuf)
   1087          {
   1088            uint8 cmdId;
   1089            uint8 retArray[2];
   1090          
   1091            /* Parse header */
   1092            cmdId = pBuf[MT_RPC_POS_CMD1];
   1093            pBuf += MT_RPC_FRAME_HDR_SZ;
   1094          
   1095          #if 0  /* Unsupported  */
   1096            uint16 panID;
   1097            zAddrType_t devAddr;
   1098          
   1099            /* Address mode */
   1100            devAddr.addrMode = *pBuf++;
   1101          
   1102            /* Address based on the address mode */
   1103            MT_UtilSpi2Addr( &devAddr, pBuf);
   1104            pBuf += Z_EXTADDR_LEN;
   1105          
   1106            /* PanID */
   1107            panID = osal_build_uint16( pBuf );
   1108          
   1109            /* Call the routine */
   1110            retArray[1] =  ZMacSrcMatchCheckSrcAddr (&devAddr, panID);
   1111          
   1112              /* Return failure if the index is invalid */
   1113            if (retArray[1] == ZMacSrcMatchInvalidIndex )
   1114            {
   1115              retArray[0] = ZFailure;
   1116            }
   1117            else
   1118            {
   1119              retArray[0] = ZSuccess;
   1120            }
   1121          #else
   1122            retArray[0] = ZMacUnsupported;
   1123            retArray[1] = ZMacSrcMatchInvalidIndex;
   1124          #endif
   1125          
   1126            /* Build and send back the response */
   1127            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 2, retArray );
   1128          }
   1129          
   1130          /***************************************************************************************************
   1131           * @fn          MT_UtilSrcMatchAckAllPending
   1132           *
   1133           * @brief       Enabled/disable acknowledging all packets with pending bit set
   1134           *              It is normally enabled when adding new entries to
   1135           *              the source address table fails due to the table is full, or
   1136           *              disabled when more entries are deleted and the table has
   1137           *              empty slots.
   1138           *
   1139           * @param       pBuf - Buffer contains the data
   1140           *
   1141           * @return      void
   1142           ***************************************************************************************************/
   1143          static void MT_UtilSrcMatchAckAllPending (uint8 *pBuf)
   1144          {
   1145            uint8 retValue, cmdId;
   1146          
   1147            /* Parse header */
   1148            cmdId = pBuf[MT_RPC_POS_CMD1];
   1149            pBuf += MT_RPC_FRAME_HDR_SZ;
   1150          
   1151          #ifdef AUTO_PEND
   1152            /* Call the routine */
   1153            retValue = ZMacSrcMatchAckAllPending(*pBuf);
   1154          #else
   1155            retValue = ZMacUnsupported;
   1156          #endif
   1157          
   1158            /* Build and send back the response */
   1159            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
   1160          }
   1161          
   1162          /***************************************************************************************************
   1163           * @fn          MT_UtilSrcMatchCheckAllPending
   1164           *
   1165           * @brief       Check if acknowledging all packets with pending bit set
   1166           *              is enabled.
   1167           *
   1168           * @param       pBuf - Buffer contains the data
   1169           *
   1170           * @return      void
   1171           ***************************************************************************************************/
   1172          static void MT_UtilSrcMatchCheckAllPending (uint8 *pBuf)
   1173          {
   1174            uint8 retArray[2], cmdId;
   1175          
   1176            /* Parse header */
   1177            cmdId = pBuf[MT_RPC_POS_CMD1];
   1178            pBuf += MT_RPC_FRAME_HDR_SZ;
   1179          
   1180          #ifdef AUTO_PEND
   1181            /* Call the routine */
   1182            retArray[0] = ZMacSuccess;
   1183            retArray[1] = ZMacSrcMatchCheckAllPending();
   1184          #else
   1185            retArray[0] = ZMacUnsupported;
   1186            retArray[1] = FALSE;
   1187          #endif
   1188          
   1189            /* Build and send back the response */
   1190            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 2, retArray );
   1191          }
   1192          
   1193          /***************************************************************************************************
   1194           * SUPPORT
   1195           ***************************************************************************************************/
   1196          
   1197          #ifdef AUTO_PEND
   1198          /***************************************************************************************************
   1199           * @fn      MT_UtilRevExtCpy
   1200           *
   1201           * @brief
   1202           *
   1203           *   Reverse-copy an extended address.
   1204           *
   1205           * @param   pDst - Pointer to data destination
   1206           * @param   pSrc - Pointer to data source
   1207           *
   1208           * @return  void
   1209           ***************************************************************************************************/
   1210          static void MT_UtilRevExtCpy( uint8 *pDst, uint8 *pSrc )
   1211          {
   1212            int8 i;
   1213          
   1214            for ( i = Z_EXTADDR_LEN - 1; i >= 0; i-- )
   1215            {
   1216              *pDst++ = pSrc[i];
   1217            }
   1218          }
   1219          
   1220          /***************************************************************************************************
   1221           * @fn      MT_UtilSpi2Addr
   1222           *
   1223           * @brief   Copy an address from an SPI message to an address struct.  The
   1224           *          addrMode in pAddr must already be set.
   1225           *
   1226           * @param   pDst - Pointer to address struct
   1227           * @param   pSrc - Pointer SPI message byte array
   1228           *
   1229           * @return  void
   1230           ***************************************************************************************************/
   1231          static void MT_UtilSpi2Addr( zAddrType_t *pDst, uint8 *pSrc )
   1232          {
   1233            if ( pDst->addrMode == Addr16Bit )
   1234            {
   1235              pDst->addr.shortAddr = osal_build_uint16( pSrc );
   1236            }
   1237            else if ( pDst->addrMode == Addr64Bit )
   1238            {
   1239              MT_UtilRevExtCpy( pDst->addr.extAddr, pSrc );
   1240            }
   1241          }
   1242          #endif // AUTO_PEND
   1243          
   1244          /***************************************************************************************************
   1245           * @fn      MT_UtilGpioRead
   1246           *
   1247           * @brief   Read values of all GPIOs (P0_0 -P2_4)
   1248           *
   1249           * @param   void
   1250           *
   1251           * @return  P0, P1, P2, P0DIR, P1DIR, P2DIR
   1252           ***************************************************************************************************/
   1253          static void MT_UtilGpioRead(uint8 *pBuf)
   1254          {
   1255          #if defined ( HAL_MCU_CC2530 )
   1256            uint8 rtrn[6] = {P0, P1, P2, P0DIR, P1DIR, P2DIR};
   1257          #else
   1258            uint8 rtrn[6] = {0, 0, 0, 0, 0, 0};
   1259          #endif
   1260            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), MT_UTIL_GPIO_READ,
   1261              6, rtrn);
   1262          }
   1263          
   1264          /***************************************************************************************************
   1265           * @fn      MT_UtilGpioSetDirection
   1266           *
   1267           * @brief   Set the direction of a specific GPIO (P0_0 -P2_4)
   1268           *
   1269           * @param   port - 0, 1 or 2
   1270           * @param   bit - 0 - 7
   1271           * @param   direction - 0 for input, 1 for output
   1272           *
   1273           * @return  oldP0DIR, oldP1DIR, oldP2DIR, newP0DIR, newP1DIR, newP2DIR
   1274           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1275          static void MT_UtilGpioSetDirection(uint8 *pBuf)
   \                     MT_UtilGpioSetDirection:
   1276          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1277          #if defined ( HAL_MCU_CC2530 )
   1278            uint8 rtrn[6] = {P0DIR, P1DIR, P2DIR, 0, 0, 0};
   \   00000A   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0}>`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   7406         MOV       A,#0x6
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   000016   E5FD         MOV       A,0xfd
   \   000018   85..82       MOV       DPL,?XSP + 0
   \   00001B   85..83       MOV       DPH,?XSP + 1
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   E5FE         MOV       A,0xfe
   \   000021   C0E0         PUSH      A
   \   000023   7401         MOV       A,#0x1
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   D0E0         POP       A
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   E5FF         MOV       A,0xff
   \   00002D   C0E0         PUSH      A
   \   00002F   7402         MOV       A,#0x2
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   D0E0         POP       A
   \   000036   12....       LCALL     ?Subroutine4 & 0xFFFF
   1279            uint8 port = pBuf[MT_RPC_POS_DAT0 + 0];
   1280            uint8 bit = pBuf[MT_RPC_POS_DAT0 + 1];
   1281            uint8 direction = pBuf[MT_RPC_POS_DAT0 + 2];
   1282          
   1283            if (direction == 0)
   \                     ??CrossCallReturnLabel_4:
   \   000039   7044         JNZ       ??MT_UtilGpioSetDirection_0
   1284            {
   1285              switch (port)
   \   00003B   E9           MOV       A,R1
   \   00003C   6008         JZ        ??MT_UtilGpioSetDirection_1
   \   00003E   14           DEC       A
   \   00003F   6018         JZ        ??MT_UtilGpioSetDirection_2
   \   000041   14           DEC       A
   \   000042   6028         JZ        ??MT_UtilGpioSetDirection_3
   \   000044   8078         SJMP      ??MT_UtilGpioSetDirection_4
   1286              {
   1287                case 0:
   1288                  P0DIR &= (~ BV(bit));
   \                     ??MT_UtilGpioSetDirection_1:
   \   000046   75..01       MOV       ?V0,#0x1
   \   000049   75..00       MOV       ?V1,#0x0
   \   00004C   E8           MOV       A,R0
   \   00004D   78..         MOV       R0,#?V0
   \   00004F   12....       LCALL     ?S_SHL
   \   000052   E5..         MOV       A,?V0
   \   000054   F4           CPL       A
   \   000055   52FD         ANL       0xfd,A
   1289                  break;
   \   000057   8065         SJMP      ??MT_UtilGpioSetDirection_4
   1290                case 1:
   1291                  P1DIR &= (~ BV(bit));
   \                     ??MT_UtilGpioSetDirection_2:
   \   000059   75..01       MOV       ?V0,#0x1
   \   00005C   75..00       MOV       ?V1,#0x0
   \   00005F   E8           MOV       A,R0
   \   000060   78..         MOV       R0,#?V0
   \   000062   12....       LCALL     ?S_SHL
   \   000065   E5..         MOV       A,?V0
   \   000067   F4           CPL       A
   \   000068   52FE         ANL       0xfe,A
   1292                  break;
   \   00006A   8052         SJMP      ??MT_UtilGpioSetDirection_4
   1293                case 2:
   1294                  P2DIR &= (~ BV(bit));
   \                     ??MT_UtilGpioSetDirection_3:
   \   00006C   75..01       MOV       ?V0,#0x1
   \   00006F   75..00       MOV       ?V1,#0x0
   \   000072   E8           MOV       A,R0
   \   000073   78..         MOV       R0,#?V0
   \   000075   12....       LCALL     ?S_SHL
   \   000078   E5..         MOV       A,?V0
   \   00007A   F4           CPL       A
   \   00007B   52FF         ANL       0xff,A
   1295                  break;
   \   00007D   803F         SJMP      ??MT_UtilGpioSetDirection_4
   1296              }
   1297            }
   1298            else
   1299            {
   1300              switch (port)
   \                     ??MT_UtilGpioSetDirection_0:
   \   00007F   E9           MOV       A,R1
   \   000080   6008         JZ        ??MT_UtilGpioSetDirection_5
   \   000082   14           DEC       A
   \   000083   6017         JZ        ??MT_UtilGpioSetDirection_6
   \   000085   14           DEC       A
   \   000086   6026         JZ        ??MT_UtilGpioSetDirection_7
   \   000088   8034         SJMP      ??MT_UtilGpioSetDirection_4
   1301              {
   1302                case 0:
   1303                  P0DIR |= BV(bit);
   \                     ??MT_UtilGpioSetDirection_5:
   \   00008A   75..01       MOV       ?V0,#0x1
   \   00008D   75..00       MOV       ?V1,#0x0
   \   000090   E8           MOV       A,R0
   \   000091   78..         MOV       R0,#?V0
   \   000093   12....       LCALL     ?S_SHL
   \   000096   E5..         MOV       A,?V0
   \   000098   42FD         ORL       0xfd,A
   1304                  break;
   \   00009A   8022         SJMP      ??MT_UtilGpioSetDirection_4
   1305                case 1:
   1306                  P1DIR |= BV(bit);
   \                     ??MT_UtilGpioSetDirection_6:
   \   00009C   75..01       MOV       ?V0,#0x1
   \   00009F   75..00       MOV       ?V1,#0x0
   \   0000A2   E8           MOV       A,R0
   \   0000A3   78..         MOV       R0,#?V0
   \   0000A5   12....       LCALL     ?S_SHL
   \   0000A8   E5..         MOV       A,?V0
   \   0000AA   42FE         ORL       0xfe,A
   1307                  break;
   \   0000AC   8010         SJMP      ??MT_UtilGpioSetDirection_4
   1308                case 2:
   1309                  P2DIR |= BV(bit);
   \                     ??MT_UtilGpioSetDirection_7:
   \   0000AE   75..01       MOV       ?V0,#0x1
   \   0000B1   75..00       MOV       ?V1,#0x0
   \   0000B4   E8           MOV       A,R0
   \   0000B5   78..         MOV       R0,#?V0
   \   0000B7   12....       LCALL     ?S_SHL
   \   0000BA   E5..         MOV       A,?V0
   \   0000BC   42FF         ORL       0xff,A
   1310                  break;
   1311              }
   1312            }
   1313          
   1314            rtrn[3] = P0DIR;
   \                     ??MT_UtilGpioSetDirection_4:
   \   0000BE   E5FD         MOV       A,0xfd
   \   0000C0   C0E0         PUSH      A
   \   0000C2   7403         MOV       A,#0x3
   \   0000C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C7   D0E0         POP       A
   \   0000C9   F0           MOVX      @DPTR,A
   1315            rtrn[4] = P1DIR;
   \   0000CA   E5FE         MOV       A,0xfe
   \   0000CC   C0E0         PUSH      A
   \   0000CE   7404         MOV       A,#0x4
   \   0000D0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D3   D0E0         POP       A
   \   0000D5   F0           MOVX      @DPTR,A
   1316            rtrn[5] = P2DIR;
   \   0000D6   E5FF         MOV       A,0xff
   \   0000D8   C0E0         PUSH      A
   \   0000DA   7405         MOV       A,#0x5
   \   0000DC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DF   D0E0         POP       A
   \   0000E1   F0           MOVX      @DPTR,A
   1317          #else
   1318            uint8 rtrn[6] = {0, 0, 0, 0, 0, 0};
   1319          #endif
   1320          
   1321            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), MT_UTIL_GPIO_SET_DIRECTION,
   1322              6, rtrn);
   \   0000E2                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000E2   AC..         MOV       R4,?XSP + 0
   \   0000E4   AD..         MOV       R5,?XSP + 1
   \   0000E6   7B06         MOV       R3,#0x6
   \   0000E8   7A14         MOV       R2,#0x14
   \   0000EA   7967         MOV       R1,#0x67
   \   0000EC   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1323          }
   \   0000EF   7406         MOV       A,#0x6
   \   0000F1                REQUIRE ?Subroutine1
   \   0000F1                REQUIRE P0DIR
   \   0000F1                REQUIRE P1DIR
   \   0000F1                REQUIRE P2DIR
   \   0000F1                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine29_0
   \   000003                ; // Fall through to label ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F8           MOV       R0,A
   \   00000F   8A82         MOV       DPL,R2
   \   000011   8B83         MOV       DPH,R3
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   1324          
   1325          /***************************************************************************************************
   1326           * @fn      MT_UtilGpioWrite
   1327           *
   1328           * @brief   Write value of a specific GPIO (P0_0 -P2_4)
   1329           *
   1330           * @param   port - 0, 1 or 2
   1331           * @param   bit - 0 - 7
   1332           * @param   value - 0 or 1
   1333           *
   1334           * @return  oldP0, oldP1, oldP2, newP0, newP1, newP2, P0DIR, P1DIR, P2DIR
   1335           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1336          static void MT_UtilGpioWrite(uint8 *pBuf)
   \                     MT_UtilGpioWrite:
   1337          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1338          #if defined ( HAL_MCU_CC2530 )
   1339            uint8 rtrn[9] = {P0, P1, P2, 0, 0, 0, P0DIR, P1DIR, P2DIR};
   \   00000A   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0}>`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   7409         MOV       A,#0x9
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   000016   E580         MOV       A,0x80
   \   000018   85..82       MOV       DPL,?XSP + 0
   \   00001B   85..83       MOV       DPH,?XSP + 1
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   E590         MOV       A,0x90
   \   000021   C0E0         PUSH      A
   \   000023   7401         MOV       A,#0x1
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   D0E0         POP       A
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   E5A0         MOV       A,0xa0
   \   00002D   C0E0         PUSH      A
   \   00002F   7402         MOV       A,#0x2
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   D0E0         POP       A
   \   000036   F0           MOVX      @DPTR,A
   \   000037   E5FD         MOV       A,0xfd
   \   000039   C0E0         PUSH      A
   \   00003B   7406         MOV       A,#0x6
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   D0E0         POP       A
   \   000042   F0           MOVX      @DPTR,A
   \   000043   E5FE         MOV       A,0xfe
   \   000045   C0E0         PUSH      A
   \   000047   7407         MOV       A,#0x7
   \   000049   12....       LCALL     ?XSTACK_DISP0_8
   \   00004C   D0E0         POP       A
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F   E5FF         MOV       A,0xff
   \   000051   C0E0         PUSH      A
   \   000053   7408         MOV       A,#0x8
   \   000055   12....       LCALL     ?XSTACK_DISP0_8
   \   000058   D0E0         POP       A
   \   00005A   12....       LCALL     ?Subroutine4 & 0xFFFF
   1340            uint8 port = pBuf[MT_RPC_POS_DAT0 + 0];
   1341            uint8 bit = pBuf[MT_RPC_POS_DAT0 + 1];
   1342            uint8 value = pBuf[MT_RPC_POS_DAT0 + 2];
   1343          
   1344            if (value == 0)
   \                     ??CrossCallReturnLabel_5:
   \   00005D   7044         JNZ       ??MT_UtilGpioWrite_0
   1345            {
   1346              switch (port)
   \   00005F   E9           MOV       A,R1
   \   000060   6008         JZ        ??MT_UtilGpioWrite_1
   \   000062   14           DEC       A
   \   000063   6018         JZ        ??MT_UtilGpioWrite_2
   \   000065   14           DEC       A
   \   000066   6028         JZ        ??MT_UtilGpioWrite_3
   \   000068   8078         SJMP      ??MT_UtilGpioWrite_4
   1347              {
   1348                case 0:
   1349                  P0 &= (~ BV(bit));
   \                     ??MT_UtilGpioWrite_1:
   \   00006A   75..01       MOV       ?V0,#0x1
   \   00006D   75..00       MOV       ?V1,#0x0
   \   000070   E8           MOV       A,R0
   \   000071   78..         MOV       R0,#?V0
   \   000073   12....       LCALL     ?S_SHL
   \   000076   E5..         MOV       A,?V0
   \   000078   F4           CPL       A
   \   000079   5280         ANL       0x80,A
   1350                  break;
   \   00007B   8065         SJMP      ??MT_UtilGpioWrite_4
   1351                case 1:
   1352                  P1 &= (~ BV(bit));
   \                     ??MT_UtilGpioWrite_2:
   \   00007D   75..01       MOV       ?V0,#0x1
   \   000080   75..00       MOV       ?V1,#0x0
   \   000083   E8           MOV       A,R0
   \   000084   78..         MOV       R0,#?V0
   \   000086   12....       LCALL     ?S_SHL
   \   000089   E5..         MOV       A,?V0
   \   00008B   F4           CPL       A
   \   00008C   5290         ANL       0x90,A
   1353                  break;
   \   00008E   8052         SJMP      ??MT_UtilGpioWrite_4
   1354                case 2:
   1355                  P2 &= (~ BV(bit));
   \                     ??MT_UtilGpioWrite_3:
   \   000090   75..01       MOV       ?V0,#0x1
   \   000093   75..00       MOV       ?V1,#0x0
   \   000096   E8           MOV       A,R0
   \   000097   78..         MOV       R0,#?V0
   \   000099   12....       LCALL     ?S_SHL
   \   00009C   E5..         MOV       A,?V0
   \   00009E   F4           CPL       A
   \   00009F   52A0         ANL       0xa0,A
   1356                  break;
   \   0000A1   803F         SJMP      ??MT_UtilGpioWrite_4
   1357              }
   1358            }
   1359            else
   1360            {
   1361              switch (port)
   \                     ??MT_UtilGpioWrite_0:
   \   0000A3   E9           MOV       A,R1
   \   0000A4   6008         JZ        ??MT_UtilGpioWrite_5
   \   0000A6   14           DEC       A
   \   0000A7   6017         JZ        ??MT_UtilGpioWrite_6
   \   0000A9   14           DEC       A
   \   0000AA   6026         JZ        ??MT_UtilGpioWrite_7
   \   0000AC   8034         SJMP      ??MT_UtilGpioWrite_4
   1362              {
   1363                case 0:
   1364                  P0 |= BV(bit);
   \                     ??MT_UtilGpioWrite_5:
   \   0000AE   75..01       MOV       ?V0,#0x1
   \   0000B1   75..00       MOV       ?V1,#0x0
   \   0000B4   E8           MOV       A,R0
   \   0000B5   78..         MOV       R0,#?V0
   \   0000B7   12....       LCALL     ?S_SHL
   \   0000BA   E5..         MOV       A,?V0
   \   0000BC   4280         ORL       0x80,A
   1365                  break;
   \   0000BE   8022         SJMP      ??MT_UtilGpioWrite_4
   1366                case 1:
   1367                  P1 |= BV(bit);
   \                     ??MT_UtilGpioWrite_6:
   \   0000C0   75..01       MOV       ?V0,#0x1
   \   0000C3   75..00       MOV       ?V1,#0x0
   \   0000C6   E8           MOV       A,R0
   \   0000C7   78..         MOV       R0,#?V0
   \   0000C9   12....       LCALL     ?S_SHL
   \   0000CC   E5..         MOV       A,?V0
   \   0000CE   4290         ORL       0x90,A
   1368                  break;
   \   0000D0   8010         SJMP      ??MT_UtilGpioWrite_4
   1369                case 2:
   1370                  P2 |= BV(bit);
   \                     ??MT_UtilGpioWrite_7:
   \   0000D2   75..01       MOV       ?V0,#0x1
   \   0000D5   75..00       MOV       ?V1,#0x0
   \   0000D8   E8           MOV       A,R0
   \   0000D9   78..         MOV       R0,#?V0
   \   0000DB   12....       LCALL     ?S_SHL
   \   0000DE   E5..         MOV       A,?V0
   \   0000E0   42A0         ORL       0xa0,A
   1371                  break;
   1372              }
   1373            }
   1374          
   1375            rtrn[3] = P0;
   \                     ??MT_UtilGpioWrite_4:
   \   0000E2   E580         MOV       A,0x80
   \   0000E4   C0E0         PUSH      A
   \   0000E6   7403         MOV       A,#0x3
   \   0000E8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EB   D0E0         POP       A
   \   0000ED   F0           MOVX      @DPTR,A
   1376            rtrn[4] = P1;
   \   0000EE   E590         MOV       A,0x90
   \   0000F0   C0E0         PUSH      A
   \   0000F2   7404         MOV       A,#0x4
   \   0000F4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F7   D0E0         POP       A
   \   0000F9   F0           MOVX      @DPTR,A
   1377            rtrn[5] = P2;
   \   0000FA   E5A0         MOV       A,0xa0
   \   0000FC   C0E0         PUSH      A
   \   0000FE   7405         MOV       A,#0x5
   \   000100   12....       LCALL     ?XSTACK_DISP0_8
   \   000103   D0E0         POP       A
   \   000105   F0           MOVX      @DPTR,A
   1378          
   1379          #else
   1380            uint8 rtrn[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
   1381          #endif
   1382          
   1383            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), MT_UTIL_GPIO_WRITE,
   1384              9, rtrn);
   \   000106                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000106   AC..         MOV       R4,?XSP + 0
   \   000108   AD..         MOV       R5,?XSP + 1
   \   00010A   7B09         MOV       R3,#0x9
   \   00010C   7A16         MOV       R2,#0x16
   \   00010E   7967         MOV       R1,#0x67
   \   000110   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1385          }
   \   000113   7409         MOV       A,#0x9
   \   000115   02....       LJMP      ?Subroutine1 & 0xFFFF
   \   000118                REQUIRE _A_P0
   \   000118                REQUIRE _A_P1
   \   000118                REQUIRE _A_P2
   \   000118                REQUIRE P0DIR
   \   000118                REQUIRE P1DIR
   \   000118                REQUIRE P2DIR

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   1386          
   1387          #if !defined NONWK
   1388          /**************************************************************************************************
   1389           * @fn      MT_UtilDataReq
   1390           *
   1391           * @brief   Process the MAC Data Request command.
   1392           *
   1393           * @param   pBuf - pointer to the received data
   1394           *
   1395           * @return  None
   1396          **************************************************************************************************/
   1397          static void MT_UtilDataReq(uint8 *pBuf)
   1398          {
   1399            uint8 rtrn = NwkPollReq(pBuf[MT_RPC_POS_DAT0]);
   1400            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), MT_UTIL_DATA_REQ,
   1401                                                                                         1, &rtrn);
   1402          }
   1403          
   1404          /***************************************************************************************************
   1405           * @fn      MT_UtilAddrMgrEntryLookupExt
   1406           *
   1407           * @brief   Proxy the AddrMgrEntryLookupExt() function.
   1408           *
   1409           * @param   pBuf - pointer to the received buffer
   1410           *
   1411           * @return  void
   1412           ***************************************************************************************************/
   1413          static void MT_UtilAddrMgrEntryLookupExt(uint8 *pBuf)
   1414          {
   1415            uint8 nwkAddr[2];
   1416            AddrMgrEntry_t entry;
   1417            uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
   1418            pBuf += MT_RPC_FRAME_HDR_SZ;
   1419          
   1420            osal_memcpy(entry.extAddr, pBuf, Z_EXTADDR_LEN);
   1421            (void)AddrMgrEntryLookupExt(&entry);
   1422          
   1423            nwkAddr[0] = LO_UINT16(entry.nwkAddr);
   1424            nwkAddr[1] = HI_UINT16(entry.nwkAddr);
   1425            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
   1426                                                 cmdId, sizeof(uint16), nwkAddr);
   1427          }
   1428          
   1429          /***************************************************************************************************
   1430           * @fn      MT_UtilAddrMgrEntryLookupNwk
   1431           *
   1432           * @brief   Proxy the AddrMgrEntryLookupNwk() function.
   1433           *
   1434           * @param   pBuf - pointer to the received buffer
   1435           *
   1436           * @return  void
   1437           ***************************************************************************************************/
   1438          static void MT_UtilAddrMgrEntryLookupNwk(uint8 *pBuf)
   1439          {
   1440            AddrMgrEntry_t entry;
   1441            uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
   1442            pBuf += MT_RPC_FRAME_HDR_SZ;
   1443          
   1444            entry.nwkAddr = osal_build_uint16( pBuf );
   1445            (void)AddrMgrEntryLookupNwk(&entry);
   1446          
   1447            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
   1448                                                 cmdId, Z_EXTADDR_LEN, entry.extAddr);
   1449          }
   1450          
   1451          #if defined MT_SYS_KEY_MANAGEMENT
   1452          /***************************************************************************************************
   1453           * @fn      MT_UtilAPSME_LinkKeyDataGet
   1454           *
   1455           * @brief   Retrieves APS Link Key data from NV.
   1456           *
   1457           * @param   pBuf - pointer to the received buffer
   1458           *
   1459           * @return  void
   1460           ***************************************************************************************************/
   1461          static void MT_UtilAPSME_LinkKeyDataGet(uint8 *pBuf)
   1462          {
   1463            uint8 rsp[MT_APSME_LINKKEY_GET_RSP_LEN];
   1464            APSME_LinkKeyData_t *pData = NULL;
   1465            uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
   1466            uint16 apsLinkKeyNvId;
   1467            uint32 *apsRxFrmCntr;
   1468            uint32 *apsTxFrmCntr;
   1469          
   1470            pBuf += MT_RPC_FRAME_HDR_SZ;
   1471          
   1472            *rsp = APSME_LinkKeyNVIdGet(pBuf, &apsLinkKeyNvId);
   1473          
   1474            if (SUCCESS == *rsp)
   1475            {
   1476              pData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   1477          
   1478              if (pData != NULL)
   1479              {
   1480                // retrieve key from NV
   1481                if ( osal_nv_read( apsLinkKeyNvId, 0,
   1482                                  sizeof(APSME_LinkKeyData_t), pData) == SUCCESS)
   1483          
   1484                {
   1485                  uint8 *ptr = rsp+1;
   1486                  apsRxFrmCntr = &ApsLinkKeyFrmCntr[apsLinkKeyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr;
   1487                  apsTxFrmCntr = &ApsLinkKeyFrmCntr[apsLinkKeyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr;
   1488          
   1489                  (void)osal_memcpy(ptr, pData->key, SEC_KEY_LEN);
   1490                  ptr += SEC_KEY_LEN;
   1491                  osal_buffer_uint32( ptr, *apsTxFrmCntr );
   1492                  ptr += 4;
   1493                  osal_buffer_uint32( ptr, *apsRxFrmCntr );
   1494                }
   1495          
   1496                // clear copy of key in RAM
   1497                osal_memset( pData, 0x00, sizeof(APSME_LinkKeyData_t) );
   1498          
   1499                osal_mem_free(pData);
   1500              }
   1501            }
   1502            else
   1503            {
   1504              // set data key and counters 0xFF
   1505              osal_memset(&rsp[1], 0xFF, SEC_KEY_LEN + (MT_UTIL_FRM_CTR_LEN * 2));
   1506            }
   1507          
   1508            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
   1509                                                 MT_APSME_LINKKEY_GET_RSP_LEN, rsp);
   1510          
   1511            // clear key data
   1512            osal_memset(rsp, 0x00, MT_APSME_LINKKEY_GET_RSP_LEN);
   1513          
   1514          }
   1515          
   1516          /***************************************************************************************************
   1517           * @fn      MT_UtilAPSME_LinkKeyNvIdGet
   1518           *
   1519           * @brief   Retrieves APS Link Key NV ID from the entry table.
   1520           *
   1521           * @param   pBuf - pointer to the received buffer
   1522           *
   1523           * @return  void
   1524           ***************************************************************************************************/
   1525          static void MT_UtilAPSME_LinkKeyNvIdGet(uint8 *pBuf)
   1526          {
   1527            uint8 rsp[MT_APSME_LINKKEY_NV_ID_GET_RSP_LEN];
   1528            uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
   1529            uint16 apsLinkKeyNvId;
   1530          
   1531            pBuf += MT_RPC_FRAME_HDR_SZ;
   1532          
   1533            *rsp = APSME_LinkKeyNVIdGet(pBuf, &apsLinkKeyNvId);
   1534          
   1535            if (SUCCESS == *rsp)
   1536            {
   1537              rsp[1] = LO_UINT16(apsLinkKeyNvId);
   1538              rsp[2] = HI_UINT16(apsLinkKeyNvId);
   1539            }
   1540            else
   1541            {
   1542              // send failure response with invalid NV ID
   1543              osal_memset(&rsp[1], 0xFF, 2);
   1544            }
   1545          
   1546            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
   1547                                                 MT_APSME_LINKKEY_NV_ID_GET_RSP_LEN, rsp);
   1548          }
   1549          #endif // MT_SYS_KEY_MANAGEMENT
   1550          
   1551          /***************************************************************************************************
   1552           * @fn      MT_UtilAPSME_RequestKeyCmd
   1553           *
   1554           * @brief   Send RequestKey command message to TC for a specific partner Address.
   1555           *
   1556           * @param   pBuf  - pointer to the received buffer
   1557           *
   1558           * @return  void
   1559           ***************************************************************************************************/
   1560          void MT_UtilAPSME_RequestKeyCmd(uint8 *pBuf)
   1561          {
   1562            uint8 cmdId;
   1563            uint8 partnerAddr[Z_EXTADDR_LEN];
   1564            uint8 retValue;
   1565          
   1566            // parse header
   1567            cmdId = pBuf[MT_RPC_POS_CMD1];
   1568            pBuf += MT_RPC_FRAME_HDR_SZ;
   1569          
   1570            /* PartnerAddress */
   1571            osal_memcpy(partnerAddr, pBuf, Z_EXTADDR_LEN);
   1572          
   1573            retValue = (uint8)ZDSecMgrRequestAppKey(partnerAddr);
   1574          
   1575            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue);
   1576          }
   1577          
   1578          /***************************************************************************************************
   1579           * @fn      MT_UtilAssocCount
   1580           *
   1581           * @brief   Proxy the AssocCount() function.
   1582           *
   1583           * @param   pBuf - pointer to the received buffer
   1584           *
   1585           * @return  void
   1586           ***************************************************************************************************/
   1587          static void MT_UtilAssocCount(uint8 *pBuf)
   1588          {
   1589            uint16 cnt;
   1590            uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
   1591            pBuf += MT_RPC_FRAME_HDR_SZ;
   1592          
   1593            cnt = AssocCount(pBuf[0], pBuf[1]);
   1594            pBuf[0] = LO_UINT16(cnt);
   1595            pBuf[1] = HI_UINT16(cnt);
   1596          
   1597            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 2, pBuf);
   1598          }
   1599          
   1600          /***************************************************************************************************
   1601           * @fn      MT_UtilAssocFindDevice
   1602           *
   1603           * @brief   Get an associated device by index.
   1604           *
   1605           * @param   pBuf - pointer to the received buffer
   1606           *
   1607           * @return  void
   1608           ***************************************************************************************************/
   1609          static void MT_UtilAssocFindDevice(uint8 *pBuf)
   1610          {
   1611            uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
   1612            uint8 buf[sizeof(associated_devices_t)];
   1613          
   1614            packDev_t(buf, AssocFindDevice(pBuf[MT_RPC_FRAME_HDR_SZ]));
   1615            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
   1616                                                 sizeof(associated_devices_t), buf);
   1617          }
   1618          
   1619          /***************************************************************************************************
   1620           * @fn      MT_UtilAssocGetWithAddress
   1621           *
   1622           * @brief   Get an associated device by address.
   1623           *
   1624           * @param   pBuf - pointer to the received buffer
   1625           *
   1626           * @return  void
   1627           ***************************************************************************************************/
   1628          static void MT_UtilAssocGetWithAddress(uint8 *pBuf)
   1629          {
   1630            extern associated_devices_t *AssocGetWithAddress(uint8 *extAddr, uint16 shortAddr);
   1631            uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
   1632            uint8 buf[sizeof(associated_devices_t)];
   1633          
   1634            pBuf += MT_RPC_FRAME_HDR_SZ;
   1635            packDev_t(buf, AssocGetWithAddress(((AddrMgrExtAddrValid(pBuf)) ? pBuf : NULL),
   1636                                            BUILD_UINT16(pBuf[Z_EXTADDR_LEN], pBuf[Z_EXTADDR_LEN+1])));
   1637          
   1638            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
   1639                                                 sizeof(associated_devices_t), buf);
   1640          }
   1641          
   1642          /***************************************************************************************************
   1643           * @fn      MT_UtilBindAddEntry
   1644           *
   1645           * @brief   Add Binding Entry into Local Table.
   1646           *
   1647           * @param   pBuf - pointer to the received buffer
   1648           *
   1649           * @return  void
   1650           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1651          static void MT_UtilBindAddEntry(uint8 *pBuf)
   \                     MT_UtilBindAddEntry:
   1652          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV       A,#-0x17
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1653            uint8 srcEp;
   1654            zAddrType_t dstAddr;
   1655            uint8 dstEp;
   1656            uint8 numClusterIds;
   1657            uint16 *clusterIds;
   1658            uint8 buf[sizeof(BindingEntry_t)];
   1659            uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8A82         MOV       DPL,R2
   \   000010   F583         MOV       DPH,A
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V7,A
   1660            pBuf += MT_RPC_FRAME_HDR_SZ;
   1661          
   1662            // Initialize the return buffer
   1663            osal_memset( buf, 0xFF, sizeof(BindingEntry_t) );
   \   000017                ; Setup parameters for call to function osal_memset
   \   000017   7C0E         MOV       R4,#0xe
   \   000019   7D00         MOV       R5,#0x0
   \   00001B   79FF         MOV       R1,#-0x1
   \   00001D   7409         MOV       A,#0x9
   \   00001F   12....       LCALL     ?XSTACK_DISP101_8
   \   000022   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1664            buf[2] = 0xFE;    // set the default value of INVALID_NODE_ADDR
   \   000025   740B         MOV       A,#0xb
   \   000027   12....       LCALL     ?XSTACK_DISP0_8
   \   00002A   74FE         MOV       A,#-0x2
   \   00002C   F0           MOVX      @DPTR,A
   1665            buf[3] = 0xFF;    // set the default value of INVALID_NODE_ADDR
   \   00002D   740C         MOV       A,#0xc
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   74FF         MOV       A,#-0x1
   \   000034   12....       LCALL     ?Subroutine12 & 0xFFFF
   1666          
   1667            srcEp = *pBuf++;
   \                     ??CrossCallReturnLabel_21:
   \   000037   F5..         MOV       ?V4,A
   1668          
   1669            // Destination Address mode
   1670            dstAddr.addrMode = *pBuf++;
   \   000039   8E82         MOV       DPL,R6
   \   00003B   8F83         MOV       DPH,R7
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F8           MOV       R0,A
   \   000043   7408         MOV       A,#0x8
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   E8           MOV       A,R0
   \   000049   F0           MOVX      @DPTR,A
   \   00004A   EE           MOV       A,R6
   \   00004B   2405         ADD       A,#0x5
   \   00004D   FE           MOV       R6,A
   \   00004E   5001         JNC       ??MT_UtilBindAddEntry_0
   \   000050   0F           INC       R7
   1671          
   1672            // Destination Address
   1673            if ( dstAddr.addrMode == Addr64Bit )
   \                     ??MT_UtilBindAddEntry_0:
   \   000051   7403         MOV       A,#0x3
   \   000053   68           XRL       A,R0
   \   000054   700D         JNZ       ??MT_UtilBindAddEntry_1
   1674            {
   1675              uint8 *ptr; // Use this additional pointer because *pBuf is incremented later for both cases
   1676          
   1677              ptr = pBuf;
   1678              osal_cpyExtAddr( dstAddr.addr.extAddr, ptr );
   \   000056                ; Setup parameters for call to function sAddrExtCpy
   \   000056   EE           MOV       A,R6
   \   000057   FC           MOV       R4,A
   \   000058   EF           MOV       A,R7
   \   000059   FD           MOV       R5,A
   \   00005A   AA..         MOV       R2,?XSP + 0
   \   00005C   AB..         MOV       R3,?XSP + 1
   \   00005E   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000061   8012         SJMP      ??MT_UtilBindAddEntry_2
   1679            }
   1680            else
   1681            {
   1682              dstAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??MT_UtilBindAddEntry_1:
   \   000063                ; Setup parameters for call to function osal_build_uint16
   \   000063   EE           MOV       A,R6
   \   000064   FA           MOV       R2,A
   \   000065   EF           MOV       A,R7
   \   000066   FB           MOV       R3,A
   \   000067   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00006A   85..82       MOV       DPL,?XSP + 0
   \   00006D   85..83       MOV       DPH,?XSP + 1
   \   000070   EA           MOV       A,R2
   \   000071   F0           MOVX      @DPTR,A
   \   000072   A3           INC       DPTR
   \   000073   EB           MOV       A,R3
   \   000074   F0           MOVX      @DPTR,A
   1683            }
   1684            // The short address occupies LSB two bytes
   1685            pBuf += Z_EXTADDR_LEN;
   1686          
   1687            // DstEPInt
   1688            dstEp = *pBuf++;
   \                     ??MT_UtilBindAddEntry_2:
   \   000075   8E82         MOV       DPL,R6
   \   000077   8F83         MOV       DPH,R7
   \   000079   A3           INC       DPTR
   \   00007A   A3           INC       DPTR
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   E0           MOVX      A,@DPTR
   \   000082   F5..         MOV       ?V5,A
   1689          
   1690            numClusterIds = *pBuf++;
   \   000084   8E82         MOV       DPL,R6
   \   000086   8F83         MOV       DPH,R7
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   E0           MOVX      A,@DPTR
   \   000092   F5..         MOV       ?V6,A
   1691          
   1692            if ( numClusterIds > 0 )
   \   000094   605E         JZ        ??MT_UtilBindAddEntry_3
   1693            {
   1694              // copy list of clusters
   1695              clusterIds = (uint16 *)osal_mem_alloc( numClusterIds * sizeof(uint16) );
   \   000096   25E0         ADD       A,0xE0 /* A   */
   \   000098   F5..         MOV       ?V2,A
   \   00009A   E4           CLR       A
   \   00009B   33           RLC       A
   \   00009C   F5..         MOV       ?V3,A
   \   00009E                ; Setup parameters for call to function osal_mem_alloc
   \   00009E   AA..         MOV       R2,?V2
   \   0000A0   FB           MOV       R3,A
   \   0000A1   12....       LCALL     ??Subroutine27_0 & 0xFFFF
   1696              osal_memcpy( clusterIds, pBuf, numClusterIds * sizeof(uint16));
   \                     ??CrossCallReturnLabel_48:
   \   0000A4                ; Setup parameters for call to function osal_memcpy
   \   0000A4   EE           MOV       A,R6
   \   0000A5   240A         ADD       A,#0xa
   \   0000A7   F5..         MOV       ?V8,A
   \   0000A9   E4           CLR       A
   \   0000AA   3F           ADDC      A,R7
   \   0000AB   F5..         MOV       ?V9,A
   \   0000AD   75..00       MOV       ?V10,#0x0
   \   0000B0   78..         MOV       R0,#?V8
   \   0000B2   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000B5   AC..         MOV       R4,?V2
   \   0000B7   AD..         MOV       R5,?V3
   \   0000B9   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0000BC   12....       LCALL     ?DEALLOC_XSTACK8
   1697          
   1698              if ( clusterIds != NULL )
   \   0000BF   E5..         MOV       A,?V0
   \   0000C1   45..         ORL       A,?V1
   \   0000C3   602F         JZ        ??MT_UtilBindAddEntry_3
   1699              {
   1700                // The response to MT interface has to be pack into buf
   1701                packBindEntry_t( buf, bindAddEntry( srcEp, &dstAddr, dstEp, numClusterIds, clusterIds ));
   \   0000C5                ; Setup parameters for call to function bindAddEntry
   \   0000C5   78..         MOV       R0,#?V0
   \   0000C7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000CA   AD..         MOV       R5,?V6
   \   0000CC   AC..         MOV       R4,?V5
   \   0000CE   7402         MOV       A,#0x2
   \   0000D0   12....       LCALL     ?XSTACK_DISP101_8
   \   0000D3   A9..         MOV       R1,?V4
   \   0000D5   12....       LCALL     `??bindAddEntry::?relay`; Banked call to: bindAddEntry
   \   0000D8   7402         MOV       A,#0x2
   \   0000DA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DD   8A..         MOV       ?V2,R2
   \   0000DF   8B..         MOV       ?V3,R3
   \   0000E1   AC..         MOV       R4,?V2
   \   0000E3   AD..         MOV       R5,?V3
   \   0000E5                ; Setup parameters for call to function packBindEntry_t
   \   0000E5   7409         MOV       A,#0x9
   \   0000E7   12....       LCALL     ?XSTACK_DISP101_8
   \   0000EA   12....       LCALL     `??packBindEntry_t::?relay`; Banked call to: packBindEntry_t
   1702          
   1703                osal_mem_free( clusterIds );
   \   0000ED                ; Setup parameters for call to function osal_mem_free
   \   0000ED   AA..         MOV       R2,?V0
   \   0000EF   AB..         MOV       R3,?V1
   \   0000F1   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1704              }
   1705            }
   1706          
   1707            MT_BuildAndSendZToolResponse( ( (uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL ),
   1708                                          cmdId, sizeof(BindingEntry_t), buf );
   \                     ??MT_UtilBindAddEntry_3:
   \   0000F4                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000F4   7409         MOV       A,#0x9
   \   0000F6   12....       LCALL     ?XSTACK_DISP102_8
   \   0000F9   7B0E         MOV       R3,#0xe
   \   0000FB   AA..         MOV       R2,?V7
   \   0000FD   7967         MOV       R1,#0x67
   \   0000FF   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1709          }
   \   000102   7417         MOV       A,#0x17
   \   000104   12....       LCALL     ?DEALLOC_XSTACK8
   \   000107   7F0B         MOV       R7,#0xb
   \   000109   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET
   1710          
   1711          /***************************************************************************************************
   1712           * @fn      packDev_t
   1713           *
   1714           * @brief   Pack an associated_devices_t structure into a byte buffer (pack INVALID_NODE_ADDR if
   1715           *          the pDev parameter is NULL).
   1716           *
   1717           * @param   pBuf - pointer to the buffer into which to pack the structure.
   1718           * @param   pDev - pointer to the structure.
   1719           *
   1720           * @return  void
   1721           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1722          static void packDev_t(uint8 *pBuf, associated_devices_t *pDev)
   \                     packDev_t:
   1723          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EB           MOV       A,R3
   \   000006   FF           MOV       R7,A
   \   000007   8C..         MOV       ?V0,R4
   \   000009   8D..         MOV       ?V1,R5
   1724            if (NULL == pDev)
   \   00000B   EC           MOV       A,R4
   \   00000C   4D           ORL       A,R5
   \   00000D   700E         JNZ       ??packDev_t_0
   1725            {
   1726              uint16 rtrn = INVALID_NODE_ADDR;
   1727              *pBuf++ = LO_UINT16(rtrn);
   \   00000F   8A82         MOV       DPL,R2
   \   000011   8B83         MOV       DPH,R3
   \   000013   74FE         MOV       A,#-0x2
   \   000015   F0           MOVX      @DPTR,A
   1728              *pBuf++ = HI_UINT16(rtrn);
   \   000016   A3           INC       DPTR
   \   000017   04           INC       A
   \   000018   F0           MOVX      @DPTR,A
   \   000019   EA           MOV       A,R2
   \   00001A   02....       LJMP      ??packDev_t_1 & 0xFFFF
   1729            }
   1730            else
   1731            {
   1732              *pBuf++ = LO_UINT16(pDev->shortAddr);
   \                     ??packDev_t_0:
   \   00001D   12....       LCALL     ?Subroutine3 & 0xFFFF
   1733              *pBuf++ = HI_UINT16(pDev->shortAddr);
   1734              *pBuf++ = LO_UINT16(pDev->addrIdx);
   \                     ??CrossCallReturnLabel_2:
   \   000020   35..         ADDC      A,?V1
   \   000022   12....       LCALL     ?Subroutine2 & 0xFFFF
   1735              *pBuf++ = HI_UINT16(pDev->addrIdx);
   1736              *pBuf++ = pDev->nodeRelation;
   1737              *pBuf++ = pDev->devStatus;
   \                     ??CrossCallReturnLabel_0:
   \   000025   8C82         MOV       DPL,R4
   \   000027   8D83         MOV       DPH,R5
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   12....       LCALL     ?Subroutine9 & 0xFFFF
   1738              *pBuf++ = pDev->assocCnt;
   \                     ??CrossCallReturnLabel_14:
   \   000031   8C82         MOV       DPL,R4
   \   000033   8D83         MOV       DPH,R5
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00003E   12....       LCALL     ?Subroutine13 & 0xFFFF
   1739              *pBuf++ = pDev->age;
   \                     ??CrossCallReturnLabel_55:
   \   000041   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000044   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   1740              *pBuf++ = pDev->linkInfo.txCounter;
   \                     ??CrossCallReturnLabel_57:
   \   000047   A3           INC       DPTR
   \   000048   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00004B   12....       LCALL     ?Subroutine13 & 0xFFFF
   1741              *pBuf++ = pDev->linkInfo.txCost;
   \                     ??CrossCallReturnLabel_56:
   \   00004E   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000051   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   1742              *pBuf++ = pDev->linkInfo.rxLqi;
   \                     ??CrossCallReturnLabel_58:
   \   000054   A3           INC       DPTR
   \   000055   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000058   A3           INC       DPTR
   \   000059   F0           MOVX      @DPTR,A
   1743              *pBuf++ = pDev->linkInfo.inKeySeqNum;
   \   00005A   EC           MOV       A,R4
   \   00005B   240B         ADD       A,#0xb
   \   00005D   F582         MOV       DPL,A
   \   00005F   E4           CLR       A
   \   000060   35..         ADDC      A,?V1
   \   000062   F583         MOV       DPH,A
   \   000064   E0           MOVX      A,@DPTR
   \   000065   C0E0         PUSH      A
   \   000067   EA           MOV       A,R2
   \   000068   240B         ADD       A,#0xb
   \   00006A   F582         MOV       DPL,A
   \   00006C   E4           CLR       A
   \   00006D   3F           ADDC      A,R7
   \   00006E   F583         MOV       DPH,A
   \   000070   D0E0         POP       A
   \   000072   F0           MOVX      @DPTR,A
   \   000073   EA           MOV       A,R2
   \   000074   240C         ADD       A,#0xc
   \   000076   FE           MOV       R6,A
   \   000077   5001         JNC       ??packDev_t_2
   \   000079   0F           INC       R7
   1744              osal_buffer_uint32( pBuf, pDev->linkInfo.inFrmCntr );
   \                     ??packDev_t_2:
   \   00007A                ; Setup parameters for call to function osal_buffer_uint32
   \   00007A   EC           MOV       A,R4
   \   00007B   240C         ADD       A,#0xc
   \   00007D   F582         MOV       DPL,A
   \   00007F   E4           CLR       A
   \   000080   35..         ADDC      A,?V1
   \   000082   F583         MOV       DPH,A
   \   000084   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000087   EE           MOV       A,R6
   \   000088   FA           MOV       R2,A
   \   000089   EF           MOV       A,R7
   \   00008A   FB           MOV       R3,A
   \   00008B   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00008E   7404         MOV       A,#0x4
   \   000090   12....       LCALL     ?DEALLOC_XSTACK8
   1745              *pBuf += 4;
   \   000093   8E82         MOV       DPL,R6
   \   000095   8F83         MOV       DPH,R7
   \   000097   E0           MOVX      A,@DPTR
   \   000098   2404         ADD       A,#0x4
   \   00009A   F0           MOVX      @DPTR,A
   1746              *pBuf++ = LO_UINT16(pDev->linkInfo.txFailure);
   \   00009B   E5..         MOV       A,?V0
   \   00009D   2410         ADD       A,#0x10
   \   00009F   F8           MOV       R0,A
   \   0000A0   E4           CLR       A
   \   0000A1   35..         ADDC      A,?V1
   \   0000A3   F9           MOV       R1,A
   \   0000A4   8882         MOV       DPL,R0
   \   0000A6   F583         MOV       DPH,A
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   8E82         MOV       DPL,R6
   \   0000AB   8F83         MOV       DPH,R7
   \   0000AD   F0           MOVX      @DPTR,A
   1747              *pBuf++ = HI_UINT16(pDev->linkInfo.txFailure);
   \   0000AE   8882         MOV       DPL,R0
   \   0000B0   8983         MOV       DPH,R1
   \   0000B2   A3           INC       DPTR
   \   0000B3   E0           MOVX      A,@DPTR
   \   0000B4   8E82         MOV       DPL,R6
   \   0000B6   8F83         MOV       DPH,R7
   \   0000B8   A3           INC       DPTR
   \   0000B9   F0           MOVX      @DPTR,A
   \   0000BA   EE           MOV       A,R6
   \                     ??packDev_t_1:
   \   0000BB   2402         ADD       A,#0x2
   1748            }
   1749          }
   \   0000BD   02....       LJMP      ??Subroutine29_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine30_0
   \   000001                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   8C82         MOV       DPL,R4
   \   000002   8D83         MOV       DPH,R5
   \   000004   E0           MOVX      A,@DPTR
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   8C82         MOV       DPL,R4
   \   00000C   8D83         MOV       DPH,R5
   \   00000E   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000011   F0           MOVX      @DPTR,A
   \   000012   EC           MOV       A,R4
   \   000013   2402         ADD       A,#0x2
   \   000015   F8           MOV       R0,A
   \   000016   E4           CLR       A
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine31_0
   \   000001                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F9           MOV       R1,A
   \   000001   8882         MOV       DPL,R0
   \   000003   F583         MOV       DPH,A
   \   000005   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000008   A3           INC       DPTR
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   8882         MOV       DPL,R0
   \   00000C   8983         MOV       DPH,R1
   \   00000E   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8C82         MOV       DPL,R4
   \   000014   8D83         MOV       DPH,R5
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00001C   A3           INC       DPTR
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET
   1750          
   1751          /***************************************************************************************************
   1752           * @fn      packBindEntry_t
   1753           *
   1754           * @brief   Pack a BindingEntry_t structure into a byte buffer (pack INVALID_NODE_ADDR
   1755           *          as dstIdx if the pBind parameter is NULL).
   1756           *
   1757           * @param   pBuf - pointer to the buffer into which to pack the structure.
   1758           * @param   pBind - pointer to the structure.
   1759           *
   1760           * @return  void
   1761           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1762          static void packBindEntry_t(uint8 *pBuf, BindingEntry_t *pBind)
   \                     packBindEntry_t:
   1763          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   1764            if ( NULL == pBind )
   \   000005   EC           MOV       A,R4
   \   000006   4D           ORL       A,R5
   \   000007   7021         JNZ       ??packBindEntry_t_0
   1765            {
   1766              uint16 rtrn = INVALID_NODE_ADDR;
   1767              *pBuf++ = 0xFF;
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   74FF         MOV       A,#-0x1
   \   00000F   F0           MOVX      @DPTR,A
   1768              *pBuf++ = 0xFF;
   \   000010   A3           INC       DPTR
   \   000011   F0           MOVX      @DPTR,A
   1769              *pBuf++ = LO_UINT16(rtrn);
   \   000012   8A82         MOV       DPL,R2
   \   000014   8B83         MOV       DPH,R3
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   14           DEC       A
   \   000019   12....       LCALL     ?Subroutine24 & 0xFFFF
   1770              *pBuf++ = HI_UINT16(rtrn);
   1771              *pBuf++ = 0xFF;
   1772              *pBuf++ = 0xFF;
   1773          
   1774            }
   \                     ??CrossCallReturnLabel_42:
   \   00001C   04           INC       A
   \   00001D   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000020   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000023   A3           INC       DPTR
   \   000024   F0           MOVX      @DPTR,A
   \   000025   EA           MOV       A,R2
   \   000026   2406         ADD       A,#0x6
   \   000028   8041         SJMP      ??packBindEntry_t_1
   1775            else
   1776            {
   1777              *pBuf++ = pBind->srcEP;
   \                     ??packBindEntry_t_0:
   \   00002A   12....       LCALL     ?Subroutine3 & 0xFFFF
   1778              *pBuf++ = pBind->dstGroupMode;
   1779              *pBuf++ = LO_UINT16( pBind->dstIdx );
   \                     ??CrossCallReturnLabel_3:
   \   00002D   3D           ADDC      A,R5
   \   00002E   12....       LCALL     ?Subroutine2 & 0xFFFF
   1780              *pBuf++ = HI_UINT16( pBind->dstIdx );
   1781              *pBuf++ = pBind->dstEP;
   1782              *pBuf++ = pBind->numClusterIds;
   \                     ??CrossCallReturnLabel_1:
   \   000031   EC           MOV       A,R4
   \   000032   2405         ADD       A,#0x5
   \   000034   F8           MOV       R0,A
   \   000035   E4           CLR       A
   \   000036   3D           ADDC      A,R5
   \   000037   F9           MOV       R1,A
   \   000038   E8           MOV       A,R0
   \   000039   FE           MOV       R6,A
   \   00003A   E9           MOV       A,R1
   \   00003B   8882         MOV       DPL,R0
   \   00003D   F583         MOV       DPH,A
   \   00003F   12....       LCALL     ?Subroutine9 & 0xFFFF
   1783          
   1784              osal_memcpy( pBuf, pBind->clusterIdList, pBind->numClusterIds * sizeof(uint16));
   \                     ??CrossCallReturnLabel_15:
   \   000042                ; Setup parameters for call to function osal_memcpy
   \   000042   EC           MOV       A,R4
   \   000043   2406         ADD       A,#0x6
   \   000045   F5..         MOV       ?V0,A
   \   000047   E4           CLR       A
   \   000048   3D           ADDC      A,R5
   \   000049   F5..         MOV       ?V1,A
   \   00004B   75..00       MOV       ?V2,#0x0
   \   00004E   78..         MOV       R0,#?V0
   \   000050   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000053   8E82         MOV       DPL,R6
   \   000055   8983         MOV       DPH,R1
   \   000057   E0           MOVX      A,@DPTR
   \   000058   25E0         ADD       A,0xE0 /* A   */
   \   00005A   FC           MOV       R4,A
   \   00005B   E4           CLR       A
   \   00005C   33           RLC       A
   \   00005D   FD           MOV       R5,A
   \   00005E   EA           MOV       A,R2
   \   00005F   2406         ADD       A,#0x6
   \   000061   FA           MOV       R2,A
   \   000062   5001         JNC       ??packBindEntry_t_2
   \   000064   0B           INC       R3
   \                     ??packBindEntry_t_2:
   \   000065   12....       LCALL     ?Subroutine18 & 0xFFFF
   1785            }
   \                     ??CrossCallReturnLabel_30:
   \   000068   12....       LCALL     ?DEALLOC_XSTACK8
   1786          }
   \                     ??packBindEntry_t_1:
   \   00006B   7F03         MOV       R7,#0x3
   \   00006D   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000003   A3           INC       DPTR
   \   000004   22           RET
   1787          
   1788          #if defined ZCL_KEY_ESTABLISH
   1789          /***************************************************************************************************
   1790           * @fn      MT_UtilzclGeneral_KeyEstablish_InitiateKeyEstablishment
   1791           *
   1792           * @brief   Proxy the zclKE_StartDirect() function.
   1793           *
   1794           * @param   pBuf - pointer to the received buffer
   1795           *
   1796           * @return  void
   1797           ***************************************************************************************************/
   1798          static void MT_UtilzclGeneral_KeyEstablish_InitiateKeyEstablishment(uint8 *pBuf)
   1799          {
   1800            afAddrType_t partnerAddr;
   1801            uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
   1802            pBuf += MT_RPC_FRAME_HDR_SZ;
   1803          
   1804            partnerAddr.panId = 0;  // Not an inter-pan message.
   1805            partnerAddr.endPoint = pBuf[2];
   1806            partnerAddr.addrMode = afAddr16Bit;
   1807            partnerAddr.addr.shortAddr = osal_build_uint16( &pBuf[4] );
   1808          
   1809            zcl_key_establish_task_id = pBuf[0];
   1810          
   1811            *pBuf = zclKE_StartDirect(MT_TaskID, &partnerAddr, pBuf[1], pBuf[3]);
   1812          
   1813            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, pBuf);
   1814          }
   1815          
   1816          /***************************************************************************************************
   1817           * @fn      MT_UtilzclGeneral_KeyEstablishment_ECDSASign
   1818           *
   1819           * @brief   Proxy the zclGeneral_KeyEstablishment_ECDSASign() function.
   1820           *
   1821           * @param   pBuf - pointer to the received buffer
   1822           *
   1823           * @return  void
   1824           ***************************************************************************************************/
   1825          static void MT_UtilzclGeneral_KeyEstablishment_ECDSASign(uint8 *pBuf)
   1826          {
   1827          #if defined ZCL_KEY_ESTABLISH
   1828            uint8 *output;
   1829            uint8 signLen;
   1830            uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
   1831            pBuf += MT_RPC_FRAME_HDR_SZ;
   1832          
   1833            signLen = zclKE_ECDSASignGetLen(ZCL_KE_SUITE_1);
   1834          
   1835            output = osal_mem_alloc(signLen+1);
   1836          
   1837            if (NULL == output)
   1838            {
   1839              *pBuf = FAILURE;
   1840              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, pBuf);
   1841            }
   1842            else
   1843            {
   1844              *output = zclKE_ECDSASign(ZCL_KE_SUITE_1, pBuf+1, *pBuf, output+1);
   1845              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
   1846                                                   signLen+1, output);
   1847              osal_mem_free(output);
   1848            }
   1849          #endif
   1850          }
   1851          
   1852          /***************************************************************************************************
   1853           * @fn      MT_UtilKeyEstablishInd
   1854           *
   1855           * @brief   Proxy the ZCL_KEY_ESTABLISH_IND command.
   1856           *
   1857           * @param   pInd - Pointer to a zclKE_StatusInd_t structure.
   1858           *
   1859           * @return  None
   1860           ***************************************************************************************************/
   1861          void MT_UtilKeyEstablishInd(zclKE_StatusInd_t *pInd)
   1862          {
   1863            uint8 msg[6];
   1864          
   1865            msg[0] = zcl_key_establish_task_id;
   1866            msg[1] = pInd->hdr.event;
   1867            msg[2] = pInd->hdr.status;
   1868            msg[3] = pInd->waitTime;
   1869            msg[4] = LO_UINT16(pInd->suites);
   1870            msg[5] = HI_UINT16(pInd->suites);
   1871          
   1872            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_UTIL),
   1873                                                 MT_UTIL_ZCL_KEY_ESTABLISH_IND, 6, msg);
   1874          }
   1875          #endif
   1876          
   1877          /***************************************************************************************************
   1878           * @fn      MT_UtilSync
   1879           *
   1880           * @brief   Process the MT_UTIL_SYNC command
   1881           *
   1882           * @param   None
   1883           *
   1884           * @return  None
   1885           ***************************************************************************************************/
   1886          static void MT_UtilSync(void)
   1887          {
   1888           MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ|(uint8)MT_RPC_SYS_UTIL),MT_UTIL_SYNC_REQ,0,0);
   1889          }
   1890          
   1891          /***************************************************************************************************
   1892           * @fn          MT_UtilGetDevNwkInfo
   1893           *
   1894           * @brief       Handle the Util get device network information.
   1895           *
   1896           * @param       pBuf - Pointer to the received message data.
   1897           *
   1898           * @return      NULL
   1899           ***************************************************************************************************/
   1900          static void MT_UtilGetDevNwkInfo( uint8 *pBuf )
   1901          {
   1902            uint8 buf[6];
   1903            uint8 *pMsg;
   1904          
   1905            pMsg = buf;
   1906          
   1907            *pMsg++ = LO_UINT16( _NIB.nwkDevAddress );
   1908            *pMsg++ = HI_UINT16( _NIB.nwkDevAddress );
   1909            *pMsg++ = LO_UINT16( _NIB.nwkPanId );
   1910            *pMsg++ = HI_UINT16( _NIB.nwkPanId );
   1911            *pMsg++ = _NIB.SequenceNum;
   1912            *pMsg++ = _NIB.nwkLogicalChannel;
   1913          
   1914            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
   1915                                                 MT_UTIL_GET_DEV_NWK_INFO, 6, buf );
   1916          }
   1917          
   1918          /***************************************************************************************************
   1919           * @fn          MT_UtiSetDevNwkInfo
   1920           *
   1921           * @brief       Handle the Util set device network information.
   1922           *
   1923           * @param       pBuf - Pointer to the received message data.
   1924           *
   1925           * @return      NULL
   1926           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1927          void MT_UtilSetDevNwkInfo( uint8 *pBuf )
   \                     MT_UtilSetDevNwkInfo:
   1928          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1929            uint8 *pMsg;
   1930            uint8 status = 0;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   E4           CLR       A
   \   000011   F0           MOVX      @DPTR,A
   1931            
   1932            pBuf += MT_RPC_FRAME_HDR_SZ;
   1933            pMsg = pBuf;
   \   000012   EA           MOV       A,R2
   \   000013   2403         ADD       A,#0x3
   \   000015   FE           MOV       R6,A
   \   000016   E4           CLR       A
   \   000017   3B           ADDC      A,R3
   \   000018   FF           MOV       R7,A
   1934          
   1935            _NIB.nwkDevAddress = osal_build_uint16(pMsg);
   \   000019                ; Setup parameters for call to function osal_build_uint16
   \   000019   0A           INC       R2
   \   00001A   0A           INC       R2
   \   00001B   0A           INC       R2
   \   00001C   FB           MOV       R3,A
   \   00001D   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000020   90....       MOV       DPTR,#_NIB + 20
   \   000023   EA           MOV       A,R2
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   EB           MOV       A,R3
   \   000027   F0           MOVX      @DPTR,A
   1936            pMsg += 2;
   \   000028   EE           MOV       A,R6
   \   000029   2402         ADD       A,#0x2
   \   00002B   FE           MOV       R6,A
   \   00002C   5001         JNC       ??MT_UtilSetDevNwkInfo_0
   \   00002E   0F           INC       R7
   1937            _NIB.nwkPanId = osal_build_uint16(pMsg);
   \                     ??MT_UtilSetDevNwkInfo_0:
   \   00002F                ; Setup parameters for call to function osal_build_uint16
   \   00002F   FA           MOV       R2,A
   \   000030   EF           MOV       A,R7
   \   000031   FB           MOV       R3,A
   \   000032   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000035   90....       MOV       DPTR,#_NIB + 33
   \   000038   EA           MOV       A,R2
   \   000039   F0           MOVX      @DPTR,A
   \   00003A   A3           INC       DPTR
   \   00003B   EB           MOV       A,R3
   \   00003C   F0           MOVX      @DPTR,A
   1938            pMsg += 2;
   1939            _NIB.SequenceNum = *pMsg++;
   \   00003D   8E82         MOV       DPL,R6
   \   00003F   8F83         MOV       DPH,R7
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   E0           MOVX      A,@DPTR
   \   000044   90....       MOV       DPTR,#_NIB
   \   000047   12....       LCALL     ?Subroutine12 & 0xFFFF
   1940            _NIB.nwkLogicalChannel = *pMsg++;
   \                     ??CrossCallReturnLabel_22:
   \   00004A   90....       MOV       DPTR,#_NIB + 22
   \   00004D   12....       LCALL     ?Subroutine11 & 0xFFFF
   1941          
   1942            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
   1943                                                 MT_UTIL_GET_DEV_NWK_INFO, 1, &status );
   \                     ??CrossCallReturnLabel_20:
   \   000050   7AA0         MOV       R2,#-0x60
   \   000052   7967         MOV       R1,#0x67
   \   000054   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1944          }
   \   000057   7401         MOV       A,#0x1
   \   000059   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005C   7F01         MOV       R7,#0x1
   \   00005E   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001   AC..         MOV       R4,?XSP + 0
   \   000003   AD..         MOV       R5,?XSP + 1
   \   000005   7B01         MOV       R3,#0x1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   12....       LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   \   000009                ; Setup parameters for call to function osal_nv_write
   \   000009                ; Setup parameters for call to function osal_nv_write
   \   000009   E5..         MOV       A,?V0
   \   00000B   2403         ADD       A,#0x3
   \   00000D   F5..         MOV       ?V0,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FE           MOV       R6,A
   \   000008                ; Setup parameters for call to function osal_build_uint16
   \   000008                ; Setup parameters for call to function osal_build_uint16
   \   000008   EA           MOV       A,R2
   \   000009   2403         ADD       A,#0x3
   \   00000B   FA           MOV       R2,A
   \   00000C   E4           CLR       A
   \   00000D   35..         ADDC      A,?V1
   \   00000F   FB           MOV       R3,A
   \   000010   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000003   A982         MOV       R1,DPL
   \   000005   AA83         MOV       R2,DPH
   \   000007   89..         MOV       ?V0,R1
   \   000009   8A..         MOV       ?V1,R2
   \   00000B   8F..         MOV       ?V2,R7
   \   00000D   78..         MOV       R0,#?V0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FE           MOV       R6,A
   \   000008                ; Setup parameters for call to function AssocFindDevice
   \   000008                ; Setup parameters for call to function osal_memcpy
   \   000008                ; Setup parameters for call to function osal_memcpy
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000
   1945          #endif /* !defined NONWK */
   1946          #endif /* MT_UTIL_FUNC */
   1947          /**************************************************************************************************
   1948           **************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1    123   MT_UtilBindAddEntry
        0     42   -> MT_BuildAndSendZToolResponse
        0     44   -> bindAddEntry
        0     42   -> osal_build_uint16
        0     42   -> osal_mem_alloc
        0     42   -> osal_mem_free
        0     45   -> osal_memcpy
        0     42   -> osal_memset
        0     42   -> packBindEntry_t
        0     42   -> sAddrExtCpy
      1     82   MT_UtilCommandProcessing
        0     78   -> AddrMgrEntryLookupExt
        0     78   -> AddrMgrEntryLookupNwk
        0     78   -> AddrMgrExtAddrValid
        0     78   -> AssocCount
        0     78   -> AssocFindDevice
        0     78   -> AssocGetWithAddress
        0     78   -> MT_BuildAndSendZToolResponse
        0     78   -> MT_UtilBindAddEntry
        0     78   -> MT_UtilGetDeviceInfo
        0     78   -> MT_UtilGetNvInfo
        0     78   -> MT_UtilGpioSetDirection
        0     78   -> MT_UtilGpioWrite
        0     78   -> MT_UtilSetDevNwkInfo
        0     78   -> NwkPollReq
        0     78   -> ZDSecMgrRequestAppKey
        0     78   -> osal_GetSystemClock
        0     82   -> osal_buffer_uint32
        0     78   -> osal_build_uint16
        0     78   -> osal_build_uint32
        0     81   -> osal_memcpy
        0     78   -> osal_nv_item_len
        0     82   -> osal_nv_write
        0     78   -> packDev_t
      1     99   MT_UtilGetDeviceInfo
        0     17   -> AssocMakeList
        0     17   -> MT_BuildAndSendZToolResponse
        0     17   -> NLME_GetShortAddr
        0     17   -> osal_mem_alloc
        0     17   -> osal_mem_free
        0     21   -> osal_nv_read
      1    104   MT_UtilGetNvInfo
        0     22   -> MT_BuildAndSendZToolResponse
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     22   -> osal_memset
        0     26   -> osal_nv_read
      1     94   MT_UtilGpioSetDirection
        0     16   -> MT_BuildAndSendZToolResponse
      1     97   MT_UtilGpioWrite
        0     19   -> MT_BuildAndSendZToolResponse
      0     88   MT_UtilSetDevNwkInfo
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> osal_build_uint16
      1     56   packBindEntry_t
        0     14   -> osal_memcpy
      1     92   packDev_t
        0     14   -> osal_buffer_uint32


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       9  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0}>
       6  ?<Constant {0, 0, 0, 0, 0, 0}>
       8  ??Subroutine27_0
       8  ??Subroutine28_0
       5  ??Subroutine29_0
       6  ??Subroutine30_0
       7  ??Subroutine31_0
       8  ?Subroutine0
       3  ?Subroutine1
      17  ?Subroutine10
       8  ?Subroutine11
      10  ?Subroutine12
       1  ?Subroutine13
       5  ?Subroutine14
      16  ?Subroutine15
       6  ?Subroutine16
       2  ?Subroutine17
       6  ?Subroutine18
      12  ?Subroutine19
      31  ?Subroutine2
      13  ?Subroutine20
       4  ?Subroutine21
      16  ?Subroutine22
       6  ?Subroutine23
       9  ?Subroutine24
      11  ?Subroutine25
       1  ?Subroutine26
      24  ?Subroutine3
      26  ?Subroutine4
      16  ?Subroutine5
      20  ?Subroutine6
       8  ?Subroutine7
       4  ?Subroutine8
       5  ?Subroutine9
     268  MT_UtilBindAddEntry
    1322  MT_UtilCommandProcessing
     313  MT_UtilGetDeviceInfo
     444  MT_UtilGetNvInfo
     241  MT_UtilGpioSetDirection
     280  MT_UtilGpioWrite
      97  MT_UtilSetDevNwkInfo
       1  P0DIR
       1  P1DIR
       1  P2DIR
       1  _A_P0
       1  _A_P1
       1  _A_P2
       4  __Constant_3e8
     112  packBindEntry_t
     192  packDev_t
      54  -- Other

 
 3 591 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
     6 bytes in segment SFR_AN
    19 bytes in segment XDATA_ROM_C
 
    54 bytes of CODE     memory
    15 bytes of CONST    memory (+ 4 bytes shared)
     0 bytes of DATA     memory (+ 6 bytes shared)
 3 591 bytes of HUGECODE memory

Errors: none
Warnings: none
